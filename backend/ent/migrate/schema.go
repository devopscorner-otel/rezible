// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// EnvironmentsColumns holds the columns for the "environments" table.
	EnvironmentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "archive_time", Type: field.TypeTime, Nullable: true},
		{Name: "name", Type: field.TypeString, Unique: true},
	}
	// EnvironmentsTable holds the schema information for the "environments" table.
	EnvironmentsTable = &schema.Table{
		Name:       "environments",
		Columns:    EnvironmentsColumns,
		PrimaryKey: []*schema.Column{EnvironmentsColumns[0]},
	}
	// FunctionalitiesColumns holds the columns for the "functionalities" table.
	FunctionalitiesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString},
	}
	// FunctionalitiesTable holds the schema information for the "functionalities" table.
	FunctionalitiesTable = &schema.Table{
		Name:       "functionalities",
		Columns:    FunctionalitiesColumns,
		PrimaryKey: []*schema.Column{FunctionalitiesColumns[0]},
	}
	// IncidentsColumns holds the columns for the "incidents" table.
	IncidentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "slug", Type: field.TypeString, Unique: true},
		{Name: "title", Type: field.TypeString},
		{Name: "private", Type: field.TypeBool, Default: false},
		{Name: "summary", Type: field.TypeString},
		{Name: "opened_at", Type: field.TypeTime},
		{Name: "modified_at", Type: field.TypeTime},
		{Name: "closed_at", Type: field.TypeTime},
		{Name: "provider_id", Type: field.TypeString},
		{Name: "chat_channel_id", Type: field.TypeString, Nullable: true},
		{Name: "analysis_id", Type: field.TypeUUID},
		{Name: "severity_id", Type: field.TypeUUID, Nullable: true},
		{Name: "type_id", Type: field.TypeUUID, Nullable: true},
	}
	// IncidentsTable holds the schema information for the "incidents" table.
	IncidentsTable = &schema.Table{
		Name:       "incidents",
		Columns:    IncidentsColumns,
		PrimaryKey: []*schema.Column{IncidentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "incidents_incident_severities_severity",
				Columns:    []*schema.Column{IncidentsColumns[11]},
				RefColumns: []*schema.Column{IncidentSeveritiesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "incidents_incident_types_type",
				Columns:    []*schema.Column{IncidentsColumns[12]},
				RefColumns: []*schema.Column{IncidentTypesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// IncidentDebriefsColumns holds the columns for the "incident_debriefs" table.
	IncidentDebriefsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "required", Type: field.TypeBool},
		{Name: "started", Type: field.TypeBool},
		{Name: "incident_id", Type: field.TypeUUID},
		{Name: "user_id", Type: field.TypeUUID},
	}
	// IncidentDebriefsTable holds the schema information for the "incident_debriefs" table.
	IncidentDebriefsTable = &schema.Table{
		Name:       "incident_debriefs",
		Columns:    IncidentDebriefsColumns,
		PrimaryKey: []*schema.Column{IncidentDebriefsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "incident_debriefs_incidents_debriefs",
				Columns:    []*schema.Column{IncidentDebriefsColumns[3]},
				RefColumns: []*schema.Column{IncidentsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "incident_debriefs_users_incident_debriefs",
				Columns:    []*schema.Column{IncidentDebriefsColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// IncidentDebriefMessagesColumns holds the columns for the "incident_debrief_messages" table.
	IncidentDebriefMessagesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"user", "assistant", "question"}},
		{Name: "requested_tool", Type: field.TypeEnum, Nullable: true, Enums: []string{"rating"}},
		{Name: "body", Type: field.TypeString, Size: 2147483647},
		{Name: "debrief_id", Type: field.TypeUUID},
		{Name: "question_id", Type: field.TypeUUID, Nullable: true},
	}
	// IncidentDebriefMessagesTable holds the schema information for the "incident_debrief_messages" table.
	IncidentDebriefMessagesTable = &schema.Table{
		Name:       "incident_debrief_messages",
		Columns:    IncidentDebriefMessagesColumns,
		PrimaryKey: []*schema.Column{IncidentDebriefMessagesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "incident_debrief_messages_incident_debriefs_messages",
				Columns:    []*schema.Column{IncidentDebriefMessagesColumns[5]},
				RefColumns: []*schema.Column{IncidentDebriefsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "incident_debrief_messages_incident_debrief_questions_from_question",
				Columns:    []*schema.Column{IncidentDebriefMessagesColumns[6]},
				RefColumns: []*schema.Column{IncidentDebriefQuestionsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// IncidentDebriefQuestionsColumns holds the columns for the "incident_debrief_questions" table.
	IncidentDebriefQuestionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "content", Type: field.TypeString, Size: 2147483647},
	}
	// IncidentDebriefQuestionsTable holds the schema information for the "incident_debrief_questions" table.
	IncidentDebriefQuestionsTable = &schema.Table{
		Name:       "incident_debrief_questions",
		Columns:    IncidentDebriefQuestionsColumns,
		PrimaryKey: []*schema.Column{IncidentDebriefQuestionsColumns[0]},
	}
	// IncidentDebriefSuggestionsColumns holds the columns for the "incident_debrief_suggestions" table.
	IncidentDebriefSuggestionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "content", Type: field.TypeString, Size: 2147483647},
		{Name: "incident_debrief_suggestions", Type: field.TypeUUID},
	}
	// IncidentDebriefSuggestionsTable holds the schema information for the "incident_debrief_suggestions" table.
	IncidentDebriefSuggestionsTable = &schema.Table{
		Name:       "incident_debrief_suggestions",
		Columns:    IncidentDebriefSuggestionsColumns,
		PrimaryKey: []*schema.Column{IncidentDebriefSuggestionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "incident_debrief_suggestions_incident_debriefs_suggestions",
				Columns:    []*schema.Column{IncidentDebriefSuggestionsColumns[2]},
				RefColumns: []*schema.Column{IncidentDebriefsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// IncidentEventsColumns holds the columns for the "incident_events" table.
	IncidentEventsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "timestamp", Type: field.TypeTime, Nullable: true},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"observation", "action", "decision", "context"}},
		{Name: "title", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "created_by", Type: field.TypeUUID},
		{Name: "sequence", Type: field.TypeInt},
		{Name: "is_draft", Type: field.TypeBool, Default: false},
		{Name: "incident_id", Type: field.TypeUUID},
	}
	// IncidentEventsTable holds the schema information for the "incident_events" table.
	IncidentEventsTable = &schema.Table{
		Name:       "incident_events",
		Columns:    IncidentEventsColumns,
		PrimaryKey: []*schema.Column{IncidentEventsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "incident_events_incidents_events",
				Columns:    []*schema.Column{IncidentEventsColumns[10]},
				RefColumns: []*schema.Column{IncidentsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "incidentevent_incident_id_timestamp_sequence",
				Unique:  true,
				Columns: []*schema.Column{IncidentEventsColumns[10], IncidentEventsColumns[1], IncidentEventsColumns[8]},
			},
		},
	}
	// IncidentEventContextsColumns holds the columns for the "incident_event_contexts" table.
	IncidentEventContextsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "system_state", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "decision_options", Type: field.TypeJSON, Nullable: true},
		{Name: "decision_rationale", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "involved_personnel", Type: field.TypeJSON, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "incident_event_context", Type: field.TypeUUID, Unique: true},
	}
	// IncidentEventContextsTable holds the schema information for the "incident_event_contexts" table.
	IncidentEventContextsTable = &schema.Table{
		Name:       "incident_event_contexts",
		Columns:    IncidentEventContextsColumns,
		PrimaryKey: []*schema.Column{IncidentEventContextsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "incident_event_contexts_incident_events_context",
				Columns:    []*schema.Column{IncidentEventContextsColumns[6]},
				RefColumns: []*schema.Column{IncidentEventsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// IncidentEventContributingFactorsColumns holds the columns for the "incident_event_contributing_factors" table.
	IncidentEventContributingFactorsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "factor_type", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "incident_event_factors", Type: field.TypeUUID},
	}
	// IncidentEventContributingFactorsTable holds the schema information for the "incident_event_contributing_factors" table.
	IncidentEventContributingFactorsTable = &schema.Table{
		Name:       "incident_event_contributing_factors",
		Columns:    IncidentEventContributingFactorsColumns,
		PrimaryKey: []*schema.Column{IncidentEventContributingFactorsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "incident_event_contributing_factors_incident_events_factors",
				Columns:    []*schema.Column{IncidentEventContributingFactorsColumns[4]},
				RefColumns: []*schema.Column{IncidentEventsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// IncidentEventEvidencesColumns holds the columns for the "incident_event_evidences" table.
	IncidentEventEvidencesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "evidence_type", Type: field.TypeEnum, Enums: []string{"log", "metric", "chat", "ticket", "other"}},
		{Name: "url", Type: field.TypeString},
		{Name: "title", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "incident_event_evidence", Type: field.TypeUUID},
	}
	// IncidentEventEvidencesTable holds the schema information for the "incident_event_evidences" table.
	IncidentEventEvidencesTable = &schema.Table{
		Name:       "incident_event_evidences",
		Columns:    IncidentEventEvidencesColumns,
		PrimaryKey: []*schema.Column{IncidentEventEvidencesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "incident_event_evidences_incident_events_evidence",
				Columns:    []*schema.Column{IncidentEventEvidencesColumns[6]},
				RefColumns: []*schema.Column{IncidentEventsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// IncidentEventSystemComponentsColumns holds the columns for the "incident_event_system_components" table.
	IncidentEventSystemComponentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "relationship", Type: field.TypeEnum, Enums: []string{"primary", "affected", "contributing"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "incident_event_id", Type: field.TypeUUID, Unique: true, Nullable: true},
		{Name: "system_component_id", Type: field.TypeUUID},
	}
	// IncidentEventSystemComponentsTable holds the schema information for the "incident_event_system_components" table.
	IncidentEventSystemComponentsTable = &schema.Table{
		Name:       "incident_event_system_components",
		Columns:    IncidentEventSystemComponentsColumns,
		PrimaryKey: []*schema.Column{IncidentEventSystemComponentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "incident_event_system_components_incident_event_system_components_event",
				Columns:    []*schema.Column{IncidentEventSystemComponentsColumns[3]},
				RefColumns: []*schema.Column{IncidentEventSystemComponentsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "incident_event_system_components_system_components_system_component",
				Columns:    []*schema.Column{IncidentEventSystemComponentsColumns[4]},
				RefColumns: []*schema.Column{SystemComponentsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "incidenteventsystemcomponent_incident_event_id_system_component_id",
				Unique:  true,
				Columns: []*schema.Column{IncidentEventSystemComponentsColumns[3], IncidentEventSystemComponentsColumns[4]},
			},
		},
	}
	// IncidentFieldsColumns holds the columns for the "incident_fields" table.
	IncidentFieldsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "archive_time", Type: field.TypeTime, Nullable: true},
		{Name: "name", Type: field.TypeString},
	}
	// IncidentFieldsTable holds the schema information for the "incident_fields" table.
	IncidentFieldsTable = &schema.Table{
		Name:       "incident_fields",
		Columns:    IncidentFieldsColumns,
		PrimaryKey: []*schema.Column{IncidentFieldsColumns[0]},
	}
	// IncidentFieldOptionsColumns holds the columns for the "incident_field_options" table.
	IncidentFieldOptionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "archive_time", Type: field.TypeTime, Nullable: true},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"custom", "derived"}},
		{Name: "value", Type: field.TypeString},
		{Name: "incident_field_id", Type: field.TypeUUID},
	}
	// IncidentFieldOptionsTable holds the schema information for the "incident_field_options" table.
	IncidentFieldOptionsTable = &schema.Table{
		Name:       "incident_field_options",
		Columns:    IncidentFieldOptionsColumns,
		PrimaryKey: []*schema.Column{IncidentFieldOptionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "incident_field_options_incident_fields_options",
				Columns:    []*schema.Column{IncidentFieldOptionsColumns[4]},
				RefColumns: []*schema.Column{IncidentFieldsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// IncidentLinksColumns holds the columns for the "incident_links" table.
	IncidentLinksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "link_type", Type: field.TypeEnum, Enums: []string{"parent", "child", "similar"}},
		{Name: "incident_id", Type: field.TypeUUID},
		{Name: "linked_incident_id", Type: field.TypeUUID},
	}
	// IncidentLinksTable holds the schema information for the "incident_links" table.
	IncidentLinksTable = &schema.Table{
		Name:       "incident_links",
		Columns:    IncidentLinksColumns,
		PrimaryKey: []*schema.Column{IncidentLinksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "incident_links_incidents_incident",
				Columns:    []*schema.Column{IncidentLinksColumns[3]},
				RefColumns: []*schema.Column{IncidentsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "incident_links_incidents_linked_incident",
				Columns:    []*schema.Column{IncidentLinksColumns[4]},
				RefColumns: []*schema.Column{IncidentsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "incidentlink_incident_id_linked_incident_id",
				Unique:  true,
				Columns: []*schema.Column{IncidentLinksColumns[3], IncidentLinksColumns[4]},
			},
		},
	}
	// IncidentMilestonesColumns holds the columns for the "incident_milestones" table.
	IncidentMilestonesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"impact", "detected", "investigating", "mitigated", "resolved"}},
		{Name: "time", Type: field.TypeTime},
		{Name: "incident_id", Type: field.TypeUUID},
	}
	// IncidentMilestonesTable holds the schema information for the "incident_milestones" table.
	IncidentMilestonesTable = &schema.Table{
		Name:       "incident_milestones",
		Columns:    IncidentMilestonesColumns,
		PrimaryKey: []*schema.Column{IncidentMilestonesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "incident_milestones_incidents_milestones",
				Columns:    []*schema.Column{IncidentMilestonesColumns[3]},
				RefColumns: []*schema.Column{IncidentsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// IncidentRolesColumns holds the columns for the "incident_roles" table.
	IncidentRolesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "archive_time", Type: field.TypeTime, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "provider_id", Type: field.TypeString},
		{Name: "required", Type: field.TypeBool, Default: false},
	}
	// IncidentRolesTable holds the schema information for the "incident_roles" table.
	IncidentRolesTable = &schema.Table{
		Name:       "incident_roles",
		Columns:    IncidentRolesColumns,
		PrimaryKey: []*schema.Column{IncidentRolesColumns[0]},
	}
	// IncidentRoleAssignmentsColumns holds the columns for the "incident_role_assignments" table.
	IncidentRoleAssignmentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "role_id", Type: field.TypeUUID},
		{Name: "incident_id", Type: field.TypeUUID},
		{Name: "user_id", Type: field.TypeUUID},
	}
	// IncidentRoleAssignmentsTable holds the schema information for the "incident_role_assignments" table.
	IncidentRoleAssignmentsTable = &schema.Table{
		Name:       "incident_role_assignments",
		Columns:    IncidentRoleAssignmentsColumns,
		PrimaryKey: []*schema.Column{IncidentRoleAssignmentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "incident_role_assignments_incident_roles_role",
				Columns:    []*schema.Column{IncidentRoleAssignmentsColumns[1]},
				RefColumns: []*schema.Column{IncidentRolesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "incident_role_assignments_incidents_incident",
				Columns:    []*schema.Column{IncidentRoleAssignmentsColumns[2]},
				RefColumns: []*schema.Column{IncidentsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "incident_role_assignments_users_user",
				Columns:    []*schema.Column{IncidentRoleAssignmentsColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// IncidentSeveritiesColumns holds the columns for the "incident_severities" table.
	IncidentSeveritiesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "archive_time", Type: field.TypeTime, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "color", Type: field.TypeString, Nullable: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
	}
	// IncidentSeveritiesTable holds the schema information for the "incident_severities" table.
	IncidentSeveritiesTable = &schema.Table{
		Name:       "incident_severities",
		Columns:    IncidentSeveritiesColumns,
		PrimaryKey: []*schema.Column{IncidentSeveritiesColumns[0]},
	}
	// IncidentTagsColumns holds the columns for the "incident_tags" table.
	IncidentTagsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "archive_time", Type: field.TypeTime, Nullable: true},
		{Name: "key", Type: field.TypeString},
		{Name: "value", Type: field.TypeString},
	}
	// IncidentTagsTable holds the schema information for the "incident_tags" table.
	IncidentTagsTable = &schema.Table{
		Name:       "incident_tags",
		Columns:    IncidentTagsColumns,
		PrimaryKey: []*schema.Column{IncidentTagsColumns[0]},
	}
	// IncidentTeamAssignmentsColumns holds the columns for the "incident_team_assignments" table.
	IncidentTeamAssignmentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "incident_id", Type: field.TypeUUID},
		{Name: "team_id", Type: field.TypeUUID},
	}
	// IncidentTeamAssignmentsTable holds the schema information for the "incident_team_assignments" table.
	IncidentTeamAssignmentsTable = &schema.Table{
		Name:       "incident_team_assignments",
		Columns:    IncidentTeamAssignmentsColumns,
		PrimaryKey: []*schema.Column{IncidentTeamAssignmentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "incident_team_assignments_incidents_incident",
				Columns:    []*schema.Column{IncidentTeamAssignmentsColumns[1]},
				RefColumns: []*schema.Column{IncidentsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "incident_team_assignments_teams_team",
				Columns:    []*schema.Column{IncidentTeamAssignmentsColumns[2]},
				RefColumns: []*schema.Column{TeamsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// IncidentTypesColumns holds the columns for the "incident_types" table.
	IncidentTypesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "archive_time", Type: field.TypeTime, Nullable: true},
		{Name: "name", Type: field.TypeString},
	}
	// IncidentTypesTable holds the schema information for the "incident_types" table.
	IncidentTypesTable = &schema.Table{
		Name:       "incident_types",
		Columns:    IncidentTypesColumns,
		PrimaryKey: []*schema.Column{IncidentTypesColumns[0]},
	}
	// MeetingSchedulesColumns holds the columns for the "meeting_schedules" table.
	MeetingSchedulesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "begin_minute", Type: field.TypeInt},
		{Name: "duration_minutes", Type: field.TypeInt},
		{Name: "start_date", Type: field.TypeTime},
		{Name: "repeats", Type: field.TypeEnum, Enums: []string{"daily", "weekly", "monthly"}},
		{Name: "repetition_step", Type: field.TypeInt, Default: 1},
		{Name: "week_days", Type: field.TypeJSON, Nullable: true},
		{Name: "monthly_on", Type: field.TypeEnum, Nullable: true, Enums: []string{"same_day", "same_weekday"}},
		{Name: "until_date", Type: field.TypeTime, Nullable: true},
		{Name: "num_repetitions", Type: field.TypeInt, Nullable: true},
	}
	// MeetingSchedulesTable holds the schema information for the "meeting_schedules" table.
	MeetingSchedulesTable = &schema.Table{
		Name:       "meeting_schedules",
		Columns:    MeetingSchedulesColumns,
		PrimaryKey: []*schema.Column{MeetingSchedulesColumns[0]},
	}
	// MeetingSessionsColumns holds the columns for the "meeting_sessions" table.
	MeetingSessionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "title", Type: field.TypeString},
		{Name: "started_at", Type: field.TypeTime},
		{Name: "ended_at", Type: field.TypeTime, Nullable: true},
		{Name: "document_name", Type: field.TypeString},
		{Name: "meeting_schedule_sessions", Type: field.TypeUUID, Nullable: true},
	}
	// MeetingSessionsTable holds the schema information for the "meeting_sessions" table.
	MeetingSessionsTable = &schema.Table{
		Name:       "meeting_sessions",
		Columns:    MeetingSessionsColumns,
		PrimaryKey: []*schema.Column{MeetingSessionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "meeting_sessions_meeting_schedules_sessions",
				Columns:    []*schema.Column{MeetingSessionsColumns[5]},
				RefColumns: []*schema.Column{MeetingSchedulesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// OncallAlertsColumns holds the columns for the "oncall_alerts" table.
	OncallAlertsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString},
		{Name: "timestamp", Type: field.TypeTime},
		{Name: "roster_id", Type: field.TypeUUID},
	}
	// OncallAlertsTable holds the schema information for the "oncall_alerts" table.
	OncallAlertsTable = &schema.Table{
		Name:       "oncall_alerts",
		Columns:    OncallAlertsColumns,
		PrimaryKey: []*schema.Column{OncallAlertsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "oncall_alerts_oncall_rosters_roster",
				Columns:    []*schema.Column{OncallAlertsColumns[3]},
				RefColumns: []*schema.Column{OncallRostersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// OncallAlertInstancesColumns holds the columns for the "oncall_alert_instances" table.
	OncallAlertInstancesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "acked_at", Type: field.TypeTime},
		{Name: "alert_id", Type: field.TypeUUID},
		{Name: "receiver_user_id", Type: field.TypeUUID},
	}
	// OncallAlertInstancesTable holds the schema information for the "oncall_alert_instances" table.
	OncallAlertInstancesTable = &schema.Table{
		Name:       "oncall_alert_instances",
		Columns:    OncallAlertInstancesColumns,
		PrimaryKey: []*schema.Column{OncallAlertInstancesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "oncall_alert_instances_oncall_alerts_instances",
				Columns:    []*schema.Column{OncallAlertInstancesColumns[3]},
				RefColumns: []*schema.Column{OncallAlertsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "oncall_alert_instances_users_receiver",
				Columns:    []*schema.Column{OncallAlertInstancesColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// OncallHandoverTemplatesColumns holds the columns for the "oncall_handover_templates" table.
	OncallHandoverTemplatesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "contents", Type: field.TypeBytes},
		{Name: "is_default", Type: field.TypeBool, Default: false},
	}
	// OncallHandoverTemplatesTable holds the schema information for the "oncall_handover_templates" table.
	OncallHandoverTemplatesTable = &schema.Table{
		Name:       "oncall_handover_templates",
		Columns:    OncallHandoverTemplatesColumns,
		PrimaryKey: []*schema.Column{OncallHandoverTemplatesColumns[0]},
	}
	// OncallRostersColumns holds the columns for the "oncall_rosters" table.
	OncallRostersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "archive_time", Type: field.TypeTime, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "slug", Type: field.TypeString, Unique: true},
		{Name: "provider_id", Type: field.TypeString, Unique: true},
		{Name: "timezone", Type: field.TypeString, Nullable: true},
		{Name: "chat_handle", Type: field.TypeString, Nullable: true},
		{Name: "chat_channel_id", Type: field.TypeString, Nullable: true},
		{Name: "handover_template_id", Type: field.TypeUUID, Nullable: true},
	}
	// OncallRostersTable holds the schema information for the "oncall_rosters" table.
	OncallRostersTable = &schema.Table{
		Name:       "oncall_rosters",
		Columns:    OncallRostersColumns,
		PrimaryKey: []*schema.Column{OncallRostersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "oncall_rosters_oncall_handover_templates_roster",
				Columns:    []*schema.Column{OncallRostersColumns[8]},
				RefColumns: []*schema.Column{OncallHandoverTemplatesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// OncallSchedulesColumns holds the columns for the "oncall_schedules" table.
	OncallSchedulesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "archive_time", Type: field.TypeTime, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "timezone", Type: field.TypeString, Nullable: true},
		{Name: "provider_id", Type: field.TypeString, Unique: true},
		{Name: "roster_id", Type: field.TypeUUID},
	}
	// OncallSchedulesTable holds the schema information for the "oncall_schedules" table.
	OncallSchedulesTable = &schema.Table{
		Name:       "oncall_schedules",
		Columns:    OncallSchedulesColumns,
		PrimaryKey: []*schema.Column{OncallSchedulesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "oncall_schedules_oncall_rosters_schedules",
				Columns:    []*schema.Column{OncallSchedulesColumns[5]},
				RefColumns: []*schema.Column{OncallRostersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// OncallScheduleParticipantsColumns holds the columns for the "oncall_schedule_participants" table.
	OncallScheduleParticipantsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "index", Type: field.TypeInt},
		{Name: "schedule_id", Type: field.TypeUUID},
		{Name: "user_id", Type: field.TypeUUID},
	}
	// OncallScheduleParticipantsTable holds the schema information for the "oncall_schedule_participants" table.
	OncallScheduleParticipantsTable = &schema.Table{
		Name:       "oncall_schedule_participants",
		Columns:    OncallScheduleParticipantsColumns,
		PrimaryKey: []*schema.Column{OncallScheduleParticipantsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "oncall_schedule_participants_oncall_schedules_participants",
				Columns:    []*schema.Column{OncallScheduleParticipantsColumns[2]},
				RefColumns: []*schema.Column{OncallSchedulesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "oncall_schedule_participants_users_user",
				Columns:    []*schema.Column{OncallScheduleParticipantsColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// OncallUserShiftsColumns holds the columns for the "oncall_user_shifts" table.
	OncallUserShiftsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "start_at", Type: field.TypeTime},
		{Name: "end_at", Type: field.TypeTime},
		{Name: "provider_id", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "user_id", Type: field.TypeUUID},
		{Name: "roster_id", Type: field.TypeUUID},
	}
	// OncallUserShiftsTable holds the schema information for the "oncall_user_shifts" table.
	OncallUserShiftsTable = &schema.Table{
		Name:       "oncall_user_shifts",
		Columns:    OncallUserShiftsColumns,
		PrimaryKey: []*schema.Column{OncallUserShiftsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "oncall_user_shifts_users_user",
				Columns:    []*schema.Column{OncallUserShiftsColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "oncall_user_shifts_oncall_rosters_roster",
				Columns:    []*schema.Column{OncallUserShiftsColumns[5]},
				RefColumns: []*schema.Column{OncallRostersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// OncallUserShiftAnnotationsColumns holds the columns for the "oncall_user_shift_annotations" table.
	OncallUserShiftAnnotationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "event_id", Type: field.TypeString},
		{Name: "event_kind", Type: field.TypeEnum, Enums: []string{"incident", "alert", "toil", "ping"}},
		{Name: "title", Type: field.TypeString},
		{Name: "occurred_at", Type: field.TypeTime},
		{Name: "minutes_occupied", Type: field.TypeInt},
		{Name: "notes", Type: field.TypeString, Size: 2147483647},
		{Name: "pinned", Type: field.TypeBool},
		{Name: "shift_id", Type: field.TypeUUID},
	}
	// OncallUserShiftAnnotationsTable holds the schema information for the "oncall_user_shift_annotations" table.
	OncallUserShiftAnnotationsTable = &schema.Table{
		Name:       "oncall_user_shift_annotations",
		Columns:    OncallUserShiftAnnotationsColumns,
		PrimaryKey: []*schema.Column{OncallUserShiftAnnotationsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "oncall_user_shift_annotations_oncall_user_shifts_annotations",
				Columns:    []*schema.Column{OncallUserShiftAnnotationsColumns[8]},
				RefColumns: []*schema.Column{OncallUserShiftsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// OncallUserShiftCoversColumns holds the columns for the "oncall_user_shift_covers" table.
	OncallUserShiftCoversColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "start_at", Type: field.TypeTime},
		{Name: "end_at", Type: field.TypeTime},
		{Name: "provider_id", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "shift_id", Type: field.TypeUUID},
		{Name: "user_id", Type: field.TypeUUID},
	}
	// OncallUserShiftCoversTable holds the schema information for the "oncall_user_shift_covers" table.
	OncallUserShiftCoversTable = &schema.Table{
		Name:       "oncall_user_shift_covers",
		Columns:    OncallUserShiftCoversColumns,
		PrimaryKey: []*schema.Column{OncallUserShiftCoversColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "oncall_user_shift_covers_oncall_user_shifts_covers",
				Columns:    []*schema.Column{OncallUserShiftCoversColumns[4]},
				RefColumns: []*schema.Column{OncallUserShiftsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "oncall_user_shift_covers_users_user",
				Columns:    []*schema.Column{OncallUserShiftCoversColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// OncallUserShiftHandoversColumns holds the columns for the "oncall_user_shift_handovers" table.
	OncallUserShiftHandoversColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "reminder_sent", Type: field.TypeBool, Default: false},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "sent_at", Type: field.TypeTime, Nullable: true},
		{Name: "contents", Type: field.TypeBytes},
		{Name: "shift_id", Type: field.TypeUUID, Unique: true},
	}
	// OncallUserShiftHandoversTable holds the schema information for the "oncall_user_shift_handovers" table.
	OncallUserShiftHandoversTable = &schema.Table{
		Name:       "oncall_user_shift_handovers",
		Columns:    OncallUserShiftHandoversColumns,
		PrimaryKey: []*schema.Column{OncallUserShiftHandoversColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "oncall_user_shift_handovers_oncall_user_shifts_handover",
				Columns:    []*schema.Column{OncallUserShiftHandoversColumns[6]},
				RefColumns: []*schema.Column{OncallUserShiftsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// ProviderConfigsColumns holds the columns for the "provider_configs" table.
	ProviderConfigsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "provider_type", Type: field.TypeEnum, Enums: []string{"auth_session", "users", "chat", "incidents", "oncall", "alerts", "ai"}},
		{Name: "provider_name", Type: field.TypeString},
		{Name: "provider_config", Type: field.TypeBytes},
		{Name: "enabled", Type: field.TypeBool, Default: true},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// ProviderConfigsTable holds the schema information for the "provider_configs" table.
	ProviderConfigsTable = &schema.Table{
		Name:       "provider_configs",
		Columns:    ProviderConfigsColumns,
		PrimaryKey: []*schema.Column{ProviderConfigsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "providerconfig_provider_name_provider_type",
				Unique:  true,
				Columns: []*schema.Column{ProviderConfigsColumns[2], ProviderConfigsColumns[1]},
			},
		},
	}
	// ProviderSyncHistoriesColumns holds the columns for the "provider_sync_histories" table.
	ProviderSyncHistoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "data_type", Type: field.TypeString},
		{Name: "started_at", Type: field.TypeTime},
		{Name: "finished_at", Type: field.TypeTime},
		{Name: "num_mutations", Type: field.TypeInt},
	}
	// ProviderSyncHistoriesTable holds the schema information for the "provider_sync_histories" table.
	ProviderSyncHistoriesTable = &schema.Table{
		Name:       "provider_sync_histories",
		Columns:    ProviderSyncHistoriesColumns,
		PrimaryKey: []*schema.Column{ProviderSyncHistoriesColumns[0]},
	}
	// RetrospectivesColumns holds the columns for the "retrospectives" table.
	RetrospectivesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "document_name", Type: field.TypeString},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"quick", "full"}},
		{Name: "state", Type: field.TypeEnum, Enums: []string{"draft", "in_review", "meeting", "closed"}},
		{Name: "incident_retrospective", Type: field.TypeUUID, Nullable: true},
	}
	// RetrospectivesTable holds the schema information for the "retrospectives" table.
	RetrospectivesTable = &schema.Table{
		Name:       "retrospectives",
		Columns:    RetrospectivesColumns,
		PrimaryKey: []*schema.Column{RetrospectivesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "retrospectives_incidents_retrospective",
				Columns:    []*schema.Column{RetrospectivesColumns[4]},
				RefColumns: []*schema.Column{IncidentsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// RetrospectiveDiscussionsColumns holds the columns for the "retrospective_discussions" table.
	RetrospectiveDiscussionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "content", Type: field.TypeBytes},
		{Name: "retrospective_id", Type: field.TypeUUID},
	}
	// RetrospectiveDiscussionsTable holds the schema information for the "retrospective_discussions" table.
	RetrospectiveDiscussionsTable = &schema.Table{
		Name:       "retrospective_discussions",
		Columns:    RetrospectiveDiscussionsColumns,
		PrimaryKey: []*schema.Column{RetrospectiveDiscussionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "retrospective_discussions_retrospectives_retrospective",
				Columns:    []*schema.Column{RetrospectiveDiscussionsColumns[2]},
				RefColumns: []*schema.Column{RetrospectivesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// RetrospectiveDiscussionRepliesColumns holds the columns for the "retrospective_discussion_replies" table.
	RetrospectiveDiscussionRepliesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "content", Type: field.TypeBytes},
		{Name: "retrospective_discussion_reply_discussion", Type: field.TypeUUID},
		{Name: "retrospective_discussion_reply_replies", Type: field.TypeUUID, Nullable: true},
	}
	// RetrospectiveDiscussionRepliesTable holds the schema information for the "retrospective_discussion_replies" table.
	RetrospectiveDiscussionRepliesTable = &schema.Table{
		Name:       "retrospective_discussion_replies",
		Columns:    RetrospectiveDiscussionRepliesColumns,
		PrimaryKey: []*schema.Column{RetrospectiveDiscussionRepliesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "retrospective_discussion_replies_retrospective_discussions_discussion",
				Columns:    []*schema.Column{RetrospectiveDiscussionRepliesColumns[2]},
				RefColumns: []*schema.Column{RetrospectiveDiscussionsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "retrospective_discussion_replies_retrospective_discussion_replies_replies",
				Columns:    []*schema.Column{RetrospectiveDiscussionRepliesColumns[3]},
				RefColumns: []*schema.Column{RetrospectiveDiscussionRepliesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// RetrospectiveReviewsColumns holds the columns for the "retrospective_reviews" table.
	RetrospectiveReviewsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "state", Type: field.TypeEnum, Enums: []string{"waiting", "request_changes", "approved"}},
		{Name: "retrospective_id", Type: field.TypeUUID},
		{Name: "requester_id", Type: field.TypeUUID},
		{Name: "reviewer_id", Type: field.TypeUUID},
		{Name: "retrospective_review_discussion", Type: field.TypeUUID, Nullable: true},
	}
	// RetrospectiveReviewsTable holds the schema information for the "retrospective_reviews" table.
	RetrospectiveReviewsTable = &schema.Table{
		Name:       "retrospective_reviews",
		Columns:    RetrospectiveReviewsColumns,
		PrimaryKey: []*schema.Column{RetrospectiveReviewsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "retrospective_reviews_retrospectives_retrospective",
				Columns:    []*schema.Column{RetrospectiveReviewsColumns[2]},
				RefColumns: []*schema.Column{RetrospectivesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "retrospective_reviews_users_requester",
				Columns:    []*schema.Column{RetrospectiveReviewsColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "retrospective_reviews_users_reviewer",
				Columns:    []*schema.Column{RetrospectiveReviewsColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "retrospective_reviews_retrospective_discussions_discussion",
				Columns:    []*schema.Column{RetrospectiveReviewsColumns[5]},
				RefColumns: []*schema.Column{RetrospectiveDiscussionsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// SystemAnalysesColumns holds the columns for the "system_analyses" table.
	SystemAnalysesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "incident_id", Type: field.TypeUUID},
	}
	// SystemAnalysesTable holds the schema information for the "system_analyses" table.
	SystemAnalysesTable = &schema.Table{
		Name:       "system_analyses",
		Columns:    SystemAnalysesColumns,
		PrimaryKey: []*schema.Column{SystemAnalysesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "system_analyses_incidents_incident",
				Columns:    []*schema.Column{SystemAnalysesColumns[3]},
				RefColumns: []*schema.Column{IncidentsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// SystemAnalysisComponentsColumns holds the columns for the "system_analysis_components" table.
	SystemAnalysisComponentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "pos_x", Type: field.TypeInt, Default: 0},
		{Name: "pos_y", Type: field.TypeInt, Default: 0},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "analysis_id", Type: field.TypeUUID},
		{Name: "component_id", Type: field.TypeUUID},
	}
	// SystemAnalysisComponentsTable holds the schema information for the "system_analysis_components" table.
	SystemAnalysisComponentsTable = &schema.Table{
		Name:       "system_analysis_components",
		Columns:    SystemAnalysisComponentsColumns,
		PrimaryKey: []*schema.Column{SystemAnalysisComponentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "system_analysis_components_system_analyses_analysis",
				Columns:    []*schema.Column{SystemAnalysisComponentsColumns[5]},
				RefColumns: []*schema.Column{SystemAnalysesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "system_analysis_components_system_components_component",
				Columns:    []*schema.Column{SystemAnalysisComponentsColumns[6]},
				RefColumns: []*schema.Column{SystemComponentsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "systemanalysiscomponent_component_id_analysis_id",
				Unique:  true,
				Columns: []*schema.Column{SystemAnalysisComponentsColumns[6], SystemAnalysisComponentsColumns[5]},
			},
		},
	}
	// SystemComponentsColumns holds the columns for the "system_components" table.
	SystemComponentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"service", "control", "feedback", "interface", "human_controller"}},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "properties", Type: field.TypeJSON},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// SystemComponentsTable holds the schema information for the "system_components" table.
	SystemComponentsTable = &schema.Table{
		Name:       "system_components",
		Columns:    SystemComponentsColumns,
		PrimaryKey: []*schema.Column{SystemComponentsColumns[0]},
	}
	// SystemComponentConstraintsColumns holds the columns for the "system_component_constraints" table.
	SystemComponentConstraintsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "component_id", Type: field.TypeUUID},
	}
	// SystemComponentConstraintsTable holds the schema information for the "system_component_constraints" table.
	SystemComponentConstraintsTable = &schema.Table{
		Name:       "system_component_constraints",
		Columns:    SystemComponentConstraintsColumns,
		PrimaryKey: []*schema.Column{SystemComponentConstraintsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "system_component_constraints_system_components_component",
				Columns:    []*schema.Column{SystemComponentConstraintsColumns[3]},
				RefColumns: []*schema.Column{SystemComponentsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// SystemComponentControlsColumns holds the columns for the "system_component_controls" table.
	SystemComponentControlsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "component_id", Type: field.TypeUUID},
	}
	// SystemComponentControlsTable holds the schema information for the "system_component_controls" table.
	SystemComponentControlsTable = &schema.Table{
		Name:       "system_component_controls",
		Columns:    SystemComponentControlsColumns,
		PrimaryKey: []*schema.Column{SystemComponentControlsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "system_component_controls_system_components_component",
				Columns:    []*schema.Column{SystemComponentControlsColumns[3]},
				RefColumns: []*schema.Column{SystemComponentsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// SystemComponentSignalsColumns holds the columns for the "system_component_signals" table.
	SystemComponentSignalsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "component_id", Type: field.TypeUUID},
	}
	// SystemComponentSignalsTable holds the schema information for the "system_component_signals" table.
	SystemComponentSignalsTable = &schema.Table{
		Name:       "system_component_signals",
		Columns:    SystemComponentSignalsColumns,
		PrimaryKey: []*schema.Column{SystemComponentSignalsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "system_component_signals_system_components_component",
				Columns:    []*schema.Column{SystemComponentSignalsColumns[3]},
				RefColumns: []*schema.Column{SystemComponentsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// SystemRelationshipsColumns holds the columns for the "system_relationships" table.
	SystemRelationshipsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "source_component_id", Type: field.TypeUUID},
		{Name: "target_component_id", Type: field.TypeUUID},
	}
	// SystemRelationshipsTable holds the schema information for the "system_relationships" table.
	SystemRelationshipsTable = &schema.Table{
		Name:       "system_relationships",
		Columns:    SystemRelationshipsColumns,
		PrimaryKey: []*schema.Column{SystemRelationshipsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "system_relationships_system_components_source_component",
				Columns:    []*schema.Column{SystemRelationshipsColumns[3]},
				RefColumns: []*schema.Column{SystemComponentsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "system_relationships_system_components_target_component",
				Columns:    []*schema.Column{SystemRelationshipsColumns[4]},
				RefColumns: []*schema.Column{SystemComponentsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "systemrelationship_source_component_id_target_component_id",
				Unique:  true,
				Columns: []*schema.Column{SystemRelationshipsColumns[3], SystemRelationshipsColumns[4]},
			},
		},
	}
	// SystemRelationshipControlActionsColumns holds the columns for the "system_relationship_control_actions" table.
	SystemRelationshipControlActionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "type", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "control_id", Type: field.TypeUUID},
		{Name: "relationship_id", Type: field.TypeUUID},
	}
	// SystemRelationshipControlActionsTable holds the schema information for the "system_relationship_control_actions" table.
	SystemRelationshipControlActionsTable = &schema.Table{
		Name:       "system_relationship_control_actions",
		Columns:    SystemRelationshipControlActionsColumns,
		PrimaryKey: []*schema.Column{SystemRelationshipControlActionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "system_relationship_control_actions_system_component_controls_control",
				Columns:    []*schema.Column{SystemRelationshipControlActionsColumns[4]},
				RefColumns: []*schema.Column{SystemComponentControlsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "system_relationship_control_actions_system_relationships_relationship",
				Columns:    []*schema.Column{SystemRelationshipControlActionsColumns[5]},
				RefColumns: []*schema.Column{SystemRelationshipsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "systemrelationshipcontrolaction_relationship_id_control_id",
				Unique:  true,
				Columns: []*schema.Column{SystemRelationshipControlActionsColumns[5], SystemRelationshipControlActionsColumns[4]},
			},
		},
	}
	// SystemRelationshipFeedbacksColumns holds the columns for the "system_relationship_feedbacks" table.
	SystemRelationshipFeedbacksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "type", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "signal_id", Type: field.TypeUUID},
		{Name: "relationship_id", Type: field.TypeUUID},
	}
	// SystemRelationshipFeedbacksTable holds the schema information for the "system_relationship_feedbacks" table.
	SystemRelationshipFeedbacksTable = &schema.Table{
		Name:       "system_relationship_feedbacks",
		Columns:    SystemRelationshipFeedbacksColumns,
		PrimaryKey: []*schema.Column{SystemRelationshipFeedbacksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "system_relationship_feedbacks_system_component_signals_signal",
				Columns:    []*schema.Column{SystemRelationshipFeedbacksColumns[4]},
				RefColumns: []*schema.Column{SystemComponentSignalsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "system_relationship_feedbacks_system_relationships_relationship",
				Columns:    []*schema.Column{SystemRelationshipFeedbacksColumns[5]},
				RefColumns: []*schema.Column{SystemRelationshipsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "systemrelationshipfeedback_relationship_id_signal_id",
				Unique:  true,
				Columns: []*schema.Column{SystemRelationshipFeedbacksColumns[5], SystemRelationshipFeedbacksColumns[4]},
			},
		},
	}
	// TasksColumns holds the columns for the "tasks" table.
	TasksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"cleanup", "detect", "mitigate", "prevent"}},
		{Name: "title", Type: field.TypeString},
		{Name: "issue_tracker_id", Type: field.TypeString, Nullable: true},
		{Name: "incident_id", Type: field.TypeUUID, Nullable: true},
		{Name: "assignee_id", Type: field.TypeUUID, Nullable: true},
		{Name: "creator_id", Type: field.TypeUUID, Nullable: true},
	}
	// TasksTable holds the schema information for the "tasks" table.
	TasksTable = &schema.Table{
		Name:       "tasks",
		Columns:    TasksColumns,
		PrimaryKey: []*schema.Column{TasksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tasks_incidents_tasks",
				Columns:    []*schema.Column{TasksColumns[4]},
				RefColumns: []*schema.Column{IncidentsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "tasks_users_assigned_tasks",
				Columns:    []*schema.Column{TasksColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "tasks_users_created_tasks",
				Columns:    []*schema.Column{TasksColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// TeamsColumns holds the columns for the "teams" table.
	TeamsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "slug", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeString},
		{Name: "chat_channel_id", Type: field.TypeString, Nullable: true},
		{Name: "timezone", Type: field.TypeString, Nullable: true},
	}
	// TeamsTable holds the schema information for the "teams" table.
	TeamsTable = &schema.Table{
		Name:       "teams",
		Columns:    TeamsColumns,
		PrimaryKey: []*schema.Column{TeamsColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString},
		{Name: "email", Type: field.TypeString},
		{Name: "chat_id", Type: field.TypeString, Nullable: true},
		{Name: "timezone", Type: field.TypeString, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// IncidentEnvironmentsColumns holds the columns for the "incident_environments" table.
	IncidentEnvironmentsColumns = []*schema.Column{
		{Name: "incident_id", Type: field.TypeUUID},
		{Name: "environment_id", Type: field.TypeUUID},
	}
	// IncidentEnvironmentsTable holds the schema information for the "incident_environments" table.
	IncidentEnvironmentsTable = &schema.Table{
		Name:       "incident_environments",
		Columns:    IncidentEnvironmentsColumns,
		PrimaryKey: []*schema.Column{IncidentEnvironmentsColumns[0], IncidentEnvironmentsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "incident_environments_incident_id",
				Columns:    []*schema.Column{IncidentEnvironmentsColumns[0]},
				RefColumns: []*schema.Column{IncidentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "incident_environments_environment_id",
				Columns:    []*schema.Column{IncidentEnvironmentsColumns[1]},
				RefColumns: []*schema.Column{EnvironmentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// IncidentFieldSelectionsColumns holds the columns for the "incident_field_selections" table.
	IncidentFieldSelectionsColumns = []*schema.Column{
		{Name: "incident_id", Type: field.TypeUUID},
		{Name: "incident_field_option_id", Type: field.TypeUUID},
	}
	// IncidentFieldSelectionsTable holds the schema information for the "incident_field_selections" table.
	IncidentFieldSelectionsTable = &schema.Table{
		Name:       "incident_field_selections",
		Columns:    IncidentFieldSelectionsColumns,
		PrimaryKey: []*schema.Column{IncidentFieldSelectionsColumns[0], IncidentFieldSelectionsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "incident_field_selections_incident_id",
				Columns:    []*schema.Column{IncidentFieldSelectionsColumns[0]},
				RefColumns: []*schema.Column{IncidentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "incident_field_selections_incident_field_option_id",
				Columns:    []*schema.Column{IncidentFieldSelectionsColumns[1]},
				RefColumns: []*schema.Column{IncidentFieldOptionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// IncidentTagAssignmentsColumns holds the columns for the "incident_tag_assignments" table.
	IncidentTagAssignmentsColumns = []*schema.Column{
		{Name: "incident_id", Type: field.TypeUUID},
		{Name: "incident_tag_id", Type: field.TypeUUID},
	}
	// IncidentTagAssignmentsTable holds the schema information for the "incident_tag_assignments" table.
	IncidentTagAssignmentsTable = &schema.Table{
		Name:       "incident_tag_assignments",
		Columns:    IncidentTagAssignmentsColumns,
		PrimaryKey: []*schema.Column{IncidentTagAssignmentsColumns[0], IncidentTagAssignmentsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "incident_tag_assignments_incident_id",
				Columns:    []*schema.Column{IncidentTagAssignmentsColumns[0]},
				RefColumns: []*schema.Column{IncidentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "incident_tag_assignments_incident_tag_id",
				Columns:    []*schema.Column{IncidentTagAssignmentsColumns[1]},
				RefColumns: []*schema.Column{IncidentTagsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// IncidentReviewSessionsColumns holds the columns for the "incident_review_sessions" table.
	IncidentReviewSessionsColumns = []*schema.Column{
		{Name: "incident_id", Type: field.TypeUUID},
		{Name: "meeting_session_id", Type: field.TypeUUID},
	}
	// IncidentReviewSessionsTable holds the schema information for the "incident_review_sessions" table.
	IncidentReviewSessionsTable = &schema.Table{
		Name:       "incident_review_sessions",
		Columns:    IncidentReviewSessionsColumns,
		PrimaryKey: []*schema.Column{IncidentReviewSessionsColumns[0], IncidentReviewSessionsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "incident_review_sessions_incident_id",
				Columns:    []*schema.Column{IncidentReviewSessionsColumns[0]},
				RefColumns: []*schema.Column{IncidentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "incident_review_sessions_meeting_session_id",
				Columns:    []*schema.Column{IncidentReviewSessionsColumns[1]},
				RefColumns: []*schema.Column{MeetingSessionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// IncidentDebriefQuestionIncidentFieldsColumns holds the columns for the "incident_debrief_question_incident_fields" table.
	IncidentDebriefQuestionIncidentFieldsColumns = []*schema.Column{
		{Name: "incident_debrief_question_id", Type: field.TypeUUID},
		{Name: "incident_field_id", Type: field.TypeUUID},
	}
	// IncidentDebriefQuestionIncidentFieldsTable holds the schema information for the "incident_debrief_question_incident_fields" table.
	IncidentDebriefQuestionIncidentFieldsTable = &schema.Table{
		Name:       "incident_debrief_question_incident_fields",
		Columns:    IncidentDebriefQuestionIncidentFieldsColumns,
		PrimaryKey: []*schema.Column{IncidentDebriefQuestionIncidentFieldsColumns[0], IncidentDebriefQuestionIncidentFieldsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "incident_debrief_question_incident_fields_incident_debrief_question_id",
				Columns:    []*schema.Column{IncidentDebriefQuestionIncidentFieldsColumns[0]},
				RefColumns: []*schema.Column{IncidentDebriefQuestionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "incident_debrief_question_incident_fields_incident_field_id",
				Columns:    []*schema.Column{IncidentDebriefQuestionIncidentFieldsColumns[1]},
				RefColumns: []*schema.Column{IncidentFieldsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// IncidentDebriefQuestionIncidentRolesColumns holds the columns for the "incident_debrief_question_incident_roles" table.
	IncidentDebriefQuestionIncidentRolesColumns = []*schema.Column{
		{Name: "incident_debrief_question_id", Type: field.TypeUUID},
		{Name: "incident_role_id", Type: field.TypeUUID},
	}
	// IncidentDebriefQuestionIncidentRolesTable holds the schema information for the "incident_debrief_question_incident_roles" table.
	IncidentDebriefQuestionIncidentRolesTable = &schema.Table{
		Name:       "incident_debrief_question_incident_roles",
		Columns:    IncidentDebriefQuestionIncidentRolesColumns,
		PrimaryKey: []*schema.Column{IncidentDebriefQuestionIncidentRolesColumns[0], IncidentDebriefQuestionIncidentRolesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "incident_debrief_question_incident_roles_incident_debrief_question_id",
				Columns:    []*schema.Column{IncidentDebriefQuestionIncidentRolesColumns[0]},
				RefColumns: []*schema.Column{IncidentDebriefQuestionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "incident_debrief_question_incident_roles_incident_role_id",
				Columns:    []*schema.Column{IncidentDebriefQuestionIncidentRolesColumns[1]},
				RefColumns: []*schema.Column{IncidentRolesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// IncidentDebriefQuestionIncidentSeveritiesColumns holds the columns for the "incident_debrief_question_incident_severities" table.
	IncidentDebriefQuestionIncidentSeveritiesColumns = []*schema.Column{
		{Name: "incident_debrief_question_id", Type: field.TypeUUID},
		{Name: "incident_severity_id", Type: field.TypeUUID},
	}
	// IncidentDebriefQuestionIncidentSeveritiesTable holds the schema information for the "incident_debrief_question_incident_severities" table.
	IncidentDebriefQuestionIncidentSeveritiesTable = &schema.Table{
		Name:       "incident_debrief_question_incident_severities",
		Columns:    IncidentDebriefQuestionIncidentSeveritiesColumns,
		PrimaryKey: []*schema.Column{IncidentDebriefQuestionIncidentSeveritiesColumns[0], IncidentDebriefQuestionIncidentSeveritiesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "incident_debrief_question_incident_severities_incident_debrief_question_id",
				Columns:    []*schema.Column{IncidentDebriefQuestionIncidentSeveritiesColumns[0]},
				RefColumns: []*schema.Column{IncidentDebriefQuestionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "incident_debrief_question_incident_severities_incident_severity_id",
				Columns:    []*schema.Column{IncidentDebriefQuestionIncidentSeveritiesColumns[1]},
				RefColumns: []*schema.Column{IncidentSeveritiesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// IncidentDebriefQuestionIncidentTagsColumns holds the columns for the "incident_debrief_question_incident_tags" table.
	IncidentDebriefQuestionIncidentTagsColumns = []*schema.Column{
		{Name: "incident_debrief_question_id", Type: field.TypeUUID},
		{Name: "incident_tag_id", Type: field.TypeUUID},
	}
	// IncidentDebriefQuestionIncidentTagsTable holds the schema information for the "incident_debrief_question_incident_tags" table.
	IncidentDebriefQuestionIncidentTagsTable = &schema.Table{
		Name:       "incident_debrief_question_incident_tags",
		Columns:    IncidentDebriefQuestionIncidentTagsColumns,
		PrimaryKey: []*schema.Column{IncidentDebriefQuestionIncidentTagsColumns[0], IncidentDebriefQuestionIncidentTagsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "incident_debrief_question_incident_tags_incident_debrief_question_id",
				Columns:    []*schema.Column{IncidentDebriefQuestionIncidentTagsColumns[0]},
				RefColumns: []*schema.Column{IncidentDebriefQuestionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "incident_debrief_question_incident_tags_incident_tag_id",
				Columns:    []*schema.Column{IncidentDebriefQuestionIncidentTagsColumns[1]},
				RefColumns: []*schema.Column{IncidentTagsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// IncidentDebriefQuestionIncidentTypesColumns holds the columns for the "incident_debrief_question_incident_types" table.
	IncidentDebriefQuestionIncidentTypesColumns = []*schema.Column{
		{Name: "incident_debrief_question_id", Type: field.TypeUUID},
		{Name: "incident_type_id", Type: field.TypeUUID},
	}
	// IncidentDebriefQuestionIncidentTypesTable holds the schema information for the "incident_debrief_question_incident_types" table.
	IncidentDebriefQuestionIncidentTypesTable = &schema.Table{
		Name:       "incident_debrief_question_incident_types",
		Columns:    IncidentDebriefQuestionIncidentTypesColumns,
		PrimaryKey: []*schema.Column{IncidentDebriefQuestionIncidentTypesColumns[0], IncidentDebriefQuestionIncidentTypesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "incident_debrief_question_incident_types_incident_debrief_question_id",
				Columns:    []*schema.Column{IncidentDebriefQuestionIncidentTypesColumns[0]},
				RefColumns: []*schema.Column{IncidentDebriefQuestionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "incident_debrief_question_incident_types_incident_type_id",
				Columns:    []*schema.Column{IncidentDebriefQuestionIncidentTypesColumns[1]},
				RefColumns: []*schema.Column{IncidentTypesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// MeetingScheduleOwningTeamColumns holds the columns for the "meeting_schedule_owning_team" table.
	MeetingScheduleOwningTeamColumns = []*schema.Column{
		{Name: "meeting_schedule_id", Type: field.TypeUUID},
		{Name: "team_id", Type: field.TypeUUID},
	}
	// MeetingScheduleOwningTeamTable holds the schema information for the "meeting_schedule_owning_team" table.
	MeetingScheduleOwningTeamTable = &schema.Table{
		Name:       "meeting_schedule_owning_team",
		Columns:    MeetingScheduleOwningTeamColumns,
		PrimaryKey: []*schema.Column{MeetingScheduleOwningTeamColumns[0], MeetingScheduleOwningTeamColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "meeting_schedule_owning_team_meeting_schedule_id",
				Columns:    []*schema.Column{MeetingScheduleOwningTeamColumns[0]},
				RefColumns: []*schema.Column{MeetingSchedulesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "meeting_schedule_owning_team_team_id",
				Columns:    []*schema.Column{MeetingScheduleOwningTeamColumns[1]},
				RefColumns: []*schema.Column{TeamsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// TeamUsersColumns holds the columns for the "team_users" table.
	TeamUsersColumns = []*schema.Column{
		{Name: "team_id", Type: field.TypeUUID},
		{Name: "user_id", Type: field.TypeUUID},
	}
	// TeamUsersTable holds the schema information for the "team_users" table.
	TeamUsersTable = &schema.Table{
		Name:       "team_users",
		Columns:    TeamUsersColumns,
		PrimaryKey: []*schema.Column{TeamUsersColumns[0], TeamUsersColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "team_users_team_id",
				Columns:    []*schema.Column{TeamUsersColumns[0]},
				RefColumns: []*schema.Column{TeamsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "team_users_user_id",
				Columns:    []*schema.Column{TeamUsersColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// TeamOncallRostersColumns holds the columns for the "team_oncall_rosters" table.
	TeamOncallRostersColumns = []*schema.Column{
		{Name: "team_id", Type: field.TypeUUID},
		{Name: "oncall_roster_id", Type: field.TypeUUID},
	}
	// TeamOncallRostersTable holds the schema information for the "team_oncall_rosters" table.
	TeamOncallRostersTable = &schema.Table{
		Name:       "team_oncall_rosters",
		Columns:    TeamOncallRostersColumns,
		PrimaryKey: []*schema.Column{TeamOncallRostersColumns[0], TeamOncallRostersColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "team_oncall_rosters_team_id",
				Columns:    []*schema.Column{TeamOncallRostersColumns[0]},
				RefColumns: []*schema.Column{TeamsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "team_oncall_rosters_oncall_roster_id",
				Columns:    []*schema.Column{TeamOncallRostersColumns[1]},
				RefColumns: []*schema.Column{OncallRostersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		EnvironmentsTable,
		FunctionalitiesTable,
		IncidentsTable,
		IncidentDebriefsTable,
		IncidentDebriefMessagesTable,
		IncidentDebriefQuestionsTable,
		IncidentDebriefSuggestionsTable,
		IncidentEventsTable,
		IncidentEventContextsTable,
		IncidentEventContributingFactorsTable,
		IncidentEventEvidencesTable,
		IncidentEventSystemComponentsTable,
		IncidentFieldsTable,
		IncidentFieldOptionsTable,
		IncidentLinksTable,
		IncidentMilestonesTable,
		IncidentRolesTable,
		IncidentRoleAssignmentsTable,
		IncidentSeveritiesTable,
		IncidentTagsTable,
		IncidentTeamAssignmentsTable,
		IncidentTypesTable,
		MeetingSchedulesTable,
		MeetingSessionsTable,
		OncallAlertsTable,
		OncallAlertInstancesTable,
		OncallHandoverTemplatesTable,
		OncallRostersTable,
		OncallSchedulesTable,
		OncallScheduleParticipantsTable,
		OncallUserShiftsTable,
		OncallUserShiftAnnotationsTable,
		OncallUserShiftCoversTable,
		OncallUserShiftHandoversTable,
		ProviderConfigsTable,
		ProviderSyncHistoriesTable,
		RetrospectivesTable,
		RetrospectiveDiscussionsTable,
		RetrospectiveDiscussionRepliesTable,
		RetrospectiveReviewsTable,
		SystemAnalysesTable,
		SystemAnalysisComponentsTable,
		SystemComponentsTable,
		SystemComponentConstraintsTable,
		SystemComponentControlsTable,
		SystemComponentSignalsTable,
		SystemRelationshipsTable,
		SystemRelationshipControlActionsTable,
		SystemRelationshipFeedbacksTable,
		TasksTable,
		TeamsTable,
		UsersTable,
		IncidentEnvironmentsTable,
		IncidentFieldSelectionsTable,
		IncidentTagAssignmentsTable,
		IncidentReviewSessionsTable,
		IncidentDebriefQuestionIncidentFieldsTable,
		IncidentDebriefQuestionIncidentRolesTable,
		IncidentDebriefQuestionIncidentSeveritiesTable,
		IncidentDebriefQuestionIncidentTagsTable,
		IncidentDebriefQuestionIncidentTypesTable,
		MeetingScheduleOwningTeamTable,
		TeamUsersTable,
		TeamOncallRostersTable,
	}
)

func init() {
	IncidentsTable.ForeignKeys[0].RefTable = IncidentSeveritiesTable
	IncidentsTable.ForeignKeys[1].RefTable = IncidentTypesTable
	IncidentDebriefsTable.ForeignKeys[0].RefTable = IncidentsTable
	IncidentDebriefsTable.ForeignKeys[1].RefTable = UsersTable
	IncidentDebriefMessagesTable.ForeignKeys[0].RefTable = IncidentDebriefsTable
	IncidentDebriefMessagesTable.ForeignKeys[1].RefTable = IncidentDebriefQuestionsTable
	IncidentDebriefSuggestionsTable.ForeignKeys[0].RefTable = IncidentDebriefsTable
	IncidentEventsTable.ForeignKeys[0].RefTable = IncidentsTable
	IncidentEventContextsTable.ForeignKeys[0].RefTable = IncidentEventsTable
	IncidentEventContributingFactorsTable.ForeignKeys[0].RefTable = IncidentEventsTable
	IncidentEventEvidencesTable.ForeignKeys[0].RefTable = IncidentEventsTable
	IncidentEventSystemComponentsTable.ForeignKeys[0].RefTable = IncidentEventSystemComponentsTable
	IncidentEventSystemComponentsTable.ForeignKeys[1].RefTable = SystemComponentsTable
	IncidentFieldOptionsTable.ForeignKeys[0].RefTable = IncidentFieldsTable
	IncidentLinksTable.ForeignKeys[0].RefTable = IncidentsTable
	IncidentLinksTable.ForeignKeys[1].RefTable = IncidentsTable
	IncidentMilestonesTable.ForeignKeys[0].RefTable = IncidentsTable
	IncidentRoleAssignmentsTable.ForeignKeys[0].RefTable = IncidentRolesTable
	IncidentRoleAssignmentsTable.ForeignKeys[1].RefTable = IncidentsTable
	IncidentRoleAssignmentsTable.ForeignKeys[2].RefTable = UsersTable
	IncidentTeamAssignmentsTable.ForeignKeys[0].RefTable = IncidentsTable
	IncidentTeamAssignmentsTable.ForeignKeys[1].RefTable = TeamsTable
	MeetingSessionsTable.ForeignKeys[0].RefTable = MeetingSchedulesTable
	OncallAlertsTable.ForeignKeys[0].RefTable = OncallRostersTable
	OncallAlertInstancesTable.ForeignKeys[0].RefTable = OncallAlertsTable
	OncallAlertInstancesTable.ForeignKeys[1].RefTable = UsersTable
	OncallRostersTable.ForeignKeys[0].RefTable = OncallHandoverTemplatesTable
	OncallSchedulesTable.ForeignKeys[0].RefTable = OncallRostersTable
	OncallScheduleParticipantsTable.ForeignKeys[0].RefTable = OncallSchedulesTable
	OncallScheduleParticipantsTable.ForeignKeys[1].RefTable = UsersTable
	OncallUserShiftsTable.ForeignKeys[0].RefTable = UsersTable
	OncallUserShiftsTable.ForeignKeys[1].RefTable = OncallRostersTable
	OncallUserShiftAnnotationsTable.ForeignKeys[0].RefTable = OncallUserShiftsTable
	OncallUserShiftCoversTable.ForeignKeys[0].RefTable = OncallUserShiftsTable
	OncallUserShiftCoversTable.ForeignKeys[1].RefTable = UsersTable
	OncallUserShiftHandoversTable.ForeignKeys[0].RefTable = OncallUserShiftsTable
	RetrospectivesTable.ForeignKeys[0].RefTable = IncidentsTable
	RetrospectiveDiscussionsTable.ForeignKeys[0].RefTable = RetrospectivesTable
	RetrospectiveDiscussionRepliesTable.ForeignKeys[0].RefTable = RetrospectiveDiscussionsTable
	RetrospectiveDiscussionRepliesTable.ForeignKeys[1].RefTable = RetrospectiveDiscussionRepliesTable
	RetrospectiveReviewsTable.ForeignKeys[0].RefTable = RetrospectivesTable
	RetrospectiveReviewsTable.ForeignKeys[1].RefTable = UsersTable
	RetrospectiveReviewsTable.ForeignKeys[2].RefTable = UsersTable
	RetrospectiveReviewsTable.ForeignKeys[3].RefTable = RetrospectiveDiscussionsTable
	SystemAnalysesTable.ForeignKeys[0].RefTable = IncidentsTable
	SystemAnalysisComponentsTable.ForeignKeys[0].RefTable = SystemAnalysesTable
	SystemAnalysisComponentsTable.ForeignKeys[1].RefTable = SystemComponentsTable
	SystemComponentConstraintsTable.ForeignKeys[0].RefTable = SystemComponentsTable
	SystemComponentControlsTable.ForeignKeys[0].RefTable = SystemComponentsTable
	SystemComponentSignalsTable.ForeignKeys[0].RefTable = SystemComponentsTable
	SystemRelationshipsTable.ForeignKeys[0].RefTable = SystemComponentsTable
	SystemRelationshipsTable.ForeignKeys[1].RefTable = SystemComponentsTable
	SystemRelationshipControlActionsTable.ForeignKeys[0].RefTable = SystemComponentControlsTable
	SystemRelationshipControlActionsTable.ForeignKeys[1].RefTable = SystemRelationshipsTable
	SystemRelationshipFeedbacksTable.ForeignKeys[0].RefTable = SystemComponentSignalsTable
	SystemRelationshipFeedbacksTable.ForeignKeys[1].RefTable = SystemRelationshipsTable
	TasksTable.ForeignKeys[0].RefTable = IncidentsTable
	TasksTable.ForeignKeys[1].RefTable = UsersTable
	TasksTable.ForeignKeys[2].RefTable = UsersTable
	IncidentEnvironmentsTable.ForeignKeys[0].RefTable = IncidentsTable
	IncidentEnvironmentsTable.ForeignKeys[1].RefTable = EnvironmentsTable
	IncidentFieldSelectionsTable.ForeignKeys[0].RefTable = IncidentsTable
	IncidentFieldSelectionsTable.ForeignKeys[1].RefTable = IncidentFieldOptionsTable
	IncidentTagAssignmentsTable.ForeignKeys[0].RefTable = IncidentsTable
	IncidentTagAssignmentsTable.ForeignKeys[1].RefTable = IncidentTagsTable
	IncidentReviewSessionsTable.ForeignKeys[0].RefTable = IncidentsTable
	IncidentReviewSessionsTable.ForeignKeys[1].RefTable = MeetingSessionsTable
	IncidentDebriefQuestionIncidentFieldsTable.ForeignKeys[0].RefTable = IncidentDebriefQuestionsTable
	IncidentDebriefQuestionIncidentFieldsTable.ForeignKeys[1].RefTable = IncidentFieldsTable
	IncidentDebriefQuestionIncidentRolesTable.ForeignKeys[0].RefTable = IncidentDebriefQuestionsTable
	IncidentDebriefQuestionIncidentRolesTable.ForeignKeys[1].RefTable = IncidentRolesTable
	IncidentDebriefQuestionIncidentSeveritiesTable.ForeignKeys[0].RefTable = IncidentDebriefQuestionsTable
	IncidentDebriefQuestionIncidentSeveritiesTable.ForeignKeys[1].RefTable = IncidentSeveritiesTable
	IncidentDebriefQuestionIncidentTagsTable.ForeignKeys[0].RefTable = IncidentDebriefQuestionsTable
	IncidentDebriefQuestionIncidentTagsTable.ForeignKeys[1].RefTable = IncidentTagsTable
	IncidentDebriefQuestionIncidentTypesTable.ForeignKeys[0].RefTable = IncidentDebriefQuestionsTable
	IncidentDebriefQuestionIncidentTypesTable.ForeignKeys[1].RefTable = IncidentTypesTable
	MeetingScheduleOwningTeamTable.ForeignKeys[0].RefTable = MeetingSchedulesTable
	MeetingScheduleOwningTeamTable.ForeignKeys[1].RefTable = TeamsTable
	TeamUsersTable.ForeignKeys[0].RefTable = TeamsTable
	TeamUsersTable.ForeignKeys[1].RefTable = UsersTable
	TeamOncallRostersTable.ForeignKeys[0].RefTable = TeamsTable
	TeamOncallRostersTable.ForeignKeys[1].RefTable = OncallRostersTable
}
