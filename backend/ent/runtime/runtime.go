// Code generated by ent, DO NOT EDIT.

package runtime

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/alert"
	"github.com/rezible/rezible/ent/alertmetrics"
	"github.com/rezible/rezible/ent/incident"
	"github.com/rezible/rezible/ent/incidentdebrief"
	"github.com/rezible/rezible/ent/incidentdebriefmessage"
	"github.com/rezible/rezible/ent/incidentdebriefquestion"
	"github.com/rezible/rezible/ent/incidentdebriefsuggestion"
	"github.com/rezible/rezible/ent/incidentevent"
	"github.com/rezible/rezible/ent/incidenteventcontext"
	"github.com/rezible/rezible/ent/incidenteventcontributingfactor"
	"github.com/rezible/rezible/ent/incidenteventevidence"
	"github.com/rezible/rezible/ent/incidenteventsystemcomponent"
	"github.com/rezible/rezible/ent/incidentfield"
	"github.com/rezible/rezible/ent/incidentfieldoption"
	"github.com/rezible/rezible/ent/incidentlink"
	"github.com/rezible/rezible/ent/incidentmilestone"
	"github.com/rezible/rezible/ent/incidentrole"
	"github.com/rezible/rezible/ent/incidentroleassignment"
	"github.com/rezible/rezible/ent/incidentseverity"
	"github.com/rezible/rezible/ent/incidenttag"
	"github.com/rezible/rezible/ent/incidentteamassignment"
	"github.com/rezible/rezible/ent/incidenttype"
	"github.com/rezible/rezible/ent/meetingschedule"
	"github.com/rezible/rezible/ent/meetingsession"
	"github.com/rezible/rezible/ent/oncallannotation"
	"github.com/rezible/rezible/ent/oncallannotationalertfeedback"
	"github.com/rezible/rezible/ent/oncallevent"
	"github.com/rezible/rezible/ent/oncallhandovertemplate"
	"github.com/rezible/rezible/ent/oncallroster"
	"github.com/rezible/rezible/ent/oncallrostermetrics"
	"github.com/rezible/rezible/ent/oncallschedule"
	"github.com/rezible/rezible/ent/oncallscheduleparticipant"
	"github.com/rezible/rezible/ent/oncallusershift"
	"github.com/rezible/rezible/ent/oncallusershifthandover"
	"github.com/rezible/rezible/ent/oncallusershiftmetrics"
	"github.com/rezible/rezible/ent/playbook"
	"github.com/rezible/rezible/ent/providerconfig"
	"github.com/rezible/rezible/ent/providersynchistory"
	"github.com/rezible/rezible/ent/retrospective"
	"github.com/rezible/rezible/ent/retrospectivediscussion"
	"github.com/rezible/rezible/ent/retrospectivediscussionreply"
	"github.com/rezible/rezible/ent/retrospectivereview"
	"github.com/rezible/rezible/ent/schema"
	"github.com/rezible/rezible/ent/systemanalysis"
	"github.com/rezible/rezible/ent/systemanalysiscomponent"
	"github.com/rezible/rezible/ent/systemanalysisrelationship"
	"github.com/rezible/rezible/ent/systemcomponent"
	"github.com/rezible/rezible/ent/systemcomponentconstraint"
	"github.com/rezible/rezible/ent/systemcomponentcontrol"
	"github.com/rezible/rezible/ent/systemcomponentkind"
	"github.com/rezible/rezible/ent/systemcomponentrelationship"
	"github.com/rezible/rezible/ent/systemcomponentsignal"
	"github.com/rezible/rezible/ent/systemhazard"
	"github.com/rezible/rezible/ent/systemrelationshipcontrolaction"
	"github.com/rezible/rezible/ent/systemrelationshipfeedbacksignal"
	"github.com/rezible/rezible/ent/task"
	"github.com/rezible/rezible/ent/team"
	"github.com/rezible/rezible/ent/tenant"
	"github.com/rezible/rezible/ent/ticket"
	"github.com/rezible/rezible/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/privacy"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	alertMixin := schema.Alert{}.Mixin()
	alert.Policy = privacy.NewPolicies(alertMixin[0], schema.Alert{})
	alert.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := alert.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	alertFields := schema.Alert{}.Fields()
	_ = alertFields
	// alertDescID is the schema descriptor for id field.
	alertDescID := alertFields[0].Descriptor()
	// alert.DefaultID holds the default value on creation for the id field.
	alert.DefaultID = alertDescID.Default.(func() uuid.UUID)
	alertmetricsMixin := schema.AlertMetrics{}.Mixin()
	alertmetrics.Policy = privacy.NewPolicies(alertmetricsMixin[0], schema.AlertMetrics{})
	alertmetrics.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := alertmetrics.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	alertmetricsFields := schema.AlertMetrics{}.Fields()
	_ = alertmetricsFields
	// alertmetricsDescID is the schema descriptor for id field.
	alertmetricsDescID := alertmetricsFields[0].Descriptor()
	// alertmetrics.DefaultID holds the default value on creation for the id field.
	alertmetrics.DefaultID = alertmetricsDescID.Default.(func() uuid.UUID)
	incidentMixin := schema.Incident{}.Mixin()
	incident.Policy = privacy.NewPolicies(incidentMixin[0], schema.Incident{})
	incident.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := incident.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	incidentFields := schema.Incident{}.Fields()
	_ = incidentFields
	// incidentDescPrivate is the schema descriptor for private field.
	incidentDescPrivate := incidentFields[3].Descriptor()
	// incident.DefaultPrivate holds the default value on creation for the private field.
	incident.DefaultPrivate = incidentDescPrivate.Default.(bool)
	// incidentDescID is the schema descriptor for id field.
	incidentDescID := incidentFields[0].Descriptor()
	// incident.DefaultID holds the default value on creation for the id field.
	incident.DefaultID = incidentDescID.Default.(func() uuid.UUID)
	incidentdebriefMixin := schema.IncidentDebrief{}.Mixin()
	incidentdebrief.Policy = privacy.NewPolicies(incidentdebriefMixin[0], schema.IncidentDebrief{})
	incidentdebrief.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := incidentdebrief.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	incidentdebriefFields := schema.IncidentDebrief{}.Fields()
	_ = incidentdebriefFields
	// incidentdebriefDescID is the schema descriptor for id field.
	incidentdebriefDescID := incidentdebriefFields[0].Descriptor()
	// incidentdebrief.DefaultID holds the default value on creation for the id field.
	incidentdebrief.DefaultID = incidentdebriefDescID.Default.(func() uuid.UUID)
	incidentdebriefmessageMixin := schema.IncidentDebriefMessage{}.Mixin()
	incidentdebriefmessage.Policy = privacy.NewPolicies(incidentdebriefmessageMixin[0], schema.IncidentDebriefMessage{})
	incidentdebriefmessage.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := incidentdebriefmessage.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	incidentdebriefmessageFields := schema.IncidentDebriefMessage{}.Fields()
	_ = incidentdebriefmessageFields
	// incidentdebriefmessageDescCreatedAt is the schema descriptor for created_at field.
	incidentdebriefmessageDescCreatedAt := incidentdebriefmessageFields[3].Descriptor()
	// incidentdebriefmessage.DefaultCreatedAt holds the default value on creation for the created_at field.
	incidentdebriefmessage.DefaultCreatedAt = incidentdebriefmessageDescCreatedAt.Default.(func() time.Time)
	// incidentdebriefmessageDescID is the schema descriptor for id field.
	incidentdebriefmessageDescID := incidentdebriefmessageFields[0].Descriptor()
	// incidentdebriefmessage.DefaultID holds the default value on creation for the id field.
	incidentdebriefmessage.DefaultID = incidentdebriefmessageDescID.Default.(func() uuid.UUID)
	incidentdebriefquestionMixin := schema.IncidentDebriefQuestion{}.Mixin()
	incidentdebriefquestion.Policy = privacy.NewPolicies(incidentdebriefquestionMixin[0], schema.IncidentDebriefQuestion{})
	incidentdebriefquestion.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := incidentdebriefquestion.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	incidentdebriefquestionFields := schema.IncidentDebriefQuestion{}.Fields()
	_ = incidentdebriefquestionFields
	// incidentdebriefquestionDescID is the schema descriptor for id field.
	incidentdebriefquestionDescID := incidentdebriefquestionFields[0].Descriptor()
	// incidentdebriefquestion.DefaultID holds the default value on creation for the id field.
	incidentdebriefquestion.DefaultID = incidentdebriefquestionDescID.Default.(func() uuid.UUID)
	incidentdebriefsuggestionMixin := schema.IncidentDebriefSuggestion{}.Mixin()
	incidentdebriefsuggestion.Policy = privacy.NewPolicies(incidentdebriefsuggestionMixin[0], schema.IncidentDebriefSuggestion{})
	incidentdebriefsuggestion.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := incidentdebriefsuggestion.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	incidentdebriefsuggestionFields := schema.IncidentDebriefSuggestion{}.Fields()
	_ = incidentdebriefsuggestionFields
	// incidentdebriefsuggestionDescID is the schema descriptor for id field.
	incidentdebriefsuggestionDescID := incidentdebriefsuggestionFields[0].Descriptor()
	// incidentdebriefsuggestion.DefaultID holds the default value on creation for the id field.
	incidentdebriefsuggestion.DefaultID = incidentdebriefsuggestionDescID.Default.(func() uuid.UUID)
	incidenteventMixin := schema.IncidentEvent{}.Mixin()
	incidentevent.Policy = privacy.NewPolicies(incidenteventMixin[0], schema.IncidentEvent{})
	incidentevent.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := incidentevent.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	incidenteventFields := schema.IncidentEvent{}.Fields()
	_ = incidenteventFields
	// incidenteventDescTitle is the schema descriptor for title field.
	incidenteventDescTitle := incidenteventFields[4].Descriptor()
	// incidentevent.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	incidentevent.TitleValidator = incidenteventDescTitle.Validators[0].(func(string) error)
	// incidenteventDescIsKey is the schema descriptor for is_key field.
	incidenteventDescIsKey := incidenteventFields[6].Descriptor()
	// incidentevent.DefaultIsKey holds the default value on creation for the is_key field.
	incidentevent.DefaultIsKey = incidenteventDescIsKey.Default.(bool)
	// incidenteventDescCreatedAt is the schema descriptor for created_at field.
	incidenteventDescCreatedAt := incidenteventFields[7].Descriptor()
	// incidentevent.DefaultCreatedAt holds the default value on creation for the created_at field.
	incidentevent.DefaultCreatedAt = incidenteventDescCreatedAt.Default.(func() time.Time)
	// incidenteventDescUpdatedAt is the schema descriptor for updated_at field.
	incidenteventDescUpdatedAt := incidenteventFields[8].Descriptor()
	// incidentevent.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	incidentevent.DefaultUpdatedAt = incidenteventDescUpdatedAt.Default.(func() time.Time)
	// incidentevent.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	incidentevent.UpdateDefaultUpdatedAt = incidenteventDescUpdatedAt.UpdateDefault.(func() time.Time)
	// incidenteventDescSequence is the schema descriptor for sequence field.
	incidenteventDescSequence := incidenteventFields[10].Descriptor()
	// incidentevent.DefaultSequence holds the default value on creation for the sequence field.
	incidentevent.DefaultSequence = incidenteventDescSequence.Default.(int)
	// incidenteventDescIsDraft is the schema descriptor for is_draft field.
	incidenteventDescIsDraft := incidenteventFields[11].Descriptor()
	// incidentevent.DefaultIsDraft holds the default value on creation for the is_draft field.
	incidentevent.DefaultIsDraft = incidenteventDescIsDraft.Default.(bool)
	// incidenteventDescID is the schema descriptor for id field.
	incidenteventDescID := incidenteventFields[0].Descriptor()
	// incidentevent.DefaultID holds the default value on creation for the id field.
	incidentevent.DefaultID = incidenteventDescID.Default.(func() uuid.UUID)
	incidenteventcontextMixin := schema.IncidentEventContext{}.Mixin()
	incidenteventcontext.Policy = privacy.NewPolicies(incidenteventcontextMixin[0], schema.IncidentEventContext{})
	incidenteventcontext.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := incidenteventcontext.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	incidenteventcontextFields := schema.IncidentEventContext{}.Fields()
	_ = incidenteventcontextFields
	// incidenteventcontextDescCreatedAt is the schema descriptor for created_at field.
	incidenteventcontextDescCreatedAt := incidenteventcontextFields[5].Descriptor()
	// incidenteventcontext.DefaultCreatedAt holds the default value on creation for the created_at field.
	incidenteventcontext.DefaultCreatedAt = incidenteventcontextDescCreatedAt.Default.(func() time.Time)
	// incidenteventcontextDescID is the schema descriptor for id field.
	incidenteventcontextDescID := incidenteventcontextFields[0].Descriptor()
	// incidenteventcontext.DefaultID holds the default value on creation for the id field.
	incidenteventcontext.DefaultID = incidenteventcontextDescID.Default.(func() uuid.UUID)
	incidenteventcontributingfactorMixin := schema.IncidentEventContributingFactor{}.Mixin()
	incidenteventcontributingfactor.Policy = privacy.NewPolicies(incidenteventcontributingfactorMixin[0], schema.IncidentEventContributingFactor{})
	incidenteventcontributingfactor.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := incidenteventcontributingfactor.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	incidenteventcontributingfactorFields := schema.IncidentEventContributingFactor{}.Fields()
	_ = incidenteventcontributingfactorFields
	// incidenteventcontributingfactorDescFactorType is the schema descriptor for factor_type field.
	incidenteventcontributingfactorDescFactorType := incidenteventcontributingfactorFields[1].Descriptor()
	// incidenteventcontributingfactor.FactorTypeValidator is a validator for the "factor_type" field. It is called by the builders before save.
	incidenteventcontributingfactor.FactorTypeValidator = incidenteventcontributingfactorDescFactorType.Validators[0].(func(string) error)
	// incidenteventcontributingfactorDescCreatedAt is the schema descriptor for created_at field.
	incidenteventcontributingfactorDescCreatedAt := incidenteventcontributingfactorFields[3].Descriptor()
	// incidenteventcontributingfactor.DefaultCreatedAt holds the default value on creation for the created_at field.
	incidenteventcontributingfactor.DefaultCreatedAt = incidenteventcontributingfactorDescCreatedAt.Default.(func() time.Time)
	// incidenteventcontributingfactorDescID is the schema descriptor for id field.
	incidenteventcontributingfactorDescID := incidenteventcontributingfactorFields[0].Descriptor()
	// incidenteventcontributingfactor.DefaultID holds the default value on creation for the id field.
	incidenteventcontributingfactor.DefaultID = incidenteventcontributingfactorDescID.Default.(func() uuid.UUID)
	incidenteventevidenceMixin := schema.IncidentEventEvidence{}.Mixin()
	incidenteventevidence.Policy = privacy.NewPolicies(incidenteventevidenceMixin[0], schema.IncidentEventEvidence{})
	incidenteventevidence.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := incidenteventevidence.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	incidenteventevidenceFields := schema.IncidentEventEvidence{}.Fields()
	_ = incidenteventevidenceFields
	// incidenteventevidenceDescURL is the schema descriptor for url field.
	incidenteventevidenceDescURL := incidenteventevidenceFields[2].Descriptor()
	// incidenteventevidence.URLValidator is a validator for the "url" field. It is called by the builders before save.
	incidenteventevidence.URLValidator = incidenteventevidenceDescURL.Validators[0].(func(string) error)
	// incidenteventevidenceDescTitle is the schema descriptor for title field.
	incidenteventevidenceDescTitle := incidenteventevidenceFields[3].Descriptor()
	// incidenteventevidence.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	incidenteventevidence.TitleValidator = incidenteventevidenceDescTitle.Validators[0].(func(string) error)
	// incidenteventevidenceDescCreatedAt is the schema descriptor for created_at field.
	incidenteventevidenceDescCreatedAt := incidenteventevidenceFields[5].Descriptor()
	// incidenteventevidence.DefaultCreatedAt holds the default value on creation for the created_at field.
	incidenteventevidence.DefaultCreatedAt = incidenteventevidenceDescCreatedAt.Default.(func() time.Time)
	// incidenteventevidenceDescID is the schema descriptor for id field.
	incidenteventevidenceDescID := incidenteventevidenceFields[0].Descriptor()
	// incidenteventevidence.DefaultID holds the default value on creation for the id field.
	incidenteventevidence.DefaultID = incidenteventevidenceDescID.Default.(func() uuid.UUID)
	incidenteventsystemcomponentMixin := schema.IncidentEventSystemComponent{}.Mixin()
	incidenteventsystemcomponent.Policy = privacy.NewPolicies(incidenteventsystemcomponentMixin[0], schema.IncidentEventSystemComponent{})
	incidenteventsystemcomponent.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := incidenteventsystemcomponent.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	incidenteventsystemcomponentFields := schema.IncidentEventSystemComponent{}.Fields()
	_ = incidenteventsystemcomponentFields
	// incidenteventsystemcomponentDescCreatedAt is the schema descriptor for created_at field.
	incidenteventsystemcomponentDescCreatedAt := incidenteventsystemcomponentFields[4].Descriptor()
	// incidenteventsystemcomponent.DefaultCreatedAt holds the default value on creation for the created_at field.
	incidenteventsystemcomponent.DefaultCreatedAt = incidenteventsystemcomponentDescCreatedAt.Default.(func() time.Time)
	// incidenteventsystemcomponentDescID is the schema descriptor for id field.
	incidenteventsystemcomponentDescID := incidenteventsystemcomponentFields[0].Descriptor()
	// incidenteventsystemcomponent.DefaultID holds the default value on creation for the id field.
	incidenteventsystemcomponent.DefaultID = incidenteventsystemcomponentDescID.Default.(func() uuid.UUID)
	incidentfieldMixin := schema.IncidentField{}.Mixin()
	incidentfield.Policy = privacy.NewPolicies(incidentfieldMixin[0], schema.IncidentField{})
	incidentfield.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := incidentfield.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	incidentfieldMixinHooks1 := incidentfieldMixin[1].Hooks()

	incidentfield.Hooks[1] = incidentfieldMixinHooks1[0]
	incidentfieldMixinInters1 := incidentfieldMixin[1].Interceptors()
	incidentfield.Interceptors[0] = incidentfieldMixinInters1[0]
	incidentfieldFields := schema.IncidentField{}.Fields()
	_ = incidentfieldFields
	// incidentfieldDescID is the schema descriptor for id field.
	incidentfieldDescID := incidentfieldFields[0].Descriptor()
	// incidentfield.DefaultID holds the default value on creation for the id field.
	incidentfield.DefaultID = incidentfieldDescID.Default.(func() uuid.UUID)
	incidentfieldoptionMixin := schema.IncidentFieldOption{}.Mixin()
	incidentfieldoption.Policy = privacy.NewPolicies(incidentfieldoptionMixin[0], schema.IncidentFieldOption{})
	incidentfieldoption.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := incidentfieldoption.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	incidentfieldoptionMixinHooks1 := incidentfieldoptionMixin[1].Hooks()

	incidentfieldoption.Hooks[1] = incidentfieldoptionMixinHooks1[0]
	incidentfieldoptionMixinInters1 := incidentfieldoptionMixin[1].Interceptors()
	incidentfieldoption.Interceptors[0] = incidentfieldoptionMixinInters1[0]
	incidentfieldoptionFields := schema.IncidentFieldOption{}.Fields()
	_ = incidentfieldoptionFields
	// incidentfieldoptionDescID is the schema descriptor for id field.
	incidentfieldoptionDescID := incidentfieldoptionFields[0].Descriptor()
	// incidentfieldoption.DefaultID holds the default value on creation for the id field.
	incidentfieldoption.DefaultID = incidentfieldoptionDescID.Default.(func() uuid.UUID)
	incidentlinkMixin := schema.IncidentLink{}.Mixin()
	incidentlink.Policy = privacy.NewPolicies(incidentlinkMixin[0], schema.IncidentLink{})
	incidentlink.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := incidentlink.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	incidentmilestoneMixin := schema.IncidentMilestone{}.Mixin()
	incidentmilestone.Policy = privacy.NewPolicies(incidentmilestoneMixin[0], schema.IncidentMilestone{})
	incidentmilestone.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := incidentmilestone.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	incidentmilestoneFields := schema.IncidentMilestone{}.Fields()
	_ = incidentmilestoneFields
	// incidentmilestoneDescID is the schema descriptor for id field.
	incidentmilestoneDescID := incidentmilestoneFields[0].Descriptor()
	// incidentmilestone.DefaultID holds the default value on creation for the id field.
	incidentmilestone.DefaultID = incidentmilestoneDescID.Default.(func() uuid.UUID)
	incidentroleMixin := schema.IncidentRole{}.Mixin()
	incidentrole.Policy = privacy.NewPolicies(incidentroleMixin[0], schema.IncidentRole{})
	incidentrole.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := incidentrole.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	incidentroleMixinHooks1 := incidentroleMixin[1].Hooks()

	incidentrole.Hooks[1] = incidentroleMixinHooks1[0]
	incidentroleMixinInters1 := incidentroleMixin[1].Interceptors()
	incidentrole.Interceptors[0] = incidentroleMixinInters1[0]
	incidentroleFields := schema.IncidentRole{}.Fields()
	_ = incidentroleFields
	// incidentroleDescRequired is the schema descriptor for required field.
	incidentroleDescRequired := incidentroleFields[3].Descriptor()
	// incidentrole.DefaultRequired holds the default value on creation for the required field.
	incidentrole.DefaultRequired = incidentroleDescRequired.Default.(bool)
	// incidentroleDescID is the schema descriptor for id field.
	incidentroleDescID := incidentroleFields[0].Descriptor()
	// incidentrole.DefaultID holds the default value on creation for the id field.
	incidentrole.DefaultID = incidentroleDescID.Default.(func() uuid.UUID)
	incidentroleassignmentMixin := schema.IncidentRoleAssignment{}.Mixin()
	incidentroleassignment.Policy = privacy.NewPolicies(incidentroleassignmentMixin[0], schema.IncidentRoleAssignment{})
	incidentroleassignment.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := incidentroleassignment.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	incidentroleassignmentFields := schema.IncidentRoleAssignment{}.Fields()
	_ = incidentroleassignmentFields
	// incidentroleassignmentDescID is the schema descriptor for id field.
	incidentroleassignmentDescID := incidentroleassignmentFields[0].Descriptor()
	// incidentroleassignment.DefaultID holds the default value on creation for the id field.
	incidentroleassignment.DefaultID = incidentroleassignmentDescID.Default.(func() uuid.UUID)
	incidentseverityMixin := schema.IncidentSeverity{}.Mixin()
	incidentseverity.Policy = privacy.NewPolicies(incidentseverityMixin[0], schema.IncidentSeverity{})
	incidentseverity.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := incidentseverity.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	incidentseverityMixinHooks1 := incidentseverityMixin[1].Hooks()

	incidentseverity.Hooks[1] = incidentseverityMixinHooks1[0]
	incidentseverityMixinInters1 := incidentseverityMixin[1].Interceptors()
	incidentseverity.Interceptors[0] = incidentseverityMixinInters1[0]
	incidentseverityFields := schema.IncidentSeverity{}.Fields()
	_ = incidentseverityFields
	// incidentseverityDescID is the schema descriptor for id field.
	incidentseverityDescID := incidentseverityFields[0].Descriptor()
	// incidentseverity.DefaultID holds the default value on creation for the id field.
	incidentseverity.DefaultID = incidentseverityDescID.Default.(func() uuid.UUID)
	incidenttagMixin := schema.IncidentTag{}.Mixin()
	incidenttag.Policy = privacy.NewPolicies(incidenttagMixin[0], schema.IncidentTag{})
	incidenttag.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := incidenttag.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	incidenttagMixinHooks1 := incidenttagMixin[1].Hooks()

	incidenttag.Hooks[1] = incidenttagMixinHooks1[0]
	incidenttagMixinInters1 := incidenttagMixin[1].Interceptors()
	incidenttag.Interceptors[0] = incidenttagMixinInters1[0]
	incidenttagFields := schema.IncidentTag{}.Fields()
	_ = incidenttagFields
	// incidenttagDescID is the schema descriptor for id field.
	incidenttagDescID := incidenttagFields[0].Descriptor()
	// incidenttag.DefaultID holds the default value on creation for the id field.
	incidenttag.DefaultID = incidenttagDescID.Default.(func() uuid.UUID)
	incidentteamassignmentMixin := schema.IncidentTeamAssignment{}.Mixin()
	incidentteamassignment.Policy = privacy.NewPolicies(incidentteamassignmentMixin[0], schema.IncidentTeamAssignment{})
	incidentteamassignment.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := incidentteamassignment.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	incidenttypeMixin := schema.IncidentType{}.Mixin()
	incidenttype.Policy = privacy.NewPolicies(incidenttypeMixin[0], schema.IncidentType{})
	incidenttype.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := incidenttype.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	incidenttypeMixinHooks1 := incidenttypeMixin[1].Hooks()

	incidenttype.Hooks[1] = incidenttypeMixinHooks1[0]
	incidenttypeMixinInters1 := incidenttypeMixin[1].Interceptors()
	incidenttype.Interceptors[0] = incidenttypeMixinInters1[0]
	incidenttypeFields := schema.IncidentType{}.Fields()
	_ = incidenttypeFields
	// incidenttypeDescID is the schema descriptor for id field.
	incidenttypeDescID := incidenttypeFields[0].Descriptor()
	// incidenttype.DefaultID holds the default value on creation for the id field.
	incidenttype.DefaultID = incidenttypeDescID.Default.(func() uuid.UUID)
	meetingscheduleMixin := schema.MeetingSchedule{}.Mixin()
	meetingschedule.Policy = privacy.NewPolicies(meetingscheduleMixin[0], schema.MeetingSchedule{})
	meetingschedule.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := meetingschedule.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	meetingscheduleMixinHooks1 := meetingscheduleMixin[1].Hooks()

	meetingschedule.Hooks[1] = meetingscheduleMixinHooks1[0]
	meetingscheduleMixinInters1 := meetingscheduleMixin[1].Interceptors()
	meetingschedule.Interceptors[0] = meetingscheduleMixinInters1[0]
	meetingscheduleFields := schema.MeetingSchedule{}.Fields()
	_ = meetingscheduleFields
	// meetingscheduleDescRepetitionStep is the schema descriptor for repetition_step field.
	meetingscheduleDescRepetitionStep := meetingscheduleFields[7].Descriptor()
	// meetingschedule.DefaultRepetitionStep holds the default value on creation for the repetition_step field.
	meetingschedule.DefaultRepetitionStep = meetingscheduleDescRepetitionStep.Default.(int)
	// meetingscheduleDescWeekDays is the schema descriptor for week_days field.
	meetingscheduleDescWeekDays := meetingscheduleFields[8].Descriptor()
	// meetingschedule.WeekDaysValidator is a validator for the "week_days" field. It is called by the builders before save.
	meetingschedule.WeekDaysValidator = meetingscheduleDescWeekDays.Validators[0].(func([]string) error)
	// meetingscheduleDescID is the schema descriptor for id field.
	meetingscheduleDescID := meetingscheduleFields[0].Descriptor()
	// meetingschedule.DefaultID holds the default value on creation for the id field.
	meetingschedule.DefaultID = meetingscheduleDescID.Default.(func() uuid.UUID)
	meetingsessionMixin := schema.MeetingSession{}.Mixin()
	meetingsession.Policy = privacy.NewPolicies(meetingsessionMixin[0], schema.MeetingSession{})
	meetingsession.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := meetingsession.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	meetingsessionFields := schema.MeetingSession{}.Fields()
	_ = meetingsessionFields
	// meetingsessionDescStartedAt is the schema descriptor for started_at field.
	meetingsessionDescStartedAt := meetingsessionFields[2].Descriptor()
	// meetingsession.DefaultStartedAt holds the default value on creation for the started_at field.
	meetingsession.DefaultStartedAt = meetingsessionDescStartedAt.Default.(func() time.Time)
	// meetingsessionDescID is the schema descriptor for id field.
	meetingsessionDescID := meetingsessionFields[0].Descriptor()
	// meetingsession.DefaultID holds the default value on creation for the id field.
	meetingsession.DefaultID = meetingsessionDescID.Default.(func() uuid.UUID)
	oncallannotationMixin := schema.OncallAnnotation{}.Mixin()
	oncallannotation.Policy = privacy.NewPolicies(oncallannotationMixin[0], schema.OncallAnnotation{})
	oncallannotation.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := oncallannotation.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	oncallannotationFields := schema.OncallAnnotation{}.Fields()
	_ = oncallannotationFields
	// oncallannotationDescCreatedAt is the schema descriptor for created_at field.
	oncallannotationDescCreatedAt := oncallannotationFields[4].Descriptor()
	// oncallannotation.DefaultCreatedAt holds the default value on creation for the created_at field.
	oncallannotation.DefaultCreatedAt = oncallannotationDescCreatedAt.Default.(func() time.Time)
	// oncallannotationDescID is the schema descriptor for id field.
	oncallannotationDescID := oncallannotationFields[0].Descriptor()
	// oncallannotation.DefaultID holds the default value on creation for the id field.
	oncallannotation.DefaultID = oncallannotationDescID.Default.(func() uuid.UUID)
	oncallannotationalertfeedbackMixin := schema.OncallAnnotationAlertFeedback{}.Mixin()
	oncallannotationalertfeedback.Policy = privacy.NewPolicies(oncallannotationalertfeedbackMixin[0], schema.OncallAnnotationAlertFeedback{})
	oncallannotationalertfeedback.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := oncallannotationalertfeedback.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	oncallannotationalertfeedbackFields := schema.OncallAnnotationAlertFeedback{}.Fields()
	_ = oncallannotationalertfeedbackFields
	// oncallannotationalertfeedbackDescID is the schema descriptor for id field.
	oncallannotationalertfeedbackDescID := oncallannotationalertfeedbackFields[0].Descriptor()
	// oncallannotationalertfeedback.DefaultID holds the default value on creation for the id field.
	oncallannotationalertfeedback.DefaultID = oncallannotationalertfeedbackDescID.Default.(func() uuid.UUID)
	oncalleventMixin := schema.OncallEvent{}.Mixin()
	oncallevent.Policy = privacy.NewPolicies(oncalleventMixin[0], schema.OncallEvent{})
	oncallevent.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := oncallevent.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	oncalleventFields := schema.OncallEvent{}.Fields()
	_ = oncalleventFields
	// oncalleventDescID is the schema descriptor for id field.
	oncalleventDescID := oncalleventFields[0].Descriptor()
	// oncallevent.DefaultID holds the default value on creation for the id field.
	oncallevent.DefaultID = oncalleventDescID.Default.(func() uuid.UUID)
	oncallhandovertemplateMixin := schema.OncallHandoverTemplate{}.Mixin()
	oncallhandovertemplate.Policy = privacy.NewPolicies(oncallhandovertemplateMixin[0], schema.OncallHandoverTemplate{})
	oncallhandovertemplate.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := oncallhandovertemplate.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	oncallhandovertemplateFields := schema.OncallHandoverTemplate{}.Fields()
	_ = oncallhandovertemplateFields
	// oncallhandovertemplateDescCreatedAt is the schema descriptor for created_at field.
	oncallhandovertemplateDescCreatedAt := oncallhandovertemplateFields[1].Descriptor()
	// oncallhandovertemplate.DefaultCreatedAt holds the default value on creation for the created_at field.
	oncallhandovertemplate.DefaultCreatedAt = oncallhandovertemplateDescCreatedAt.Default.(func() time.Time)
	// oncallhandovertemplateDescUpdatedAt is the schema descriptor for updated_at field.
	oncallhandovertemplateDescUpdatedAt := oncallhandovertemplateFields[2].Descriptor()
	// oncallhandovertemplate.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	oncallhandovertemplate.DefaultUpdatedAt = oncallhandovertemplateDescUpdatedAt.Default.(func() time.Time)
	// oncallhandovertemplateDescIsDefault is the schema descriptor for is_default field.
	oncallhandovertemplateDescIsDefault := oncallhandovertemplateFields[4].Descriptor()
	// oncallhandovertemplate.DefaultIsDefault holds the default value on creation for the is_default field.
	oncallhandovertemplate.DefaultIsDefault = oncallhandovertemplateDescIsDefault.Default.(bool)
	// oncallhandovertemplateDescID is the schema descriptor for id field.
	oncallhandovertemplateDescID := oncallhandovertemplateFields[0].Descriptor()
	// oncallhandovertemplate.DefaultID holds the default value on creation for the id field.
	oncallhandovertemplate.DefaultID = oncallhandovertemplateDescID.Default.(func() uuid.UUID)
	oncallrosterMixin := schema.OncallRoster{}.Mixin()
	oncallroster.Policy = privacy.NewPolicies(oncallrosterMixin[0], schema.OncallRoster{})
	oncallroster.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := oncallroster.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	oncallrosterMixinHooks1 := oncallrosterMixin[1].Hooks()

	oncallroster.Hooks[1] = oncallrosterMixinHooks1[0]
	oncallrosterMixinInters1 := oncallrosterMixin[1].Interceptors()
	oncallroster.Interceptors[0] = oncallrosterMixinInters1[0]
	oncallrosterFields := schema.OncallRoster{}.Fields()
	_ = oncallrosterFields
	// oncallrosterDescID is the schema descriptor for id field.
	oncallrosterDescID := oncallrosterFields[0].Descriptor()
	// oncallroster.DefaultID holds the default value on creation for the id field.
	oncallroster.DefaultID = oncallrosterDescID.Default.(func() uuid.UUID)
	oncallrostermetricsMixin := schema.OncallRosterMetrics{}.Mixin()
	oncallrostermetrics.Policy = privacy.NewPolicies(oncallrostermetricsMixin[0], schema.OncallRosterMetrics{})
	oncallrostermetrics.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := oncallrostermetrics.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	oncallrostermetricsFields := schema.OncallRosterMetrics{}.Fields()
	_ = oncallrostermetricsFields
	// oncallrostermetricsDescID is the schema descriptor for id field.
	oncallrostermetricsDescID := oncallrostermetricsFields[0].Descriptor()
	// oncallrostermetrics.DefaultID holds the default value on creation for the id field.
	oncallrostermetrics.DefaultID = oncallrostermetricsDescID.Default.(func() uuid.UUID)
	oncallscheduleMixin := schema.OncallSchedule{}.Mixin()
	oncallschedule.Policy = privacy.NewPolicies(oncallscheduleMixin[0], schema.OncallSchedule{})
	oncallschedule.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := oncallschedule.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	oncallscheduleMixinHooks1 := oncallscheduleMixin[1].Hooks()

	oncallschedule.Hooks[1] = oncallscheduleMixinHooks1[0]
	oncallscheduleMixinInters1 := oncallscheduleMixin[1].Interceptors()
	oncallschedule.Interceptors[0] = oncallscheduleMixinInters1[0]
	oncallscheduleFields := schema.OncallSchedule{}.Fields()
	_ = oncallscheduleFields
	// oncallscheduleDescID is the schema descriptor for id field.
	oncallscheduleDescID := oncallscheduleFields[0].Descriptor()
	// oncallschedule.DefaultID holds the default value on creation for the id field.
	oncallschedule.DefaultID = oncallscheduleDescID.Default.(func() uuid.UUID)
	oncallscheduleparticipantMixin := schema.OncallScheduleParticipant{}.Mixin()
	oncallscheduleparticipant.Policy = privacy.NewPolicies(oncallscheduleparticipantMixin[0], schema.OncallScheduleParticipant{})
	oncallscheduleparticipant.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := oncallscheduleparticipant.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	oncallscheduleparticipantFields := schema.OncallScheduleParticipant{}.Fields()
	_ = oncallscheduleparticipantFields
	// oncallscheduleparticipantDescID is the schema descriptor for id field.
	oncallscheduleparticipantDescID := oncallscheduleparticipantFields[0].Descriptor()
	// oncallscheduleparticipant.DefaultID holds the default value on creation for the id field.
	oncallscheduleparticipant.DefaultID = oncallscheduleparticipantDescID.Default.(func() uuid.UUID)
	oncallusershiftMixin := schema.OncallUserShift{}.Mixin()
	oncallusershift.Policy = privacy.NewPolicies(oncallusershiftMixin[0], schema.OncallUserShift{})
	oncallusershift.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := oncallusershift.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	oncallusershiftFields := schema.OncallUserShift{}.Fields()
	_ = oncallusershiftFields
	// oncallusershiftDescID is the schema descriptor for id field.
	oncallusershiftDescID := oncallusershiftFields[0].Descriptor()
	// oncallusershift.DefaultID holds the default value on creation for the id field.
	oncallusershift.DefaultID = oncallusershiftDescID.Default.(func() uuid.UUID)
	oncallusershifthandoverMixin := schema.OncallUserShiftHandover{}.Mixin()
	oncallusershifthandover.Policy = privacy.NewPolicies(oncallusershifthandoverMixin[0], schema.OncallUserShiftHandover{})
	oncallusershifthandover.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := oncallusershifthandover.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	oncallusershifthandoverFields := schema.OncallUserShiftHandover{}.Fields()
	_ = oncallusershifthandoverFields
	// oncallusershifthandoverDescReminderSent is the schema descriptor for reminder_sent field.
	oncallusershifthandoverDescReminderSent := oncallusershifthandoverFields[3].Descriptor()
	// oncallusershifthandover.DefaultReminderSent holds the default value on creation for the reminder_sent field.
	oncallusershifthandover.DefaultReminderSent = oncallusershifthandoverDescReminderSent.Default.(bool)
	// oncallusershifthandoverDescUpdatedAt is the schema descriptor for updated_at field.
	oncallusershifthandoverDescUpdatedAt := oncallusershifthandoverFields[4].Descriptor()
	// oncallusershifthandover.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	oncallusershifthandover.DefaultUpdatedAt = oncallusershifthandoverDescUpdatedAt.Default.(func() time.Time)
	// oncallusershifthandoverDescID is the schema descriptor for id field.
	oncallusershifthandoverDescID := oncallusershifthandoverFields[0].Descriptor()
	// oncallusershifthandover.DefaultID holds the default value on creation for the id field.
	oncallusershifthandover.DefaultID = oncallusershifthandoverDescID.Default.(func() uuid.UUID)
	oncallusershiftmetricsMixin := schema.OncallUserShiftMetrics{}.Mixin()
	oncallusershiftmetrics.Policy = privacy.NewPolicies(oncallusershiftmetricsMixin[0], schema.OncallUserShiftMetrics{})
	oncallusershiftmetrics.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := oncallusershiftmetrics.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	oncallusershiftmetricsFields := schema.OncallUserShiftMetrics{}.Fields()
	_ = oncallusershiftmetricsFields
	// oncallusershiftmetricsDescID is the schema descriptor for id field.
	oncallusershiftmetricsDescID := oncallusershiftmetricsFields[0].Descriptor()
	// oncallusershiftmetrics.DefaultID holds the default value on creation for the id field.
	oncallusershiftmetrics.DefaultID = oncallusershiftmetricsDescID.Default.(func() uuid.UUID)
	playbookMixin := schema.Playbook{}.Mixin()
	playbook.Policy = privacy.NewPolicies(playbookMixin[0], schema.Playbook{})
	playbook.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := playbook.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	playbookFields := schema.Playbook{}.Fields()
	_ = playbookFields
	// playbookDescID is the schema descriptor for id field.
	playbookDescID := playbookFields[0].Descriptor()
	// playbook.DefaultID holds the default value on creation for the id field.
	playbook.DefaultID = playbookDescID.Default.(func() uuid.UUID)
	providerconfigMixin := schema.ProviderConfig{}.Mixin()
	providerconfig.Policy = privacy.NewPolicies(providerconfigMixin[0], schema.ProviderConfig{})
	providerconfig.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := providerconfig.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	providerconfigFields := schema.ProviderConfig{}.Fields()
	_ = providerconfigFields
	// providerconfigDescEnabled is the schema descriptor for enabled field.
	providerconfigDescEnabled := providerconfigFields[4].Descriptor()
	// providerconfig.DefaultEnabled holds the default value on creation for the enabled field.
	providerconfig.DefaultEnabled = providerconfigDescEnabled.Default.(bool)
	// providerconfigDescUpdatedAt is the schema descriptor for updated_at field.
	providerconfigDescUpdatedAt := providerconfigFields[5].Descriptor()
	// providerconfig.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	providerconfig.DefaultUpdatedAt = providerconfigDescUpdatedAt.Default.(func() time.Time)
	// providerconfigDescID is the schema descriptor for id field.
	providerconfigDescID := providerconfigFields[0].Descriptor()
	// providerconfig.DefaultID holds the default value on creation for the id field.
	providerconfig.DefaultID = providerconfigDescID.Default.(func() uuid.UUID)
	providersynchistoryMixin := schema.ProviderSyncHistory{}.Mixin()
	providersynchistory.Policy = privacy.NewPolicies(providersynchistoryMixin[0], schema.ProviderSyncHistory{})
	providersynchistory.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := providersynchistory.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	providersynchistoryFields := schema.ProviderSyncHistory{}.Fields()
	_ = providersynchistoryFields
	// providersynchistoryDescStartedAt is the schema descriptor for started_at field.
	providersynchistoryDescStartedAt := providersynchistoryFields[2].Descriptor()
	// providersynchistory.DefaultStartedAt holds the default value on creation for the started_at field.
	providersynchistory.DefaultStartedAt = providersynchistoryDescStartedAt.Default.(func() time.Time)
	// providersynchistoryDescFinishedAt is the schema descriptor for finished_at field.
	providersynchistoryDescFinishedAt := providersynchistoryFields[3].Descriptor()
	// providersynchistory.DefaultFinishedAt holds the default value on creation for the finished_at field.
	providersynchistory.DefaultFinishedAt = providersynchistoryDescFinishedAt.Default.(func() time.Time)
	// providersynchistoryDescID is the schema descriptor for id field.
	providersynchistoryDescID := providersynchistoryFields[0].Descriptor()
	// providersynchistory.DefaultID holds the default value on creation for the id field.
	providersynchistory.DefaultID = providersynchistoryDescID.Default.(func() uuid.UUID)
	retrospectiveMixin := schema.Retrospective{}.Mixin()
	retrospective.Policy = privacy.NewPolicies(retrospectiveMixin[0], schema.Retrospective{})
	retrospective.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := retrospective.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	retrospectiveFields := schema.Retrospective{}.Fields()
	_ = retrospectiveFields
	// retrospectiveDescID is the schema descriptor for id field.
	retrospectiveDescID := retrospectiveFields[0].Descriptor()
	// retrospective.DefaultID holds the default value on creation for the id field.
	retrospective.DefaultID = retrospectiveDescID.Default.(func() uuid.UUID)
	retrospectivediscussionMixin := schema.RetrospectiveDiscussion{}.Mixin()
	retrospectivediscussion.Policy = privacy.NewPolicies(retrospectivediscussionMixin[0], schema.RetrospectiveDiscussion{})
	retrospectivediscussion.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := retrospectivediscussion.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	retrospectivediscussionFields := schema.RetrospectiveDiscussion{}.Fields()
	_ = retrospectivediscussionFields
	// retrospectivediscussionDescID is the schema descriptor for id field.
	retrospectivediscussionDescID := retrospectivediscussionFields[0].Descriptor()
	// retrospectivediscussion.DefaultID holds the default value on creation for the id field.
	retrospectivediscussion.DefaultID = retrospectivediscussionDescID.Default.(func() uuid.UUID)
	retrospectivediscussionreplyMixin := schema.RetrospectiveDiscussionReply{}.Mixin()
	retrospectivediscussionreply.Policy = privacy.NewPolicies(retrospectivediscussionreplyMixin[0], schema.RetrospectiveDiscussionReply{})
	retrospectivediscussionreply.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := retrospectivediscussionreply.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	retrospectivediscussionreplyFields := schema.RetrospectiveDiscussionReply{}.Fields()
	_ = retrospectivediscussionreplyFields
	// retrospectivediscussionreplyDescID is the schema descriptor for id field.
	retrospectivediscussionreplyDescID := retrospectivediscussionreplyFields[0].Descriptor()
	// retrospectivediscussionreply.DefaultID holds the default value on creation for the id field.
	retrospectivediscussionreply.DefaultID = retrospectivediscussionreplyDescID.Default.(func() uuid.UUID)
	retrospectivereviewMixin := schema.RetrospectiveReview{}.Mixin()
	retrospectivereview.Policy = privacy.NewPolicies(retrospectivereviewMixin[0], schema.RetrospectiveReview{})
	retrospectivereview.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := retrospectivereview.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	retrospectivereviewFields := schema.RetrospectiveReview{}.Fields()
	_ = retrospectivereviewFields
	// retrospectivereviewDescID is the schema descriptor for id field.
	retrospectivereviewDescID := retrospectivereviewFields[0].Descriptor()
	// retrospectivereview.DefaultID holds the default value on creation for the id field.
	retrospectivereview.DefaultID = retrospectivereviewDescID.Default.(func() uuid.UUID)
	systemanalysisMixin := schema.SystemAnalysis{}.Mixin()
	systemanalysis.Policy = privacy.NewPolicies(systemanalysisMixin[0], schema.SystemAnalysis{})
	systemanalysis.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := systemanalysis.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	systemanalysisFields := schema.SystemAnalysis{}.Fields()
	_ = systemanalysisFields
	// systemanalysisDescCreatedAt is the schema descriptor for created_at field.
	systemanalysisDescCreatedAt := systemanalysisFields[1].Descriptor()
	// systemanalysis.DefaultCreatedAt holds the default value on creation for the created_at field.
	systemanalysis.DefaultCreatedAt = systemanalysisDescCreatedAt.Default.(func() time.Time)
	// systemanalysisDescUpdatedAt is the schema descriptor for updated_at field.
	systemanalysisDescUpdatedAt := systemanalysisFields[2].Descriptor()
	// systemanalysis.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	systemanalysis.DefaultUpdatedAt = systemanalysisDescUpdatedAt.Default.(func() time.Time)
	// systemanalysis.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	systemanalysis.UpdateDefaultUpdatedAt = systemanalysisDescUpdatedAt.UpdateDefault.(func() time.Time)
	// systemanalysisDescID is the schema descriptor for id field.
	systemanalysisDescID := systemanalysisFields[0].Descriptor()
	// systemanalysis.DefaultID holds the default value on creation for the id field.
	systemanalysis.DefaultID = systemanalysisDescID.Default.(func() uuid.UUID)
	systemanalysiscomponentMixin := schema.SystemAnalysisComponent{}.Mixin()
	systemanalysiscomponent.Policy = privacy.NewPolicies(systemanalysiscomponentMixin[0], schema.SystemAnalysisComponent{})
	systemanalysiscomponent.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := systemanalysiscomponent.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	systemanalysiscomponentFields := schema.SystemAnalysisComponent{}.Fields()
	_ = systemanalysiscomponentFields
	// systemanalysiscomponentDescPosX is the schema descriptor for pos_x field.
	systemanalysiscomponentDescPosX := systemanalysiscomponentFields[4].Descriptor()
	// systemanalysiscomponent.DefaultPosX holds the default value on creation for the pos_x field.
	systemanalysiscomponent.DefaultPosX = systemanalysiscomponentDescPosX.Default.(float64)
	// systemanalysiscomponentDescPosY is the schema descriptor for pos_y field.
	systemanalysiscomponentDescPosY := systemanalysiscomponentFields[5].Descriptor()
	// systemanalysiscomponent.DefaultPosY holds the default value on creation for the pos_y field.
	systemanalysiscomponent.DefaultPosY = systemanalysiscomponentDescPosY.Default.(float64)
	// systemanalysiscomponentDescCreatedAt is the schema descriptor for created_at field.
	systemanalysiscomponentDescCreatedAt := systemanalysiscomponentFields[6].Descriptor()
	// systemanalysiscomponent.DefaultCreatedAt holds the default value on creation for the created_at field.
	systemanalysiscomponent.DefaultCreatedAt = systemanalysiscomponentDescCreatedAt.Default.(func() time.Time)
	// systemanalysiscomponentDescID is the schema descriptor for id field.
	systemanalysiscomponentDescID := systemanalysiscomponentFields[0].Descriptor()
	// systemanalysiscomponent.DefaultID holds the default value on creation for the id field.
	systemanalysiscomponent.DefaultID = systemanalysiscomponentDescID.Default.(func() uuid.UUID)
	systemanalysisrelationshipMixin := schema.SystemAnalysisRelationship{}.Mixin()
	systemanalysisrelationship.Policy = privacy.NewPolicies(systemanalysisrelationshipMixin[0], schema.SystemAnalysisRelationship{})
	systemanalysisrelationship.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := systemanalysisrelationship.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	systemanalysisrelationshipFields := schema.SystemAnalysisRelationship{}.Fields()
	_ = systemanalysisrelationshipFields
	// systemanalysisrelationshipDescCreatedAt is the schema descriptor for created_at field.
	systemanalysisrelationshipDescCreatedAt := systemanalysisrelationshipFields[4].Descriptor()
	// systemanalysisrelationship.DefaultCreatedAt holds the default value on creation for the created_at field.
	systemanalysisrelationship.DefaultCreatedAt = systemanalysisrelationshipDescCreatedAt.Default.(func() time.Time)
	// systemanalysisrelationshipDescID is the schema descriptor for id field.
	systemanalysisrelationshipDescID := systemanalysisrelationshipFields[0].Descriptor()
	// systemanalysisrelationship.DefaultID holds the default value on creation for the id field.
	systemanalysisrelationship.DefaultID = systemanalysisrelationshipDescID.Default.(func() uuid.UUID)
	systemcomponentMixin := schema.SystemComponent{}.Mixin()
	systemcomponent.Policy = privacy.NewPolicies(systemcomponentMixin[0], schema.SystemComponent{})
	systemcomponent.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := systemcomponent.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	systemcomponentFields := schema.SystemComponent{}.Fields()
	_ = systemcomponentFields
	// systemcomponentDescName is the schema descriptor for name field.
	systemcomponentDescName := systemcomponentFields[1].Descriptor()
	// systemcomponent.NameValidator is a validator for the "name" field. It is called by the builders before save.
	systemcomponent.NameValidator = systemcomponentDescName.Validators[0].(func(string) error)
	// systemcomponentDescCreatedAt is the schema descriptor for created_at field.
	systemcomponentDescCreatedAt := systemcomponentFields[6].Descriptor()
	// systemcomponent.DefaultCreatedAt holds the default value on creation for the created_at field.
	systemcomponent.DefaultCreatedAt = systemcomponentDescCreatedAt.Default.(func() time.Time)
	// systemcomponentDescUpdatedAt is the schema descriptor for updated_at field.
	systemcomponentDescUpdatedAt := systemcomponentFields[7].Descriptor()
	// systemcomponent.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	systemcomponent.DefaultUpdatedAt = systemcomponentDescUpdatedAt.Default.(func() time.Time)
	// systemcomponent.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	systemcomponent.UpdateDefaultUpdatedAt = systemcomponentDescUpdatedAt.UpdateDefault.(func() time.Time)
	// systemcomponentDescID is the schema descriptor for id field.
	systemcomponentDescID := systemcomponentFields[0].Descriptor()
	// systemcomponent.DefaultID holds the default value on creation for the id field.
	systemcomponent.DefaultID = systemcomponentDescID.Default.(func() uuid.UUID)
	systemcomponentconstraintMixin := schema.SystemComponentConstraint{}.Mixin()
	systemcomponentconstraint.Policy = privacy.NewPolicies(systemcomponentconstraintMixin[0], schema.SystemComponentConstraint{})
	systemcomponentconstraint.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := systemcomponentconstraint.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	systemcomponentconstraintFields := schema.SystemComponentConstraint{}.Fields()
	_ = systemcomponentconstraintFields
	// systemcomponentconstraintDescCreatedAt is the schema descriptor for created_at field.
	systemcomponentconstraintDescCreatedAt := systemcomponentconstraintFields[4].Descriptor()
	// systemcomponentconstraint.DefaultCreatedAt holds the default value on creation for the created_at field.
	systemcomponentconstraint.DefaultCreatedAt = systemcomponentconstraintDescCreatedAt.Default.(func() time.Time)
	// systemcomponentconstraintDescID is the schema descriptor for id field.
	systemcomponentconstraintDescID := systemcomponentconstraintFields[0].Descriptor()
	// systemcomponentconstraint.DefaultID holds the default value on creation for the id field.
	systemcomponentconstraint.DefaultID = systemcomponentconstraintDescID.Default.(func() uuid.UUID)
	systemcomponentcontrolMixin := schema.SystemComponentControl{}.Mixin()
	systemcomponentcontrol.Policy = privacy.NewPolicies(systemcomponentcontrolMixin[0], schema.SystemComponentControl{})
	systemcomponentcontrol.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := systemcomponentcontrol.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	systemcomponentcontrolFields := schema.SystemComponentControl{}.Fields()
	_ = systemcomponentcontrolFields
	// systemcomponentcontrolDescCreatedAt is the schema descriptor for created_at field.
	systemcomponentcontrolDescCreatedAt := systemcomponentcontrolFields[4].Descriptor()
	// systemcomponentcontrol.DefaultCreatedAt holds the default value on creation for the created_at field.
	systemcomponentcontrol.DefaultCreatedAt = systemcomponentcontrolDescCreatedAt.Default.(func() time.Time)
	// systemcomponentcontrolDescID is the schema descriptor for id field.
	systemcomponentcontrolDescID := systemcomponentcontrolFields[0].Descriptor()
	// systemcomponentcontrol.DefaultID holds the default value on creation for the id field.
	systemcomponentcontrol.DefaultID = systemcomponentcontrolDescID.Default.(func() uuid.UUID)
	systemcomponentkindMixin := schema.SystemComponentKind{}.Mixin()
	systemcomponentkind.Policy = privacy.NewPolicies(systemcomponentkindMixin[0], schema.SystemComponentKind{})
	systemcomponentkind.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := systemcomponentkind.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	systemcomponentkindFields := schema.SystemComponentKind{}.Fields()
	_ = systemcomponentkindFields
	// systemcomponentkindDescCreatedAt is the schema descriptor for created_at field.
	systemcomponentkindDescCreatedAt := systemcomponentkindFields[4].Descriptor()
	// systemcomponentkind.DefaultCreatedAt holds the default value on creation for the created_at field.
	systemcomponentkind.DefaultCreatedAt = systemcomponentkindDescCreatedAt.Default.(func() time.Time)
	// systemcomponentkindDescID is the schema descriptor for id field.
	systemcomponentkindDescID := systemcomponentkindFields[0].Descriptor()
	// systemcomponentkind.DefaultID holds the default value on creation for the id field.
	systemcomponentkind.DefaultID = systemcomponentkindDescID.Default.(func() uuid.UUID)
	systemcomponentrelationshipMixin := schema.SystemComponentRelationship{}.Mixin()
	systemcomponentrelationship.Policy = privacy.NewPolicies(systemcomponentrelationshipMixin[0], schema.SystemComponentRelationship{})
	systemcomponentrelationship.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := systemcomponentrelationship.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	systemcomponentrelationshipFields := schema.SystemComponentRelationship{}.Fields()
	_ = systemcomponentrelationshipFields
	// systemcomponentrelationshipDescCreatedAt is the schema descriptor for created_at field.
	systemcomponentrelationshipDescCreatedAt := systemcomponentrelationshipFields[5].Descriptor()
	// systemcomponentrelationship.DefaultCreatedAt holds the default value on creation for the created_at field.
	systemcomponentrelationship.DefaultCreatedAt = systemcomponentrelationshipDescCreatedAt.Default.(func() time.Time)
	// systemcomponentrelationshipDescID is the schema descriptor for id field.
	systemcomponentrelationshipDescID := systemcomponentrelationshipFields[0].Descriptor()
	// systemcomponentrelationship.DefaultID holds the default value on creation for the id field.
	systemcomponentrelationship.DefaultID = systemcomponentrelationshipDescID.Default.(func() uuid.UUID)
	systemcomponentsignalMixin := schema.SystemComponentSignal{}.Mixin()
	systemcomponentsignal.Policy = privacy.NewPolicies(systemcomponentsignalMixin[0], schema.SystemComponentSignal{})
	systemcomponentsignal.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := systemcomponentsignal.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	systemcomponentsignalFields := schema.SystemComponentSignal{}.Fields()
	_ = systemcomponentsignalFields
	// systemcomponentsignalDescCreatedAt is the schema descriptor for created_at field.
	systemcomponentsignalDescCreatedAt := systemcomponentsignalFields[4].Descriptor()
	// systemcomponentsignal.DefaultCreatedAt holds the default value on creation for the created_at field.
	systemcomponentsignal.DefaultCreatedAt = systemcomponentsignalDescCreatedAt.Default.(func() time.Time)
	// systemcomponentsignalDescID is the schema descriptor for id field.
	systemcomponentsignalDescID := systemcomponentsignalFields[0].Descriptor()
	// systemcomponentsignal.DefaultID holds the default value on creation for the id field.
	systemcomponentsignal.DefaultID = systemcomponentsignalDescID.Default.(func() uuid.UUID)
	systemhazardMixin := schema.SystemHazard{}.Mixin()
	systemhazard.Policy = privacy.NewPolicies(systemhazardMixin[0], schema.SystemHazard{})
	systemhazard.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := systemhazard.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	systemhazardFields := schema.SystemHazard{}.Fields()
	_ = systemhazardFields
	// systemhazardDescName is the schema descriptor for name field.
	systemhazardDescName := systemhazardFields[1].Descriptor()
	// systemhazard.NameValidator is a validator for the "name" field. It is called by the builders before save.
	systemhazard.NameValidator = systemhazardDescName.Validators[0].(func(string) error)
	// systemhazardDescCreatedAt is the schema descriptor for created_at field.
	systemhazardDescCreatedAt := systemhazardFields[3].Descriptor()
	// systemhazard.DefaultCreatedAt holds the default value on creation for the created_at field.
	systemhazard.DefaultCreatedAt = systemhazardDescCreatedAt.Default.(func() time.Time)
	// systemhazardDescUpdatedAt is the schema descriptor for updated_at field.
	systemhazardDescUpdatedAt := systemhazardFields[4].Descriptor()
	// systemhazard.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	systemhazard.DefaultUpdatedAt = systemhazardDescUpdatedAt.Default.(func() time.Time)
	// systemhazard.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	systemhazard.UpdateDefaultUpdatedAt = systemhazardDescUpdatedAt.UpdateDefault.(func() time.Time)
	// systemhazardDescID is the schema descriptor for id field.
	systemhazardDescID := systemhazardFields[0].Descriptor()
	// systemhazard.DefaultID holds the default value on creation for the id field.
	systemhazard.DefaultID = systemhazardDescID.Default.(func() uuid.UUID)
	systemrelationshipcontrolactionMixin := schema.SystemRelationshipControlAction{}.Mixin()
	systemrelationshipcontrolaction.Policy = privacy.NewPolicies(systemrelationshipcontrolactionMixin[0], schema.SystemRelationshipControlAction{})
	systemrelationshipcontrolaction.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := systemrelationshipcontrolaction.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	systemrelationshipcontrolactionFields := schema.SystemRelationshipControlAction{}.Fields()
	_ = systemrelationshipcontrolactionFields
	// systemrelationshipcontrolactionDescType is the schema descriptor for type field.
	systemrelationshipcontrolactionDescType := systemrelationshipcontrolactionFields[3].Descriptor()
	// systemrelationshipcontrolaction.TypeValidator is a validator for the "type" field. It is called by the builders before save.
	systemrelationshipcontrolaction.TypeValidator = systemrelationshipcontrolactionDescType.Validators[0].(func(string) error)
	// systemrelationshipcontrolactionDescCreatedAt is the schema descriptor for created_at field.
	systemrelationshipcontrolactionDescCreatedAt := systemrelationshipcontrolactionFields[5].Descriptor()
	// systemrelationshipcontrolaction.DefaultCreatedAt holds the default value on creation for the created_at field.
	systemrelationshipcontrolaction.DefaultCreatedAt = systemrelationshipcontrolactionDescCreatedAt.Default.(func() time.Time)
	// systemrelationshipcontrolactionDescID is the schema descriptor for id field.
	systemrelationshipcontrolactionDescID := systemrelationshipcontrolactionFields[0].Descriptor()
	// systemrelationshipcontrolaction.DefaultID holds the default value on creation for the id field.
	systemrelationshipcontrolaction.DefaultID = systemrelationshipcontrolactionDescID.Default.(func() uuid.UUID)
	systemrelationshipfeedbacksignalMixin := schema.SystemRelationshipFeedbackSignal{}.Mixin()
	systemrelationshipfeedbacksignal.Policy = privacy.NewPolicies(systemrelationshipfeedbacksignalMixin[0], schema.SystemRelationshipFeedbackSignal{})
	systemrelationshipfeedbacksignal.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := systemrelationshipfeedbacksignal.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	systemrelationshipfeedbacksignalFields := schema.SystemRelationshipFeedbackSignal{}.Fields()
	_ = systemrelationshipfeedbacksignalFields
	// systemrelationshipfeedbacksignalDescType is the schema descriptor for type field.
	systemrelationshipfeedbacksignalDescType := systemrelationshipfeedbacksignalFields[3].Descriptor()
	// systemrelationshipfeedbacksignal.TypeValidator is a validator for the "type" field. It is called by the builders before save.
	systemrelationshipfeedbacksignal.TypeValidator = systemrelationshipfeedbacksignalDescType.Validators[0].(func(string) error)
	// systemrelationshipfeedbacksignalDescCreatedAt is the schema descriptor for created_at field.
	systemrelationshipfeedbacksignalDescCreatedAt := systemrelationshipfeedbacksignalFields[5].Descriptor()
	// systemrelationshipfeedbacksignal.DefaultCreatedAt holds the default value on creation for the created_at field.
	systemrelationshipfeedbacksignal.DefaultCreatedAt = systemrelationshipfeedbacksignalDescCreatedAt.Default.(func() time.Time)
	// systemrelationshipfeedbacksignalDescID is the schema descriptor for id field.
	systemrelationshipfeedbacksignalDescID := systemrelationshipfeedbacksignalFields[0].Descriptor()
	// systemrelationshipfeedbacksignal.DefaultID holds the default value on creation for the id field.
	systemrelationshipfeedbacksignal.DefaultID = systemrelationshipfeedbacksignalDescID.Default.(func() uuid.UUID)
	taskMixin := schema.Task{}.Mixin()
	task.Policy = privacy.NewPolicies(taskMixin[0], schema.Task{})
	task.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := task.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	taskFields := schema.Task{}.Fields()
	_ = taskFields
	// taskDescID is the schema descriptor for id field.
	taskDescID := taskFields[0].Descriptor()
	// task.DefaultID holds the default value on creation for the id field.
	task.DefaultID = taskDescID.Default.(func() uuid.UUID)
	teamMixin := schema.Team{}.Mixin()
	team.Policy = privacy.NewPolicies(teamMixin[0], schema.Team{})
	team.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := team.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	teamFields := schema.Team{}.Fields()
	_ = teamFields
	// teamDescID is the schema descriptor for id field.
	teamDescID := teamFields[0].Descriptor()
	// team.DefaultID holds the default value on creation for the id field.
	team.DefaultID = teamDescID.Default.(func() uuid.UUID)
	tenantMixin := schema.Tenant{}.Mixin()
	tenant.Policy = privacy.NewPolicies(tenantMixin[0], schema.Tenant{})
	tenant.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := tenant.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	tenantFields := schema.Tenant{}.Fields()
	_ = tenantFields
	// tenantDescName is the schema descriptor for name field.
	tenantDescName := tenantFields[0].Descriptor()
	// tenant.NameValidator is a validator for the "name" field. It is called by the builders before save.
	tenant.NameValidator = tenantDescName.Validators[0].(func(string) error)
	// tenantDescPublicID is the schema descriptor for public_id field.
	tenantDescPublicID := tenantFields[1].Descriptor()
	// tenant.DefaultPublicID holds the default value on creation for the public_id field.
	tenant.DefaultPublicID = tenantDescPublicID.Default.(func() uuid.UUID)
	ticketMixin := schema.Ticket{}.Mixin()
	ticket.Policy = privacy.NewPolicies(ticketMixin[0], schema.Ticket{})
	ticket.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := ticket.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	ticketFields := schema.Ticket{}.Fields()
	_ = ticketFields
	// ticketDescID is the schema descriptor for id field.
	ticketDescID := ticketFields[0].Descriptor()
	// ticket.DefaultID holds the default value on creation for the id field.
	ticket.DefaultID = ticketDescID.Default.(func() uuid.UUID)
	userMixin := schema.User{}.Mixin()
	user.Policy = privacy.NewPolicies(userMixin[0], userMixin[1], schema.User{})
	user.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := user.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() uuid.UUID)
}

const (
	Version = "v0.14.4"                                         // Version of ent codegen.
	Sum     = "h1:/DhDraSLXIkBhyiVoJeSshr4ZYi7femzhj6/TckzZuI=" // Sum of ent codegen.
)
