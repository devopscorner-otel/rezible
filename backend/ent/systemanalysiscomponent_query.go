// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/systemanalysis"
	"github.com/rezible/rezible/ent/systemanalysiscomponent"
	"github.com/rezible/rezible/ent/systemcomponent"
	"github.com/rezible/rezible/ent/tenant"
)

// SystemAnalysisComponentQuery is the builder for querying SystemAnalysisComponent entities.
type SystemAnalysisComponentQuery struct {
	config
	ctx           *QueryContext
	order         []systemanalysiscomponent.OrderOption
	inters        []Interceptor
	predicates    []predicate.SystemAnalysisComponent
	withTenant    *TenantQuery
	withAnalysis  *SystemAnalysisQuery
	withComponent *SystemComponentQuery
	modifiers     []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SystemAnalysisComponentQuery builder.
func (sacq *SystemAnalysisComponentQuery) Where(ps ...predicate.SystemAnalysisComponent) *SystemAnalysisComponentQuery {
	sacq.predicates = append(sacq.predicates, ps...)
	return sacq
}

// Limit the number of records to be returned by this query.
func (sacq *SystemAnalysisComponentQuery) Limit(limit int) *SystemAnalysisComponentQuery {
	sacq.ctx.Limit = &limit
	return sacq
}

// Offset to start from.
func (sacq *SystemAnalysisComponentQuery) Offset(offset int) *SystemAnalysisComponentQuery {
	sacq.ctx.Offset = &offset
	return sacq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sacq *SystemAnalysisComponentQuery) Unique(unique bool) *SystemAnalysisComponentQuery {
	sacq.ctx.Unique = &unique
	return sacq
}

// Order specifies how the records should be ordered.
func (sacq *SystemAnalysisComponentQuery) Order(o ...systemanalysiscomponent.OrderOption) *SystemAnalysisComponentQuery {
	sacq.order = append(sacq.order, o...)
	return sacq
}

// QueryTenant chains the current query on the "tenant" edge.
func (sacq *SystemAnalysisComponentQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: sacq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sacq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sacq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(systemanalysiscomponent.Table, systemanalysiscomponent.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, systemanalysiscomponent.TenantTable, systemanalysiscomponent.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(sacq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAnalysis chains the current query on the "analysis" edge.
func (sacq *SystemAnalysisComponentQuery) QueryAnalysis() *SystemAnalysisQuery {
	query := (&SystemAnalysisClient{config: sacq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sacq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sacq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(systemanalysiscomponent.Table, systemanalysiscomponent.FieldID, selector),
			sqlgraph.To(systemanalysis.Table, systemanalysis.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, systemanalysiscomponent.AnalysisTable, systemanalysiscomponent.AnalysisColumn),
		)
		fromU = sqlgraph.SetNeighbors(sacq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryComponent chains the current query on the "component" edge.
func (sacq *SystemAnalysisComponentQuery) QueryComponent() *SystemComponentQuery {
	query := (&SystemComponentClient{config: sacq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sacq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sacq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(systemanalysiscomponent.Table, systemanalysiscomponent.FieldID, selector),
			sqlgraph.To(systemcomponent.Table, systemcomponent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, systemanalysiscomponent.ComponentTable, systemanalysiscomponent.ComponentColumn),
		)
		fromU = sqlgraph.SetNeighbors(sacq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SystemAnalysisComponent entity from the query.
// Returns a *NotFoundError when no SystemAnalysisComponent was found.
func (sacq *SystemAnalysisComponentQuery) First(ctx context.Context) (*SystemAnalysisComponent, error) {
	nodes, err := sacq.Limit(1).All(setContextOp(ctx, sacq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{systemanalysiscomponent.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sacq *SystemAnalysisComponentQuery) FirstX(ctx context.Context) *SystemAnalysisComponent {
	node, err := sacq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SystemAnalysisComponent ID from the query.
// Returns a *NotFoundError when no SystemAnalysisComponent ID was found.
func (sacq *SystemAnalysisComponentQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = sacq.Limit(1).IDs(setContextOp(ctx, sacq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{systemanalysiscomponent.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sacq *SystemAnalysisComponentQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := sacq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SystemAnalysisComponent entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SystemAnalysisComponent entity is found.
// Returns a *NotFoundError when no SystemAnalysisComponent entities are found.
func (sacq *SystemAnalysisComponentQuery) Only(ctx context.Context) (*SystemAnalysisComponent, error) {
	nodes, err := sacq.Limit(2).All(setContextOp(ctx, sacq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{systemanalysiscomponent.Label}
	default:
		return nil, &NotSingularError{systemanalysiscomponent.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sacq *SystemAnalysisComponentQuery) OnlyX(ctx context.Context) *SystemAnalysisComponent {
	node, err := sacq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SystemAnalysisComponent ID in the query.
// Returns a *NotSingularError when more than one SystemAnalysisComponent ID is found.
// Returns a *NotFoundError when no entities are found.
func (sacq *SystemAnalysisComponentQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = sacq.Limit(2).IDs(setContextOp(ctx, sacq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{systemanalysiscomponent.Label}
	default:
		err = &NotSingularError{systemanalysiscomponent.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sacq *SystemAnalysisComponentQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := sacq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SystemAnalysisComponents.
func (sacq *SystemAnalysisComponentQuery) All(ctx context.Context) ([]*SystemAnalysisComponent, error) {
	ctx = setContextOp(ctx, sacq.ctx, ent.OpQueryAll)
	if err := sacq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SystemAnalysisComponent, *SystemAnalysisComponentQuery]()
	return withInterceptors[[]*SystemAnalysisComponent](ctx, sacq, qr, sacq.inters)
}

// AllX is like All, but panics if an error occurs.
func (sacq *SystemAnalysisComponentQuery) AllX(ctx context.Context) []*SystemAnalysisComponent {
	nodes, err := sacq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SystemAnalysisComponent IDs.
func (sacq *SystemAnalysisComponentQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if sacq.ctx.Unique == nil && sacq.path != nil {
		sacq.Unique(true)
	}
	ctx = setContextOp(ctx, sacq.ctx, ent.OpQueryIDs)
	if err = sacq.Select(systemanalysiscomponent.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sacq *SystemAnalysisComponentQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := sacq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sacq *SystemAnalysisComponentQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, sacq.ctx, ent.OpQueryCount)
	if err := sacq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, sacq, querierCount[*SystemAnalysisComponentQuery](), sacq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (sacq *SystemAnalysisComponentQuery) CountX(ctx context.Context) int {
	count, err := sacq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sacq *SystemAnalysisComponentQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, sacq.ctx, ent.OpQueryExist)
	switch _, err := sacq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (sacq *SystemAnalysisComponentQuery) ExistX(ctx context.Context) bool {
	exist, err := sacq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SystemAnalysisComponentQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sacq *SystemAnalysisComponentQuery) Clone() *SystemAnalysisComponentQuery {
	if sacq == nil {
		return nil
	}
	return &SystemAnalysisComponentQuery{
		config:        sacq.config,
		ctx:           sacq.ctx.Clone(),
		order:         append([]systemanalysiscomponent.OrderOption{}, sacq.order...),
		inters:        append([]Interceptor{}, sacq.inters...),
		predicates:    append([]predicate.SystemAnalysisComponent{}, sacq.predicates...),
		withTenant:    sacq.withTenant.Clone(),
		withAnalysis:  sacq.withAnalysis.Clone(),
		withComponent: sacq.withComponent.Clone(),
		// clone intermediate query.
		sql:       sacq.sql.Clone(),
		path:      sacq.path,
		modifiers: append([]func(*sql.Selector){}, sacq.modifiers...),
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (sacq *SystemAnalysisComponentQuery) WithTenant(opts ...func(*TenantQuery)) *SystemAnalysisComponentQuery {
	query := (&TenantClient{config: sacq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sacq.withTenant = query
	return sacq
}

// WithAnalysis tells the query-builder to eager-load the nodes that are connected to
// the "analysis" edge. The optional arguments are used to configure the query builder of the edge.
func (sacq *SystemAnalysisComponentQuery) WithAnalysis(opts ...func(*SystemAnalysisQuery)) *SystemAnalysisComponentQuery {
	query := (&SystemAnalysisClient{config: sacq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sacq.withAnalysis = query
	return sacq
}

// WithComponent tells the query-builder to eager-load the nodes that are connected to
// the "component" edge. The optional arguments are used to configure the query builder of the edge.
func (sacq *SystemAnalysisComponentQuery) WithComponent(opts ...func(*SystemComponentQuery)) *SystemAnalysisComponentQuery {
	query := (&SystemComponentClient{config: sacq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sacq.withComponent = query
	return sacq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID int `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SystemAnalysisComponent.Query().
//		GroupBy(systemanalysiscomponent.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (sacq *SystemAnalysisComponentQuery) GroupBy(field string, fields ...string) *SystemAnalysisComponentGroupBy {
	sacq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SystemAnalysisComponentGroupBy{build: sacq}
	grbuild.flds = &sacq.ctx.Fields
	grbuild.label = systemanalysiscomponent.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID int `json:"tenant_id,omitempty"`
//	}
//
//	client.SystemAnalysisComponent.Query().
//		Select(systemanalysiscomponent.FieldTenantID).
//		Scan(ctx, &v)
func (sacq *SystemAnalysisComponentQuery) Select(fields ...string) *SystemAnalysisComponentSelect {
	sacq.ctx.Fields = append(sacq.ctx.Fields, fields...)
	sbuild := &SystemAnalysisComponentSelect{SystemAnalysisComponentQuery: sacq}
	sbuild.label = systemanalysiscomponent.Label
	sbuild.flds, sbuild.scan = &sacq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SystemAnalysisComponentSelect configured with the given aggregations.
func (sacq *SystemAnalysisComponentQuery) Aggregate(fns ...AggregateFunc) *SystemAnalysisComponentSelect {
	return sacq.Select().Aggregate(fns...)
}

func (sacq *SystemAnalysisComponentQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range sacq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, sacq); err != nil {
				return err
			}
		}
	}
	for _, f := range sacq.ctx.Fields {
		if !systemanalysiscomponent.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if sacq.path != nil {
		prev, err := sacq.path(ctx)
		if err != nil {
			return err
		}
		sacq.sql = prev
	}
	if systemanalysiscomponent.Policy == nil {
		return errors.New("ent: uninitialized systemanalysiscomponent.Policy (forgotten import ent/runtime?)")
	}
	if err := systemanalysiscomponent.Policy.EvalQuery(ctx, sacq); err != nil {
		return err
	}
	return nil
}

func (sacq *SystemAnalysisComponentQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SystemAnalysisComponent, error) {
	var (
		nodes       = []*SystemAnalysisComponent{}
		_spec       = sacq.querySpec()
		loadedTypes = [3]bool{
			sacq.withTenant != nil,
			sacq.withAnalysis != nil,
			sacq.withComponent != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SystemAnalysisComponent).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SystemAnalysisComponent{config: sacq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(sacq.modifiers) > 0 {
		_spec.Modifiers = sacq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sacq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := sacq.withTenant; query != nil {
		if err := sacq.loadTenant(ctx, query, nodes, nil,
			func(n *SystemAnalysisComponent, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := sacq.withAnalysis; query != nil {
		if err := sacq.loadAnalysis(ctx, query, nodes, nil,
			func(n *SystemAnalysisComponent, e *SystemAnalysis) { n.Edges.Analysis = e }); err != nil {
			return nil, err
		}
	}
	if query := sacq.withComponent; query != nil {
		if err := sacq.loadComponent(ctx, query, nodes, nil,
			func(n *SystemAnalysisComponent, e *SystemComponent) { n.Edges.Component = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (sacq *SystemAnalysisComponentQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*SystemAnalysisComponent, init func(*SystemAnalysisComponent), assign func(*SystemAnalysisComponent, *Tenant)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*SystemAnalysisComponent)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sacq *SystemAnalysisComponentQuery) loadAnalysis(ctx context.Context, query *SystemAnalysisQuery, nodes []*SystemAnalysisComponent, init func(*SystemAnalysisComponent), assign func(*SystemAnalysisComponent, *SystemAnalysis)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*SystemAnalysisComponent)
	for i := range nodes {
		fk := nodes[i].AnalysisID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(systemanalysis.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "analysis_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sacq *SystemAnalysisComponentQuery) loadComponent(ctx context.Context, query *SystemComponentQuery, nodes []*SystemAnalysisComponent, init func(*SystemAnalysisComponent), assign func(*SystemAnalysisComponent, *SystemComponent)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*SystemAnalysisComponent)
	for i := range nodes {
		fk := nodes[i].ComponentID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(systemcomponent.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "component_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (sacq *SystemAnalysisComponentQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sacq.querySpec()
	if len(sacq.modifiers) > 0 {
		_spec.Modifiers = sacq.modifiers
	}
	_spec.Node.Columns = sacq.ctx.Fields
	if len(sacq.ctx.Fields) > 0 {
		_spec.Unique = sacq.ctx.Unique != nil && *sacq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, sacq.driver, _spec)
}

func (sacq *SystemAnalysisComponentQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(systemanalysiscomponent.Table, systemanalysiscomponent.Columns, sqlgraph.NewFieldSpec(systemanalysiscomponent.FieldID, field.TypeUUID))
	_spec.From = sacq.sql
	if unique := sacq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if sacq.path != nil {
		_spec.Unique = true
	}
	if fields := sacq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, systemanalysiscomponent.FieldID)
		for i := range fields {
			if fields[i] != systemanalysiscomponent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if sacq.withTenant != nil {
			_spec.Node.AddColumnOnce(systemanalysiscomponent.FieldTenantID)
		}
		if sacq.withAnalysis != nil {
			_spec.Node.AddColumnOnce(systemanalysiscomponent.FieldAnalysisID)
		}
		if sacq.withComponent != nil {
			_spec.Node.AddColumnOnce(systemanalysiscomponent.FieldComponentID)
		}
	}
	if ps := sacq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sacq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sacq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sacq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sacq *SystemAnalysisComponentQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sacq.driver.Dialect())
	t1 := builder.Table(systemanalysiscomponent.Table)
	columns := sacq.ctx.Fields
	if len(columns) == 0 {
		columns = systemanalysiscomponent.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sacq.sql != nil {
		selector = sacq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sacq.ctx.Unique != nil && *sacq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range sacq.modifiers {
		m(selector)
	}
	for _, p := range sacq.predicates {
		p(selector)
	}
	for _, p := range sacq.order {
		p(selector)
	}
	if offset := sacq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sacq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (sacq *SystemAnalysisComponentQuery) Modify(modifiers ...func(s *sql.Selector)) *SystemAnalysisComponentSelect {
	sacq.modifiers = append(sacq.modifiers, modifiers...)
	return sacq.Select()
}

// SystemAnalysisComponentGroupBy is the group-by builder for SystemAnalysisComponent entities.
type SystemAnalysisComponentGroupBy struct {
	selector
	build *SystemAnalysisComponentQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sacgb *SystemAnalysisComponentGroupBy) Aggregate(fns ...AggregateFunc) *SystemAnalysisComponentGroupBy {
	sacgb.fns = append(sacgb.fns, fns...)
	return sacgb
}

// Scan applies the selector query and scans the result into the given value.
func (sacgb *SystemAnalysisComponentGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sacgb.build.ctx, ent.OpQueryGroupBy)
	if err := sacgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SystemAnalysisComponentQuery, *SystemAnalysisComponentGroupBy](ctx, sacgb.build, sacgb, sacgb.build.inters, v)
}

func (sacgb *SystemAnalysisComponentGroupBy) sqlScan(ctx context.Context, root *SystemAnalysisComponentQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(sacgb.fns))
	for _, fn := range sacgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*sacgb.flds)+len(sacgb.fns))
		for _, f := range *sacgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*sacgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sacgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SystemAnalysisComponentSelect is the builder for selecting fields of SystemAnalysisComponent entities.
type SystemAnalysisComponentSelect struct {
	*SystemAnalysisComponentQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (sacs *SystemAnalysisComponentSelect) Aggregate(fns ...AggregateFunc) *SystemAnalysisComponentSelect {
	sacs.fns = append(sacs.fns, fns...)
	return sacs
}

// Scan applies the selector query and scans the result into the given value.
func (sacs *SystemAnalysisComponentSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sacs.ctx, ent.OpQuerySelect)
	if err := sacs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SystemAnalysisComponentQuery, *SystemAnalysisComponentSelect](ctx, sacs.SystemAnalysisComponentQuery, sacs, sacs.inters, v)
}

func (sacs *SystemAnalysisComponentSelect) sqlScan(ctx context.Context, root *SystemAnalysisComponentQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(sacs.fns))
	for _, fn := range sacs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*sacs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sacs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (sacs *SystemAnalysisComponentSelect) Modify(modifiers ...func(s *sql.Selector)) *SystemAnalysisComponentSelect {
	sacs.modifiers = append(sacs.modifiers, modifiers...)
	return sacs
}
