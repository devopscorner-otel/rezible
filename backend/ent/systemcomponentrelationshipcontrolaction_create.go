// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/systemcomponentcontrol"
	"github.com/rezible/rezible/ent/systemcomponentrelationship"
	"github.com/rezible/rezible/ent/systemcomponentrelationshipcontrolaction"
)

// SystemComponentRelationshipControlActionCreate is the builder for creating a SystemComponentRelationshipControlAction entity.
type SystemComponentRelationshipControlActionCreate struct {
	config
	mutation *SystemComponentRelationshipControlActionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetControlID sets the "control_id" field.
func (scrcac *SystemComponentRelationshipControlActionCreate) SetControlID(u uuid.UUID) *SystemComponentRelationshipControlActionCreate {
	scrcac.mutation.SetControlID(u)
	return scrcac
}

// SetRelationshipID sets the "relationship_id" field.
func (scrcac *SystemComponentRelationshipControlActionCreate) SetRelationshipID(u uuid.UUID) *SystemComponentRelationshipControlActionCreate {
	scrcac.mutation.SetRelationshipID(u)
	return scrcac
}

// SetType sets the "type" field.
func (scrcac *SystemComponentRelationshipControlActionCreate) SetType(s string) *SystemComponentRelationshipControlActionCreate {
	scrcac.mutation.SetType(s)
	return scrcac
}

// SetDescription sets the "description" field.
func (scrcac *SystemComponentRelationshipControlActionCreate) SetDescription(s string) *SystemComponentRelationshipControlActionCreate {
	scrcac.mutation.SetDescription(s)
	return scrcac
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (scrcac *SystemComponentRelationshipControlActionCreate) SetNillableDescription(s *string) *SystemComponentRelationshipControlActionCreate {
	if s != nil {
		scrcac.SetDescription(*s)
	}
	return scrcac
}

// SetCreatedAt sets the "created_at" field.
func (scrcac *SystemComponentRelationshipControlActionCreate) SetCreatedAt(t time.Time) *SystemComponentRelationshipControlActionCreate {
	scrcac.mutation.SetCreatedAt(t)
	return scrcac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (scrcac *SystemComponentRelationshipControlActionCreate) SetNillableCreatedAt(t *time.Time) *SystemComponentRelationshipControlActionCreate {
	if t != nil {
		scrcac.SetCreatedAt(*t)
	}
	return scrcac
}

// SetID sets the "id" field.
func (scrcac *SystemComponentRelationshipControlActionCreate) SetID(u uuid.UUID) *SystemComponentRelationshipControlActionCreate {
	scrcac.mutation.SetID(u)
	return scrcac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (scrcac *SystemComponentRelationshipControlActionCreate) SetNillableID(u *uuid.UUID) *SystemComponentRelationshipControlActionCreate {
	if u != nil {
		scrcac.SetID(*u)
	}
	return scrcac
}

// SetControl sets the "control" edge to the SystemComponentControl entity.
func (scrcac *SystemComponentRelationshipControlActionCreate) SetControl(s *SystemComponentControl) *SystemComponentRelationshipControlActionCreate {
	return scrcac.SetControlID(s.ID)
}

// SetRelationship sets the "relationship" edge to the SystemComponentRelationship entity.
func (scrcac *SystemComponentRelationshipControlActionCreate) SetRelationship(s *SystemComponentRelationship) *SystemComponentRelationshipControlActionCreate {
	return scrcac.SetRelationshipID(s.ID)
}

// Mutation returns the SystemComponentRelationshipControlActionMutation object of the builder.
func (scrcac *SystemComponentRelationshipControlActionCreate) Mutation() *SystemComponentRelationshipControlActionMutation {
	return scrcac.mutation
}

// Save creates the SystemComponentRelationshipControlAction in the database.
func (scrcac *SystemComponentRelationshipControlActionCreate) Save(ctx context.Context) (*SystemComponentRelationshipControlAction, error) {
	scrcac.defaults()
	return withHooks(ctx, scrcac.sqlSave, scrcac.mutation, scrcac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (scrcac *SystemComponentRelationshipControlActionCreate) SaveX(ctx context.Context) *SystemComponentRelationshipControlAction {
	v, err := scrcac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scrcac *SystemComponentRelationshipControlActionCreate) Exec(ctx context.Context) error {
	_, err := scrcac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scrcac *SystemComponentRelationshipControlActionCreate) ExecX(ctx context.Context) {
	if err := scrcac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scrcac *SystemComponentRelationshipControlActionCreate) defaults() {
	if _, ok := scrcac.mutation.CreatedAt(); !ok {
		v := systemcomponentrelationshipcontrolaction.DefaultCreatedAt()
		scrcac.mutation.SetCreatedAt(v)
	}
	if _, ok := scrcac.mutation.ID(); !ok {
		v := systemcomponentrelationshipcontrolaction.DefaultID()
		scrcac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scrcac *SystemComponentRelationshipControlActionCreate) check() error {
	if _, ok := scrcac.mutation.ControlID(); !ok {
		return &ValidationError{Name: "control_id", err: errors.New(`ent: missing required field "SystemComponentRelationshipControlAction.control_id"`)}
	}
	if _, ok := scrcac.mutation.RelationshipID(); !ok {
		return &ValidationError{Name: "relationship_id", err: errors.New(`ent: missing required field "SystemComponentRelationshipControlAction.relationship_id"`)}
	}
	if _, ok := scrcac.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "SystemComponentRelationshipControlAction.type"`)}
	}
	if v, ok := scrcac.mutation.GetType(); ok {
		if err := systemcomponentrelationshipcontrolaction.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "SystemComponentRelationshipControlAction.type": %w`, err)}
		}
	}
	if _, ok := scrcac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SystemComponentRelationshipControlAction.created_at"`)}
	}
	if len(scrcac.mutation.ControlIDs()) == 0 {
		return &ValidationError{Name: "control", err: errors.New(`ent: missing required edge "SystemComponentRelationshipControlAction.control"`)}
	}
	if len(scrcac.mutation.RelationshipIDs()) == 0 {
		return &ValidationError{Name: "relationship", err: errors.New(`ent: missing required edge "SystemComponentRelationshipControlAction.relationship"`)}
	}
	return nil
}

func (scrcac *SystemComponentRelationshipControlActionCreate) sqlSave(ctx context.Context) (*SystemComponentRelationshipControlAction, error) {
	if err := scrcac.check(); err != nil {
		return nil, err
	}
	_node, _spec := scrcac.createSpec()
	if err := sqlgraph.CreateNode(ctx, scrcac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	scrcac.mutation.id = &_node.ID
	scrcac.mutation.done = true
	return _node, nil
}

func (scrcac *SystemComponentRelationshipControlActionCreate) createSpec() (*SystemComponentRelationshipControlAction, *sqlgraph.CreateSpec) {
	var (
		_node = &SystemComponentRelationshipControlAction{config: scrcac.config}
		_spec = sqlgraph.NewCreateSpec(systemcomponentrelationshipcontrolaction.Table, sqlgraph.NewFieldSpec(systemcomponentrelationshipcontrolaction.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = scrcac.conflict
	if id, ok := scrcac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := scrcac.mutation.GetType(); ok {
		_spec.SetField(systemcomponentrelationshipcontrolaction.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := scrcac.mutation.Description(); ok {
		_spec.SetField(systemcomponentrelationshipcontrolaction.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := scrcac.mutation.CreatedAt(); ok {
		_spec.SetField(systemcomponentrelationshipcontrolaction.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := scrcac.mutation.ControlIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemcomponentrelationshipcontrolaction.ControlTable,
			Columns: []string{systemcomponentrelationshipcontrolaction.ControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentcontrol.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ControlID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := scrcac.mutation.RelationshipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   systemcomponentrelationshipcontrolaction.RelationshipTable,
			Columns: []string{systemcomponentrelationshipcontrolaction.RelationshipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentrelationship.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RelationshipID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SystemComponentRelationshipControlAction.Create().
//		SetControlID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SystemComponentRelationshipControlActionUpsert) {
//			SetControlID(v+v).
//		}).
//		Exec(ctx)
func (scrcac *SystemComponentRelationshipControlActionCreate) OnConflict(opts ...sql.ConflictOption) *SystemComponentRelationshipControlActionUpsertOne {
	scrcac.conflict = opts
	return &SystemComponentRelationshipControlActionUpsertOne{
		create: scrcac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SystemComponentRelationshipControlAction.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scrcac *SystemComponentRelationshipControlActionCreate) OnConflictColumns(columns ...string) *SystemComponentRelationshipControlActionUpsertOne {
	scrcac.conflict = append(scrcac.conflict, sql.ConflictColumns(columns...))
	return &SystemComponentRelationshipControlActionUpsertOne{
		create: scrcac,
	}
}

type (
	// SystemComponentRelationshipControlActionUpsertOne is the builder for "upsert"-ing
	//  one SystemComponentRelationshipControlAction node.
	SystemComponentRelationshipControlActionUpsertOne struct {
		create *SystemComponentRelationshipControlActionCreate
	}

	// SystemComponentRelationshipControlActionUpsert is the "OnConflict" setter.
	SystemComponentRelationshipControlActionUpsert struct {
		*sql.UpdateSet
	}
)

// SetControlID sets the "control_id" field.
func (u *SystemComponentRelationshipControlActionUpsert) SetControlID(v uuid.UUID) *SystemComponentRelationshipControlActionUpsert {
	u.Set(systemcomponentrelationshipcontrolaction.FieldControlID, v)
	return u
}

// UpdateControlID sets the "control_id" field to the value that was provided on create.
func (u *SystemComponentRelationshipControlActionUpsert) UpdateControlID() *SystemComponentRelationshipControlActionUpsert {
	u.SetExcluded(systemcomponentrelationshipcontrolaction.FieldControlID)
	return u
}

// SetRelationshipID sets the "relationship_id" field.
func (u *SystemComponentRelationshipControlActionUpsert) SetRelationshipID(v uuid.UUID) *SystemComponentRelationshipControlActionUpsert {
	u.Set(systemcomponentrelationshipcontrolaction.FieldRelationshipID, v)
	return u
}

// UpdateRelationshipID sets the "relationship_id" field to the value that was provided on create.
func (u *SystemComponentRelationshipControlActionUpsert) UpdateRelationshipID() *SystemComponentRelationshipControlActionUpsert {
	u.SetExcluded(systemcomponentrelationshipcontrolaction.FieldRelationshipID)
	return u
}

// SetType sets the "type" field.
func (u *SystemComponentRelationshipControlActionUpsert) SetType(v string) *SystemComponentRelationshipControlActionUpsert {
	u.Set(systemcomponentrelationshipcontrolaction.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *SystemComponentRelationshipControlActionUpsert) UpdateType() *SystemComponentRelationshipControlActionUpsert {
	u.SetExcluded(systemcomponentrelationshipcontrolaction.FieldType)
	return u
}

// SetDescription sets the "description" field.
func (u *SystemComponentRelationshipControlActionUpsert) SetDescription(v string) *SystemComponentRelationshipControlActionUpsert {
	u.Set(systemcomponentrelationshipcontrolaction.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SystemComponentRelationshipControlActionUpsert) UpdateDescription() *SystemComponentRelationshipControlActionUpsert {
	u.SetExcluded(systemcomponentrelationshipcontrolaction.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *SystemComponentRelationshipControlActionUpsert) ClearDescription() *SystemComponentRelationshipControlActionUpsert {
	u.SetNull(systemcomponentrelationshipcontrolaction.FieldDescription)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SystemComponentRelationshipControlActionUpsert) SetCreatedAt(v time.Time) *SystemComponentRelationshipControlActionUpsert {
	u.Set(systemcomponentrelationshipcontrolaction.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SystemComponentRelationshipControlActionUpsert) UpdateCreatedAt() *SystemComponentRelationshipControlActionUpsert {
	u.SetExcluded(systemcomponentrelationshipcontrolaction.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SystemComponentRelationshipControlAction.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(systemcomponentrelationshipcontrolaction.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SystemComponentRelationshipControlActionUpsertOne) UpdateNewValues() *SystemComponentRelationshipControlActionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(systemcomponentrelationshipcontrolaction.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SystemComponentRelationshipControlAction.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SystemComponentRelationshipControlActionUpsertOne) Ignore() *SystemComponentRelationshipControlActionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SystemComponentRelationshipControlActionUpsertOne) DoNothing() *SystemComponentRelationshipControlActionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SystemComponentRelationshipControlActionCreate.OnConflict
// documentation for more info.
func (u *SystemComponentRelationshipControlActionUpsertOne) Update(set func(*SystemComponentRelationshipControlActionUpsert)) *SystemComponentRelationshipControlActionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SystemComponentRelationshipControlActionUpsert{UpdateSet: update})
	}))
	return u
}

// SetControlID sets the "control_id" field.
func (u *SystemComponentRelationshipControlActionUpsertOne) SetControlID(v uuid.UUID) *SystemComponentRelationshipControlActionUpsertOne {
	return u.Update(func(s *SystemComponentRelationshipControlActionUpsert) {
		s.SetControlID(v)
	})
}

// UpdateControlID sets the "control_id" field to the value that was provided on create.
func (u *SystemComponentRelationshipControlActionUpsertOne) UpdateControlID() *SystemComponentRelationshipControlActionUpsertOne {
	return u.Update(func(s *SystemComponentRelationshipControlActionUpsert) {
		s.UpdateControlID()
	})
}

// SetRelationshipID sets the "relationship_id" field.
func (u *SystemComponentRelationshipControlActionUpsertOne) SetRelationshipID(v uuid.UUID) *SystemComponentRelationshipControlActionUpsertOne {
	return u.Update(func(s *SystemComponentRelationshipControlActionUpsert) {
		s.SetRelationshipID(v)
	})
}

// UpdateRelationshipID sets the "relationship_id" field to the value that was provided on create.
func (u *SystemComponentRelationshipControlActionUpsertOne) UpdateRelationshipID() *SystemComponentRelationshipControlActionUpsertOne {
	return u.Update(func(s *SystemComponentRelationshipControlActionUpsert) {
		s.UpdateRelationshipID()
	})
}

// SetType sets the "type" field.
func (u *SystemComponentRelationshipControlActionUpsertOne) SetType(v string) *SystemComponentRelationshipControlActionUpsertOne {
	return u.Update(func(s *SystemComponentRelationshipControlActionUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *SystemComponentRelationshipControlActionUpsertOne) UpdateType() *SystemComponentRelationshipControlActionUpsertOne {
	return u.Update(func(s *SystemComponentRelationshipControlActionUpsert) {
		s.UpdateType()
	})
}

// SetDescription sets the "description" field.
func (u *SystemComponentRelationshipControlActionUpsertOne) SetDescription(v string) *SystemComponentRelationshipControlActionUpsertOne {
	return u.Update(func(s *SystemComponentRelationshipControlActionUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SystemComponentRelationshipControlActionUpsertOne) UpdateDescription() *SystemComponentRelationshipControlActionUpsertOne {
	return u.Update(func(s *SystemComponentRelationshipControlActionUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *SystemComponentRelationshipControlActionUpsertOne) ClearDescription() *SystemComponentRelationshipControlActionUpsertOne {
	return u.Update(func(s *SystemComponentRelationshipControlActionUpsert) {
		s.ClearDescription()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SystemComponentRelationshipControlActionUpsertOne) SetCreatedAt(v time.Time) *SystemComponentRelationshipControlActionUpsertOne {
	return u.Update(func(s *SystemComponentRelationshipControlActionUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SystemComponentRelationshipControlActionUpsertOne) UpdateCreatedAt() *SystemComponentRelationshipControlActionUpsertOne {
	return u.Update(func(s *SystemComponentRelationshipControlActionUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *SystemComponentRelationshipControlActionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SystemComponentRelationshipControlActionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SystemComponentRelationshipControlActionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SystemComponentRelationshipControlActionUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: SystemComponentRelationshipControlActionUpsertOne.ID is not supported by MySQL driver. Use SystemComponentRelationshipControlActionUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SystemComponentRelationshipControlActionUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SystemComponentRelationshipControlActionCreateBulk is the builder for creating many SystemComponentRelationshipControlAction entities in bulk.
type SystemComponentRelationshipControlActionCreateBulk struct {
	config
	err      error
	builders []*SystemComponentRelationshipControlActionCreate
	conflict []sql.ConflictOption
}

// Save creates the SystemComponentRelationshipControlAction entities in the database.
func (scrcacb *SystemComponentRelationshipControlActionCreateBulk) Save(ctx context.Context) ([]*SystemComponentRelationshipControlAction, error) {
	if scrcacb.err != nil {
		return nil, scrcacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scrcacb.builders))
	nodes := make([]*SystemComponentRelationshipControlAction, len(scrcacb.builders))
	mutators := make([]Mutator, len(scrcacb.builders))
	for i := range scrcacb.builders {
		func(i int, root context.Context) {
			builder := scrcacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SystemComponentRelationshipControlActionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scrcacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scrcacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scrcacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scrcacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scrcacb *SystemComponentRelationshipControlActionCreateBulk) SaveX(ctx context.Context) []*SystemComponentRelationshipControlAction {
	v, err := scrcacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scrcacb *SystemComponentRelationshipControlActionCreateBulk) Exec(ctx context.Context) error {
	_, err := scrcacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scrcacb *SystemComponentRelationshipControlActionCreateBulk) ExecX(ctx context.Context) {
	if err := scrcacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SystemComponentRelationshipControlAction.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SystemComponentRelationshipControlActionUpsert) {
//			SetControlID(v+v).
//		}).
//		Exec(ctx)
func (scrcacb *SystemComponentRelationshipControlActionCreateBulk) OnConflict(opts ...sql.ConflictOption) *SystemComponentRelationshipControlActionUpsertBulk {
	scrcacb.conflict = opts
	return &SystemComponentRelationshipControlActionUpsertBulk{
		create: scrcacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SystemComponentRelationshipControlAction.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scrcacb *SystemComponentRelationshipControlActionCreateBulk) OnConflictColumns(columns ...string) *SystemComponentRelationshipControlActionUpsertBulk {
	scrcacb.conflict = append(scrcacb.conflict, sql.ConflictColumns(columns...))
	return &SystemComponentRelationshipControlActionUpsertBulk{
		create: scrcacb,
	}
}

// SystemComponentRelationshipControlActionUpsertBulk is the builder for "upsert"-ing
// a bulk of SystemComponentRelationshipControlAction nodes.
type SystemComponentRelationshipControlActionUpsertBulk struct {
	create *SystemComponentRelationshipControlActionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SystemComponentRelationshipControlAction.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(systemcomponentrelationshipcontrolaction.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SystemComponentRelationshipControlActionUpsertBulk) UpdateNewValues() *SystemComponentRelationshipControlActionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(systemcomponentrelationshipcontrolaction.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SystemComponentRelationshipControlAction.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SystemComponentRelationshipControlActionUpsertBulk) Ignore() *SystemComponentRelationshipControlActionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SystemComponentRelationshipControlActionUpsertBulk) DoNothing() *SystemComponentRelationshipControlActionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SystemComponentRelationshipControlActionCreateBulk.OnConflict
// documentation for more info.
func (u *SystemComponentRelationshipControlActionUpsertBulk) Update(set func(*SystemComponentRelationshipControlActionUpsert)) *SystemComponentRelationshipControlActionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SystemComponentRelationshipControlActionUpsert{UpdateSet: update})
	}))
	return u
}

// SetControlID sets the "control_id" field.
func (u *SystemComponentRelationshipControlActionUpsertBulk) SetControlID(v uuid.UUID) *SystemComponentRelationshipControlActionUpsertBulk {
	return u.Update(func(s *SystemComponentRelationshipControlActionUpsert) {
		s.SetControlID(v)
	})
}

// UpdateControlID sets the "control_id" field to the value that was provided on create.
func (u *SystemComponentRelationshipControlActionUpsertBulk) UpdateControlID() *SystemComponentRelationshipControlActionUpsertBulk {
	return u.Update(func(s *SystemComponentRelationshipControlActionUpsert) {
		s.UpdateControlID()
	})
}

// SetRelationshipID sets the "relationship_id" field.
func (u *SystemComponentRelationshipControlActionUpsertBulk) SetRelationshipID(v uuid.UUID) *SystemComponentRelationshipControlActionUpsertBulk {
	return u.Update(func(s *SystemComponentRelationshipControlActionUpsert) {
		s.SetRelationshipID(v)
	})
}

// UpdateRelationshipID sets the "relationship_id" field to the value that was provided on create.
func (u *SystemComponentRelationshipControlActionUpsertBulk) UpdateRelationshipID() *SystemComponentRelationshipControlActionUpsertBulk {
	return u.Update(func(s *SystemComponentRelationshipControlActionUpsert) {
		s.UpdateRelationshipID()
	})
}

// SetType sets the "type" field.
func (u *SystemComponentRelationshipControlActionUpsertBulk) SetType(v string) *SystemComponentRelationshipControlActionUpsertBulk {
	return u.Update(func(s *SystemComponentRelationshipControlActionUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *SystemComponentRelationshipControlActionUpsertBulk) UpdateType() *SystemComponentRelationshipControlActionUpsertBulk {
	return u.Update(func(s *SystemComponentRelationshipControlActionUpsert) {
		s.UpdateType()
	})
}

// SetDescription sets the "description" field.
func (u *SystemComponentRelationshipControlActionUpsertBulk) SetDescription(v string) *SystemComponentRelationshipControlActionUpsertBulk {
	return u.Update(func(s *SystemComponentRelationshipControlActionUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SystemComponentRelationshipControlActionUpsertBulk) UpdateDescription() *SystemComponentRelationshipControlActionUpsertBulk {
	return u.Update(func(s *SystemComponentRelationshipControlActionUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *SystemComponentRelationshipControlActionUpsertBulk) ClearDescription() *SystemComponentRelationshipControlActionUpsertBulk {
	return u.Update(func(s *SystemComponentRelationshipControlActionUpsert) {
		s.ClearDescription()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SystemComponentRelationshipControlActionUpsertBulk) SetCreatedAt(v time.Time) *SystemComponentRelationshipControlActionUpsertBulk {
	return u.Update(func(s *SystemComponentRelationshipControlActionUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SystemComponentRelationshipControlActionUpsertBulk) UpdateCreatedAt() *SystemComponentRelationshipControlActionUpsertBulk {
	return u.Update(func(s *SystemComponentRelationshipControlActionUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *SystemComponentRelationshipControlActionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SystemComponentRelationshipControlActionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SystemComponentRelationshipControlActionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SystemComponentRelationshipControlActionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
