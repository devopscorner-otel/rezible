// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/systemcomponentcontrol"
	"github.com/rezible/rezible/ent/systemcomponentrelationship"
	"github.com/rezible/rezible/ent/systemcomponentrelationshipcontrolaction"
)

// SystemComponentRelationshipControlActionUpdate is the builder for updating SystemComponentRelationshipControlAction entities.
type SystemComponentRelationshipControlActionUpdate struct {
	config
	hooks     []Hook
	mutation  *SystemComponentRelationshipControlActionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SystemComponentRelationshipControlActionUpdate builder.
func (scrcau *SystemComponentRelationshipControlActionUpdate) Where(ps ...predicate.SystemComponentRelationshipControlAction) *SystemComponentRelationshipControlActionUpdate {
	scrcau.mutation.Where(ps...)
	return scrcau
}

// SetControlID sets the "control_id" field.
func (scrcau *SystemComponentRelationshipControlActionUpdate) SetControlID(u uuid.UUID) *SystemComponentRelationshipControlActionUpdate {
	scrcau.mutation.SetControlID(u)
	return scrcau
}

// SetNillableControlID sets the "control_id" field if the given value is not nil.
func (scrcau *SystemComponentRelationshipControlActionUpdate) SetNillableControlID(u *uuid.UUID) *SystemComponentRelationshipControlActionUpdate {
	if u != nil {
		scrcau.SetControlID(*u)
	}
	return scrcau
}

// SetRelationshipID sets the "relationship_id" field.
func (scrcau *SystemComponentRelationshipControlActionUpdate) SetRelationshipID(u uuid.UUID) *SystemComponentRelationshipControlActionUpdate {
	scrcau.mutation.SetRelationshipID(u)
	return scrcau
}

// SetNillableRelationshipID sets the "relationship_id" field if the given value is not nil.
func (scrcau *SystemComponentRelationshipControlActionUpdate) SetNillableRelationshipID(u *uuid.UUID) *SystemComponentRelationshipControlActionUpdate {
	if u != nil {
		scrcau.SetRelationshipID(*u)
	}
	return scrcau
}

// SetType sets the "type" field.
func (scrcau *SystemComponentRelationshipControlActionUpdate) SetType(s string) *SystemComponentRelationshipControlActionUpdate {
	scrcau.mutation.SetType(s)
	return scrcau
}

// SetNillableType sets the "type" field if the given value is not nil.
func (scrcau *SystemComponentRelationshipControlActionUpdate) SetNillableType(s *string) *SystemComponentRelationshipControlActionUpdate {
	if s != nil {
		scrcau.SetType(*s)
	}
	return scrcau
}

// SetDescription sets the "description" field.
func (scrcau *SystemComponentRelationshipControlActionUpdate) SetDescription(s string) *SystemComponentRelationshipControlActionUpdate {
	scrcau.mutation.SetDescription(s)
	return scrcau
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (scrcau *SystemComponentRelationshipControlActionUpdate) SetNillableDescription(s *string) *SystemComponentRelationshipControlActionUpdate {
	if s != nil {
		scrcau.SetDescription(*s)
	}
	return scrcau
}

// ClearDescription clears the value of the "description" field.
func (scrcau *SystemComponentRelationshipControlActionUpdate) ClearDescription() *SystemComponentRelationshipControlActionUpdate {
	scrcau.mutation.ClearDescription()
	return scrcau
}

// SetCreatedAt sets the "created_at" field.
func (scrcau *SystemComponentRelationshipControlActionUpdate) SetCreatedAt(t time.Time) *SystemComponentRelationshipControlActionUpdate {
	scrcau.mutation.SetCreatedAt(t)
	return scrcau
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (scrcau *SystemComponentRelationshipControlActionUpdate) SetNillableCreatedAt(t *time.Time) *SystemComponentRelationshipControlActionUpdate {
	if t != nil {
		scrcau.SetCreatedAt(*t)
	}
	return scrcau
}

// SetControl sets the "control" edge to the SystemComponentControl entity.
func (scrcau *SystemComponentRelationshipControlActionUpdate) SetControl(s *SystemComponentControl) *SystemComponentRelationshipControlActionUpdate {
	return scrcau.SetControlID(s.ID)
}

// SetRelationship sets the "relationship" edge to the SystemComponentRelationship entity.
func (scrcau *SystemComponentRelationshipControlActionUpdate) SetRelationship(s *SystemComponentRelationship) *SystemComponentRelationshipControlActionUpdate {
	return scrcau.SetRelationshipID(s.ID)
}

// Mutation returns the SystemComponentRelationshipControlActionMutation object of the builder.
func (scrcau *SystemComponentRelationshipControlActionUpdate) Mutation() *SystemComponentRelationshipControlActionMutation {
	return scrcau.mutation
}

// ClearControl clears the "control" edge to the SystemComponentControl entity.
func (scrcau *SystemComponentRelationshipControlActionUpdate) ClearControl() *SystemComponentRelationshipControlActionUpdate {
	scrcau.mutation.ClearControl()
	return scrcau
}

// ClearRelationship clears the "relationship" edge to the SystemComponentRelationship entity.
func (scrcau *SystemComponentRelationshipControlActionUpdate) ClearRelationship() *SystemComponentRelationshipControlActionUpdate {
	scrcau.mutation.ClearRelationship()
	return scrcau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (scrcau *SystemComponentRelationshipControlActionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, scrcau.sqlSave, scrcau.mutation, scrcau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scrcau *SystemComponentRelationshipControlActionUpdate) SaveX(ctx context.Context) int {
	affected, err := scrcau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (scrcau *SystemComponentRelationshipControlActionUpdate) Exec(ctx context.Context) error {
	_, err := scrcau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scrcau *SystemComponentRelationshipControlActionUpdate) ExecX(ctx context.Context) {
	if err := scrcau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scrcau *SystemComponentRelationshipControlActionUpdate) check() error {
	if v, ok := scrcau.mutation.GetType(); ok {
		if err := systemcomponentrelationshipcontrolaction.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "SystemComponentRelationshipControlAction.type": %w`, err)}
		}
	}
	if scrcau.mutation.ControlCleared() && len(scrcau.mutation.ControlIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SystemComponentRelationshipControlAction.control"`)
	}
	if scrcau.mutation.RelationshipCleared() && len(scrcau.mutation.RelationshipIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SystemComponentRelationshipControlAction.relationship"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (scrcau *SystemComponentRelationshipControlActionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SystemComponentRelationshipControlActionUpdate {
	scrcau.modifiers = append(scrcau.modifiers, modifiers...)
	return scrcau
}

func (scrcau *SystemComponentRelationshipControlActionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := scrcau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(systemcomponentrelationshipcontrolaction.Table, systemcomponentrelationshipcontrolaction.Columns, sqlgraph.NewFieldSpec(systemcomponentrelationshipcontrolaction.FieldID, field.TypeUUID))
	if ps := scrcau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scrcau.mutation.GetType(); ok {
		_spec.SetField(systemcomponentrelationshipcontrolaction.FieldType, field.TypeString, value)
	}
	if value, ok := scrcau.mutation.Description(); ok {
		_spec.SetField(systemcomponentrelationshipcontrolaction.FieldDescription, field.TypeString, value)
	}
	if scrcau.mutation.DescriptionCleared() {
		_spec.ClearField(systemcomponentrelationshipcontrolaction.FieldDescription, field.TypeString)
	}
	if value, ok := scrcau.mutation.CreatedAt(); ok {
		_spec.SetField(systemcomponentrelationshipcontrolaction.FieldCreatedAt, field.TypeTime, value)
	}
	if scrcau.mutation.ControlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemcomponentrelationshipcontrolaction.ControlTable,
			Columns: []string{systemcomponentrelationshipcontrolaction.ControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentcontrol.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scrcau.mutation.ControlIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemcomponentrelationshipcontrolaction.ControlTable,
			Columns: []string{systemcomponentrelationshipcontrolaction.ControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentcontrol.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scrcau.mutation.RelationshipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   systemcomponentrelationshipcontrolaction.RelationshipTable,
			Columns: []string{systemcomponentrelationshipcontrolaction.RelationshipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentrelationship.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scrcau.mutation.RelationshipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   systemcomponentrelationshipcontrolaction.RelationshipTable,
			Columns: []string{systemcomponentrelationshipcontrolaction.RelationshipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentrelationship.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(scrcau.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, scrcau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systemcomponentrelationshipcontrolaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	scrcau.mutation.done = true
	return n, nil
}

// SystemComponentRelationshipControlActionUpdateOne is the builder for updating a single SystemComponentRelationshipControlAction entity.
type SystemComponentRelationshipControlActionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SystemComponentRelationshipControlActionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetControlID sets the "control_id" field.
func (scrcauo *SystemComponentRelationshipControlActionUpdateOne) SetControlID(u uuid.UUID) *SystemComponentRelationshipControlActionUpdateOne {
	scrcauo.mutation.SetControlID(u)
	return scrcauo
}

// SetNillableControlID sets the "control_id" field if the given value is not nil.
func (scrcauo *SystemComponentRelationshipControlActionUpdateOne) SetNillableControlID(u *uuid.UUID) *SystemComponentRelationshipControlActionUpdateOne {
	if u != nil {
		scrcauo.SetControlID(*u)
	}
	return scrcauo
}

// SetRelationshipID sets the "relationship_id" field.
func (scrcauo *SystemComponentRelationshipControlActionUpdateOne) SetRelationshipID(u uuid.UUID) *SystemComponentRelationshipControlActionUpdateOne {
	scrcauo.mutation.SetRelationshipID(u)
	return scrcauo
}

// SetNillableRelationshipID sets the "relationship_id" field if the given value is not nil.
func (scrcauo *SystemComponentRelationshipControlActionUpdateOne) SetNillableRelationshipID(u *uuid.UUID) *SystemComponentRelationshipControlActionUpdateOne {
	if u != nil {
		scrcauo.SetRelationshipID(*u)
	}
	return scrcauo
}

// SetType sets the "type" field.
func (scrcauo *SystemComponentRelationshipControlActionUpdateOne) SetType(s string) *SystemComponentRelationshipControlActionUpdateOne {
	scrcauo.mutation.SetType(s)
	return scrcauo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (scrcauo *SystemComponentRelationshipControlActionUpdateOne) SetNillableType(s *string) *SystemComponentRelationshipControlActionUpdateOne {
	if s != nil {
		scrcauo.SetType(*s)
	}
	return scrcauo
}

// SetDescription sets the "description" field.
func (scrcauo *SystemComponentRelationshipControlActionUpdateOne) SetDescription(s string) *SystemComponentRelationshipControlActionUpdateOne {
	scrcauo.mutation.SetDescription(s)
	return scrcauo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (scrcauo *SystemComponentRelationshipControlActionUpdateOne) SetNillableDescription(s *string) *SystemComponentRelationshipControlActionUpdateOne {
	if s != nil {
		scrcauo.SetDescription(*s)
	}
	return scrcauo
}

// ClearDescription clears the value of the "description" field.
func (scrcauo *SystemComponentRelationshipControlActionUpdateOne) ClearDescription() *SystemComponentRelationshipControlActionUpdateOne {
	scrcauo.mutation.ClearDescription()
	return scrcauo
}

// SetCreatedAt sets the "created_at" field.
func (scrcauo *SystemComponentRelationshipControlActionUpdateOne) SetCreatedAt(t time.Time) *SystemComponentRelationshipControlActionUpdateOne {
	scrcauo.mutation.SetCreatedAt(t)
	return scrcauo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (scrcauo *SystemComponentRelationshipControlActionUpdateOne) SetNillableCreatedAt(t *time.Time) *SystemComponentRelationshipControlActionUpdateOne {
	if t != nil {
		scrcauo.SetCreatedAt(*t)
	}
	return scrcauo
}

// SetControl sets the "control" edge to the SystemComponentControl entity.
func (scrcauo *SystemComponentRelationshipControlActionUpdateOne) SetControl(s *SystemComponentControl) *SystemComponentRelationshipControlActionUpdateOne {
	return scrcauo.SetControlID(s.ID)
}

// SetRelationship sets the "relationship" edge to the SystemComponentRelationship entity.
func (scrcauo *SystemComponentRelationshipControlActionUpdateOne) SetRelationship(s *SystemComponentRelationship) *SystemComponentRelationshipControlActionUpdateOne {
	return scrcauo.SetRelationshipID(s.ID)
}

// Mutation returns the SystemComponentRelationshipControlActionMutation object of the builder.
func (scrcauo *SystemComponentRelationshipControlActionUpdateOne) Mutation() *SystemComponentRelationshipControlActionMutation {
	return scrcauo.mutation
}

// ClearControl clears the "control" edge to the SystemComponentControl entity.
func (scrcauo *SystemComponentRelationshipControlActionUpdateOne) ClearControl() *SystemComponentRelationshipControlActionUpdateOne {
	scrcauo.mutation.ClearControl()
	return scrcauo
}

// ClearRelationship clears the "relationship" edge to the SystemComponentRelationship entity.
func (scrcauo *SystemComponentRelationshipControlActionUpdateOne) ClearRelationship() *SystemComponentRelationshipControlActionUpdateOne {
	scrcauo.mutation.ClearRelationship()
	return scrcauo
}

// Where appends a list predicates to the SystemComponentRelationshipControlActionUpdate builder.
func (scrcauo *SystemComponentRelationshipControlActionUpdateOne) Where(ps ...predicate.SystemComponentRelationshipControlAction) *SystemComponentRelationshipControlActionUpdateOne {
	scrcauo.mutation.Where(ps...)
	return scrcauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (scrcauo *SystemComponentRelationshipControlActionUpdateOne) Select(field string, fields ...string) *SystemComponentRelationshipControlActionUpdateOne {
	scrcauo.fields = append([]string{field}, fields...)
	return scrcauo
}

// Save executes the query and returns the updated SystemComponentRelationshipControlAction entity.
func (scrcauo *SystemComponentRelationshipControlActionUpdateOne) Save(ctx context.Context) (*SystemComponentRelationshipControlAction, error) {
	return withHooks(ctx, scrcauo.sqlSave, scrcauo.mutation, scrcauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scrcauo *SystemComponentRelationshipControlActionUpdateOne) SaveX(ctx context.Context) *SystemComponentRelationshipControlAction {
	node, err := scrcauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (scrcauo *SystemComponentRelationshipControlActionUpdateOne) Exec(ctx context.Context) error {
	_, err := scrcauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scrcauo *SystemComponentRelationshipControlActionUpdateOne) ExecX(ctx context.Context) {
	if err := scrcauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scrcauo *SystemComponentRelationshipControlActionUpdateOne) check() error {
	if v, ok := scrcauo.mutation.GetType(); ok {
		if err := systemcomponentrelationshipcontrolaction.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "SystemComponentRelationshipControlAction.type": %w`, err)}
		}
	}
	if scrcauo.mutation.ControlCleared() && len(scrcauo.mutation.ControlIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SystemComponentRelationshipControlAction.control"`)
	}
	if scrcauo.mutation.RelationshipCleared() && len(scrcauo.mutation.RelationshipIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SystemComponentRelationshipControlAction.relationship"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (scrcauo *SystemComponentRelationshipControlActionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SystemComponentRelationshipControlActionUpdateOne {
	scrcauo.modifiers = append(scrcauo.modifiers, modifiers...)
	return scrcauo
}

func (scrcauo *SystemComponentRelationshipControlActionUpdateOne) sqlSave(ctx context.Context) (_node *SystemComponentRelationshipControlAction, err error) {
	if err := scrcauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(systemcomponentrelationshipcontrolaction.Table, systemcomponentrelationshipcontrolaction.Columns, sqlgraph.NewFieldSpec(systemcomponentrelationshipcontrolaction.FieldID, field.TypeUUID))
	id, ok := scrcauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SystemComponentRelationshipControlAction.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := scrcauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, systemcomponentrelationshipcontrolaction.FieldID)
		for _, f := range fields {
			if !systemcomponentrelationshipcontrolaction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != systemcomponentrelationshipcontrolaction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := scrcauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scrcauo.mutation.GetType(); ok {
		_spec.SetField(systemcomponentrelationshipcontrolaction.FieldType, field.TypeString, value)
	}
	if value, ok := scrcauo.mutation.Description(); ok {
		_spec.SetField(systemcomponentrelationshipcontrolaction.FieldDescription, field.TypeString, value)
	}
	if scrcauo.mutation.DescriptionCleared() {
		_spec.ClearField(systemcomponentrelationshipcontrolaction.FieldDescription, field.TypeString)
	}
	if value, ok := scrcauo.mutation.CreatedAt(); ok {
		_spec.SetField(systemcomponentrelationshipcontrolaction.FieldCreatedAt, field.TypeTime, value)
	}
	if scrcauo.mutation.ControlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemcomponentrelationshipcontrolaction.ControlTable,
			Columns: []string{systemcomponentrelationshipcontrolaction.ControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentcontrol.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scrcauo.mutation.ControlIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemcomponentrelationshipcontrolaction.ControlTable,
			Columns: []string{systemcomponentrelationshipcontrolaction.ControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentcontrol.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scrcauo.mutation.RelationshipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   systemcomponentrelationshipcontrolaction.RelationshipTable,
			Columns: []string{systemcomponentrelationshipcontrolaction.RelationshipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentrelationship.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scrcauo.mutation.RelationshipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   systemcomponentrelationshipcontrolaction.RelationshipTable,
			Columns: []string{systemcomponentrelationshipcontrolaction.RelationshipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentrelationship.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(scrcauo.modifiers...)
	_node = &SystemComponentRelationshipControlAction{config: scrcauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, scrcauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systemcomponentrelationshipcontrolaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	scrcauo.mutation.done = true
	return _node, nil
}
