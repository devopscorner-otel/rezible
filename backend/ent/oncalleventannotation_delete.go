// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rezible/rezible/ent/oncalleventannotation"
	"github.com/rezible/rezible/ent/predicate"
)

// OncallEventAnnotationDelete is the builder for deleting a OncallEventAnnotation entity.
type OncallEventAnnotationDelete struct {
	config
	hooks    []Hook
	mutation *OncallEventAnnotationMutation
}

// Where appends a list predicates to the OncallEventAnnotationDelete builder.
func (oead *OncallEventAnnotationDelete) Where(ps ...predicate.OncallEventAnnotation) *OncallEventAnnotationDelete {
	oead.mutation.Where(ps...)
	return oead
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (oead *OncallEventAnnotationDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, oead.sqlExec, oead.mutation, oead.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (oead *OncallEventAnnotationDelete) ExecX(ctx context.Context) int {
	n, err := oead.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (oead *OncallEventAnnotationDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(oncalleventannotation.Table, sqlgraph.NewFieldSpec(oncalleventannotation.FieldID, field.TypeUUID))
	if ps := oead.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, oead.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	oead.mutation.done = true
	return affected, err
}

// OncallEventAnnotationDeleteOne is the builder for deleting a single OncallEventAnnotation entity.
type OncallEventAnnotationDeleteOne struct {
	oead *OncallEventAnnotationDelete
}

// Where appends a list predicates to the OncallEventAnnotationDelete builder.
func (oeado *OncallEventAnnotationDeleteOne) Where(ps ...predicate.OncallEventAnnotation) *OncallEventAnnotationDeleteOne {
	oeado.oead.mutation.Where(ps...)
	return oeado
}

// Exec executes the deletion query.
func (oeado *OncallEventAnnotationDeleteOne) Exec(ctx context.Context) error {
	n, err := oeado.oead.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{oncalleventannotation.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (oeado *OncallEventAnnotationDeleteOne) ExecX(ctx context.Context) {
	if err := oeado.Exec(ctx); err != nil {
		panic(err)
	}
}
