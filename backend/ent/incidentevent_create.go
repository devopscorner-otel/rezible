// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/twohundreds/rezible/ent/incident"
	"github.com/twohundreds/rezible/ent/incidentevent"
	"github.com/twohundreds/rezible/ent/service"
)

// IncidentEventCreate is the builder for creating a IncidentEvent entity.
type IncidentEventCreate struct {
	config
	mutation *IncidentEventMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetType sets the "type" field.
func (iec *IncidentEventCreate) SetType(i incidentevent.Type) *IncidentEventCreate {
	iec.mutation.SetType(i)
	return iec
}

// SetTime sets the "time" field.
func (iec *IncidentEventCreate) SetTime(t time.Time) *IncidentEventCreate {
	iec.mutation.SetTime(t)
	return iec
}

// SetIncidentID sets the "incident_id" field.
func (iec *IncidentEventCreate) SetIncidentID(u uuid.UUID) *IncidentEventCreate {
	iec.mutation.SetIncidentID(u)
	return iec
}

// SetID sets the "id" field.
func (iec *IncidentEventCreate) SetID(u uuid.UUID) *IncidentEventCreate {
	iec.mutation.SetID(u)
	return iec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (iec *IncidentEventCreate) SetNillableID(u *uuid.UUID) *IncidentEventCreate {
	if u != nil {
		iec.SetID(*u)
	}
	return iec
}

// SetIncident sets the "incident" edge to the Incident entity.
func (iec *IncidentEventCreate) SetIncident(i *Incident) *IncidentEventCreate {
	return iec.SetIncidentID(i.ID)
}

// AddServiceIDs adds the "services" edge to the Service entity by IDs.
func (iec *IncidentEventCreate) AddServiceIDs(ids ...uuid.UUID) *IncidentEventCreate {
	iec.mutation.AddServiceIDs(ids...)
	return iec
}

// AddServices adds the "services" edges to the Service entity.
func (iec *IncidentEventCreate) AddServices(s ...*Service) *IncidentEventCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return iec.AddServiceIDs(ids...)
}

// Mutation returns the IncidentEventMutation object of the builder.
func (iec *IncidentEventCreate) Mutation() *IncidentEventMutation {
	return iec.mutation
}

// Save creates the IncidentEvent in the database.
func (iec *IncidentEventCreate) Save(ctx context.Context) (*IncidentEvent, error) {
	iec.defaults()
	return withHooks(ctx, iec.sqlSave, iec.mutation, iec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (iec *IncidentEventCreate) SaveX(ctx context.Context) *IncidentEvent {
	v, err := iec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iec *IncidentEventCreate) Exec(ctx context.Context) error {
	_, err := iec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iec *IncidentEventCreate) ExecX(ctx context.Context) {
	if err := iec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iec *IncidentEventCreate) defaults() {
	if _, ok := iec.mutation.ID(); !ok {
		v := incidentevent.DefaultID()
		iec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iec *IncidentEventCreate) check() error {
	if _, ok := iec.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "IncidentEvent.type"`)}
	}
	if v, ok := iec.mutation.GetType(); ok {
		if err := incidentevent.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "IncidentEvent.type": %w`, err)}
		}
	}
	if _, ok := iec.mutation.Time(); !ok {
		return &ValidationError{Name: "time", err: errors.New(`ent: missing required field "IncidentEvent.time"`)}
	}
	if _, ok := iec.mutation.IncidentID(); !ok {
		return &ValidationError{Name: "incident_id", err: errors.New(`ent: missing required field "IncidentEvent.incident_id"`)}
	}
	if len(iec.mutation.IncidentIDs()) == 0 {
		return &ValidationError{Name: "incident", err: errors.New(`ent: missing required edge "IncidentEvent.incident"`)}
	}
	return nil
}

func (iec *IncidentEventCreate) sqlSave(ctx context.Context) (*IncidentEvent, error) {
	if err := iec.check(); err != nil {
		return nil, err
	}
	_node, _spec := iec.createSpec()
	if err := sqlgraph.CreateNode(ctx, iec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	iec.mutation.id = &_node.ID
	iec.mutation.done = true
	return _node, nil
}

func (iec *IncidentEventCreate) createSpec() (*IncidentEvent, *sqlgraph.CreateSpec) {
	var (
		_node = &IncidentEvent{config: iec.config}
		_spec = sqlgraph.NewCreateSpec(incidentevent.Table, sqlgraph.NewFieldSpec(incidentevent.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = iec.conflict
	if id, ok := iec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := iec.mutation.GetType(); ok {
		_spec.SetField(incidentevent.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := iec.mutation.Time(); ok {
		_spec.SetField(incidentevent.FieldTime, field.TypeTime, value)
		_node.Time = value
	}
	if nodes := iec.mutation.IncidentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incidentevent.IncidentTable,
			Columns: []string{incidentevent.IncidentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.IncidentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := iec.mutation.ServicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incidentevent.ServicesTable,
			Columns: []string{incidentevent.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IncidentEvent.Create().
//		SetType(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IncidentEventUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
func (iec *IncidentEventCreate) OnConflict(opts ...sql.ConflictOption) *IncidentEventUpsertOne {
	iec.conflict = opts
	return &IncidentEventUpsertOne{
		create: iec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IncidentEvent.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (iec *IncidentEventCreate) OnConflictColumns(columns ...string) *IncidentEventUpsertOne {
	iec.conflict = append(iec.conflict, sql.ConflictColumns(columns...))
	return &IncidentEventUpsertOne{
		create: iec,
	}
}

type (
	// IncidentEventUpsertOne is the builder for "upsert"-ing
	//  one IncidentEvent node.
	IncidentEventUpsertOne struct {
		create *IncidentEventCreate
	}

	// IncidentEventUpsert is the "OnConflict" setter.
	IncidentEventUpsert struct {
		*sql.UpdateSet
	}
)

// SetType sets the "type" field.
func (u *IncidentEventUpsert) SetType(v incidentevent.Type) *IncidentEventUpsert {
	u.Set(incidentevent.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *IncidentEventUpsert) UpdateType() *IncidentEventUpsert {
	u.SetExcluded(incidentevent.FieldType)
	return u
}

// SetTime sets the "time" field.
func (u *IncidentEventUpsert) SetTime(v time.Time) *IncidentEventUpsert {
	u.Set(incidentevent.FieldTime, v)
	return u
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *IncidentEventUpsert) UpdateTime() *IncidentEventUpsert {
	u.SetExcluded(incidentevent.FieldTime)
	return u
}

// SetIncidentID sets the "incident_id" field.
func (u *IncidentEventUpsert) SetIncidentID(v uuid.UUID) *IncidentEventUpsert {
	u.Set(incidentevent.FieldIncidentID, v)
	return u
}

// UpdateIncidentID sets the "incident_id" field to the value that was provided on create.
func (u *IncidentEventUpsert) UpdateIncidentID() *IncidentEventUpsert {
	u.SetExcluded(incidentevent.FieldIncidentID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.IncidentEvent.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(incidentevent.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IncidentEventUpsertOne) UpdateNewValues() *IncidentEventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(incidentevent.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IncidentEvent.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *IncidentEventUpsertOne) Ignore() *IncidentEventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IncidentEventUpsertOne) DoNothing() *IncidentEventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IncidentEventCreate.OnConflict
// documentation for more info.
func (u *IncidentEventUpsertOne) Update(set func(*IncidentEventUpsert)) *IncidentEventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IncidentEventUpsert{UpdateSet: update})
	}))
	return u
}

// SetType sets the "type" field.
func (u *IncidentEventUpsertOne) SetType(v incidentevent.Type) *IncidentEventUpsertOne {
	return u.Update(func(s *IncidentEventUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *IncidentEventUpsertOne) UpdateType() *IncidentEventUpsertOne {
	return u.Update(func(s *IncidentEventUpsert) {
		s.UpdateType()
	})
}

// SetTime sets the "time" field.
func (u *IncidentEventUpsertOne) SetTime(v time.Time) *IncidentEventUpsertOne {
	return u.Update(func(s *IncidentEventUpsert) {
		s.SetTime(v)
	})
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *IncidentEventUpsertOne) UpdateTime() *IncidentEventUpsertOne {
	return u.Update(func(s *IncidentEventUpsert) {
		s.UpdateTime()
	})
}

// SetIncidentID sets the "incident_id" field.
func (u *IncidentEventUpsertOne) SetIncidentID(v uuid.UUID) *IncidentEventUpsertOne {
	return u.Update(func(s *IncidentEventUpsert) {
		s.SetIncidentID(v)
	})
}

// UpdateIncidentID sets the "incident_id" field to the value that was provided on create.
func (u *IncidentEventUpsertOne) UpdateIncidentID() *IncidentEventUpsertOne {
	return u.Update(func(s *IncidentEventUpsert) {
		s.UpdateIncidentID()
	})
}

// Exec executes the query.
func (u *IncidentEventUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IncidentEventCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IncidentEventUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *IncidentEventUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: IncidentEventUpsertOne.ID is not supported by MySQL driver. Use IncidentEventUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *IncidentEventUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// IncidentEventCreateBulk is the builder for creating many IncidentEvent entities in bulk.
type IncidentEventCreateBulk struct {
	config
	err      error
	builders []*IncidentEventCreate
	conflict []sql.ConflictOption
}

// Save creates the IncidentEvent entities in the database.
func (iecb *IncidentEventCreateBulk) Save(ctx context.Context) ([]*IncidentEvent, error) {
	if iecb.err != nil {
		return nil, iecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(iecb.builders))
	nodes := make([]*IncidentEvent, len(iecb.builders))
	mutators := make([]Mutator, len(iecb.builders))
	for i := range iecb.builders {
		func(i int, root context.Context) {
			builder := iecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IncidentEventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = iecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iecb *IncidentEventCreateBulk) SaveX(ctx context.Context) []*IncidentEvent {
	v, err := iecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iecb *IncidentEventCreateBulk) Exec(ctx context.Context) error {
	_, err := iecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iecb *IncidentEventCreateBulk) ExecX(ctx context.Context) {
	if err := iecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IncidentEvent.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IncidentEventUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
func (iecb *IncidentEventCreateBulk) OnConflict(opts ...sql.ConflictOption) *IncidentEventUpsertBulk {
	iecb.conflict = opts
	return &IncidentEventUpsertBulk{
		create: iecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IncidentEvent.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (iecb *IncidentEventCreateBulk) OnConflictColumns(columns ...string) *IncidentEventUpsertBulk {
	iecb.conflict = append(iecb.conflict, sql.ConflictColumns(columns...))
	return &IncidentEventUpsertBulk{
		create: iecb,
	}
}

// IncidentEventUpsertBulk is the builder for "upsert"-ing
// a bulk of IncidentEvent nodes.
type IncidentEventUpsertBulk struct {
	create *IncidentEventCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.IncidentEvent.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(incidentevent.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IncidentEventUpsertBulk) UpdateNewValues() *IncidentEventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(incidentevent.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IncidentEvent.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *IncidentEventUpsertBulk) Ignore() *IncidentEventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IncidentEventUpsertBulk) DoNothing() *IncidentEventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IncidentEventCreateBulk.OnConflict
// documentation for more info.
func (u *IncidentEventUpsertBulk) Update(set func(*IncidentEventUpsert)) *IncidentEventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IncidentEventUpsert{UpdateSet: update})
	}))
	return u
}

// SetType sets the "type" field.
func (u *IncidentEventUpsertBulk) SetType(v incidentevent.Type) *IncidentEventUpsertBulk {
	return u.Update(func(s *IncidentEventUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *IncidentEventUpsertBulk) UpdateType() *IncidentEventUpsertBulk {
	return u.Update(func(s *IncidentEventUpsert) {
		s.UpdateType()
	})
}

// SetTime sets the "time" field.
func (u *IncidentEventUpsertBulk) SetTime(v time.Time) *IncidentEventUpsertBulk {
	return u.Update(func(s *IncidentEventUpsert) {
		s.SetTime(v)
	})
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *IncidentEventUpsertBulk) UpdateTime() *IncidentEventUpsertBulk {
	return u.Update(func(s *IncidentEventUpsert) {
		s.UpdateTime()
	})
}

// SetIncidentID sets the "incident_id" field.
func (u *IncidentEventUpsertBulk) SetIncidentID(v uuid.UUID) *IncidentEventUpsertBulk {
	return u.Update(func(s *IncidentEventUpsert) {
		s.SetIncidentID(v)
	})
}

// UpdateIncidentID sets the "incident_id" field to the value that was provided on create.
func (u *IncidentEventUpsertBulk) UpdateIncidentID() *IncidentEventUpsertBulk {
	return u.Update(func(s *IncidentEventUpsert) {
		s.UpdateIncidentID()
	})
}

// Exec executes the query.
func (u *IncidentEventUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the IncidentEventCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IncidentEventCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IncidentEventUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
