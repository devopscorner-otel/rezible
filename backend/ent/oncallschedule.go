// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/oncallroster"
	"github.com/rezible/rezible/ent/oncallschedule"
	"github.com/rezible/rezible/ent/tenant"
)

// OncallSchedule is the model entity for the OncallSchedule schema.
type OncallSchedule struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID int `json:"tenant_id,omitempty"`
	// ArchiveTime holds the value of the "archive_time" field.
	ArchiveTime time.Time `json:"archive_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// RosterID holds the value of the "roster_id" field.
	RosterID uuid.UUID `json:"roster_id,omitempty"`
	// Timezone holds the value of the "timezone" field.
	Timezone string `json:"timezone,omitempty"`
	// ProviderID holds the value of the "provider_id" field.
	ProviderID string `json:"provider_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OncallScheduleQuery when eager-loading is set.
	Edges        OncallScheduleEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OncallScheduleEdges holds the relations/edges for other nodes in the graph.
type OncallScheduleEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Participants holds the value of the participants edge.
	Participants []*OncallScheduleParticipant `json:"participants,omitempty"`
	// Roster holds the value of the roster edge.
	Roster *OncallRoster `json:"roster,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OncallScheduleEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// ParticipantsOrErr returns the Participants value or an error if the edge
// was not loaded in eager-loading.
func (e OncallScheduleEdges) ParticipantsOrErr() ([]*OncallScheduleParticipant, error) {
	if e.loadedTypes[1] {
		return e.Participants, nil
	}
	return nil, &NotLoadedError{edge: "participants"}
}

// RosterOrErr returns the Roster value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OncallScheduleEdges) RosterOrErr() (*OncallRoster, error) {
	if e.Roster != nil {
		return e.Roster, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: oncallroster.Label}
	}
	return nil, &NotLoadedError{edge: "roster"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OncallSchedule) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case oncallschedule.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case oncallschedule.FieldName, oncallschedule.FieldTimezone, oncallschedule.FieldProviderID:
			values[i] = new(sql.NullString)
		case oncallschedule.FieldArchiveTime:
			values[i] = new(sql.NullTime)
		case oncallschedule.FieldID, oncallschedule.FieldRosterID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OncallSchedule fields.
func (os *OncallSchedule) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case oncallschedule.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				os.ID = *value
			}
		case oncallschedule.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				os.TenantID = int(value.Int64)
			}
		case oncallschedule.FieldArchiveTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field archive_time", values[i])
			} else if value.Valid {
				os.ArchiveTime = value.Time
			}
		case oncallschedule.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				os.Name = value.String
			}
		case oncallschedule.FieldRosterID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field roster_id", values[i])
			} else if value != nil {
				os.RosterID = *value
			}
		case oncallschedule.FieldTimezone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field timezone", values[i])
			} else if value.Valid {
				os.Timezone = value.String
			}
		case oncallschedule.FieldProviderID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_id", values[i])
			} else if value.Valid {
				os.ProviderID = value.String
			}
		default:
			os.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OncallSchedule.
// This includes values selected through modifiers, order, etc.
func (os *OncallSchedule) Value(name string) (ent.Value, error) {
	return os.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the OncallSchedule entity.
func (os *OncallSchedule) QueryTenant() *TenantQuery {
	return NewOncallScheduleClient(os.config).QueryTenant(os)
}

// QueryParticipants queries the "participants" edge of the OncallSchedule entity.
func (os *OncallSchedule) QueryParticipants() *OncallScheduleParticipantQuery {
	return NewOncallScheduleClient(os.config).QueryParticipants(os)
}

// QueryRoster queries the "roster" edge of the OncallSchedule entity.
func (os *OncallSchedule) QueryRoster() *OncallRosterQuery {
	return NewOncallScheduleClient(os.config).QueryRoster(os)
}

// Update returns a builder for updating this OncallSchedule.
// Note that you need to call OncallSchedule.Unwrap() before calling this method if this OncallSchedule
// was returned from a transaction, and the transaction was committed or rolled back.
func (os *OncallSchedule) Update() *OncallScheduleUpdateOne {
	return NewOncallScheduleClient(os.config).UpdateOne(os)
}

// Unwrap unwraps the OncallSchedule entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (os *OncallSchedule) Unwrap() *OncallSchedule {
	_tx, ok := os.config.driver.(*txDriver)
	if !ok {
		panic("ent: OncallSchedule is not a transactional entity")
	}
	os.config.driver = _tx.drv
	return os
}

// String implements the fmt.Stringer.
func (os *OncallSchedule) String() string {
	var builder strings.Builder
	builder.WriteString("OncallSchedule(")
	builder.WriteString(fmt.Sprintf("id=%v, ", os.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", os.TenantID))
	builder.WriteString(", ")
	builder.WriteString("archive_time=")
	builder.WriteString(os.ArchiveTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(os.Name)
	builder.WriteString(", ")
	builder.WriteString("roster_id=")
	builder.WriteString(fmt.Sprintf("%v", os.RosterID))
	builder.WriteString(", ")
	builder.WriteString("timezone=")
	builder.WriteString(os.Timezone)
	builder.WriteString(", ")
	builder.WriteString("provider_id=")
	builder.WriteString(os.ProviderID)
	builder.WriteByte(')')
	return builder.String()
}

// OncallSchedules is a parsable slice of OncallSchedule.
type OncallSchedules []*OncallSchedule
