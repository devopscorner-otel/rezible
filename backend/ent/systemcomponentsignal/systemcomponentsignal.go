// Code generated by ent, DO NOT EDIT.

package systemcomponentsignal

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the systemcomponentsignal type in the database.
	Label = "system_component_signal"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldComponentID holds the string denoting the component_id field in the database.
	FieldComponentID = "component_id"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeComponent holds the string denoting the component edge name in mutations.
	EdgeComponent = "component"
	// EdgeFeedbackSignals holds the string denoting the feedback_signals edge name in mutations.
	EdgeFeedbackSignals = "feedback_signals"
	// Table holds the table name of the systemcomponentsignal in the database.
	Table = "system_component_signals"
	// ComponentTable is the table that holds the component relation/edge.
	ComponentTable = "system_component_signals"
	// ComponentInverseTable is the table name for the SystemComponent entity.
	// It exists in this package in order to avoid circular dependency with the "systemcomponent" package.
	ComponentInverseTable = "system_components"
	// ComponentColumn is the table column denoting the component relation/edge.
	ComponentColumn = "component_id"
	// FeedbackSignalsTable is the table that holds the feedback_signals relation/edge.
	FeedbackSignalsTable = "system_component_relationship_feedbacks"
	// FeedbackSignalsInverseTable is the table name for the SystemComponentRelationshipFeedback entity.
	// It exists in this package in order to avoid circular dependency with the "systemcomponentrelationshipfeedback" package.
	FeedbackSignalsInverseTable = "system_component_relationship_feedbacks"
	// FeedbackSignalsColumn is the table column denoting the feedback_signals relation/edge.
	FeedbackSignalsColumn = "signal_id"
)

// Columns holds all SQL columns for systemcomponentsignal fields.
var Columns = []string{
	FieldID,
	FieldComponentID,
	FieldDescription,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the SystemComponentSignal queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByComponentID orders the results by the component_id field.
func ByComponentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComponentID, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByComponentField orders the results by component field.
func ByComponentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newComponentStep(), sql.OrderByField(field, opts...))
	}
}

// ByFeedbackSignalsCount orders the results by feedback_signals count.
func ByFeedbackSignalsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFeedbackSignalsStep(), opts...)
	}
}

// ByFeedbackSignals orders the results by feedback_signals terms.
func ByFeedbackSignals(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFeedbackSignalsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newComponentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ComponentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ComponentTable, ComponentColumn),
	)
}
func newFeedbackSignalsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FeedbackSignalsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, FeedbackSignalsTable, FeedbackSignalsColumn),
	)
}
