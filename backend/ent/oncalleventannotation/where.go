// Code generated by ent, DO NOT EDIT.

package oncalleventannotation

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldLTE(FieldID, id))
}

// EventID applies equality check predicate on the "event_id" field. It's identical to EventIDEQ.
func EventID(v string) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldEQ(FieldEventID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldEQ(FieldCreatedAt, v))
}

// MinutesOccupied applies equality check predicate on the "minutes_occupied" field. It's identical to MinutesOccupiedEQ.
func MinutesOccupied(v int) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldEQ(FieldMinutesOccupied, v))
}

// Notes applies equality check predicate on the "notes" field. It's identical to NotesEQ.
func Notes(v string) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldEQ(FieldNotes, v))
}

// Pinned applies equality check predicate on the "pinned" field. It's identical to PinnedEQ.
func Pinned(v bool) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldEQ(FieldPinned, v))
}

// EventIDEQ applies the EQ predicate on the "event_id" field.
func EventIDEQ(v string) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldEQ(FieldEventID, v))
}

// EventIDNEQ applies the NEQ predicate on the "event_id" field.
func EventIDNEQ(v string) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldNEQ(FieldEventID, v))
}

// EventIDIn applies the In predicate on the "event_id" field.
func EventIDIn(vs ...string) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldIn(FieldEventID, vs...))
}

// EventIDNotIn applies the NotIn predicate on the "event_id" field.
func EventIDNotIn(vs ...string) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldNotIn(FieldEventID, vs...))
}

// EventIDGT applies the GT predicate on the "event_id" field.
func EventIDGT(v string) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldGT(FieldEventID, v))
}

// EventIDGTE applies the GTE predicate on the "event_id" field.
func EventIDGTE(v string) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldGTE(FieldEventID, v))
}

// EventIDLT applies the LT predicate on the "event_id" field.
func EventIDLT(v string) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldLT(FieldEventID, v))
}

// EventIDLTE applies the LTE predicate on the "event_id" field.
func EventIDLTE(v string) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldLTE(FieldEventID, v))
}

// EventIDContains applies the Contains predicate on the "event_id" field.
func EventIDContains(v string) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldContains(FieldEventID, v))
}

// EventIDHasPrefix applies the HasPrefix predicate on the "event_id" field.
func EventIDHasPrefix(v string) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldHasPrefix(FieldEventID, v))
}

// EventIDHasSuffix applies the HasSuffix predicate on the "event_id" field.
func EventIDHasSuffix(v string) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldHasSuffix(FieldEventID, v))
}

// EventIDEqualFold applies the EqualFold predicate on the "event_id" field.
func EventIDEqualFold(v string) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldEqualFold(FieldEventID, v))
}

// EventIDContainsFold applies the ContainsFold predicate on the "event_id" field.
func EventIDContainsFold(v string) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldContainsFold(FieldEventID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldLTE(FieldCreatedAt, v))
}

// MinutesOccupiedEQ applies the EQ predicate on the "minutes_occupied" field.
func MinutesOccupiedEQ(v int) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldEQ(FieldMinutesOccupied, v))
}

// MinutesOccupiedNEQ applies the NEQ predicate on the "minutes_occupied" field.
func MinutesOccupiedNEQ(v int) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldNEQ(FieldMinutesOccupied, v))
}

// MinutesOccupiedIn applies the In predicate on the "minutes_occupied" field.
func MinutesOccupiedIn(vs ...int) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldIn(FieldMinutesOccupied, vs...))
}

// MinutesOccupiedNotIn applies the NotIn predicate on the "minutes_occupied" field.
func MinutesOccupiedNotIn(vs ...int) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldNotIn(FieldMinutesOccupied, vs...))
}

// MinutesOccupiedGT applies the GT predicate on the "minutes_occupied" field.
func MinutesOccupiedGT(v int) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldGT(FieldMinutesOccupied, v))
}

// MinutesOccupiedGTE applies the GTE predicate on the "minutes_occupied" field.
func MinutesOccupiedGTE(v int) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldGTE(FieldMinutesOccupied, v))
}

// MinutesOccupiedLT applies the LT predicate on the "minutes_occupied" field.
func MinutesOccupiedLT(v int) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldLT(FieldMinutesOccupied, v))
}

// MinutesOccupiedLTE applies the LTE predicate on the "minutes_occupied" field.
func MinutesOccupiedLTE(v int) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldLTE(FieldMinutesOccupied, v))
}

// NotesEQ applies the EQ predicate on the "notes" field.
func NotesEQ(v string) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldEQ(FieldNotes, v))
}

// NotesNEQ applies the NEQ predicate on the "notes" field.
func NotesNEQ(v string) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldNEQ(FieldNotes, v))
}

// NotesIn applies the In predicate on the "notes" field.
func NotesIn(vs ...string) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldIn(FieldNotes, vs...))
}

// NotesNotIn applies the NotIn predicate on the "notes" field.
func NotesNotIn(vs ...string) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldNotIn(FieldNotes, vs...))
}

// NotesGT applies the GT predicate on the "notes" field.
func NotesGT(v string) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldGT(FieldNotes, v))
}

// NotesGTE applies the GTE predicate on the "notes" field.
func NotesGTE(v string) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldGTE(FieldNotes, v))
}

// NotesLT applies the LT predicate on the "notes" field.
func NotesLT(v string) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldLT(FieldNotes, v))
}

// NotesLTE applies the LTE predicate on the "notes" field.
func NotesLTE(v string) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldLTE(FieldNotes, v))
}

// NotesContains applies the Contains predicate on the "notes" field.
func NotesContains(v string) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldContains(FieldNotes, v))
}

// NotesHasPrefix applies the HasPrefix predicate on the "notes" field.
func NotesHasPrefix(v string) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldHasPrefix(FieldNotes, v))
}

// NotesHasSuffix applies the HasSuffix predicate on the "notes" field.
func NotesHasSuffix(v string) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldHasSuffix(FieldNotes, v))
}

// NotesEqualFold applies the EqualFold predicate on the "notes" field.
func NotesEqualFold(v string) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldEqualFold(FieldNotes, v))
}

// NotesContainsFold applies the ContainsFold predicate on the "notes" field.
func NotesContainsFold(v string) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldContainsFold(FieldNotes, v))
}

// PinnedEQ applies the EQ predicate on the "pinned" field.
func PinnedEQ(v bool) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldEQ(FieldPinned, v))
}

// PinnedNEQ applies the NEQ predicate on the "pinned" field.
func PinnedNEQ(v bool) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.FieldNEQ(FieldPinned, v))
}

// HasShifts applies the HasEdge predicate on the "shifts" edge.
func HasShifts() predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ShiftsTable, ShiftsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasShiftsWith applies the HasEdge predicate on the "shifts" edge with a given conditions (other predicates).
func HasShiftsWith(preds ...predicate.OncallUserShift) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(func(s *sql.Selector) {
		step := newShiftsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OncallEventAnnotation) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OncallEventAnnotation) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OncallEventAnnotation) predicate.OncallEventAnnotation {
	return predicate.OncallEventAnnotation(sql.NotPredicates(p))
}
