// Code generated by ent, DO NOT EDIT.

package oncalleventannotation

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the oncalleventannotation type in the database.
	Label = "oncall_event_annotation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEventID holds the string denoting the event_id field in the database.
	FieldEventID = "event_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldMinutesOccupied holds the string denoting the minutes_occupied field in the database.
	FieldMinutesOccupied = "minutes_occupied"
	// FieldNotes holds the string denoting the notes field in the database.
	FieldNotes = "notes"
	// FieldPinned holds the string denoting the pinned field in the database.
	FieldPinned = "pinned"
	// EdgeShifts holds the string denoting the shifts edge name in mutations.
	EdgeShifts = "shifts"
	// Table holds the table name of the oncalleventannotation in the database.
	Table = "oncall_event_annotations"
	// ShiftsTable is the table that holds the shifts relation/edge. The primary key declared below.
	ShiftsTable = "oncall_user_shift_annotations"
	// ShiftsInverseTable is the table name for the OncallUserShift entity.
	// It exists in this package in order to avoid circular dependency with the "oncallusershift" package.
	ShiftsInverseTable = "oncall_user_shifts"
)

// Columns holds all SQL columns for oncalleventannotation fields.
var Columns = []string{
	FieldID,
	FieldEventID,
	FieldCreatedAt,
	FieldMinutesOccupied,
	FieldNotes,
	FieldPinned,
}

var (
	// ShiftsPrimaryKey and ShiftsColumn2 are the table columns denoting the
	// primary key for the shifts relation (M2M).
	ShiftsPrimaryKey = []string{"oncall_user_shift_id", "oncall_event_annotation_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the OncallEventAnnotation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEventID orders the results by the event_id field.
func ByEventID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEventID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByMinutesOccupied orders the results by the minutes_occupied field.
func ByMinutesOccupied(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinutesOccupied, opts...).ToFunc()
}

// ByNotes orders the results by the notes field.
func ByNotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotes, opts...).ToFunc()
}

// ByPinned orders the results by the pinned field.
func ByPinned(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPinned, opts...).ToFunc()
}

// ByShiftsCount orders the results by shifts count.
func ByShiftsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newShiftsStep(), opts...)
	}
}

// ByShifts orders the results by shifts terms.
func ByShifts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newShiftsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newShiftsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ShiftsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ShiftsTable, ShiftsPrimaryKey...),
	)
}
