// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/retrospective"
	"github.com/rezible/rezible/ent/retrospectivecomment"
	"github.com/rezible/rezible/ent/retrospectivereview"
	"github.com/rezible/rezible/ent/user"
)

// RetrospectiveReviewUpdate is the builder for updating RetrospectiveReview entities.
type RetrospectiveReviewUpdate struct {
	config
	hooks     []Hook
	mutation  *RetrospectiveReviewMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the RetrospectiveReviewUpdate builder.
func (rru *RetrospectiveReviewUpdate) Where(ps ...predicate.RetrospectiveReview) *RetrospectiveReviewUpdate {
	rru.mutation.Where(ps...)
	return rru
}

// SetRetrospectiveID sets the "retrospective_id" field.
func (rru *RetrospectiveReviewUpdate) SetRetrospectiveID(u uuid.UUID) *RetrospectiveReviewUpdate {
	rru.mutation.SetRetrospectiveID(u)
	return rru
}

// SetNillableRetrospectiveID sets the "retrospective_id" field if the given value is not nil.
func (rru *RetrospectiveReviewUpdate) SetNillableRetrospectiveID(u *uuid.UUID) *RetrospectiveReviewUpdate {
	if u != nil {
		rru.SetRetrospectiveID(*u)
	}
	return rru
}

// SetCommentID sets the "comment_id" field.
func (rru *RetrospectiveReviewUpdate) SetCommentID(u uuid.UUID) *RetrospectiveReviewUpdate {
	rru.mutation.SetCommentID(u)
	return rru
}

// SetNillableCommentID sets the "comment_id" field if the given value is not nil.
func (rru *RetrospectiveReviewUpdate) SetNillableCommentID(u *uuid.UUID) *RetrospectiveReviewUpdate {
	if u != nil {
		rru.SetCommentID(*u)
	}
	return rru
}

// SetRequesterID sets the "requester_id" field.
func (rru *RetrospectiveReviewUpdate) SetRequesterID(u uuid.UUID) *RetrospectiveReviewUpdate {
	rru.mutation.SetRequesterID(u)
	return rru
}

// SetNillableRequesterID sets the "requester_id" field if the given value is not nil.
func (rru *RetrospectiveReviewUpdate) SetNillableRequesterID(u *uuid.UUID) *RetrospectiveReviewUpdate {
	if u != nil {
		rru.SetRequesterID(*u)
	}
	return rru
}

// SetReviewerID sets the "reviewer_id" field.
func (rru *RetrospectiveReviewUpdate) SetReviewerID(u uuid.UUID) *RetrospectiveReviewUpdate {
	rru.mutation.SetReviewerID(u)
	return rru
}

// SetNillableReviewerID sets the "reviewer_id" field if the given value is not nil.
func (rru *RetrospectiveReviewUpdate) SetNillableReviewerID(u *uuid.UUID) *RetrospectiveReviewUpdate {
	if u != nil {
		rru.SetReviewerID(*u)
	}
	return rru
}

// SetState sets the "state" field.
func (rru *RetrospectiveReviewUpdate) SetState(r retrospectivereview.State) *RetrospectiveReviewUpdate {
	rru.mutation.SetState(r)
	return rru
}

// SetNillableState sets the "state" field if the given value is not nil.
func (rru *RetrospectiveReviewUpdate) SetNillableState(r *retrospectivereview.State) *RetrospectiveReviewUpdate {
	if r != nil {
		rru.SetState(*r)
	}
	return rru
}

// SetRetrospective sets the "retrospective" edge to the Retrospective entity.
func (rru *RetrospectiveReviewUpdate) SetRetrospective(r *Retrospective) *RetrospectiveReviewUpdate {
	return rru.SetRetrospectiveID(r.ID)
}

// SetRequester sets the "requester" edge to the User entity.
func (rru *RetrospectiveReviewUpdate) SetRequester(u *User) *RetrospectiveReviewUpdate {
	return rru.SetRequesterID(u.ID)
}

// SetReviewer sets the "reviewer" edge to the User entity.
func (rru *RetrospectiveReviewUpdate) SetReviewer(u *User) *RetrospectiveReviewUpdate {
	return rru.SetReviewerID(u.ID)
}

// SetComment sets the "comment" edge to the RetrospectiveComment entity.
func (rru *RetrospectiveReviewUpdate) SetComment(r *RetrospectiveComment) *RetrospectiveReviewUpdate {
	return rru.SetCommentID(r.ID)
}

// Mutation returns the RetrospectiveReviewMutation object of the builder.
func (rru *RetrospectiveReviewUpdate) Mutation() *RetrospectiveReviewMutation {
	return rru.mutation
}

// ClearRetrospective clears the "retrospective" edge to the Retrospective entity.
func (rru *RetrospectiveReviewUpdate) ClearRetrospective() *RetrospectiveReviewUpdate {
	rru.mutation.ClearRetrospective()
	return rru
}

// ClearRequester clears the "requester" edge to the User entity.
func (rru *RetrospectiveReviewUpdate) ClearRequester() *RetrospectiveReviewUpdate {
	rru.mutation.ClearRequester()
	return rru
}

// ClearReviewer clears the "reviewer" edge to the User entity.
func (rru *RetrospectiveReviewUpdate) ClearReviewer() *RetrospectiveReviewUpdate {
	rru.mutation.ClearReviewer()
	return rru
}

// ClearComment clears the "comment" edge to the RetrospectiveComment entity.
func (rru *RetrospectiveReviewUpdate) ClearComment() *RetrospectiveReviewUpdate {
	rru.mutation.ClearComment()
	return rru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rru *RetrospectiveReviewUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rru.sqlSave, rru.mutation, rru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rru *RetrospectiveReviewUpdate) SaveX(ctx context.Context) int {
	affected, err := rru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rru *RetrospectiveReviewUpdate) Exec(ctx context.Context) error {
	_, err := rru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rru *RetrospectiveReviewUpdate) ExecX(ctx context.Context) {
	if err := rru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rru *RetrospectiveReviewUpdate) check() error {
	if v, ok := rru.mutation.State(); ok {
		if err := retrospectivereview.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "RetrospectiveReview.state": %w`, err)}
		}
	}
	if rru.mutation.TenantCleared() && len(rru.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "RetrospectiveReview.tenant"`)
	}
	if rru.mutation.RetrospectiveCleared() && len(rru.mutation.RetrospectiveIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "RetrospectiveReview.retrospective"`)
	}
	if rru.mutation.RequesterCleared() && len(rru.mutation.RequesterIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "RetrospectiveReview.requester"`)
	}
	if rru.mutation.ReviewerCleared() && len(rru.mutation.ReviewerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "RetrospectiveReview.reviewer"`)
	}
	if rru.mutation.CommentCleared() && len(rru.mutation.CommentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "RetrospectiveReview.comment"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rru *RetrospectiveReviewUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RetrospectiveReviewUpdate {
	rru.modifiers = append(rru.modifiers, modifiers...)
	return rru
}

func (rru *RetrospectiveReviewUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(retrospectivereview.Table, retrospectivereview.Columns, sqlgraph.NewFieldSpec(retrospectivereview.FieldID, field.TypeUUID))
	if ps := rru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rru.mutation.State(); ok {
		_spec.SetField(retrospectivereview.FieldState, field.TypeEnum, value)
	}
	if rru.mutation.RetrospectiveCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospectivereview.RetrospectiveTable,
			Columns: []string{retrospectivereview.RetrospectiveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospective.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rru.mutation.RetrospectiveIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospectivereview.RetrospectiveTable,
			Columns: []string{retrospectivereview.RetrospectiveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospective.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rru.mutation.RequesterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospectivereview.RequesterTable,
			Columns: []string{retrospectivereview.RequesterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rru.mutation.RequesterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospectivereview.RequesterTable,
			Columns: []string{retrospectivereview.RequesterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rru.mutation.ReviewerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospectivereview.ReviewerTable,
			Columns: []string{retrospectivereview.ReviewerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rru.mutation.ReviewerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospectivereview.ReviewerTable,
			Columns: []string{retrospectivereview.ReviewerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rru.mutation.CommentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospectivereview.CommentTable,
			Columns: []string{retrospectivereview.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivecomment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rru.mutation.CommentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospectivereview.CommentTable,
			Columns: []string{retrospectivereview.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivecomment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(rru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, rru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{retrospectivereview.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rru.mutation.done = true
	return n, nil
}

// RetrospectiveReviewUpdateOne is the builder for updating a single RetrospectiveReview entity.
type RetrospectiveReviewUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *RetrospectiveReviewMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetRetrospectiveID sets the "retrospective_id" field.
func (rruo *RetrospectiveReviewUpdateOne) SetRetrospectiveID(u uuid.UUID) *RetrospectiveReviewUpdateOne {
	rruo.mutation.SetRetrospectiveID(u)
	return rruo
}

// SetNillableRetrospectiveID sets the "retrospective_id" field if the given value is not nil.
func (rruo *RetrospectiveReviewUpdateOne) SetNillableRetrospectiveID(u *uuid.UUID) *RetrospectiveReviewUpdateOne {
	if u != nil {
		rruo.SetRetrospectiveID(*u)
	}
	return rruo
}

// SetCommentID sets the "comment_id" field.
func (rruo *RetrospectiveReviewUpdateOne) SetCommentID(u uuid.UUID) *RetrospectiveReviewUpdateOne {
	rruo.mutation.SetCommentID(u)
	return rruo
}

// SetNillableCommentID sets the "comment_id" field if the given value is not nil.
func (rruo *RetrospectiveReviewUpdateOne) SetNillableCommentID(u *uuid.UUID) *RetrospectiveReviewUpdateOne {
	if u != nil {
		rruo.SetCommentID(*u)
	}
	return rruo
}

// SetRequesterID sets the "requester_id" field.
func (rruo *RetrospectiveReviewUpdateOne) SetRequesterID(u uuid.UUID) *RetrospectiveReviewUpdateOne {
	rruo.mutation.SetRequesterID(u)
	return rruo
}

// SetNillableRequesterID sets the "requester_id" field if the given value is not nil.
func (rruo *RetrospectiveReviewUpdateOne) SetNillableRequesterID(u *uuid.UUID) *RetrospectiveReviewUpdateOne {
	if u != nil {
		rruo.SetRequesterID(*u)
	}
	return rruo
}

// SetReviewerID sets the "reviewer_id" field.
func (rruo *RetrospectiveReviewUpdateOne) SetReviewerID(u uuid.UUID) *RetrospectiveReviewUpdateOne {
	rruo.mutation.SetReviewerID(u)
	return rruo
}

// SetNillableReviewerID sets the "reviewer_id" field if the given value is not nil.
func (rruo *RetrospectiveReviewUpdateOne) SetNillableReviewerID(u *uuid.UUID) *RetrospectiveReviewUpdateOne {
	if u != nil {
		rruo.SetReviewerID(*u)
	}
	return rruo
}

// SetState sets the "state" field.
func (rruo *RetrospectiveReviewUpdateOne) SetState(r retrospectivereview.State) *RetrospectiveReviewUpdateOne {
	rruo.mutation.SetState(r)
	return rruo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (rruo *RetrospectiveReviewUpdateOne) SetNillableState(r *retrospectivereview.State) *RetrospectiveReviewUpdateOne {
	if r != nil {
		rruo.SetState(*r)
	}
	return rruo
}

// SetRetrospective sets the "retrospective" edge to the Retrospective entity.
func (rruo *RetrospectiveReviewUpdateOne) SetRetrospective(r *Retrospective) *RetrospectiveReviewUpdateOne {
	return rruo.SetRetrospectiveID(r.ID)
}

// SetRequester sets the "requester" edge to the User entity.
func (rruo *RetrospectiveReviewUpdateOne) SetRequester(u *User) *RetrospectiveReviewUpdateOne {
	return rruo.SetRequesterID(u.ID)
}

// SetReviewer sets the "reviewer" edge to the User entity.
func (rruo *RetrospectiveReviewUpdateOne) SetReviewer(u *User) *RetrospectiveReviewUpdateOne {
	return rruo.SetReviewerID(u.ID)
}

// SetComment sets the "comment" edge to the RetrospectiveComment entity.
func (rruo *RetrospectiveReviewUpdateOne) SetComment(r *RetrospectiveComment) *RetrospectiveReviewUpdateOne {
	return rruo.SetCommentID(r.ID)
}

// Mutation returns the RetrospectiveReviewMutation object of the builder.
func (rruo *RetrospectiveReviewUpdateOne) Mutation() *RetrospectiveReviewMutation {
	return rruo.mutation
}

// ClearRetrospective clears the "retrospective" edge to the Retrospective entity.
func (rruo *RetrospectiveReviewUpdateOne) ClearRetrospective() *RetrospectiveReviewUpdateOne {
	rruo.mutation.ClearRetrospective()
	return rruo
}

// ClearRequester clears the "requester" edge to the User entity.
func (rruo *RetrospectiveReviewUpdateOne) ClearRequester() *RetrospectiveReviewUpdateOne {
	rruo.mutation.ClearRequester()
	return rruo
}

// ClearReviewer clears the "reviewer" edge to the User entity.
func (rruo *RetrospectiveReviewUpdateOne) ClearReviewer() *RetrospectiveReviewUpdateOne {
	rruo.mutation.ClearReviewer()
	return rruo
}

// ClearComment clears the "comment" edge to the RetrospectiveComment entity.
func (rruo *RetrospectiveReviewUpdateOne) ClearComment() *RetrospectiveReviewUpdateOne {
	rruo.mutation.ClearComment()
	return rruo
}

// Where appends a list predicates to the RetrospectiveReviewUpdate builder.
func (rruo *RetrospectiveReviewUpdateOne) Where(ps ...predicate.RetrospectiveReview) *RetrospectiveReviewUpdateOne {
	rruo.mutation.Where(ps...)
	return rruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rruo *RetrospectiveReviewUpdateOne) Select(field string, fields ...string) *RetrospectiveReviewUpdateOne {
	rruo.fields = append([]string{field}, fields...)
	return rruo
}

// Save executes the query and returns the updated RetrospectiveReview entity.
func (rruo *RetrospectiveReviewUpdateOne) Save(ctx context.Context) (*RetrospectiveReview, error) {
	return withHooks(ctx, rruo.sqlSave, rruo.mutation, rruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rruo *RetrospectiveReviewUpdateOne) SaveX(ctx context.Context) *RetrospectiveReview {
	node, err := rruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rruo *RetrospectiveReviewUpdateOne) Exec(ctx context.Context) error {
	_, err := rruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rruo *RetrospectiveReviewUpdateOne) ExecX(ctx context.Context) {
	if err := rruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rruo *RetrospectiveReviewUpdateOne) check() error {
	if v, ok := rruo.mutation.State(); ok {
		if err := retrospectivereview.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "RetrospectiveReview.state": %w`, err)}
		}
	}
	if rruo.mutation.TenantCleared() && len(rruo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "RetrospectiveReview.tenant"`)
	}
	if rruo.mutation.RetrospectiveCleared() && len(rruo.mutation.RetrospectiveIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "RetrospectiveReview.retrospective"`)
	}
	if rruo.mutation.RequesterCleared() && len(rruo.mutation.RequesterIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "RetrospectiveReview.requester"`)
	}
	if rruo.mutation.ReviewerCleared() && len(rruo.mutation.ReviewerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "RetrospectiveReview.reviewer"`)
	}
	if rruo.mutation.CommentCleared() && len(rruo.mutation.CommentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "RetrospectiveReview.comment"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rruo *RetrospectiveReviewUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RetrospectiveReviewUpdateOne {
	rruo.modifiers = append(rruo.modifiers, modifiers...)
	return rruo
}

func (rruo *RetrospectiveReviewUpdateOne) sqlSave(ctx context.Context) (_node *RetrospectiveReview, err error) {
	if err := rruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(retrospectivereview.Table, retrospectivereview.Columns, sqlgraph.NewFieldSpec(retrospectivereview.FieldID, field.TypeUUID))
	id, ok := rruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RetrospectiveReview.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, retrospectivereview.FieldID)
		for _, f := range fields {
			if !retrospectivereview.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != retrospectivereview.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rruo.mutation.State(); ok {
		_spec.SetField(retrospectivereview.FieldState, field.TypeEnum, value)
	}
	if rruo.mutation.RetrospectiveCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospectivereview.RetrospectiveTable,
			Columns: []string{retrospectivereview.RetrospectiveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospective.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rruo.mutation.RetrospectiveIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospectivereview.RetrospectiveTable,
			Columns: []string{retrospectivereview.RetrospectiveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospective.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rruo.mutation.RequesterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospectivereview.RequesterTable,
			Columns: []string{retrospectivereview.RequesterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rruo.mutation.RequesterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospectivereview.RequesterTable,
			Columns: []string{retrospectivereview.RequesterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rruo.mutation.ReviewerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospectivereview.ReviewerTable,
			Columns: []string{retrospectivereview.ReviewerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rruo.mutation.ReviewerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospectivereview.ReviewerTable,
			Columns: []string{retrospectivereview.ReviewerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rruo.mutation.CommentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospectivereview.CommentTable,
			Columns: []string{retrospectivereview.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivecomment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rruo.mutation.CommentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospectivereview.CommentTable,
			Columns: []string{retrospectivereview.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivecomment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(rruo.modifiers...)
	_node = &RetrospectiveReview{config: rruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{retrospectivereview.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rruo.mutation.done = true
	return _node, nil
}
