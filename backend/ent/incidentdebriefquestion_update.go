// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/incidentdebriefmessage"
	"github.com/rezible/rezible/ent/incidentdebriefquestion"
	"github.com/rezible/rezible/ent/incidentfield"
	"github.com/rezible/rezible/ent/incidentrole"
	"github.com/rezible/rezible/ent/incidentseverity"
	"github.com/rezible/rezible/ent/incidenttag"
	"github.com/rezible/rezible/ent/incidenttype"
	"github.com/rezible/rezible/ent/predicate"
)

// IncidentDebriefQuestionUpdate is the builder for updating IncidentDebriefQuestion entities.
type IncidentDebriefQuestionUpdate struct {
	config
	hooks     []Hook
	mutation  *IncidentDebriefQuestionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the IncidentDebriefQuestionUpdate builder.
func (idqu *IncidentDebriefQuestionUpdate) Where(ps ...predicate.IncidentDebriefQuestion) *IncidentDebriefQuestionUpdate {
	idqu.mutation.Where(ps...)
	return idqu
}

// SetContent sets the "content" field.
func (idqu *IncidentDebriefQuestionUpdate) SetContent(s string) *IncidentDebriefQuestionUpdate {
	idqu.mutation.SetContent(s)
	return idqu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (idqu *IncidentDebriefQuestionUpdate) SetNillableContent(s *string) *IncidentDebriefQuestionUpdate {
	if s != nil {
		idqu.SetContent(*s)
	}
	return idqu
}

// AddMessageIDs adds the "messages" edge to the IncidentDebriefMessage entity by IDs.
func (idqu *IncidentDebriefQuestionUpdate) AddMessageIDs(ids ...uuid.UUID) *IncidentDebriefQuestionUpdate {
	idqu.mutation.AddMessageIDs(ids...)
	return idqu
}

// AddMessages adds the "messages" edges to the IncidentDebriefMessage entity.
func (idqu *IncidentDebriefQuestionUpdate) AddMessages(i ...*IncidentDebriefMessage) *IncidentDebriefQuestionUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return idqu.AddMessageIDs(ids...)
}

// AddIncidentFieldIDs adds the "incident_fields" edge to the IncidentField entity by IDs.
func (idqu *IncidentDebriefQuestionUpdate) AddIncidentFieldIDs(ids ...uuid.UUID) *IncidentDebriefQuestionUpdate {
	idqu.mutation.AddIncidentFieldIDs(ids...)
	return idqu
}

// AddIncidentFields adds the "incident_fields" edges to the IncidentField entity.
func (idqu *IncidentDebriefQuestionUpdate) AddIncidentFields(i ...*IncidentField) *IncidentDebriefQuestionUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return idqu.AddIncidentFieldIDs(ids...)
}

// AddIncidentRoleIDs adds the "incident_roles" edge to the IncidentRole entity by IDs.
func (idqu *IncidentDebriefQuestionUpdate) AddIncidentRoleIDs(ids ...uuid.UUID) *IncidentDebriefQuestionUpdate {
	idqu.mutation.AddIncidentRoleIDs(ids...)
	return idqu
}

// AddIncidentRoles adds the "incident_roles" edges to the IncidentRole entity.
func (idqu *IncidentDebriefQuestionUpdate) AddIncidentRoles(i ...*IncidentRole) *IncidentDebriefQuestionUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return idqu.AddIncidentRoleIDs(ids...)
}

// AddIncidentSeverityIDs adds the "incident_severities" edge to the IncidentSeverity entity by IDs.
func (idqu *IncidentDebriefQuestionUpdate) AddIncidentSeverityIDs(ids ...uuid.UUID) *IncidentDebriefQuestionUpdate {
	idqu.mutation.AddIncidentSeverityIDs(ids...)
	return idqu
}

// AddIncidentSeverities adds the "incident_severities" edges to the IncidentSeverity entity.
func (idqu *IncidentDebriefQuestionUpdate) AddIncidentSeverities(i ...*IncidentSeverity) *IncidentDebriefQuestionUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return idqu.AddIncidentSeverityIDs(ids...)
}

// AddIncidentTagIDs adds the "incident_tags" edge to the IncidentTag entity by IDs.
func (idqu *IncidentDebriefQuestionUpdate) AddIncidentTagIDs(ids ...uuid.UUID) *IncidentDebriefQuestionUpdate {
	idqu.mutation.AddIncidentTagIDs(ids...)
	return idqu
}

// AddIncidentTags adds the "incident_tags" edges to the IncidentTag entity.
func (idqu *IncidentDebriefQuestionUpdate) AddIncidentTags(i ...*IncidentTag) *IncidentDebriefQuestionUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return idqu.AddIncidentTagIDs(ids...)
}

// AddIncidentTypeIDs adds the "incident_types" edge to the IncidentType entity by IDs.
func (idqu *IncidentDebriefQuestionUpdate) AddIncidentTypeIDs(ids ...uuid.UUID) *IncidentDebriefQuestionUpdate {
	idqu.mutation.AddIncidentTypeIDs(ids...)
	return idqu
}

// AddIncidentTypes adds the "incident_types" edges to the IncidentType entity.
func (idqu *IncidentDebriefQuestionUpdate) AddIncidentTypes(i ...*IncidentType) *IncidentDebriefQuestionUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return idqu.AddIncidentTypeIDs(ids...)
}

// Mutation returns the IncidentDebriefQuestionMutation object of the builder.
func (idqu *IncidentDebriefQuestionUpdate) Mutation() *IncidentDebriefQuestionMutation {
	return idqu.mutation
}

// ClearMessages clears all "messages" edges to the IncidentDebriefMessage entity.
func (idqu *IncidentDebriefQuestionUpdate) ClearMessages() *IncidentDebriefQuestionUpdate {
	idqu.mutation.ClearMessages()
	return idqu
}

// RemoveMessageIDs removes the "messages" edge to IncidentDebriefMessage entities by IDs.
func (idqu *IncidentDebriefQuestionUpdate) RemoveMessageIDs(ids ...uuid.UUID) *IncidentDebriefQuestionUpdate {
	idqu.mutation.RemoveMessageIDs(ids...)
	return idqu
}

// RemoveMessages removes "messages" edges to IncidentDebriefMessage entities.
func (idqu *IncidentDebriefQuestionUpdate) RemoveMessages(i ...*IncidentDebriefMessage) *IncidentDebriefQuestionUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return idqu.RemoveMessageIDs(ids...)
}

// ClearIncidentFields clears all "incident_fields" edges to the IncidentField entity.
func (idqu *IncidentDebriefQuestionUpdate) ClearIncidentFields() *IncidentDebriefQuestionUpdate {
	idqu.mutation.ClearIncidentFields()
	return idqu
}

// RemoveIncidentFieldIDs removes the "incident_fields" edge to IncidentField entities by IDs.
func (idqu *IncidentDebriefQuestionUpdate) RemoveIncidentFieldIDs(ids ...uuid.UUID) *IncidentDebriefQuestionUpdate {
	idqu.mutation.RemoveIncidentFieldIDs(ids...)
	return idqu
}

// RemoveIncidentFields removes "incident_fields" edges to IncidentField entities.
func (idqu *IncidentDebriefQuestionUpdate) RemoveIncidentFields(i ...*IncidentField) *IncidentDebriefQuestionUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return idqu.RemoveIncidentFieldIDs(ids...)
}

// ClearIncidentRoles clears all "incident_roles" edges to the IncidentRole entity.
func (idqu *IncidentDebriefQuestionUpdate) ClearIncidentRoles() *IncidentDebriefQuestionUpdate {
	idqu.mutation.ClearIncidentRoles()
	return idqu
}

// RemoveIncidentRoleIDs removes the "incident_roles" edge to IncidentRole entities by IDs.
func (idqu *IncidentDebriefQuestionUpdate) RemoveIncidentRoleIDs(ids ...uuid.UUID) *IncidentDebriefQuestionUpdate {
	idqu.mutation.RemoveIncidentRoleIDs(ids...)
	return idqu
}

// RemoveIncidentRoles removes "incident_roles" edges to IncidentRole entities.
func (idqu *IncidentDebriefQuestionUpdate) RemoveIncidentRoles(i ...*IncidentRole) *IncidentDebriefQuestionUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return idqu.RemoveIncidentRoleIDs(ids...)
}

// ClearIncidentSeverities clears all "incident_severities" edges to the IncidentSeverity entity.
func (idqu *IncidentDebriefQuestionUpdate) ClearIncidentSeverities() *IncidentDebriefQuestionUpdate {
	idqu.mutation.ClearIncidentSeverities()
	return idqu
}

// RemoveIncidentSeverityIDs removes the "incident_severities" edge to IncidentSeverity entities by IDs.
func (idqu *IncidentDebriefQuestionUpdate) RemoveIncidentSeverityIDs(ids ...uuid.UUID) *IncidentDebriefQuestionUpdate {
	idqu.mutation.RemoveIncidentSeverityIDs(ids...)
	return idqu
}

// RemoveIncidentSeverities removes "incident_severities" edges to IncidentSeverity entities.
func (idqu *IncidentDebriefQuestionUpdate) RemoveIncidentSeverities(i ...*IncidentSeverity) *IncidentDebriefQuestionUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return idqu.RemoveIncidentSeverityIDs(ids...)
}

// ClearIncidentTags clears all "incident_tags" edges to the IncidentTag entity.
func (idqu *IncidentDebriefQuestionUpdate) ClearIncidentTags() *IncidentDebriefQuestionUpdate {
	idqu.mutation.ClearIncidentTags()
	return idqu
}

// RemoveIncidentTagIDs removes the "incident_tags" edge to IncidentTag entities by IDs.
func (idqu *IncidentDebriefQuestionUpdate) RemoveIncidentTagIDs(ids ...uuid.UUID) *IncidentDebriefQuestionUpdate {
	idqu.mutation.RemoveIncidentTagIDs(ids...)
	return idqu
}

// RemoveIncidentTags removes "incident_tags" edges to IncidentTag entities.
func (idqu *IncidentDebriefQuestionUpdate) RemoveIncidentTags(i ...*IncidentTag) *IncidentDebriefQuestionUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return idqu.RemoveIncidentTagIDs(ids...)
}

// ClearIncidentTypes clears all "incident_types" edges to the IncidentType entity.
func (idqu *IncidentDebriefQuestionUpdate) ClearIncidentTypes() *IncidentDebriefQuestionUpdate {
	idqu.mutation.ClearIncidentTypes()
	return idqu
}

// RemoveIncidentTypeIDs removes the "incident_types" edge to IncidentType entities by IDs.
func (idqu *IncidentDebriefQuestionUpdate) RemoveIncidentTypeIDs(ids ...uuid.UUID) *IncidentDebriefQuestionUpdate {
	idqu.mutation.RemoveIncidentTypeIDs(ids...)
	return idqu
}

// RemoveIncidentTypes removes "incident_types" edges to IncidentType entities.
func (idqu *IncidentDebriefQuestionUpdate) RemoveIncidentTypes(i ...*IncidentType) *IncidentDebriefQuestionUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return idqu.RemoveIncidentTypeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (idqu *IncidentDebriefQuestionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, idqu.sqlSave, idqu.mutation, idqu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (idqu *IncidentDebriefQuestionUpdate) SaveX(ctx context.Context) int {
	affected, err := idqu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (idqu *IncidentDebriefQuestionUpdate) Exec(ctx context.Context) error {
	_, err := idqu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (idqu *IncidentDebriefQuestionUpdate) ExecX(ctx context.Context) {
	if err := idqu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (idqu *IncidentDebriefQuestionUpdate) check() error {
	if idqu.mutation.TenantCleared() && len(idqu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IncidentDebriefQuestion.tenant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (idqu *IncidentDebriefQuestionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *IncidentDebriefQuestionUpdate {
	idqu.modifiers = append(idqu.modifiers, modifiers...)
	return idqu
}

func (idqu *IncidentDebriefQuestionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := idqu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(incidentdebriefquestion.Table, incidentdebriefquestion.Columns, sqlgraph.NewFieldSpec(incidentdebriefquestion.FieldID, field.TypeUUID))
	if ps := idqu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := idqu.mutation.Content(); ok {
		_spec.SetField(incidentdebriefquestion.FieldContent, field.TypeString, value)
	}
	if idqu.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   incidentdebriefquestion.MessagesTable,
			Columns: []string{incidentdebriefquestion.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentdebriefmessage.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := idqu.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !idqu.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   incidentdebriefquestion.MessagesTable,
			Columns: []string{incidentdebriefquestion.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentdebriefmessage.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := idqu.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   incidentdebriefquestion.MessagesTable,
			Columns: []string{incidentdebriefquestion.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentdebriefmessage.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if idqu.mutation.IncidentFieldsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incidentdebriefquestion.IncidentFieldsTable,
			Columns: incidentdebriefquestion.IncidentFieldsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentfield.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := idqu.mutation.RemovedIncidentFieldsIDs(); len(nodes) > 0 && !idqu.mutation.IncidentFieldsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incidentdebriefquestion.IncidentFieldsTable,
			Columns: incidentdebriefquestion.IncidentFieldsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentfield.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := idqu.mutation.IncidentFieldsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incidentdebriefquestion.IncidentFieldsTable,
			Columns: incidentdebriefquestion.IncidentFieldsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentfield.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if idqu.mutation.IncidentRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incidentdebriefquestion.IncidentRolesTable,
			Columns: incidentdebriefquestion.IncidentRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentrole.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := idqu.mutation.RemovedIncidentRolesIDs(); len(nodes) > 0 && !idqu.mutation.IncidentRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incidentdebriefquestion.IncidentRolesTable,
			Columns: incidentdebriefquestion.IncidentRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentrole.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := idqu.mutation.IncidentRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incidentdebriefquestion.IncidentRolesTable,
			Columns: incidentdebriefquestion.IncidentRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentrole.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if idqu.mutation.IncidentSeveritiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incidentdebriefquestion.IncidentSeveritiesTable,
			Columns: incidentdebriefquestion.IncidentSeveritiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentseverity.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := idqu.mutation.RemovedIncidentSeveritiesIDs(); len(nodes) > 0 && !idqu.mutation.IncidentSeveritiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incidentdebriefquestion.IncidentSeveritiesTable,
			Columns: incidentdebriefquestion.IncidentSeveritiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentseverity.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := idqu.mutation.IncidentSeveritiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incidentdebriefquestion.IncidentSeveritiesTable,
			Columns: incidentdebriefquestion.IncidentSeveritiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentseverity.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if idqu.mutation.IncidentTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incidentdebriefquestion.IncidentTagsTable,
			Columns: incidentdebriefquestion.IncidentTagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidenttag.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := idqu.mutation.RemovedIncidentTagsIDs(); len(nodes) > 0 && !idqu.mutation.IncidentTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incidentdebriefquestion.IncidentTagsTable,
			Columns: incidentdebriefquestion.IncidentTagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidenttag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := idqu.mutation.IncidentTagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incidentdebriefquestion.IncidentTagsTable,
			Columns: incidentdebriefquestion.IncidentTagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidenttag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if idqu.mutation.IncidentTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incidentdebriefquestion.IncidentTypesTable,
			Columns: incidentdebriefquestion.IncidentTypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidenttype.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := idqu.mutation.RemovedIncidentTypesIDs(); len(nodes) > 0 && !idqu.mutation.IncidentTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incidentdebriefquestion.IncidentTypesTable,
			Columns: incidentdebriefquestion.IncidentTypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidenttype.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := idqu.mutation.IncidentTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incidentdebriefquestion.IncidentTypesTable,
			Columns: incidentdebriefquestion.IncidentTypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidenttype.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(idqu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, idqu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{incidentdebriefquestion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	idqu.mutation.done = true
	return n, nil
}

// IncidentDebriefQuestionUpdateOne is the builder for updating a single IncidentDebriefQuestion entity.
type IncidentDebriefQuestionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *IncidentDebriefQuestionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetContent sets the "content" field.
func (idquo *IncidentDebriefQuestionUpdateOne) SetContent(s string) *IncidentDebriefQuestionUpdateOne {
	idquo.mutation.SetContent(s)
	return idquo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (idquo *IncidentDebriefQuestionUpdateOne) SetNillableContent(s *string) *IncidentDebriefQuestionUpdateOne {
	if s != nil {
		idquo.SetContent(*s)
	}
	return idquo
}

// AddMessageIDs adds the "messages" edge to the IncidentDebriefMessage entity by IDs.
func (idquo *IncidentDebriefQuestionUpdateOne) AddMessageIDs(ids ...uuid.UUID) *IncidentDebriefQuestionUpdateOne {
	idquo.mutation.AddMessageIDs(ids...)
	return idquo
}

// AddMessages adds the "messages" edges to the IncidentDebriefMessage entity.
func (idquo *IncidentDebriefQuestionUpdateOne) AddMessages(i ...*IncidentDebriefMessage) *IncidentDebriefQuestionUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return idquo.AddMessageIDs(ids...)
}

// AddIncidentFieldIDs adds the "incident_fields" edge to the IncidentField entity by IDs.
func (idquo *IncidentDebriefQuestionUpdateOne) AddIncidentFieldIDs(ids ...uuid.UUID) *IncidentDebriefQuestionUpdateOne {
	idquo.mutation.AddIncidentFieldIDs(ids...)
	return idquo
}

// AddIncidentFields adds the "incident_fields" edges to the IncidentField entity.
func (idquo *IncidentDebriefQuestionUpdateOne) AddIncidentFields(i ...*IncidentField) *IncidentDebriefQuestionUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return idquo.AddIncidentFieldIDs(ids...)
}

// AddIncidentRoleIDs adds the "incident_roles" edge to the IncidentRole entity by IDs.
func (idquo *IncidentDebriefQuestionUpdateOne) AddIncidentRoleIDs(ids ...uuid.UUID) *IncidentDebriefQuestionUpdateOne {
	idquo.mutation.AddIncidentRoleIDs(ids...)
	return idquo
}

// AddIncidentRoles adds the "incident_roles" edges to the IncidentRole entity.
func (idquo *IncidentDebriefQuestionUpdateOne) AddIncidentRoles(i ...*IncidentRole) *IncidentDebriefQuestionUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return idquo.AddIncidentRoleIDs(ids...)
}

// AddIncidentSeverityIDs adds the "incident_severities" edge to the IncidentSeverity entity by IDs.
func (idquo *IncidentDebriefQuestionUpdateOne) AddIncidentSeverityIDs(ids ...uuid.UUID) *IncidentDebriefQuestionUpdateOne {
	idquo.mutation.AddIncidentSeverityIDs(ids...)
	return idquo
}

// AddIncidentSeverities adds the "incident_severities" edges to the IncidentSeverity entity.
func (idquo *IncidentDebriefQuestionUpdateOne) AddIncidentSeverities(i ...*IncidentSeverity) *IncidentDebriefQuestionUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return idquo.AddIncidentSeverityIDs(ids...)
}

// AddIncidentTagIDs adds the "incident_tags" edge to the IncidentTag entity by IDs.
func (idquo *IncidentDebriefQuestionUpdateOne) AddIncidentTagIDs(ids ...uuid.UUID) *IncidentDebriefQuestionUpdateOne {
	idquo.mutation.AddIncidentTagIDs(ids...)
	return idquo
}

// AddIncidentTags adds the "incident_tags" edges to the IncidentTag entity.
func (idquo *IncidentDebriefQuestionUpdateOne) AddIncidentTags(i ...*IncidentTag) *IncidentDebriefQuestionUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return idquo.AddIncidentTagIDs(ids...)
}

// AddIncidentTypeIDs adds the "incident_types" edge to the IncidentType entity by IDs.
func (idquo *IncidentDebriefQuestionUpdateOne) AddIncidentTypeIDs(ids ...uuid.UUID) *IncidentDebriefQuestionUpdateOne {
	idquo.mutation.AddIncidentTypeIDs(ids...)
	return idquo
}

// AddIncidentTypes adds the "incident_types" edges to the IncidentType entity.
func (idquo *IncidentDebriefQuestionUpdateOne) AddIncidentTypes(i ...*IncidentType) *IncidentDebriefQuestionUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return idquo.AddIncidentTypeIDs(ids...)
}

// Mutation returns the IncidentDebriefQuestionMutation object of the builder.
func (idquo *IncidentDebriefQuestionUpdateOne) Mutation() *IncidentDebriefQuestionMutation {
	return idquo.mutation
}

// ClearMessages clears all "messages" edges to the IncidentDebriefMessage entity.
func (idquo *IncidentDebriefQuestionUpdateOne) ClearMessages() *IncidentDebriefQuestionUpdateOne {
	idquo.mutation.ClearMessages()
	return idquo
}

// RemoveMessageIDs removes the "messages" edge to IncidentDebriefMessage entities by IDs.
func (idquo *IncidentDebriefQuestionUpdateOne) RemoveMessageIDs(ids ...uuid.UUID) *IncidentDebriefQuestionUpdateOne {
	idquo.mutation.RemoveMessageIDs(ids...)
	return idquo
}

// RemoveMessages removes "messages" edges to IncidentDebriefMessage entities.
func (idquo *IncidentDebriefQuestionUpdateOne) RemoveMessages(i ...*IncidentDebriefMessage) *IncidentDebriefQuestionUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return idquo.RemoveMessageIDs(ids...)
}

// ClearIncidentFields clears all "incident_fields" edges to the IncidentField entity.
func (idquo *IncidentDebriefQuestionUpdateOne) ClearIncidentFields() *IncidentDebriefQuestionUpdateOne {
	idquo.mutation.ClearIncidentFields()
	return idquo
}

// RemoveIncidentFieldIDs removes the "incident_fields" edge to IncidentField entities by IDs.
func (idquo *IncidentDebriefQuestionUpdateOne) RemoveIncidentFieldIDs(ids ...uuid.UUID) *IncidentDebriefQuestionUpdateOne {
	idquo.mutation.RemoveIncidentFieldIDs(ids...)
	return idquo
}

// RemoveIncidentFields removes "incident_fields" edges to IncidentField entities.
func (idquo *IncidentDebriefQuestionUpdateOne) RemoveIncidentFields(i ...*IncidentField) *IncidentDebriefQuestionUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return idquo.RemoveIncidentFieldIDs(ids...)
}

// ClearIncidentRoles clears all "incident_roles" edges to the IncidentRole entity.
func (idquo *IncidentDebriefQuestionUpdateOne) ClearIncidentRoles() *IncidentDebriefQuestionUpdateOne {
	idquo.mutation.ClearIncidentRoles()
	return idquo
}

// RemoveIncidentRoleIDs removes the "incident_roles" edge to IncidentRole entities by IDs.
func (idquo *IncidentDebriefQuestionUpdateOne) RemoveIncidentRoleIDs(ids ...uuid.UUID) *IncidentDebriefQuestionUpdateOne {
	idquo.mutation.RemoveIncidentRoleIDs(ids...)
	return idquo
}

// RemoveIncidentRoles removes "incident_roles" edges to IncidentRole entities.
func (idquo *IncidentDebriefQuestionUpdateOne) RemoveIncidentRoles(i ...*IncidentRole) *IncidentDebriefQuestionUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return idquo.RemoveIncidentRoleIDs(ids...)
}

// ClearIncidentSeverities clears all "incident_severities" edges to the IncidentSeverity entity.
func (idquo *IncidentDebriefQuestionUpdateOne) ClearIncidentSeverities() *IncidentDebriefQuestionUpdateOne {
	idquo.mutation.ClearIncidentSeverities()
	return idquo
}

// RemoveIncidentSeverityIDs removes the "incident_severities" edge to IncidentSeverity entities by IDs.
func (idquo *IncidentDebriefQuestionUpdateOne) RemoveIncidentSeverityIDs(ids ...uuid.UUID) *IncidentDebriefQuestionUpdateOne {
	idquo.mutation.RemoveIncidentSeverityIDs(ids...)
	return idquo
}

// RemoveIncidentSeverities removes "incident_severities" edges to IncidentSeverity entities.
func (idquo *IncidentDebriefQuestionUpdateOne) RemoveIncidentSeverities(i ...*IncidentSeverity) *IncidentDebriefQuestionUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return idquo.RemoveIncidentSeverityIDs(ids...)
}

// ClearIncidentTags clears all "incident_tags" edges to the IncidentTag entity.
func (idquo *IncidentDebriefQuestionUpdateOne) ClearIncidentTags() *IncidentDebriefQuestionUpdateOne {
	idquo.mutation.ClearIncidentTags()
	return idquo
}

// RemoveIncidentTagIDs removes the "incident_tags" edge to IncidentTag entities by IDs.
func (idquo *IncidentDebriefQuestionUpdateOne) RemoveIncidentTagIDs(ids ...uuid.UUID) *IncidentDebriefQuestionUpdateOne {
	idquo.mutation.RemoveIncidentTagIDs(ids...)
	return idquo
}

// RemoveIncidentTags removes "incident_tags" edges to IncidentTag entities.
func (idquo *IncidentDebriefQuestionUpdateOne) RemoveIncidentTags(i ...*IncidentTag) *IncidentDebriefQuestionUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return idquo.RemoveIncidentTagIDs(ids...)
}

// ClearIncidentTypes clears all "incident_types" edges to the IncidentType entity.
func (idquo *IncidentDebriefQuestionUpdateOne) ClearIncidentTypes() *IncidentDebriefQuestionUpdateOne {
	idquo.mutation.ClearIncidentTypes()
	return idquo
}

// RemoveIncidentTypeIDs removes the "incident_types" edge to IncidentType entities by IDs.
func (idquo *IncidentDebriefQuestionUpdateOne) RemoveIncidentTypeIDs(ids ...uuid.UUID) *IncidentDebriefQuestionUpdateOne {
	idquo.mutation.RemoveIncidentTypeIDs(ids...)
	return idquo
}

// RemoveIncidentTypes removes "incident_types" edges to IncidentType entities.
func (idquo *IncidentDebriefQuestionUpdateOne) RemoveIncidentTypes(i ...*IncidentType) *IncidentDebriefQuestionUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return idquo.RemoveIncidentTypeIDs(ids...)
}

// Where appends a list predicates to the IncidentDebriefQuestionUpdate builder.
func (idquo *IncidentDebriefQuestionUpdateOne) Where(ps ...predicate.IncidentDebriefQuestion) *IncidentDebriefQuestionUpdateOne {
	idquo.mutation.Where(ps...)
	return idquo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (idquo *IncidentDebriefQuestionUpdateOne) Select(field string, fields ...string) *IncidentDebriefQuestionUpdateOne {
	idquo.fields = append([]string{field}, fields...)
	return idquo
}

// Save executes the query and returns the updated IncidentDebriefQuestion entity.
func (idquo *IncidentDebriefQuestionUpdateOne) Save(ctx context.Context) (*IncidentDebriefQuestion, error) {
	return withHooks(ctx, idquo.sqlSave, idquo.mutation, idquo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (idquo *IncidentDebriefQuestionUpdateOne) SaveX(ctx context.Context) *IncidentDebriefQuestion {
	node, err := idquo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (idquo *IncidentDebriefQuestionUpdateOne) Exec(ctx context.Context) error {
	_, err := idquo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (idquo *IncidentDebriefQuestionUpdateOne) ExecX(ctx context.Context) {
	if err := idquo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (idquo *IncidentDebriefQuestionUpdateOne) check() error {
	if idquo.mutation.TenantCleared() && len(idquo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IncidentDebriefQuestion.tenant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (idquo *IncidentDebriefQuestionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *IncidentDebriefQuestionUpdateOne {
	idquo.modifiers = append(idquo.modifiers, modifiers...)
	return idquo
}

func (idquo *IncidentDebriefQuestionUpdateOne) sqlSave(ctx context.Context) (_node *IncidentDebriefQuestion, err error) {
	if err := idquo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(incidentdebriefquestion.Table, incidentdebriefquestion.Columns, sqlgraph.NewFieldSpec(incidentdebriefquestion.FieldID, field.TypeUUID))
	id, ok := idquo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "IncidentDebriefQuestion.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := idquo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, incidentdebriefquestion.FieldID)
		for _, f := range fields {
			if !incidentdebriefquestion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != incidentdebriefquestion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := idquo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := idquo.mutation.Content(); ok {
		_spec.SetField(incidentdebriefquestion.FieldContent, field.TypeString, value)
	}
	if idquo.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   incidentdebriefquestion.MessagesTable,
			Columns: []string{incidentdebriefquestion.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentdebriefmessage.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := idquo.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !idquo.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   incidentdebriefquestion.MessagesTable,
			Columns: []string{incidentdebriefquestion.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentdebriefmessage.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := idquo.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   incidentdebriefquestion.MessagesTable,
			Columns: []string{incidentdebriefquestion.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentdebriefmessage.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if idquo.mutation.IncidentFieldsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incidentdebriefquestion.IncidentFieldsTable,
			Columns: incidentdebriefquestion.IncidentFieldsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentfield.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := idquo.mutation.RemovedIncidentFieldsIDs(); len(nodes) > 0 && !idquo.mutation.IncidentFieldsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incidentdebriefquestion.IncidentFieldsTable,
			Columns: incidentdebriefquestion.IncidentFieldsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentfield.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := idquo.mutation.IncidentFieldsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incidentdebriefquestion.IncidentFieldsTable,
			Columns: incidentdebriefquestion.IncidentFieldsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentfield.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if idquo.mutation.IncidentRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incidentdebriefquestion.IncidentRolesTable,
			Columns: incidentdebriefquestion.IncidentRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentrole.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := idquo.mutation.RemovedIncidentRolesIDs(); len(nodes) > 0 && !idquo.mutation.IncidentRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incidentdebriefquestion.IncidentRolesTable,
			Columns: incidentdebriefquestion.IncidentRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentrole.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := idquo.mutation.IncidentRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incidentdebriefquestion.IncidentRolesTable,
			Columns: incidentdebriefquestion.IncidentRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentrole.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if idquo.mutation.IncidentSeveritiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incidentdebriefquestion.IncidentSeveritiesTable,
			Columns: incidentdebriefquestion.IncidentSeveritiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentseverity.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := idquo.mutation.RemovedIncidentSeveritiesIDs(); len(nodes) > 0 && !idquo.mutation.IncidentSeveritiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incidentdebriefquestion.IncidentSeveritiesTable,
			Columns: incidentdebriefquestion.IncidentSeveritiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentseverity.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := idquo.mutation.IncidentSeveritiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incidentdebriefquestion.IncidentSeveritiesTable,
			Columns: incidentdebriefquestion.IncidentSeveritiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentseverity.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if idquo.mutation.IncidentTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incidentdebriefquestion.IncidentTagsTable,
			Columns: incidentdebriefquestion.IncidentTagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidenttag.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := idquo.mutation.RemovedIncidentTagsIDs(); len(nodes) > 0 && !idquo.mutation.IncidentTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incidentdebriefquestion.IncidentTagsTable,
			Columns: incidentdebriefquestion.IncidentTagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidenttag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := idquo.mutation.IncidentTagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incidentdebriefquestion.IncidentTagsTable,
			Columns: incidentdebriefquestion.IncidentTagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidenttag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if idquo.mutation.IncidentTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incidentdebriefquestion.IncidentTypesTable,
			Columns: incidentdebriefquestion.IncidentTypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidenttype.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := idquo.mutation.RemovedIncidentTypesIDs(); len(nodes) > 0 && !idquo.mutation.IncidentTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incidentdebriefquestion.IncidentTypesTable,
			Columns: incidentdebriefquestion.IncidentTypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidenttype.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := idquo.mutation.IncidentTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incidentdebriefquestion.IncidentTypesTable,
			Columns: incidentdebriefquestion.IncidentTypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidenttype.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(idquo.modifiers...)
	_node = &IncidentDebriefQuestion{config: idquo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, idquo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{incidentdebriefquestion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	idquo.mutation.done = true
	return _node, nil
}
