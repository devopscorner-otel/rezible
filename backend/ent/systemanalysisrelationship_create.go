// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/systemanalysis"
	"github.com/rezible/rezible/ent/systemanalysisrelationship"
	"github.com/rezible/rezible/ent/systemcomponentcontrol"
	"github.com/rezible/rezible/ent/systemcomponentrelationship"
	"github.com/rezible/rezible/ent/systemcomponentsignal"
	"github.com/rezible/rezible/ent/systemrelationshipcontrolaction"
	"github.com/rezible/rezible/ent/systemrelationshipfeedbacksignal"
)

// SystemAnalysisRelationshipCreate is the builder for creating a SystemAnalysisRelationship entity.
type SystemAnalysisRelationshipCreate struct {
	config
	mutation *SystemAnalysisRelationshipMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAnalysisID sets the "analysis_id" field.
func (sarc *SystemAnalysisRelationshipCreate) SetAnalysisID(u uuid.UUID) *SystemAnalysisRelationshipCreate {
	sarc.mutation.SetAnalysisID(u)
	return sarc
}

// SetComponentRelationshipID sets the "component_relationship_id" field.
func (sarc *SystemAnalysisRelationshipCreate) SetComponentRelationshipID(u uuid.UUID) *SystemAnalysisRelationshipCreate {
	sarc.mutation.SetComponentRelationshipID(u)
	return sarc
}

// SetDescription sets the "description" field.
func (sarc *SystemAnalysisRelationshipCreate) SetDescription(s string) *SystemAnalysisRelationshipCreate {
	sarc.mutation.SetDescription(s)
	return sarc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sarc *SystemAnalysisRelationshipCreate) SetNillableDescription(s *string) *SystemAnalysisRelationshipCreate {
	if s != nil {
		sarc.SetDescription(*s)
	}
	return sarc
}

// SetCreatedAt sets the "created_at" field.
func (sarc *SystemAnalysisRelationshipCreate) SetCreatedAt(t time.Time) *SystemAnalysisRelationshipCreate {
	sarc.mutation.SetCreatedAt(t)
	return sarc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sarc *SystemAnalysisRelationshipCreate) SetNillableCreatedAt(t *time.Time) *SystemAnalysisRelationshipCreate {
	if t != nil {
		sarc.SetCreatedAt(*t)
	}
	return sarc
}

// SetID sets the "id" field.
func (sarc *SystemAnalysisRelationshipCreate) SetID(u uuid.UUID) *SystemAnalysisRelationshipCreate {
	sarc.mutation.SetID(u)
	return sarc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sarc *SystemAnalysisRelationshipCreate) SetNillableID(u *uuid.UUID) *SystemAnalysisRelationshipCreate {
	if u != nil {
		sarc.SetID(*u)
	}
	return sarc
}

// SetSystemAnalysisID sets the "system_analysis" edge to the SystemAnalysis entity by ID.
func (sarc *SystemAnalysisRelationshipCreate) SetSystemAnalysisID(id uuid.UUID) *SystemAnalysisRelationshipCreate {
	sarc.mutation.SetSystemAnalysisID(id)
	return sarc
}

// SetSystemAnalysis sets the "system_analysis" edge to the SystemAnalysis entity.
func (sarc *SystemAnalysisRelationshipCreate) SetSystemAnalysis(s *SystemAnalysis) *SystemAnalysisRelationshipCreate {
	return sarc.SetSystemAnalysisID(s.ID)
}

// SetComponentRelationship sets the "component_relationship" edge to the SystemComponentRelationship entity.
func (sarc *SystemAnalysisRelationshipCreate) SetComponentRelationship(s *SystemComponentRelationship) *SystemAnalysisRelationshipCreate {
	return sarc.SetComponentRelationshipID(s.ID)
}

// AddControlIDs adds the "controls" edge to the SystemComponentControl entity by IDs.
func (sarc *SystemAnalysisRelationshipCreate) AddControlIDs(ids ...uuid.UUID) *SystemAnalysisRelationshipCreate {
	sarc.mutation.AddControlIDs(ids...)
	return sarc
}

// AddControls adds the "controls" edges to the SystemComponentControl entity.
func (sarc *SystemAnalysisRelationshipCreate) AddControls(s ...*SystemComponentControl) *SystemAnalysisRelationshipCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sarc.AddControlIDs(ids...)
}

// AddSignalIDs adds the "signals" edge to the SystemComponentSignal entity by IDs.
func (sarc *SystemAnalysisRelationshipCreate) AddSignalIDs(ids ...uuid.UUID) *SystemAnalysisRelationshipCreate {
	sarc.mutation.AddSignalIDs(ids...)
	return sarc
}

// AddSignals adds the "signals" edges to the SystemComponentSignal entity.
func (sarc *SystemAnalysisRelationshipCreate) AddSignals(s ...*SystemComponentSignal) *SystemAnalysisRelationshipCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sarc.AddSignalIDs(ids...)
}

// AddControlActionIDs adds the "control_actions" edge to the SystemRelationshipControlAction entity by IDs.
func (sarc *SystemAnalysisRelationshipCreate) AddControlActionIDs(ids ...uuid.UUID) *SystemAnalysisRelationshipCreate {
	sarc.mutation.AddControlActionIDs(ids...)
	return sarc
}

// AddControlActions adds the "control_actions" edges to the SystemRelationshipControlAction entity.
func (sarc *SystemAnalysisRelationshipCreate) AddControlActions(s ...*SystemRelationshipControlAction) *SystemAnalysisRelationshipCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sarc.AddControlActionIDs(ids...)
}

// AddFeedbackSignalIDs adds the "feedback_signals" edge to the SystemRelationshipFeedbackSignal entity by IDs.
func (sarc *SystemAnalysisRelationshipCreate) AddFeedbackSignalIDs(ids ...uuid.UUID) *SystemAnalysisRelationshipCreate {
	sarc.mutation.AddFeedbackSignalIDs(ids...)
	return sarc
}

// AddFeedbackSignals adds the "feedback_signals" edges to the SystemRelationshipFeedbackSignal entity.
func (sarc *SystemAnalysisRelationshipCreate) AddFeedbackSignals(s ...*SystemRelationshipFeedbackSignal) *SystemAnalysisRelationshipCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sarc.AddFeedbackSignalIDs(ids...)
}

// Mutation returns the SystemAnalysisRelationshipMutation object of the builder.
func (sarc *SystemAnalysisRelationshipCreate) Mutation() *SystemAnalysisRelationshipMutation {
	return sarc.mutation
}

// Save creates the SystemAnalysisRelationship in the database.
func (sarc *SystemAnalysisRelationshipCreate) Save(ctx context.Context) (*SystemAnalysisRelationship, error) {
	if err := sarc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, sarc.sqlSave, sarc.mutation, sarc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sarc *SystemAnalysisRelationshipCreate) SaveX(ctx context.Context) *SystemAnalysisRelationship {
	v, err := sarc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sarc *SystemAnalysisRelationshipCreate) Exec(ctx context.Context) error {
	_, err := sarc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sarc *SystemAnalysisRelationshipCreate) ExecX(ctx context.Context) {
	if err := sarc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sarc *SystemAnalysisRelationshipCreate) defaults() error {
	if _, ok := sarc.mutation.CreatedAt(); !ok {
		if systemanalysisrelationship.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized systemanalysisrelationship.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := systemanalysisrelationship.DefaultCreatedAt()
		sarc.mutation.SetCreatedAt(v)
	}
	if _, ok := sarc.mutation.ID(); !ok {
		if systemanalysisrelationship.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized systemanalysisrelationship.DefaultID (forgotten import ent/runtime?)")
		}
		v := systemanalysisrelationship.DefaultID()
		sarc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sarc *SystemAnalysisRelationshipCreate) check() error {
	if _, ok := sarc.mutation.AnalysisID(); !ok {
		return &ValidationError{Name: "analysis_id", err: errors.New(`ent: missing required field "SystemAnalysisRelationship.analysis_id"`)}
	}
	if _, ok := sarc.mutation.ComponentRelationshipID(); !ok {
		return &ValidationError{Name: "component_relationship_id", err: errors.New(`ent: missing required field "SystemAnalysisRelationship.component_relationship_id"`)}
	}
	if _, ok := sarc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SystemAnalysisRelationship.created_at"`)}
	}
	if len(sarc.mutation.SystemAnalysisIDs()) == 0 {
		return &ValidationError{Name: "system_analysis", err: errors.New(`ent: missing required edge "SystemAnalysisRelationship.system_analysis"`)}
	}
	if len(sarc.mutation.ComponentRelationshipIDs()) == 0 {
		return &ValidationError{Name: "component_relationship", err: errors.New(`ent: missing required edge "SystemAnalysisRelationship.component_relationship"`)}
	}
	return nil
}

func (sarc *SystemAnalysisRelationshipCreate) sqlSave(ctx context.Context) (*SystemAnalysisRelationship, error) {
	if err := sarc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sarc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sarc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	sarc.mutation.id = &_node.ID
	sarc.mutation.done = true
	return _node, nil
}

func (sarc *SystemAnalysisRelationshipCreate) createSpec() (*SystemAnalysisRelationship, *sqlgraph.CreateSpec) {
	var (
		_node = &SystemAnalysisRelationship{config: sarc.config}
		_spec = sqlgraph.NewCreateSpec(systemanalysisrelationship.Table, sqlgraph.NewFieldSpec(systemanalysisrelationship.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = sarc.conflict
	if id, ok := sarc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sarc.mutation.Description(); ok {
		_spec.SetField(systemanalysisrelationship.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := sarc.mutation.CreatedAt(); ok {
		_spec.SetField(systemanalysisrelationship.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := sarc.mutation.SystemAnalysisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemanalysisrelationship.SystemAnalysisTable,
			Columns: []string{systemanalysisrelationship.SystemAnalysisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemanalysis.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AnalysisID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sarc.mutation.ComponentRelationshipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemanalysisrelationship.ComponentRelationshipTable,
			Columns: []string{systemanalysisrelationship.ComponentRelationshipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentrelationship.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ComponentRelationshipID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sarc.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemanalysisrelationship.ControlsTable,
			Columns: systemanalysisrelationship.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentcontrol.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SystemRelationshipControlActionCreate{config: sarc.config, mutation: newSystemRelationshipControlActionMutation(sarc.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sarc.mutation.SignalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemanalysisrelationship.SignalsTable,
			Columns: systemanalysisrelationship.SignalsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentsignal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SystemRelationshipFeedbackSignalCreate{config: sarc.config, mutation: newSystemRelationshipFeedbackSignalMutation(sarc.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sarc.mutation.ControlActionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemanalysisrelationship.ControlActionsTable,
			Columns: []string{systemanalysisrelationship.ControlActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemrelationshipcontrolaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sarc.mutation.FeedbackSignalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemanalysisrelationship.FeedbackSignalsTable,
			Columns: []string{systemanalysisrelationship.FeedbackSignalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemrelationshipfeedbacksignal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SystemAnalysisRelationship.Create().
//		SetAnalysisID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SystemAnalysisRelationshipUpsert) {
//			SetAnalysisID(v+v).
//		}).
//		Exec(ctx)
func (sarc *SystemAnalysisRelationshipCreate) OnConflict(opts ...sql.ConflictOption) *SystemAnalysisRelationshipUpsertOne {
	sarc.conflict = opts
	return &SystemAnalysisRelationshipUpsertOne{
		create: sarc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SystemAnalysisRelationship.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sarc *SystemAnalysisRelationshipCreate) OnConflictColumns(columns ...string) *SystemAnalysisRelationshipUpsertOne {
	sarc.conflict = append(sarc.conflict, sql.ConflictColumns(columns...))
	return &SystemAnalysisRelationshipUpsertOne{
		create: sarc,
	}
}

type (
	// SystemAnalysisRelationshipUpsertOne is the builder for "upsert"-ing
	//  one SystemAnalysisRelationship node.
	SystemAnalysisRelationshipUpsertOne struct {
		create *SystemAnalysisRelationshipCreate
	}

	// SystemAnalysisRelationshipUpsert is the "OnConflict" setter.
	SystemAnalysisRelationshipUpsert struct {
		*sql.UpdateSet
	}
)

// SetAnalysisID sets the "analysis_id" field.
func (u *SystemAnalysisRelationshipUpsert) SetAnalysisID(v uuid.UUID) *SystemAnalysisRelationshipUpsert {
	u.Set(systemanalysisrelationship.FieldAnalysisID, v)
	return u
}

// UpdateAnalysisID sets the "analysis_id" field to the value that was provided on create.
func (u *SystemAnalysisRelationshipUpsert) UpdateAnalysisID() *SystemAnalysisRelationshipUpsert {
	u.SetExcluded(systemanalysisrelationship.FieldAnalysisID)
	return u
}

// SetComponentRelationshipID sets the "component_relationship_id" field.
func (u *SystemAnalysisRelationshipUpsert) SetComponentRelationshipID(v uuid.UUID) *SystemAnalysisRelationshipUpsert {
	u.Set(systemanalysisrelationship.FieldComponentRelationshipID, v)
	return u
}

// UpdateComponentRelationshipID sets the "component_relationship_id" field to the value that was provided on create.
func (u *SystemAnalysisRelationshipUpsert) UpdateComponentRelationshipID() *SystemAnalysisRelationshipUpsert {
	u.SetExcluded(systemanalysisrelationship.FieldComponentRelationshipID)
	return u
}

// SetDescription sets the "description" field.
func (u *SystemAnalysisRelationshipUpsert) SetDescription(v string) *SystemAnalysisRelationshipUpsert {
	u.Set(systemanalysisrelationship.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SystemAnalysisRelationshipUpsert) UpdateDescription() *SystemAnalysisRelationshipUpsert {
	u.SetExcluded(systemanalysisrelationship.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *SystemAnalysisRelationshipUpsert) ClearDescription() *SystemAnalysisRelationshipUpsert {
	u.SetNull(systemanalysisrelationship.FieldDescription)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SystemAnalysisRelationshipUpsert) SetCreatedAt(v time.Time) *SystemAnalysisRelationshipUpsert {
	u.Set(systemanalysisrelationship.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SystemAnalysisRelationshipUpsert) UpdateCreatedAt() *SystemAnalysisRelationshipUpsert {
	u.SetExcluded(systemanalysisrelationship.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SystemAnalysisRelationship.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(systemanalysisrelationship.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SystemAnalysisRelationshipUpsertOne) UpdateNewValues() *SystemAnalysisRelationshipUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(systemanalysisrelationship.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SystemAnalysisRelationship.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SystemAnalysisRelationshipUpsertOne) Ignore() *SystemAnalysisRelationshipUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SystemAnalysisRelationshipUpsertOne) DoNothing() *SystemAnalysisRelationshipUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SystemAnalysisRelationshipCreate.OnConflict
// documentation for more info.
func (u *SystemAnalysisRelationshipUpsertOne) Update(set func(*SystemAnalysisRelationshipUpsert)) *SystemAnalysisRelationshipUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SystemAnalysisRelationshipUpsert{UpdateSet: update})
	}))
	return u
}

// SetAnalysisID sets the "analysis_id" field.
func (u *SystemAnalysisRelationshipUpsertOne) SetAnalysisID(v uuid.UUID) *SystemAnalysisRelationshipUpsertOne {
	return u.Update(func(s *SystemAnalysisRelationshipUpsert) {
		s.SetAnalysisID(v)
	})
}

// UpdateAnalysisID sets the "analysis_id" field to the value that was provided on create.
func (u *SystemAnalysisRelationshipUpsertOne) UpdateAnalysisID() *SystemAnalysisRelationshipUpsertOne {
	return u.Update(func(s *SystemAnalysisRelationshipUpsert) {
		s.UpdateAnalysisID()
	})
}

// SetComponentRelationshipID sets the "component_relationship_id" field.
func (u *SystemAnalysisRelationshipUpsertOne) SetComponentRelationshipID(v uuid.UUID) *SystemAnalysisRelationshipUpsertOne {
	return u.Update(func(s *SystemAnalysisRelationshipUpsert) {
		s.SetComponentRelationshipID(v)
	})
}

// UpdateComponentRelationshipID sets the "component_relationship_id" field to the value that was provided on create.
func (u *SystemAnalysisRelationshipUpsertOne) UpdateComponentRelationshipID() *SystemAnalysisRelationshipUpsertOne {
	return u.Update(func(s *SystemAnalysisRelationshipUpsert) {
		s.UpdateComponentRelationshipID()
	})
}

// SetDescription sets the "description" field.
func (u *SystemAnalysisRelationshipUpsertOne) SetDescription(v string) *SystemAnalysisRelationshipUpsertOne {
	return u.Update(func(s *SystemAnalysisRelationshipUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SystemAnalysisRelationshipUpsertOne) UpdateDescription() *SystemAnalysisRelationshipUpsertOne {
	return u.Update(func(s *SystemAnalysisRelationshipUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *SystemAnalysisRelationshipUpsertOne) ClearDescription() *SystemAnalysisRelationshipUpsertOne {
	return u.Update(func(s *SystemAnalysisRelationshipUpsert) {
		s.ClearDescription()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SystemAnalysisRelationshipUpsertOne) SetCreatedAt(v time.Time) *SystemAnalysisRelationshipUpsertOne {
	return u.Update(func(s *SystemAnalysisRelationshipUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SystemAnalysisRelationshipUpsertOne) UpdateCreatedAt() *SystemAnalysisRelationshipUpsertOne {
	return u.Update(func(s *SystemAnalysisRelationshipUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *SystemAnalysisRelationshipUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SystemAnalysisRelationshipCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SystemAnalysisRelationshipUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SystemAnalysisRelationshipUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: SystemAnalysisRelationshipUpsertOne.ID is not supported by MySQL driver. Use SystemAnalysisRelationshipUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SystemAnalysisRelationshipUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SystemAnalysisRelationshipCreateBulk is the builder for creating many SystemAnalysisRelationship entities in bulk.
type SystemAnalysisRelationshipCreateBulk struct {
	config
	err      error
	builders []*SystemAnalysisRelationshipCreate
	conflict []sql.ConflictOption
}

// Save creates the SystemAnalysisRelationship entities in the database.
func (sarcb *SystemAnalysisRelationshipCreateBulk) Save(ctx context.Context) ([]*SystemAnalysisRelationship, error) {
	if sarcb.err != nil {
		return nil, sarcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sarcb.builders))
	nodes := make([]*SystemAnalysisRelationship, len(sarcb.builders))
	mutators := make([]Mutator, len(sarcb.builders))
	for i := range sarcb.builders {
		func(i int, root context.Context) {
			builder := sarcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SystemAnalysisRelationshipMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sarcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sarcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sarcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sarcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sarcb *SystemAnalysisRelationshipCreateBulk) SaveX(ctx context.Context) []*SystemAnalysisRelationship {
	v, err := sarcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sarcb *SystemAnalysisRelationshipCreateBulk) Exec(ctx context.Context) error {
	_, err := sarcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sarcb *SystemAnalysisRelationshipCreateBulk) ExecX(ctx context.Context) {
	if err := sarcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SystemAnalysisRelationship.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SystemAnalysisRelationshipUpsert) {
//			SetAnalysisID(v+v).
//		}).
//		Exec(ctx)
func (sarcb *SystemAnalysisRelationshipCreateBulk) OnConflict(opts ...sql.ConflictOption) *SystemAnalysisRelationshipUpsertBulk {
	sarcb.conflict = opts
	return &SystemAnalysisRelationshipUpsertBulk{
		create: sarcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SystemAnalysisRelationship.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sarcb *SystemAnalysisRelationshipCreateBulk) OnConflictColumns(columns ...string) *SystemAnalysisRelationshipUpsertBulk {
	sarcb.conflict = append(sarcb.conflict, sql.ConflictColumns(columns...))
	return &SystemAnalysisRelationshipUpsertBulk{
		create: sarcb,
	}
}

// SystemAnalysisRelationshipUpsertBulk is the builder for "upsert"-ing
// a bulk of SystemAnalysisRelationship nodes.
type SystemAnalysisRelationshipUpsertBulk struct {
	create *SystemAnalysisRelationshipCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SystemAnalysisRelationship.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(systemanalysisrelationship.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SystemAnalysisRelationshipUpsertBulk) UpdateNewValues() *SystemAnalysisRelationshipUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(systemanalysisrelationship.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SystemAnalysisRelationship.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SystemAnalysisRelationshipUpsertBulk) Ignore() *SystemAnalysisRelationshipUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SystemAnalysisRelationshipUpsertBulk) DoNothing() *SystemAnalysisRelationshipUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SystemAnalysisRelationshipCreateBulk.OnConflict
// documentation for more info.
func (u *SystemAnalysisRelationshipUpsertBulk) Update(set func(*SystemAnalysisRelationshipUpsert)) *SystemAnalysisRelationshipUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SystemAnalysisRelationshipUpsert{UpdateSet: update})
	}))
	return u
}

// SetAnalysisID sets the "analysis_id" field.
func (u *SystemAnalysisRelationshipUpsertBulk) SetAnalysisID(v uuid.UUID) *SystemAnalysisRelationshipUpsertBulk {
	return u.Update(func(s *SystemAnalysisRelationshipUpsert) {
		s.SetAnalysisID(v)
	})
}

// UpdateAnalysisID sets the "analysis_id" field to the value that was provided on create.
func (u *SystemAnalysisRelationshipUpsertBulk) UpdateAnalysisID() *SystemAnalysisRelationshipUpsertBulk {
	return u.Update(func(s *SystemAnalysisRelationshipUpsert) {
		s.UpdateAnalysisID()
	})
}

// SetComponentRelationshipID sets the "component_relationship_id" field.
func (u *SystemAnalysisRelationshipUpsertBulk) SetComponentRelationshipID(v uuid.UUID) *SystemAnalysisRelationshipUpsertBulk {
	return u.Update(func(s *SystemAnalysisRelationshipUpsert) {
		s.SetComponentRelationshipID(v)
	})
}

// UpdateComponentRelationshipID sets the "component_relationship_id" field to the value that was provided on create.
func (u *SystemAnalysisRelationshipUpsertBulk) UpdateComponentRelationshipID() *SystemAnalysisRelationshipUpsertBulk {
	return u.Update(func(s *SystemAnalysisRelationshipUpsert) {
		s.UpdateComponentRelationshipID()
	})
}

// SetDescription sets the "description" field.
func (u *SystemAnalysisRelationshipUpsertBulk) SetDescription(v string) *SystemAnalysisRelationshipUpsertBulk {
	return u.Update(func(s *SystemAnalysisRelationshipUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SystemAnalysisRelationshipUpsertBulk) UpdateDescription() *SystemAnalysisRelationshipUpsertBulk {
	return u.Update(func(s *SystemAnalysisRelationshipUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *SystemAnalysisRelationshipUpsertBulk) ClearDescription() *SystemAnalysisRelationshipUpsertBulk {
	return u.Update(func(s *SystemAnalysisRelationshipUpsert) {
		s.ClearDescription()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SystemAnalysisRelationshipUpsertBulk) SetCreatedAt(v time.Time) *SystemAnalysisRelationshipUpsertBulk {
	return u.Update(func(s *SystemAnalysisRelationshipUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SystemAnalysisRelationshipUpsertBulk) UpdateCreatedAt() *SystemAnalysisRelationshipUpsertBulk {
	return u.Update(func(s *SystemAnalysisRelationshipUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *SystemAnalysisRelationshipUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SystemAnalysisRelationshipCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SystemAnalysisRelationshipCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SystemAnalysisRelationshipUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
