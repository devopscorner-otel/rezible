// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/systemcomponent"
	"github.com/rezible/rezible/ent/systemcomponentkind"
)

// SystemComponentKindUpdate is the builder for updating SystemComponentKind entities.
type SystemComponentKindUpdate struct {
	config
	hooks     []Hook
	mutation  *SystemComponentKindMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SystemComponentKindUpdate builder.
func (scku *SystemComponentKindUpdate) Where(ps ...predicate.SystemComponentKind) *SystemComponentKindUpdate {
	scku.mutation.Where(ps...)
	return scku
}

// SetLabel sets the "label" field.
func (scku *SystemComponentKindUpdate) SetLabel(s string) *SystemComponentKindUpdate {
	scku.mutation.SetLabel(s)
	return scku
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (scku *SystemComponentKindUpdate) SetNillableLabel(s *string) *SystemComponentKindUpdate {
	if s != nil {
		scku.SetLabel(*s)
	}
	return scku
}

// SetDescription sets the "description" field.
func (scku *SystemComponentKindUpdate) SetDescription(s string) *SystemComponentKindUpdate {
	scku.mutation.SetDescription(s)
	return scku
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (scku *SystemComponentKindUpdate) SetNillableDescription(s *string) *SystemComponentKindUpdate {
	if s != nil {
		scku.SetDescription(*s)
	}
	return scku
}

// ClearDescription clears the value of the "description" field.
func (scku *SystemComponentKindUpdate) ClearDescription() *SystemComponentKindUpdate {
	scku.mutation.ClearDescription()
	return scku
}

// SetCreatedAt sets the "created_at" field.
func (scku *SystemComponentKindUpdate) SetCreatedAt(t time.Time) *SystemComponentKindUpdate {
	scku.mutation.SetCreatedAt(t)
	return scku
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (scku *SystemComponentKindUpdate) SetNillableCreatedAt(t *time.Time) *SystemComponentKindUpdate {
	if t != nil {
		scku.SetCreatedAt(*t)
	}
	return scku
}

// AddComponentIDs adds the "components" edge to the SystemComponent entity by IDs.
func (scku *SystemComponentKindUpdate) AddComponentIDs(ids ...uuid.UUID) *SystemComponentKindUpdate {
	scku.mutation.AddComponentIDs(ids...)
	return scku
}

// AddComponents adds the "components" edges to the SystemComponent entity.
func (scku *SystemComponentKindUpdate) AddComponents(s ...*SystemComponent) *SystemComponentKindUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scku.AddComponentIDs(ids...)
}

// Mutation returns the SystemComponentKindMutation object of the builder.
func (scku *SystemComponentKindUpdate) Mutation() *SystemComponentKindMutation {
	return scku.mutation
}

// ClearComponents clears all "components" edges to the SystemComponent entity.
func (scku *SystemComponentKindUpdate) ClearComponents() *SystemComponentKindUpdate {
	scku.mutation.ClearComponents()
	return scku
}

// RemoveComponentIDs removes the "components" edge to SystemComponent entities by IDs.
func (scku *SystemComponentKindUpdate) RemoveComponentIDs(ids ...uuid.UUID) *SystemComponentKindUpdate {
	scku.mutation.RemoveComponentIDs(ids...)
	return scku
}

// RemoveComponents removes "components" edges to SystemComponent entities.
func (scku *SystemComponentKindUpdate) RemoveComponents(s ...*SystemComponent) *SystemComponentKindUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scku.RemoveComponentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (scku *SystemComponentKindUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, scku.sqlSave, scku.mutation, scku.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scku *SystemComponentKindUpdate) SaveX(ctx context.Context) int {
	affected, err := scku.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (scku *SystemComponentKindUpdate) Exec(ctx context.Context) error {
	_, err := scku.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scku *SystemComponentKindUpdate) ExecX(ctx context.Context) {
	if err := scku.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (scku *SystemComponentKindUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SystemComponentKindUpdate {
	scku.modifiers = append(scku.modifiers, modifiers...)
	return scku
}

func (scku *SystemComponentKindUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(systemcomponentkind.Table, systemcomponentkind.Columns, sqlgraph.NewFieldSpec(systemcomponentkind.FieldID, field.TypeUUID))
	if ps := scku.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scku.mutation.Label(); ok {
		_spec.SetField(systemcomponentkind.FieldLabel, field.TypeString, value)
	}
	if value, ok := scku.mutation.Description(); ok {
		_spec.SetField(systemcomponentkind.FieldDescription, field.TypeString, value)
	}
	if scku.mutation.DescriptionCleared() {
		_spec.ClearField(systemcomponentkind.FieldDescription, field.TypeString)
	}
	if value, ok := scku.mutation.CreatedAt(); ok {
		_spec.SetField(systemcomponentkind.FieldCreatedAt, field.TypeTime, value)
	}
	if scku.mutation.ComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponentkind.ComponentsTable,
			Columns: []string{systemcomponentkind.ComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scku.mutation.RemovedComponentsIDs(); len(nodes) > 0 && !scku.mutation.ComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponentkind.ComponentsTable,
			Columns: []string{systemcomponentkind.ComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scku.mutation.ComponentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponentkind.ComponentsTable,
			Columns: []string{systemcomponentkind.ComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(scku.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, scku.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systemcomponentkind.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	scku.mutation.done = true
	return n, nil
}

// SystemComponentKindUpdateOne is the builder for updating a single SystemComponentKind entity.
type SystemComponentKindUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SystemComponentKindMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetLabel sets the "label" field.
func (sckuo *SystemComponentKindUpdateOne) SetLabel(s string) *SystemComponentKindUpdateOne {
	sckuo.mutation.SetLabel(s)
	return sckuo
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (sckuo *SystemComponentKindUpdateOne) SetNillableLabel(s *string) *SystemComponentKindUpdateOne {
	if s != nil {
		sckuo.SetLabel(*s)
	}
	return sckuo
}

// SetDescription sets the "description" field.
func (sckuo *SystemComponentKindUpdateOne) SetDescription(s string) *SystemComponentKindUpdateOne {
	sckuo.mutation.SetDescription(s)
	return sckuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sckuo *SystemComponentKindUpdateOne) SetNillableDescription(s *string) *SystemComponentKindUpdateOne {
	if s != nil {
		sckuo.SetDescription(*s)
	}
	return sckuo
}

// ClearDescription clears the value of the "description" field.
func (sckuo *SystemComponentKindUpdateOne) ClearDescription() *SystemComponentKindUpdateOne {
	sckuo.mutation.ClearDescription()
	return sckuo
}

// SetCreatedAt sets the "created_at" field.
func (sckuo *SystemComponentKindUpdateOne) SetCreatedAt(t time.Time) *SystemComponentKindUpdateOne {
	sckuo.mutation.SetCreatedAt(t)
	return sckuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sckuo *SystemComponentKindUpdateOne) SetNillableCreatedAt(t *time.Time) *SystemComponentKindUpdateOne {
	if t != nil {
		sckuo.SetCreatedAt(*t)
	}
	return sckuo
}

// AddComponentIDs adds the "components" edge to the SystemComponent entity by IDs.
func (sckuo *SystemComponentKindUpdateOne) AddComponentIDs(ids ...uuid.UUID) *SystemComponentKindUpdateOne {
	sckuo.mutation.AddComponentIDs(ids...)
	return sckuo
}

// AddComponents adds the "components" edges to the SystemComponent entity.
func (sckuo *SystemComponentKindUpdateOne) AddComponents(s ...*SystemComponent) *SystemComponentKindUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sckuo.AddComponentIDs(ids...)
}

// Mutation returns the SystemComponentKindMutation object of the builder.
func (sckuo *SystemComponentKindUpdateOne) Mutation() *SystemComponentKindMutation {
	return sckuo.mutation
}

// ClearComponents clears all "components" edges to the SystemComponent entity.
func (sckuo *SystemComponentKindUpdateOne) ClearComponents() *SystemComponentKindUpdateOne {
	sckuo.mutation.ClearComponents()
	return sckuo
}

// RemoveComponentIDs removes the "components" edge to SystemComponent entities by IDs.
func (sckuo *SystemComponentKindUpdateOne) RemoveComponentIDs(ids ...uuid.UUID) *SystemComponentKindUpdateOne {
	sckuo.mutation.RemoveComponentIDs(ids...)
	return sckuo
}

// RemoveComponents removes "components" edges to SystemComponent entities.
func (sckuo *SystemComponentKindUpdateOne) RemoveComponents(s ...*SystemComponent) *SystemComponentKindUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sckuo.RemoveComponentIDs(ids...)
}

// Where appends a list predicates to the SystemComponentKindUpdate builder.
func (sckuo *SystemComponentKindUpdateOne) Where(ps ...predicate.SystemComponentKind) *SystemComponentKindUpdateOne {
	sckuo.mutation.Where(ps...)
	return sckuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sckuo *SystemComponentKindUpdateOne) Select(field string, fields ...string) *SystemComponentKindUpdateOne {
	sckuo.fields = append([]string{field}, fields...)
	return sckuo
}

// Save executes the query and returns the updated SystemComponentKind entity.
func (sckuo *SystemComponentKindUpdateOne) Save(ctx context.Context) (*SystemComponentKind, error) {
	return withHooks(ctx, sckuo.sqlSave, sckuo.mutation, sckuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sckuo *SystemComponentKindUpdateOne) SaveX(ctx context.Context) *SystemComponentKind {
	node, err := sckuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sckuo *SystemComponentKindUpdateOne) Exec(ctx context.Context) error {
	_, err := sckuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sckuo *SystemComponentKindUpdateOne) ExecX(ctx context.Context) {
	if err := sckuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sckuo *SystemComponentKindUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SystemComponentKindUpdateOne {
	sckuo.modifiers = append(sckuo.modifiers, modifiers...)
	return sckuo
}

func (sckuo *SystemComponentKindUpdateOne) sqlSave(ctx context.Context) (_node *SystemComponentKind, err error) {
	_spec := sqlgraph.NewUpdateSpec(systemcomponentkind.Table, systemcomponentkind.Columns, sqlgraph.NewFieldSpec(systemcomponentkind.FieldID, field.TypeUUID))
	id, ok := sckuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SystemComponentKind.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sckuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, systemcomponentkind.FieldID)
		for _, f := range fields {
			if !systemcomponentkind.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != systemcomponentkind.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sckuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sckuo.mutation.Label(); ok {
		_spec.SetField(systemcomponentkind.FieldLabel, field.TypeString, value)
	}
	if value, ok := sckuo.mutation.Description(); ok {
		_spec.SetField(systemcomponentkind.FieldDescription, field.TypeString, value)
	}
	if sckuo.mutation.DescriptionCleared() {
		_spec.ClearField(systemcomponentkind.FieldDescription, field.TypeString)
	}
	if value, ok := sckuo.mutation.CreatedAt(); ok {
		_spec.SetField(systemcomponentkind.FieldCreatedAt, field.TypeTime, value)
	}
	if sckuo.mutation.ComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponentkind.ComponentsTable,
			Columns: []string{systemcomponentkind.ComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sckuo.mutation.RemovedComponentsIDs(); len(nodes) > 0 && !sckuo.mutation.ComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponentkind.ComponentsTable,
			Columns: []string{systemcomponentkind.ComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sckuo.mutation.ComponentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponentkind.ComponentsTable,
			Columns: []string{systemcomponentkind.ComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(sckuo.modifiers...)
	_node = &SystemComponentKind{config: sckuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sckuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systemcomponentkind.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sckuo.mutation.done = true
	return _node, nil
}
