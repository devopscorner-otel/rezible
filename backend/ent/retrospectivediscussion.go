// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/retrospective"
	"github.com/rezible/rezible/ent/retrospectivediscussion"
)

// RetrospectiveDiscussion is the model entity for the RetrospectiveDiscussion schema.
type RetrospectiveDiscussion struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// RetrospectiveID holds the value of the "retrospective_id" field.
	RetrospectiveID uuid.UUID `json:"retrospective_id,omitempty"`
	// Content holds the value of the "content" field.
	Content []byte `json:"content,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RetrospectiveDiscussionQuery when eager-loading is set.
	Edges        RetrospectiveDiscussionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RetrospectiveDiscussionEdges holds the relations/edges for other nodes in the graph.
type RetrospectiveDiscussionEdges struct {
	// Retrospective holds the value of the retrospective edge.
	Retrospective *Retrospective `json:"retrospective,omitempty"`
	// Replies holds the value of the replies edge.
	Replies []*RetrospectiveDiscussionReply `json:"replies,omitempty"`
	// Review holds the value of the review edge.
	Review []*RetrospectiveReview `json:"review,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// RetrospectiveOrErr returns the Retrospective value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RetrospectiveDiscussionEdges) RetrospectiveOrErr() (*Retrospective, error) {
	if e.Retrospective != nil {
		return e.Retrospective, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: retrospective.Label}
	}
	return nil, &NotLoadedError{edge: "retrospective"}
}

// RepliesOrErr returns the Replies value or an error if the edge
// was not loaded in eager-loading.
func (e RetrospectiveDiscussionEdges) RepliesOrErr() ([]*RetrospectiveDiscussionReply, error) {
	if e.loadedTypes[1] {
		return e.Replies, nil
	}
	return nil, &NotLoadedError{edge: "replies"}
}

// ReviewOrErr returns the Review value or an error if the edge
// was not loaded in eager-loading.
func (e RetrospectiveDiscussionEdges) ReviewOrErr() ([]*RetrospectiveReview, error) {
	if e.loadedTypes[2] {
		return e.Review, nil
	}
	return nil, &NotLoadedError{edge: "review"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RetrospectiveDiscussion) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case retrospectivediscussion.FieldContent:
			values[i] = new([]byte)
		case retrospectivediscussion.FieldID, retrospectivediscussion.FieldRetrospectiveID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RetrospectiveDiscussion fields.
func (rd *RetrospectiveDiscussion) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case retrospectivediscussion.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				rd.ID = *value
			}
		case retrospectivediscussion.FieldRetrospectiveID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field retrospective_id", values[i])
			} else if value != nil {
				rd.RetrospectiveID = *value
			}
		case retrospectivediscussion.FieldContent:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value != nil {
				rd.Content = *value
			}
		default:
			rd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RetrospectiveDiscussion.
// This includes values selected through modifiers, order, etc.
func (rd *RetrospectiveDiscussion) Value(name string) (ent.Value, error) {
	return rd.selectValues.Get(name)
}

// QueryRetrospective queries the "retrospective" edge of the RetrospectiveDiscussion entity.
func (rd *RetrospectiveDiscussion) QueryRetrospective() *RetrospectiveQuery {
	return NewRetrospectiveDiscussionClient(rd.config).QueryRetrospective(rd)
}

// QueryReplies queries the "replies" edge of the RetrospectiveDiscussion entity.
func (rd *RetrospectiveDiscussion) QueryReplies() *RetrospectiveDiscussionReplyQuery {
	return NewRetrospectiveDiscussionClient(rd.config).QueryReplies(rd)
}

// QueryReview queries the "review" edge of the RetrospectiveDiscussion entity.
func (rd *RetrospectiveDiscussion) QueryReview() *RetrospectiveReviewQuery {
	return NewRetrospectiveDiscussionClient(rd.config).QueryReview(rd)
}

// Update returns a builder for updating this RetrospectiveDiscussion.
// Note that you need to call RetrospectiveDiscussion.Unwrap() before calling this method if this RetrospectiveDiscussion
// was returned from a transaction, and the transaction was committed or rolled back.
func (rd *RetrospectiveDiscussion) Update() *RetrospectiveDiscussionUpdateOne {
	return NewRetrospectiveDiscussionClient(rd.config).UpdateOne(rd)
}

// Unwrap unwraps the RetrospectiveDiscussion entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rd *RetrospectiveDiscussion) Unwrap() *RetrospectiveDiscussion {
	_tx, ok := rd.config.driver.(*txDriver)
	if !ok {
		panic("ent: RetrospectiveDiscussion is not a transactional entity")
	}
	rd.config.driver = _tx.drv
	return rd
}

// String implements the fmt.Stringer.
func (rd *RetrospectiveDiscussion) String() string {
	var builder strings.Builder
	builder.WriteString("RetrospectiveDiscussion(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rd.ID))
	builder.WriteString("retrospective_id=")
	builder.WriteString(fmt.Sprintf("%v", rd.RetrospectiveID))
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(fmt.Sprintf("%v", rd.Content))
	builder.WriteByte(')')
	return builder.String()
}

// RetrospectiveDiscussions is a parsable slice of RetrospectiveDiscussion.
type RetrospectiveDiscussions []*RetrospectiveDiscussion
