// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/systemcomponent"
	"github.com/rezible/rezible/ent/systemcomponentcontrol"
	"github.com/rezible/rezible/ent/systemcomponentsignal"
	"github.com/rezible/rezible/ent/systemrelationship"
	"github.com/rezible/rezible/ent/systemrelationshipcontrolaction"
	"github.com/rezible/rezible/ent/systemrelationshipfeedback"
)

// SystemRelationshipUpdate is the builder for updating SystemRelationship entities.
type SystemRelationshipUpdate struct {
	config
	hooks     []Hook
	mutation  *SystemRelationshipMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SystemRelationshipUpdate builder.
func (sru *SystemRelationshipUpdate) Where(ps ...predicate.SystemRelationship) *SystemRelationshipUpdate {
	sru.mutation.Where(ps...)
	return sru
}

// SetSourceComponentID sets the "source_component_id" field.
func (sru *SystemRelationshipUpdate) SetSourceComponentID(u uuid.UUID) *SystemRelationshipUpdate {
	sru.mutation.SetSourceComponentID(u)
	return sru
}

// SetNillableSourceComponentID sets the "source_component_id" field if the given value is not nil.
func (sru *SystemRelationshipUpdate) SetNillableSourceComponentID(u *uuid.UUID) *SystemRelationshipUpdate {
	if u != nil {
		sru.SetSourceComponentID(*u)
	}
	return sru
}

// SetTargetComponentID sets the "target_component_id" field.
func (sru *SystemRelationshipUpdate) SetTargetComponentID(u uuid.UUID) *SystemRelationshipUpdate {
	sru.mutation.SetTargetComponentID(u)
	return sru
}

// SetNillableTargetComponentID sets the "target_component_id" field if the given value is not nil.
func (sru *SystemRelationshipUpdate) SetNillableTargetComponentID(u *uuid.UUID) *SystemRelationshipUpdate {
	if u != nil {
		sru.SetTargetComponentID(*u)
	}
	return sru
}

// SetDescription sets the "description" field.
func (sru *SystemRelationshipUpdate) SetDescription(s string) *SystemRelationshipUpdate {
	sru.mutation.SetDescription(s)
	return sru
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sru *SystemRelationshipUpdate) SetNillableDescription(s *string) *SystemRelationshipUpdate {
	if s != nil {
		sru.SetDescription(*s)
	}
	return sru
}

// ClearDescription clears the value of the "description" field.
func (sru *SystemRelationshipUpdate) ClearDescription() *SystemRelationshipUpdate {
	sru.mutation.ClearDescription()
	return sru
}

// SetCreatedAt sets the "created_at" field.
func (sru *SystemRelationshipUpdate) SetCreatedAt(t time.Time) *SystemRelationshipUpdate {
	sru.mutation.SetCreatedAt(t)
	return sru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sru *SystemRelationshipUpdate) SetNillableCreatedAt(t *time.Time) *SystemRelationshipUpdate {
	if t != nil {
		sru.SetCreatedAt(*t)
	}
	return sru
}

// SetSourceComponent sets the "source_component" edge to the SystemComponent entity.
func (sru *SystemRelationshipUpdate) SetSourceComponent(s *SystemComponent) *SystemRelationshipUpdate {
	return sru.SetSourceComponentID(s.ID)
}

// SetTargetComponent sets the "target_component" edge to the SystemComponent entity.
func (sru *SystemRelationshipUpdate) SetTargetComponent(s *SystemComponent) *SystemRelationshipUpdate {
	return sru.SetTargetComponentID(s.ID)
}

// AddControlIDs adds the "controls" edge to the SystemComponentControl entity by IDs.
func (sru *SystemRelationshipUpdate) AddControlIDs(ids ...uuid.UUID) *SystemRelationshipUpdate {
	sru.mutation.AddControlIDs(ids...)
	return sru
}

// AddControls adds the "controls" edges to the SystemComponentControl entity.
func (sru *SystemRelationshipUpdate) AddControls(s ...*SystemComponentControl) *SystemRelationshipUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sru.AddControlIDs(ids...)
}

// AddSignalIDs adds the "signals" edge to the SystemComponentSignal entity by IDs.
func (sru *SystemRelationshipUpdate) AddSignalIDs(ids ...uuid.UUID) *SystemRelationshipUpdate {
	sru.mutation.AddSignalIDs(ids...)
	return sru
}

// AddSignals adds the "signals" edges to the SystemComponentSignal entity.
func (sru *SystemRelationshipUpdate) AddSignals(s ...*SystemComponentSignal) *SystemRelationshipUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sru.AddSignalIDs(ids...)
}

// AddControlActionIDs adds the "control_actions" edge to the SystemRelationshipControlAction entity by IDs.
func (sru *SystemRelationshipUpdate) AddControlActionIDs(ids ...uuid.UUID) *SystemRelationshipUpdate {
	sru.mutation.AddControlActionIDs(ids...)
	return sru
}

// AddControlActions adds the "control_actions" edges to the SystemRelationshipControlAction entity.
func (sru *SystemRelationshipUpdate) AddControlActions(s ...*SystemRelationshipControlAction) *SystemRelationshipUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sru.AddControlActionIDs(ids...)
}

// AddFeedbackIDs adds the "feedback" edge to the SystemRelationshipFeedback entity by IDs.
func (sru *SystemRelationshipUpdate) AddFeedbackIDs(ids ...uuid.UUID) *SystemRelationshipUpdate {
	sru.mutation.AddFeedbackIDs(ids...)
	return sru
}

// AddFeedback adds the "feedback" edges to the SystemRelationshipFeedback entity.
func (sru *SystemRelationshipUpdate) AddFeedback(s ...*SystemRelationshipFeedback) *SystemRelationshipUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sru.AddFeedbackIDs(ids...)
}

// Mutation returns the SystemRelationshipMutation object of the builder.
func (sru *SystemRelationshipUpdate) Mutation() *SystemRelationshipMutation {
	return sru.mutation
}

// ClearSourceComponent clears the "source_component" edge to the SystemComponent entity.
func (sru *SystemRelationshipUpdate) ClearSourceComponent() *SystemRelationshipUpdate {
	sru.mutation.ClearSourceComponent()
	return sru
}

// ClearTargetComponent clears the "target_component" edge to the SystemComponent entity.
func (sru *SystemRelationshipUpdate) ClearTargetComponent() *SystemRelationshipUpdate {
	sru.mutation.ClearTargetComponent()
	return sru
}

// ClearControls clears all "controls" edges to the SystemComponentControl entity.
func (sru *SystemRelationshipUpdate) ClearControls() *SystemRelationshipUpdate {
	sru.mutation.ClearControls()
	return sru
}

// RemoveControlIDs removes the "controls" edge to SystemComponentControl entities by IDs.
func (sru *SystemRelationshipUpdate) RemoveControlIDs(ids ...uuid.UUID) *SystemRelationshipUpdate {
	sru.mutation.RemoveControlIDs(ids...)
	return sru
}

// RemoveControls removes "controls" edges to SystemComponentControl entities.
func (sru *SystemRelationshipUpdate) RemoveControls(s ...*SystemComponentControl) *SystemRelationshipUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sru.RemoveControlIDs(ids...)
}

// ClearSignals clears all "signals" edges to the SystemComponentSignal entity.
func (sru *SystemRelationshipUpdate) ClearSignals() *SystemRelationshipUpdate {
	sru.mutation.ClearSignals()
	return sru
}

// RemoveSignalIDs removes the "signals" edge to SystemComponentSignal entities by IDs.
func (sru *SystemRelationshipUpdate) RemoveSignalIDs(ids ...uuid.UUID) *SystemRelationshipUpdate {
	sru.mutation.RemoveSignalIDs(ids...)
	return sru
}

// RemoveSignals removes "signals" edges to SystemComponentSignal entities.
func (sru *SystemRelationshipUpdate) RemoveSignals(s ...*SystemComponentSignal) *SystemRelationshipUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sru.RemoveSignalIDs(ids...)
}

// ClearControlActions clears all "control_actions" edges to the SystemRelationshipControlAction entity.
func (sru *SystemRelationshipUpdate) ClearControlActions() *SystemRelationshipUpdate {
	sru.mutation.ClearControlActions()
	return sru
}

// RemoveControlActionIDs removes the "control_actions" edge to SystemRelationshipControlAction entities by IDs.
func (sru *SystemRelationshipUpdate) RemoveControlActionIDs(ids ...uuid.UUID) *SystemRelationshipUpdate {
	sru.mutation.RemoveControlActionIDs(ids...)
	return sru
}

// RemoveControlActions removes "control_actions" edges to SystemRelationshipControlAction entities.
func (sru *SystemRelationshipUpdate) RemoveControlActions(s ...*SystemRelationshipControlAction) *SystemRelationshipUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sru.RemoveControlActionIDs(ids...)
}

// ClearFeedback clears all "feedback" edges to the SystemRelationshipFeedback entity.
func (sru *SystemRelationshipUpdate) ClearFeedback() *SystemRelationshipUpdate {
	sru.mutation.ClearFeedback()
	return sru
}

// RemoveFeedbackIDs removes the "feedback" edge to SystemRelationshipFeedback entities by IDs.
func (sru *SystemRelationshipUpdate) RemoveFeedbackIDs(ids ...uuid.UUID) *SystemRelationshipUpdate {
	sru.mutation.RemoveFeedbackIDs(ids...)
	return sru
}

// RemoveFeedback removes "feedback" edges to SystemRelationshipFeedback entities.
func (sru *SystemRelationshipUpdate) RemoveFeedback(s ...*SystemRelationshipFeedback) *SystemRelationshipUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sru.RemoveFeedbackIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sru *SystemRelationshipUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sru.sqlSave, sru.mutation, sru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sru *SystemRelationshipUpdate) SaveX(ctx context.Context) int {
	affected, err := sru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sru *SystemRelationshipUpdate) Exec(ctx context.Context) error {
	_, err := sru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sru *SystemRelationshipUpdate) ExecX(ctx context.Context) {
	if err := sru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sru *SystemRelationshipUpdate) check() error {
	if sru.mutation.SourceComponentCleared() && len(sru.mutation.SourceComponentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SystemRelationship.source_component"`)
	}
	if sru.mutation.TargetComponentCleared() && len(sru.mutation.TargetComponentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SystemRelationship.target_component"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sru *SystemRelationshipUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SystemRelationshipUpdate {
	sru.modifiers = append(sru.modifiers, modifiers...)
	return sru
}

func (sru *SystemRelationshipUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(systemrelationship.Table, systemrelationship.Columns, sqlgraph.NewFieldSpec(systemrelationship.FieldID, field.TypeUUID))
	if ps := sru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sru.mutation.Description(); ok {
		_spec.SetField(systemrelationship.FieldDescription, field.TypeString, value)
	}
	if sru.mutation.DescriptionCleared() {
		_spec.ClearField(systemrelationship.FieldDescription, field.TypeString)
	}
	if value, ok := sru.mutation.CreatedAt(); ok {
		_spec.SetField(systemrelationship.FieldCreatedAt, field.TypeTime, value)
	}
	if sru.mutation.SourceComponentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemrelationship.SourceComponentTable,
			Columns: []string{systemrelationship.SourceComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sru.mutation.SourceComponentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemrelationship.SourceComponentTable,
			Columns: []string{systemrelationship.SourceComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sru.mutation.TargetComponentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemrelationship.TargetComponentTable,
			Columns: []string{systemrelationship.TargetComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sru.mutation.TargetComponentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemrelationship.TargetComponentTable,
			Columns: []string{systemrelationship.TargetComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sru.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemrelationship.ControlsTable,
			Columns: systemrelationship.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentcontrol.FieldID, field.TypeUUID),
			},
		}
		createE := &SystemRelationshipControlActionCreate{config: sru.config, mutation: newSystemRelationshipControlActionMutation(sru.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sru.mutation.RemovedControlsIDs(); len(nodes) > 0 && !sru.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemrelationship.ControlsTable,
			Columns: systemrelationship.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentcontrol.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SystemRelationshipControlActionCreate{config: sru.config, mutation: newSystemRelationshipControlActionMutation(sru.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sru.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemrelationship.ControlsTable,
			Columns: systemrelationship.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentcontrol.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SystemRelationshipControlActionCreate{config: sru.config, mutation: newSystemRelationshipControlActionMutation(sru.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sru.mutation.SignalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemrelationship.SignalsTable,
			Columns: systemrelationship.SignalsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentsignal.FieldID, field.TypeUUID),
			},
		}
		createE := &SystemRelationshipFeedbackCreate{config: sru.config, mutation: newSystemRelationshipFeedbackMutation(sru.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sru.mutation.RemovedSignalsIDs(); len(nodes) > 0 && !sru.mutation.SignalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemrelationship.SignalsTable,
			Columns: systemrelationship.SignalsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentsignal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SystemRelationshipFeedbackCreate{config: sru.config, mutation: newSystemRelationshipFeedbackMutation(sru.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sru.mutation.SignalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemrelationship.SignalsTable,
			Columns: systemrelationship.SignalsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentsignal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SystemRelationshipFeedbackCreate{config: sru.config, mutation: newSystemRelationshipFeedbackMutation(sru.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sru.mutation.ControlActionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemrelationship.ControlActionsTable,
			Columns: []string{systemrelationship.ControlActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemrelationshipcontrolaction.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sru.mutation.RemovedControlActionsIDs(); len(nodes) > 0 && !sru.mutation.ControlActionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemrelationship.ControlActionsTable,
			Columns: []string{systemrelationship.ControlActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemrelationshipcontrolaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sru.mutation.ControlActionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemrelationship.ControlActionsTable,
			Columns: []string{systemrelationship.ControlActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemrelationshipcontrolaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sru.mutation.FeedbackCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemrelationship.FeedbackTable,
			Columns: []string{systemrelationship.FeedbackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemrelationshipfeedback.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sru.mutation.RemovedFeedbackIDs(); len(nodes) > 0 && !sru.mutation.FeedbackCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemrelationship.FeedbackTable,
			Columns: []string{systemrelationship.FeedbackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemrelationshipfeedback.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sru.mutation.FeedbackIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemrelationship.FeedbackTable,
			Columns: []string{systemrelationship.FeedbackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemrelationshipfeedback.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(sru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, sru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systemrelationship.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sru.mutation.done = true
	return n, nil
}

// SystemRelationshipUpdateOne is the builder for updating a single SystemRelationship entity.
type SystemRelationshipUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SystemRelationshipMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetSourceComponentID sets the "source_component_id" field.
func (sruo *SystemRelationshipUpdateOne) SetSourceComponentID(u uuid.UUID) *SystemRelationshipUpdateOne {
	sruo.mutation.SetSourceComponentID(u)
	return sruo
}

// SetNillableSourceComponentID sets the "source_component_id" field if the given value is not nil.
func (sruo *SystemRelationshipUpdateOne) SetNillableSourceComponentID(u *uuid.UUID) *SystemRelationshipUpdateOne {
	if u != nil {
		sruo.SetSourceComponentID(*u)
	}
	return sruo
}

// SetTargetComponentID sets the "target_component_id" field.
func (sruo *SystemRelationshipUpdateOne) SetTargetComponentID(u uuid.UUID) *SystemRelationshipUpdateOne {
	sruo.mutation.SetTargetComponentID(u)
	return sruo
}

// SetNillableTargetComponentID sets the "target_component_id" field if the given value is not nil.
func (sruo *SystemRelationshipUpdateOne) SetNillableTargetComponentID(u *uuid.UUID) *SystemRelationshipUpdateOne {
	if u != nil {
		sruo.SetTargetComponentID(*u)
	}
	return sruo
}

// SetDescription sets the "description" field.
func (sruo *SystemRelationshipUpdateOne) SetDescription(s string) *SystemRelationshipUpdateOne {
	sruo.mutation.SetDescription(s)
	return sruo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sruo *SystemRelationshipUpdateOne) SetNillableDescription(s *string) *SystemRelationshipUpdateOne {
	if s != nil {
		sruo.SetDescription(*s)
	}
	return sruo
}

// ClearDescription clears the value of the "description" field.
func (sruo *SystemRelationshipUpdateOne) ClearDescription() *SystemRelationshipUpdateOne {
	sruo.mutation.ClearDescription()
	return sruo
}

// SetCreatedAt sets the "created_at" field.
func (sruo *SystemRelationshipUpdateOne) SetCreatedAt(t time.Time) *SystemRelationshipUpdateOne {
	sruo.mutation.SetCreatedAt(t)
	return sruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sruo *SystemRelationshipUpdateOne) SetNillableCreatedAt(t *time.Time) *SystemRelationshipUpdateOne {
	if t != nil {
		sruo.SetCreatedAt(*t)
	}
	return sruo
}

// SetSourceComponent sets the "source_component" edge to the SystemComponent entity.
func (sruo *SystemRelationshipUpdateOne) SetSourceComponent(s *SystemComponent) *SystemRelationshipUpdateOne {
	return sruo.SetSourceComponentID(s.ID)
}

// SetTargetComponent sets the "target_component" edge to the SystemComponent entity.
func (sruo *SystemRelationshipUpdateOne) SetTargetComponent(s *SystemComponent) *SystemRelationshipUpdateOne {
	return sruo.SetTargetComponentID(s.ID)
}

// AddControlIDs adds the "controls" edge to the SystemComponentControl entity by IDs.
func (sruo *SystemRelationshipUpdateOne) AddControlIDs(ids ...uuid.UUID) *SystemRelationshipUpdateOne {
	sruo.mutation.AddControlIDs(ids...)
	return sruo
}

// AddControls adds the "controls" edges to the SystemComponentControl entity.
func (sruo *SystemRelationshipUpdateOne) AddControls(s ...*SystemComponentControl) *SystemRelationshipUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sruo.AddControlIDs(ids...)
}

// AddSignalIDs adds the "signals" edge to the SystemComponentSignal entity by IDs.
func (sruo *SystemRelationshipUpdateOne) AddSignalIDs(ids ...uuid.UUID) *SystemRelationshipUpdateOne {
	sruo.mutation.AddSignalIDs(ids...)
	return sruo
}

// AddSignals adds the "signals" edges to the SystemComponentSignal entity.
func (sruo *SystemRelationshipUpdateOne) AddSignals(s ...*SystemComponentSignal) *SystemRelationshipUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sruo.AddSignalIDs(ids...)
}

// AddControlActionIDs adds the "control_actions" edge to the SystemRelationshipControlAction entity by IDs.
func (sruo *SystemRelationshipUpdateOne) AddControlActionIDs(ids ...uuid.UUID) *SystemRelationshipUpdateOne {
	sruo.mutation.AddControlActionIDs(ids...)
	return sruo
}

// AddControlActions adds the "control_actions" edges to the SystemRelationshipControlAction entity.
func (sruo *SystemRelationshipUpdateOne) AddControlActions(s ...*SystemRelationshipControlAction) *SystemRelationshipUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sruo.AddControlActionIDs(ids...)
}

// AddFeedbackIDs adds the "feedback" edge to the SystemRelationshipFeedback entity by IDs.
func (sruo *SystemRelationshipUpdateOne) AddFeedbackIDs(ids ...uuid.UUID) *SystemRelationshipUpdateOne {
	sruo.mutation.AddFeedbackIDs(ids...)
	return sruo
}

// AddFeedback adds the "feedback" edges to the SystemRelationshipFeedback entity.
func (sruo *SystemRelationshipUpdateOne) AddFeedback(s ...*SystemRelationshipFeedback) *SystemRelationshipUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sruo.AddFeedbackIDs(ids...)
}

// Mutation returns the SystemRelationshipMutation object of the builder.
func (sruo *SystemRelationshipUpdateOne) Mutation() *SystemRelationshipMutation {
	return sruo.mutation
}

// ClearSourceComponent clears the "source_component" edge to the SystemComponent entity.
func (sruo *SystemRelationshipUpdateOne) ClearSourceComponent() *SystemRelationshipUpdateOne {
	sruo.mutation.ClearSourceComponent()
	return sruo
}

// ClearTargetComponent clears the "target_component" edge to the SystemComponent entity.
func (sruo *SystemRelationshipUpdateOne) ClearTargetComponent() *SystemRelationshipUpdateOne {
	sruo.mutation.ClearTargetComponent()
	return sruo
}

// ClearControls clears all "controls" edges to the SystemComponentControl entity.
func (sruo *SystemRelationshipUpdateOne) ClearControls() *SystemRelationshipUpdateOne {
	sruo.mutation.ClearControls()
	return sruo
}

// RemoveControlIDs removes the "controls" edge to SystemComponentControl entities by IDs.
func (sruo *SystemRelationshipUpdateOne) RemoveControlIDs(ids ...uuid.UUID) *SystemRelationshipUpdateOne {
	sruo.mutation.RemoveControlIDs(ids...)
	return sruo
}

// RemoveControls removes "controls" edges to SystemComponentControl entities.
func (sruo *SystemRelationshipUpdateOne) RemoveControls(s ...*SystemComponentControl) *SystemRelationshipUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sruo.RemoveControlIDs(ids...)
}

// ClearSignals clears all "signals" edges to the SystemComponentSignal entity.
func (sruo *SystemRelationshipUpdateOne) ClearSignals() *SystemRelationshipUpdateOne {
	sruo.mutation.ClearSignals()
	return sruo
}

// RemoveSignalIDs removes the "signals" edge to SystemComponentSignal entities by IDs.
func (sruo *SystemRelationshipUpdateOne) RemoveSignalIDs(ids ...uuid.UUID) *SystemRelationshipUpdateOne {
	sruo.mutation.RemoveSignalIDs(ids...)
	return sruo
}

// RemoveSignals removes "signals" edges to SystemComponentSignal entities.
func (sruo *SystemRelationshipUpdateOne) RemoveSignals(s ...*SystemComponentSignal) *SystemRelationshipUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sruo.RemoveSignalIDs(ids...)
}

// ClearControlActions clears all "control_actions" edges to the SystemRelationshipControlAction entity.
func (sruo *SystemRelationshipUpdateOne) ClearControlActions() *SystemRelationshipUpdateOne {
	sruo.mutation.ClearControlActions()
	return sruo
}

// RemoveControlActionIDs removes the "control_actions" edge to SystemRelationshipControlAction entities by IDs.
func (sruo *SystemRelationshipUpdateOne) RemoveControlActionIDs(ids ...uuid.UUID) *SystemRelationshipUpdateOne {
	sruo.mutation.RemoveControlActionIDs(ids...)
	return sruo
}

// RemoveControlActions removes "control_actions" edges to SystemRelationshipControlAction entities.
func (sruo *SystemRelationshipUpdateOne) RemoveControlActions(s ...*SystemRelationshipControlAction) *SystemRelationshipUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sruo.RemoveControlActionIDs(ids...)
}

// ClearFeedback clears all "feedback" edges to the SystemRelationshipFeedback entity.
func (sruo *SystemRelationshipUpdateOne) ClearFeedback() *SystemRelationshipUpdateOne {
	sruo.mutation.ClearFeedback()
	return sruo
}

// RemoveFeedbackIDs removes the "feedback" edge to SystemRelationshipFeedback entities by IDs.
func (sruo *SystemRelationshipUpdateOne) RemoveFeedbackIDs(ids ...uuid.UUID) *SystemRelationshipUpdateOne {
	sruo.mutation.RemoveFeedbackIDs(ids...)
	return sruo
}

// RemoveFeedback removes "feedback" edges to SystemRelationshipFeedback entities.
func (sruo *SystemRelationshipUpdateOne) RemoveFeedback(s ...*SystemRelationshipFeedback) *SystemRelationshipUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sruo.RemoveFeedbackIDs(ids...)
}

// Where appends a list predicates to the SystemRelationshipUpdate builder.
func (sruo *SystemRelationshipUpdateOne) Where(ps ...predicate.SystemRelationship) *SystemRelationshipUpdateOne {
	sruo.mutation.Where(ps...)
	return sruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sruo *SystemRelationshipUpdateOne) Select(field string, fields ...string) *SystemRelationshipUpdateOne {
	sruo.fields = append([]string{field}, fields...)
	return sruo
}

// Save executes the query and returns the updated SystemRelationship entity.
func (sruo *SystemRelationshipUpdateOne) Save(ctx context.Context) (*SystemRelationship, error) {
	return withHooks(ctx, sruo.sqlSave, sruo.mutation, sruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sruo *SystemRelationshipUpdateOne) SaveX(ctx context.Context) *SystemRelationship {
	node, err := sruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sruo *SystemRelationshipUpdateOne) Exec(ctx context.Context) error {
	_, err := sruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sruo *SystemRelationshipUpdateOne) ExecX(ctx context.Context) {
	if err := sruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sruo *SystemRelationshipUpdateOne) check() error {
	if sruo.mutation.SourceComponentCleared() && len(sruo.mutation.SourceComponentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SystemRelationship.source_component"`)
	}
	if sruo.mutation.TargetComponentCleared() && len(sruo.mutation.TargetComponentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SystemRelationship.target_component"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sruo *SystemRelationshipUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SystemRelationshipUpdateOne {
	sruo.modifiers = append(sruo.modifiers, modifiers...)
	return sruo
}

func (sruo *SystemRelationshipUpdateOne) sqlSave(ctx context.Context) (_node *SystemRelationship, err error) {
	if err := sruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(systemrelationship.Table, systemrelationship.Columns, sqlgraph.NewFieldSpec(systemrelationship.FieldID, field.TypeUUID))
	id, ok := sruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SystemRelationship.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, systemrelationship.FieldID)
		for _, f := range fields {
			if !systemrelationship.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != systemrelationship.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sruo.mutation.Description(); ok {
		_spec.SetField(systemrelationship.FieldDescription, field.TypeString, value)
	}
	if sruo.mutation.DescriptionCleared() {
		_spec.ClearField(systemrelationship.FieldDescription, field.TypeString)
	}
	if value, ok := sruo.mutation.CreatedAt(); ok {
		_spec.SetField(systemrelationship.FieldCreatedAt, field.TypeTime, value)
	}
	if sruo.mutation.SourceComponentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemrelationship.SourceComponentTable,
			Columns: []string{systemrelationship.SourceComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sruo.mutation.SourceComponentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemrelationship.SourceComponentTable,
			Columns: []string{systemrelationship.SourceComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sruo.mutation.TargetComponentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemrelationship.TargetComponentTable,
			Columns: []string{systemrelationship.TargetComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sruo.mutation.TargetComponentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemrelationship.TargetComponentTable,
			Columns: []string{systemrelationship.TargetComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sruo.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemrelationship.ControlsTable,
			Columns: systemrelationship.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentcontrol.FieldID, field.TypeUUID),
			},
		}
		createE := &SystemRelationshipControlActionCreate{config: sruo.config, mutation: newSystemRelationshipControlActionMutation(sruo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sruo.mutation.RemovedControlsIDs(); len(nodes) > 0 && !sruo.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemrelationship.ControlsTable,
			Columns: systemrelationship.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentcontrol.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SystemRelationshipControlActionCreate{config: sruo.config, mutation: newSystemRelationshipControlActionMutation(sruo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sruo.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemrelationship.ControlsTable,
			Columns: systemrelationship.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentcontrol.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SystemRelationshipControlActionCreate{config: sruo.config, mutation: newSystemRelationshipControlActionMutation(sruo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sruo.mutation.SignalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemrelationship.SignalsTable,
			Columns: systemrelationship.SignalsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentsignal.FieldID, field.TypeUUID),
			},
		}
		createE := &SystemRelationshipFeedbackCreate{config: sruo.config, mutation: newSystemRelationshipFeedbackMutation(sruo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sruo.mutation.RemovedSignalsIDs(); len(nodes) > 0 && !sruo.mutation.SignalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemrelationship.SignalsTable,
			Columns: systemrelationship.SignalsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentsignal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SystemRelationshipFeedbackCreate{config: sruo.config, mutation: newSystemRelationshipFeedbackMutation(sruo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sruo.mutation.SignalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemrelationship.SignalsTable,
			Columns: systemrelationship.SignalsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentsignal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SystemRelationshipFeedbackCreate{config: sruo.config, mutation: newSystemRelationshipFeedbackMutation(sruo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sruo.mutation.ControlActionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemrelationship.ControlActionsTable,
			Columns: []string{systemrelationship.ControlActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemrelationshipcontrolaction.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sruo.mutation.RemovedControlActionsIDs(); len(nodes) > 0 && !sruo.mutation.ControlActionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemrelationship.ControlActionsTable,
			Columns: []string{systemrelationship.ControlActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemrelationshipcontrolaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sruo.mutation.ControlActionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemrelationship.ControlActionsTable,
			Columns: []string{systemrelationship.ControlActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemrelationshipcontrolaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sruo.mutation.FeedbackCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemrelationship.FeedbackTable,
			Columns: []string{systemrelationship.FeedbackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemrelationshipfeedback.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sruo.mutation.RemovedFeedbackIDs(); len(nodes) > 0 && !sruo.mutation.FeedbackCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemrelationship.FeedbackTable,
			Columns: []string{systemrelationship.FeedbackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemrelationshipfeedback.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sruo.mutation.FeedbackIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemrelationship.FeedbackTable,
			Columns: []string{systemrelationship.FeedbackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemrelationshipfeedback.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(sruo.modifiers...)
	_node = &SystemRelationship{config: sruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systemrelationship.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sruo.mutation.done = true
	return _node, nil
}
