// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/oncallannotation"
	"github.com/rezible/rezible/ent/oncallannotationalertfeedback"
	"github.com/rezible/rezible/ent/predicate"
)

// OncallAnnotationAlertFeedbackUpdate is the builder for updating OncallAnnotationAlertFeedback entities.
type OncallAnnotationAlertFeedbackUpdate struct {
	config
	hooks     []Hook
	mutation  *OncallAnnotationAlertFeedbackMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OncallAnnotationAlertFeedbackUpdate builder.
func (oaafu *OncallAnnotationAlertFeedbackUpdate) Where(ps ...predicate.OncallAnnotationAlertFeedback) *OncallAnnotationAlertFeedbackUpdate {
	oaafu.mutation.Where(ps...)
	return oaafu
}

// SetAnnotationID sets the "annotation_id" field.
func (oaafu *OncallAnnotationAlertFeedbackUpdate) SetAnnotationID(u uuid.UUID) *OncallAnnotationAlertFeedbackUpdate {
	oaafu.mutation.SetAnnotationID(u)
	return oaafu
}

// SetNillableAnnotationID sets the "annotation_id" field if the given value is not nil.
func (oaafu *OncallAnnotationAlertFeedbackUpdate) SetNillableAnnotationID(u *uuid.UUID) *OncallAnnotationAlertFeedbackUpdate {
	if u != nil {
		oaafu.SetAnnotationID(*u)
	}
	return oaafu
}

// SetActionable sets the "actionable" field.
func (oaafu *OncallAnnotationAlertFeedbackUpdate) SetActionable(b bool) *OncallAnnotationAlertFeedbackUpdate {
	oaafu.mutation.SetActionable(b)
	return oaafu
}

// SetNillableActionable sets the "actionable" field if the given value is not nil.
func (oaafu *OncallAnnotationAlertFeedbackUpdate) SetNillableActionable(b *bool) *OncallAnnotationAlertFeedbackUpdate {
	if b != nil {
		oaafu.SetActionable(*b)
	}
	return oaafu
}

// SetDocumentationAvailable sets the "documentation_available" field.
func (oaafu *OncallAnnotationAlertFeedbackUpdate) SetDocumentationAvailable(b bool) *OncallAnnotationAlertFeedbackUpdate {
	oaafu.mutation.SetDocumentationAvailable(b)
	return oaafu
}

// SetNillableDocumentationAvailable sets the "documentation_available" field if the given value is not nil.
func (oaafu *OncallAnnotationAlertFeedbackUpdate) SetNillableDocumentationAvailable(b *bool) *OncallAnnotationAlertFeedbackUpdate {
	if b != nil {
		oaafu.SetDocumentationAvailable(*b)
	}
	return oaafu
}

// SetAccuracy sets the "accuracy" field.
func (oaafu *OncallAnnotationAlertFeedbackUpdate) SetAccuracy(o oncallannotationalertfeedback.Accuracy) *OncallAnnotationAlertFeedbackUpdate {
	oaafu.mutation.SetAccuracy(o)
	return oaafu
}

// SetNillableAccuracy sets the "accuracy" field if the given value is not nil.
func (oaafu *OncallAnnotationAlertFeedbackUpdate) SetNillableAccuracy(o *oncallannotationalertfeedback.Accuracy) *OncallAnnotationAlertFeedbackUpdate {
	if o != nil {
		oaafu.SetAccuracy(*o)
	}
	return oaafu
}

// SetAnnotation sets the "annotation" edge to the OncallAnnotation entity.
func (oaafu *OncallAnnotationAlertFeedbackUpdate) SetAnnotation(o *OncallAnnotation) *OncallAnnotationAlertFeedbackUpdate {
	return oaafu.SetAnnotationID(o.ID)
}

// Mutation returns the OncallAnnotationAlertFeedbackMutation object of the builder.
func (oaafu *OncallAnnotationAlertFeedbackUpdate) Mutation() *OncallAnnotationAlertFeedbackMutation {
	return oaafu.mutation
}

// ClearAnnotation clears the "annotation" edge to the OncallAnnotation entity.
func (oaafu *OncallAnnotationAlertFeedbackUpdate) ClearAnnotation() *OncallAnnotationAlertFeedbackUpdate {
	oaafu.mutation.ClearAnnotation()
	return oaafu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oaafu *OncallAnnotationAlertFeedbackUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, oaafu.sqlSave, oaafu.mutation, oaafu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oaafu *OncallAnnotationAlertFeedbackUpdate) SaveX(ctx context.Context) int {
	affected, err := oaafu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oaafu *OncallAnnotationAlertFeedbackUpdate) Exec(ctx context.Context) error {
	_, err := oaafu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oaafu *OncallAnnotationAlertFeedbackUpdate) ExecX(ctx context.Context) {
	if err := oaafu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oaafu *OncallAnnotationAlertFeedbackUpdate) check() error {
	if v, ok := oaafu.mutation.Accuracy(); ok {
		if err := oncallannotationalertfeedback.AccuracyValidator(v); err != nil {
			return &ValidationError{Name: "accuracy", err: fmt.Errorf(`ent: validator failed for field "OncallAnnotationAlertFeedback.accuracy": %w`, err)}
		}
	}
	if oaafu.mutation.AnnotationCleared() && len(oaafu.mutation.AnnotationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallAnnotationAlertFeedback.annotation"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (oaafu *OncallAnnotationAlertFeedbackUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OncallAnnotationAlertFeedbackUpdate {
	oaafu.modifiers = append(oaafu.modifiers, modifiers...)
	return oaafu
}

func (oaafu *OncallAnnotationAlertFeedbackUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := oaafu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(oncallannotationalertfeedback.Table, oncallannotationalertfeedback.Columns, sqlgraph.NewFieldSpec(oncallannotationalertfeedback.FieldID, field.TypeUUID))
	if ps := oaafu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oaafu.mutation.Actionable(); ok {
		_spec.SetField(oncallannotationalertfeedback.FieldActionable, field.TypeBool, value)
	}
	if value, ok := oaafu.mutation.DocumentationAvailable(); ok {
		_spec.SetField(oncallannotationalertfeedback.FieldDocumentationAvailable, field.TypeBool, value)
	}
	if value, ok := oaafu.mutation.Accuracy(); ok {
		_spec.SetField(oncallannotationalertfeedback.FieldAccuracy, field.TypeEnum, value)
	}
	if oaafu.mutation.AnnotationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   oncallannotationalertfeedback.AnnotationTable,
			Columns: []string{oncallannotationalertfeedback.AnnotationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallannotation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oaafu.mutation.AnnotationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   oncallannotationalertfeedback.AnnotationTable,
			Columns: []string{oncallannotationalertfeedback.AnnotationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallannotation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(oaafu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, oaafu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oncallannotationalertfeedback.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	oaafu.mutation.done = true
	return n, nil
}

// OncallAnnotationAlertFeedbackUpdateOne is the builder for updating a single OncallAnnotationAlertFeedback entity.
type OncallAnnotationAlertFeedbackUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OncallAnnotationAlertFeedbackMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetAnnotationID sets the "annotation_id" field.
func (oaafuo *OncallAnnotationAlertFeedbackUpdateOne) SetAnnotationID(u uuid.UUID) *OncallAnnotationAlertFeedbackUpdateOne {
	oaafuo.mutation.SetAnnotationID(u)
	return oaafuo
}

// SetNillableAnnotationID sets the "annotation_id" field if the given value is not nil.
func (oaafuo *OncallAnnotationAlertFeedbackUpdateOne) SetNillableAnnotationID(u *uuid.UUID) *OncallAnnotationAlertFeedbackUpdateOne {
	if u != nil {
		oaafuo.SetAnnotationID(*u)
	}
	return oaafuo
}

// SetActionable sets the "actionable" field.
func (oaafuo *OncallAnnotationAlertFeedbackUpdateOne) SetActionable(b bool) *OncallAnnotationAlertFeedbackUpdateOne {
	oaafuo.mutation.SetActionable(b)
	return oaafuo
}

// SetNillableActionable sets the "actionable" field if the given value is not nil.
func (oaafuo *OncallAnnotationAlertFeedbackUpdateOne) SetNillableActionable(b *bool) *OncallAnnotationAlertFeedbackUpdateOne {
	if b != nil {
		oaafuo.SetActionable(*b)
	}
	return oaafuo
}

// SetDocumentationAvailable sets the "documentation_available" field.
func (oaafuo *OncallAnnotationAlertFeedbackUpdateOne) SetDocumentationAvailable(b bool) *OncallAnnotationAlertFeedbackUpdateOne {
	oaafuo.mutation.SetDocumentationAvailable(b)
	return oaafuo
}

// SetNillableDocumentationAvailable sets the "documentation_available" field if the given value is not nil.
func (oaafuo *OncallAnnotationAlertFeedbackUpdateOne) SetNillableDocumentationAvailable(b *bool) *OncallAnnotationAlertFeedbackUpdateOne {
	if b != nil {
		oaafuo.SetDocumentationAvailable(*b)
	}
	return oaafuo
}

// SetAccuracy sets the "accuracy" field.
func (oaafuo *OncallAnnotationAlertFeedbackUpdateOne) SetAccuracy(o oncallannotationalertfeedback.Accuracy) *OncallAnnotationAlertFeedbackUpdateOne {
	oaafuo.mutation.SetAccuracy(o)
	return oaafuo
}

// SetNillableAccuracy sets the "accuracy" field if the given value is not nil.
func (oaafuo *OncallAnnotationAlertFeedbackUpdateOne) SetNillableAccuracy(o *oncallannotationalertfeedback.Accuracy) *OncallAnnotationAlertFeedbackUpdateOne {
	if o != nil {
		oaafuo.SetAccuracy(*o)
	}
	return oaafuo
}

// SetAnnotation sets the "annotation" edge to the OncallAnnotation entity.
func (oaafuo *OncallAnnotationAlertFeedbackUpdateOne) SetAnnotation(o *OncallAnnotation) *OncallAnnotationAlertFeedbackUpdateOne {
	return oaafuo.SetAnnotationID(o.ID)
}

// Mutation returns the OncallAnnotationAlertFeedbackMutation object of the builder.
func (oaafuo *OncallAnnotationAlertFeedbackUpdateOne) Mutation() *OncallAnnotationAlertFeedbackMutation {
	return oaafuo.mutation
}

// ClearAnnotation clears the "annotation" edge to the OncallAnnotation entity.
func (oaafuo *OncallAnnotationAlertFeedbackUpdateOne) ClearAnnotation() *OncallAnnotationAlertFeedbackUpdateOne {
	oaafuo.mutation.ClearAnnotation()
	return oaafuo
}

// Where appends a list predicates to the OncallAnnotationAlertFeedbackUpdate builder.
func (oaafuo *OncallAnnotationAlertFeedbackUpdateOne) Where(ps ...predicate.OncallAnnotationAlertFeedback) *OncallAnnotationAlertFeedbackUpdateOne {
	oaafuo.mutation.Where(ps...)
	return oaafuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oaafuo *OncallAnnotationAlertFeedbackUpdateOne) Select(field string, fields ...string) *OncallAnnotationAlertFeedbackUpdateOne {
	oaafuo.fields = append([]string{field}, fields...)
	return oaafuo
}

// Save executes the query and returns the updated OncallAnnotationAlertFeedback entity.
func (oaafuo *OncallAnnotationAlertFeedbackUpdateOne) Save(ctx context.Context) (*OncallAnnotationAlertFeedback, error) {
	return withHooks(ctx, oaafuo.sqlSave, oaafuo.mutation, oaafuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oaafuo *OncallAnnotationAlertFeedbackUpdateOne) SaveX(ctx context.Context) *OncallAnnotationAlertFeedback {
	node, err := oaafuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oaafuo *OncallAnnotationAlertFeedbackUpdateOne) Exec(ctx context.Context) error {
	_, err := oaafuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oaafuo *OncallAnnotationAlertFeedbackUpdateOne) ExecX(ctx context.Context) {
	if err := oaafuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oaafuo *OncallAnnotationAlertFeedbackUpdateOne) check() error {
	if v, ok := oaafuo.mutation.Accuracy(); ok {
		if err := oncallannotationalertfeedback.AccuracyValidator(v); err != nil {
			return &ValidationError{Name: "accuracy", err: fmt.Errorf(`ent: validator failed for field "OncallAnnotationAlertFeedback.accuracy": %w`, err)}
		}
	}
	if oaafuo.mutation.AnnotationCleared() && len(oaafuo.mutation.AnnotationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallAnnotationAlertFeedback.annotation"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (oaafuo *OncallAnnotationAlertFeedbackUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OncallAnnotationAlertFeedbackUpdateOne {
	oaafuo.modifiers = append(oaafuo.modifiers, modifiers...)
	return oaafuo
}

func (oaafuo *OncallAnnotationAlertFeedbackUpdateOne) sqlSave(ctx context.Context) (_node *OncallAnnotationAlertFeedback, err error) {
	if err := oaafuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(oncallannotationalertfeedback.Table, oncallannotationalertfeedback.Columns, sqlgraph.NewFieldSpec(oncallannotationalertfeedback.FieldID, field.TypeUUID))
	id, ok := oaafuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OncallAnnotationAlertFeedback.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oaafuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oncallannotationalertfeedback.FieldID)
		for _, f := range fields {
			if !oncallannotationalertfeedback.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oncallannotationalertfeedback.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oaafuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oaafuo.mutation.Actionable(); ok {
		_spec.SetField(oncallannotationalertfeedback.FieldActionable, field.TypeBool, value)
	}
	if value, ok := oaafuo.mutation.DocumentationAvailable(); ok {
		_spec.SetField(oncallannotationalertfeedback.FieldDocumentationAvailable, field.TypeBool, value)
	}
	if value, ok := oaafuo.mutation.Accuracy(); ok {
		_spec.SetField(oncallannotationalertfeedback.FieldAccuracy, field.TypeEnum, value)
	}
	if oaafuo.mutation.AnnotationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   oncallannotationalertfeedback.AnnotationTable,
			Columns: []string{oncallannotationalertfeedback.AnnotationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallannotation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oaafuo.mutation.AnnotationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   oncallannotationalertfeedback.AnnotationTable,
			Columns: []string{oncallannotationalertfeedback.AnnotationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallannotation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(oaafuo.modifiers...)
	_node = &OncallAnnotationAlertFeedback{config: oaafuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oaafuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oncallannotationalertfeedback.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oaafuo.mutation.done = true
	return _node, nil
}
