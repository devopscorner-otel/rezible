// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/incidentdebrief"
	"github.com/rezible/rezible/ent/incidentdebriefmessage"
	"github.com/rezible/rezible/ent/incidentdebriefquestion"
	"github.com/rezible/rezible/ent/tenant"
)

// IncidentDebriefMessage is the model entity for the IncidentDebriefMessage schema.
type IncidentDebriefMessage struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID int `json:"tenant_id,omitempty"`
	// DebriefID holds the value of the "debrief_id" field.
	DebriefID uuid.UUID `json:"debrief_id,omitempty"`
	// QuestionID holds the value of the "question_id" field.
	QuestionID uuid.UUID `json:"question_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Type holds the value of the "type" field.
	Type incidentdebriefmessage.Type `json:"type,omitempty"`
	// RequestedTool holds the value of the "requested_tool" field.
	RequestedTool incidentdebriefmessage.RequestedTool `json:"requested_tool,omitempty"`
	// Body holds the value of the "body" field.
	Body string `json:"body,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IncidentDebriefMessageQuery when eager-loading is set.
	Edges        IncidentDebriefMessageEdges `json:"edges"`
	selectValues sql.SelectValues
}

// IncidentDebriefMessageEdges holds the relations/edges for other nodes in the graph.
type IncidentDebriefMessageEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Debrief holds the value of the debrief edge.
	Debrief *IncidentDebrief `json:"debrief,omitempty"`
	// FromQuestion holds the value of the from_question edge.
	FromQuestion *IncidentDebriefQuestion `json:"from_question,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IncidentDebriefMessageEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// DebriefOrErr returns the Debrief value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IncidentDebriefMessageEdges) DebriefOrErr() (*IncidentDebrief, error) {
	if e.Debrief != nil {
		return e.Debrief, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: incidentdebrief.Label}
	}
	return nil, &NotLoadedError{edge: "debrief"}
}

// FromQuestionOrErr returns the FromQuestion value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IncidentDebriefMessageEdges) FromQuestionOrErr() (*IncidentDebriefQuestion, error) {
	if e.FromQuestion != nil {
		return e.FromQuestion, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: incidentdebriefquestion.Label}
	}
	return nil, &NotLoadedError{edge: "from_question"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IncidentDebriefMessage) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case incidentdebriefmessage.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case incidentdebriefmessage.FieldType, incidentdebriefmessage.FieldRequestedTool, incidentdebriefmessage.FieldBody:
			values[i] = new(sql.NullString)
		case incidentdebriefmessage.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case incidentdebriefmessage.FieldID, incidentdebriefmessage.FieldDebriefID, incidentdebriefmessage.FieldQuestionID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IncidentDebriefMessage fields.
func (idm *IncidentDebriefMessage) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case incidentdebriefmessage.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				idm.ID = *value
			}
		case incidentdebriefmessage.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				idm.TenantID = int(value.Int64)
			}
		case incidentdebriefmessage.FieldDebriefID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field debrief_id", values[i])
			} else if value != nil {
				idm.DebriefID = *value
			}
		case incidentdebriefmessage.FieldQuestionID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field question_id", values[i])
			} else if value != nil {
				idm.QuestionID = *value
			}
		case incidentdebriefmessage.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				idm.CreatedAt = value.Time
			}
		case incidentdebriefmessage.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				idm.Type = incidentdebriefmessage.Type(value.String)
			}
		case incidentdebriefmessage.FieldRequestedTool:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field requested_tool", values[i])
			} else if value.Valid {
				idm.RequestedTool = incidentdebriefmessage.RequestedTool(value.String)
			}
		case incidentdebriefmessage.FieldBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field body", values[i])
			} else if value.Valid {
				idm.Body = value.String
			}
		default:
			idm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the IncidentDebriefMessage.
// This includes values selected through modifiers, order, etc.
func (idm *IncidentDebriefMessage) Value(name string) (ent.Value, error) {
	return idm.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the IncidentDebriefMessage entity.
func (idm *IncidentDebriefMessage) QueryTenant() *TenantQuery {
	return NewIncidentDebriefMessageClient(idm.config).QueryTenant(idm)
}

// QueryDebrief queries the "debrief" edge of the IncidentDebriefMessage entity.
func (idm *IncidentDebriefMessage) QueryDebrief() *IncidentDebriefQuery {
	return NewIncidentDebriefMessageClient(idm.config).QueryDebrief(idm)
}

// QueryFromQuestion queries the "from_question" edge of the IncidentDebriefMessage entity.
func (idm *IncidentDebriefMessage) QueryFromQuestion() *IncidentDebriefQuestionQuery {
	return NewIncidentDebriefMessageClient(idm.config).QueryFromQuestion(idm)
}

// Update returns a builder for updating this IncidentDebriefMessage.
// Note that you need to call IncidentDebriefMessage.Unwrap() before calling this method if this IncidentDebriefMessage
// was returned from a transaction, and the transaction was committed or rolled back.
func (idm *IncidentDebriefMessage) Update() *IncidentDebriefMessageUpdateOne {
	return NewIncidentDebriefMessageClient(idm.config).UpdateOne(idm)
}

// Unwrap unwraps the IncidentDebriefMessage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (idm *IncidentDebriefMessage) Unwrap() *IncidentDebriefMessage {
	_tx, ok := idm.config.driver.(*txDriver)
	if !ok {
		panic("ent: IncidentDebriefMessage is not a transactional entity")
	}
	idm.config.driver = _tx.drv
	return idm
}

// String implements the fmt.Stringer.
func (idm *IncidentDebriefMessage) String() string {
	var builder strings.Builder
	builder.WriteString("IncidentDebriefMessage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", idm.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", idm.TenantID))
	builder.WriteString(", ")
	builder.WriteString("debrief_id=")
	builder.WriteString(fmt.Sprintf("%v", idm.DebriefID))
	builder.WriteString(", ")
	builder.WriteString("question_id=")
	builder.WriteString(fmt.Sprintf("%v", idm.QuestionID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(idm.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", idm.Type))
	builder.WriteString(", ")
	builder.WriteString("requested_tool=")
	builder.WriteString(fmt.Sprintf("%v", idm.RequestedTool))
	builder.WriteString(", ")
	builder.WriteString("body=")
	builder.WriteString(idm.Body)
	builder.WriteByte(')')
	return builder.String()
}

// IncidentDebriefMessages is a parsable slice of IncidentDebriefMessage.
type IncidentDebriefMessages []*IncidentDebriefMessage
