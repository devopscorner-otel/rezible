// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/systemanalysis"
	"github.com/rezible/rezible/ent/systemanalysisrelationship"
	"github.com/rezible/rezible/ent/systemcomponent"
	"github.com/rezible/rezible/ent/systemcomponentcontrol"
	"github.com/rezible/rezible/ent/systemcomponentsignal"
	"github.com/rezible/rezible/ent/systemrelationshipcontrolaction"
	"github.com/rezible/rezible/ent/systemrelationshipfeedbacksignal"
)

// SystemAnalysisRelationshipUpdate is the builder for updating SystemAnalysisRelationship entities.
type SystemAnalysisRelationshipUpdate struct {
	config
	hooks     []Hook
	mutation  *SystemAnalysisRelationshipMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SystemAnalysisRelationshipUpdate builder.
func (saru *SystemAnalysisRelationshipUpdate) Where(ps ...predicate.SystemAnalysisRelationship) *SystemAnalysisRelationshipUpdate {
	saru.mutation.Where(ps...)
	return saru
}

// SetAnalysisID sets the "analysis_id" field.
func (saru *SystemAnalysisRelationshipUpdate) SetAnalysisID(u uuid.UUID) *SystemAnalysisRelationshipUpdate {
	saru.mutation.SetAnalysisID(u)
	return saru
}

// SetNillableAnalysisID sets the "analysis_id" field if the given value is not nil.
func (saru *SystemAnalysisRelationshipUpdate) SetNillableAnalysisID(u *uuid.UUID) *SystemAnalysisRelationshipUpdate {
	if u != nil {
		saru.SetAnalysisID(*u)
	}
	return saru
}

// SetSourceComponentID sets the "source_component_id" field.
func (saru *SystemAnalysisRelationshipUpdate) SetSourceComponentID(u uuid.UUID) *SystemAnalysisRelationshipUpdate {
	saru.mutation.SetSourceComponentID(u)
	return saru
}

// SetNillableSourceComponentID sets the "source_component_id" field if the given value is not nil.
func (saru *SystemAnalysisRelationshipUpdate) SetNillableSourceComponentID(u *uuid.UUID) *SystemAnalysisRelationshipUpdate {
	if u != nil {
		saru.SetSourceComponentID(*u)
	}
	return saru
}

// SetTargetComponentID sets the "target_component_id" field.
func (saru *SystemAnalysisRelationshipUpdate) SetTargetComponentID(u uuid.UUID) *SystemAnalysisRelationshipUpdate {
	saru.mutation.SetTargetComponentID(u)
	return saru
}

// SetNillableTargetComponentID sets the "target_component_id" field if the given value is not nil.
func (saru *SystemAnalysisRelationshipUpdate) SetNillableTargetComponentID(u *uuid.UUID) *SystemAnalysisRelationshipUpdate {
	if u != nil {
		saru.SetTargetComponentID(*u)
	}
	return saru
}

// SetDescription sets the "description" field.
func (saru *SystemAnalysisRelationshipUpdate) SetDescription(s string) *SystemAnalysisRelationshipUpdate {
	saru.mutation.SetDescription(s)
	return saru
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (saru *SystemAnalysisRelationshipUpdate) SetNillableDescription(s *string) *SystemAnalysisRelationshipUpdate {
	if s != nil {
		saru.SetDescription(*s)
	}
	return saru
}

// ClearDescription clears the value of the "description" field.
func (saru *SystemAnalysisRelationshipUpdate) ClearDescription() *SystemAnalysisRelationshipUpdate {
	saru.mutation.ClearDescription()
	return saru
}

// SetCreatedAt sets the "created_at" field.
func (saru *SystemAnalysisRelationshipUpdate) SetCreatedAt(t time.Time) *SystemAnalysisRelationshipUpdate {
	saru.mutation.SetCreatedAt(t)
	return saru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (saru *SystemAnalysisRelationshipUpdate) SetNillableCreatedAt(t *time.Time) *SystemAnalysisRelationshipUpdate {
	if t != nil {
		saru.SetCreatedAt(*t)
	}
	return saru
}

// SetSystemAnalysisID sets the "system_analysis" edge to the SystemAnalysis entity by ID.
func (saru *SystemAnalysisRelationshipUpdate) SetSystemAnalysisID(id uuid.UUID) *SystemAnalysisRelationshipUpdate {
	saru.mutation.SetSystemAnalysisID(id)
	return saru
}

// SetSystemAnalysis sets the "system_analysis" edge to the SystemAnalysis entity.
func (saru *SystemAnalysisRelationshipUpdate) SetSystemAnalysis(s *SystemAnalysis) *SystemAnalysisRelationshipUpdate {
	return saru.SetSystemAnalysisID(s.ID)
}

// SetSourceComponent sets the "source_component" edge to the SystemComponent entity.
func (saru *SystemAnalysisRelationshipUpdate) SetSourceComponent(s *SystemComponent) *SystemAnalysisRelationshipUpdate {
	return saru.SetSourceComponentID(s.ID)
}

// SetTargetComponent sets the "target_component" edge to the SystemComponent entity.
func (saru *SystemAnalysisRelationshipUpdate) SetTargetComponent(s *SystemComponent) *SystemAnalysisRelationshipUpdate {
	return saru.SetTargetComponentID(s.ID)
}

// AddControlIDs adds the "controls" edge to the SystemComponentControl entity by IDs.
func (saru *SystemAnalysisRelationshipUpdate) AddControlIDs(ids ...uuid.UUID) *SystemAnalysisRelationshipUpdate {
	saru.mutation.AddControlIDs(ids...)
	return saru
}

// AddControls adds the "controls" edges to the SystemComponentControl entity.
func (saru *SystemAnalysisRelationshipUpdate) AddControls(s ...*SystemComponentControl) *SystemAnalysisRelationshipUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return saru.AddControlIDs(ids...)
}

// AddSignalIDs adds the "signals" edge to the SystemComponentSignal entity by IDs.
func (saru *SystemAnalysisRelationshipUpdate) AddSignalIDs(ids ...uuid.UUID) *SystemAnalysisRelationshipUpdate {
	saru.mutation.AddSignalIDs(ids...)
	return saru
}

// AddSignals adds the "signals" edges to the SystemComponentSignal entity.
func (saru *SystemAnalysisRelationshipUpdate) AddSignals(s ...*SystemComponentSignal) *SystemAnalysisRelationshipUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return saru.AddSignalIDs(ids...)
}

// AddControlActionIDs adds the "control_actions" edge to the SystemRelationshipControlAction entity by IDs.
func (saru *SystemAnalysisRelationshipUpdate) AddControlActionIDs(ids ...uuid.UUID) *SystemAnalysisRelationshipUpdate {
	saru.mutation.AddControlActionIDs(ids...)
	return saru
}

// AddControlActions adds the "control_actions" edges to the SystemRelationshipControlAction entity.
func (saru *SystemAnalysisRelationshipUpdate) AddControlActions(s ...*SystemRelationshipControlAction) *SystemAnalysisRelationshipUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return saru.AddControlActionIDs(ids...)
}

// AddFeedbackSignalIDs adds the "feedback_signals" edge to the SystemRelationshipFeedbackSignal entity by IDs.
func (saru *SystemAnalysisRelationshipUpdate) AddFeedbackSignalIDs(ids ...uuid.UUID) *SystemAnalysisRelationshipUpdate {
	saru.mutation.AddFeedbackSignalIDs(ids...)
	return saru
}

// AddFeedbackSignals adds the "feedback_signals" edges to the SystemRelationshipFeedbackSignal entity.
func (saru *SystemAnalysisRelationshipUpdate) AddFeedbackSignals(s ...*SystemRelationshipFeedbackSignal) *SystemAnalysisRelationshipUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return saru.AddFeedbackSignalIDs(ids...)
}

// Mutation returns the SystemAnalysisRelationshipMutation object of the builder.
func (saru *SystemAnalysisRelationshipUpdate) Mutation() *SystemAnalysisRelationshipMutation {
	return saru.mutation
}

// ClearSystemAnalysis clears the "system_analysis" edge to the SystemAnalysis entity.
func (saru *SystemAnalysisRelationshipUpdate) ClearSystemAnalysis() *SystemAnalysisRelationshipUpdate {
	saru.mutation.ClearSystemAnalysis()
	return saru
}

// ClearSourceComponent clears the "source_component" edge to the SystemComponent entity.
func (saru *SystemAnalysisRelationshipUpdate) ClearSourceComponent() *SystemAnalysisRelationshipUpdate {
	saru.mutation.ClearSourceComponent()
	return saru
}

// ClearTargetComponent clears the "target_component" edge to the SystemComponent entity.
func (saru *SystemAnalysisRelationshipUpdate) ClearTargetComponent() *SystemAnalysisRelationshipUpdate {
	saru.mutation.ClearTargetComponent()
	return saru
}

// ClearControls clears all "controls" edges to the SystemComponentControl entity.
func (saru *SystemAnalysisRelationshipUpdate) ClearControls() *SystemAnalysisRelationshipUpdate {
	saru.mutation.ClearControls()
	return saru
}

// RemoveControlIDs removes the "controls" edge to SystemComponentControl entities by IDs.
func (saru *SystemAnalysisRelationshipUpdate) RemoveControlIDs(ids ...uuid.UUID) *SystemAnalysisRelationshipUpdate {
	saru.mutation.RemoveControlIDs(ids...)
	return saru
}

// RemoveControls removes "controls" edges to SystemComponentControl entities.
func (saru *SystemAnalysisRelationshipUpdate) RemoveControls(s ...*SystemComponentControl) *SystemAnalysisRelationshipUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return saru.RemoveControlIDs(ids...)
}

// ClearSignals clears all "signals" edges to the SystemComponentSignal entity.
func (saru *SystemAnalysisRelationshipUpdate) ClearSignals() *SystemAnalysisRelationshipUpdate {
	saru.mutation.ClearSignals()
	return saru
}

// RemoveSignalIDs removes the "signals" edge to SystemComponentSignal entities by IDs.
func (saru *SystemAnalysisRelationshipUpdate) RemoveSignalIDs(ids ...uuid.UUID) *SystemAnalysisRelationshipUpdate {
	saru.mutation.RemoveSignalIDs(ids...)
	return saru
}

// RemoveSignals removes "signals" edges to SystemComponentSignal entities.
func (saru *SystemAnalysisRelationshipUpdate) RemoveSignals(s ...*SystemComponentSignal) *SystemAnalysisRelationshipUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return saru.RemoveSignalIDs(ids...)
}

// ClearControlActions clears all "control_actions" edges to the SystemRelationshipControlAction entity.
func (saru *SystemAnalysisRelationshipUpdate) ClearControlActions() *SystemAnalysisRelationshipUpdate {
	saru.mutation.ClearControlActions()
	return saru
}

// RemoveControlActionIDs removes the "control_actions" edge to SystemRelationshipControlAction entities by IDs.
func (saru *SystemAnalysisRelationshipUpdate) RemoveControlActionIDs(ids ...uuid.UUID) *SystemAnalysisRelationshipUpdate {
	saru.mutation.RemoveControlActionIDs(ids...)
	return saru
}

// RemoveControlActions removes "control_actions" edges to SystemRelationshipControlAction entities.
func (saru *SystemAnalysisRelationshipUpdate) RemoveControlActions(s ...*SystemRelationshipControlAction) *SystemAnalysisRelationshipUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return saru.RemoveControlActionIDs(ids...)
}

// ClearFeedbackSignals clears all "feedback_signals" edges to the SystemRelationshipFeedbackSignal entity.
func (saru *SystemAnalysisRelationshipUpdate) ClearFeedbackSignals() *SystemAnalysisRelationshipUpdate {
	saru.mutation.ClearFeedbackSignals()
	return saru
}

// RemoveFeedbackSignalIDs removes the "feedback_signals" edge to SystemRelationshipFeedbackSignal entities by IDs.
func (saru *SystemAnalysisRelationshipUpdate) RemoveFeedbackSignalIDs(ids ...uuid.UUID) *SystemAnalysisRelationshipUpdate {
	saru.mutation.RemoveFeedbackSignalIDs(ids...)
	return saru
}

// RemoveFeedbackSignals removes "feedback_signals" edges to SystemRelationshipFeedbackSignal entities.
func (saru *SystemAnalysisRelationshipUpdate) RemoveFeedbackSignals(s ...*SystemRelationshipFeedbackSignal) *SystemAnalysisRelationshipUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return saru.RemoveFeedbackSignalIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (saru *SystemAnalysisRelationshipUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, saru.sqlSave, saru.mutation, saru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (saru *SystemAnalysisRelationshipUpdate) SaveX(ctx context.Context) int {
	affected, err := saru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (saru *SystemAnalysisRelationshipUpdate) Exec(ctx context.Context) error {
	_, err := saru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (saru *SystemAnalysisRelationshipUpdate) ExecX(ctx context.Context) {
	if err := saru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (saru *SystemAnalysisRelationshipUpdate) check() error {
	if saru.mutation.SystemAnalysisCleared() && len(saru.mutation.SystemAnalysisIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SystemAnalysisRelationship.system_analysis"`)
	}
	if saru.mutation.SourceComponentCleared() && len(saru.mutation.SourceComponentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SystemAnalysisRelationship.source_component"`)
	}
	if saru.mutation.TargetComponentCleared() && len(saru.mutation.TargetComponentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SystemAnalysisRelationship.target_component"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (saru *SystemAnalysisRelationshipUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SystemAnalysisRelationshipUpdate {
	saru.modifiers = append(saru.modifiers, modifiers...)
	return saru
}

func (saru *SystemAnalysisRelationshipUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := saru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(systemanalysisrelationship.Table, systemanalysisrelationship.Columns, sqlgraph.NewFieldSpec(systemanalysisrelationship.FieldID, field.TypeUUID))
	if ps := saru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := saru.mutation.Description(); ok {
		_spec.SetField(systemanalysisrelationship.FieldDescription, field.TypeString, value)
	}
	if saru.mutation.DescriptionCleared() {
		_spec.ClearField(systemanalysisrelationship.FieldDescription, field.TypeString)
	}
	if value, ok := saru.mutation.CreatedAt(); ok {
		_spec.SetField(systemanalysisrelationship.FieldCreatedAt, field.TypeTime, value)
	}
	if saru.mutation.SystemAnalysisCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemanalysisrelationship.SystemAnalysisTable,
			Columns: []string{systemanalysisrelationship.SystemAnalysisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemanalysis.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := saru.mutation.SystemAnalysisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemanalysisrelationship.SystemAnalysisTable,
			Columns: []string{systemanalysisrelationship.SystemAnalysisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemanalysis.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if saru.mutation.SourceComponentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemanalysisrelationship.SourceComponentTable,
			Columns: []string{systemanalysisrelationship.SourceComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := saru.mutation.SourceComponentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemanalysisrelationship.SourceComponentTable,
			Columns: []string{systemanalysisrelationship.SourceComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if saru.mutation.TargetComponentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemanalysisrelationship.TargetComponentTable,
			Columns: []string{systemanalysisrelationship.TargetComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := saru.mutation.TargetComponentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemanalysisrelationship.TargetComponentTable,
			Columns: []string{systemanalysisrelationship.TargetComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if saru.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemanalysisrelationship.ControlsTable,
			Columns: systemanalysisrelationship.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentcontrol.FieldID, field.TypeUUID),
			},
		}
		createE := &SystemRelationshipControlActionCreate{config: saru.config, mutation: newSystemRelationshipControlActionMutation(saru.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := saru.mutation.RemovedControlsIDs(); len(nodes) > 0 && !saru.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemanalysisrelationship.ControlsTable,
			Columns: systemanalysisrelationship.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentcontrol.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SystemRelationshipControlActionCreate{config: saru.config, mutation: newSystemRelationshipControlActionMutation(saru.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := saru.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemanalysisrelationship.ControlsTable,
			Columns: systemanalysisrelationship.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentcontrol.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SystemRelationshipControlActionCreate{config: saru.config, mutation: newSystemRelationshipControlActionMutation(saru.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if saru.mutation.SignalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemanalysisrelationship.SignalsTable,
			Columns: systemanalysisrelationship.SignalsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentsignal.FieldID, field.TypeUUID),
			},
		}
		createE := &SystemRelationshipFeedbackSignalCreate{config: saru.config, mutation: newSystemRelationshipFeedbackSignalMutation(saru.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := saru.mutation.RemovedSignalsIDs(); len(nodes) > 0 && !saru.mutation.SignalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemanalysisrelationship.SignalsTable,
			Columns: systemanalysisrelationship.SignalsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentsignal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SystemRelationshipFeedbackSignalCreate{config: saru.config, mutation: newSystemRelationshipFeedbackSignalMutation(saru.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := saru.mutation.SignalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemanalysisrelationship.SignalsTable,
			Columns: systemanalysisrelationship.SignalsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentsignal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SystemRelationshipFeedbackSignalCreate{config: saru.config, mutation: newSystemRelationshipFeedbackSignalMutation(saru.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if saru.mutation.ControlActionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemanalysisrelationship.ControlActionsTable,
			Columns: []string{systemanalysisrelationship.ControlActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemrelationshipcontrolaction.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := saru.mutation.RemovedControlActionsIDs(); len(nodes) > 0 && !saru.mutation.ControlActionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemanalysisrelationship.ControlActionsTable,
			Columns: []string{systemanalysisrelationship.ControlActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemrelationshipcontrolaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := saru.mutation.ControlActionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemanalysisrelationship.ControlActionsTable,
			Columns: []string{systemanalysisrelationship.ControlActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemrelationshipcontrolaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if saru.mutation.FeedbackSignalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemanalysisrelationship.FeedbackSignalsTable,
			Columns: []string{systemanalysisrelationship.FeedbackSignalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemrelationshipfeedbacksignal.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := saru.mutation.RemovedFeedbackSignalsIDs(); len(nodes) > 0 && !saru.mutation.FeedbackSignalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemanalysisrelationship.FeedbackSignalsTable,
			Columns: []string{systemanalysisrelationship.FeedbackSignalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemrelationshipfeedbacksignal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := saru.mutation.FeedbackSignalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemanalysisrelationship.FeedbackSignalsTable,
			Columns: []string{systemanalysisrelationship.FeedbackSignalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemrelationshipfeedbacksignal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(saru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, saru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systemanalysisrelationship.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	saru.mutation.done = true
	return n, nil
}

// SystemAnalysisRelationshipUpdateOne is the builder for updating a single SystemAnalysisRelationship entity.
type SystemAnalysisRelationshipUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SystemAnalysisRelationshipMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetAnalysisID sets the "analysis_id" field.
func (saruo *SystemAnalysisRelationshipUpdateOne) SetAnalysisID(u uuid.UUID) *SystemAnalysisRelationshipUpdateOne {
	saruo.mutation.SetAnalysisID(u)
	return saruo
}

// SetNillableAnalysisID sets the "analysis_id" field if the given value is not nil.
func (saruo *SystemAnalysisRelationshipUpdateOne) SetNillableAnalysisID(u *uuid.UUID) *SystemAnalysisRelationshipUpdateOne {
	if u != nil {
		saruo.SetAnalysisID(*u)
	}
	return saruo
}

// SetSourceComponentID sets the "source_component_id" field.
func (saruo *SystemAnalysisRelationshipUpdateOne) SetSourceComponentID(u uuid.UUID) *SystemAnalysisRelationshipUpdateOne {
	saruo.mutation.SetSourceComponentID(u)
	return saruo
}

// SetNillableSourceComponentID sets the "source_component_id" field if the given value is not nil.
func (saruo *SystemAnalysisRelationshipUpdateOne) SetNillableSourceComponentID(u *uuid.UUID) *SystemAnalysisRelationshipUpdateOne {
	if u != nil {
		saruo.SetSourceComponentID(*u)
	}
	return saruo
}

// SetTargetComponentID sets the "target_component_id" field.
func (saruo *SystemAnalysisRelationshipUpdateOne) SetTargetComponentID(u uuid.UUID) *SystemAnalysisRelationshipUpdateOne {
	saruo.mutation.SetTargetComponentID(u)
	return saruo
}

// SetNillableTargetComponentID sets the "target_component_id" field if the given value is not nil.
func (saruo *SystemAnalysisRelationshipUpdateOne) SetNillableTargetComponentID(u *uuid.UUID) *SystemAnalysisRelationshipUpdateOne {
	if u != nil {
		saruo.SetTargetComponentID(*u)
	}
	return saruo
}

// SetDescription sets the "description" field.
func (saruo *SystemAnalysisRelationshipUpdateOne) SetDescription(s string) *SystemAnalysisRelationshipUpdateOne {
	saruo.mutation.SetDescription(s)
	return saruo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (saruo *SystemAnalysisRelationshipUpdateOne) SetNillableDescription(s *string) *SystemAnalysisRelationshipUpdateOne {
	if s != nil {
		saruo.SetDescription(*s)
	}
	return saruo
}

// ClearDescription clears the value of the "description" field.
func (saruo *SystemAnalysisRelationshipUpdateOne) ClearDescription() *SystemAnalysisRelationshipUpdateOne {
	saruo.mutation.ClearDescription()
	return saruo
}

// SetCreatedAt sets the "created_at" field.
func (saruo *SystemAnalysisRelationshipUpdateOne) SetCreatedAt(t time.Time) *SystemAnalysisRelationshipUpdateOne {
	saruo.mutation.SetCreatedAt(t)
	return saruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (saruo *SystemAnalysisRelationshipUpdateOne) SetNillableCreatedAt(t *time.Time) *SystemAnalysisRelationshipUpdateOne {
	if t != nil {
		saruo.SetCreatedAt(*t)
	}
	return saruo
}

// SetSystemAnalysisID sets the "system_analysis" edge to the SystemAnalysis entity by ID.
func (saruo *SystemAnalysisRelationshipUpdateOne) SetSystemAnalysisID(id uuid.UUID) *SystemAnalysisRelationshipUpdateOne {
	saruo.mutation.SetSystemAnalysisID(id)
	return saruo
}

// SetSystemAnalysis sets the "system_analysis" edge to the SystemAnalysis entity.
func (saruo *SystemAnalysisRelationshipUpdateOne) SetSystemAnalysis(s *SystemAnalysis) *SystemAnalysisRelationshipUpdateOne {
	return saruo.SetSystemAnalysisID(s.ID)
}

// SetSourceComponent sets the "source_component" edge to the SystemComponent entity.
func (saruo *SystemAnalysisRelationshipUpdateOne) SetSourceComponent(s *SystemComponent) *SystemAnalysisRelationshipUpdateOne {
	return saruo.SetSourceComponentID(s.ID)
}

// SetTargetComponent sets the "target_component" edge to the SystemComponent entity.
func (saruo *SystemAnalysisRelationshipUpdateOne) SetTargetComponent(s *SystemComponent) *SystemAnalysisRelationshipUpdateOne {
	return saruo.SetTargetComponentID(s.ID)
}

// AddControlIDs adds the "controls" edge to the SystemComponentControl entity by IDs.
func (saruo *SystemAnalysisRelationshipUpdateOne) AddControlIDs(ids ...uuid.UUID) *SystemAnalysisRelationshipUpdateOne {
	saruo.mutation.AddControlIDs(ids...)
	return saruo
}

// AddControls adds the "controls" edges to the SystemComponentControl entity.
func (saruo *SystemAnalysisRelationshipUpdateOne) AddControls(s ...*SystemComponentControl) *SystemAnalysisRelationshipUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return saruo.AddControlIDs(ids...)
}

// AddSignalIDs adds the "signals" edge to the SystemComponentSignal entity by IDs.
func (saruo *SystemAnalysisRelationshipUpdateOne) AddSignalIDs(ids ...uuid.UUID) *SystemAnalysisRelationshipUpdateOne {
	saruo.mutation.AddSignalIDs(ids...)
	return saruo
}

// AddSignals adds the "signals" edges to the SystemComponentSignal entity.
func (saruo *SystemAnalysisRelationshipUpdateOne) AddSignals(s ...*SystemComponentSignal) *SystemAnalysisRelationshipUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return saruo.AddSignalIDs(ids...)
}

// AddControlActionIDs adds the "control_actions" edge to the SystemRelationshipControlAction entity by IDs.
func (saruo *SystemAnalysisRelationshipUpdateOne) AddControlActionIDs(ids ...uuid.UUID) *SystemAnalysisRelationshipUpdateOne {
	saruo.mutation.AddControlActionIDs(ids...)
	return saruo
}

// AddControlActions adds the "control_actions" edges to the SystemRelationshipControlAction entity.
func (saruo *SystemAnalysisRelationshipUpdateOne) AddControlActions(s ...*SystemRelationshipControlAction) *SystemAnalysisRelationshipUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return saruo.AddControlActionIDs(ids...)
}

// AddFeedbackSignalIDs adds the "feedback_signals" edge to the SystemRelationshipFeedbackSignal entity by IDs.
func (saruo *SystemAnalysisRelationshipUpdateOne) AddFeedbackSignalIDs(ids ...uuid.UUID) *SystemAnalysisRelationshipUpdateOne {
	saruo.mutation.AddFeedbackSignalIDs(ids...)
	return saruo
}

// AddFeedbackSignals adds the "feedback_signals" edges to the SystemRelationshipFeedbackSignal entity.
func (saruo *SystemAnalysisRelationshipUpdateOne) AddFeedbackSignals(s ...*SystemRelationshipFeedbackSignal) *SystemAnalysisRelationshipUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return saruo.AddFeedbackSignalIDs(ids...)
}

// Mutation returns the SystemAnalysisRelationshipMutation object of the builder.
func (saruo *SystemAnalysisRelationshipUpdateOne) Mutation() *SystemAnalysisRelationshipMutation {
	return saruo.mutation
}

// ClearSystemAnalysis clears the "system_analysis" edge to the SystemAnalysis entity.
func (saruo *SystemAnalysisRelationshipUpdateOne) ClearSystemAnalysis() *SystemAnalysisRelationshipUpdateOne {
	saruo.mutation.ClearSystemAnalysis()
	return saruo
}

// ClearSourceComponent clears the "source_component" edge to the SystemComponent entity.
func (saruo *SystemAnalysisRelationshipUpdateOne) ClearSourceComponent() *SystemAnalysisRelationshipUpdateOne {
	saruo.mutation.ClearSourceComponent()
	return saruo
}

// ClearTargetComponent clears the "target_component" edge to the SystemComponent entity.
func (saruo *SystemAnalysisRelationshipUpdateOne) ClearTargetComponent() *SystemAnalysisRelationshipUpdateOne {
	saruo.mutation.ClearTargetComponent()
	return saruo
}

// ClearControls clears all "controls" edges to the SystemComponentControl entity.
func (saruo *SystemAnalysisRelationshipUpdateOne) ClearControls() *SystemAnalysisRelationshipUpdateOne {
	saruo.mutation.ClearControls()
	return saruo
}

// RemoveControlIDs removes the "controls" edge to SystemComponentControl entities by IDs.
func (saruo *SystemAnalysisRelationshipUpdateOne) RemoveControlIDs(ids ...uuid.UUID) *SystemAnalysisRelationshipUpdateOne {
	saruo.mutation.RemoveControlIDs(ids...)
	return saruo
}

// RemoveControls removes "controls" edges to SystemComponentControl entities.
func (saruo *SystemAnalysisRelationshipUpdateOne) RemoveControls(s ...*SystemComponentControl) *SystemAnalysisRelationshipUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return saruo.RemoveControlIDs(ids...)
}

// ClearSignals clears all "signals" edges to the SystemComponentSignal entity.
func (saruo *SystemAnalysisRelationshipUpdateOne) ClearSignals() *SystemAnalysisRelationshipUpdateOne {
	saruo.mutation.ClearSignals()
	return saruo
}

// RemoveSignalIDs removes the "signals" edge to SystemComponentSignal entities by IDs.
func (saruo *SystemAnalysisRelationshipUpdateOne) RemoveSignalIDs(ids ...uuid.UUID) *SystemAnalysisRelationshipUpdateOne {
	saruo.mutation.RemoveSignalIDs(ids...)
	return saruo
}

// RemoveSignals removes "signals" edges to SystemComponentSignal entities.
func (saruo *SystemAnalysisRelationshipUpdateOne) RemoveSignals(s ...*SystemComponentSignal) *SystemAnalysisRelationshipUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return saruo.RemoveSignalIDs(ids...)
}

// ClearControlActions clears all "control_actions" edges to the SystemRelationshipControlAction entity.
func (saruo *SystemAnalysisRelationshipUpdateOne) ClearControlActions() *SystemAnalysisRelationshipUpdateOne {
	saruo.mutation.ClearControlActions()
	return saruo
}

// RemoveControlActionIDs removes the "control_actions" edge to SystemRelationshipControlAction entities by IDs.
func (saruo *SystemAnalysisRelationshipUpdateOne) RemoveControlActionIDs(ids ...uuid.UUID) *SystemAnalysisRelationshipUpdateOne {
	saruo.mutation.RemoveControlActionIDs(ids...)
	return saruo
}

// RemoveControlActions removes "control_actions" edges to SystemRelationshipControlAction entities.
func (saruo *SystemAnalysisRelationshipUpdateOne) RemoveControlActions(s ...*SystemRelationshipControlAction) *SystemAnalysisRelationshipUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return saruo.RemoveControlActionIDs(ids...)
}

// ClearFeedbackSignals clears all "feedback_signals" edges to the SystemRelationshipFeedbackSignal entity.
func (saruo *SystemAnalysisRelationshipUpdateOne) ClearFeedbackSignals() *SystemAnalysisRelationshipUpdateOne {
	saruo.mutation.ClearFeedbackSignals()
	return saruo
}

// RemoveFeedbackSignalIDs removes the "feedback_signals" edge to SystemRelationshipFeedbackSignal entities by IDs.
func (saruo *SystemAnalysisRelationshipUpdateOne) RemoveFeedbackSignalIDs(ids ...uuid.UUID) *SystemAnalysisRelationshipUpdateOne {
	saruo.mutation.RemoveFeedbackSignalIDs(ids...)
	return saruo
}

// RemoveFeedbackSignals removes "feedback_signals" edges to SystemRelationshipFeedbackSignal entities.
func (saruo *SystemAnalysisRelationshipUpdateOne) RemoveFeedbackSignals(s ...*SystemRelationshipFeedbackSignal) *SystemAnalysisRelationshipUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return saruo.RemoveFeedbackSignalIDs(ids...)
}

// Where appends a list predicates to the SystemAnalysisRelationshipUpdate builder.
func (saruo *SystemAnalysisRelationshipUpdateOne) Where(ps ...predicate.SystemAnalysisRelationship) *SystemAnalysisRelationshipUpdateOne {
	saruo.mutation.Where(ps...)
	return saruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (saruo *SystemAnalysisRelationshipUpdateOne) Select(field string, fields ...string) *SystemAnalysisRelationshipUpdateOne {
	saruo.fields = append([]string{field}, fields...)
	return saruo
}

// Save executes the query and returns the updated SystemAnalysisRelationship entity.
func (saruo *SystemAnalysisRelationshipUpdateOne) Save(ctx context.Context) (*SystemAnalysisRelationship, error) {
	return withHooks(ctx, saruo.sqlSave, saruo.mutation, saruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (saruo *SystemAnalysisRelationshipUpdateOne) SaveX(ctx context.Context) *SystemAnalysisRelationship {
	node, err := saruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (saruo *SystemAnalysisRelationshipUpdateOne) Exec(ctx context.Context) error {
	_, err := saruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (saruo *SystemAnalysisRelationshipUpdateOne) ExecX(ctx context.Context) {
	if err := saruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (saruo *SystemAnalysisRelationshipUpdateOne) check() error {
	if saruo.mutation.SystemAnalysisCleared() && len(saruo.mutation.SystemAnalysisIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SystemAnalysisRelationship.system_analysis"`)
	}
	if saruo.mutation.SourceComponentCleared() && len(saruo.mutation.SourceComponentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SystemAnalysisRelationship.source_component"`)
	}
	if saruo.mutation.TargetComponentCleared() && len(saruo.mutation.TargetComponentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SystemAnalysisRelationship.target_component"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (saruo *SystemAnalysisRelationshipUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SystemAnalysisRelationshipUpdateOne {
	saruo.modifiers = append(saruo.modifiers, modifiers...)
	return saruo
}

func (saruo *SystemAnalysisRelationshipUpdateOne) sqlSave(ctx context.Context) (_node *SystemAnalysisRelationship, err error) {
	if err := saruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(systemanalysisrelationship.Table, systemanalysisrelationship.Columns, sqlgraph.NewFieldSpec(systemanalysisrelationship.FieldID, field.TypeUUID))
	id, ok := saruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SystemAnalysisRelationship.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := saruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, systemanalysisrelationship.FieldID)
		for _, f := range fields {
			if !systemanalysisrelationship.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != systemanalysisrelationship.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := saruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := saruo.mutation.Description(); ok {
		_spec.SetField(systemanalysisrelationship.FieldDescription, field.TypeString, value)
	}
	if saruo.mutation.DescriptionCleared() {
		_spec.ClearField(systemanalysisrelationship.FieldDescription, field.TypeString)
	}
	if value, ok := saruo.mutation.CreatedAt(); ok {
		_spec.SetField(systemanalysisrelationship.FieldCreatedAt, field.TypeTime, value)
	}
	if saruo.mutation.SystemAnalysisCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemanalysisrelationship.SystemAnalysisTable,
			Columns: []string{systemanalysisrelationship.SystemAnalysisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemanalysis.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := saruo.mutation.SystemAnalysisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemanalysisrelationship.SystemAnalysisTable,
			Columns: []string{systemanalysisrelationship.SystemAnalysisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemanalysis.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if saruo.mutation.SourceComponentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemanalysisrelationship.SourceComponentTable,
			Columns: []string{systemanalysisrelationship.SourceComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := saruo.mutation.SourceComponentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemanalysisrelationship.SourceComponentTable,
			Columns: []string{systemanalysisrelationship.SourceComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if saruo.mutation.TargetComponentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemanalysisrelationship.TargetComponentTable,
			Columns: []string{systemanalysisrelationship.TargetComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := saruo.mutation.TargetComponentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemanalysisrelationship.TargetComponentTable,
			Columns: []string{systemanalysisrelationship.TargetComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if saruo.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemanalysisrelationship.ControlsTable,
			Columns: systemanalysisrelationship.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentcontrol.FieldID, field.TypeUUID),
			},
		}
		createE := &SystemRelationshipControlActionCreate{config: saruo.config, mutation: newSystemRelationshipControlActionMutation(saruo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := saruo.mutation.RemovedControlsIDs(); len(nodes) > 0 && !saruo.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemanalysisrelationship.ControlsTable,
			Columns: systemanalysisrelationship.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentcontrol.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SystemRelationshipControlActionCreate{config: saruo.config, mutation: newSystemRelationshipControlActionMutation(saruo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := saruo.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemanalysisrelationship.ControlsTable,
			Columns: systemanalysisrelationship.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentcontrol.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SystemRelationshipControlActionCreate{config: saruo.config, mutation: newSystemRelationshipControlActionMutation(saruo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if saruo.mutation.SignalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemanalysisrelationship.SignalsTable,
			Columns: systemanalysisrelationship.SignalsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentsignal.FieldID, field.TypeUUID),
			},
		}
		createE := &SystemRelationshipFeedbackSignalCreate{config: saruo.config, mutation: newSystemRelationshipFeedbackSignalMutation(saruo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := saruo.mutation.RemovedSignalsIDs(); len(nodes) > 0 && !saruo.mutation.SignalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemanalysisrelationship.SignalsTable,
			Columns: systemanalysisrelationship.SignalsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentsignal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SystemRelationshipFeedbackSignalCreate{config: saruo.config, mutation: newSystemRelationshipFeedbackSignalMutation(saruo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := saruo.mutation.SignalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemanalysisrelationship.SignalsTable,
			Columns: systemanalysisrelationship.SignalsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentsignal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SystemRelationshipFeedbackSignalCreate{config: saruo.config, mutation: newSystemRelationshipFeedbackSignalMutation(saruo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if saruo.mutation.ControlActionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemanalysisrelationship.ControlActionsTable,
			Columns: []string{systemanalysisrelationship.ControlActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemrelationshipcontrolaction.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := saruo.mutation.RemovedControlActionsIDs(); len(nodes) > 0 && !saruo.mutation.ControlActionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemanalysisrelationship.ControlActionsTable,
			Columns: []string{systemanalysisrelationship.ControlActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemrelationshipcontrolaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := saruo.mutation.ControlActionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemanalysisrelationship.ControlActionsTable,
			Columns: []string{systemanalysisrelationship.ControlActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemrelationshipcontrolaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if saruo.mutation.FeedbackSignalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemanalysisrelationship.FeedbackSignalsTable,
			Columns: []string{systemanalysisrelationship.FeedbackSignalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemrelationshipfeedbacksignal.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := saruo.mutation.RemovedFeedbackSignalsIDs(); len(nodes) > 0 && !saruo.mutation.FeedbackSignalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemanalysisrelationship.FeedbackSignalsTable,
			Columns: []string{systemanalysisrelationship.FeedbackSignalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemrelationshipfeedbacksignal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := saruo.mutation.FeedbackSignalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemanalysisrelationship.FeedbackSignalsTable,
			Columns: []string{systemanalysisrelationship.FeedbackSignalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemrelationshipfeedbacksignal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(saruo.modifiers...)
	_node = &SystemAnalysisRelationship{config: saruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, saruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systemanalysisrelationship.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	saruo.mutation.done = true
	return _node, nil
}
