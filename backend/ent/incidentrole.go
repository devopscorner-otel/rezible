// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/incidentrole"
	"github.com/rezible/rezible/ent/tenant"
)

// IncidentRole is the model entity for the IncidentRole schema.
type IncidentRole struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID int `json:"tenant_id,omitempty"`
	// ArchiveTime holds the value of the "archive_time" field.
	ArchiveTime time.Time `json:"archive_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// ProviderID holds the value of the "provider_id" field.
	ProviderID string `json:"provider_id,omitempty"`
	// Required holds the value of the "required" field.
	Required bool `json:"required,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IncidentRoleQuery when eager-loading is set.
	Edges        IncidentRoleEdges `json:"edges"`
	selectValues sql.SelectValues
}

// IncidentRoleEdges holds the relations/edges for other nodes in the graph.
type IncidentRoleEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Assignments holds the value of the assignments edge.
	Assignments []*IncidentRoleAssignment `json:"assignments,omitempty"`
	// DebriefQuestions holds the value of the debrief_questions edge.
	DebriefQuestions []*IncidentDebriefQuestion `json:"debrief_questions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IncidentRoleEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// AssignmentsOrErr returns the Assignments value or an error if the edge
// was not loaded in eager-loading.
func (e IncidentRoleEdges) AssignmentsOrErr() ([]*IncidentRoleAssignment, error) {
	if e.loadedTypes[1] {
		return e.Assignments, nil
	}
	return nil, &NotLoadedError{edge: "assignments"}
}

// DebriefQuestionsOrErr returns the DebriefQuestions value or an error if the edge
// was not loaded in eager-loading.
func (e IncidentRoleEdges) DebriefQuestionsOrErr() ([]*IncidentDebriefQuestion, error) {
	if e.loadedTypes[2] {
		return e.DebriefQuestions, nil
	}
	return nil, &NotLoadedError{edge: "debrief_questions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IncidentRole) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case incidentrole.FieldRequired:
			values[i] = new(sql.NullBool)
		case incidentrole.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case incidentrole.FieldName, incidentrole.FieldProviderID:
			values[i] = new(sql.NullString)
		case incidentrole.FieldArchiveTime:
			values[i] = new(sql.NullTime)
		case incidentrole.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IncidentRole fields.
func (ir *IncidentRole) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case incidentrole.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ir.ID = *value
			}
		case incidentrole.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				ir.TenantID = int(value.Int64)
			}
		case incidentrole.FieldArchiveTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field archive_time", values[i])
			} else if value.Valid {
				ir.ArchiveTime = value.Time
			}
		case incidentrole.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ir.Name = value.String
			}
		case incidentrole.FieldProviderID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_id", values[i])
			} else if value.Valid {
				ir.ProviderID = value.String
			}
		case incidentrole.FieldRequired:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field required", values[i])
			} else if value.Valid {
				ir.Required = value.Bool
			}
		default:
			ir.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the IncidentRole.
// This includes values selected through modifiers, order, etc.
func (ir *IncidentRole) Value(name string) (ent.Value, error) {
	return ir.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the IncidentRole entity.
func (ir *IncidentRole) QueryTenant() *TenantQuery {
	return NewIncidentRoleClient(ir.config).QueryTenant(ir)
}

// QueryAssignments queries the "assignments" edge of the IncidentRole entity.
func (ir *IncidentRole) QueryAssignments() *IncidentRoleAssignmentQuery {
	return NewIncidentRoleClient(ir.config).QueryAssignments(ir)
}

// QueryDebriefQuestions queries the "debrief_questions" edge of the IncidentRole entity.
func (ir *IncidentRole) QueryDebriefQuestions() *IncidentDebriefQuestionQuery {
	return NewIncidentRoleClient(ir.config).QueryDebriefQuestions(ir)
}

// Update returns a builder for updating this IncidentRole.
// Note that you need to call IncidentRole.Unwrap() before calling this method if this IncidentRole
// was returned from a transaction, and the transaction was committed or rolled back.
func (ir *IncidentRole) Update() *IncidentRoleUpdateOne {
	return NewIncidentRoleClient(ir.config).UpdateOne(ir)
}

// Unwrap unwraps the IncidentRole entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ir *IncidentRole) Unwrap() *IncidentRole {
	_tx, ok := ir.config.driver.(*txDriver)
	if !ok {
		panic("ent: IncidentRole is not a transactional entity")
	}
	ir.config.driver = _tx.drv
	return ir
}

// String implements the fmt.Stringer.
func (ir *IncidentRole) String() string {
	var builder strings.Builder
	builder.WriteString("IncidentRole(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ir.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", ir.TenantID))
	builder.WriteString(", ")
	builder.WriteString("archive_time=")
	builder.WriteString(ir.ArchiveTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ir.Name)
	builder.WriteString(", ")
	builder.WriteString("provider_id=")
	builder.WriteString(ir.ProviderID)
	builder.WriteString(", ")
	builder.WriteString("required=")
	builder.WriteString(fmt.Sprintf("%v", ir.Required))
	builder.WriteByte(')')
	return builder.String()
}

// IncidentRoles is a parsable slice of IncidentRole.
type IncidentRoles []*IncidentRole
