// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/twohundreds/rezible/ent/functionality"
)

// Functionality is the model entity for the Functionality schema.
type Functionality struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FunctionalityQuery when eager-loading is set.
	Edges        FunctionalityEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FunctionalityEdges holds the relations/edges for other nodes in the graph.
type FunctionalityEdges struct {
	// Incidents holds the value of the incidents edge.
	Incidents []*IncidentResourceImpact `json:"incidents,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// IncidentsOrErr returns the Incidents value or an error if the edge
// was not loaded in eager-loading.
func (e FunctionalityEdges) IncidentsOrErr() ([]*IncidentResourceImpact, error) {
	if e.loadedTypes[0] {
		return e.Incidents, nil
	}
	return nil, &NotLoadedError{edge: "incidents"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Functionality) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case functionality.FieldName:
			values[i] = new(sql.NullString)
		case functionality.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Functionality fields.
func (f *Functionality) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case functionality.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				f.ID = *value
			}
		case functionality.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				f.Name = value.String
			}
		default:
			f.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Functionality.
// This includes values selected through modifiers, order, etc.
func (f *Functionality) Value(name string) (ent.Value, error) {
	return f.selectValues.Get(name)
}

// QueryIncidents queries the "incidents" edge of the Functionality entity.
func (f *Functionality) QueryIncidents() *IncidentResourceImpactQuery {
	return NewFunctionalityClient(f.config).QueryIncidents(f)
}

// Update returns a builder for updating this Functionality.
// Note that you need to call Functionality.Unwrap() before calling this method if this Functionality
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Functionality) Update() *FunctionalityUpdateOne {
	return NewFunctionalityClient(f.config).UpdateOne(f)
}

// Unwrap unwraps the Functionality entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Functionality) Unwrap() *Functionality {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Functionality is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Functionality) String() string {
	var builder strings.Builder
	builder.WriteString("Functionality(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("name=")
	builder.WriteString(f.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Functionalities is a parsable slice of Functionality.
type Functionalities []*Functionality
