// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/oncallshift"
	"github.com/rezible/rezible/ent/oncallshiftmetrics"
	"github.com/rezible/rezible/ent/predicate"
)

// OncallShiftMetricsUpdate is the builder for updating OncallShiftMetrics entities.
type OncallShiftMetricsUpdate struct {
	config
	hooks     []Hook
	mutation  *OncallShiftMetricsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OncallShiftMetricsUpdate builder.
func (osmu *OncallShiftMetricsUpdate) Where(ps ...predicate.OncallShiftMetrics) *OncallShiftMetricsUpdate {
	osmu.mutation.Where(ps...)
	return osmu
}

// SetShiftID sets the "shift_id" field.
func (osmu *OncallShiftMetricsUpdate) SetShiftID(u uuid.UUID) *OncallShiftMetricsUpdate {
	osmu.mutation.SetShiftID(u)
	return osmu
}

// SetNillableShiftID sets the "shift_id" field if the given value is not nil.
func (osmu *OncallShiftMetricsUpdate) SetNillableShiftID(u *uuid.UUID) *OncallShiftMetricsUpdate {
	if u != nil {
		osmu.SetShiftID(*u)
	}
	return osmu
}

// SetShift sets the "shift" edge to the OncallShift entity.
func (osmu *OncallShiftMetricsUpdate) SetShift(o *OncallShift) *OncallShiftMetricsUpdate {
	return osmu.SetShiftID(o.ID)
}

// Mutation returns the OncallShiftMetricsMutation object of the builder.
func (osmu *OncallShiftMetricsUpdate) Mutation() *OncallShiftMetricsMutation {
	return osmu.mutation
}

// ClearShift clears the "shift" edge to the OncallShift entity.
func (osmu *OncallShiftMetricsUpdate) ClearShift() *OncallShiftMetricsUpdate {
	osmu.mutation.ClearShift()
	return osmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (osmu *OncallShiftMetricsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, osmu.sqlSave, osmu.mutation, osmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (osmu *OncallShiftMetricsUpdate) SaveX(ctx context.Context) int {
	affected, err := osmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (osmu *OncallShiftMetricsUpdate) Exec(ctx context.Context) error {
	_, err := osmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osmu *OncallShiftMetricsUpdate) ExecX(ctx context.Context) {
	if err := osmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (osmu *OncallShiftMetricsUpdate) check() error {
	if osmu.mutation.TenantCleared() && len(osmu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallShiftMetrics.tenant"`)
	}
	if osmu.mutation.ShiftCleared() && len(osmu.mutation.ShiftIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallShiftMetrics.shift"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (osmu *OncallShiftMetricsUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OncallShiftMetricsUpdate {
	osmu.modifiers = append(osmu.modifiers, modifiers...)
	return osmu
}

func (osmu *OncallShiftMetricsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := osmu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(oncallshiftmetrics.Table, oncallshiftmetrics.Columns, sqlgraph.NewFieldSpec(oncallshiftmetrics.FieldID, field.TypeUUID))
	if ps := osmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if osmu.mutation.ShiftCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   oncallshiftmetrics.ShiftTable,
			Columns: []string{oncallshiftmetrics.ShiftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallshift.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osmu.mutation.ShiftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   oncallshiftmetrics.ShiftTable,
			Columns: []string{oncallshiftmetrics.ShiftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallshift.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(osmu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, osmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oncallshiftmetrics.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	osmu.mutation.done = true
	return n, nil
}

// OncallShiftMetricsUpdateOne is the builder for updating a single OncallShiftMetrics entity.
type OncallShiftMetricsUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OncallShiftMetricsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetShiftID sets the "shift_id" field.
func (osmuo *OncallShiftMetricsUpdateOne) SetShiftID(u uuid.UUID) *OncallShiftMetricsUpdateOne {
	osmuo.mutation.SetShiftID(u)
	return osmuo
}

// SetNillableShiftID sets the "shift_id" field if the given value is not nil.
func (osmuo *OncallShiftMetricsUpdateOne) SetNillableShiftID(u *uuid.UUID) *OncallShiftMetricsUpdateOne {
	if u != nil {
		osmuo.SetShiftID(*u)
	}
	return osmuo
}

// SetShift sets the "shift" edge to the OncallShift entity.
func (osmuo *OncallShiftMetricsUpdateOne) SetShift(o *OncallShift) *OncallShiftMetricsUpdateOne {
	return osmuo.SetShiftID(o.ID)
}

// Mutation returns the OncallShiftMetricsMutation object of the builder.
func (osmuo *OncallShiftMetricsUpdateOne) Mutation() *OncallShiftMetricsMutation {
	return osmuo.mutation
}

// ClearShift clears the "shift" edge to the OncallShift entity.
func (osmuo *OncallShiftMetricsUpdateOne) ClearShift() *OncallShiftMetricsUpdateOne {
	osmuo.mutation.ClearShift()
	return osmuo
}

// Where appends a list predicates to the OncallShiftMetricsUpdate builder.
func (osmuo *OncallShiftMetricsUpdateOne) Where(ps ...predicate.OncallShiftMetrics) *OncallShiftMetricsUpdateOne {
	osmuo.mutation.Where(ps...)
	return osmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (osmuo *OncallShiftMetricsUpdateOne) Select(field string, fields ...string) *OncallShiftMetricsUpdateOne {
	osmuo.fields = append([]string{field}, fields...)
	return osmuo
}

// Save executes the query and returns the updated OncallShiftMetrics entity.
func (osmuo *OncallShiftMetricsUpdateOne) Save(ctx context.Context) (*OncallShiftMetrics, error) {
	return withHooks(ctx, osmuo.sqlSave, osmuo.mutation, osmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (osmuo *OncallShiftMetricsUpdateOne) SaveX(ctx context.Context) *OncallShiftMetrics {
	node, err := osmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (osmuo *OncallShiftMetricsUpdateOne) Exec(ctx context.Context) error {
	_, err := osmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osmuo *OncallShiftMetricsUpdateOne) ExecX(ctx context.Context) {
	if err := osmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (osmuo *OncallShiftMetricsUpdateOne) check() error {
	if osmuo.mutation.TenantCleared() && len(osmuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallShiftMetrics.tenant"`)
	}
	if osmuo.mutation.ShiftCleared() && len(osmuo.mutation.ShiftIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallShiftMetrics.shift"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (osmuo *OncallShiftMetricsUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OncallShiftMetricsUpdateOne {
	osmuo.modifiers = append(osmuo.modifiers, modifiers...)
	return osmuo
}

func (osmuo *OncallShiftMetricsUpdateOne) sqlSave(ctx context.Context) (_node *OncallShiftMetrics, err error) {
	if err := osmuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(oncallshiftmetrics.Table, oncallshiftmetrics.Columns, sqlgraph.NewFieldSpec(oncallshiftmetrics.FieldID, field.TypeUUID))
	id, ok := osmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OncallShiftMetrics.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := osmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oncallshiftmetrics.FieldID)
		for _, f := range fields {
			if !oncallshiftmetrics.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oncallshiftmetrics.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := osmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if osmuo.mutation.ShiftCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   oncallshiftmetrics.ShiftTable,
			Columns: []string{oncallshiftmetrics.ShiftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallshift.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osmuo.mutation.ShiftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   oncallshiftmetrics.ShiftTable,
			Columns: []string{oncallshiftmetrics.ShiftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallshift.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(osmuo.modifiers...)
	_node = &OncallShiftMetrics{config: osmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, osmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oncallshiftmetrics.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	osmuo.mutation.done = true
	return _node, nil
}
