// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/systemanalysisrelationship"
	"github.com/rezible/rezible/ent/systemcomponentcontrol"
	"github.com/rezible/rezible/ent/systemrelationshipcontrolaction"
)

// SystemRelationshipControlActionCreate is the builder for creating a SystemRelationshipControlAction entity.
type SystemRelationshipControlActionCreate struct {
	config
	mutation *SystemRelationshipControlActionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetRelationshipID sets the "relationship_id" field.
func (srcac *SystemRelationshipControlActionCreate) SetRelationshipID(u uuid.UUID) *SystemRelationshipControlActionCreate {
	srcac.mutation.SetRelationshipID(u)
	return srcac
}

// SetControlID sets the "control_id" field.
func (srcac *SystemRelationshipControlActionCreate) SetControlID(u uuid.UUID) *SystemRelationshipControlActionCreate {
	srcac.mutation.SetControlID(u)
	return srcac
}

// SetType sets the "type" field.
func (srcac *SystemRelationshipControlActionCreate) SetType(s string) *SystemRelationshipControlActionCreate {
	srcac.mutation.SetType(s)
	return srcac
}

// SetDescription sets the "description" field.
func (srcac *SystemRelationshipControlActionCreate) SetDescription(s string) *SystemRelationshipControlActionCreate {
	srcac.mutation.SetDescription(s)
	return srcac
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (srcac *SystemRelationshipControlActionCreate) SetNillableDescription(s *string) *SystemRelationshipControlActionCreate {
	if s != nil {
		srcac.SetDescription(*s)
	}
	return srcac
}

// SetCreatedAt sets the "created_at" field.
func (srcac *SystemRelationshipControlActionCreate) SetCreatedAt(t time.Time) *SystemRelationshipControlActionCreate {
	srcac.mutation.SetCreatedAt(t)
	return srcac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (srcac *SystemRelationshipControlActionCreate) SetNillableCreatedAt(t *time.Time) *SystemRelationshipControlActionCreate {
	if t != nil {
		srcac.SetCreatedAt(*t)
	}
	return srcac
}

// SetID sets the "id" field.
func (srcac *SystemRelationshipControlActionCreate) SetID(u uuid.UUID) *SystemRelationshipControlActionCreate {
	srcac.mutation.SetID(u)
	return srcac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (srcac *SystemRelationshipControlActionCreate) SetNillableID(u *uuid.UUID) *SystemRelationshipControlActionCreate {
	if u != nil {
		srcac.SetID(*u)
	}
	return srcac
}

// SetRelationship sets the "relationship" edge to the SystemAnalysisRelationship entity.
func (srcac *SystemRelationshipControlActionCreate) SetRelationship(s *SystemAnalysisRelationship) *SystemRelationshipControlActionCreate {
	return srcac.SetRelationshipID(s.ID)
}

// SetControl sets the "control" edge to the SystemComponentControl entity.
func (srcac *SystemRelationshipControlActionCreate) SetControl(s *SystemComponentControl) *SystemRelationshipControlActionCreate {
	return srcac.SetControlID(s.ID)
}

// Mutation returns the SystemRelationshipControlActionMutation object of the builder.
func (srcac *SystemRelationshipControlActionCreate) Mutation() *SystemRelationshipControlActionMutation {
	return srcac.mutation
}

// Save creates the SystemRelationshipControlAction in the database.
func (srcac *SystemRelationshipControlActionCreate) Save(ctx context.Context) (*SystemRelationshipControlAction, error) {
	srcac.defaults()
	return withHooks(ctx, srcac.sqlSave, srcac.mutation, srcac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (srcac *SystemRelationshipControlActionCreate) SaveX(ctx context.Context) *SystemRelationshipControlAction {
	v, err := srcac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (srcac *SystemRelationshipControlActionCreate) Exec(ctx context.Context) error {
	_, err := srcac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (srcac *SystemRelationshipControlActionCreate) ExecX(ctx context.Context) {
	if err := srcac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (srcac *SystemRelationshipControlActionCreate) defaults() {
	if _, ok := srcac.mutation.CreatedAt(); !ok {
		v := systemrelationshipcontrolaction.DefaultCreatedAt()
		srcac.mutation.SetCreatedAt(v)
	}
	if _, ok := srcac.mutation.ID(); !ok {
		v := systemrelationshipcontrolaction.DefaultID()
		srcac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (srcac *SystemRelationshipControlActionCreate) check() error {
	if _, ok := srcac.mutation.RelationshipID(); !ok {
		return &ValidationError{Name: "relationship_id", err: errors.New(`ent: missing required field "SystemRelationshipControlAction.relationship_id"`)}
	}
	if _, ok := srcac.mutation.ControlID(); !ok {
		return &ValidationError{Name: "control_id", err: errors.New(`ent: missing required field "SystemRelationshipControlAction.control_id"`)}
	}
	if _, ok := srcac.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "SystemRelationshipControlAction.type"`)}
	}
	if v, ok := srcac.mutation.GetType(); ok {
		if err := systemrelationshipcontrolaction.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "SystemRelationshipControlAction.type": %w`, err)}
		}
	}
	if _, ok := srcac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SystemRelationshipControlAction.created_at"`)}
	}
	if len(srcac.mutation.RelationshipIDs()) == 0 {
		return &ValidationError{Name: "relationship", err: errors.New(`ent: missing required edge "SystemRelationshipControlAction.relationship"`)}
	}
	if len(srcac.mutation.ControlIDs()) == 0 {
		return &ValidationError{Name: "control", err: errors.New(`ent: missing required edge "SystemRelationshipControlAction.control"`)}
	}
	return nil
}

func (srcac *SystemRelationshipControlActionCreate) sqlSave(ctx context.Context) (*SystemRelationshipControlAction, error) {
	if err := srcac.check(); err != nil {
		return nil, err
	}
	_node, _spec := srcac.createSpec()
	if err := sqlgraph.CreateNode(ctx, srcac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	srcac.mutation.id = &_node.ID
	srcac.mutation.done = true
	return _node, nil
}

func (srcac *SystemRelationshipControlActionCreate) createSpec() (*SystemRelationshipControlAction, *sqlgraph.CreateSpec) {
	var (
		_node = &SystemRelationshipControlAction{config: srcac.config}
		_spec = sqlgraph.NewCreateSpec(systemrelationshipcontrolaction.Table, sqlgraph.NewFieldSpec(systemrelationshipcontrolaction.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = srcac.conflict
	if id, ok := srcac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := srcac.mutation.GetType(); ok {
		_spec.SetField(systemrelationshipcontrolaction.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := srcac.mutation.Description(); ok {
		_spec.SetField(systemrelationshipcontrolaction.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := srcac.mutation.CreatedAt(); ok {
		_spec.SetField(systemrelationshipcontrolaction.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := srcac.mutation.RelationshipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemrelationshipcontrolaction.RelationshipTable,
			Columns: []string{systemrelationshipcontrolaction.RelationshipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemanalysisrelationship.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RelationshipID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := srcac.mutation.ControlIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemrelationshipcontrolaction.ControlTable,
			Columns: []string{systemrelationshipcontrolaction.ControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentcontrol.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ControlID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SystemRelationshipControlAction.Create().
//		SetRelationshipID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SystemRelationshipControlActionUpsert) {
//			SetRelationshipID(v+v).
//		}).
//		Exec(ctx)
func (srcac *SystemRelationshipControlActionCreate) OnConflict(opts ...sql.ConflictOption) *SystemRelationshipControlActionUpsertOne {
	srcac.conflict = opts
	return &SystemRelationshipControlActionUpsertOne{
		create: srcac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SystemRelationshipControlAction.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (srcac *SystemRelationshipControlActionCreate) OnConflictColumns(columns ...string) *SystemRelationshipControlActionUpsertOne {
	srcac.conflict = append(srcac.conflict, sql.ConflictColumns(columns...))
	return &SystemRelationshipControlActionUpsertOne{
		create: srcac,
	}
}

type (
	// SystemRelationshipControlActionUpsertOne is the builder for "upsert"-ing
	//  one SystemRelationshipControlAction node.
	SystemRelationshipControlActionUpsertOne struct {
		create *SystemRelationshipControlActionCreate
	}

	// SystemRelationshipControlActionUpsert is the "OnConflict" setter.
	SystemRelationshipControlActionUpsert struct {
		*sql.UpdateSet
	}
)

// SetRelationshipID sets the "relationship_id" field.
func (u *SystemRelationshipControlActionUpsert) SetRelationshipID(v uuid.UUID) *SystemRelationshipControlActionUpsert {
	u.Set(systemrelationshipcontrolaction.FieldRelationshipID, v)
	return u
}

// UpdateRelationshipID sets the "relationship_id" field to the value that was provided on create.
func (u *SystemRelationshipControlActionUpsert) UpdateRelationshipID() *SystemRelationshipControlActionUpsert {
	u.SetExcluded(systemrelationshipcontrolaction.FieldRelationshipID)
	return u
}

// SetControlID sets the "control_id" field.
func (u *SystemRelationshipControlActionUpsert) SetControlID(v uuid.UUID) *SystemRelationshipControlActionUpsert {
	u.Set(systemrelationshipcontrolaction.FieldControlID, v)
	return u
}

// UpdateControlID sets the "control_id" field to the value that was provided on create.
func (u *SystemRelationshipControlActionUpsert) UpdateControlID() *SystemRelationshipControlActionUpsert {
	u.SetExcluded(systemrelationshipcontrolaction.FieldControlID)
	return u
}

// SetType sets the "type" field.
func (u *SystemRelationshipControlActionUpsert) SetType(v string) *SystemRelationshipControlActionUpsert {
	u.Set(systemrelationshipcontrolaction.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *SystemRelationshipControlActionUpsert) UpdateType() *SystemRelationshipControlActionUpsert {
	u.SetExcluded(systemrelationshipcontrolaction.FieldType)
	return u
}

// SetDescription sets the "description" field.
func (u *SystemRelationshipControlActionUpsert) SetDescription(v string) *SystemRelationshipControlActionUpsert {
	u.Set(systemrelationshipcontrolaction.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SystemRelationshipControlActionUpsert) UpdateDescription() *SystemRelationshipControlActionUpsert {
	u.SetExcluded(systemrelationshipcontrolaction.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *SystemRelationshipControlActionUpsert) ClearDescription() *SystemRelationshipControlActionUpsert {
	u.SetNull(systemrelationshipcontrolaction.FieldDescription)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SystemRelationshipControlActionUpsert) SetCreatedAt(v time.Time) *SystemRelationshipControlActionUpsert {
	u.Set(systemrelationshipcontrolaction.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SystemRelationshipControlActionUpsert) UpdateCreatedAt() *SystemRelationshipControlActionUpsert {
	u.SetExcluded(systemrelationshipcontrolaction.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SystemRelationshipControlAction.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(systemrelationshipcontrolaction.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SystemRelationshipControlActionUpsertOne) UpdateNewValues() *SystemRelationshipControlActionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(systemrelationshipcontrolaction.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SystemRelationshipControlAction.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SystemRelationshipControlActionUpsertOne) Ignore() *SystemRelationshipControlActionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SystemRelationshipControlActionUpsertOne) DoNothing() *SystemRelationshipControlActionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SystemRelationshipControlActionCreate.OnConflict
// documentation for more info.
func (u *SystemRelationshipControlActionUpsertOne) Update(set func(*SystemRelationshipControlActionUpsert)) *SystemRelationshipControlActionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SystemRelationshipControlActionUpsert{UpdateSet: update})
	}))
	return u
}

// SetRelationshipID sets the "relationship_id" field.
func (u *SystemRelationshipControlActionUpsertOne) SetRelationshipID(v uuid.UUID) *SystemRelationshipControlActionUpsertOne {
	return u.Update(func(s *SystemRelationshipControlActionUpsert) {
		s.SetRelationshipID(v)
	})
}

// UpdateRelationshipID sets the "relationship_id" field to the value that was provided on create.
func (u *SystemRelationshipControlActionUpsertOne) UpdateRelationshipID() *SystemRelationshipControlActionUpsertOne {
	return u.Update(func(s *SystemRelationshipControlActionUpsert) {
		s.UpdateRelationshipID()
	})
}

// SetControlID sets the "control_id" field.
func (u *SystemRelationshipControlActionUpsertOne) SetControlID(v uuid.UUID) *SystemRelationshipControlActionUpsertOne {
	return u.Update(func(s *SystemRelationshipControlActionUpsert) {
		s.SetControlID(v)
	})
}

// UpdateControlID sets the "control_id" field to the value that was provided on create.
func (u *SystemRelationshipControlActionUpsertOne) UpdateControlID() *SystemRelationshipControlActionUpsertOne {
	return u.Update(func(s *SystemRelationshipControlActionUpsert) {
		s.UpdateControlID()
	})
}

// SetType sets the "type" field.
func (u *SystemRelationshipControlActionUpsertOne) SetType(v string) *SystemRelationshipControlActionUpsertOne {
	return u.Update(func(s *SystemRelationshipControlActionUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *SystemRelationshipControlActionUpsertOne) UpdateType() *SystemRelationshipControlActionUpsertOne {
	return u.Update(func(s *SystemRelationshipControlActionUpsert) {
		s.UpdateType()
	})
}

// SetDescription sets the "description" field.
func (u *SystemRelationshipControlActionUpsertOne) SetDescription(v string) *SystemRelationshipControlActionUpsertOne {
	return u.Update(func(s *SystemRelationshipControlActionUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SystemRelationshipControlActionUpsertOne) UpdateDescription() *SystemRelationshipControlActionUpsertOne {
	return u.Update(func(s *SystemRelationshipControlActionUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *SystemRelationshipControlActionUpsertOne) ClearDescription() *SystemRelationshipControlActionUpsertOne {
	return u.Update(func(s *SystemRelationshipControlActionUpsert) {
		s.ClearDescription()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SystemRelationshipControlActionUpsertOne) SetCreatedAt(v time.Time) *SystemRelationshipControlActionUpsertOne {
	return u.Update(func(s *SystemRelationshipControlActionUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SystemRelationshipControlActionUpsertOne) UpdateCreatedAt() *SystemRelationshipControlActionUpsertOne {
	return u.Update(func(s *SystemRelationshipControlActionUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *SystemRelationshipControlActionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SystemRelationshipControlActionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SystemRelationshipControlActionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SystemRelationshipControlActionUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: SystemRelationshipControlActionUpsertOne.ID is not supported by MySQL driver. Use SystemRelationshipControlActionUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SystemRelationshipControlActionUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SystemRelationshipControlActionCreateBulk is the builder for creating many SystemRelationshipControlAction entities in bulk.
type SystemRelationshipControlActionCreateBulk struct {
	config
	err      error
	builders []*SystemRelationshipControlActionCreate
	conflict []sql.ConflictOption
}

// Save creates the SystemRelationshipControlAction entities in the database.
func (srcacb *SystemRelationshipControlActionCreateBulk) Save(ctx context.Context) ([]*SystemRelationshipControlAction, error) {
	if srcacb.err != nil {
		return nil, srcacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(srcacb.builders))
	nodes := make([]*SystemRelationshipControlAction, len(srcacb.builders))
	mutators := make([]Mutator, len(srcacb.builders))
	for i := range srcacb.builders {
		func(i int, root context.Context) {
			builder := srcacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SystemRelationshipControlActionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, srcacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = srcacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, srcacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, srcacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (srcacb *SystemRelationshipControlActionCreateBulk) SaveX(ctx context.Context) []*SystemRelationshipControlAction {
	v, err := srcacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (srcacb *SystemRelationshipControlActionCreateBulk) Exec(ctx context.Context) error {
	_, err := srcacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (srcacb *SystemRelationshipControlActionCreateBulk) ExecX(ctx context.Context) {
	if err := srcacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SystemRelationshipControlAction.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SystemRelationshipControlActionUpsert) {
//			SetRelationshipID(v+v).
//		}).
//		Exec(ctx)
func (srcacb *SystemRelationshipControlActionCreateBulk) OnConflict(opts ...sql.ConflictOption) *SystemRelationshipControlActionUpsertBulk {
	srcacb.conflict = opts
	return &SystemRelationshipControlActionUpsertBulk{
		create: srcacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SystemRelationshipControlAction.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (srcacb *SystemRelationshipControlActionCreateBulk) OnConflictColumns(columns ...string) *SystemRelationshipControlActionUpsertBulk {
	srcacb.conflict = append(srcacb.conflict, sql.ConflictColumns(columns...))
	return &SystemRelationshipControlActionUpsertBulk{
		create: srcacb,
	}
}

// SystemRelationshipControlActionUpsertBulk is the builder for "upsert"-ing
// a bulk of SystemRelationshipControlAction nodes.
type SystemRelationshipControlActionUpsertBulk struct {
	create *SystemRelationshipControlActionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SystemRelationshipControlAction.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(systemrelationshipcontrolaction.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SystemRelationshipControlActionUpsertBulk) UpdateNewValues() *SystemRelationshipControlActionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(systemrelationshipcontrolaction.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SystemRelationshipControlAction.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SystemRelationshipControlActionUpsertBulk) Ignore() *SystemRelationshipControlActionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SystemRelationshipControlActionUpsertBulk) DoNothing() *SystemRelationshipControlActionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SystemRelationshipControlActionCreateBulk.OnConflict
// documentation for more info.
func (u *SystemRelationshipControlActionUpsertBulk) Update(set func(*SystemRelationshipControlActionUpsert)) *SystemRelationshipControlActionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SystemRelationshipControlActionUpsert{UpdateSet: update})
	}))
	return u
}

// SetRelationshipID sets the "relationship_id" field.
func (u *SystemRelationshipControlActionUpsertBulk) SetRelationshipID(v uuid.UUID) *SystemRelationshipControlActionUpsertBulk {
	return u.Update(func(s *SystemRelationshipControlActionUpsert) {
		s.SetRelationshipID(v)
	})
}

// UpdateRelationshipID sets the "relationship_id" field to the value that was provided on create.
func (u *SystemRelationshipControlActionUpsertBulk) UpdateRelationshipID() *SystemRelationshipControlActionUpsertBulk {
	return u.Update(func(s *SystemRelationshipControlActionUpsert) {
		s.UpdateRelationshipID()
	})
}

// SetControlID sets the "control_id" field.
func (u *SystemRelationshipControlActionUpsertBulk) SetControlID(v uuid.UUID) *SystemRelationshipControlActionUpsertBulk {
	return u.Update(func(s *SystemRelationshipControlActionUpsert) {
		s.SetControlID(v)
	})
}

// UpdateControlID sets the "control_id" field to the value that was provided on create.
func (u *SystemRelationshipControlActionUpsertBulk) UpdateControlID() *SystemRelationshipControlActionUpsertBulk {
	return u.Update(func(s *SystemRelationshipControlActionUpsert) {
		s.UpdateControlID()
	})
}

// SetType sets the "type" field.
func (u *SystemRelationshipControlActionUpsertBulk) SetType(v string) *SystemRelationshipControlActionUpsertBulk {
	return u.Update(func(s *SystemRelationshipControlActionUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *SystemRelationshipControlActionUpsertBulk) UpdateType() *SystemRelationshipControlActionUpsertBulk {
	return u.Update(func(s *SystemRelationshipControlActionUpsert) {
		s.UpdateType()
	})
}

// SetDescription sets the "description" field.
func (u *SystemRelationshipControlActionUpsertBulk) SetDescription(v string) *SystemRelationshipControlActionUpsertBulk {
	return u.Update(func(s *SystemRelationshipControlActionUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SystemRelationshipControlActionUpsertBulk) UpdateDescription() *SystemRelationshipControlActionUpsertBulk {
	return u.Update(func(s *SystemRelationshipControlActionUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *SystemRelationshipControlActionUpsertBulk) ClearDescription() *SystemRelationshipControlActionUpsertBulk {
	return u.Update(func(s *SystemRelationshipControlActionUpsert) {
		s.ClearDescription()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SystemRelationshipControlActionUpsertBulk) SetCreatedAt(v time.Time) *SystemRelationshipControlActionUpsertBulk {
	return u.Update(func(s *SystemRelationshipControlActionUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SystemRelationshipControlActionUpsertBulk) UpdateCreatedAt() *SystemRelationshipControlActionUpsertBulk {
	return u.Update(func(s *SystemRelationshipControlActionUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *SystemRelationshipControlActionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SystemRelationshipControlActionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SystemRelationshipControlActionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SystemRelationshipControlActionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
