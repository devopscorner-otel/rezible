// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/incidentdebriefquestion"
	"github.com/rezible/rezible/ent/incidentfield"
	"github.com/rezible/rezible/ent/incidentfieldoption"
)

// IncidentFieldCreate is the builder for creating a IncidentField entity.
type IncidentFieldCreate struct {
	config
	mutation *IncidentFieldMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetArchiveTime sets the "archive_time" field.
func (ifc *IncidentFieldCreate) SetArchiveTime(t time.Time) *IncidentFieldCreate {
	ifc.mutation.SetArchiveTime(t)
	return ifc
}

// SetNillableArchiveTime sets the "archive_time" field if the given value is not nil.
func (ifc *IncidentFieldCreate) SetNillableArchiveTime(t *time.Time) *IncidentFieldCreate {
	if t != nil {
		ifc.SetArchiveTime(*t)
	}
	return ifc
}

// SetName sets the "name" field.
func (ifc *IncidentFieldCreate) SetName(s string) *IncidentFieldCreate {
	ifc.mutation.SetName(s)
	return ifc
}

// SetID sets the "id" field.
func (ifc *IncidentFieldCreate) SetID(u uuid.UUID) *IncidentFieldCreate {
	ifc.mutation.SetID(u)
	return ifc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ifc *IncidentFieldCreate) SetNillableID(u *uuid.UUID) *IncidentFieldCreate {
	if u != nil {
		ifc.SetID(*u)
	}
	return ifc
}

// AddOptionIDs adds the "options" edge to the IncidentFieldOption entity by IDs.
func (ifc *IncidentFieldCreate) AddOptionIDs(ids ...uuid.UUID) *IncidentFieldCreate {
	ifc.mutation.AddOptionIDs(ids...)
	return ifc
}

// AddOptions adds the "options" edges to the IncidentFieldOption entity.
func (ifc *IncidentFieldCreate) AddOptions(i ...*IncidentFieldOption) *IncidentFieldCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ifc.AddOptionIDs(ids...)
}

// AddDebriefQuestionIDs adds the "debrief_questions" edge to the IncidentDebriefQuestion entity by IDs.
func (ifc *IncidentFieldCreate) AddDebriefQuestionIDs(ids ...uuid.UUID) *IncidentFieldCreate {
	ifc.mutation.AddDebriefQuestionIDs(ids...)
	return ifc
}

// AddDebriefQuestions adds the "debrief_questions" edges to the IncidentDebriefQuestion entity.
func (ifc *IncidentFieldCreate) AddDebriefQuestions(i ...*IncidentDebriefQuestion) *IncidentFieldCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ifc.AddDebriefQuestionIDs(ids...)
}

// Mutation returns the IncidentFieldMutation object of the builder.
func (ifc *IncidentFieldCreate) Mutation() *IncidentFieldMutation {
	return ifc.mutation
}

// Save creates the IncidentField in the database.
func (ifc *IncidentFieldCreate) Save(ctx context.Context) (*IncidentField, error) {
	if err := ifc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ifc.sqlSave, ifc.mutation, ifc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ifc *IncidentFieldCreate) SaveX(ctx context.Context) *IncidentField {
	v, err := ifc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ifc *IncidentFieldCreate) Exec(ctx context.Context) error {
	_, err := ifc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ifc *IncidentFieldCreate) ExecX(ctx context.Context) {
	if err := ifc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ifc *IncidentFieldCreate) defaults() error {
	if _, ok := ifc.mutation.ID(); !ok {
		if incidentfield.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized incidentfield.DefaultID (forgotten import ent/runtime?)")
		}
		v := incidentfield.DefaultID()
		ifc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ifc *IncidentFieldCreate) check() error {
	if _, ok := ifc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "IncidentField.name"`)}
	}
	return nil
}

func (ifc *IncidentFieldCreate) sqlSave(ctx context.Context) (*IncidentField, error) {
	if err := ifc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ifc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ifc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ifc.mutation.id = &_node.ID
	ifc.mutation.done = true
	return _node, nil
}

func (ifc *IncidentFieldCreate) createSpec() (*IncidentField, *sqlgraph.CreateSpec) {
	var (
		_node = &IncidentField{config: ifc.config}
		_spec = sqlgraph.NewCreateSpec(incidentfield.Table, sqlgraph.NewFieldSpec(incidentfield.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = ifc.conflict
	if id, ok := ifc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ifc.mutation.ArchiveTime(); ok {
		_spec.SetField(incidentfield.FieldArchiveTime, field.TypeTime, value)
		_node.ArchiveTime = value
	}
	if value, ok := ifc.mutation.Name(); ok {
		_spec.SetField(incidentfield.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := ifc.mutation.OptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incidentfield.OptionsTable,
			Columns: []string{incidentfield.OptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentfieldoption.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ifc.mutation.DebriefQuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   incidentfield.DebriefQuestionsTable,
			Columns: incidentfield.DebriefQuestionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentdebriefquestion.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IncidentField.Create().
//		SetArchiveTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IncidentFieldUpsert) {
//			SetArchiveTime(v+v).
//		}).
//		Exec(ctx)
func (ifc *IncidentFieldCreate) OnConflict(opts ...sql.ConflictOption) *IncidentFieldUpsertOne {
	ifc.conflict = opts
	return &IncidentFieldUpsertOne{
		create: ifc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IncidentField.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ifc *IncidentFieldCreate) OnConflictColumns(columns ...string) *IncidentFieldUpsertOne {
	ifc.conflict = append(ifc.conflict, sql.ConflictColumns(columns...))
	return &IncidentFieldUpsertOne{
		create: ifc,
	}
}

type (
	// IncidentFieldUpsertOne is the builder for "upsert"-ing
	//  one IncidentField node.
	IncidentFieldUpsertOne struct {
		create *IncidentFieldCreate
	}

	// IncidentFieldUpsert is the "OnConflict" setter.
	IncidentFieldUpsert struct {
		*sql.UpdateSet
	}
)

// SetArchiveTime sets the "archive_time" field.
func (u *IncidentFieldUpsert) SetArchiveTime(v time.Time) *IncidentFieldUpsert {
	u.Set(incidentfield.FieldArchiveTime, v)
	return u
}

// UpdateArchiveTime sets the "archive_time" field to the value that was provided on create.
func (u *IncidentFieldUpsert) UpdateArchiveTime() *IncidentFieldUpsert {
	u.SetExcluded(incidentfield.FieldArchiveTime)
	return u
}

// ClearArchiveTime clears the value of the "archive_time" field.
func (u *IncidentFieldUpsert) ClearArchiveTime() *IncidentFieldUpsert {
	u.SetNull(incidentfield.FieldArchiveTime)
	return u
}

// SetName sets the "name" field.
func (u *IncidentFieldUpsert) SetName(v string) *IncidentFieldUpsert {
	u.Set(incidentfield.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *IncidentFieldUpsert) UpdateName() *IncidentFieldUpsert {
	u.SetExcluded(incidentfield.FieldName)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.IncidentField.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(incidentfield.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IncidentFieldUpsertOne) UpdateNewValues() *IncidentFieldUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(incidentfield.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IncidentField.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *IncidentFieldUpsertOne) Ignore() *IncidentFieldUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IncidentFieldUpsertOne) DoNothing() *IncidentFieldUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IncidentFieldCreate.OnConflict
// documentation for more info.
func (u *IncidentFieldUpsertOne) Update(set func(*IncidentFieldUpsert)) *IncidentFieldUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IncidentFieldUpsert{UpdateSet: update})
	}))
	return u
}

// SetArchiveTime sets the "archive_time" field.
func (u *IncidentFieldUpsertOne) SetArchiveTime(v time.Time) *IncidentFieldUpsertOne {
	return u.Update(func(s *IncidentFieldUpsert) {
		s.SetArchiveTime(v)
	})
}

// UpdateArchiveTime sets the "archive_time" field to the value that was provided on create.
func (u *IncidentFieldUpsertOne) UpdateArchiveTime() *IncidentFieldUpsertOne {
	return u.Update(func(s *IncidentFieldUpsert) {
		s.UpdateArchiveTime()
	})
}

// ClearArchiveTime clears the value of the "archive_time" field.
func (u *IncidentFieldUpsertOne) ClearArchiveTime() *IncidentFieldUpsertOne {
	return u.Update(func(s *IncidentFieldUpsert) {
		s.ClearArchiveTime()
	})
}

// SetName sets the "name" field.
func (u *IncidentFieldUpsertOne) SetName(v string) *IncidentFieldUpsertOne {
	return u.Update(func(s *IncidentFieldUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *IncidentFieldUpsertOne) UpdateName() *IncidentFieldUpsertOne {
	return u.Update(func(s *IncidentFieldUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *IncidentFieldUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IncidentFieldCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IncidentFieldUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *IncidentFieldUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: IncidentFieldUpsertOne.ID is not supported by MySQL driver. Use IncidentFieldUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *IncidentFieldUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// IncidentFieldCreateBulk is the builder for creating many IncidentField entities in bulk.
type IncidentFieldCreateBulk struct {
	config
	err      error
	builders []*IncidentFieldCreate
	conflict []sql.ConflictOption
}

// Save creates the IncidentField entities in the database.
func (ifcb *IncidentFieldCreateBulk) Save(ctx context.Context) ([]*IncidentField, error) {
	if ifcb.err != nil {
		return nil, ifcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ifcb.builders))
	nodes := make([]*IncidentField, len(ifcb.builders))
	mutators := make([]Mutator, len(ifcb.builders))
	for i := range ifcb.builders {
		func(i int, root context.Context) {
			builder := ifcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IncidentFieldMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ifcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ifcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ifcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ifcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ifcb *IncidentFieldCreateBulk) SaveX(ctx context.Context) []*IncidentField {
	v, err := ifcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ifcb *IncidentFieldCreateBulk) Exec(ctx context.Context) error {
	_, err := ifcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ifcb *IncidentFieldCreateBulk) ExecX(ctx context.Context) {
	if err := ifcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IncidentField.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IncidentFieldUpsert) {
//			SetArchiveTime(v+v).
//		}).
//		Exec(ctx)
func (ifcb *IncidentFieldCreateBulk) OnConflict(opts ...sql.ConflictOption) *IncidentFieldUpsertBulk {
	ifcb.conflict = opts
	return &IncidentFieldUpsertBulk{
		create: ifcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IncidentField.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ifcb *IncidentFieldCreateBulk) OnConflictColumns(columns ...string) *IncidentFieldUpsertBulk {
	ifcb.conflict = append(ifcb.conflict, sql.ConflictColumns(columns...))
	return &IncidentFieldUpsertBulk{
		create: ifcb,
	}
}

// IncidentFieldUpsertBulk is the builder for "upsert"-ing
// a bulk of IncidentField nodes.
type IncidentFieldUpsertBulk struct {
	create *IncidentFieldCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.IncidentField.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(incidentfield.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IncidentFieldUpsertBulk) UpdateNewValues() *IncidentFieldUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(incidentfield.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IncidentField.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *IncidentFieldUpsertBulk) Ignore() *IncidentFieldUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IncidentFieldUpsertBulk) DoNothing() *IncidentFieldUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IncidentFieldCreateBulk.OnConflict
// documentation for more info.
func (u *IncidentFieldUpsertBulk) Update(set func(*IncidentFieldUpsert)) *IncidentFieldUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IncidentFieldUpsert{UpdateSet: update})
	}))
	return u
}

// SetArchiveTime sets the "archive_time" field.
func (u *IncidentFieldUpsertBulk) SetArchiveTime(v time.Time) *IncidentFieldUpsertBulk {
	return u.Update(func(s *IncidentFieldUpsert) {
		s.SetArchiveTime(v)
	})
}

// UpdateArchiveTime sets the "archive_time" field to the value that was provided on create.
func (u *IncidentFieldUpsertBulk) UpdateArchiveTime() *IncidentFieldUpsertBulk {
	return u.Update(func(s *IncidentFieldUpsert) {
		s.UpdateArchiveTime()
	})
}

// ClearArchiveTime clears the value of the "archive_time" field.
func (u *IncidentFieldUpsertBulk) ClearArchiveTime() *IncidentFieldUpsertBulk {
	return u.Update(func(s *IncidentFieldUpsert) {
		s.ClearArchiveTime()
	})
}

// SetName sets the "name" field.
func (u *IncidentFieldUpsertBulk) SetName(v string) *IncidentFieldUpsertBulk {
	return u.Update(func(s *IncidentFieldUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *IncidentFieldUpsertBulk) UpdateName() *IncidentFieldUpsertBulk {
	return u.Update(func(s *IncidentFieldUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *IncidentFieldUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the IncidentFieldCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IncidentFieldCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IncidentFieldUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
