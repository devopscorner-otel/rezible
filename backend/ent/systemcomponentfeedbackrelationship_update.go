// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/systemcomponent"
	"github.com/rezible/rezible/ent/systemcomponentfeedbackrelationship"
)

// SystemComponentFeedbackRelationshipUpdate is the builder for updating SystemComponentFeedbackRelationship entities.
type SystemComponentFeedbackRelationshipUpdate struct {
	config
	hooks     []Hook
	mutation  *SystemComponentFeedbackRelationshipMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SystemComponentFeedbackRelationshipUpdate builder.
func (scfru *SystemComponentFeedbackRelationshipUpdate) Where(ps ...predicate.SystemComponentFeedbackRelationship) *SystemComponentFeedbackRelationshipUpdate {
	scfru.mutation.Where(ps...)
	return scfru
}

// SetSourceID sets the "source_id" field.
func (scfru *SystemComponentFeedbackRelationshipUpdate) SetSourceID(u uuid.UUID) *SystemComponentFeedbackRelationshipUpdate {
	scfru.mutation.SetSourceID(u)
	return scfru
}

// SetNillableSourceID sets the "source_id" field if the given value is not nil.
func (scfru *SystemComponentFeedbackRelationshipUpdate) SetNillableSourceID(u *uuid.UUID) *SystemComponentFeedbackRelationshipUpdate {
	if u != nil {
		scfru.SetSourceID(*u)
	}
	return scfru
}

// SetTargetID sets the "target_id" field.
func (scfru *SystemComponentFeedbackRelationshipUpdate) SetTargetID(u uuid.UUID) *SystemComponentFeedbackRelationshipUpdate {
	scfru.mutation.SetTargetID(u)
	return scfru
}

// SetNillableTargetID sets the "target_id" field if the given value is not nil.
func (scfru *SystemComponentFeedbackRelationshipUpdate) SetNillableTargetID(u *uuid.UUID) *SystemComponentFeedbackRelationshipUpdate {
	if u != nil {
		scfru.SetTargetID(*u)
	}
	return scfru
}

// SetType sets the "type" field.
func (scfru *SystemComponentFeedbackRelationshipUpdate) SetType(s string) *SystemComponentFeedbackRelationshipUpdate {
	scfru.mutation.SetType(s)
	return scfru
}

// SetNillableType sets the "type" field if the given value is not nil.
func (scfru *SystemComponentFeedbackRelationshipUpdate) SetNillableType(s *string) *SystemComponentFeedbackRelationshipUpdate {
	if s != nil {
		scfru.SetType(*s)
	}
	return scfru
}

// SetDescription sets the "description" field.
func (scfru *SystemComponentFeedbackRelationshipUpdate) SetDescription(s string) *SystemComponentFeedbackRelationshipUpdate {
	scfru.mutation.SetDescription(s)
	return scfru
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (scfru *SystemComponentFeedbackRelationshipUpdate) SetNillableDescription(s *string) *SystemComponentFeedbackRelationshipUpdate {
	if s != nil {
		scfru.SetDescription(*s)
	}
	return scfru
}

// ClearDescription clears the value of the "description" field.
func (scfru *SystemComponentFeedbackRelationshipUpdate) ClearDescription() *SystemComponentFeedbackRelationshipUpdate {
	scfru.mutation.ClearDescription()
	return scfru
}

// SetCreatedAt sets the "created_at" field.
func (scfru *SystemComponentFeedbackRelationshipUpdate) SetCreatedAt(t time.Time) *SystemComponentFeedbackRelationshipUpdate {
	scfru.mutation.SetCreatedAt(t)
	return scfru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (scfru *SystemComponentFeedbackRelationshipUpdate) SetNillableCreatedAt(t *time.Time) *SystemComponentFeedbackRelationshipUpdate {
	if t != nil {
		scfru.SetCreatedAt(*t)
	}
	return scfru
}

// SetSource sets the "source" edge to the SystemComponent entity.
func (scfru *SystemComponentFeedbackRelationshipUpdate) SetSource(s *SystemComponent) *SystemComponentFeedbackRelationshipUpdate {
	return scfru.SetSourceID(s.ID)
}

// SetTarget sets the "target" edge to the SystemComponent entity.
func (scfru *SystemComponentFeedbackRelationshipUpdate) SetTarget(s *SystemComponent) *SystemComponentFeedbackRelationshipUpdate {
	return scfru.SetTargetID(s.ID)
}

// Mutation returns the SystemComponentFeedbackRelationshipMutation object of the builder.
func (scfru *SystemComponentFeedbackRelationshipUpdate) Mutation() *SystemComponentFeedbackRelationshipMutation {
	return scfru.mutation
}

// ClearSource clears the "source" edge to the SystemComponent entity.
func (scfru *SystemComponentFeedbackRelationshipUpdate) ClearSource() *SystemComponentFeedbackRelationshipUpdate {
	scfru.mutation.ClearSource()
	return scfru
}

// ClearTarget clears the "target" edge to the SystemComponent entity.
func (scfru *SystemComponentFeedbackRelationshipUpdate) ClearTarget() *SystemComponentFeedbackRelationshipUpdate {
	scfru.mutation.ClearTarget()
	return scfru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (scfru *SystemComponentFeedbackRelationshipUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, scfru.sqlSave, scfru.mutation, scfru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scfru *SystemComponentFeedbackRelationshipUpdate) SaveX(ctx context.Context) int {
	affected, err := scfru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (scfru *SystemComponentFeedbackRelationshipUpdate) Exec(ctx context.Context) error {
	_, err := scfru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scfru *SystemComponentFeedbackRelationshipUpdate) ExecX(ctx context.Context) {
	if err := scfru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scfru *SystemComponentFeedbackRelationshipUpdate) check() error {
	if v, ok := scfru.mutation.GetType(); ok {
		if err := systemcomponentfeedbackrelationship.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "SystemComponentFeedbackRelationship.type": %w`, err)}
		}
	}
	if scfru.mutation.SourceCleared() && len(scfru.mutation.SourceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SystemComponentFeedbackRelationship.source"`)
	}
	if scfru.mutation.TargetCleared() && len(scfru.mutation.TargetIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SystemComponentFeedbackRelationship.target"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (scfru *SystemComponentFeedbackRelationshipUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SystemComponentFeedbackRelationshipUpdate {
	scfru.modifiers = append(scfru.modifiers, modifiers...)
	return scfru
}

func (scfru *SystemComponentFeedbackRelationshipUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := scfru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(systemcomponentfeedbackrelationship.Table, systemcomponentfeedbackrelationship.Columns, sqlgraph.NewFieldSpec(systemcomponentfeedbackrelationship.FieldID, field.TypeUUID))
	if ps := scfru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scfru.mutation.GetType(); ok {
		_spec.SetField(systemcomponentfeedbackrelationship.FieldType, field.TypeString, value)
	}
	if value, ok := scfru.mutation.Description(); ok {
		_spec.SetField(systemcomponentfeedbackrelationship.FieldDescription, field.TypeString, value)
	}
	if scfru.mutation.DescriptionCleared() {
		_spec.ClearField(systemcomponentfeedbackrelationship.FieldDescription, field.TypeString)
	}
	if value, ok := scfru.mutation.CreatedAt(); ok {
		_spec.SetField(systemcomponentfeedbackrelationship.FieldCreatedAt, field.TypeTime, value)
	}
	if scfru.mutation.SourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemcomponentfeedbackrelationship.SourceTable,
			Columns: []string{systemcomponentfeedbackrelationship.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scfru.mutation.SourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemcomponentfeedbackrelationship.SourceTable,
			Columns: []string{systemcomponentfeedbackrelationship.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scfru.mutation.TargetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemcomponentfeedbackrelationship.TargetTable,
			Columns: []string{systemcomponentfeedbackrelationship.TargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scfru.mutation.TargetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemcomponentfeedbackrelationship.TargetTable,
			Columns: []string{systemcomponentfeedbackrelationship.TargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(scfru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, scfru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systemcomponentfeedbackrelationship.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	scfru.mutation.done = true
	return n, nil
}

// SystemComponentFeedbackRelationshipUpdateOne is the builder for updating a single SystemComponentFeedbackRelationship entity.
type SystemComponentFeedbackRelationshipUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SystemComponentFeedbackRelationshipMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetSourceID sets the "source_id" field.
func (scfruo *SystemComponentFeedbackRelationshipUpdateOne) SetSourceID(u uuid.UUID) *SystemComponentFeedbackRelationshipUpdateOne {
	scfruo.mutation.SetSourceID(u)
	return scfruo
}

// SetNillableSourceID sets the "source_id" field if the given value is not nil.
func (scfruo *SystemComponentFeedbackRelationshipUpdateOne) SetNillableSourceID(u *uuid.UUID) *SystemComponentFeedbackRelationshipUpdateOne {
	if u != nil {
		scfruo.SetSourceID(*u)
	}
	return scfruo
}

// SetTargetID sets the "target_id" field.
func (scfruo *SystemComponentFeedbackRelationshipUpdateOne) SetTargetID(u uuid.UUID) *SystemComponentFeedbackRelationshipUpdateOne {
	scfruo.mutation.SetTargetID(u)
	return scfruo
}

// SetNillableTargetID sets the "target_id" field if the given value is not nil.
func (scfruo *SystemComponentFeedbackRelationshipUpdateOne) SetNillableTargetID(u *uuid.UUID) *SystemComponentFeedbackRelationshipUpdateOne {
	if u != nil {
		scfruo.SetTargetID(*u)
	}
	return scfruo
}

// SetType sets the "type" field.
func (scfruo *SystemComponentFeedbackRelationshipUpdateOne) SetType(s string) *SystemComponentFeedbackRelationshipUpdateOne {
	scfruo.mutation.SetType(s)
	return scfruo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (scfruo *SystemComponentFeedbackRelationshipUpdateOne) SetNillableType(s *string) *SystemComponentFeedbackRelationshipUpdateOne {
	if s != nil {
		scfruo.SetType(*s)
	}
	return scfruo
}

// SetDescription sets the "description" field.
func (scfruo *SystemComponentFeedbackRelationshipUpdateOne) SetDescription(s string) *SystemComponentFeedbackRelationshipUpdateOne {
	scfruo.mutation.SetDescription(s)
	return scfruo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (scfruo *SystemComponentFeedbackRelationshipUpdateOne) SetNillableDescription(s *string) *SystemComponentFeedbackRelationshipUpdateOne {
	if s != nil {
		scfruo.SetDescription(*s)
	}
	return scfruo
}

// ClearDescription clears the value of the "description" field.
func (scfruo *SystemComponentFeedbackRelationshipUpdateOne) ClearDescription() *SystemComponentFeedbackRelationshipUpdateOne {
	scfruo.mutation.ClearDescription()
	return scfruo
}

// SetCreatedAt sets the "created_at" field.
func (scfruo *SystemComponentFeedbackRelationshipUpdateOne) SetCreatedAt(t time.Time) *SystemComponentFeedbackRelationshipUpdateOne {
	scfruo.mutation.SetCreatedAt(t)
	return scfruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (scfruo *SystemComponentFeedbackRelationshipUpdateOne) SetNillableCreatedAt(t *time.Time) *SystemComponentFeedbackRelationshipUpdateOne {
	if t != nil {
		scfruo.SetCreatedAt(*t)
	}
	return scfruo
}

// SetSource sets the "source" edge to the SystemComponent entity.
func (scfruo *SystemComponentFeedbackRelationshipUpdateOne) SetSource(s *SystemComponent) *SystemComponentFeedbackRelationshipUpdateOne {
	return scfruo.SetSourceID(s.ID)
}

// SetTarget sets the "target" edge to the SystemComponent entity.
func (scfruo *SystemComponentFeedbackRelationshipUpdateOne) SetTarget(s *SystemComponent) *SystemComponentFeedbackRelationshipUpdateOne {
	return scfruo.SetTargetID(s.ID)
}

// Mutation returns the SystemComponentFeedbackRelationshipMutation object of the builder.
func (scfruo *SystemComponentFeedbackRelationshipUpdateOne) Mutation() *SystemComponentFeedbackRelationshipMutation {
	return scfruo.mutation
}

// ClearSource clears the "source" edge to the SystemComponent entity.
func (scfruo *SystemComponentFeedbackRelationshipUpdateOne) ClearSource() *SystemComponentFeedbackRelationshipUpdateOne {
	scfruo.mutation.ClearSource()
	return scfruo
}

// ClearTarget clears the "target" edge to the SystemComponent entity.
func (scfruo *SystemComponentFeedbackRelationshipUpdateOne) ClearTarget() *SystemComponentFeedbackRelationshipUpdateOne {
	scfruo.mutation.ClearTarget()
	return scfruo
}

// Where appends a list predicates to the SystemComponentFeedbackRelationshipUpdate builder.
func (scfruo *SystemComponentFeedbackRelationshipUpdateOne) Where(ps ...predicate.SystemComponentFeedbackRelationship) *SystemComponentFeedbackRelationshipUpdateOne {
	scfruo.mutation.Where(ps...)
	return scfruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (scfruo *SystemComponentFeedbackRelationshipUpdateOne) Select(field string, fields ...string) *SystemComponentFeedbackRelationshipUpdateOne {
	scfruo.fields = append([]string{field}, fields...)
	return scfruo
}

// Save executes the query and returns the updated SystemComponentFeedbackRelationship entity.
func (scfruo *SystemComponentFeedbackRelationshipUpdateOne) Save(ctx context.Context) (*SystemComponentFeedbackRelationship, error) {
	return withHooks(ctx, scfruo.sqlSave, scfruo.mutation, scfruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scfruo *SystemComponentFeedbackRelationshipUpdateOne) SaveX(ctx context.Context) *SystemComponentFeedbackRelationship {
	node, err := scfruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (scfruo *SystemComponentFeedbackRelationshipUpdateOne) Exec(ctx context.Context) error {
	_, err := scfruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scfruo *SystemComponentFeedbackRelationshipUpdateOne) ExecX(ctx context.Context) {
	if err := scfruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scfruo *SystemComponentFeedbackRelationshipUpdateOne) check() error {
	if v, ok := scfruo.mutation.GetType(); ok {
		if err := systemcomponentfeedbackrelationship.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "SystemComponentFeedbackRelationship.type": %w`, err)}
		}
	}
	if scfruo.mutation.SourceCleared() && len(scfruo.mutation.SourceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SystemComponentFeedbackRelationship.source"`)
	}
	if scfruo.mutation.TargetCleared() && len(scfruo.mutation.TargetIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SystemComponentFeedbackRelationship.target"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (scfruo *SystemComponentFeedbackRelationshipUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SystemComponentFeedbackRelationshipUpdateOne {
	scfruo.modifiers = append(scfruo.modifiers, modifiers...)
	return scfruo
}

func (scfruo *SystemComponentFeedbackRelationshipUpdateOne) sqlSave(ctx context.Context) (_node *SystemComponentFeedbackRelationship, err error) {
	if err := scfruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(systemcomponentfeedbackrelationship.Table, systemcomponentfeedbackrelationship.Columns, sqlgraph.NewFieldSpec(systemcomponentfeedbackrelationship.FieldID, field.TypeUUID))
	id, ok := scfruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SystemComponentFeedbackRelationship.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := scfruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, systemcomponentfeedbackrelationship.FieldID)
		for _, f := range fields {
			if !systemcomponentfeedbackrelationship.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != systemcomponentfeedbackrelationship.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := scfruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scfruo.mutation.GetType(); ok {
		_spec.SetField(systemcomponentfeedbackrelationship.FieldType, field.TypeString, value)
	}
	if value, ok := scfruo.mutation.Description(); ok {
		_spec.SetField(systemcomponentfeedbackrelationship.FieldDescription, field.TypeString, value)
	}
	if scfruo.mutation.DescriptionCleared() {
		_spec.ClearField(systemcomponentfeedbackrelationship.FieldDescription, field.TypeString)
	}
	if value, ok := scfruo.mutation.CreatedAt(); ok {
		_spec.SetField(systemcomponentfeedbackrelationship.FieldCreatedAt, field.TypeTime, value)
	}
	if scfruo.mutation.SourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemcomponentfeedbackrelationship.SourceTable,
			Columns: []string{systemcomponentfeedbackrelationship.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scfruo.mutation.SourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemcomponentfeedbackrelationship.SourceTable,
			Columns: []string{systemcomponentfeedbackrelationship.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scfruo.mutation.TargetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemcomponentfeedbackrelationship.TargetTable,
			Columns: []string{systemcomponentfeedbackrelationship.TargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scfruo.mutation.TargetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemcomponentfeedbackrelationship.TargetTable,
			Columns: []string{systemcomponentfeedbackrelationship.TargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(scfruo.modifiers...)
	_node = &SystemComponentFeedbackRelationship{config: scfruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, scfruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systemcomponentfeedbackrelationship.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	scfruo.mutation.done = true
	return _node, nil
}
