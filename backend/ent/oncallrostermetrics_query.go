// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/oncallroster"
	"github.com/rezible/rezible/ent/oncallrostermetrics"
	"github.com/rezible/rezible/ent/predicate"
)

// OncallRosterMetricsQuery is the builder for querying OncallRosterMetrics entities.
type OncallRosterMetricsQuery struct {
	config
	ctx        *QueryContext
	order      []oncallrostermetrics.OrderOption
	inters     []Interceptor
	predicates []predicate.OncallRosterMetrics
	withRoster *OncallRosterQuery
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OncallRosterMetricsQuery builder.
func (ormq *OncallRosterMetricsQuery) Where(ps ...predicate.OncallRosterMetrics) *OncallRosterMetricsQuery {
	ormq.predicates = append(ormq.predicates, ps...)
	return ormq
}

// Limit the number of records to be returned by this query.
func (ormq *OncallRosterMetricsQuery) Limit(limit int) *OncallRosterMetricsQuery {
	ormq.ctx.Limit = &limit
	return ormq
}

// Offset to start from.
func (ormq *OncallRosterMetricsQuery) Offset(offset int) *OncallRosterMetricsQuery {
	ormq.ctx.Offset = &offset
	return ormq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ormq *OncallRosterMetricsQuery) Unique(unique bool) *OncallRosterMetricsQuery {
	ormq.ctx.Unique = &unique
	return ormq
}

// Order specifies how the records should be ordered.
func (ormq *OncallRosterMetricsQuery) Order(o ...oncallrostermetrics.OrderOption) *OncallRosterMetricsQuery {
	ormq.order = append(ormq.order, o...)
	return ormq
}

// QueryRoster chains the current query on the "roster" edge.
func (ormq *OncallRosterMetricsQuery) QueryRoster() *OncallRosterQuery {
	query := (&OncallRosterClient{config: ormq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ormq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ormq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(oncallrostermetrics.Table, oncallrostermetrics.FieldID, selector),
			sqlgraph.To(oncallroster.Table, oncallroster.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, oncallrostermetrics.RosterTable, oncallrostermetrics.RosterColumn),
		)
		fromU = sqlgraph.SetNeighbors(ormq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first OncallRosterMetrics entity from the query.
// Returns a *NotFoundError when no OncallRosterMetrics was found.
func (ormq *OncallRosterMetricsQuery) First(ctx context.Context) (*OncallRosterMetrics, error) {
	nodes, err := ormq.Limit(1).All(setContextOp(ctx, ormq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{oncallrostermetrics.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ormq *OncallRosterMetricsQuery) FirstX(ctx context.Context) *OncallRosterMetrics {
	node, err := ormq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first OncallRosterMetrics ID from the query.
// Returns a *NotFoundError when no OncallRosterMetrics ID was found.
func (ormq *OncallRosterMetricsQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = ormq.Limit(1).IDs(setContextOp(ctx, ormq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{oncallrostermetrics.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ormq *OncallRosterMetricsQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := ormq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single OncallRosterMetrics entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one OncallRosterMetrics entity is found.
// Returns a *NotFoundError when no OncallRosterMetrics entities are found.
func (ormq *OncallRosterMetricsQuery) Only(ctx context.Context) (*OncallRosterMetrics, error) {
	nodes, err := ormq.Limit(2).All(setContextOp(ctx, ormq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{oncallrostermetrics.Label}
	default:
		return nil, &NotSingularError{oncallrostermetrics.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ormq *OncallRosterMetricsQuery) OnlyX(ctx context.Context) *OncallRosterMetrics {
	node, err := ormq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only OncallRosterMetrics ID in the query.
// Returns a *NotSingularError when more than one OncallRosterMetrics ID is found.
// Returns a *NotFoundError when no entities are found.
func (ormq *OncallRosterMetricsQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = ormq.Limit(2).IDs(setContextOp(ctx, ormq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{oncallrostermetrics.Label}
	default:
		err = &NotSingularError{oncallrostermetrics.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ormq *OncallRosterMetricsQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := ormq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OncallRosterMetricsSlice.
func (ormq *OncallRosterMetricsQuery) All(ctx context.Context) ([]*OncallRosterMetrics, error) {
	ctx = setContextOp(ctx, ormq.ctx, ent.OpQueryAll)
	if err := ormq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*OncallRosterMetrics, *OncallRosterMetricsQuery]()
	return withInterceptors[[]*OncallRosterMetrics](ctx, ormq, qr, ormq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ormq *OncallRosterMetricsQuery) AllX(ctx context.Context) []*OncallRosterMetrics {
	nodes, err := ormq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of OncallRosterMetrics IDs.
func (ormq *OncallRosterMetricsQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if ormq.ctx.Unique == nil && ormq.path != nil {
		ormq.Unique(true)
	}
	ctx = setContextOp(ctx, ormq.ctx, ent.OpQueryIDs)
	if err = ormq.Select(oncallrostermetrics.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ormq *OncallRosterMetricsQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := ormq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ormq *OncallRosterMetricsQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ormq.ctx, ent.OpQueryCount)
	if err := ormq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ormq, querierCount[*OncallRosterMetricsQuery](), ormq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ormq *OncallRosterMetricsQuery) CountX(ctx context.Context) int {
	count, err := ormq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ormq *OncallRosterMetricsQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ormq.ctx, ent.OpQueryExist)
	switch _, err := ormq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ormq *OncallRosterMetricsQuery) ExistX(ctx context.Context) bool {
	exist, err := ormq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OncallRosterMetricsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ormq *OncallRosterMetricsQuery) Clone() *OncallRosterMetricsQuery {
	if ormq == nil {
		return nil
	}
	return &OncallRosterMetricsQuery{
		config:     ormq.config,
		ctx:        ormq.ctx.Clone(),
		order:      append([]oncallrostermetrics.OrderOption{}, ormq.order...),
		inters:     append([]Interceptor{}, ormq.inters...),
		predicates: append([]predicate.OncallRosterMetrics{}, ormq.predicates...),
		withRoster: ormq.withRoster.Clone(),
		// clone intermediate query.
		sql:       ormq.sql.Clone(),
		path:      ormq.path,
		modifiers: append([]func(*sql.Selector){}, ormq.modifiers...),
	}
}

// WithRoster tells the query-builder to eager-load the nodes that are connected to
// the "roster" edge. The optional arguments are used to configure the query builder of the edge.
func (ormq *OncallRosterMetricsQuery) WithRoster(opts ...func(*OncallRosterQuery)) *OncallRosterMetricsQuery {
	query := (&OncallRosterClient{config: ormq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ormq.withRoster = query
	return ormq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		RosterID uuid.UUID `json:"roster_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OncallRosterMetrics.Query().
//		GroupBy(oncallrostermetrics.FieldRosterID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ormq *OncallRosterMetricsQuery) GroupBy(field string, fields ...string) *OncallRosterMetricsGroupBy {
	ormq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &OncallRosterMetricsGroupBy{build: ormq}
	grbuild.flds = &ormq.ctx.Fields
	grbuild.label = oncallrostermetrics.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		RosterID uuid.UUID `json:"roster_id,omitempty"`
//	}
//
//	client.OncallRosterMetrics.Query().
//		Select(oncallrostermetrics.FieldRosterID).
//		Scan(ctx, &v)
func (ormq *OncallRosterMetricsQuery) Select(fields ...string) *OncallRosterMetricsSelect {
	ormq.ctx.Fields = append(ormq.ctx.Fields, fields...)
	sbuild := &OncallRosterMetricsSelect{OncallRosterMetricsQuery: ormq}
	sbuild.label = oncallrostermetrics.Label
	sbuild.flds, sbuild.scan = &ormq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a OncallRosterMetricsSelect configured with the given aggregations.
func (ormq *OncallRosterMetricsQuery) Aggregate(fns ...AggregateFunc) *OncallRosterMetricsSelect {
	return ormq.Select().Aggregate(fns...)
}

func (ormq *OncallRosterMetricsQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ormq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ormq); err != nil {
				return err
			}
		}
	}
	for _, f := range ormq.ctx.Fields {
		if !oncallrostermetrics.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ormq.path != nil {
		prev, err := ormq.path(ctx)
		if err != nil {
			return err
		}
		ormq.sql = prev
	}
	if oncallrostermetrics.Policy == nil {
		return errors.New("ent: uninitialized oncallrostermetrics.Policy (forgotten import ent/runtime?)")
	}
	if err := oncallrostermetrics.Policy.EvalQuery(ctx, ormq); err != nil {
		return err
	}
	return nil
}

func (ormq *OncallRosterMetricsQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*OncallRosterMetrics, error) {
	var (
		nodes       = []*OncallRosterMetrics{}
		_spec       = ormq.querySpec()
		loadedTypes = [1]bool{
			ormq.withRoster != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*OncallRosterMetrics).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &OncallRosterMetrics{config: ormq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(ormq.modifiers) > 0 {
		_spec.Modifiers = ormq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ormq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ormq.withRoster; query != nil {
		if err := ormq.loadRoster(ctx, query, nodes, nil,
			func(n *OncallRosterMetrics, e *OncallRoster) { n.Edges.Roster = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ormq *OncallRosterMetricsQuery) loadRoster(ctx context.Context, query *OncallRosterQuery, nodes []*OncallRosterMetrics, init func(*OncallRosterMetrics), assign func(*OncallRosterMetrics, *OncallRoster)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*OncallRosterMetrics)
	for i := range nodes {
		fk := nodes[i].RosterID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(oncallroster.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "roster_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ormq *OncallRosterMetricsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ormq.querySpec()
	if len(ormq.modifiers) > 0 {
		_spec.Modifiers = ormq.modifiers
	}
	_spec.Node.Columns = ormq.ctx.Fields
	if len(ormq.ctx.Fields) > 0 {
		_spec.Unique = ormq.ctx.Unique != nil && *ormq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ormq.driver, _spec)
}

func (ormq *OncallRosterMetricsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(oncallrostermetrics.Table, oncallrostermetrics.Columns, sqlgraph.NewFieldSpec(oncallrostermetrics.FieldID, field.TypeUUID))
	_spec.From = ormq.sql
	if unique := ormq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ormq.path != nil {
		_spec.Unique = true
	}
	if fields := ormq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oncallrostermetrics.FieldID)
		for i := range fields {
			if fields[i] != oncallrostermetrics.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if ormq.withRoster != nil {
			_spec.Node.AddColumnOnce(oncallrostermetrics.FieldRosterID)
		}
	}
	if ps := ormq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ormq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ormq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ormq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ormq *OncallRosterMetricsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ormq.driver.Dialect())
	t1 := builder.Table(oncallrostermetrics.Table)
	columns := ormq.ctx.Fields
	if len(columns) == 0 {
		columns = oncallrostermetrics.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ormq.sql != nil {
		selector = ormq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ormq.ctx.Unique != nil && *ormq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range ormq.modifiers {
		m(selector)
	}
	for _, p := range ormq.predicates {
		p(selector)
	}
	for _, p := range ormq.order {
		p(selector)
	}
	if offset := ormq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ormq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ormq *OncallRosterMetricsQuery) Modify(modifiers ...func(s *sql.Selector)) *OncallRosterMetricsSelect {
	ormq.modifiers = append(ormq.modifiers, modifiers...)
	return ormq.Select()
}

// OncallRosterMetricsGroupBy is the group-by builder for OncallRosterMetrics entities.
type OncallRosterMetricsGroupBy struct {
	selector
	build *OncallRosterMetricsQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ormgb *OncallRosterMetricsGroupBy) Aggregate(fns ...AggregateFunc) *OncallRosterMetricsGroupBy {
	ormgb.fns = append(ormgb.fns, fns...)
	return ormgb
}

// Scan applies the selector query and scans the result into the given value.
func (ormgb *OncallRosterMetricsGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ormgb.build.ctx, ent.OpQueryGroupBy)
	if err := ormgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OncallRosterMetricsQuery, *OncallRosterMetricsGroupBy](ctx, ormgb.build, ormgb, ormgb.build.inters, v)
}

func (ormgb *OncallRosterMetricsGroupBy) sqlScan(ctx context.Context, root *OncallRosterMetricsQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ormgb.fns))
	for _, fn := range ormgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ormgb.flds)+len(ormgb.fns))
		for _, f := range *ormgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ormgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ormgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// OncallRosterMetricsSelect is the builder for selecting fields of OncallRosterMetrics entities.
type OncallRosterMetricsSelect struct {
	*OncallRosterMetricsQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (orms *OncallRosterMetricsSelect) Aggregate(fns ...AggregateFunc) *OncallRosterMetricsSelect {
	orms.fns = append(orms.fns, fns...)
	return orms
}

// Scan applies the selector query and scans the result into the given value.
func (orms *OncallRosterMetricsSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, orms.ctx, ent.OpQuerySelect)
	if err := orms.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OncallRosterMetricsQuery, *OncallRosterMetricsSelect](ctx, orms.OncallRosterMetricsQuery, orms, orms.inters, v)
}

func (orms *OncallRosterMetricsSelect) sqlScan(ctx context.Context, root *OncallRosterMetricsQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(orms.fns))
	for _, fn := range orms.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*orms.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := orms.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (orms *OncallRosterMetricsSelect) Modify(modifiers ...func(s *sql.Selector)) *OncallRosterMetricsSelect {
	orms.modifiers = append(orms.modifiers, modifiers...)
	return orms
}
