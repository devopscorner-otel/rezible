// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rezible/rezible/ent/incidenteventevidence"
	"github.com/rezible/rezible/ent/predicate"
)

// IncidentEventEvidenceDelete is the builder for deleting a IncidentEventEvidence entity.
type IncidentEventEvidenceDelete struct {
	config
	hooks    []Hook
	mutation *IncidentEventEvidenceMutation
}

// Where appends a list predicates to the IncidentEventEvidenceDelete builder.
func (ieed *IncidentEventEvidenceDelete) Where(ps ...predicate.IncidentEventEvidence) *IncidentEventEvidenceDelete {
	ieed.mutation.Where(ps...)
	return ieed
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ieed *IncidentEventEvidenceDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ieed.sqlExec, ieed.mutation, ieed.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ieed *IncidentEventEvidenceDelete) ExecX(ctx context.Context) int {
	n, err := ieed.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ieed *IncidentEventEvidenceDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(incidenteventevidence.Table, sqlgraph.NewFieldSpec(incidenteventevidence.FieldID, field.TypeUUID))
	if ps := ieed.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ieed.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ieed.mutation.done = true
	return affected, err
}

// IncidentEventEvidenceDeleteOne is the builder for deleting a single IncidentEventEvidence entity.
type IncidentEventEvidenceDeleteOne struct {
	ieed *IncidentEventEvidenceDelete
}

// Where appends a list predicates to the IncidentEventEvidenceDelete builder.
func (ieedo *IncidentEventEvidenceDeleteOne) Where(ps ...predicate.IncidentEventEvidence) *IncidentEventEvidenceDeleteOne {
	ieedo.ieed.mutation.Where(ps...)
	return ieedo
}

// Exec executes the deletion query.
func (ieedo *IncidentEventEvidenceDeleteOne) Exec(ctx context.Context) error {
	n, err := ieedo.ieed.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{incidenteventevidence.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ieedo *IncidentEventEvidenceDeleteOne) ExecX(ctx context.Context) {
	if err := ieedo.Exec(ctx); err != nil {
		panic(err)
	}
}
