// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/incidentdebrief"
	"github.com/rezible/rezible/ent/incidentdebriefsuggestion"
	"github.com/rezible/rezible/ent/tenant"
)

// IncidentDebriefSuggestionCreate is the builder for creating a IncidentDebriefSuggestion entity.
type IncidentDebriefSuggestionCreate struct {
	config
	mutation *IncidentDebriefSuggestionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (idsc *IncidentDebriefSuggestionCreate) SetTenantID(i int) *IncidentDebriefSuggestionCreate {
	idsc.mutation.SetTenantID(i)
	return idsc
}

// SetContent sets the "content" field.
func (idsc *IncidentDebriefSuggestionCreate) SetContent(s string) *IncidentDebriefSuggestionCreate {
	idsc.mutation.SetContent(s)
	return idsc
}

// SetID sets the "id" field.
func (idsc *IncidentDebriefSuggestionCreate) SetID(u uuid.UUID) *IncidentDebriefSuggestionCreate {
	idsc.mutation.SetID(u)
	return idsc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (idsc *IncidentDebriefSuggestionCreate) SetNillableID(u *uuid.UUID) *IncidentDebriefSuggestionCreate {
	if u != nil {
		idsc.SetID(*u)
	}
	return idsc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (idsc *IncidentDebriefSuggestionCreate) SetTenant(t *Tenant) *IncidentDebriefSuggestionCreate {
	return idsc.SetTenantID(t.ID)
}

// SetDebriefID sets the "debrief" edge to the IncidentDebrief entity by ID.
func (idsc *IncidentDebriefSuggestionCreate) SetDebriefID(id uuid.UUID) *IncidentDebriefSuggestionCreate {
	idsc.mutation.SetDebriefID(id)
	return idsc
}

// SetDebrief sets the "debrief" edge to the IncidentDebrief entity.
func (idsc *IncidentDebriefSuggestionCreate) SetDebrief(i *IncidentDebrief) *IncidentDebriefSuggestionCreate {
	return idsc.SetDebriefID(i.ID)
}

// Mutation returns the IncidentDebriefSuggestionMutation object of the builder.
func (idsc *IncidentDebriefSuggestionCreate) Mutation() *IncidentDebriefSuggestionMutation {
	return idsc.mutation
}

// Save creates the IncidentDebriefSuggestion in the database.
func (idsc *IncidentDebriefSuggestionCreate) Save(ctx context.Context) (*IncidentDebriefSuggestion, error) {
	if err := idsc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, idsc.sqlSave, idsc.mutation, idsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (idsc *IncidentDebriefSuggestionCreate) SaveX(ctx context.Context) *IncidentDebriefSuggestion {
	v, err := idsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (idsc *IncidentDebriefSuggestionCreate) Exec(ctx context.Context) error {
	_, err := idsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (idsc *IncidentDebriefSuggestionCreate) ExecX(ctx context.Context) {
	if err := idsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (idsc *IncidentDebriefSuggestionCreate) defaults() error {
	if _, ok := idsc.mutation.ID(); !ok {
		if incidentdebriefsuggestion.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized incidentdebriefsuggestion.DefaultID (forgotten import ent/runtime?)")
		}
		v := incidentdebriefsuggestion.DefaultID()
		idsc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (idsc *IncidentDebriefSuggestionCreate) check() error {
	if _, ok := idsc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "IncidentDebriefSuggestion.tenant_id"`)}
	}
	if _, ok := idsc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "IncidentDebriefSuggestion.content"`)}
	}
	if len(idsc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "IncidentDebriefSuggestion.tenant"`)}
	}
	if len(idsc.mutation.DebriefIDs()) == 0 {
		return &ValidationError{Name: "debrief", err: errors.New(`ent: missing required edge "IncidentDebriefSuggestion.debrief"`)}
	}
	return nil
}

func (idsc *IncidentDebriefSuggestionCreate) sqlSave(ctx context.Context) (*IncidentDebriefSuggestion, error) {
	if err := idsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := idsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, idsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	idsc.mutation.id = &_node.ID
	idsc.mutation.done = true
	return _node, nil
}

func (idsc *IncidentDebriefSuggestionCreate) createSpec() (*IncidentDebriefSuggestion, *sqlgraph.CreateSpec) {
	var (
		_node = &IncidentDebriefSuggestion{config: idsc.config}
		_spec = sqlgraph.NewCreateSpec(incidentdebriefsuggestion.Table, sqlgraph.NewFieldSpec(incidentdebriefsuggestion.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = idsc.conflict
	if id, ok := idsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := idsc.mutation.Content(); ok {
		_spec.SetField(incidentdebriefsuggestion.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if nodes := idsc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentdebriefsuggestion.TenantTable,
			Columns: []string{incidentdebriefsuggestion.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := idsc.mutation.DebriefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incidentdebriefsuggestion.DebriefTable,
			Columns: []string{incidentdebriefsuggestion.DebriefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentdebrief.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.incident_debrief_suggestions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IncidentDebriefSuggestion.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IncidentDebriefSuggestionUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (idsc *IncidentDebriefSuggestionCreate) OnConflict(opts ...sql.ConflictOption) *IncidentDebriefSuggestionUpsertOne {
	idsc.conflict = opts
	return &IncidentDebriefSuggestionUpsertOne{
		create: idsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IncidentDebriefSuggestion.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (idsc *IncidentDebriefSuggestionCreate) OnConflictColumns(columns ...string) *IncidentDebriefSuggestionUpsertOne {
	idsc.conflict = append(idsc.conflict, sql.ConflictColumns(columns...))
	return &IncidentDebriefSuggestionUpsertOne{
		create: idsc,
	}
}

type (
	// IncidentDebriefSuggestionUpsertOne is the builder for "upsert"-ing
	//  one IncidentDebriefSuggestion node.
	IncidentDebriefSuggestionUpsertOne struct {
		create *IncidentDebriefSuggestionCreate
	}

	// IncidentDebriefSuggestionUpsert is the "OnConflict" setter.
	IncidentDebriefSuggestionUpsert struct {
		*sql.UpdateSet
	}
)

// SetContent sets the "content" field.
func (u *IncidentDebriefSuggestionUpsert) SetContent(v string) *IncidentDebriefSuggestionUpsert {
	u.Set(incidentdebriefsuggestion.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *IncidentDebriefSuggestionUpsert) UpdateContent() *IncidentDebriefSuggestionUpsert {
	u.SetExcluded(incidentdebriefsuggestion.FieldContent)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.IncidentDebriefSuggestion.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(incidentdebriefsuggestion.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IncidentDebriefSuggestionUpsertOne) UpdateNewValues() *IncidentDebriefSuggestionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(incidentdebriefsuggestion.FieldID)
		}
		if _, exists := u.create.mutation.TenantID(); exists {
			s.SetIgnore(incidentdebriefsuggestion.FieldTenantID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IncidentDebriefSuggestion.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *IncidentDebriefSuggestionUpsertOne) Ignore() *IncidentDebriefSuggestionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IncidentDebriefSuggestionUpsertOne) DoNothing() *IncidentDebriefSuggestionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IncidentDebriefSuggestionCreate.OnConflict
// documentation for more info.
func (u *IncidentDebriefSuggestionUpsertOne) Update(set func(*IncidentDebriefSuggestionUpsert)) *IncidentDebriefSuggestionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IncidentDebriefSuggestionUpsert{UpdateSet: update})
	}))
	return u
}

// SetContent sets the "content" field.
func (u *IncidentDebriefSuggestionUpsertOne) SetContent(v string) *IncidentDebriefSuggestionUpsertOne {
	return u.Update(func(s *IncidentDebriefSuggestionUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *IncidentDebriefSuggestionUpsertOne) UpdateContent() *IncidentDebriefSuggestionUpsertOne {
	return u.Update(func(s *IncidentDebriefSuggestionUpsert) {
		s.UpdateContent()
	})
}

// Exec executes the query.
func (u *IncidentDebriefSuggestionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IncidentDebriefSuggestionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IncidentDebriefSuggestionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *IncidentDebriefSuggestionUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: IncidentDebriefSuggestionUpsertOne.ID is not supported by MySQL driver. Use IncidentDebriefSuggestionUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *IncidentDebriefSuggestionUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// IncidentDebriefSuggestionCreateBulk is the builder for creating many IncidentDebriefSuggestion entities in bulk.
type IncidentDebriefSuggestionCreateBulk struct {
	config
	err      error
	builders []*IncidentDebriefSuggestionCreate
	conflict []sql.ConflictOption
}

// Save creates the IncidentDebriefSuggestion entities in the database.
func (idscb *IncidentDebriefSuggestionCreateBulk) Save(ctx context.Context) ([]*IncidentDebriefSuggestion, error) {
	if idscb.err != nil {
		return nil, idscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(idscb.builders))
	nodes := make([]*IncidentDebriefSuggestion, len(idscb.builders))
	mutators := make([]Mutator, len(idscb.builders))
	for i := range idscb.builders {
		func(i int, root context.Context) {
			builder := idscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IncidentDebriefSuggestionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, idscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = idscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, idscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, idscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (idscb *IncidentDebriefSuggestionCreateBulk) SaveX(ctx context.Context) []*IncidentDebriefSuggestion {
	v, err := idscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (idscb *IncidentDebriefSuggestionCreateBulk) Exec(ctx context.Context) error {
	_, err := idscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (idscb *IncidentDebriefSuggestionCreateBulk) ExecX(ctx context.Context) {
	if err := idscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IncidentDebriefSuggestion.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IncidentDebriefSuggestionUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (idscb *IncidentDebriefSuggestionCreateBulk) OnConflict(opts ...sql.ConflictOption) *IncidentDebriefSuggestionUpsertBulk {
	idscb.conflict = opts
	return &IncidentDebriefSuggestionUpsertBulk{
		create: idscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IncidentDebriefSuggestion.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (idscb *IncidentDebriefSuggestionCreateBulk) OnConflictColumns(columns ...string) *IncidentDebriefSuggestionUpsertBulk {
	idscb.conflict = append(idscb.conflict, sql.ConflictColumns(columns...))
	return &IncidentDebriefSuggestionUpsertBulk{
		create: idscb,
	}
}

// IncidentDebriefSuggestionUpsertBulk is the builder for "upsert"-ing
// a bulk of IncidentDebriefSuggestion nodes.
type IncidentDebriefSuggestionUpsertBulk struct {
	create *IncidentDebriefSuggestionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.IncidentDebriefSuggestion.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(incidentdebriefsuggestion.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IncidentDebriefSuggestionUpsertBulk) UpdateNewValues() *IncidentDebriefSuggestionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(incidentdebriefsuggestion.FieldID)
			}
			if _, exists := b.mutation.TenantID(); exists {
				s.SetIgnore(incidentdebriefsuggestion.FieldTenantID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IncidentDebriefSuggestion.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *IncidentDebriefSuggestionUpsertBulk) Ignore() *IncidentDebriefSuggestionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IncidentDebriefSuggestionUpsertBulk) DoNothing() *IncidentDebriefSuggestionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IncidentDebriefSuggestionCreateBulk.OnConflict
// documentation for more info.
func (u *IncidentDebriefSuggestionUpsertBulk) Update(set func(*IncidentDebriefSuggestionUpsert)) *IncidentDebriefSuggestionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IncidentDebriefSuggestionUpsert{UpdateSet: update})
	}))
	return u
}

// SetContent sets the "content" field.
func (u *IncidentDebriefSuggestionUpsertBulk) SetContent(v string) *IncidentDebriefSuggestionUpsertBulk {
	return u.Update(func(s *IncidentDebriefSuggestionUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *IncidentDebriefSuggestionUpsertBulk) UpdateContent() *IncidentDebriefSuggestionUpsertBulk {
	return u.Update(func(s *IncidentDebriefSuggestionUpsert) {
		s.UpdateContent()
	})
}

// Exec executes the query.
func (u *IncidentDebriefSuggestionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the IncidentDebriefSuggestionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IncidentDebriefSuggestionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IncidentDebriefSuggestionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
