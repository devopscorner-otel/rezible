// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/incident"
	"github.com/rezible/rezible/ent/incidentrole"
	"github.com/rezible/rezible/ent/incidentroleassignment"
	"github.com/rezible/rezible/ent/tenant"
	"github.com/rezible/rezible/ent/user"
)

// IncidentRoleAssignment is the model entity for the IncidentRoleAssignment schema.
type IncidentRoleAssignment struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID int `json:"tenant_id,omitempty"`
	// IncidentID holds the value of the "incident_id" field.
	IncidentID uuid.UUID `json:"incident_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// RoleID holds the value of the "role_id" field.
	RoleID uuid.UUID `json:"role_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IncidentRoleAssignmentQuery when eager-loading is set.
	Edges        IncidentRoleAssignmentEdges `json:"edges"`
	selectValues sql.SelectValues
}

// IncidentRoleAssignmentEdges holds the relations/edges for other nodes in the graph.
type IncidentRoleAssignmentEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Incident holds the value of the incident edge.
	Incident *Incident `json:"incident,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Role holds the value of the role edge.
	Role *IncidentRole `json:"role,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IncidentRoleAssignmentEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// IncidentOrErr returns the Incident value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IncidentRoleAssignmentEdges) IncidentOrErr() (*Incident, error) {
	if e.Incident != nil {
		return e.Incident, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: incident.Label}
	}
	return nil, &NotLoadedError{edge: "incident"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IncidentRoleAssignmentEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// RoleOrErr returns the Role value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IncidentRoleAssignmentEdges) RoleOrErr() (*IncidentRole, error) {
	if e.Role != nil {
		return e.Role, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: incidentrole.Label}
	}
	return nil, &NotLoadedError{edge: "role"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IncidentRoleAssignment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case incidentroleassignment.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case incidentroleassignment.FieldID, incidentroleassignment.FieldIncidentID, incidentroleassignment.FieldUserID, incidentroleassignment.FieldRoleID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IncidentRoleAssignment fields.
func (ira *IncidentRoleAssignment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case incidentroleassignment.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ira.ID = *value
			}
		case incidentroleassignment.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				ira.TenantID = int(value.Int64)
			}
		case incidentroleassignment.FieldIncidentID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field incident_id", values[i])
			} else if value != nil {
				ira.IncidentID = *value
			}
		case incidentroleassignment.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				ira.UserID = *value
			}
		case incidentroleassignment.FieldRoleID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field role_id", values[i])
			} else if value != nil {
				ira.RoleID = *value
			}
		default:
			ira.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the IncidentRoleAssignment.
// This includes values selected through modifiers, order, etc.
func (ira *IncidentRoleAssignment) Value(name string) (ent.Value, error) {
	return ira.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the IncidentRoleAssignment entity.
func (ira *IncidentRoleAssignment) QueryTenant() *TenantQuery {
	return NewIncidentRoleAssignmentClient(ira.config).QueryTenant(ira)
}

// QueryIncident queries the "incident" edge of the IncidentRoleAssignment entity.
func (ira *IncidentRoleAssignment) QueryIncident() *IncidentQuery {
	return NewIncidentRoleAssignmentClient(ira.config).QueryIncident(ira)
}

// QueryUser queries the "user" edge of the IncidentRoleAssignment entity.
func (ira *IncidentRoleAssignment) QueryUser() *UserQuery {
	return NewIncidentRoleAssignmentClient(ira.config).QueryUser(ira)
}

// QueryRole queries the "role" edge of the IncidentRoleAssignment entity.
func (ira *IncidentRoleAssignment) QueryRole() *IncidentRoleQuery {
	return NewIncidentRoleAssignmentClient(ira.config).QueryRole(ira)
}

// Update returns a builder for updating this IncidentRoleAssignment.
// Note that you need to call IncidentRoleAssignment.Unwrap() before calling this method if this IncidentRoleAssignment
// was returned from a transaction, and the transaction was committed or rolled back.
func (ira *IncidentRoleAssignment) Update() *IncidentRoleAssignmentUpdateOne {
	return NewIncidentRoleAssignmentClient(ira.config).UpdateOne(ira)
}

// Unwrap unwraps the IncidentRoleAssignment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ira *IncidentRoleAssignment) Unwrap() *IncidentRoleAssignment {
	_tx, ok := ira.config.driver.(*txDriver)
	if !ok {
		panic("ent: IncidentRoleAssignment is not a transactional entity")
	}
	ira.config.driver = _tx.drv
	return ira
}

// String implements the fmt.Stringer.
func (ira *IncidentRoleAssignment) String() string {
	var builder strings.Builder
	builder.WriteString("IncidentRoleAssignment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ira.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", ira.TenantID))
	builder.WriteString(", ")
	builder.WriteString("incident_id=")
	builder.WriteString(fmt.Sprintf("%v", ira.IncidentID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ira.UserID))
	builder.WriteString(", ")
	builder.WriteString("role_id=")
	builder.WriteString(fmt.Sprintf("%v", ira.RoleID))
	builder.WriteByte(')')
	return builder.String()
}

// IncidentRoleAssignments is a parsable slice of IncidentRoleAssignment.
type IncidentRoleAssignments []*IncidentRoleAssignment
