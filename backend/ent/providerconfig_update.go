// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/providerconfig"
)

// ProviderConfigUpdate is the builder for updating ProviderConfig entities.
type ProviderConfigUpdate struct {
	config
	hooks     []Hook
	mutation  *ProviderConfigMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ProviderConfigUpdate builder.
func (pcu *ProviderConfigUpdate) Where(ps ...predicate.ProviderConfig) *ProviderConfigUpdate {
	pcu.mutation.Where(ps...)
	return pcu
}

// SetProviderType sets the "provider_type" field.
func (pcu *ProviderConfigUpdate) SetProviderType(pt providerconfig.ProviderType) *ProviderConfigUpdate {
	pcu.mutation.SetProviderType(pt)
	return pcu
}

// SetNillableProviderType sets the "provider_type" field if the given value is not nil.
func (pcu *ProviderConfigUpdate) SetNillableProviderType(pt *providerconfig.ProviderType) *ProviderConfigUpdate {
	if pt != nil {
		pcu.SetProviderType(*pt)
	}
	return pcu
}

// SetProviderName sets the "provider_name" field.
func (pcu *ProviderConfigUpdate) SetProviderName(s string) *ProviderConfigUpdate {
	pcu.mutation.SetProviderName(s)
	return pcu
}

// SetNillableProviderName sets the "provider_name" field if the given value is not nil.
func (pcu *ProviderConfigUpdate) SetNillableProviderName(s *string) *ProviderConfigUpdate {
	if s != nil {
		pcu.SetProviderName(*s)
	}
	return pcu
}

// SetProviderConfig sets the "provider_config" field.
func (pcu *ProviderConfigUpdate) SetProviderConfig(b []byte) *ProviderConfigUpdate {
	pcu.mutation.SetProviderConfig(b)
	return pcu
}

// SetEnabled sets the "enabled" field.
func (pcu *ProviderConfigUpdate) SetEnabled(b bool) *ProviderConfigUpdate {
	pcu.mutation.SetEnabled(b)
	return pcu
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (pcu *ProviderConfigUpdate) SetNillableEnabled(b *bool) *ProviderConfigUpdate {
	if b != nil {
		pcu.SetEnabled(*b)
	}
	return pcu
}

// SetUpdatedAt sets the "updated_at" field.
func (pcu *ProviderConfigUpdate) SetUpdatedAt(t time.Time) *ProviderConfigUpdate {
	pcu.mutation.SetUpdatedAt(t)
	return pcu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pcu *ProviderConfigUpdate) SetNillableUpdatedAt(t *time.Time) *ProviderConfigUpdate {
	if t != nil {
		pcu.SetUpdatedAt(*t)
	}
	return pcu
}

// Mutation returns the ProviderConfigMutation object of the builder.
func (pcu *ProviderConfigUpdate) Mutation() *ProviderConfigMutation {
	return pcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pcu *ProviderConfigUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pcu.sqlSave, pcu.mutation, pcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcu *ProviderConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := pcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pcu *ProviderConfigUpdate) Exec(ctx context.Context) error {
	_, err := pcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcu *ProviderConfigUpdate) ExecX(ctx context.Context) {
	if err := pcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcu *ProviderConfigUpdate) check() error {
	if v, ok := pcu.mutation.ProviderType(); ok {
		if err := providerconfig.ProviderTypeValidator(v); err != nil {
			return &ValidationError{Name: "provider_type", err: fmt.Errorf(`ent: validator failed for field "ProviderConfig.provider_type": %w`, err)}
		}
	}
	if pcu.mutation.TenantCleared() && len(pcu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProviderConfig.tenant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pcu *ProviderConfigUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProviderConfigUpdate {
	pcu.modifiers = append(pcu.modifiers, modifiers...)
	return pcu
}

func (pcu *ProviderConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(providerconfig.Table, providerconfig.Columns, sqlgraph.NewFieldSpec(providerconfig.FieldID, field.TypeUUID))
	if ps := pcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcu.mutation.ProviderType(); ok {
		_spec.SetField(providerconfig.FieldProviderType, field.TypeEnum, value)
	}
	if value, ok := pcu.mutation.ProviderName(); ok {
		_spec.SetField(providerconfig.FieldProviderName, field.TypeString, value)
	}
	if value, ok := pcu.mutation.ProviderConfig(); ok {
		_spec.SetField(providerconfig.FieldProviderConfig, field.TypeBytes, value)
	}
	if value, ok := pcu.mutation.Enabled(); ok {
		_spec.SetField(providerconfig.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := pcu.mutation.UpdatedAt(); ok {
		_spec.SetField(providerconfig.FieldUpdatedAt, field.TypeTime, value)
	}
	_spec.AddModifiers(pcu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{providerconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pcu.mutation.done = true
	return n, nil
}

// ProviderConfigUpdateOne is the builder for updating a single ProviderConfig entity.
type ProviderConfigUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ProviderConfigMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetProviderType sets the "provider_type" field.
func (pcuo *ProviderConfigUpdateOne) SetProviderType(pt providerconfig.ProviderType) *ProviderConfigUpdateOne {
	pcuo.mutation.SetProviderType(pt)
	return pcuo
}

// SetNillableProviderType sets the "provider_type" field if the given value is not nil.
func (pcuo *ProviderConfigUpdateOne) SetNillableProviderType(pt *providerconfig.ProviderType) *ProviderConfigUpdateOne {
	if pt != nil {
		pcuo.SetProviderType(*pt)
	}
	return pcuo
}

// SetProviderName sets the "provider_name" field.
func (pcuo *ProviderConfigUpdateOne) SetProviderName(s string) *ProviderConfigUpdateOne {
	pcuo.mutation.SetProviderName(s)
	return pcuo
}

// SetNillableProviderName sets the "provider_name" field if the given value is not nil.
func (pcuo *ProviderConfigUpdateOne) SetNillableProviderName(s *string) *ProviderConfigUpdateOne {
	if s != nil {
		pcuo.SetProviderName(*s)
	}
	return pcuo
}

// SetProviderConfig sets the "provider_config" field.
func (pcuo *ProviderConfigUpdateOne) SetProviderConfig(b []byte) *ProviderConfigUpdateOne {
	pcuo.mutation.SetProviderConfig(b)
	return pcuo
}

// SetEnabled sets the "enabled" field.
func (pcuo *ProviderConfigUpdateOne) SetEnabled(b bool) *ProviderConfigUpdateOne {
	pcuo.mutation.SetEnabled(b)
	return pcuo
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (pcuo *ProviderConfigUpdateOne) SetNillableEnabled(b *bool) *ProviderConfigUpdateOne {
	if b != nil {
		pcuo.SetEnabled(*b)
	}
	return pcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (pcuo *ProviderConfigUpdateOne) SetUpdatedAt(t time.Time) *ProviderConfigUpdateOne {
	pcuo.mutation.SetUpdatedAt(t)
	return pcuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pcuo *ProviderConfigUpdateOne) SetNillableUpdatedAt(t *time.Time) *ProviderConfigUpdateOne {
	if t != nil {
		pcuo.SetUpdatedAt(*t)
	}
	return pcuo
}

// Mutation returns the ProviderConfigMutation object of the builder.
func (pcuo *ProviderConfigUpdateOne) Mutation() *ProviderConfigMutation {
	return pcuo.mutation
}

// Where appends a list predicates to the ProviderConfigUpdate builder.
func (pcuo *ProviderConfigUpdateOne) Where(ps ...predicate.ProviderConfig) *ProviderConfigUpdateOne {
	pcuo.mutation.Where(ps...)
	return pcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pcuo *ProviderConfigUpdateOne) Select(field string, fields ...string) *ProviderConfigUpdateOne {
	pcuo.fields = append([]string{field}, fields...)
	return pcuo
}

// Save executes the query and returns the updated ProviderConfig entity.
func (pcuo *ProviderConfigUpdateOne) Save(ctx context.Context) (*ProviderConfig, error) {
	return withHooks(ctx, pcuo.sqlSave, pcuo.mutation, pcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcuo *ProviderConfigUpdateOne) SaveX(ctx context.Context) *ProviderConfig {
	node, err := pcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pcuo *ProviderConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := pcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcuo *ProviderConfigUpdateOne) ExecX(ctx context.Context) {
	if err := pcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcuo *ProviderConfigUpdateOne) check() error {
	if v, ok := pcuo.mutation.ProviderType(); ok {
		if err := providerconfig.ProviderTypeValidator(v); err != nil {
			return &ValidationError{Name: "provider_type", err: fmt.Errorf(`ent: validator failed for field "ProviderConfig.provider_type": %w`, err)}
		}
	}
	if pcuo.mutation.TenantCleared() && len(pcuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProviderConfig.tenant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pcuo *ProviderConfigUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProviderConfigUpdateOne {
	pcuo.modifiers = append(pcuo.modifiers, modifiers...)
	return pcuo
}

func (pcuo *ProviderConfigUpdateOne) sqlSave(ctx context.Context) (_node *ProviderConfig, err error) {
	if err := pcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(providerconfig.Table, providerconfig.Columns, sqlgraph.NewFieldSpec(providerconfig.FieldID, field.TypeUUID))
	id, ok := pcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProviderConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, providerconfig.FieldID)
		for _, f := range fields {
			if !providerconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != providerconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcuo.mutation.ProviderType(); ok {
		_spec.SetField(providerconfig.FieldProviderType, field.TypeEnum, value)
	}
	if value, ok := pcuo.mutation.ProviderName(); ok {
		_spec.SetField(providerconfig.FieldProviderName, field.TypeString, value)
	}
	if value, ok := pcuo.mutation.ProviderConfig(); ok {
		_spec.SetField(providerconfig.FieldProviderConfig, field.TypeBytes, value)
	}
	if value, ok := pcuo.mutation.Enabled(); ok {
		_spec.SetField(providerconfig.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := pcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(providerconfig.FieldUpdatedAt, field.TypeTime, value)
	}
	_spec.AddModifiers(pcuo.modifiers...)
	_node = &ProviderConfig{config: pcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{providerconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pcuo.mutation.done = true
	return _node, nil
}
