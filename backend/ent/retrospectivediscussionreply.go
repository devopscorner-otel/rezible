// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/twohundreds/rezible/ent/retrospectivediscussion"
	"github.com/twohundreds/rezible/ent/retrospectivediscussionreply"
)

// RetrospectiveDiscussionReply is the model entity for the RetrospectiveDiscussionReply schema.
type RetrospectiveDiscussionReply struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Content holds the value of the "content" field.
	Content []byte `json:"content,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RetrospectiveDiscussionReplyQuery when eager-loading is set.
	Edges                                     RetrospectiveDiscussionReplyEdges `json:"edges"`
	retrospective_discussion_reply_discussion *uuid.UUID
	retrospective_discussion_reply_replies    *uuid.UUID
	selectValues                              sql.SelectValues
}

// RetrospectiveDiscussionReplyEdges holds the relations/edges for other nodes in the graph.
type RetrospectiveDiscussionReplyEdges struct {
	// Discussion holds the value of the discussion edge.
	Discussion *RetrospectiveDiscussion `json:"discussion,omitempty"`
	// ParentReply holds the value of the parent_reply edge.
	ParentReply *RetrospectiveDiscussionReply `json:"parent_reply,omitempty"`
	// Replies holds the value of the replies edge.
	Replies []*RetrospectiveDiscussionReply `json:"replies,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// DiscussionOrErr returns the Discussion value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RetrospectiveDiscussionReplyEdges) DiscussionOrErr() (*RetrospectiveDiscussion, error) {
	if e.Discussion != nil {
		return e.Discussion, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: retrospectivediscussion.Label}
	}
	return nil, &NotLoadedError{edge: "discussion"}
}

// ParentReplyOrErr returns the ParentReply value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RetrospectiveDiscussionReplyEdges) ParentReplyOrErr() (*RetrospectiveDiscussionReply, error) {
	if e.ParentReply != nil {
		return e.ParentReply, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: retrospectivediscussionreply.Label}
	}
	return nil, &NotLoadedError{edge: "parent_reply"}
}

// RepliesOrErr returns the Replies value or an error if the edge
// was not loaded in eager-loading.
func (e RetrospectiveDiscussionReplyEdges) RepliesOrErr() ([]*RetrospectiveDiscussionReply, error) {
	if e.loadedTypes[2] {
		return e.Replies, nil
	}
	return nil, &NotLoadedError{edge: "replies"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RetrospectiveDiscussionReply) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case retrospectivediscussionreply.FieldContent:
			values[i] = new([]byte)
		case retrospectivediscussionreply.FieldID:
			values[i] = new(uuid.UUID)
		case retrospectivediscussionreply.ForeignKeys[0]: // retrospective_discussion_reply_discussion
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case retrospectivediscussionreply.ForeignKeys[1]: // retrospective_discussion_reply_replies
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RetrospectiveDiscussionReply fields.
func (rdr *RetrospectiveDiscussionReply) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case retrospectivediscussionreply.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				rdr.ID = *value
			}
		case retrospectivediscussionreply.FieldContent:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value != nil {
				rdr.Content = *value
			}
		case retrospectivediscussionreply.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field retrospective_discussion_reply_discussion", values[i])
			} else if value.Valid {
				rdr.retrospective_discussion_reply_discussion = new(uuid.UUID)
				*rdr.retrospective_discussion_reply_discussion = *value.S.(*uuid.UUID)
			}
		case retrospectivediscussionreply.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field retrospective_discussion_reply_replies", values[i])
			} else if value.Valid {
				rdr.retrospective_discussion_reply_replies = new(uuid.UUID)
				*rdr.retrospective_discussion_reply_replies = *value.S.(*uuid.UUID)
			}
		default:
			rdr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RetrospectiveDiscussionReply.
// This includes values selected through modifiers, order, etc.
func (rdr *RetrospectiveDiscussionReply) Value(name string) (ent.Value, error) {
	return rdr.selectValues.Get(name)
}

// QueryDiscussion queries the "discussion" edge of the RetrospectiveDiscussionReply entity.
func (rdr *RetrospectiveDiscussionReply) QueryDiscussion() *RetrospectiveDiscussionQuery {
	return NewRetrospectiveDiscussionReplyClient(rdr.config).QueryDiscussion(rdr)
}

// QueryParentReply queries the "parent_reply" edge of the RetrospectiveDiscussionReply entity.
func (rdr *RetrospectiveDiscussionReply) QueryParentReply() *RetrospectiveDiscussionReplyQuery {
	return NewRetrospectiveDiscussionReplyClient(rdr.config).QueryParentReply(rdr)
}

// QueryReplies queries the "replies" edge of the RetrospectiveDiscussionReply entity.
func (rdr *RetrospectiveDiscussionReply) QueryReplies() *RetrospectiveDiscussionReplyQuery {
	return NewRetrospectiveDiscussionReplyClient(rdr.config).QueryReplies(rdr)
}

// Update returns a builder for updating this RetrospectiveDiscussionReply.
// Note that you need to call RetrospectiveDiscussionReply.Unwrap() before calling this method if this RetrospectiveDiscussionReply
// was returned from a transaction, and the transaction was committed or rolled back.
func (rdr *RetrospectiveDiscussionReply) Update() *RetrospectiveDiscussionReplyUpdateOne {
	return NewRetrospectiveDiscussionReplyClient(rdr.config).UpdateOne(rdr)
}

// Unwrap unwraps the RetrospectiveDiscussionReply entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rdr *RetrospectiveDiscussionReply) Unwrap() *RetrospectiveDiscussionReply {
	_tx, ok := rdr.config.driver.(*txDriver)
	if !ok {
		panic("ent: RetrospectiveDiscussionReply is not a transactional entity")
	}
	rdr.config.driver = _tx.drv
	return rdr
}

// String implements the fmt.Stringer.
func (rdr *RetrospectiveDiscussionReply) String() string {
	var builder strings.Builder
	builder.WriteString("RetrospectiveDiscussionReply(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rdr.ID))
	builder.WriteString("content=")
	builder.WriteString(fmt.Sprintf("%v", rdr.Content))
	builder.WriteByte(')')
	return builder.String()
}

// RetrospectiveDiscussionReplies is a parsable slice of RetrospectiveDiscussionReply.
type RetrospectiveDiscussionReplies []*RetrospectiveDiscussionReply
