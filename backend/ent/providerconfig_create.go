// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/twohundreds/rezible/ent/providerconfig"
)

// ProviderConfigCreate is the builder for creating a ProviderConfig entity.
type ProviderConfigCreate struct {
	config
	mutation *ProviderConfigMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetProviderType sets the "provider_type" field.
func (pcc *ProviderConfigCreate) SetProviderType(pt providerconfig.ProviderType) *ProviderConfigCreate {
	pcc.mutation.SetProviderType(pt)
	return pcc
}

// SetProviderName sets the "provider_name" field.
func (pcc *ProviderConfigCreate) SetProviderName(s string) *ProviderConfigCreate {
	pcc.mutation.SetProviderName(s)
	return pcc
}

// SetProviderConfig sets the "provider_config" field.
func (pcc *ProviderConfigCreate) SetProviderConfig(b []byte) *ProviderConfigCreate {
	pcc.mutation.SetProviderConfig(b)
	return pcc
}

// SetEnabled sets the "enabled" field.
func (pcc *ProviderConfigCreate) SetEnabled(b bool) *ProviderConfigCreate {
	pcc.mutation.SetEnabled(b)
	return pcc
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (pcc *ProviderConfigCreate) SetNillableEnabled(b *bool) *ProviderConfigCreate {
	if b != nil {
		pcc.SetEnabled(*b)
	}
	return pcc
}

// SetUpdatedAt sets the "updated_at" field.
func (pcc *ProviderConfigCreate) SetUpdatedAt(t time.Time) *ProviderConfigCreate {
	pcc.mutation.SetUpdatedAt(t)
	return pcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pcc *ProviderConfigCreate) SetNillableUpdatedAt(t *time.Time) *ProviderConfigCreate {
	if t != nil {
		pcc.SetUpdatedAt(*t)
	}
	return pcc
}

// SetID sets the "id" field.
func (pcc *ProviderConfigCreate) SetID(u uuid.UUID) *ProviderConfigCreate {
	pcc.mutation.SetID(u)
	return pcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pcc *ProviderConfigCreate) SetNillableID(u *uuid.UUID) *ProviderConfigCreate {
	if u != nil {
		pcc.SetID(*u)
	}
	return pcc
}

// Mutation returns the ProviderConfigMutation object of the builder.
func (pcc *ProviderConfigCreate) Mutation() *ProviderConfigMutation {
	return pcc.mutation
}

// Save creates the ProviderConfig in the database.
func (pcc *ProviderConfigCreate) Save(ctx context.Context) (*ProviderConfig, error) {
	pcc.defaults()
	return withHooks(ctx, pcc.sqlSave, pcc.mutation, pcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pcc *ProviderConfigCreate) SaveX(ctx context.Context) *ProviderConfig {
	v, err := pcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcc *ProviderConfigCreate) Exec(ctx context.Context) error {
	_, err := pcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcc *ProviderConfigCreate) ExecX(ctx context.Context) {
	if err := pcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcc *ProviderConfigCreate) defaults() {
	if _, ok := pcc.mutation.Enabled(); !ok {
		v := providerconfig.DefaultEnabled
		pcc.mutation.SetEnabled(v)
	}
	if _, ok := pcc.mutation.UpdatedAt(); !ok {
		v := providerconfig.DefaultUpdatedAt()
		pcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pcc.mutation.ID(); !ok {
		v := providerconfig.DefaultID()
		pcc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcc *ProviderConfigCreate) check() error {
	if _, ok := pcc.mutation.ProviderType(); !ok {
		return &ValidationError{Name: "provider_type", err: errors.New(`ent: missing required field "ProviderConfig.provider_type"`)}
	}
	if v, ok := pcc.mutation.ProviderType(); ok {
		if err := providerconfig.ProviderTypeValidator(v); err != nil {
			return &ValidationError{Name: "provider_type", err: fmt.Errorf(`ent: validator failed for field "ProviderConfig.provider_type": %w`, err)}
		}
	}
	if _, ok := pcc.mutation.ProviderName(); !ok {
		return &ValidationError{Name: "provider_name", err: errors.New(`ent: missing required field "ProviderConfig.provider_name"`)}
	}
	if _, ok := pcc.mutation.ProviderConfig(); !ok {
		return &ValidationError{Name: "provider_config", err: errors.New(`ent: missing required field "ProviderConfig.provider_config"`)}
	}
	if _, ok := pcc.mutation.Enabled(); !ok {
		return &ValidationError{Name: "enabled", err: errors.New(`ent: missing required field "ProviderConfig.enabled"`)}
	}
	if _, ok := pcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ProviderConfig.updated_at"`)}
	}
	return nil
}

func (pcc *ProviderConfigCreate) sqlSave(ctx context.Context) (*ProviderConfig, error) {
	if err := pcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pcc.mutation.id = &_node.ID
	pcc.mutation.done = true
	return _node, nil
}

func (pcc *ProviderConfigCreate) createSpec() (*ProviderConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &ProviderConfig{config: pcc.config}
		_spec = sqlgraph.NewCreateSpec(providerconfig.Table, sqlgraph.NewFieldSpec(providerconfig.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = pcc.conflict
	if id, ok := pcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pcc.mutation.ProviderType(); ok {
		_spec.SetField(providerconfig.FieldProviderType, field.TypeEnum, value)
		_node.ProviderType = value
	}
	if value, ok := pcc.mutation.ProviderName(); ok {
		_spec.SetField(providerconfig.FieldProviderName, field.TypeString, value)
		_node.ProviderName = value
	}
	if value, ok := pcc.mutation.ProviderConfig(); ok {
		_spec.SetField(providerconfig.FieldProviderConfig, field.TypeBytes, value)
		_node.ProviderConfig = value
	}
	if value, ok := pcc.mutation.Enabled(); ok {
		_spec.SetField(providerconfig.FieldEnabled, field.TypeBool, value)
		_node.Enabled = value
	}
	if value, ok := pcc.mutation.UpdatedAt(); ok {
		_spec.SetField(providerconfig.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ProviderConfig.Create().
//		SetProviderType(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProviderConfigUpsert) {
//			SetProviderType(v+v).
//		}).
//		Exec(ctx)
func (pcc *ProviderConfigCreate) OnConflict(opts ...sql.ConflictOption) *ProviderConfigUpsertOne {
	pcc.conflict = opts
	return &ProviderConfigUpsertOne{
		create: pcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ProviderConfig.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcc *ProviderConfigCreate) OnConflictColumns(columns ...string) *ProviderConfigUpsertOne {
	pcc.conflict = append(pcc.conflict, sql.ConflictColumns(columns...))
	return &ProviderConfigUpsertOne{
		create: pcc,
	}
}

type (
	// ProviderConfigUpsertOne is the builder for "upsert"-ing
	//  one ProviderConfig node.
	ProviderConfigUpsertOne struct {
		create *ProviderConfigCreate
	}

	// ProviderConfigUpsert is the "OnConflict" setter.
	ProviderConfigUpsert struct {
		*sql.UpdateSet
	}
)

// SetProviderType sets the "provider_type" field.
func (u *ProviderConfigUpsert) SetProviderType(v providerconfig.ProviderType) *ProviderConfigUpsert {
	u.Set(providerconfig.FieldProviderType, v)
	return u
}

// UpdateProviderType sets the "provider_type" field to the value that was provided on create.
func (u *ProviderConfigUpsert) UpdateProviderType() *ProviderConfigUpsert {
	u.SetExcluded(providerconfig.FieldProviderType)
	return u
}

// SetProviderName sets the "provider_name" field.
func (u *ProviderConfigUpsert) SetProviderName(v string) *ProviderConfigUpsert {
	u.Set(providerconfig.FieldProviderName, v)
	return u
}

// UpdateProviderName sets the "provider_name" field to the value that was provided on create.
func (u *ProviderConfigUpsert) UpdateProviderName() *ProviderConfigUpsert {
	u.SetExcluded(providerconfig.FieldProviderName)
	return u
}

// SetProviderConfig sets the "provider_config" field.
func (u *ProviderConfigUpsert) SetProviderConfig(v []byte) *ProviderConfigUpsert {
	u.Set(providerconfig.FieldProviderConfig, v)
	return u
}

// UpdateProviderConfig sets the "provider_config" field to the value that was provided on create.
func (u *ProviderConfigUpsert) UpdateProviderConfig() *ProviderConfigUpsert {
	u.SetExcluded(providerconfig.FieldProviderConfig)
	return u
}

// SetEnabled sets the "enabled" field.
func (u *ProviderConfigUpsert) SetEnabled(v bool) *ProviderConfigUpsert {
	u.Set(providerconfig.FieldEnabled, v)
	return u
}

// UpdateEnabled sets the "enabled" field to the value that was provided on create.
func (u *ProviderConfigUpsert) UpdateEnabled() *ProviderConfigUpsert {
	u.SetExcluded(providerconfig.FieldEnabled)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProviderConfigUpsert) SetUpdatedAt(v time.Time) *ProviderConfigUpsert {
	u.Set(providerconfig.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProviderConfigUpsert) UpdateUpdatedAt() *ProviderConfigUpsert {
	u.SetExcluded(providerconfig.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ProviderConfig.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(providerconfig.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ProviderConfigUpsertOne) UpdateNewValues() *ProviderConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(providerconfig.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ProviderConfig.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ProviderConfigUpsertOne) Ignore() *ProviderConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProviderConfigUpsertOne) DoNothing() *ProviderConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProviderConfigCreate.OnConflict
// documentation for more info.
func (u *ProviderConfigUpsertOne) Update(set func(*ProviderConfigUpsert)) *ProviderConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProviderConfigUpsert{UpdateSet: update})
	}))
	return u
}

// SetProviderType sets the "provider_type" field.
func (u *ProviderConfigUpsertOne) SetProviderType(v providerconfig.ProviderType) *ProviderConfigUpsertOne {
	return u.Update(func(s *ProviderConfigUpsert) {
		s.SetProviderType(v)
	})
}

// UpdateProviderType sets the "provider_type" field to the value that was provided on create.
func (u *ProviderConfigUpsertOne) UpdateProviderType() *ProviderConfigUpsertOne {
	return u.Update(func(s *ProviderConfigUpsert) {
		s.UpdateProviderType()
	})
}

// SetProviderName sets the "provider_name" field.
func (u *ProviderConfigUpsertOne) SetProviderName(v string) *ProviderConfigUpsertOne {
	return u.Update(func(s *ProviderConfigUpsert) {
		s.SetProviderName(v)
	})
}

// UpdateProviderName sets the "provider_name" field to the value that was provided on create.
func (u *ProviderConfigUpsertOne) UpdateProviderName() *ProviderConfigUpsertOne {
	return u.Update(func(s *ProviderConfigUpsert) {
		s.UpdateProviderName()
	})
}

// SetProviderConfig sets the "provider_config" field.
func (u *ProviderConfigUpsertOne) SetProviderConfig(v []byte) *ProviderConfigUpsertOne {
	return u.Update(func(s *ProviderConfigUpsert) {
		s.SetProviderConfig(v)
	})
}

// UpdateProviderConfig sets the "provider_config" field to the value that was provided on create.
func (u *ProviderConfigUpsertOne) UpdateProviderConfig() *ProviderConfigUpsertOne {
	return u.Update(func(s *ProviderConfigUpsert) {
		s.UpdateProviderConfig()
	})
}

// SetEnabled sets the "enabled" field.
func (u *ProviderConfigUpsertOne) SetEnabled(v bool) *ProviderConfigUpsertOne {
	return u.Update(func(s *ProviderConfigUpsert) {
		s.SetEnabled(v)
	})
}

// UpdateEnabled sets the "enabled" field to the value that was provided on create.
func (u *ProviderConfigUpsertOne) UpdateEnabled() *ProviderConfigUpsertOne {
	return u.Update(func(s *ProviderConfigUpsert) {
		s.UpdateEnabled()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProviderConfigUpsertOne) SetUpdatedAt(v time.Time) *ProviderConfigUpsertOne {
	return u.Update(func(s *ProviderConfigUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProviderConfigUpsertOne) UpdateUpdatedAt() *ProviderConfigUpsertOne {
	return u.Update(func(s *ProviderConfigUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ProviderConfigUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProviderConfigCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProviderConfigUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ProviderConfigUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ProviderConfigUpsertOne.ID is not supported by MySQL driver. Use ProviderConfigUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ProviderConfigUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ProviderConfigCreateBulk is the builder for creating many ProviderConfig entities in bulk.
type ProviderConfigCreateBulk struct {
	config
	err      error
	builders []*ProviderConfigCreate
	conflict []sql.ConflictOption
}

// Save creates the ProviderConfig entities in the database.
func (pccb *ProviderConfigCreateBulk) Save(ctx context.Context) ([]*ProviderConfig, error) {
	if pccb.err != nil {
		return nil, pccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pccb.builders))
	nodes := make([]*ProviderConfig, len(pccb.builders))
	mutators := make([]Mutator, len(pccb.builders))
	for i := range pccb.builders {
		func(i int, root context.Context) {
			builder := pccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProviderConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pccb *ProviderConfigCreateBulk) SaveX(ctx context.Context) []*ProviderConfig {
	v, err := pccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pccb *ProviderConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := pccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pccb *ProviderConfigCreateBulk) ExecX(ctx context.Context) {
	if err := pccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ProviderConfig.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProviderConfigUpsert) {
//			SetProviderType(v+v).
//		}).
//		Exec(ctx)
func (pccb *ProviderConfigCreateBulk) OnConflict(opts ...sql.ConflictOption) *ProviderConfigUpsertBulk {
	pccb.conflict = opts
	return &ProviderConfigUpsertBulk{
		create: pccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ProviderConfig.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pccb *ProviderConfigCreateBulk) OnConflictColumns(columns ...string) *ProviderConfigUpsertBulk {
	pccb.conflict = append(pccb.conflict, sql.ConflictColumns(columns...))
	return &ProviderConfigUpsertBulk{
		create: pccb,
	}
}

// ProviderConfigUpsertBulk is the builder for "upsert"-ing
// a bulk of ProviderConfig nodes.
type ProviderConfigUpsertBulk struct {
	create *ProviderConfigCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ProviderConfig.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(providerconfig.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ProviderConfigUpsertBulk) UpdateNewValues() *ProviderConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(providerconfig.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ProviderConfig.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ProviderConfigUpsertBulk) Ignore() *ProviderConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProviderConfigUpsertBulk) DoNothing() *ProviderConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProviderConfigCreateBulk.OnConflict
// documentation for more info.
func (u *ProviderConfigUpsertBulk) Update(set func(*ProviderConfigUpsert)) *ProviderConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProviderConfigUpsert{UpdateSet: update})
	}))
	return u
}

// SetProviderType sets the "provider_type" field.
func (u *ProviderConfigUpsertBulk) SetProviderType(v providerconfig.ProviderType) *ProviderConfigUpsertBulk {
	return u.Update(func(s *ProviderConfigUpsert) {
		s.SetProviderType(v)
	})
}

// UpdateProviderType sets the "provider_type" field to the value that was provided on create.
func (u *ProviderConfigUpsertBulk) UpdateProviderType() *ProviderConfigUpsertBulk {
	return u.Update(func(s *ProviderConfigUpsert) {
		s.UpdateProviderType()
	})
}

// SetProviderName sets the "provider_name" field.
func (u *ProviderConfigUpsertBulk) SetProviderName(v string) *ProviderConfigUpsertBulk {
	return u.Update(func(s *ProviderConfigUpsert) {
		s.SetProviderName(v)
	})
}

// UpdateProviderName sets the "provider_name" field to the value that was provided on create.
func (u *ProviderConfigUpsertBulk) UpdateProviderName() *ProviderConfigUpsertBulk {
	return u.Update(func(s *ProviderConfigUpsert) {
		s.UpdateProviderName()
	})
}

// SetProviderConfig sets the "provider_config" field.
func (u *ProviderConfigUpsertBulk) SetProviderConfig(v []byte) *ProviderConfigUpsertBulk {
	return u.Update(func(s *ProviderConfigUpsert) {
		s.SetProviderConfig(v)
	})
}

// UpdateProviderConfig sets the "provider_config" field to the value that was provided on create.
func (u *ProviderConfigUpsertBulk) UpdateProviderConfig() *ProviderConfigUpsertBulk {
	return u.Update(func(s *ProviderConfigUpsert) {
		s.UpdateProviderConfig()
	})
}

// SetEnabled sets the "enabled" field.
func (u *ProviderConfigUpsertBulk) SetEnabled(v bool) *ProviderConfigUpsertBulk {
	return u.Update(func(s *ProviderConfigUpsert) {
		s.SetEnabled(v)
	})
}

// UpdateEnabled sets the "enabled" field to the value that was provided on create.
func (u *ProviderConfigUpsertBulk) UpdateEnabled() *ProviderConfigUpsertBulk {
	return u.Update(func(s *ProviderConfigUpsert) {
		s.UpdateEnabled()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProviderConfigUpsertBulk) SetUpdatedAt(v time.Time) *ProviderConfigUpsertBulk {
	return u.Update(func(s *ProviderConfigUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProviderConfigUpsertBulk) UpdateUpdatedAt() *ProviderConfigUpsertBulk {
	return u.Update(func(s *ProviderConfigUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ProviderConfigUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ProviderConfigCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProviderConfigCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProviderConfigUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
