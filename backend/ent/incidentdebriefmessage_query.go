// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/incidentdebrief"
	"github.com/rezible/rezible/ent/incidentdebriefmessage"
	"github.com/rezible/rezible/ent/incidentdebriefquestion"
	"github.com/rezible/rezible/ent/predicate"
)

// IncidentDebriefMessageQuery is the builder for querying IncidentDebriefMessage entities.
type IncidentDebriefMessageQuery struct {
	config
	ctx              *QueryContext
	order            []incidentdebriefmessage.OrderOption
	inters           []Interceptor
	predicates       []predicate.IncidentDebriefMessage
	withDebrief      *IncidentDebriefQuery
	withFromQuestion *IncidentDebriefQuestionQuery
	modifiers        []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the IncidentDebriefMessageQuery builder.
func (idmq *IncidentDebriefMessageQuery) Where(ps ...predicate.IncidentDebriefMessage) *IncidentDebriefMessageQuery {
	idmq.predicates = append(idmq.predicates, ps...)
	return idmq
}

// Limit the number of records to be returned by this query.
func (idmq *IncidentDebriefMessageQuery) Limit(limit int) *IncidentDebriefMessageQuery {
	idmq.ctx.Limit = &limit
	return idmq
}

// Offset to start from.
func (idmq *IncidentDebriefMessageQuery) Offset(offset int) *IncidentDebriefMessageQuery {
	idmq.ctx.Offset = &offset
	return idmq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (idmq *IncidentDebriefMessageQuery) Unique(unique bool) *IncidentDebriefMessageQuery {
	idmq.ctx.Unique = &unique
	return idmq
}

// Order specifies how the records should be ordered.
func (idmq *IncidentDebriefMessageQuery) Order(o ...incidentdebriefmessage.OrderOption) *IncidentDebriefMessageQuery {
	idmq.order = append(idmq.order, o...)
	return idmq
}

// QueryDebrief chains the current query on the "debrief" edge.
func (idmq *IncidentDebriefMessageQuery) QueryDebrief() *IncidentDebriefQuery {
	query := (&IncidentDebriefClient{config: idmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := idmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := idmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(incidentdebriefmessage.Table, incidentdebriefmessage.FieldID, selector),
			sqlgraph.To(incidentdebrief.Table, incidentdebrief.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, incidentdebriefmessage.DebriefTable, incidentdebriefmessage.DebriefColumn),
		)
		fromU = sqlgraph.SetNeighbors(idmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFromQuestion chains the current query on the "from_question" edge.
func (idmq *IncidentDebriefMessageQuery) QueryFromQuestion() *IncidentDebriefQuestionQuery {
	query := (&IncidentDebriefQuestionClient{config: idmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := idmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := idmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(incidentdebriefmessage.Table, incidentdebriefmessage.FieldID, selector),
			sqlgraph.To(incidentdebriefquestion.Table, incidentdebriefquestion.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, incidentdebriefmessage.FromQuestionTable, incidentdebriefmessage.FromQuestionColumn),
		)
		fromU = sqlgraph.SetNeighbors(idmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first IncidentDebriefMessage entity from the query.
// Returns a *NotFoundError when no IncidentDebriefMessage was found.
func (idmq *IncidentDebriefMessageQuery) First(ctx context.Context) (*IncidentDebriefMessage, error) {
	nodes, err := idmq.Limit(1).All(setContextOp(ctx, idmq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{incidentdebriefmessage.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (idmq *IncidentDebriefMessageQuery) FirstX(ctx context.Context) *IncidentDebriefMessage {
	node, err := idmq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first IncidentDebriefMessage ID from the query.
// Returns a *NotFoundError when no IncidentDebriefMessage ID was found.
func (idmq *IncidentDebriefMessageQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = idmq.Limit(1).IDs(setContextOp(ctx, idmq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{incidentdebriefmessage.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (idmq *IncidentDebriefMessageQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := idmq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single IncidentDebriefMessage entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one IncidentDebriefMessage entity is found.
// Returns a *NotFoundError when no IncidentDebriefMessage entities are found.
func (idmq *IncidentDebriefMessageQuery) Only(ctx context.Context) (*IncidentDebriefMessage, error) {
	nodes, err := idmq.Limit(2).All(setContextOp(ctx, idmq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{incidentdebriefmessage.Label}
	default:
		return nil, &NotSingularError{incidentdebriefmessage.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (idmq *IncidentDebriefMessageQuery) OnlyX(ctx context.Context) *IncidentDebriefMessage {
	node, err := idmq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only IncidentDebriefMessage ID in the query.
// Returns a *NotSingularError when more than one IncidentDebriefMessage ID is found.
// Returns a *NotFoundError when no entities are found.
func (idmq *IncidentDebriefMessageQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = idmq.Limit(2).IDs(setContextOp(ctx, idmq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{incidentdebriefmessage.Label}
	default:
		err = &NotSingularError{incidentdebriefmessage.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (idmq *IncidentDebriefMessageQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := idmq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of IncidentDebriefMessages.
func (idmq *IncidentDebriefMessageQuery) All(ctx context.Context) ([]*IncidentDebriefMessage, error) {
	ctx = setContextOp(ctx, idmq.ctx, ent.OpQueryAll)
	if err := idmq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*IncidentDebriefMessage, *IncidentDebriefMessageQuery]()
	return withInterceptors[[]*IncidentDebriefMessage](ctx, idmq, qr, idmq.inters)
}

// AllX is like All, but panics if an error occurs.
func (idmq *IncidentDebriefMessageQuery) AllX(ctx context.Context) []*IncidentDebriefMessage {
	nodes, err := idmq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of IncidentDebriefMessage IDs.
func (idmq *IncidentDebriefMessageQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if idmq.ctx.Unique == nil && idmq.path != nil {
		idmq.Unique(true)
	}
	ctx = setContextOp(ctx, idmq.ctx, ent.OpQueryIDs)
	if err = idmq.Select(incidentdebriefmessage.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (idmq *IncidentDebriefMessageQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := idmq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (idmq *IncidentDebriefMessageQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, idmq.ctx, ent.OpQueryCount)
	if err := idmq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, idmq, querierCount[*IncidentDebriefMessageQuery](), idmq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (idmq *IncidentDebriefMessageQuery) CountX(ctx context.Context) int {
	count, err := idmq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (idmq *IncidentDebriefMessageQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, idmq.ctx, ent.OpQueryExist)
	switch _, err := idmq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (idmq *IncidentDebriefMessageQuery) ExistX(ctx context.Context) bool {
	exist, err := idmq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the IncidentDebriefMessageQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (idmq *IncidentDebriefMessageQuery) Clone() *IncidentDebriefMessageQuery {
	if idmq == nil {
		return nil
	}
	return &IncidentDebriefMessageQuery{
		config:           idmq.config,
		ctx:              idmq.ctx.Clone(),
		order:            append([]incidentdebriefmessage.OrderOption{}, idmq.order...),
		inters:           append([]Interceptor{}, idmq.inters...),
		predicates:       append([]predicate.IncidentDebriefMessage{}, idmq.predicates...),
		withDebrief:      idmq.withDebrief.Clone(),
		withFromQuestion: idmq.withFromQuestion.Clone(),
		// clone intermediate query.
		sql:       idmq.sql.Clone(),
		path:      idmq.path,
		modifiers: append([]func(*sql.Selector){}, idmq.modifiers...),
	}
}

// WithDebrief tells the query-builder to eager-load the nodes that are connected to
// the "debrief" edge. The optional arguments are used to configure the query builder of the edge.
func (idmq *IncidentDebriefMessageQuery) WithDebrief(opts ...func(*IncidentDebriefQuery)) *IncidentDebriefMessageQuery {
	query := (&IncidentDebriefClient{config: idmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	idmq.withDebrief = query
	return idmq
}

// WithFromQuestion tells the query-builder to eager-load the nodes that are connected to
// the "from_question" edge. The optional arguments are used to configure the query builder of the edge.
func (idmq *IncidentDebriefMessageQuery) WithFromQuestion(opts ...func(*IncidentDebriefQuestionQuery)) *IncidentDebriefMessageQuery {
	query := (&IncidentDebriefQuestionClient{config: idmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	idmq.withFromQuestion = query
	return idmq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		DebriefID uuid.UUID `json:"debrief_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.IncidentDebriefMessage.Query().
//		GroupBy(incidentdebriefmessage.FieldDebriefID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (idmq *IncidentDebriefMessageQuery) GroupBy(field string, fields ...string) *IncidentDebriefMessageGroupBy {
	idmq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &IncidentDebriefMessageGroupBy{build: idmq}
	grbuild.flds = &idmq.ctx.Fields
	grbuild.label = incidentdebriefmessage.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		DebriefID uuid.UUID `json:"debrief_id,omitempty"`
//	}
//
//	client.IncidentDebriefMessage.Query().
//		Select(incidentdebriefmessage.FieldDebriefID).
//		Scan(ctx, &v)
func (idmq *IncidentDebriefMessageQuery) Select(fields ...string) *IncidentDebriefMessageSelect {
	idmq.ctx.Fields = append(idmq.ctx.Fields, fields...)
	sbuild := &IncidentDebriefMessageSelect{IncidentDebriefMessageQuery: idmq}
	sbuild.label = incidentdebriefmessage.Label
	sbuild.flds, sbuild.scan = &idmq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a IncidentDebriefMessageSelect configured with the given aggregations.
func (idmq *IncidentDebriefMessageQuery) Aggregate(fns ...AggregateFunc) *IncidentDebriefMessageSelect {
	return idmq.Select().Aggregate(fns...)
}

func (idmq *IncidentDebriefMessageQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range idmq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, idmq); err != nil {
				return err
			}
		}
	}
	for _, f := range idmq.ctx.Fields {
		if !incidentdebriefmessage.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if idmq.path != nil {
		prev, err := idmq.path(ctx)
		if err != nil {
			return err
		}
		idmq.sql = prev
	}
	if incidentdebriefmessage.Policy == nil {
		return errors.New("ent: uninitialized incidentdebriefmessage.Policy (forgotten import ent/runtime?)")
	}
	if err := incidentdebriefmessage.Policy.EvalQuery(ctx, idmq); err != nil {
		return err
	}
	return nil
}

func (idmq *IncidentDebriefMessageQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*IncidentDebriefMessage, error) {
	var (
		nodes       = []*IncidentDebriefMessage{}
		_spec       = idmq.querySpec()
		loadedTypes = [2]bool{
			idmq.withDebrief != nil,
			idmq.withFromQuestion != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*IncidentDebriefMessage).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &IncidentDebriefMessage{config: idmq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(idmq.modifiers) > 0 {
		_spec.Modifiers = idmq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, idmq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := idmq.withDebrief; query != nil {
		if err := idmq.loadDebrief(ctx, query, nodes, nil,
			func(n *IncidentDebriefMessage, e *IncidentDebrief) { n.Edges.Debrief = e }); err != nil {
			return nil, err
		}
	}
	if query := idmq.withFromQuestion; query != nil {
		if err := idmq.loadFromQuestion(ctx, query, nodes, nil,
			func(n *IncidentDebriefMessage, e *IncidentDebriefQuestion) { n.Edges.FromQuestion = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (idmq *IncidentDebriefMessageQuery) loadDebrief(ctx context.Context, query *IncidentDebriefQuery, nodes []*IncidentDebriefMessage, init func(*IncidentDebriefMessage), assign func(*IncidentDebriefMessage, *IncidentDebrief)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*IncidentDebriefMessage)
	for i := range nodes {
		fk := nodes[i].DebriefID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(incidentdebrief.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "debrief_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (idmq *IncidentDebriefMessageQuery) loadFromQuestion(ctx context.Context, query *IncidentDebriefQuestionQuery, nodes []*IncidentDebriefMessage, init func(*IncidentDebriefMessage), assign func(*IncidentDebriefMessage, *IncidentDebriefQuestion)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*IncidentDebriefMessage)
	for i := range nodes {
		fk := nodes[i].QuestionID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(incidentdebriefquestion.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "question_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (idmq *IncidentDebriefMessageQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := idmq.querySpec()
	if len(idmq.modifiers) > 0 {
		_spec.Modifiers = idmq.modifiers
	}
	_spec.Node.Columns = idmq.ctx.Fields
	if len(idmq.ctx.Fields) > 0 {
		_spec.Unique = idmq.ctx.Unique != nil && *idmq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, idmq.driver, _spec)
}

func (idmq *IncidentDebriefMessageQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(incidentdebriefmessage.Table, incidentdebriefmessage.Columns, sqlgraph.NewFieldSpec(incidentdebriefmessage.FieldID, field.TypeUUID))
	_spec.From = idmq.sql
	if unique := idmq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if idmq.path != nil {
		_spec.Unique = true
	}
	if fields := idmq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, incidentdebriefmessage.FieldID)
		for i := range fields {
			if fields[i] != incidentdebriefmessage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if idmq.withDebrief != nil {
			_spec.Node.AddColumnOnce(incidentdebriefmessage.FieldDebriefID)
		}
		if idmq.withFromQuestion != nil {
			_spec.Node.AddColumnOnce(incidentdebriefmessage.FieldQuestionID)
		}
	}
	if ps := idmq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := idmq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := idmq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := idmq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (idmq *IncidentDebriefMessageQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(idmq.driver.Dialect())
	t1 := builder.Table(incidentdebriefmessage.Table)
	columns := idmq.ctx.Fields
	if len(columns) == 0 {
		columns = incidentdebriefmessage.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if idmq.sql != nil {
		selector = idmq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if idmq.ctx.Unique != nil && *idmq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range idmq.modifiers {
		m(selector)
	}
	for _, p := range idmq.predicates {
		p(selector)
	}
	for _, p := range idmq.order {
		p(selector)
	}
	if offset := idmq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := idmq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (idmq *IncidentDebriefMessageQuery) Modify(modifiers ...func(s *sql.Selector)) *IncidentDebriefMessageSelect {
	idmq.modifiers = append(idmq.modifiers, modifiers...)
	return idmq.Select()
}

// IncidentDebriefMessageGroupBy is the group-by builder for IncidentDebriefMessage entities.
type IncidentDebriefMessageGroupBy struct {
	selector
	build *IncidentDebriefMessageQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (idmgb *IncidentDebriefMessageGroupBy) Aggregate(fns ...AggregateFunc) *IncidentDebriefMessageGroupBy {
	idmgb.fns = append(idmgb.fns, fns...)
	return idmgb
}

// Scan applies the selector query and scans the result into the given value.
func (idmgb *IncidentDebriefMessageGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, idmgb.build.ctx, ent.OpQueryGroupBy)
	if err := idmgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*IncidentDebriefMessageQuery, *IncidentDebriefMessageGroupBy](ctx, idmgb.build, idmgb, idmgb.build.inters, v)
}

func (idmgb *IncidentDebriefMessageGroupBy) sqlScan(ctx context.Context, root *IncidentDebriefMessageQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(idmgb.fns))
	for _, fn := range idmgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*idmgb.flds)+len(idmgb.fns))
		for _, f := range *idmgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*idmgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := idmgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// IncidentDebriefMessageSelect is the builder for selecting fields of IncidentDebriefMessage entities.
type IncidentDebriefMessageSelect struct {
	*IncidentDebriefMessageQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (idms *IncidentDebriefMessageSelect) Aggregate(fns ...AggregateFunc) *IncidentDebriefMessageSelect {
	idms.fns = append(idms.fns, fns...)
	return idms
}

// Scan applies the selector query and scans the result into the given value.
func (idms *IncidentDebriefMessageSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, idms.ctx, ent.OpQuerySelect)
	if err := idms.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*IncidentDebriefMessageQuery, *IncidentDebriefMessageSelect](ctx, idms.IncidentDebriefMessageQuery, idms, idms.inters, v)
}

func (idms *IncidentDebriefMessageSelect) sqlScan(ctx context.Context, root *IncidentDebriefMessageQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(idms.fns))
	for _, fn := range idms.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*idms.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := idms.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (idms *IncidentDebriefMessageSelect) Modify(modifiers ...func(s *sql.Selector)) *IncidentDebriefMessageSelect {
	idms.modifiers = append(idms.modifiers, modifiers...)
	return idms
}
