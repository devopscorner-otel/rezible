// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/systemcomponentsignal"
	"github.com/rezible/rezible/ent/systemrelationship"
	"github.com/rezible/rezible/ent/systemrelationshipfeedback"
)

// SystemRelationshipFeedbackQuery is the builder for querying SystemRelationshipFeedback entities.
type SystemRelationshipFeedbackQuery struct {
	config
	ctx              *QueryContext
	order            []systemrelationshipfeedback.OrderOption
	inters           []Interceptor
	predicates       []predicate.SystemRelationshipFeedback
	withSignal       *SystemComponentSignalQuery
	withRelationship *SystemRelationshipQuery
	modifiers        []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SystemRelationshipFeedbackQuery builder.
func (srfq *SystemRelationshipFeedbackQuery) Where(ps ...predicate.SystemRelationshipFeedback) *SystemRelationshipFeedbackQuery {
	srfq.predicates = append(srfq.predicates, ps...)
	return srfq
}

// Limit the number of records to be returned by this query.
func (srfq *SystemRelationshipFeedbackQuery) Limit(limit int) *SystemRelationshipFeedbackQuery {
	srfq.ctx.Limit = &limit
	return srfq
}

// Offset to start from.
func (srfq *SystemRelationshipFeedbackQuery) Offset(offset int) *SystemRelationshipFeedbackQuery {
	srfq.ctx.Offset = &offset
	return srfq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (srfq *SystemRelationshipFeedbackQuery) Unique(unique bool) *SystemRelationshipFeedbackQuery {
	srfq.ctx.Unique = &unique
	return srfq
}

// Order specifies how the records should be ordered.
func (srfq *SystemRelationshipFeedbackQuery) Order(o ...systemrelationshipfeedback.OrderOption) *SystemRelationshipFeedbackQuery {
	srfq.order = append(srfq.order, o...)
	return srfq
}

// QuerySignal chains the current query on the "signal" edge.
func (srfq *SystemRelationshipFeedbackQuery) QuerySignal() *SystemComponentSignalQuery {
	query := (&SystemComponentSignalClient{config: srfq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := srfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := srfq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(systemrelationshipfeedback.Table, systemrelationshipfeedback.FieldID, selector),
			sqlgraph.To(systemcomponentsignal.Table, systemcomponentsignal.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, systemrelationshipfeedback.SignalTable, systemrelationshipfeedback.SignalColumn),
		)
		fromU = sqlgraph.SetNeighbors(srfq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRelationship chains the current query on the "relationship" edge.
func (srfq *SystemRelationshipFeedbackQuery) QueryRelationship() *SystemRelationshipQuery {
	query := (&SystemRelationshipClient{config: srfq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := srfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := srfq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(systemrelationshipfeedback.Table, systemrelationshipfeedback.FieldID, selector),
			sqlgraph.To(systemrelationship.Table, systemrelationship.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, systemrelationshipfeedback.RelationshipTable, systemrelationshipfeedback.RelationshipColumn),
		)
		fromU = sqlgraph.SetNeighbors(srfq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SystemRelationshipFeedback entity from the query.
// Returns a *NotFoundError when no SystemRelationshipFeedback was found.
func (srfq *SystemRelationshipFeedbackQuery) First(ctx context.Context) (*SystemRelationshipFeedback, error) {
	nodes, err := srfq.Limit(1).All(setContextOp(ctx, srfq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{systemrelationshipfeedback.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (srfq *SystemRelationshipFeedbackQuery) FirstX(ctx context.Context) *SystemRelationshipFeedback {
	node, err := srfq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SystemRelationshipFeedback ID from the query.
// Returns a *NotFoundError when no SystemRelationshipFeedback ID was found.
func (srfq *SystemRelationshipFeedbackQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = srfq.Limit(1).IDs(setContextOp(ctx, srfq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{systemrelationshipfeedback.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (srfq *SystemRelationshipFeedbackQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := srfq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SystemRelationshipFeedback entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SystemRelationshipFeedback entity is found.
// Returns a *NotFoundError when no SystemRelationshipFeedback entities are found.
func (srfq *SystemRelationshipFeedbackQuery) Only(ctx context.Context) (*SystemRelationshipFeedback, error) {
	nodes, err := srfq.Limit(2).All(setContextOp(ctx, srfq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{systemrelationshipfeedback.Label}
	default:
		return nil, &NotSingularError{systemrelationshipfeedback.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (srfq *SystemRelationshipFeedbackQuery) OnlyX(ctx context.Context) *SystemRelationshipFeedback {
	node, err := srfq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SystemRelationshipFeedback ID in the query.
// Returns a *NotSingularError when more than one SystemRelationshipFeedback ID is found.
// Returns a *NotFoundError when no entities are found.
func (srfq *SystemRelationshipFeedbackQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = srfq.Limit(2).IDs(setContextOp(ctx, srfq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{systemrelationshipfeedback.Label}
	default:
		err = &NotSingularError{systemrelationshipfeedback.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (srfq *SystemRelationshipFeedbackQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := srfq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SystemRelationshipFeedbacks.
func (srfq *SystemRelationshipFeedbackQuery) All(ctx context.Context) ([]*SystemRelationshipFeedback, error) {
	ctx = setContextOp(ctx, srfq.ctx, ent.OpQueryAll)
	if err := srfq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SystemRelationshipFeedback, *SystemRelationshipFeedbackQuery]()
	return withInterceptors[[]*SystemRelationshipFeedback](ctx, srfq, qr, srfq.inters)
}

// AllX is like All, but panics if an error occurs.
func (srfq *SystemRelationshipFeedbackQuery) AllX(ctx context.Context) []*SystemRelationshipFeedback {
	nodes, err := srfq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SystemRelationshipFeedback IDs.
func (srfq *SystemRelationshipFeedbackQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if srfq.ctx.Unique == nil && srfq.path != nil {
		srfq.Unique(true)
	}
	ctx = setContextOp(ctx, srfq.ctx, ent.OpQueryIDs)
	if err = srfq.Select(systemrelationshipfeedback.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (srfq *SystemRelationshipFeedbackQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := srfq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (srfq *SystemRelationshipFeedbackQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, srfq.ctx, ent.OpQueryCount)
	if err := srfq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, srfq, querierCount[*SystemRelationshipFeedbackQuery](), srfq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (srfq *SystemRelationshipFeedbackQuery) CountX(ctx context.Context) int {
	count, err := srfq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (srfq *SystemRelationshipFeedbackQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, srfq.ctx, ent.OpQueryExist)
	switch _, err := srfq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (srfq *SystemRelationshipFeedbackQuery) ExistX(ctx context.Context) bool {
	exist, err := srfq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SystemRelationshipFeedbackQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (srfq *SystemRelationshipFeedbackQuery) Clone() *SystemRelationshipFeedbackQuery {
	if srfq == nil {
		return nil
	}
	return &SystemRelationshipFeedbackQuery{
		config:           srfq.config,
		ctx:              srfq.ctx.Clone(),
		order:            append([]systemrelationshipfeedback.OrderOption{}, srfq.order...),
		inters:           append([]Interceptor{}, srfq.inters...),
		predicates:       append([]predicate.SystemRelationshipFeedback{}, srfq.predicates...),
		withSignal:       srfq.withSignal.Clone(),
		withRelationship: srfq.withRelationship.Clone(),
		// clone intermediate query.
		sql:       srfq.sql.Clone(),
		path:      srfq.path,
		modifiers: append([]func(*sql.Selector){}, srfq.modifiers...),
	}
}

// WithSignal tells the query-builder to eager-load the nodes that are connected to
// the "signal" edge. The optional arguments are used to configure the query builder of the edge.
func (srfq *SystemRelationshipFeedbackQuery) WithSignal(opts ...func(*SystemComponentSignalQuery)) *SystemRelationshipFeedbackQuery {
	query := (&SystemComponentSignalClient{config: srfq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	srfq.withSignal = query
	return srfq
}

// WithRelationship tells the query-builder to eager-load the nodes that are connected to
// the "relationship" edge. The optional arguments are used to configure the query builder of the edge.
func (srfq *SystemRelationshipFeedbackQuery) WithRelationship(opts ...func(*SystemRelationshipQuery)) *SystemRelationshipFeedbackQuery {
	query := (&SystemRelationshipClient{config: srfq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	srfq.withRelationship = query
	return srfq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		RelationshipID uuid.UUID `json:"relationship_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SystemRelationshipFeedback.Query().
//		GroupBy(systemrelationshipfeedback.FieldRelationshipID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (srfq *SystemRelationshipFeedbackQuery) GroupBy(field string, fields ...string) *SystemRelationshipFeedbackGroupBy {
	srfq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SystemRelationshipFeedbackGroupBy{build: srfq}
	grbuild.flds = &srfq.ctx.Fields
	grbuild.label = systemrelationshipfeedback.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		RelationshipID uuid.UUID `json:"relationship_id,omitempty"`
//	}
//
//	client.SystemRelationshipFeedback.Query().
//		Select(systemrelationshipfeedback.FieldRelationshipID).
//		Scan(ctx, &v)
func (srfq *SystemRelationshipFeedbackQuery) Select(fields ...string) *SystemRelationshipFeedbackSelect {
	srfq.ctx.Fields = append(srfq.ctx.Fields, fields...)
	sbuild := &SystemRelationshipFeedbackSelect{SystemRelationshipFeedbackQuery: srfq}
	sbuild.label = systemrelationshipfeedback.Label
	sbuild.flds, sbuild.scan = &srfq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SystemRelationshipFeedbackSelect configured with the given aggregations.
func (srfq *SystemRelationshipFeedbackQuery) Aggregate(fns ...AggregateFunc) *SystemRelationshipFeedbackSelect {
	return srfq.Select().Aggregate(fns...)
}

func (srfq *SystemRelationshipFeedbackQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range srfq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, srfq); err != nil {
				return err
			}
		}
	}
	for _, f := range srfq.ctx.Fields {
		if !systemrelationshipfeedback.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if srfq.path != nil {
		prev, err := srfq.path(ctx)
		if err != nil {
			return err
		}
		srfq.sql = prev
	}
	return nil
}

func (srfq *SystemRelationshipFeedbackQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SystemRelationshipFeedback, error) {
	var (
		nodes       = []*SystemRelationshipFeedback{}
		_spec       = srfq.querySpec()
		loadedTypes = [2]bool{
			srfq.withSignal != nil,
			srfq.withRelationship != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SystemRelationshipFeedback).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SystemRelationshipFeedback{config: srfq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(srfq.modifiers) > 0 {
		_spec.Modifiers = srfq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, srfq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := srfq.withSignal; query != nil {
		if err := srfq.loadSignal(ctx, query, nodes, nil,
			func(n *SystemRelationshipFeedback, e *SystemComponentSignal) { n.Edges.Signal = e }); err != nil {
			return nil, err
		}
	}
	if query := srfq.withRelationship; query != nil {
		if err := srfq.loadRelationship(ctx, query, nodes, nil,
			func(n *SystemRelationshipFeedback, e *SystemRelationship) { n.Edges.Relationship = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (srfq *SystemRelationshipFeedbackQuery) loadSignal(ctx context.Context, query *SystemComponentSignalQuery, nodes []*SystemRelationshipFeedback, init func(*SystemRelationshipFeedback), assign func(*SystemRelationshipFeedback, *SystemComponentSignal)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*SystemRelationshipFeedback)
	for i := range nodes {
		fk := nodes[i].SignalID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(systemcomponentsignal.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "signal_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (srfq *SystemRelationshipFeedbackQuery) loadRelationship(ctx context.Context, query *SystemRelationshipQuery, nodes []*SystemRelationshipFeedback, init func(*SystemRelationshipFeedback), assign func(*SystemRelationshipFeedback, *SystemRelationship)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*SystemRelationshipFeedback)
	for i := range nodes {
		fk := nodes[i].RelationshipID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(systemrelationship.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "relationship_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (srfq *SystemRelationshipFeedbackQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := srfq.querySpec()
	if len(srfq.modifiers) > 0 {
		_spec.Modifiers = srfq.modifiers
	}
	_spec.Node.Columns = srfq.ctx.Fields
	if len(srfq.ctx.Fields) > 0 {
		_spec.Unique = srfq.ctx.Unique != nil && *srfq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, srfq.driver, _spec)
}

func (srfq *SystemRelationshipFeedbackQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(systemrelationshipfeedback.Table, systemrelationshipfeedback.Columns, sqlgraph.NewFieldSpec(systemrelationshipfeedback.FieldID, field.TypeUUID))
	_spec.From = srfq.sql
	if unique := srfq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if srfq.path != nil {
		_spec.Unique = true
	}
	if fields := srfq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, systemrelationshipfeedback.FieldID)
		for i := range fields {
			if fields[i] != systemrelationshipfeedback.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if srfq.withSignal != nil {
			_spec.Node.AddColumnOnce(systemrelationshipfeedback.FieldSignalID)
		}
		if srfq.withRelationship != nil {
			_spec.Node.AddColumnOnce(systemrelationshipfeedback.FieldRelationshipID)
		}
	}
	if ps := srfq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := srfq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := srfq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := srfq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (srfq *SystemRelationshipFeedbackQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(srfq.driver.Dialect())
	t1 := builder.Table(systemrelationshipfeedback.Table)
	columns := srfq.ctx.Fields
	if len(columns) == 0 {
		columns = systemrelationshipfeedback.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if srfq.sql != nil {
		selector = srfq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if srfq.ctx.Unique != nil && *srfq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range srfq.modifiers {
		m(selector)
	}
	for _, p := range srfq.predicates {
		p(selector)
	}
	for _, p := range srfq.order {
		p(selector)
	}
	if offset := srfq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := srfq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (srfq *SystemRelationshipFeedbackQuery) Modify(modifiers ...func(s *sql.Selector)) *SystemRelationshipFeedbackSelect {
	srfq.modifiers = append(srfq.modifiers, modifiers...)
	return srfq.Select()
}

// SystemRelationshipFeedbackGroupBy is the group-by builder for SystemRelationshipFeedback entities.
type SystemRelationshipFeedbackGroupBy struct {
	selector
	build *SystemRelationshipFeedbackQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (srfgb *SystemRelationshipFeedbackGroupBy) Aggregate(fns ...AggregateFunc) *SystemRelationshipFeedbackGroupBy {
	srfgb.fns = append(srfgb.fns, fns...)
	return srfgb
}

// Scan applies the selector query and scans the result into the given value.
func (srfgb *SystemRelationshipFeedbackGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, srfgb.build.ctx, ent.OpQueryGroupBy)
	if err := srfgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SystemRelationshipFeedbackQuery, *SystemRelationshipFeedbackGroupBy](ctx, srfgb.build, srfgb, srfgb.build.inters, v)
}

func (srfgb *SystemRelationshipFeedbackGroupBy) sqlScan(ctx context.Context, root *SystemRelationshipFeedbackQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(srfgb.fns))
	for _, fn := range srfgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*srfgb.flds)+len(srfgb.fns))
		for _, f := range *srfgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*srfgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := srfgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SystemRelationshipFeedbackSelect is the builder for selecting fields of SystemRelationshipFeedback entities.
type SystemRelationshipFeedbackSelect struct {
	*SystemRelationshipFeedbackQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (srfs *SystemRelationshipFeedbackSelect) Aggregate(fns ...AggregateFunc) *SystemRelationshipFeedbackSelect {
	srfs.fns = append(srfs.fns, fns...)
	return srfs
}

// Scan applies the selector query and scans the result into the given value.
func (srfs *SystemRelationshipFeedbackSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, srfs.ctx, ent.OpQuerySelect)
	if err := srfs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SystemRelationshipFeedbackQuery, *SystemRelationshipFeedbackSelect](ctx, srfs.SystemRelationshipFeedbackQuery, srfs, srfs.inters, v)
}

func (srfs *SystemRelationshipFeedbackSelect) sqlScan(ctx context.Context, root *SystemRelationshipFeedbackQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(srfs.fns))
	for _, fn := range srfs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*srfs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := srfs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (srfs *SystemRelationshipFeedbackSelect) Modify(modifiers ...func(s *sql.Selector)) *SystemRelationshipFeedbackSelect {
	srfs.modifiers = append(srfs.modifiers, modifiers...)
	return srfs
}
