// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rezible/rezible/ent/incidenteventcontributingfactor"
	"github.com/rezible/rezible/ent/predicate"
)

// IncidentEventContributingFactorDelete is the builder for deleting a IncidentEventContributingFactor entity.
type IncidentEventContributingFactorDelete struct {
	config
	hooks    []Hook
	mutation *IncidentEventContributingFactorMutation
}

// Where appends a list predicates to the IncidentEventContributingFactorDelete builder.
func (iecfd *IncidentEventContributingFactorDelete) Where(ps ...predicate.IncidentEventContributingFactor) *IncidentEventContributingFactorDelete {
	iecfd.mutation.Where(ps...)
	return iecfd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (iecfd *IncidentEventContributingFactorDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, iecfd.sqlExec, iecfd.mutation, iecfd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (iecfd *IncidentEventContributingFactorDelete) ExecX(ctx context.Context) int {
	n, err := iecfd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (iecfd *IncidentEventContributingFactorDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(incidenteventcontributingfactor.Table, sqlgraph.NewFieldSpec(incidenteventcontributingfactor.FieldID, field.TypeUUID))
	if ps := iecfd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, iecfd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	iecfd.mutation.done = true
	return affected, err
}

// IncidentEventContributingFactorDeleteOne is the builder for deleting a single IncidentEventContributingFactor entity.
type IncidentEventContributingFactorDeleteOne struct {
	iecfd *IncidentEventContributingFactorDelete
}

// Where appends a list predicates to the IncidentEventContributingFactorDelete builder.
func (iecfdo *IncidentEventContributingFactorDeleteOne) Where(ps ...predicate.IncidentEventContributingFactor) *IncidentEventContributingFactorDeleteOne {
	iecfdo.iecfd.mutation.Where(ps...)
	return iecfdo
}

// Exec executes the deletion query.
func (iecfdo *IncidentEventContributingFactorDeleteOne) Exec(ctx context.Context) error {
	n, err := iecfdo.iecfd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{incidenteventcontributingfactor.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (iecfdo *IncidentEventContributingFactorDeleteOne) ExecX(ctx context.Context) {
	if err := iecfdo.Exec(ctx); err != nil {
		panic(err)
	}
}
