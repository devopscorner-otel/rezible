// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/oncallannotation"
	"github.com/rezible/rezible/ent/oncallannotationalertfeedback"
	"github.com/rezible/rezible/ent/oncallevent"
	"github.com/rezible/rezible/ent/oncallroster"
	"github.com/rezible/rezible/ent/oncallusershifthandover"
	"github.com/rezible/rezible/ent/user"
)

// OncallAnnotationCreate is the builder for creating a OncallAnnotation entity.
type OncallAnnotationCreate struct {
	config
	mutation *OncallAnnotationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEventID sets the "event_id" field.
func (oac *OncallAnnotationCreate) SetEventID(u uuid.UUID) *OncallAnnotationCreate {
	oac.mutation.SetEventID(u)
	return oac
}

// SetRosterID sets the "roster_id" field.
func (oac *OncallAnnotationCreate) SetRosterID(u uuid.UUID) *OncallAnnotationCreate {
	oac.mutation.SetRosterID(u)
	return oac
}

// SetCreatorID sets the "creator_id" field.
func (oac *OncallAnnotationCreate) SetCreatorID(u uuid.UUID) *OncallAnnotationCreate {
	oac.mutation.SetCreatorID(u)
	return oac
}

// SetCreatedAt sets the "created_at" field.
func (oac *OncallAnnotationCreate) SetCreatedAt(t time.Time) *OncallAnnotationCreate {
	oac.mutation.SetCreatedAt(t)
	return oac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oac *OncallAnnotationCreate) SetNillableCreatedAt(t *time.Time) *OncallAnnotationCreate {
	if t != nil {
		oac.SetCreatedAt(*t)
	}
	return oac
}

// SetMinutesOccupied sets the "minutes_occupied" field.
func (oac *OncallAnnotationCreate) SetMinutesOccupied(i int) *OncallAnnotationCreate {
	oac.mutation.SetMinutesOccupied(i)
	return oac
}

// SetNotes sets the "notes" field.
func (oac *OncallAnnotationCreate) SetNotes(s string) *OncallAnnotationCreate {
	oac.mutation.SetNotes(s)
	return oac
}

// SetID sets the "id" field.
func (oac *OncallAnnotationCreate) SetID(u uuid.UUID) *OncallAnnotationCreate {
	oac.mutation.SetID(u)
	return oac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (oac *OncallAnnotationCreate) SetNillableID(u *uuid.UUID) *OncallAnnotationCreate {
	if u != nil {
		oac.SetID(*u)
	}
	return oac
}

// SetEvent sets the "event" edge to the OncallEvent entity.
func (oac *OncallAnnotationCreate) SetEvent(o *OncallEvent) *OncallAnnotationCreate {
	return oac.SetEventID(o.ID)
}

// SetRoster sets the "roster" edge to the OncallRoster entity.
func (oac *OncallAnnotationCreate) SetRoster(o *OncallRoster) *OncallAnnotationCreate {
	return oac.SetRosterID(o.ID)
}

// SetCreator sets the "creator" edge to the User entity.
func (oac *OncallAnnotationCreate) SetCreator(u *User) *OncallAnnotationCreate {
	return oac.SetCreatorID(u.ID)
}

// SetAlertFeedbackID sets the "alert_feedback" edge to the OncallAnnotationAlertFeedback entity by ID.
func (oac *OncallAnnotationCreate) SetAlertFeedbackID(id uuid.UUID) *OncallAnnotationCreate {
	oac.mutation.SetAlertFeedbackID(id)
	return oac
}

// SetNillableAlertFeedbackID sets the "alert_feedback" edge to the OncallAnnotationAlertFeedback entity by ID if the given value is not nil.
func (oac *OncallAnnotationCreate) SetNillableAlertFeedbackID(id *uuid.UUID) *OncallAnnotationCreate {
	if id != nil {
		oac = oac.SetAlertFeedbackID(*id)
	}
	return oac
}

// SetAlertFeedback sets the "alert_feedback" edge to the OncallAnnotationAlertFeedback entity.
func (oac *OncallAnnotationCreate) SetAlertFeedback(o *OncallAnnotationAlertFeedback) *OncallAnnotationCreate {
	return oac.SetAlertFeedbackID(o.ID)
}

// AddHandoverIDs adds the "handovers" edge to the OncallUserShiftHandover entity by IDs.
func (oac *OncallAnnotationCreate) AddHandoverIDs(ids ...uuid.UUID) *OncallAnnotationCreate {
	oac.mutation.AddHandoverIDs(ids...)
	return oac
}

// AddHandovers adds the "handovers" edges to the OncallUserShiftHandover entity.
func (oac *OncallAnnotationCreate) AddHandovers(o ...*OncallUserShiftHandover) *OncallAnnotationCreate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oac.AddHandoverIDs(ids...)
}

// Mutation returns the OncallAnnotationMutation object of the builder.
func (oac *OncallAnnotationCreate) Mutation() *OncallAnnotationMutation {
	return oac.mutation
}

// Save creates the OncallAnnotation in the database.
func (oac *OncallAnnotationCreate) Save(ctx context.Context) (*OncallAnnotation, error) {
	oac.defaults()
	return withHooks(ctx, oac.sqlSave, oac.mutation, oac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oac *OncallAnnotationCreate) SaveX(ctx context.Context) *OncallAnnotation {
	v, err := oac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oac *OncallAnnotationCreate) Exec(ctx context.Context) error {
	_, err := oac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oac *OncallAnnotationCreate) ExecX(ctx context.Context) {
	if err := oac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oac *OncallAnnotationCreate) defaults() {
	if _, ok := oac.mutation.CreatedAt(); !ok {
		v := oncallannotation.DefaultCreatedAt()
		oac.mutation.SetCreatedAt(v)
	}
	if _, ok := oac.mutation.ID(); !ok {
		v := oncallannotation.DefaultID()
		oac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oac *OncallAnnotationCreate) check() error {
	if _, ok := oac.mutation.EventID(); !ok {
		return &ValidationError{Name: "event_id", err: errors.New(`ent: missing required field "OncallAnnotation.event_id"`)}
	}
	if _, ok := oac.mutation.RosterID(); !ok {
		return &ValidationError{Name: "roster_id", err: errors.New(`ent: missing required field "OncallAnnotation.roster_id"`)}
	}
	if _, ok := oac.mutation.CreatorID(); !ok {
		return &ValidationError{Name: "creator_id", err: errors.New(`ent: missing required field "OncallAnnotation.creator_id"`)}
	}
	if _, ok := oac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OncallAnnotation.created_at"`)}
	}
	if _, ok := oac.mutation.MinutesOccupied(); !ok {
		return &ValidationError{Name: "minutes_occupied", err: errors.New(`ent: missing required field "OncallAnnotation.minutes_occupied"`)}
	}
	if _, ok := oac.mutation.Notes(); !ok {
		return &ValidationError{Name: "notes", err: errors.New(`ent: missing required field "OncallAnnotation.notes"`)}
	}
	if len(oac.mutation.EventIDs()) == 0 {
		return &ValidationError{Name: "event", err: errors.New(`ent: missing required edge "OncallAnnotation.event"`)}
	}
	if len(oac.mutation.RosterIDs()) == 0 {
		return &ValidationError{Name: "roster", err: errors.New(`ent: missing required edge "OncallAnnotation.roster"`)}
	}
	if len(oac.mutation.CreatorIDs()) == 0 {
		return &ValidationError{Name: "creator", err: errors.New(`ent: missing required edge "OncallAnnotation.creator"`)}
	}
	return nil
}

func (oac *OncallAnnotationCreate) sqlSave(ctx context.Context) (*OncallAnnotation, error) {
	if err := oac.check(); err != nil {
		return nil, err
	}
	_node, _spec := oac.createSpec()
	if err := sqlgraph.CreateNode(ctx, oac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	oac.mutation.id = &_node.ID
	oac.mutation.done = true
	return _node, nil
}

func (oac *OncallAnnotationCreate) createSpec() (*OncallAnnotation, *sqlgraph.CreateSpec) {
	var (
		_node = &OncallAnnotation{config: oac.config}
		_spec = sqlgraph.NewCreateSpec(oncallannotation.Table, sqlgraph.NewFieldSpec(oncallannotation.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = oac.conflict
	if id, ok := oac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := oac.mutation.CreatedAt(); ok {
		_spec.SetField(oncallannotation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := oac.mutation.MinutesOccupied(); ok {
		_spec.SetField(oncallannotation.FieldMinutesOccupied, field.TypeInt, value)
		_node.MinutesOccupied = value
	}
	if value, ok := oac.mutation.Notes(); ok {
		_spec.SetField(oncallannotation.FieldNotes, field.TypeString, value)
		_node.Notes = value
	}
	if nodes := oac.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallannotation.EventTable,
			Columns: []string{oncallannotation.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallevent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EventID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oac.mutation.RosterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallannotation.RosterTable,
			Columns: []string{oncallannotation.RosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RosterID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oac.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallannotation.CreatorTable,
			Columns: []string{oncallannotation.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatorID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oac.mutation.AlertFeedbackIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oncallannotation.AlertFeedbackTable,
			Columns: []string{oncallannotation.AlertFeedbackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallannotationalertfeedback.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oac.mutation.HandoversIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   oncallannotation.HandoversTable,
			Columns: oncallannotation.HandoversPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallusershifthandover.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OncallAnnotation.Create().
//		SetEventID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OncallAnnotationUpsert) {
//			SetEventID(v+v).
//		}).
//		Exec(ctx)
func (oac *OncallAnnotationCreate) OnConflict(opts ...sql.ConflictOption) *OncallAnnotationUpsertOne {
	oac.conflict = opts
	return &OncallAnnotationUpsertOne{
		create: oac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OncallAnnotation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oac *OncallAnnotationCreate) OnConflictColumns(columns ...string) *OncallAnnotationUpsertOne {
	oac.conflict = append(oac.conflict, sql.ConflictColumns(columns...))
	return &OncallAnnotationUpsertOne{
		create: oac,
	}
}

type (
	// OncallAnnotationUpsertOne is the builder for "upsert"-ing
	//  one OncallAnnotation node.
	OncallAnnotationUpsertOne struct {
		create *OncallAnnotationCreate
	}

	// OncallAnnotationUpsert is the "OnConflict" setter.
	OncallAnnotationUpsert struct {
		*sql.UpdateSet
	}
)

// SetEventID sets the "event_id" field.
func (u *OncallAnnotationUpsert) SetEventID(v uuid.UUID) *OncallAnnotationUpsert {
	u.Set(oncallannotation.FieldEventID, v)
	return u
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *OncallAnnotationUpsert) UpdateEventID() *OncallAnnotationUpsert {
	u.SetExcluded(oncallannotation.FieldEventID)
	return u
}

// SetRosterID sets the "roster_id" field.
func (u *OncallAnnotationUpsert) SetRosterID(v uuid.UUID) *OncallAnnotationUpsert {
	u.Set(oncallannotation.FieldRosterID, v)
	return u
}

// UpdateRosterID sets the "roster_id" field to the value that was provided on create.
func (u *OncallAnnotationUpsert) UpdateRosterID() *OncallAnnotationUpsert {
	u.SetExcluded(oncallannotation.FieldRosterID)
	return u
}

// SetCreatorID sets the "creator_id" field.
func (u *OncallAnnotationUpsert) SetCreatorID(v uuid.UUID) *OncallAnnotationUpsert {
	u.Set(oncallannotation.FieldCreatorID, v)
	return u
}

// UpdateCreatorID sets the "creator_id" field to the value that was provided on create.
func (u *OncallAnnotationUpsert) UpdateCreatorID() *OncallAnnotationUpsert {
	u.SetExcluded(oncallannotation.FieldCreatorID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *OncallAnnotationUpsert) SetCreatedAt(v time.Time) *OncallAnnotationUpsert {
	u.Set(oncallannotation.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OncallAnnotationUpsert) UpdateCreatedAt() *OncallAnnotationUpsert {
	u.SetExcluded(oncallannotation.FieldCreatedAt)
	return u
}

// SetMinutesOccupied sets the "minutes_occupied" field.
func (u *OncallAnnotationUpsert) SetMinutesOccupied(v int) *OncallAnnotationUpsert {
	u.Set(oncallannotation.FieldMinutesOccupied, v)
	return u
}

// UpdateMinutesOccupied sets the "minutes_occupied" field to the value that was provided on create.
func (u *OncallAnnotationUpsert) UpdateMinutesOccupied() *OncallAnnotationUpsert {
	u.SetExcluded(oncallannotation.FieldMinutesOccupied)
	return u
}

// AddMinutesOccupied adds v to the "minutes_occupied" field.
func (u *OncallAnnotationUpsert) AddMinutesOccupied(v int) *OncallAnnotationUpsert {
	u.Add(oncallannotation.FieldMinutesOccupied, v)
	return u
}

// SetNotes sets the "notes" field.
func (u *OncallAnnotationUpsert) SetNotes(v string) *OncallAnnotationUpsert {
	u.Set(oncallannotation.FieldNotes, v)
	return u
}

// UpdateNotes sets the "notes" field to the value that was provided on create.
func (u *OncallAnnotationUpsert) UpdateNotes() *OncallAnnotationUpsert {
	u.SetExcluded(oncallannotation.FieldNotes)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OncallAnnotation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oncallannotation.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OncallAnnotationUpsertOne) UpdateNewValues() *OncallAnnotationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(oncallannotation.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OncallAnnotation.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OncallAnnotationUpsertOne) Ignore() *OncallAnnotationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OncallAnnotationUpsertOne) DoNothing() *OncallAnnotationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OncallAnnotationCreate.OnConflict
// documentation for more info.
func (u *OncallAnnotationUpsertOne) Update(set func(*OncallAnnotationUpsert)) *OncallAnnotationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OncallAnnotationUpsert{UpdateSet: update})
	}))
	return u
}

// SetEventID sets the "event_id" field.
func (u *OncallAnnotationUpsertOne) SetEventID(v uuid.UUID) *OncallAnnotationUpsertOne {
	return u.Update(func(s *OncallAnnotationUpsert) {
		s.SetEventID(v)
	})
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *OncallAnnotationUpsertOne) UpdateEventID() *OncallAnnotationUpsertOne {
	return u.Update(func(s *OncallAnnotationUpsert) {
		s.UpdateEventID()
	})
}

// SetRosterID sets the "roster_id" field.
func (u *OncallAnnotationUpsertOne) SetRosterID(v uuid.UUID) *OncallAnnotationUpsertOne {
	return u.Update(func(s *OncallAnnotationUpsert) {
		s.SetRosterID(v)
	})
}

// UpdateRosterID sets the "roster_id" field to the value that was provided on create.
func (u *OncallAnnotationUpsertOne) UpdateRosterID() *OncallAnnotationUpsertOne {
	return u.Update(func(s *OncallAnnotationUpsert) {
		s.UpdateRosterID()
	})
}

// SetCreatorID sets the "creator_id" field.
func (u *OncallAnnotationUpsertOne) SetCreatorID(v uuid.UUID) *OncallAnnotationUpsertOne {
	return u.Update(func(s *OncallAnnotationUpsert) {
		s.SetCreatorID(v)
	})
}

// UpdateCreatorID sets the "creator_id" field to the value that was provided on create.
func (u *OncallAnnotationUpsertOne) UpdateCreatorID() *OncallAnnotationUpsertOne {
	return u.Update(func(s *OncallAnnotationUpsert) {
		s.UpdateCreatorID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *OncallAnnotationUpsertOne) SetCreatedAt(v time.Time) *OncallAnnotationUpsertOne {
	return u.Update(func(s *OncallAnnotationUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OncallAnnotationUpsertOne) UpdateCreatedAt() *OncallAnnotationUpsertOne {
	return u.Update(func(s *OncallAnnotationUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetMinutesOccupied sets the "minutes_occupied" field.
func (u *OncallAnnotationUpsertOne) SetMinutesOccupied(v int) *OncallAnnotationUpsertOne {
	return u.Update(func(s *OncallAnnotationUpsert) {
		s.SetMinutesOccupied(v)
	})
}

// AddMinutesOccupied adds v to the "minutes_occupied" field.
func (u *OncallAnnotationUpsertOne) AddMinutesOccupied(v int) *OncallAnnotationUpsertOne {
	return u.Update(func(s *OncallAnnotationUpsert) {
		s.AddMinutesOccupied(v)
	})
}

// UpdateMinutesOccupied sets the "minutes_occupied" field to the value that was provided on create.
func (u *OncallAnnotationUpsertOne) UpdateMinutesOccupied() *OncallAnnotationUpsertOne {
	return u.Update(func(s *OncallAnnotationUpsert) {
		s.UpdateMinutesOccupied()
	})
}

// SetNotes sets the "notes" field.
func (u *OncallAnnotationUpsertOne) SetNotes(v string) *OncallAnnotationUpsertOne {
	return u.Update(func(s *OncallAnnotationUpsert) {
		s.SetNotes(v)
	})
}

// UpdateNotes sets the "notes" field to the value that was provided on create.
func (u *OncallAnnotationUpsertOne) UpdateNotes() *OncallAnnotationUpsertOne {
	return u.Update(func(s *OncallAnnotationUpsert) {
		s.UpdateNotes()
	})
}

// Exec executes the query.
func (u *OncallAnnotationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OncallAnnotationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OncallAnnotationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OncallAnnotationUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: OncallAnnotationUpsertOne.ID is not supported by MySQL driver. Use OncallAnnotationUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OncallAnnotationUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OncallAnnotationCreateBulk is the builder for creating many OncallAnnotation entities in bulk.
type OncallAnnotationCreateBulk struct {
	config
	err      error
	builders []*OncallAnnotationCreate
	conflict []sql.ConflictOption
}

// Save creates the OncallAnnotation entities in the database.
func (oacb *OncallAnnotationCreateBulk) Save(ctx context.Context) ([]*OncallAnnotation, error) {
	if oacb.err != nil {
		return nil, oacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(oacb.builders))
	nodes := make([]*OncallAnnotation, len(oacb.builders))
	mutators := make([]Mutator, len(oacb.builders))
	for i := range oacb.builders {
		func(i int, root context.Context) {
			builder := oacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OncallAnnotationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = oacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oacb *OncallAnnotationCreateBulk) SaveX(ctx context.Context) []*OncallAnnotation {
	v, err := oacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oacb *OncallAnnotationCreateBulk) Exec(ctx context.Context) error {
	_, err := oacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oacb *OncallAnnotationCreateBulk) ExecX(ctx context.Context) {
	if err := oacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OncallAnnotation.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OncallAnnotationUpsert) {
//			SetEventID(v+v).
//		}).
//		Exec(ctx)
func (oacb *OncallAnnotationCreateBulk) OnConflict(opts ...sql.ConflictOption) *OncallAnnotationUpsertBulk {
	oacb.conflict = opts
	return &OncallAnnotationUpsertBulk{
		create: oacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OncallAnnotation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oacb *OncallAnnotationCreateBulk) OnConflictColumns(columns ...string) *OncallAnnotationUpsertBulk {
	oacb.conflict = append(oacb.conflict, sql.ConflictColumns(columns...))
	return &OncallAnnotationUpsertBulk{
		create: oacb,
	}
}

// OncallAnnotationUpsertBulk is the builder for "upsert"-ing
// a bulk of OncallAnnotation nodes.
type OncallAnnotationUpsertBulk struct {
	create *OncallAnnotationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OncallAnnotation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oncallannotation.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OncallAnnotationUpsertBulk) UpdateNewValues() *OncallAnnotationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(oncallannotation.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OncallAnnotation.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OncallAnnotationUpsertBulk) Ignore() *OncallAnnotationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OncallAnnotationUpsertBulk) DoNothing() *OncallAnnotationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OncallAnnotationCreateBulk.OnConflict
// documentation for more info.
func (u *OncallAnnotationUpsertBulk) Update(set func(*OncallAnnotationUpsert)) *OncallAnnotationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OncallAnnotationUpsert{UpdateSet: update})
	}))
	return u
}

// SetEventID sets the "event_id" field.
func (u *OncallAnnotationUpsertBulk) SetEventID(v uuid.UUID) *OncallAnnotationUpsertBulk {
	return u.Update(func(s *OncallAnnotationUpsert) {
		s.SetEventID(v)
	})
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *OncallAnnotationUpsertBulk) UpdateEventID() *OncallAnnotationUpsertBulk {
	return u.Update(func(s *OncallAnnotationUpsert) {
		s.UpdateEventID()
	})
}

// SetRosterID sets the "roster_id" field.
func (u *OncallAnnotationUpsertBulk) SetRosterID(v uuid.UUID) *OncallAnnotationUpsertBulk {
	return u.Update(func(s *OncallAnnotationUpsert) {
		s.SetRosterID(v)
	})
}

// UpdateRosterID sets the "roster_id" field to the value that was provided on create.
func (u *OncallAnnotationUpsertBulk) UpdateRosterID() *OncallAnnotationUpsertBulk {
	return u.Update(func(s *OncallAnnotationUpsert) {
		s.UpdateRosterID()
	})
}

// SetCreatorID sets the "creator_id" field.
func (u *OncallAnnotationUpsertBulk) SetCreatorID(v uuid.UUID) *OncallAnnotationUpsertBulk {
	return u.Update(func(s *OncallAnnotationUpsert) {
		s.SetCreatorID(v)
	})
}

// UpdateCreatorID sets the "creator_id" field to the value that was provided on create.
func (u *OncallAnnotationUpsertBulk) UpdateCreatorID() *OncallAnnotationUpsertBulk {
	return u.Update(func(s *OncallAnnotationUpsert) {
		s.UpdateCreatorID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *OncallAnnotationUpsertBulk) SetCreatedAt(v time.Time) *OncallAnnotationUpsertBulk {
	return u.Update(func(s *OncallAnnotationUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OncallAnnotationUpsertBulk) UpdateCreatedAt() *OncallAnnotationUpsertBulk {
	return u.Update(func(s *OncallAnnotationUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetMinutesOccupied sets the "minutes_occupied" field.
func (u *OncallAnnotationUpsertBulk) SetMinutesOccupied(v int) *OncallAnnotationUpsertBulk {
	return u.Update(func(s *OncallAnnotationUpsert) {
		s.SetMinutesOccupied(v)
	})
}

// AddMinutesOccupied adds v to the "minutes_occupied" field.
func (u *OncallAnnotationUpsertBulk) AddMinutesOccupied(v int) *OncallAnnotationUpsertBulk {
	return u.Update(func(s *OncallAnnotationUpsert) {
		s.AddMinutesOccupied(v)
	})
}

// UpdateMinutesOccupied sets the "minutes_occupied" field to the value that was provided on create.
func (u *OncallAnnotationUpsertBulk) UpdateMinutesOccupied() *OncallAnnotationUpsertBulk {
	return u.Update(func(s *OncallAnnotationUpsert) {
		s.UpdateMinutesOccupied()
	})
}

// SetNotes sets the "notes" field.
func (u *OncallAnnotationUpsertBulk) SetNotes(v string) *OncallAnnotationUpsertBulk {
	return u.Update(func(s *OncallAnnotationUpsert) {
		s.SetNotes(v)
	})
}

// UpdateNotes sets the "notes" field to the value that was provided on create.
func (u *OncallAnnotationUpsertBulk) UpdateNotes() *OncallAnnotationUpsertBulk {
	return u.Update(func(s *OncallAnnotationUpsert) {
		s.UpdateNotes()
	})
}

// Exec executes the query.
func (u *OncallAnnotationUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OncallAnnotationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OncallAnnotationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OncallAnnotationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
