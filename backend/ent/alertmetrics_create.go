// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/alert"
	"github.com/rezible/rezible/ent/alertmetrics"
)

// AlertMetricsCreate is the builder for creating a AlertMetrics entity.
type AlertMetricsCreate struct {
	config
	mutation *AlertMetricsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAlertID sets the "alert_id" field.
func (amc *AlertMetricsCreate) SetAlertID(u uuid.UUID) *AlertMetricsCreate {
	amc.mutation.SetAlertID(u)
	return amc
}

// SetID sets the "id" field.
func (amc *AlertMetricsCreate) SetID(u uuid.UUID) *AlertMetricsCreate {
	amc.mutation.SetID(u)
	return amc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (amc *AlertMetricsCreate) SetNillableID(u *uuid.UUID) *AlertMetricsCreate {
	if u != nil {
		amc.SetID(*u)
	}
	return amc
}

// SetAlert sets the "alert" edge to the Alert entity.
func (amc *AlertMetricsCreate) SetAlert(a *Alert) *AlertMetricsCreate {
	return amc.SetAlertID(a.ID)
}

// Mutation returns the AlertMetricsMutation object of the builder.
func (amc *AlertMetricsCreate) Mutation() *AlertMetricsMutation {
	return amc.mutation
}

// Save creates the AlertMetrics in the database.
func (amc *AlertMetricsCreate) Save(ctx context.Context) (*AlertMetrics, error) {
	amc.defaults()
	return withHooks(ctx, amc.sqlSave, amc.mutation, amc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (amc *AlertMetricsCreate) SaveX(ctx context.Context) *AlertMetrics {
	v, err := amc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (amc *AlertMetricsCreate) Exec(ctx context.Context) error {
	_, err := amc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amc *AlertMetricsCreate) ExecX(ctx context.Context) {
	if err := amc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amc *AlertMetricsCreate) defaults() {
	if _, ok := amc.mutation.ID(); !ok {
		v := alertmetrics.DefaultID()
		amc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (amc *AlertMetricsCreate) check() error {
	if _, ok := amc.mutation.AlertID(); !ok {
		return &ValidationError{Name: "alert_id", err: errors.New(`ent: missing required field "AlertMetrics.alert_id"`)}
	}
	if len(amc.mutation.AlertIDs()) == 0 {
		return &ValidationError{Name: "alert", err: errors.New(`ent: missing required edge "AlertMetrics.alert"`)}
	}
	return nil
}

func (amc *AlertMetricsCreate) sqlSave(ctx context.Context) (*AlertMetrics, error) {
	if err := amc.check(); err != nil {
		return nil, err
	}
	_node, _spec := amc.createSpec()
	if err := sqlgraph.CreateNode(ctx, amc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	amc.mutation.id = &_node.ID
	amc.mutation.done = true
	return _node, nil
}

func (amc *AlertMetricsCreate) createSpec() (*AlertMetrics, *sqlgraph.CreateSpec) {
	var (
		_node = &AlertMetrics{config: amc.config}
		_spec = sqlgraph.NewCreateSpec(alertmetrics.Table, sqlgraph.NewFieldSpec(alertmetrics.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = amc.conflict
	if id, ok := amc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if nodes := amc.mutation.AlertIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   alertmetrics.AlertTable,
			Columns: []string{alertmetrics.AlertColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alert.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AlertID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AlertMetrics.Create().
//		SetAlertID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AlertMetricsUpsert) {
//			SetAlertID(v+v).
//		}).
//		Exec(ctx)
func (amc *AlertMetricsCreate) OnConflict(opts ...sql.ConflictOption) *AlertMetricsUpsertOne {
	amc.conflict = opts
	return &AlertMetricsUpsertOne{
		create: amc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AlertMetrics.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (amc *AlertMetricsCreate) OnConflictColumns(columns ...string) *AlertMetricsUpsertOne {
	amc.conflict = append(amc.conflict, sql.ConflictColumns(columns...))
	return &AlertMetricsUpsertOne{
		create: amc,
	}
}

type (
	// AlertMetricsUpsertOne is the builder for "upsert"-ing
	//  one AlertMetrics node.
	AlertMetricsUpsertOne struct {
		create *AlertMetricsCreate
	}

	// AlertMetricsUpsert is the "OnConflict" setter.
	AlertMetricsUpsert struct {
		*sql.UpdateSet
	}
)

// SetAlertID sets the "alert_id" field.
func (u *AlertMetricsUpsert) SetAlertID(v uuid.UUID) *AlertMetricsUpsert {
	u.Set(alertmetrics.FieldAlertID, v)
	return u
}

// UpdateAlertID sets the "alert_id" field to the value that was provided on create.
func (u *AlertMetricsUpsert) UpdateAlertID() *AlertMetricsUpsert {
	u.SetExcluded(alertmetrics.FieldAlertID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AlertMetrics.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(alertmetrics.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AlertMetricsUpsertOne) UpdateNewValues() *AlertMetricsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(alertmetrics.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AlertMetrics.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AlertMetricsUpsertOne) Ignore() *AlertMetricsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AlertMetricsUpsertOne) DoNothing() *AlertMetricsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AlertMetricsCreate.OnConflict
// documentation for more info.
func (u *AlertMetricsUpsertOne) Update(set func(*AlertMetricsUpsert)) *AlertMetricsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AlertMetricsUpsert{UpdateSet: update})
	}))
	return u
}

// SetAlertID sets the "alert_id" field.
func (u *AlertMetricsUpsertOne) SetAlertID(v uuid.UUID) *AlertMetricsUpsertOne {
	return u.Update(func(s *AlertMetricsUpsert) {
		s.SetAlertID(v)
	})
}

// UpdateAlertID sets the "alert_id" field to the value that was provided on create.
func (u *AlertMetricsUpsertOne) UpdateAlertID() *AlertMetricsUpsertOne {
	return u.Update(func(s *AlertMetricsUpsert) {
		s.UpdateAlertID()
	})
}

// Exec executes the query.
func (u *AlertMetricsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AlertMetricsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AlertMetricsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AlertMetricsUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: AlertMetricsUpsertOne.ID is not supported by MySQL driver. Use AlertMetricsUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AlertMetricsUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AlertMetricsCreateBulk is the builder for creating many AlertMetrics entities in bulk.
type AlertMetricsCreateBulk struct {
	config
	err      error
	builders []*AlertMetricsCreate
	conflict []sql.ConflictOption
}

// Save creates the AlertMetrics entities in the database.
func (amcb *AlertMetricsCreateBulk) Save(ctx context.Context) ([]*AlertMetrics, error) {
	if amcb.err != nil {
		return nil, amcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(amcb.builders))
	nodes := make([]*AlertMetrics, len(amcb.builders))
	mutators := make([]Mutator, len(amcb.builders))
	for i := range amcb.builders {
		func(i int, root context.Context) {
			builder := amcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AlertMetricsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, amcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = amcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, amcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, amcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (amcb *AlertMetricsCreateBulk) SaveX(ctx context.Context) []*AlertMetrics {
	v, err := amcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (amcb *AlertMetricsCreateBulk) Exec(ctx context.Context) error {
	_, err := amcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amcb *AlertMetricsCreateBulk) ExecX(ctx context.Context) {
	if err := amcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AlertMetrics.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AlertMetricsUpsert) {
//			SetAlertID(v+v).
//		}).
//		Exec(ctx)
func (amcb *AlertMetricsCreateBulk) OnConflict(opts ...sql.ConflictOption) *AlertMetricsUpsertBulk {
	amcb.conflict = opts
	return &AlertMetricsUpsertBulk{
		create: amcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AlertMetrics.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (amcb *AlertMetricsCreateBulk) OnConflictColumns(columns ...string) *AlertMetricsUpsertBulk {
	amcb.conflict = append(amcb.conflict, sql.ConflictColumns(columns...))
	return &AlertMetricsUpsertBulk{
		create: amcb,
	}
}

// AlertMetricsUpsertBulk is the builder for "upsert"-ing
// a bulk of AlertMetrics nodes.
type AlertMetricsUpsertBulk struct {
	create *AlertMetricsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AlertMetrics.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(alertmetrics.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AlertMetricsUpsertBulk) UpdateNewValues() *AlertMetricsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(alertmetrics.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AlertMetrics.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AlertMetricsUpsertBulk) Ignore() *AlertMetricsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AlertMetricsUpsertBulk) DoNothing() *AlertMetricsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AlertMetricsCreateBulk.OnConflict
// documentation for more info.
func (u *AlertMetricsUpsertBulk) Update(set func(*AlertMetricsUpsert)) *AlertMetricsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AlertMetricsUpsert{UpdateSet: update})
	}))
	return u
}

// SetAlertID sets the "alert_id" field.
func (u *AlertMetricsUpsertBulk) SetAlertID(v uuid.UUID) *AlertMetricsUpsertBulk {
	return u.Update(func(s *AlertMetricsUpsert) {
		s.SetAlertID(v)
	})
}

// UpdateAlertID sets the "alert_id" field to the value that was provided on create.
func (u *AlertMetricsUpsertBulk) UpdateAlertID() *AlertMetricsUpsertBulk {
	return u.Update(func(s *AlertMetricsUpsert) {
		s.UpdateAlertID()
	})
}

// Exec executes the query.
func (u *AlertMetricsUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AlertMetricsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AlertMetricsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AlertMetricsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
