// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/oncallannotation"
	"github.com/rezible/rezible/ent/oncallannotationalertfeedback"
	"github.com/rezible/rezible/ent/predicate"
)

// OncallAnnotationAlertFeedbackQuery is the builder for querying OncallAnnotationAlertFeedback entities.
type OncallAnnotationAlertFeedbackQuery struct {
	config
	ctx            *QueryContext
	order          []oncallannotationalertfeedback.OrderOption
	inters         []Interceptor
	predicates     []predicate.OncallAnnotationAlertFeedback
	withAnnotation *OncallAnnotationQuery
	modifiers      []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OncallAnnotationAlertFeedbackQuery builder.
func (oaafq *OncallAnnotationAlertFeedbackQuery) Where(ps ...predicate.OncallAnnotationAlertFeedback) *OncallAnnotationAlertFeedbackQuery {
	oaafq.predicates = append(oaafq.predicates, ps...)
	return oaafq
}

// Limit the number of records to be returned by this query.
func (oaafq *OncallAnnotationAlertFeedbackQuery) Limit(limit int) *OncallAnnotationAlertFeedbackQuery {
	oaafq.ctx.Limit = &limit
	return oaafq
}

// Offset to start from.
func (oaafq *OncallAnnotationAlertFeedbackQuery) Offset(offset int) *OncallAnnotationAlertFeedbackQuery {
	oaafq.ctx.Offset = &offset
	return oaafq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (oaafq *OncallAnnotationAlertFeedbackQuery) Unique(unique bool) *OncallAnnotationAlertFeedbackQuery {
	oaafq.ctx.Unique = &unique
	return oaafq
}

// Order specifies how the records should be ordered.
func (oaafq *OncallAnnotationAlertFeedbackQuery) Order(o ...oncallannotationalertfeedback.OrderOption) *OncallAnnotationAlertFeedbackQuery {
	oaafq.order = append(oaafq.order, o...)
	return oaafq
}

// QueryAnnotation chains the current query on the "annotation" edge.
func (oaafq *OncallAnnotationAlertFeedbackQuery) QueryAnnotation() *OncallAnnotationQuery {
	query := (&OncallAnnotationClient{config: oaafq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oaafq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oaafq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(oncallannotationalertfeedback.Table, oncallannotationalertfeedback.FieldID, selector),
			sqlgraph.To(oncallannotation.Table, oncallannotation.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, oncallannotationalertfeedback.AnnotationTable, oncallannotationalertfeedback.AnnotationColumn),
		)
		fromU = sqlgraph.SetNeighbors(oaafq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first OncallAnnotationAlertFeedback entity from the query.
// Returns a *NotFoundError when no OncallAnnotationAlertFeedback was found.
func (oaafq *OncallAnnotationAlertFeedbackQuery) First(ctx context.Context) (*OncallAnnotationAlertFeedback, error) {
	nodes, err := oaafq.Limit(1).All(setContextOp(ctx, oaafq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{oncallannotationalertfeedback.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (oaafq *OncallAnnotationAlertFeedbackQuery) FirstX(ctx context.Context) *OncallAnnotationAlertFeedback {
	node, err := oaafq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first OncallAnnotationAlertFeedback ID from the query.
// Returns a *NotFoundError when no OncallAnnotationAlertFeedback ID was found.
func (oaafq *OncallAnnotationAlertFeedbackQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = oaafq.Limit(1).IDs(setContextOp(ctx, oaafq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{oncallannotationalertfeedback.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (oaafq *OncallAnnotationAlertFeedbackQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := oaafq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single OncallAnnotationAlertFeedback entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one OncallAnnotationAlertFeedback entity is found.
// Returns a *NotFoundError when no OncallAnnotationAlertFeedback entities are found.
func (oaafq *OncallAnnotationAlertFeedbackQuery) Only(ctx context.Context) (*OncallAnnotationAlertFeedback, error) {
	nodes, err := oaafq.Limit(2).All(setContextOp(ctx, oaafq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{oncallannotationalertfeedback.Label}
	default:
		return nil, &NotSingularError{oncallannotationalertfeedback.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (oaafq *OncallAnnotationAlertFeedbackQuery) OnlyX(ctx context.Context) *OncallAnnotationAlertFeedback {
	node, err := oaafq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only OncallAnnotationAlertFeedback ID in the query.
// Returns a *NotSingularError when more than one OncallAnnotationAlertFeedback ID is found.
// Returns a *NotFoundError when no entities are found.
func (oaafq *OncallAnnotationAlertFeedbackQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = oaafq.Limit(2).IDs(setContextOp(ctx, oaafq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{oncallannotationalertfeedback.Label}
	default:
		err = &NotSingularError{oncallannotationalertfeedback.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (oaafq *OncallAnnotationAlertFeedbackQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := oaafq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OncallAnnotationAlertFeedbacks.
func (oaafq *OncallAnnotationAlertFeedbackQuery) All(ctx context.Context) ([]*OncallAnnotationAlertFeedback, error) {
	ctx = setContextOp(ctx, oaafq.ctx, ent.OpQueryAll)
	if err := oaafq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*OncallAnnotationAlertFeedback, *OncallAnnotationAlertFeedbackQuery]()
	return withInterceptors[[]*OncallAnnotationAlertFeedback](ctx, oaafq, qr, oaafq.inters)
}

// AllX is like All, but panics if an error occurs.
func (oaafq *OncallAnnotationAlertFeedbackQuery) AllX(ctx context.Context) []*OncallAnnotationAlertFeedback {
	nodes, err := oaafq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of OncallAnnotationAlertFeedback IDs.
func (oaafq *OncallAnnotationAlertFeedbackQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if oaafq.ctx.Unique == nil && oaafq.path != nil {
		oaafq.Unique(true)
	}
	ctx = setContextOp(ctx, oaafq.ctx, ent.OpQueryIDs)
	if err = oaafq.Select(oncallannotationalertfeedback.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (oaafq *OncallAnnotationAlertFeedbackQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := oaafq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (oaafq *OncallAnnotationAlertFeedbackQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, oaafq.ctx, ent.OpQueryCount)
	if err := oaafq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, oaafq, querierCount[*OncallAnnotationAlertFeedbackQuery](), oaafq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (oaafq *OncallAnnotationAlertFeedbackQuery) CountX(ctx context.Context) int {
	count, err := oaafq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (oaafq *OncallAnnotationAlertFeedbackQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, oaafq.ctx, ent.OpQueryExist)
	switch _, err := oaafq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (oaafq *OncallAnnotationAlertFeedbackQuery) ExistX(ctx context.Context) bool {
	exist, err := oaafq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OncallAnnotationAlertFeedbackQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (oaafq *OncallAnnotationAlertFeedbackQuery) Clone() *OncallAnnotationAlertFeedbackQuery {
	if oaafq == nil {
		return nil
	}
	return &OncallAnnotationAlertFeedbackQuery{
		config:         oaafq.config,
		ctx:            oaafq.ctx.Clone(),
		order:          append([]oncallannotationalertfeedback.OrderOption{}, oaafq.order...),
		inters:         append([]Interceptor{}, oaafq.inters...),
		predicates:     append([]predicate.OncallAnnotationAlertFeedback{}, oaafq.predicates...),
		withAnnotation: oaafq.withAnnotation.Clone(),
		// clone intermediate query.
		sql:       oaafq.sql.Clone(),
		path:      oaafq.path,
		modifiers: append([]func(*sql.Selector){}, oaafq.modifiers...),
	}
}

// WithAnnotation tells the query-builder to eager-load the nodes that are connected to
// the "annotation" edge. The optional arguments are used to configure the query builder of the edge.
func (oaafq *OncallAnnotationAlertFeedbackQuery) WithAnnotation(opts ...func(*OncallAnnotationQuery)) *OncallAnnotationAlertFeedbackQuery {
	query := (&OncallAnnotationClient{config: oaafq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oaafq.withAnnotation = query
	return oaafq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		AnnotationID uuid.UUID `json:"annotation_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OncallAnnotationAlertFeedback.Query().
//		GroupBy(oncallannotationalertfeedback.FieldAnnotationID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (oaafq *OncallAnnotationAlertFeedbackQuery) GroupBy(field string, fields ...string) *OncallAnnotationAlertFeedbackGroupBy {
	oaafq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &OncallAnnotationAlertFeedbackGroupBy{build: oaafq}
	grbuild.flds = &oaafq.ctx.Fields
	grbuild.label = oncallannotationalertfeedback.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		AnnotationID uuid.UUID `json:"annotation_id,omitempty"`
//	}
//
//	client.OncallAnnotationAlertFeedback.Query().
//		Select(oncallannotationalertfeedback.FieldAnnotationID).
//		Scan(ctx, &v)
func (oaafq *OncallAnnotationAlertFeedbackQuery) Select(fields ...string) *OncallAnnotationAlertFeedbackSelect {
	oaafq.ctx.Fields = append(oaafq.ctx.Fields, fields...)
	sbuild := &OncallAnnotationAlertFeedbackSelect{OncallAnnotationAlertFeedbackQuery: oaafq}
	sbuild.label = oncallannotationalertfeedback.Label
	sbuild.flds, sbuild.scan = &oaafq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a OncallAnnotationAlertFeedbackSelect configured with the given aggregations.
func (oaafq *OncallAnnotationAlertFeedbackQuery) Aggregate(fns ...AggregateFunc) *OncallAnnotationAlertFeedbackSelect {
	return oaafq.Select().Aggregate(fns...)
}

func (oaafq *OncallAnnotationAlertFeedbackQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range oaafq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, oaafq); err != nil {
				return err
			}
		}
	}
	for _, f := range oaafq.ctx.Fields {
		if !oncallannotationalertfeedback.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if oaafq.path != nil {
		prev, err := oaafq.path(ctx)
		if err != nil {
			return err
		}
		oaafq.sql = prev
	}
	return nil
}

func (oaafq *OncallAnnotationAlertFeedbackQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*OncallAnnotationAlertFeedback, error) {
	var (
		nodes       = []*OncallAnnotationAlertFeedback{}
		_spec       = oaafq.querySpec()
		loadedTypes = [1]bool{
			oaafq.withAnnotation != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*OncallAnnotationAlertFeedback).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &OncallAnnotationAlertFeedback{config: oaafq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(oaafq.modifiers) > 0 {
		_spec.Modifiers = oaafq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, oaafq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := oaafq.withAnnotation; query != nil {
		if err := oaafq.loadAnnotation(ctx, query, nodes, nil,
			func(n *OncallAnnotationAlertFeedback, e *OncallAnnotation) { n.Edges.Annotation = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (oaafq *OncallAnnotationAlertFeedbackQuery) loadAnnotation(ctx context.Context, query *OncallAnnotationQuery, nodes []*OncallAnnotationAlertFeedback, init func(*OncallAnnotationAlertFeedback), assign func(*OncallAnnotationAlertFeedback, *OncallAnnotation)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*OncallAnnotationAlertFeedback)
	for i := range nodes {
		fk := nodes[i].AnnotationID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(oncallannotation.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "annotation_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (oaafq *OncallAnnotationAlertFeedbackQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := oaafq.querySpec()
	if len(oaafq.modifiers) > 0 {
		_spec.Modifiers = oaafq.modifiers
	}
	_spec.Node.Columns = oaafq.ctx.Fields
	if len(oaafq.ctx.Fields) > 0 {
		_spec.Unique = oaafq.ctx.Unique != nil && *oaafq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, oaafq.driver, _spec)
}

func (oaafq *OncallAnnotationAlertFeedbackQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(oncallannotationalertfeedback.Table, oncallannotationalertfeedback.Columns, sqlgraph.NewFieldSpec(oncallannotationalertfeedback.FieldID, field.TypeUUID))
	_spec.From = oaafq.sql
	if unique := oaafq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if oaafq.path != nil {
		_spec.Unique = true
	}
	if fields := oaafq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oncallannotationalertfeedback.FieldID)
		for i := range fields {
			if fields[i] != oncallannotationalertfeedback.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if oaafq.withAnnotation != nil {
			_spec.Node.AddColumnOnce(oncallannotationalertfeedback.FieldAnnotationID)
		}
	}
	if ps := oaafq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := oaafq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := oaafq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := oaafq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (oaafq *OncallAnnotationAlertFeedbackQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(oaafq.driver.Dialect())
	t1 := builder.Table(oncallannotationalertfeedback.Table)
	columns := oaafq.ctx.Fields
	if len(columns) == 0 {
		columns = oncallannotationalertfeedback.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if oaafq.sql != nil {
		selector = oaafq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if oaafq.ctx.Unique != nil && *oaafq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range oaafq.modifiers {
		m(selector)
	}
	for _, p := range oaafq.predicates {
		p(selector)
	}
	for _, p := range oaafq.order {
		p(selector)
	}
	if offset := oaafq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := oaafq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (oaafq *OncallAnnotationAlertFeedbackQuery) Modify(modifiers ...func(s *sql.Selector)) *OncallAnnotationAlertFeedbackSelect {
	oaafq.modifiers = append(oaafq.modifiers, modifiers...)
	return oaafq.Select()
}

// OncallAnnotationAlertFeedbackGroupBy is the group-by builder for OncallAnnotationAlertFeedback entities.
type OncallAnnotationAlertFeedbackGroupBy struct {
	selector
	build *OncallAnnotationAlertFeedbackQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (oaafgb *OncallAnnotationAlertFeedbackGroupBy) Aggregate(fns ...AggregateFunc) *OncallAnnotationAlertFeedbackGroupBy {
	oaafgb.fns = append(oaafgb.fns, fns...)
	return oaafgb
}

// Scan applies the selector query and scans the result into the given value.
func (oaafgb *OncallAnnotationAlertFeedbackGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, oaafgb.build.ctx, ent.OpQueryGroupBy)
	if err := oaafgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OncallAnnotationAlertFeedbackQuery, *OncallAnnotationAlertFeedbackGroupBy](ctx, oaafgb.build, oaafgb, oaafgb.build.inters, v)
}

func (oaafgb *OncallAnnotationAlertFeedbackGroupBy) sqlScan(ctx context.Context, root *OncallAnnotationAlertFeedbackQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(oaafgb.fns))
	for _, fn := range oaafgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*oaafgb.flds)+len(oaafgb.fns))
		for _, f := range *oaafgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*oaafgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := oaafgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// OncallAnnotationAlertFeedbackSelect is the builder for selecting fields of OncallAnnotationAlertFeedback entities.
type OncallAnnotationAlertFeedbackSelect struct {
	*OncallAnnotationAlertFeedbackQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (oaafs *OncallAnnotationAlertFeedbackSelect) Aggregate(fns ...AggregateFunc) *OncallAnnotationAlertFeedbackSelect {
	oaafs.fns = append(oaafs.fns, fns...)
	return oaafs
}

// Scan applies the selector query and scans the result into the given value.
func (oaafs *OncallAnnotationAlertFeedbackSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, oaafs.ctx, ent.OpQuerySelect)
	if err := oaafs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OncallAnnotationAlertFeedbackQuery, *OncallAnnotationAlertFeedbackSelect](ctx, oaafs.OncallAnnotationAlertFeedbackQuery, oaafs, oaafs.inters, v)
}

func (oaafs *OncallAnnotationAlertFeedbackSelect) sqlScan(ctx context.Context, root *OncallAnnotationAlertFeedbackQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(oaafs.fns))
	for _, fn := range oaafs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*oaafs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := oaafs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (oaafs *OncallAnnotationAlertFeedbackSelect) Modify(modifiers ...func(s *sql.Selector)) *OncallAnnotationAlertFeedbackSelect {
	oaafs.modifiers = append(oaafs.modifiers, modifiers...)
	return oaafs
}
