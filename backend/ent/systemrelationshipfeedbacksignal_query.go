// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/systemanalysisrelationship"
	"github.com/rezible/rezible/ent/systemcomponentsignal"
	"github.com/rezible/rezible/ent/systemrelationshipfeedbacksignal"
)

// SystemRelationshipFeedbackSignalQuery is the builder for querying SystemRelationshipFeedbackSignal entities.
type SystemRelationshipFeedbackSignalQuery struct {
	config
	ctx              *QueryContext
	order            []systemrelationshipfeedbacksignal.OrderOption
	inters           []Interceptor
	predicates       []predicate.SystemRelationshipFeedbackSignal
	withRelationship *SystemAnalysisRelationshipQuery
	withSignal       *SystemComponentSignalQuery
	modifiers        []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SystemRelationshipFeedbackSignalQuery builder.
func (srfsq *SystemRelationshipFeedbackSignalQuery) Where(ps ...predicate.SystemRelationshipFeedbackSignal) *SystemRelationshipFeedbackSignalQuery {
	srfsq.predicates = append(srfsq.predicates, ps...)
	return srfsq
}

// Limit the number of records to be returned by this query.
func (srfsq *SystemRelationshipFeedbackSignalQuery) Limit(limit int) *SystemRelationshipFeedbackSignalQuery {
	srfsq.ctx.Limit = &limit
	return srfsq
}

// Offset to start from.
func (srfsq *SystemRelationshipFeedbackSignalQuery) Offset(offset int) *SystemRelationshipFeedbackSignalQuery {
	srfsq.ctx.Offset = &offset
	return srfsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (srfsq *SystemRelationshipFeedbackSignalQuery) Unique(unique bool) *SystemRelationshipFeedbackSignalQuery {
	srfsq.ctx.Unique = &unique
	return srfsq
}

// Order specifies how the records should be ordered.
func (srfsq *SystemRelationshipFeedbackSignalQuery) Order(o ...systemrelationshipfeedbacksignal.OrderOption) *SystemRelationshipFeedbackSignalQuery {
	srfsq.order = append(srfsq.order, o...)
	return srfsq
}

// QueryRelationship chains the current query on the "relationship" edge.
func (srfsq *SystemRelationshipFeedbackSignalQuery) QueryRelationship() *SystemAnalysisRelationshipQuery {
	query := (&SystemAnalysisRelationshipClient{config: srfsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := srfsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := srfsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(systemrelationshipfeedbacksignal.Table, systemrelationshipfeedbacksignal.FieldID, selector),
			sqlgraph.To(systemanalysisrelationship.Table, systemanalysisrelationship.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, systemrelationshipfeedbacksignal.RelationshipTable, systemrelationshipfeedbacksignal.RelationshipColumn),
		)
		fromU = sqlgraph.SetNeighbors(srfsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySignal chains the current query on the "signal" edge.
func (srfsq *SystemRelationshipFeedbackSignalQuery) QuerySignal() *SystemComponentSignalQuery {
	query := (&SystemComponentSignalClient{config: srfsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := srfsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := srfsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(systemrelationshipfeedbacksignal.Table, systemrelationshipfeedbacksignal.FieldID, selector),
			sqlgraph.To(systemcomponentsignal.Table, systemcomponentsignal.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, systemrelationshipfeedbacksignal.SignalTable, systemrelationshipfeedbacksignal.SignalColumn),
		)
		fromU = sqlgraph.SetNeighbors(srfsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SystemRelationshipFeedbackSignal entity from the query.
// Returns a *NotFoundError when no SystemRelationshipFeedbackSignal was found.
func (srfsq *SystemRelationshipFeedbackSignalQuery) First(ctx context.Context) (*SystemRelationshipFeedbackSignal, error) {
	nodes, err := srfsq.Limit(1).All(setContextOp(ctx, srfsq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{systemrelationshipfeedbacksignal.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (srfsq *SystemRelationshipFeedbackSignalQuery) FirstX(ctx context.Context) *SystemRelationshipFeedbackSignal {
	node, err := srfsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SystemRelationshipFeedbackSignal ID from the query.
// Returns a *NotFoundError when no SystemRelationshipFeedbackSignal ID was found.
func (srfsq *SystemRelationshipFeedbackSignalQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = srfsq.Limit(1).IDs(setContextOp(ctx, srfsq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{systemrelationshipfeedbacksignal.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (srfsq *SystemRelationshipFeedbackSignalQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := srfsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SystemRelationshipFeedbackSignal entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SystemRelationshipFeedbackSignal entity is found.
// Returns a *NotFoundError when no SystemRelationshipFeedbackSignal entities are found.
func (srfsq *SystemRelationshipFeedbackSignalQuery) Only(ctx context.Context) (*SystemRelationshipFeedbackSignal, error) {
	nodes, err := srfsq.Limit(2).All(setContextOp(ctx, srfsq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{systemrelationshipfeedbacksignal.Label}
	default:
		return nil, &NotSingularError{systemrelationshipfeedbacksignal.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (srfsq *SystemRelationshipFeedbackSignalQuery) OnlyX(ctx context.Context) *SystemRelationshipFeedbackSignal {
	node, err := srfsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SystemRelationshipFeedbackSignal ID in the query.
// Returns a *NotSingularError when more than one SystemRelationshipFeedbackSignal ID is found.
// Returns a *NotFoundError when no entities are found.
func (srfsq *SystemRelationshipFeedbackSignalQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = srfsq.Limit(2).IDs(setContextOp(ctx, srfsq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{systemrelationshipfeedbacksignal.Label}
	default:
		err = &NotSingularError{systemrelationshipfeedbacksignal.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (srfsq *SystemRelationshipFeedbackSignalQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := srfsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SystemRelationshipFeedbackSignals.
func (srfsq *SystemRelationshipFeedbackSignalQuery) All(ctx context.Context) ([]*SystemRelationshipFeedbackSignal, error) {
	ctx = setContextOp(ctx, srfsq.ctx, ent.OpQueryAll)
	if err := srfsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SystemRelationshipFeedbackSignal, *SystemRelationshipFeedbackSignalQuery]()
	return withInterceptors[[]*SystemRelationshipFeedbackSignal](ctx, srfsq, qr, srfsq.inters)
}

// AllX is like All, but panics if an error occurs.
func (srfsq *SystemRelationshipFeedbackSignalQuery) AllX(ctx context.Context) []*SystemRelationshipFeedbackSignal {
	nodes, err := srfsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SystemRelationshipFeedbackSignal IDs.
func (srfsq *SystemRelationshipFeedbackSignalQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if srfsq.ctx.Unique == nil && srfsq.path != nil {
		srfsq.Unique(true)
	}
	ctx = setContextOp(ctx, srfsq.ctx, ent.OpQueryIDs)
	if err = srfsq.Select(systemrelationshipfeedbacksignal.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (srfsq *SystemRelationshipFeedbackSignalQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := srfsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (srfsq *SystemRelationshipFeedbackSignalQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, srfsq.ctx, ent.OpQueryCount)
	if err := srfsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, srfsq, querierCount[*SystemRelationshipFeedbackSignalQuery](), srfsq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (srfsq *SystemRelationshipFeedbackSignalQuery) CountX(ctx context.Context) int {
	count, err := srfsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (srfsq *SystemRelationshipFeedbackSignalQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, srfsq.ctx, ent.OpQueryExist)
	switch _, err := srfsq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (srfsq *SystemRelationshipFeedbackSignalQuery) ExistX(ctx context.Context) bool {
	exist, err := srfsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SystemRelationshipFeedbackSignalQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (srfsq *SystemRelationshipFeedbackSignalQuery) Clone() *SystemRelationshipFeedbackSignalQuery {
	if srfsq == nil {
		return nil
	}
	return &SystemRelationshipFeedbackSignalQuery{
		config:           srfsq.config,
		ctx:              srfsq.ctx.Clone(),
		order:            append([]systemrelationshipfeedbacksignal.OrderOption{}, srfsq.order...),
		inters:           append([]Interceptor{}, srfsq.inters...),
		predicates:       append([]predicate.SystemRelationshipFeedbackSignal{}, srfsq.predicates...),
		withRelationship: srfsq.withRelationship.Clone(),
		withSignal:       srfsq.withSignal.Clone(),
		// clone intermediate query.
		sql:       srfsq.sql.Clone(),
		path:      srfsq.path,
		modifiers: append([]func(*sql.Selector){}, srfsq.modifiers...),
	}
}

// WithRelationship tells the query-builder to eager-load the nodes that are connected to
// the "relationship" edge. The optional arguments are used to configure the query builder of the edge.
func (srfsq *SystemRelationshipFeedbackSignalQuery) WithRelationship(opts ...func(*SystemAnalysisRelationshipQuery)) *SystemRelationshipFeedbackSignalQuery {
	query := (&SystemAnalysisRelationshipClient{config: srfsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	srfsq.withRelationship = query
	return srfsq
}

// WithSignal tells the query-builder to eager-load the nodes that are connected to
// the "signal" edge. The optional arguments are used to configure the query builder of the edge.
func (srfsq *SystemRelationshipFeedbackSignalQuery) WithSignal(opts ...func(*SystemComponentSignalQuery)) *SystemRelationshipFeedbackSignalQuery {
	query := (&SystemComponentSignalClient{config: srfsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	srfsq.withSignal = query
	return srfsq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		RelationshipID uuid.UUID `json:"relationship_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SystemRelationshipFeedbackSignal.Query().
//		GroupBy(systemrelationshipfeedbacksignal.FieldRelationshipID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (srfsq *SystemRelationshipFeedbackSignalQuery) GroupBy(field string, fields ...string) *SystemRelationshipFeedbackSignalGroupBy {
	srfsq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SystemRelationshipFeedbackSignalGroupBy{build: srfsq}
	grbuild.flds = &srfsq.ctx.Fields
	grbuild.label = systemrelationshipfeedbacksignal.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		RelationshipID uuid.UUID `json:"relationship_id,omitempty"`
//	}
//
//	client.SystemRelationshipFeedbackSignal.Query().
//		Select(systemrelationshipfeedbacksignal.FieldRelationshipID).
//		Scan(ctx, &v)
func (srfsq *SystemRelationshipFeedbackSignalQuery) Select(fields ...string) *SystemRelationshipFeedbackSignalSelect {
	srfsq.ctx.Fields = append(srfsq.ctx.Fields, fields...)
	sbuild := &SystemRelationshipFeedbackSignalSelect{SystemRelationshipFeedbackSignalQuery: srfsq}
	sbuild.label = systemrelationshipfeedbacksignal.Label
	sbuild.flds, sbuild.scan = &srfsq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SystemRelationshipFeedbackSignalSelect configured with the given aggregations.
func (srfsq *SystemRelationshipFeedbackSignalQuery) Aggregate(fns ...AggregateFunc) *SystemRelationshipFeedbackSignalSelect {
	return srfsq.Select().Aggregate(fns...)
}

func (srfsq *SystemRelationshipFeedbackSignalQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range srfsq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, srfsq); err != nil {
				return err
			}
		}
	}
	for _, f := range srfsq.ctx.Fields {
		if !systemrelationshipfeedbacksignal.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if srfsq.path != nil {
		prev, err := srfsq.path(ctx)
		if err != nil {
			return err
		}
		srfsq.sql = prev
	}
	return nil
}

func (srfsq *SystemRelationshipFeedbackSignalQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SystemRelationshipFeedbackSignal, error) {
	var (
		nodes       = []*SystemRelationshipFeedbackSignal{}
		_spec       = srfsq.querySpec()
		loadedTypes = [2]bool{
			srfsq.withRelationship != nil,
			srfsq.withSignal != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SystemRelationshipFeedbackSignal).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SystemRelationshipFeedbackSignal{config: srfsq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(srfsq.modifiers) > 0 {
		_spec.Modifiers = srfsq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, srfsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := srfsq.withRelationship; query != nil {
		if err := srfsq.loadRelationship(ctx, query, nodes, nil,
			func(n *SystemRelationshipFeedbackSignal, e *SystemAnalysisRelationship) { n.Edges.Relationship = e }); err != nil {
			return nil, err
		}
	}
	if query := srfsq.withSignal; query != nil {
		if err := srfsq.loadSignal(ctx, query, nodes, nil,
			func(n *SystemRelationshipFeedbackSignal, e *SystemComponentSignal) { n.Edges.Signal = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (srfsq *SystemRelationshipFeedbackSignalQuery) loadRelationship(ctx context.Context, query *SystemAnalysisRelationshipQuery, nodes []*SystemRelationshipFeedbackSignal, init func(*SystemRelationshipFeedbackSignal), assign func(*SystemRelationshipFeedbackSignal, *SystemAnalysisRelationship)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*SystemRelationshipFeedbackSignal)
	for i := range nodes {
		fk := nodes[i].RelationshipID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(systemanalysisrelationship.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "relationship_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (srfsq *SystemRelationshipFeedbackSignalQuery) loadSignal(ctx context.Context, query *SystemComponentSignalQuery, nodes []*SystemRelationshipFeedbackSignal, init func(*SystemRelationshipFeedbackSignal), assign func(*SystemRelationshipFeedbackSignal, *SystemComponentSignal)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*SystemRelationshipFeedbackSignal)
	for i := range nodes {
		fk := nodes[i].SignalID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(systemcomponentsignal.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "signal_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (srfsq *SystemRelationshipFeedbackSignalQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := srfsq.querySpec()
	if len(srfsq.modifiers) > 0 {
		_spec.Modifiers = srfsq.modifiers
	}
	_spec.Node.Columns = srfsq.ctx.Fields
	if len(srfsq.ctx.Fields) > 0 {
		_spec.Unique = srfsq.ctx.Unique != nil && *srfsq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, srfsq.driver, _spec)
}

func (srfsq *SystemRelationshipFeedbackSignalQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(systemrelationshipfeedbacksignal.Table, systemrelationshipfeedbacksignal.Columns, sqlgraph.NewFieldSpec(systemrelationshipfeedbacksignal.FieldID, field.TypeUUID))
	_spec.From = srfsq.sql
	if unique := srfsq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if srfsq.path != nil {
		_spec.Unique = true
	}
	if fields := srfsq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, systemrelationshipfeedbacksignal.FieldID)
		for i := range fields {
			if fields[i] != systemrelationshipfeedbacksignal.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if srfsq.withRelationship != nil {
			_spec.Node.AddColumnOnce(systemrelationshipfeedbacksignal.FieldRelationshipID)
		}
		if srfsq.withSignal != nil {
			_spec.Node.AddColumnOnce(systemrelationshipfeedbacksignal.FieldSignalID)
		}
	}
	if ps := srfsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := srfsq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := srfsq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := srfsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (srfsq *SystemRelationshipFeedbackSignalQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(srfsq.driver.Dialect())
	t1 := builder.Table(systemrelationshipfeedbacksignal.Table)
	columns := srfsq.ctx.Fields
	if len(columns) == 0 {
		columns = systemrelationshipfeedbacksignal.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if srfsq.sql != nil {
		selector = srfsq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if srfsq.ctx.Unique != nil && *srfsq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range srfsq.modifiers {
		m(selector)
	}
	for _, p := range srfsq.predicates {
		p(selector)
	}
	for _, p := range srfsq.order {
		p(selector)
	}
	if offset := srfsq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := srfsq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (srfsq *SystemRelationshipFeedbackSignalQuery) Modify(modifiers ...func(s *sql.Selector)) *SystemRelationshipFeedbackSignalSelect {
	srfsq.modifiers = append(srfsq.modifiers, modifiers...)
	return srfsq.Select()
}

// SystemRelationshipFeedbackSignalGroupBy is the group-by builder for SystemRelationshipFeedbackSignal entities.
type SystemRelationshipFeedbackSignalGroupBy struct {
	selector
	build *SystemRelationshipFeedbackSignalQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (srfsgb *SystemRelationshipFeedbackSignalGroupBy) Aggregate(fns ...AggregateFunc) *SystemRelationshipFeedbackSignalGroupBy {
	srfsgb.fns = append(srfsgb.fns, fns...)
	return srfsgb
}

// Scan applies the selector query and scans the result into the given value.
func (srfsgb *SystemRelationshipFeedbackSignalGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, srfsgb.build.ctx, ent.OpQueryGroupBy)
	if err := srfsgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SystemRelationshipFeedbackSignalQuery, *SystemRelationshipFeedbackSignalGroupBy](ctx, srfsgb.build, srfsgb, srfsgb.build.inters, v)
}

func (srfsgb *SystemRelationshipFeedbackSignalGroupBy) sqlScan(ctx context.Context, root *SystemRelationshipFeedbackSignalQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(srfsgb.fns))
	for _, fn := range srfsgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*srfsgb.flds)+len(srfsgb.fns))
		for _, f := range *srfsgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*srfsgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := srfsgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SystemRelationshipFeedbackSignalSelect is the builder for selecting fields of SystemRelationshipFeedbackSignal entities.
type SystemRelationshipFeedbackSignalSelect struct {
	*SystemRelationshipFeedbackSignalQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (srfss *SystemRelationshipFeedbackSignalSelect) Aggregate(fns ...AggregateFunc) *SystemRelationshipFeedbackSignalSelect {
	srfss.fns = append(srfss.fns, fns...)
	return srfss
}

// Scan applies the selector query and scans the result into the given value.
func (srfss *SystemRelationshipFeedbackSignalSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, srfss.ctx, ent.OpQuerySelect)
	if err := srfss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SystemRelationshipFeedbackSignalQuery, *SystemRelationshipFeedbackSignalSelect](ctx, srfss.SystemRelationshipFeedbackSignalQuery, srfss, srfss.inters, v)
}

func (srfss *SystemRelationshipFeedbackSignalSelect) sqlScan(ctx context.Context, root *SystemRelationshipFeedbackSignalQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(srfss.fns))
	for _, fn := range srfss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*srfss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := srfss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (srfss *SystemRelationshipFeedbackSignalSelect) Modify(modifiers ...func(s *sql.Selector)) *SystemRelationshipFeedbackSignalSelect {
	srfss.modifiers = append(srfss.modifiers, modifiers...)
	return srfss
}
