// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/systemanalysisrelationship"
	"github.com/rezible/rezible/ent/systemcomponent"
	"github.com/rezible/rezible/ent/systemcomponentcontrol"
	"github.com/rezible/rezible/ent/systemrelationshipcontrolaction"
)

// SystemComponentControlUpdate is the builder for updating SystemComponentControl entities.
type SystemComponentControlUpdate struct {
	config
	hooks     []Hook
	mutation  *SystemComponentControlMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SystemComponentControlUpdate builder.
func (sccu *SystemComponentControlUpdate) Where(ps ...predicate.SystemComponentControl) *SystemComponentControlUpdate {
	sccu.mutation.Where(ps...)
	return sccu
}

// SetComponentID sets the "component_id" field.
func (sccu *SystemComponentControlUpdate) SetComponentID(u uuid.UUID) *SystemComponentControlUpdate {
	sccu.mutation.SetComponentID(u)
	return sccu
}

// SetNillableComponentID sets the "component_id" field if the given value is not nil.
func (sccu *SystemComponentControlUpdate) SetNillableComponentID(u *uuid.UUID) *SystemComponentControlUpdate {
	if u != nil {
		sccu.SetComponentID(*u)
	}
	return sccu
}

// SetLabel sets the "label" field.
func (sccu *SystemComponentControlUpdate) SetLabel(s string) *SystemComponentControlUpdate {
	sccu.mutation.SetLabel(s)
	return sccu
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (sccu *SystemComponentControlUpdate) SetNillableLabel(s *string) *SystemComponentControlUpdate {
	if s != nil {
		sccu.SetLabel(*s)
	}
	return sccu
}

// SetDescription sets the "description" field.
func (sccu *SystemComponentControlUpdate) SetDescription(s string) *SystemComponentControlUpdate {
	sccu.mutation.SetDescription(s)
	return sccu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sccu *SystemComponentControlUpdate) SetNillableDescription(s *string) *SystemComponentControlUpdate {
	if s != nil {
		sccu.SetDescription(*s)
	}
	return sccu
}

// ClearDescription clears the value of the "description" field.
func (sccu *SystemComponentControlUpdate) ClearDescription() *SystemComponentControlUpdate {
	sccu.mutation.ClearDescription()
	return sccu
}

// SetCreatedAt sets the "created_at" field.
func (sccu *SystemComponentControlUpdate) SetCreatedAt(t time.Time) *SystemComponentControlUpdate {
	sccu.mutation.SetCreatedAt(t)
	return sccu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sccu *SystemComponentControlUpdate) SetNillableCreatedAt(t *time.Time) *SystemComponentControlUpdate {
	if t != nil {
		sccu.SetCreatedAt(*t)
	}
	return sccu
}

// SetComponent sets the "component" edge to the SystemComponent entity.
func (sccu *SystemComponentControlUpdate) SetComponent(s *SystemComponent) *SystemComponentControlUpdate {
	return sccu.SetComponentID(s.ID)
}

// AddRelationshipIDs adds the "relationships" edge to the SystemAnalysisRelationship entity by IDs.
func (sccu *SystemComponentControlUpdate) AddRelationshipIDs(ids ...uuid.UUID) *SystemComponentControlUpdate {
	sccu.mutation.AddRelationshipIDs(ids...)
	return sccu
}

// AddRelationships adds the "relationships" edges to the SystemAnalysisRelationship entity.
func (sccu *SystemComponentControlUpdate) AddRelationships(s ...*SystemAnalysisRelationship) *SystemComponentControlUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sccu.AddRelationshipIDs(ids...)
}

// AddControlActionIDs adds the "control_actions" edge to the SystemRelationshipControlAction entity by IDs.
func (sccu *SystemComponentControlUpdate) AddControlActionIDs(ids ...uuid.UUID) *SystemComponentControlUpdate {
	sccu.mutation.AddControlActionIDs(ids...)
	return sccu
}

// AddControlActions adds the "control_actions" edges to the SystemRelationshipControlAction entity.
func (sccu *SystemComponentControlUpdate) AddControlActions(s ...*SystemRelationshipControlAction) *SystemComponentControlUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sccu.AddControlActionIDs(ids...)
}

// Mutation returns the SystemComponentControlMutation object of the builder.
func (sccu *SystemComponentControlUpdate) Mutation() *SystemComponentControlMutation {
	return sccu.mutation
}

// ClearComponent clears the "component" edge to the SystemComponent entity.
func (sccu *SystemComponentControlUpdate) ClearComponent() *SystemComponentControlUpdate {
	sccu.mutation.ClearComponent()
	return sccu
}

// ClearRelationships clears all "relationships" edges to the SystemAnalysisRelationship entity.
func (sccu *SystemComponentControlUpdate) ClearRelationships() *SystemComponentControlUpdate {
	sccu.mutation.ClearRelationships()
	return sccu
}

// RemoveRelationshipIDs removes the "relationships" edge to SystemAnalysisRelationship entities by IDs.
func (sccu *SystemComponentControlUpdate) RemoveRelationshipIDs(ids ...uuid.UUID) *SystemComponentControlUpdate {
	sccu.mutation.RemoveRelationshipIDs(ids...)
	return sccu
}

// RemoveRelationships removes "relationships" edges to SystemAnalysisRelationship entities.
func (sccu *SystemComponentControlUpdate) RemoveRelationships(s ...*SystemAnalysisRelationship) *SystemComponentControlUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sccu.RemoveRelationshipIDs(ids...)
}

// ClearControlActions clears all "control_actions" edges to the SystemRelationshipControlAction entity.
func (sccu *SystemComponentControlUpdate) ClearControlActions() *SystemComponentControlUpdate {
	sccu.mutation.ClearControlActions()
	return sccu
}

// RemoveControlActionIDs removes the "control_actions" edge to SystemRelationshipControlAction entities by IDs.
func (sccu *SystemComponentControlUpdate) RemoveControlActionIDs(ids ...uuid.UUID) *SystemComponentControlUpdate {
	sccu.mutation.RemoveControlActionIDs(ids...)
	return sccu
}

// RemoveControlActions removes "control_actions" edges to SystemRelationshipControlAction entities.
func (sccu *SystemComponentControlUpdate) RemoveControlActions(s ...*SystemRelationshipControlAction) *SystemComponentControlUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sccu.RemoveControlActionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sccu *SystemComponentControlUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sccu.sqlSave, sccu.mutation, sccu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sccu *SystemComponentControlUpdate) SaveX(ctx context.Context) int {
	affected, err := sccu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sccu *SystemComponentControlUpdate) Exec(ctx context.Context) error {
	_, err := sccu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sccu *SystemComponentControlUpdate) ExecX(ctx context.Context) {
	if err := sccu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sccu *SystemComponentControlUpdate) check() error {
	if sccu.mutation.ComponentCleared() && len(sccu.mutation.ComponentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SystemComponentControl.component"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sccu *SystemComponentControlUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SystemComponentControlUpdate {
	sccu.modifiers = append(sccu.modifiers, modifiers...)
	return sccu
}

func (sccu *SystemComponentControlUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sccu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(systemcomponentcontrol.Table, systemcomponentcontrol.Columns, sqlgraph.NewFieldSpec(systemcomponentcontrol.FieldID, field.TypeUUID))
	if ps := sccu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sccu.mutation.Label(); ok {
		_spec.SetField(systemcomponentcontrol.FieldLabel, field.TypeString, value)
	}
	if value, ok := sccu.mutation.Description(); ok {
		_spec.SetField(systemcomponentcontrol.FieldDescription, field.TypeString, value)
	}
	if sccu.mutation.DescriptionCleared() {
		_spec.ClearField(systemcomponentcontrol.FieldDescription, field.TypeString)
	}
	if value, ok := sccu.mutation.CreatedAt(); ok {
		_spec.SetField(systemcomponentcontrol.FieldCreatedAt, field.TypeTime, value)
	}
	if sccu.mutation.ComponentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemcomponentcontrol.ComponentTable,
			Columns: []string{systemcomponentcontrol.ComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sccu.mutation.ComponentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemcomponentcontrol.ComponentTable,
			Columns: []string{systemcomponentcontrol.ComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sccu.mutation.RelationshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   systemcomponentcontrol.RelationshipsTable,
			Columns: systemcomponentcontrol.RelationshipsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemanalysisrelationship.FieldID, field.TypeUUID),
			},
		}
		createE := &SystemRelationshipControlActionCreate{config: sccu.config, mutation: newSystemRelationshipControlActionMutation(sccu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sccu.mutation.RemovedRelationshipsIDs(); len(nodes) > 0 && !sccu.mutation.RelationshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   systemcomponentcontrol.RelationshipsTable,
			Columns: systemcomponentcontrol.RelationshipsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemanalysisrelationship.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SystemRelationshipControlActionCreate{config: sccu.config, mutation: newSystemRelationshipControlActionMutation(sccu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sccu.mutation.RelationshipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   systemcomponentcontrol.RelationshipsTable,
			Columns: systemcomponentcontrol.RelationshipsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemanalysisrelationship.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SystemRelationshipControlActionCreate{config: sccu.config, mutation: newSystemRelationshipControlActionMutation(sccu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sccu.mutation.ControlActionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponentcontrol.ControlActionsTable,
			Columns: []string{systemcomponentcontrol.ControlActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemrelationshipcontrolaction.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sccu.mutation.RemovedControlActionsIDs(); len(nodes) > 0 && !sccu.mutation.ControlActionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponentcontrol.ControlActionsTable,
			Columns: []string{systemcomponentcontrol.ControlActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemrelationshipcontrolaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sccu.mutation.ControlActionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponentcontrol.ControlActionsTable,
			Columns: []string{systemcomponentcontrol.ControlActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemrelationshipcontrolaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(sccu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, sccu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systemcomponentcontrol.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sccu.mutation.done = true
	return n, nil
}

// SystemComponentControlUpdateOne is the builder for updating a single SystemComponentControl entity.
type SystemComponentControlUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SystemComponentControlMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetComponentID sets the "component_id" field.
func (sccuo *SystemComponentControlUpdateOne) SetComponentID(u uuid.UUID) *SystemComponentControlUpdateOne {
	sccuo.mutation.SetComponentID(u)
	return sccuo
}

// SetNillableComponentID sets the "component_id" field if the given value is not nil.
func (sccuo *SystemComponentControlUpdateOne) SetNillableComponentID(u *uuid.UUID) *SystemComponentControlUpdateOne {
	if u != nil {
		sccuo.SetComponentID(*u)
	}
	return sccuo
}

// SetLabel sets the "label" field.
func (sccuo *SystemComponentControlUpdateOne) SetLabel(s string) *SystemComponentControlUpdateOne {
	sccuo.mutation.SetLabel(s)
	return sccuo
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (sccuo *SystemComponentControlUpdateOne) SetNillableLabel(s *string) *SystemComponentControlUpdateOne {
	if s != nil {
		sccuo.SetLabel(*s)
	}
	return sccuo
}

// SetDescription sets the "description" field.
func (sccuo *SystemComponentControlUpdateOne) SetDescription(s string) *SystemComponentControlUpdateOne {
	sccuo.mutation.SetDescription(s)
	return sccuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sccuo *SystemComponentControlUpdateOne) SetNillableDescription(s *string) *SystemComponentControlUpdateOne {
	if s != nil {
		sccuo.SetDescription(*s)
	}
	return sccuo
}

// ClearDescription clears the value of the "description" field.
func (sccuo *SystemComponentControlUpdateOne) ClearDescription() *SystemComponentControlUpdateOne {
	sccuo.mutation.ClearDescription()
	return sccuo
}

// SetCreatedAt sets the "created_at" field.
func (sccuo *SystemComponentControlUpdateOne) SetCreatedAt(t time.Time) *SystemComponentControlUpdateOne {
	sccuo.mutation.SetCreatedAt(t)
	return sccuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sccuo *SystemComponentControlUpdateOne) SetNillableCreatedAt(t *time.Time) *SystemComponentControlUpdateOne {
	if t != nil {
		sccuo.SetCreatedAt(*t)
	}
	return sccuo
}

// SetComponent sets the "component" edge to the SystemComponent entity.
func (sccuo *SystemComponentControlUpdateOne) SetComponent(s *SystemComponent) *SystemComponentControlUpdateOne {
	return sccuo.SetComponentID(s.ID)
}

// AddRelationshipIDs adds the "relationships" edge to the SystemAnalysisRelationship entity by IDs.
func (sccuo *SystemComponentControlUpdateOne) AddRelationshipIDs(ids ...uuid.UUID) *SystemComponentControlUpdateOne {
	sccuo.mutation.AddRelationshipIDs(ids...)
	return sccuo
}

// AddRelationships adds the "relationships" edges to the SystemAnalysisRelationship entity.
func (sccuo *SystemComponentControlUpdateOne) AddRelationships(s ...*SystemAnalysisRelationship) *SystemComponentControlUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sccuo.AddRelationshipIDs(ids...)
}

// AddControlActionIDs adds the "control_actions" edge to the SystemRelationshipControlAction entity by IDs.
func (sccuo *SystemComponentControlUpdateOne) AddControlActionIDs(ids ...uuid.UUID) *SystemComponentControlUpdateOne {
	sccuo.mutation.AddControlActionIDs(ids...)
	return sccuo
}

// AddControlActions adds the "control_actions" edges to the SystemRelationshipControlAction entity.
func (sccuo *SystemComponentControlUpdateOne) AddControlActions(s ...*SystemRelationshipControlAction) *SystemComponentControlUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sccuo.AddControlActionIDs(ids...)
}

// Mutation returns the SystemComponentControlMutation object of the builder.
func (sccuo *SystemComponentControlUpdateOne) Mutation() *SystemComponentControlMutation {
	return sccuo.mutation
}

// ClearComponent clears the "component" edge to the SystemComponent entity.
func (sccuo *SystemComponentControlUpdateOne) ClearComponent() *SystemComponentControlUpdateOne {
	sccuo.mutation.ClearComponent()
	return sccuo
}

// ClearRelationships clears all "relationships" edges to the SystemAnalysisRelationship entity.
func (sccuo *SystemComponentControlUpdateOne) ClearRelationships() *SystemComponentControlUpdateOne {
	sccuo.mutation.ClearRelationships()
	return sccuo
}

// RemoveRelationshipIDs removes the "relationships" edge to SystemAnalysisRelationship entities by IDs.
func (sccuo *SystemComponentControlUpdateOne) RemoveRelationshipIDs(ids ...uuid.UUID) *SystemComponentControlUpdateOne {
	sccuo.mutation.RemoveRelationshipIDs(ids...)
	return sccuo
}

// RemoveRelationships removes "relationships" edges to SystemAnalysisRelationship entities.
func (sccuo *SystemComponentControlUpdateOne) RemoveRelationships(s ...*SystemAnalysisRelationship) *SystemComponentControlUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sccuo.RemoveRelationshipIDs(ids...)
}

// ClearControlActions clears all "control_actions" edges to the SystemRelationshipControlAction entity.
func (sccuo *SystemComponentControlUpdateOne) ClearControlActions() *SystemComponentControlUpdateOne {
	sccuo.mutation.ClearControlActions()
	return sccuo
}

// RemoveControlActionIDs removes the "control_actions" edge to SystemRelationshipControlAction entities by IDs.
func (sccuo *SystemComponentControlUpdateOne) RemoveControlActionIDs(ids ...uuid.UUID) *SystemComponentControlUpdateOne {
	sccuo.mutation.RemoveControlActionIDs(ids...)
	return sccuo
}

// RemoveControlActions removes "control_actions" edges to SystemRelationshipControlAction entities.
func (sccuo *SystemComponentControlUpdateOne) RemoveControlActions(s ...*SystemRelationshipControlAction) *SystemComponentControlUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sccuo.RemoveControlActionIDs(ids...)
}

// Where appends a list predicates to the SystemComponentControlUpdate builder.
func (sccuo *SystemComponentControlUpdateOne) Where(ps ...predicate.SystemComponentControl) *SystemComponentControlUpdateOne {
	sccuo.mutation.Where(ps...)
	return sccuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sccuo *SystemComponentControlUpdateOne) Select(field string, fields ...string) *SystemComponentControlUpdateOne {
	sccuo.fields = append([]string{field}, fields...)
	return sccuo
}

// Save executes the query and returns the updated SystemComponentControl entity.
func (sccuo *SystemComponentControlUpdateOne) Save(ctx context.Context) (*SystemComponentControl, error) {
	return withHooks(ctx, sccuo.sqlSave, sccuo.mutation, sccuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sccuo *SystemComponentControlUpdateOne) SaveX(ctx context.Context) *SystemComponentControl {
	node, err := sccuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sccuo *SystemComponentControlUpdateOne) Exec(ctx context.Context) error {
	_, err := sccuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sccuo *SystemComponentControlUpdateOne) ExecX(ctx context.Context) {
	if err := sccuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sccuo *SystemComponentControlUpdateOne) check() error {
	if sccuo.mutation.ComponentCleared() && len(sccuo.mutation.ComponentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SystemComponentControl.component"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sccuo *SystemComponentControlUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SystemComponentControlUpdateOne {
	sccuo.modifiers = append(sccuo.modifiers, modifiers...)
	return sccuo
}

func (sccuo *SystemComponentControlUpdateOne) sqlSave(ctx context.Context) (_node *SystemComponentControl, err error) {
	if err := sccuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(systemcomponentcontrol.Table, systemcomponentcontrol.Columns, sqlgraph.NewFieldSpec(systemcomponentcontrol.FieldID, field.TypeUUID))
	id, ok := sccuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SystemComponentControl.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sccuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, systemcomponentcontrol.FieldID)
		for _, f := range fields {
			if !systemcomponentcontrol.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != systemcomponentcontrol.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sccuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sccuo.mutation.Label(); ok {
		_spec.SetField(systemcomponentcontrol.FieldLabel, field.TypeString, value)
	}
	if value, ok := sccuo.mutation.Description(); ok {
		_spec.SetField(systemcomponentcontrol.FieldDescription, field.TypeString, value)
	}
	if sccuo.mutation.DescriptionCleared() {
		_spec.ClearField(systemcomponentcontrol.FieldDescription, field.TypeString)
	}
	if value, ok := sccuo.mutation.CreatedAt(); ok {
		_spec.SetField(systemcomponentcontrol.FieldCreatedAt, field.TypeTime, value)
	}
	if sccuo.mutation.ComponentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemcomponentcontrol.ComponentTable,
			Columns: []string{systemcomponentcontrol.ComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sccuo.mutation.ComponentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemcomponentcontrol.ComponentTable,
			Columns: []string{systemcomponentcontrol.ComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sccuo.mutation.RelationshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   systemcomponentcontrol.RelationshipsTable,
			Columns: systemcomponentcontrol.RelationshipsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemanalysisrelationship.FieldID, field.TypeUUID),
			},
		}
		createE := &SystemRelationshipControlActionCreate{config: sccuo.config, mutation: newSystemRelationshipControlActionMutation(sccuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sccuo.mutation.RemovedRelationshipsIDs(); len(nodes) > 0 && !sccuo.mutation.RelationshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   systemcomponentcontrol.RelationshipsTable,
			Columns: systemcomponentcontrol.RelationshipsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemanalysisrelationship.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SystemRelationshipControlActionCreate{config: sccuo.config, mutation: newSystemRelationshipControlActionMutation(sccuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sccuo.mutation.RelationshipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   systemcomponentcontrol.RelationshipsTable,
			Columns: systemcomponentcontrol.RelationshipsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemanalysisrelationship.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SystemRelationshipControlActionCreate{config: sccuo.config, mutation: newSystemRelationshipControlActionMutation(sccuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sccuo.mutation.ControlActionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponentcontrol.ControlActionsTable,
			Columns: []string{systemcomponentcontrol.ControlActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemrelationshipcontrolaction.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sccuo.mutation.RemovedControlActionsIDs(); len(nodes) > 0 && !sccuo.mutation.ControlActionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponentcontrol.ControlActionsTable,
			Columns: []string{systemcomponentcontrol.ControlActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemrelationshipcontrolaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sccuo.mutation.ControlActionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponentcontrol.ControlActionsTable,
			Columns: []string{systemcomponentcontrol.ControlActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemrelationshipcontrolaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(sccuo.modifiers...)
	_node = &SystemComponentControl{config: sccuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sccuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systemcomponentcontrol.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sccuo.mutation.done = true
	return _node, nil
}
