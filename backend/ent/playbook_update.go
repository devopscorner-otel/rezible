// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/alert"
	"github.com/rezible/rezible/ent/playbook"
	"github.com/rezible/rezible/ent/predicate"
)

// PlaybookUpdate is the builder for updating Playbook entities.
type PlaybookUpdate struct {
	config
	hooks     []Hook
	mutation  *PlaybookMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PlaybookUpdate builder.
func (pu *PlaybookUpdate) Where(ps ...predicate.Playbook) *PlaybookUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetTitle sets the "title" field.
func (pu *PlaybookUpdate) SetTitle(s string) *PlaybookUpdate {
	pu.mutation.SetTitle(s)
	return pu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (pu *PlaybookUpdate) SetNillableTitle(s *string) *PlaybookUpdate {
	if s != nil {
		pu.SetTitle(*s)
	}
	return pu
}

// SetProviderID sets the "provider_id" field.
func (pu *PlaybookUpdate) SetProviderID(s string) *PlaybookUpdate {
	pu.mutation.SetProviderID(s)
	return pu
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (pu *PlaybookUpdate) SetNillableProviderID(s *string) *PlaybookUpdate {
	if s != nil {
		pu.SetProviderID(*s)
	}
	return pu
}

// SetContent sets the "content" field.
func (pu *PlaybookUpdate) SetContent(b []byte) *PlaybookUpdate {
	pu.mutation.SetContent(b)
	return pu
}

// AddAlertIDs adds the "alerts" edge to the Alert entity by IDs.
func (pu *PlaybookUpdate) AddAlertIDs(ids ...uuid.UUID) *PlaybookUpdate {
	pu.mutation.AddAlertIDs(ids...)
	return pu
}

// AddAlerts adds the "alerts" edges to the Alert entity.
func (pu *PlaybookUpdate) AddAlerts(a ...*Alert) *PlaybookUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.AddAlertIDs(ids...)
}

// Mutation returns the PlaybookMutation object of the builder.
func (pu *PlaybookUpdate) Mutation() *PlaybookMutation {
	return pu.mutation
}

// ClearAlerts clears all "alerts" edges to the Alert entity.
func (pu *PlaybookUpdate) ClearAlerts() *PlaybookUpdate {
	pu.mutation.ClearAlerts()
	return pu
}

// RemoveAlertIDs removes the "alerts" edge to Alert entities by IDs.
func (pu *PlaybookUpdate) RemoveAlertIDs(ids ...uuid.UUID) *PlaybookUpdate {
	pu.mutation.RemoveAlertIDs(ids...)
	return pu
}

// RemoveAlerts removes "alerts" edges to Alert entities.
func (pu *PlaybookUpdate) RemoveAlerts(a ...*Alert) *PlaybookUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.RemoveAlertIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PlaybookUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PlaybookUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PlaybookUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PlaybookUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PlaybookUpdate) check() error {
	if pu.mutation.TenantCleared() && len(pu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Playbook.tenant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pu *PlaybookUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PlaybookUpdate {
	pu.modifiers = append(pu.modifiers, modifiers...)
	return pu
}

func (pu *PlaybookUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(playbook.Table, playbook.Columns, sqlgraph.NewFieldSpec(playbook.FieldID, field.TypeUUID))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Title(); ok {
		_spec.SetField(playbook.FieldTitle, field.TypeString, value)
	}
	if value, ok := pu.mutation.ProviderID(); ok {
		_spec.SetField(playbook.FieldProviderID, field.TypeString, value)
	}
	if value, ok := pu.mutation.Content(); ok {
		_spec.SetField(playbook.FieldContent, field.TypeBytes, value)
	}
	if pu.mutation.AlertsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playbook.AlertsTable,
			Columns: playbook.AlertsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alert.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedAlertsIDs(); len(nodes) > 0 && !pu.mutation.AlertsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playbook.AlertsTable,
			Columns: playbook.AlertsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alert.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.AlertsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playbook.AlertsTable,
			Columns: playbook.AlertsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alert.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{playbook.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PlaybookUpdateOne is the builder for updating a single Playbook entity.
type PlaybookUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PlaybookMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetTitle sets the "title" field.
func (puo *PlaybookUpdateOne) SetTitle(s string) *PlaybookUpdateOne {
	puo.mutation.SetTitle(s)
	return puo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (puo *PlaybookUpdateOne) SetNillableTitle(s *string) *PlaybookUpdateOne {
	if s != nil {
		puo.SetTitle(*s)
	}
	return puo
}

// SetProviderID sets the "provider_id" field.
func (puo *PlaybookUpdateOne) SetProviderID(s string) *PlaybookUpdateOne {
	puo.mutation.SetProviderID(s)
	return puo
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (puo *PlaybookUpdateOne) SetNillableProviderID(s *string) *PlaybookUpdateOne {
	if s != nil {
		puo.SetProviderID(*s)
	}
	return puo
}

// SetContent sets the "content" field.
func (puo *PlaybookUpdateOne) SetContent(b []byte) *PlaybookUpdateOne {
	puo.mutation.SetContent(b)
	return puo
}

// AddAlertIDs adds the "alerts" edge to the Alert entity by IDs.
func (puo *PlaybookUpdateOne) AddAlertIDs(ids ...uuid.UUID) *PlaybookUpdateOne {
	puo.mutation.AddAlertIDs(ids...)
	return puo
}

// AddAlerts adds the "alerts" edges to the Alert entity.
func (puo *PlaybookUpdateOne) AddAlerts(a ...*Alert) *PlaybookUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.AddAlertIDs(ids...)
}

// Mutation returns the PlaybookMutation object of the builder.
func (puo *PlaybookUpdateOne) Mutation() *PlaybookMutation {
	return puo.mutation
}

// ClearAlerts clears all "alerts" edges to the Alert entity.
func (puo *PlaybookUpdateOne) ClearAlerts() *PlaybookUpdateOne {
	puo.mutation.ClearAlerts()
	return puo
}

// RemoveAlertIDs removes the "alerts" edge to Alert entities by IDs.
func (puo *PlaybookUpdateOne) RemoveAlertIDs(ids ...uuid.UUID) *PlaybookUpdateOne {
	puo.mutation.RemoveAlertIDs(ids...)
	return puo
}

// RemoveAlerts removes "alerts" edges to Alert entities.
func (puo *PlaybookUpdateOne) RemoveAlerts(a ...*Alert) *PlaybookUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.RemoveAlertIDs(ids...)
}

// Where appends a list predicates to the PlaybookUpdate builder.
func (puo *PlaybookUpdateOne) Where(ps ...predicate.Playbook) *PlaybookUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PlaybookUpdateOne) Select(field string, fields ...string) *PlaybookUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Playbook entity.
func (puo *PlaybookUpdateOne) Save(ctx context.Context) (*Playbook, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PlaybookUpdateOne) SaveX(ctx context.Context) *Playbook {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PlaybookUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PlaybookUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PlaybookUpdateOne) check() error {
	if puo.mutation.TenantCleared() && len(puo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Playbook.tenant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (puo *PlaybookUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PlaybookUpdateOne {
	puo.modifiers = append(puo.modifiers, modifiers...)
	return puo
}

func (puo *PlaybookUpdateOne) sqlSave(ctx context.Context) (_node *Playbook, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(playbook.Table, playbook.Columns, sqlgraph.NewFieldSpec(playbook.FieldID, field.TypeUUID))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Playbook.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, playbook.FieldID)
		for _, f := range fields {
			if !playbook.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != playbook.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Title(); ok {
		_spec.SetField(playbook.FieldTitle, field.TypeString, value)
	}
	if value, ok := puo.mutation.ProviderID(); ok {
		_spec.SetField(playbook.FieldProviderID, field.TypeString, value)
	}
	if value, ok := puo.mutation.Content(); ok {
		_spec.SetField(playbook.FieldContent, field.TypeBytes, value)
	}
	if puo.mutation.AlertsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playbook.AlertsTable,
			Columns: playbook.AlertsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alert.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedAlertsIDs(); len(nodes) > 0 && !puo.mutation.AlertsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playbook.AlertsTable,
			Columns: playbook.AlertsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alert.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.AlertsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playbook.AlertsTable,
			Columns: playbook.AlertsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alert.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(puo.modifiers...)
	_node = &Playbook{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{playbook.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
