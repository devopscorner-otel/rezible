// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/incidenteventsystemcomponent"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/systemcomponent"
)

// IncidentEventSystemComponentUpdate is the builder for updating IncidentEventSystemComponent entities.
type IncidentEventSystemComponentUpdate struct {
	config
	hooks     []Hook
	mutation  *IncidentEventSystemComponentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the IncidentEventSystemComponentUpdate builder.
func (iescu *IncidentEventSystemComponentUpdate) Where(ps ...predicate.IncidentEventSystemComponent) *IncidentEventSystemComponentUpdate {
	iescu.mutation.Where(ps...)
	return iescu
}

// SetIncidentEventID sets the "incident_event_id" field.
func (iescu *IncidentEventSystemComponentUpdate) SetIncidentEventID(u uuid.UUID) *IncidentEventSystemComponentUpdate {
	iescu.mutation.SetIncidentEventID(u)
	return iescu
}

// SetNillableIncidentEventID sets the "incident_event_id" field if the given value is not nil.
func (iescu *IncidentEventSystemComponentUpdate) SetNillableIncidentEventID(u *uuid.UUID) *IncidentEventSystemComponentUpdate {
	if u != nil {
		iescu.SetIncidentEventID(*u)
	}
	return iescu
}

// SetSystemComponentID sets the "system_component_id" field.
func (iescu *IncidentEventSystemComponentUpdate) SetSystemComponentID(u uuid.UUID) *IncidentEventSystemComponentUpdate {
	iescu.mutation.SetSystemComponentID(u)
	return iescu
}

// SetNillableSystemComponentID sets the "system_component_id" field if the given value is not nil.
func (iescu *IncidentEventSystemComponentUpdate) SetNillableSystemComponentID(u *uuid.UUID) *IncidentEventSystemComponentUpdate {
	if u != nil {
		iescu.SetSystemComponentID(*u)
	}
	return iescu
}

// SetRelationship sets the "relationship" field.
func (iescu *IncidentEventSystemComponentUpdate) SetRelationship(i incidenteventsystemcomponent.Relationship) *IncidentEventSystemComponentUpdate {
	iescu.mutation.SetRelationship(i)
	return iescu
}

// SetNillableRelationship sets the "relationship" field if the given value is not nil.
func (iescu *IncidentEventSystemComponentUpdate) SetNillableRelationship(i *incidenteventsystemcomponent.Relationship) *IncidentEventSystemComponentUpdate {
	if i != nil {
		iescu.SetRelationship(*i)
	}
	return iescu
}

// SetCreatedAt sets the "created_at" field.
func (iescu *IncidentEventSystemComponentUpdate) SetCreatedAt(t time.Time) *IncidentEventSystemComponentUpdate {
	iescu.mutation.SetCreatedAt(t)
	return iescu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (iescu *IncidentEventSystemComponentUpdate) SetNillableCreatedAt(t *time.Time) *IncidentEventSystemComponentUpdate {
	if t != nil {
		iescu.SetCreatedAt(*t)
	}
	return iescu
}

// SetEventID sets the "event" edge to the IncidentEventSystemComponent entity by ID.
func (iescu *IncidentEventSystemComponentUpdate) SetEventID(id uuid.UUID) *IncidentEventSystemComponentUpdate {
	iescu.mutation.SetEventID(id)
	return iescu
}

// SetEvent sets the "event" edge to the IncidentEventSystemComponent entity.
func (iescu *IncidentEventSystemComponentUpdate) SetEvent(i *IncidentEventSystemComponent) *IncidentEventSystemComponentUpdate {
	return iescu.SetEventID(i.ID)
}

// SetSystemComponent sets the "system_component" edge to the SystemComponent entity.
func (iescu *IncidentEventSystemComponentUpdate) SetSystemComponent(s *SystemComponent) *IncidentEventSystemComponentUpdate {
	return iescu.SetSystemComponentID(s.ID)
}

// Mutation returns the IncidentEventSystemComponentMutation object of the builder.
func (iescu *IncidentEventSystemComponentUpdate) Mutation() *IncidentEventSystemComponentMutation {
	return iescu.mutation
}

// ClearEvent clears the "event" edge to the IncidentEventSystemComponent entity.
func (iescu *IncidentEventSystemComponentUpdate) ClearEvent() *IncidentEventSystemComponentUpdate {
	iescu.mutation.ClearEvent()
	return iescu
}

// ClearSystemComponent clears the "system_component" edge to the SystemComponent entity.
func (iescu *IncidentEventSystemComponentUpdate) ClearSystemComponent() *IncidentEventSystemComponentUpdate {
	iescu.mutation.ClearSystemComponent()
	return iescu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iescu *IncidentEventSystemComponentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iescu.sqlSave, iescu.mutation, iescu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iescu *IncidentEventSystemComponentUpdate) SaveX(ctx context.Context) int {
	affected, err := iescu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iescu *IncidentEventSystemComponentUpdate) Exec(ctx context.Context) error {
	_, err := iescu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iescu *IncidentEventSystemComponentUpdate) ExecX(ctx context.Context) {
	if err := iescu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iescu *IncidentEventSystemComponentUpdate) check() error {
	if v, ok := iescu.mutation.Relationship(); ok {
		if err := incidenteventsystemcomponent.RelationshipValidator(v); err != nil {
			return &ValidationError{Name: "relationship", err: fmt.Errorf(`ent: validator failed for field "IncidentEventSystemComponent.relationship": %w`, err)}
		}
	}
	if iescu.mutation.EventCleared() && len(iescu.mutation.EventIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IncidentEventSystemComponent.event"`)
	}
	if iescu.mutation.SystemComponentCleared() && len(iescu.mutation.SystemComponentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IncidentEventSystemComponent.system_component"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (iescu *IncidentEventSystemComponentUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *IncidentEventSystemComponentUpdate {
	iescu.modifiers = append(iescu.modifiers, modifiers...)
	return iescu
}

func (iescu *IncidentEventSystemComponentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iescu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(incidenteventsystemcomponent.Table, incidenteventsystemcomponent.Columns, sqlgraph.NewFieldSpec(incidenteventsystemcomponent.FieldID, field.TypeUUID))
	if ps := iescu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iescu.mutation.Relationship(); ok {
		_spec.SetField(incidenteventsystemcomponent.FieldRelationship, field.TypeEnum, value)
	}
	if value, ok := iescu.mutation.CreatedAt(); ok {
		_spec.SetField(incidenteventsystemcomponent.FieldCreatedAt, field.TypeTime, value)
	}
	if iescu.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   incidenteventsystemcomponent.EventTable,
			Columns: []string{incidenteventsystemcomponent.EventColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidenteventsystemcomponent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iescu.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   incidenteventsystemcomponent.EventTable,
			Columns: []string{incidenteventsystemcomponent.EventColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidenteventsystemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iescu.mutation.SystemComponentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidenteventsystemcomponent.SystemComponentTable,
			Columns: []string{incidenteventsystemcomponent.SystemComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iescu.mutation.SystemComponentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidenteventsystemcomponent.SystemComponentTable,
			Columns: []string{incidenteventsystemcomponent.SystemComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(iescu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, iescu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{incidenteventsystemcomponent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iescu.mutation.done = true
	return n, nil
}

// IncidentEventSystemComponentUpdateOne is the builder for updating a single IncidentEventSystemComponent entity.
type IncidentEventSystemComponentUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *IncidentEventSystemComponentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetIncidentEventID sets the "incident_event_id" field.
func (iescuo *IncidentEventSystemComponentUpdateOne) SetIncidentEventID(u uuid.UUID) *IncidentEventSystemComponentUpdateOne {
	iescuo.mutation.SetIncidentEventID(u)
	return iescuo
}

// SetNillableIncidentEventID sets the "incident_event_id" field if the given value is not nil.
func (iescuo *IncidentEventSystemComponentUpdateOne) SetNillableIncidentEventID(u *uuid.UUID) *IncidentEventSystemComponentUpdateOne {
	if u != nil {
		iescuo.SetIncidentEventID(*u)
	}
	return iescuo
}

// SetSystemComponentID sets the "system_component_id" field.
func (iescuo *IncidentEventSystemComponentUpdateOne) SetSystemComponentID(u uuid.UUID) *IncidentEventSystemComponentUpdateOne {
	iescuo.mutation.SetSystemComponentID(u)
	return iescuo
}

// SetNillableSystemComponentID sets the "system_component_id" field if the given value is not nil.
func (iescuo *IncidentEventSystemComponentUpdateOne) SetNillableSystemComponentID(u *uuid.UUID) *IncidentEventSystemComponentUpdateOne {
	if u != nil {
		iescuo.SetSystemComponentID(*u)
	}
	return iescuo
}

// SetRelationship sets the "relationship" field.
func (iescuo *IncidentEventSystemComponentUpdateOne) SetRelationship(i incidenteventsystemcomponent.Relationship) *IncidentEventSystemComponentUpdateOne {
	iescuo.mutation.SetRelationship(i)
	return iescuo
}

// SetNillableRelationship sets the "relationship" field if the given value is not nil.
func (iescuo *IncidentEventSystemComponentUpdateOne) SetNillableRelationship(i *incidenteventsystemcomponent.Relationship) *IncidentEventSystemComponentUpdateOne {
	if i != nil {
		iescuo.SetRelationship(*i)
	}
	return iescuo
}

// SetCreatedAt sets the "created_at" field.
func (iescuo *IncidentEventSystemComponentUpdateOne) SetCreatedAt(t time.Time) *IncidentEventSystemComponentUpdateOne {
	iescuo.mutation.SetCreatedAt(t)
	return iescuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (iescuo *IncidentEventSystemComponentUpdateOne) SetNillableCreatedAt(t *time.Time) *IncidentEventSystemComponentUpdateOne {
	if t != nil {
		iescuo.SetCreatedAt(*t)
	}
	return iescuo
}

// SetEventID sets the "event" edge to the IncidentEventSystemComponent entity by ID.
func (iescuo *IncidentEventSystemComponentUpdateOne) SetEventID(id uuid.UUID) *IncidentEventSystemComponentUpdateOne {
	iescuo.mutation.SetEventID(id)
	return iescuo
}

// SetEvent sets the "event" edge to the IncidentEventSystemComponent entity.
func (iescuo *IncidentEventSystemComponentUpdateOne) SetEvent(i *IncidentEventSystemComponent) *IncidentEventSystemComponentUpdateOne {
	return iescuo.SetEventID(i.ID)
}

// SetSystemComponent sets the "system_component" edge to the SystemComponent entity.
func (iescuo *IncidentEventSystemComponentUpdateOne) SetSystemComponent(s *SystemComponent) *IncidentEventSystemComponentUpdateOne {
	return iescuo.SetSystemComponentID(s.ID)
}

// Mutation returns the IncidentEventSystemComponentMutation object of the builder.
func (iescuo *IncidentEventSystemComponentUpdateOne) Mutation() *IncidentEventSystemComponentMutation {
	return iescuo.mutation
}

// ClearEvent clears the "event" edge to the IncidentEventSystemComponent entity.
func (iescuo *IncidentEventSystemComponentUpdateOne) ClearEvent() *IncidentEventSystemComponentUpdateOne {
	iescuo.mutation.ClearEvent()
	return iescuo
}

// ClearSystemComponent clears the "system_component" edge to the SystemComponent entity.
func (iescuo *IncidentEventSystemComponentUpdateOne) ClearSystemComponent() *IncidentEventSystemComponentUpdateOne {
	iescuo.mutation.ClearSystemComponent()
	return iescuo
}

// Where appends a list predicates to the IncidentEventSystemComponentUpdate builder.
func (iescuo *IncidentEventSystemComponentUpdateOne) Where(ps ...predicate.IncidentEventSystemComponent) *IncidentEventSystemComponentUpdateOne {
	iescuo.mutation.Where(ps...)
	return iescuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iescuo *IncidentEventSystemComponentUpdateOne) Select(field string, fields ...string) *IncidentEventSystemComponentUpdateOne {
	iescuo.fields = append([]string{field}, fields...)
	return iescuo
}

// Save executes the query and returns the updated IncidentEventSystemComponent entity.
func (iescuo *IncidentEventSystemComponentUpdateOne) Save(ctx context.Context) (*IncidentEventSystemComponent, error) {
	return withHooks(ctx, iescuo.sqlSave, iescuo.mutation, iescuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iescuo *IncidentEventSystemComponentUpdateOne) SaveX(ctx context.Context) *IncidentEventSystemComponent {
	node, err := iescuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iescuo *IncidentEventSystemComponentUpdateOne) Exec(ctx context.Context) error {
	_, err := iescuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iescuo *IncidentEventSystemComponentUpdateOne) ExecX(ctx context.Context) {
	if err := iescuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iescuo *IncidentEventSystemComponentUpdateOne) check() error {
	if v, ok := iescuo.mutation.Relationship(); ok {
		if err := incidenteventsystemcomponent.RelationshipValidator(v); err != nil {
			return &ValidationError{Name: "relationship", err: fmt.Errorf(`ent: validator failed for field "IncidentEventSystemComponent.relationship": %w`, err)}
		}
	}
	if iescuo.mutation.EventCleared() && len(iescuo.mutation.EventIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IncidentEventSystemComponent.event"`)
	}
	if iescuo.mutation.SystemComponentCleared() && len(iescuo.mutation.SystemComponentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IncidentEventSystemComponent.system_component"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (iescuo *IncidentEventSystemComponentUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *IncidentEventSystemComponentUpdateOne {
	iescuo.modifiers = append(iescuo.modifiers, modifiers...)
	return iescuo
}

func (iescuo *IncidentEventSystemComponentUpdateOne) sqlSave(ctx context.Context) (_node *IncidentEventSystemComponent, err error) {
	if err := iescuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(incidenteventsystemcomponent.Table, incidenteventsystemcomponent.Columns, sqlgraph.NewFieldSpec(incidenteventsystemcomponent.FieldID, field.TypeUUID))
	id, ok := iescuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "IncidentEventSystemComponent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iescuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, incidenteventsystemcomponent.FieldID)
		for _, f := range fields {
			if !incidenteventsystemcomponent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != incidenteventsystemcomponent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iescuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iescuo.mutation.Relationship(); ok {
		_spec.SetField(incidenteventsystemcomponent.FieldRelationship, field.TypeEnum, value)
	}
	if value, ok := iescuo.mutation.CreatedAt(); ok {
		_spec.SetField(incidenteventsystemcomponent.FieldCreatedAt, field.TypeTime, value)
	}
	if iescuo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   incidenteventsystemcomponent.EventTable,
			Columns: []string{incidenteventsystemcomponent.EventColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidenteventsystemcomponent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iescuo.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   incidenteventsystemcomponent.EventTable,
			Columns: []string{incidenteventsystemcomponent.EventColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidenteventsystemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iescuo.mutation.SystemComponentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidenteventsystemcomponent.SystemComponentTable,
			Columns: []string{incidenteventsystemcomponent.SystemComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iescuo.mutation.SystemComponentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidenteventsystemcomponent.SystemComponentTable,
			Columns: []string{incidenteventsystemcomponent.SystemComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(iescuo.modifiers...)
	_node = &IncidentEventSystemComponent{config: iescuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iescuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{incidenteventsystemcomponent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iescuo.mutation.done = true
	return _node, nil
}
