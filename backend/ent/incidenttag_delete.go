// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/twohundreds/rezible/ent/incidenttag"
	"github.com/twohundreds/rezible/ent/predicate"
)

// IncidentTagDelete is the builder for deleting a IncidentTag entity.
type IncidentTagDelete struct {
	config
	hooks    []Hook
	mutation *IncidentTagMutation
}

// Where appends a list predicates to the IncidentTagDelete builder.
func (itd *IncidentTagDelete) Where(ps ...predicate.IncidentTag) *IncidentTagDelete {
	itd.mutation.Where(ps...)
	return itd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (itd *IncidentTagDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, itd.sqlExec, itd.mutation, itd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (itd *IncidentTagDelete) ExecX(ctx context.Context) int {
	n, err := itd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (itd *IncidentTagDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(incidenttag.Table, sqlgraph.NewFieldSpec(incidenttag.FieldID, field.TypeUUID))
	if ps := itd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, itd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	itd.mutation.done = true
	return affected, err
}

// IncidentTagDeleteOne is the builder for deleting a single IncidentTag entity.
type IncidentTagDeleteOne struct {
	itd *IncidentTagDelete
}

// Where appends a list predicates to the IncidentTagDelete builder.
func (itdo *IncidentTagDeleteOne) Where(ps ...predicate.IncidentTag) *IncidentTagDeleteOne {
	itdo.itd.mutation.Where(ps...)
	return itdo
}

// Exec executes the deletion query.
func (itdo *IncidentTagDeleteOne) Exec(ctx context.Context) error {
	n, err := itdo.itd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{incidenttag.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (itdo *IncidentTagDeleteOne) ExecX(ctx context.Context) {
	if err := itdo.Exec(ctx); err != nil {
		panic(err)
	}
}
