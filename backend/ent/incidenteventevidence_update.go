// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/incidentevent"
	"github.com/rezible/rezible/ent/incidenteventevidence"
	"github.com/rezible/rezible/ent/predicate"
)

// IncidentEventEvidenceUpdate is the builder for updating IncidentEventEvidence entities.
type IncidentEventEvidenceUpdate struct {
	config
	hooks     []Hook
	mutation  *IncidentEventEvidenceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the IncidentEventEvidenceUpdate builder.
func (ieeu *IncidentEventEvidenceUpdate) Where(ps ...predicate.IncidentEventEvidence) *IncidentEventEvidenceUpdate {
	ieeu.mutation.Where(ps...)
	return ieeu
}

// SetEvidenceType sets the "evidence_type" field.
func (ieeu *IncidentEventEvidenceUpdate) SetEvidenceType(it incidenteventevidence.EvidenceType) *IncidentEventEvidenceUpdate {
	ieeu.mutation.SetEvidenceType(it)
	return ieeu
}

// SetNillableEvidenceType sets the "evidence_type" field if the given value is not nil.
func (ieeu *IncidentEventEvidenceUpdate) SetNillableEvidenceType(it *incidenteventevidence.EvidenceType) *IncidentEventEvidenceUpdate {
	if it != nil {
		ieeu.SetEvidenceType(*it)
	}
	return ieeu
}

// SetURL sets the "url" field.
func (ieeu *IncidentEventEvidenceUpdate) SetURL(s string) *IncidentEventEvidenceUpdate {
	ieeu.mutation.SetURL(s)
	return ieeu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (ieeu *IncidentEventEvidenceUpdate) SetNillableURL(s *string) *IncidentEventEvidenceUpdate {
	if s != nil {
		ieeu.SetURL(*s)
	}
	return ieeu
}

// SetTitle sets the "title" field.
func (ieeu *IncidentEventEvidenceUpdate) SetTitle(s string) *IncidentEventEvidenceUpdate {
	ieeu.mutation.SetTitle(s)
	return ieeu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (ieeu *IncidentEventEvidenceUpdate) SetNillableTitle(s *string) *IncidentEventEvidenceUpdate {
	if s != nil {
		ieeu.SetTitle(*s)
	}
	return ieeu
}

// SetDescription sets the "description" field.
func (ieeu *IncidentEventEvidenceUpdate) SetDescription(s string) *IncidentEventEvidenceUpdate {
	ieeu.mutation.SetDescription(s)
	return ieeu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ieeu *IncidentEventEvidenceUpdate) SetNillableDescription(s *string) *IncidentEventEvidenceUpdate {
	if s != nil {
		ieeu.SetDescription(*s)
	}
	return ieeu
}

// ClearDescription clears the value of the "description" field.
func (ieeu *IncidentEventEvidenceUpdate) ClearDescription() *IncidentEventEvidenceUpdate {
	ieeu.mutation.ClearDescription()
	return ieeu
}

// SetCreatedAt sets the "created_at" field.
func (ieeu *IncidentEventEvidenceUpdate) SetCreatedAt(t time.Time) *IncidentEventEvidenceUpdate {
	ieeu.mutation.SetCreatedAt(t)
	return ieeu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ieeu *IncidentEventEvidenceUpdate) SetNillableCreatedAt(t *time.Time) *IncidentEventEvidenceUpdate {
	if t != nil {
		ieeu.SetCreatedAt(*t)
	}
	return ieeu
}

// SetEventID sets the "event" edge to the IncidentEvent entity by ID.
func (ieeu *IncidentEventEvidenceUpdate) SetEventID(id uuid.UUID) *IncidentEventEvidenceUpdate {
	ieeu.mutation.SetEventID(id)
	return ieeu
}

// SetEvent sets the "event" edge to the IncidentEvent entity.
func (ieeu *IncidentEventEvidenceUpdate) SetEvent(i *IncidentEvent) *IncidentEventEvidenceUpdate {
	return ieeu.SetEventID(i.ID)
}

// Mutation returns the IncidentEventEvidenceMutation object of the builder.
func (ieeu *IncidentEventEvidenceUpdate) Mutation() *IncidentEventEvidenceMutation {
	return ieeu.mutation
}

// ClearEvent clears the "event" edge to the IncidentEvent entity.
func (ieeu *IncidentEventEvidenceUpdate) ClearEvent() *IncidentEventEvidenceUpdate {
	ieeu.mutation.ClearEvent()
	return ieeu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ieeu *IncidentEventEvidenceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ieeu.sqlSave, ieeu.mutation, ieeu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ieeu *IncidentEventEvidenceUpdate) SaveX(ctx context.Context) int {
	affected, err := ieeu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ieeu *IncidentEventEvidenceUpdate) Exec(ctx context.Context) error {
	_, err := ieeu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ieeu *IncidentEventEvidenceUpdate) ExecX(ctx context.Context) {
	if err := ieeu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ieeu *IncidentEventEvidenceUpdate) check() error {
	if v, ok := ieeu.mutation.EvidenceType(); ok {
		if err := incidenteventevidence.EvidenceTypeValidator(v); err != nil {
			return &ValidationError{Name: "evidence_type", err: fmt.Errorf(`ent: validator failed for field "IncidentEventEvidence.evidence_type": %w`, err)}
		}
	}
	if v, ok := ieeu.mutation.URL(); ok {
		if err := incidenteventevidence.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "IncidentEventEvidence.url": %w`, err)}
		}
	}
	if v, ok := ieeu.mutation.Title(); ok {
		if err := incidenteventevidence.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "IncidentEventEvidence.title": %w`, err)}
		}
	}
	if ieeu.mutation.TenantCleared() && len(ieeu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IncidentEventEvidence.tenant"`)
	}
	if ieeu.mutation.EventCleared() && len(ieeu.mutation.EventIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IncidentEventEvidence.event"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ieeu *IncidentEventEvidenceUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *IncidentEventEvidenceUpdate {
	ieeu.modifiers = append(ieeu.modifiers, modifiers...)
	return ieeu
}

func (ieeu *IncidentEventEvidenceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ieeu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(incidenteventevidence.Table, incidenteventevidence.Columns, sqlgraph.NewFieldSpec(incidenteventevidence.FieldID, field.TypeUUID))
	if ps := ieeu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ieeu.mutation.EvidenceType(); ok {
		_spec.SetField(incidenteventevidence.FieldEvidenceType, field.TypeEnum, value)
	}
	if value, ok := ieeu.mutation.URL(); ok {
		_spec.SetField(incidenteventevidence.FieldURL, field.TypeString, value)
	}
	if value, ok := ieeu.mutation.Title(); ok {
		_spec.SetField(incidenteventevidence.FieldTitle, field.TypeString, value)
	}
	if value, ok := ieeu.mutation.Description(); ok {
		_spec.SetField(incidenteventevidence.FieldDescription, field.TypeString, value)
	}
	if ieeu.mutation.DescriptionCleared() {
		_spec.ClearField(incidenteventevidence.FieldDescription, field.TypeString)
	}
	if value, ok := ieeu.mutation.CreatedAt(); ok {
		_spec.SetField(incidenteventevidence.FieldCreatedAt, field.TypeTime, value)
	}
	if ieeu.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incidenteventevidence.EventTable,
			Columns: []string{incidenteventevidence.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentevent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ieeu.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incidenteventevidence.EventTable,
			Columns: []string{incidenteventevidence.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentevent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ieeu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ieeu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{incidenteventevidence.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ieeu.mutation.done = true
	return n, nil
}

// IncidentEventEvidenceUpdateOne is the builder for updating a single IncidentEventEvidence entity.
type IncidentEventEvidenceUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *IncidentEventEvidenceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEvidenceType sets the "evidence_type" field.
func (ieeuo *IncidentEventEvidenceUpdateOne) SetEvidenceType(it incidenteventevidence.EvidenceType) *IncidentEventEvidenceUpdateOne {
	ieeuo.mutation.SetEvidenceType(it)
	return ieeuo
}

// SetNillableEvidenceType sets the "evidence_type" field if the given value is not nil.
func (ieeuo *IncidentEventEvidenceUpdateOne) SetNillableEvidenceType(it *incidenteventevidence.EvidenceType) *IncidentEventEvidenceUpdateOne {
	if it != nil {
		ieeuo.SetEvidenceType(*it)
	}
	return ieeuo
}

// SetURL sets the "url" field.
func (ieeuo *IncidentEventEvidenceUpdateOne) SetURL(s string) *IncidentEventEvidenceUpdateOne {
	ieeuo.mutation.SetURL(s)
	return ieeuo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (ieeuo *IncidentEventEvidenceUpdateOne) SetNillableURL(s *string) *IncidentEventEvidenceUpdateOne {
	if s != nil {
		ieeuo.SetURL(*s)
	}
	return ieeuo
}

// SetTitle sets the "title" field.
func (ieeuo *IncidentEventEvidenceUpdateOne) SetTitle(s string) *IncidentEventEvidenceUpdateOne {
	ieeuo.mutation.SetTitle(s)
	return ieeuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (ieeuo *IncidentEventEvidenceUpdateOne) SetNillableTitle(s *string) *IncidentEventEvidenceUpdateOne {
	if s != nil {
		ieeuo.SetTitle(*s)
	}
	return ieeuo
}

// SetDescription sets the "description" field.
func (ieeuo *IncidentEventEvidenceUpdateOne) SetDescription(s string) *IncidentEventEvidenceUpdateOne {
	ieeuo.mutation.SetDescription(s)
	return ieeuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ieeuo *IncidentEventEvidenceUpdateOne) SetNillableDescription(s *string) *IncidentEventEvidenceUpdateOne {
	if s != nil {
		ieeuo.SetDescription(*s)
	}
	return ieeuo
}

// ClearDescription clears the value of the "description" field.
func (ieeuo *IncidentEventEvidenceUpdateOne) ClearDescription() *IncidentEventEvidenceUpdateOne {
	ieeuo.mutation.ClearDescription()
	return ieeuo
}

// SetCreatedAt sets the "created_at" field.
func (ieeuo *IncidentEventEvidenceUpdateOne) SetCreatedAt(t time.Time) *IncidentEventEvidenceUpdateOne {
	ieeuo.mutation.SetCreatedAt(t)
	return ieeuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ieeuo *IncidentEventEvidenceUpdateOne) SetNillableCreatedAt(t *time.Time) *IncidentEventEvidenceUpdateOne {
	if t != nil {
		ieeuo.SetCreatedAt(*t)
	}
	return ieeuo
}

// SetEventID sets the "event" edge to the IncidentEvent entity by ID.
func (ieeuo *IncidentEventEvidenceUpdateOne) SetEventID(id uuid.UUID) *IncidentEventEvidenceUpdateOne {
	ieeuo.mutation.SetEventID(id)
	return ieeuo
}

// SetEvent sets the "event" edge to the IncidentEvent entity.
func (ieeuo *IncidentEventEvidenceUpdateOne) SetEvent(i *IncidentEvent) *IncidentEventEvidenceUpdateOne {
	return ieeuo.SetEventID(i.ID)
}

// Mutation returns the IncidentEventEvidenceMutation object of the builder.
func (ieeuo *IncidentEventEvidenceUpdateOne) Mutation() *IncidentEventEvidenceMutation {
	return ieeuo.mutation
}

// ClearEvent clears the "event" edge to the IncidentEvent entity.
func (ieeuo *IncidentEventEvidenceUpdateOne) ClearEvent() *IncidentEventEvidenceUpdateOne {
	ieeuo.mutation.ClearEvent()
	return ieeuo
}

// Where appends a list predicates to the IncidentEventEvidenceUpdate builder.
func (ieeuo *IncidentEventEvidenceUpdateOne) Where(ps ...predicate.IncidentEventEvidence) *IncidentEventEvidenceUpdateOne {
	ieeuo.mutation.Where(ps...)
	return ieeuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ieeuo *IncidentEventEvidenceUpdateOne) Select(field string, fields ...string) *IncidentEventEvidenceUpdateOne {
	ieeuo.fields = append([]string{field}, fields...)
	return ieeuo
}

// Save executes the query and returns the updated IncidentEventEvidence entity.
func (ieeuo *IncidentEventEvidenceUpdateOne) Save(ctx context.Context) (*IncidentEventEvidence, error) {
	return withHooks(ctx, ieeuo.sqlSave, ieeuo.mutation, ieeuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ieeuo *IncidentEventEvidenceUpdateOne) SaveX(ctx context.Context) *IncidentEventEvidence {
	node, err := ieeuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ieeuo *IncidentEventEvidenceUpdateOne) Exec(ctx context.Context) error {
	_, err := ieeuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ieeuo *IncidentEventEvidenceUpdateOne) ExecX(ctx context.Context) {
	if err := ieeuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ieeuo *IncidentEventEvidenceUpdateOne) check() error {
	if v, ok := ieeuo.mutation.EvidenceType(); ok {
		if err := incidenteventevidence.EvidenceTypeValidator(v); err != nil {
			return &ValidationError{Name: "evidence_type", err: fmt.Errorf(`ent: validator failed for field "IncidentEventEvidence.evidence_type": %w`, err)}
		}
	}
	if v, ok := ieeuo.mutation.URL(); ok {
		if err := incidenteventevidence.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "IncidentEventEvidence.url": %w`, err)}
		}
	}
	if v, ok := ieeuo.mutation.Title(); ok {
		if err := incidenteventevidence.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "IncidentEventEvidence.title": %w`, err)}
		}
	}
	if ieeuo.mutation.TenantCleared() && len(ieeuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IncidentEventEvidence.tenant"`)
	}
	if ieeuo.mutation.EventCleared() && len(ieeuo.mutation.EventIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IncidentEventEvidence.event"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ieeuo *IncidentEventEvidenceUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *IncidentEventEvidenceUpdateOne {
	ieeuo.modifiers = append(ieeuo.modifiers, modifiers...)
	return ieeuo
}

func (ieeuo *IncidentEventEvidenceUpdateOne) sqlSave(ctx context.Context) (_node *IncidentEventEvidence, err error) {
	if err := ieeuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(incidenteventevidence.Table, incidenteventevidence.Columns, sqlgraph.NewFieldSpec(incidenteventevidence.FieldID, field.TypeUUID))
	id, ok := ieeuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "IncidentEventEvidence.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ieeuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, incidenteventevidence.FieldID)
		for _, f := range fields {
			if !incidenteventevidence.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != incidenteventevidence.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ieeuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ieeuo.mutation.EvidenceType(); ok {
		_spec.SetField(incidenteventevidence.FieldEvidenceType, field.TypeEnum, value)
	}
	if value, ok := ieeuo.mutation.URL(); ok {
		_spec.SetField(incidenteventevidence.FieldURL, field.TypeString, value)
	}
	if value, ok := ieeuo.mutation.Title(); ok {
		_spec.SetField(incidenteventevidence.FieldTitle, field.TypeString, value)
	}
	if value, ok := ieeuo.mutation.Description(); ok {
		_spec.SetField(incidenteventevidence.FieldDescription, field.TypeString, value)
	}
	if ieeuo.mutation.DescriptionCleared() {
		_spec.ClearField(incidenteventevidence.FieldDescription, field.TypeString)
	}
	if value, ok := ieeuo.mutation.CreatedAt(); ok {
		_spec.SetField(incidenteventevidence.FieldCreatedAt, field.TypeTime, value)
	}
	if ieeuo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incidenteventevidence.EventTable,
			Columns: []string{incidenteventevidence.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentevent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ieeuo.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incidenteventevidence.EventTable,
			Columns: []string{incidenteventevidence.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentevent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ieeuo.modifiers...)
	_node = &IncidentEventEvidence{config: ieeuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ieeuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{incidenteventevidence.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ieeuo.mutation.done = true
	return _node, nil
}
