// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/systemcomponent"
	"github.com/rezible/rezible/ent/systemcomponentcontrolrelationship"
)

// SystemComponentControlRelationshipUpdate is the builder for updating SystemComponentControlRelationship entities.
type SystemComponentControlRelationshipUpdate struct {
	config
	hooks     []Hook
	mutation  *SystemComponentControlRelationshipMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SystemComponentControlRelationshipUpdate builder.
func (sccru *SystemComponentControlRelationshipUpdate) Where(ps ...predicate.SystemComponentControlRelationship) *SystemComponentControlRelationshipUpdate {
	sccru.mutation.Where(ps...)
	return sccru
}

// SetControllerID sets the "controller_id" field.
func (sccru *SystemComponentControlRelationshipUpdate) SetControllerID(u uuid.UUID) *SystemComponentControlRelationshipUpdate {
	sccru.mutation.SetControllerID(u)
	return sccru
}

// SetNillableControllerID sets the "controller_id" field if the given value is not nil.
func (sccru *SystemComponentControlRelationshipUpdate) SetNillableControllerID(u *uuid.UUID) *SystemComponentControlRelationshipUpdate {
	if u != nil {
		sccru.SetControllerID(*u)
	}
	return sccru
}

// SetControlledID sets the "controlled_id" field.
func (sccru *SystemComponentControlRelationshipUpdate) SetControlledID(u uuid.UUID) *SystemComponentControlRelationshipUpdate {
	sccru.mutation.SetControlledID(u)
	return sccru
}

// SetNillableControlledID sets the "controlled_id" field if the given value is not nil.
func (sccru *SystemComponentControlRelationshipUpdate) SetNillableControlledID(u *uuid.UUID) *SystemComponentControlRelationshipUpdate {
	if u != nil {
		sccru.SetControlledID(*u)
	}
	return sccru
}

// SetType sets the "type" field.
func (sccru *SystemComponentControlRelationshipUpdate) SetType(s string) *SystemComponentControlRelationshipUpdate {
	sccru.mutation.SetType(s)
	return sccru
}

// SetNillableType sets the "type" field if the given value is not nil.
func (sccru *SystemComponentControlRelationshipUpdate) SetNillableType(s *string) *SystemComponentControlRelationshipUpdate {
	if s != nil {
		sccru.SetType(*s)
	}
	return sccru
}

// SetDescription sets the "description" field.
func (sccru *SystemComponentControlRelationshipUpdate) SetDescription(s string) *SystemComponentControlRelationshipUpdate {
	sccru.mutation.SetDescription(s)
	return sccru
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sccru *SystemComponentControlRelationshipUpdate) SetNillableDescription(s *string) *SystemComponentControlRelationshipUpdate {
	if s != nil {
		sccru.SetDescription(*s)
	}
	return sccru
}

// ClearDescription clears the value of the "description" field.
func (sccru *SystemComponentControlRelationshipUpdate) ClearDescription() *SystemComponentControlRelationshipUpdate {
	sccru.mutation.ClearDescription()
	return sccru
}

// SetCreatedAt sets the "created_at" field.
func (sccru *SystemComponentControlRelationshipUpdate) SetCreatedAt(t time.Time) *SystemComponentControlRelationshipUpdate {
	sccru.mutation.SetCreatedAt(t)
	return sccru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sccru *SystemComponentControlRelationshipUpdate) SetNillableCreatedAt(t *time.Time) *SystemComponentControlRelationshipUpdate {
	if t != nil {
		sccru.SetCreatedAt(*t)
	}
	return sccru
}

// SetController sets the "controller" edge to the SystemComponent entity.
func (sccru *SystemComponentControlRelationshipUpdate) SetController(s *SystemComponent) *SystemComponentControlRelationshipUpdate {
	return sccru.SetControllerID(s.ID)
}

// SetControlled sets the "controlled" edge to the SystemComponent entity.
func (sccru *SystemComponentControlRelationshipUpdate) SetControlled(s *SystemComponent) *SystemComponentControlRelationshipUpdate {
	return sccru.SetControlledID(s.ID)
}

// Mutation returns the SystemComponentControlRelationshipMutation object of the builder.
func (sccru *SystemComponentControlRelationshipUpdate) Mutation() *SystemComponentControlRelationshipMutation {
	return sccru.mutation
}

// ClearController clears the "controller" edge to the SystemComponent entity.
func (sccru *SystemComponentControlRelationshipUpdate) ClearController() *SystemComponentControlRelationshipUpdate {
	sccru.mutation.ClearController()
	return sccru
}

// ClearControlled clears the "controlled" edge to the SystemComponent entity.
func (sccru *SystemComponentControlRelationshipUpdate) ClearControlled() *SystemComponentControlRelationshipUpdate {
	sccru.mutation.ClearControlled()
	return sccru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sccru *SystemComponentControlRelationshipUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sccru.sqlSave, sccru.mutation, sccru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sccru *SystemComponentControlRelationshipUpdate) SaveX(ctx context.Context) int {
	affected, err := sccru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sccru *SystemComponentControlRelationshipUpdate) Exec(ctx context.Context) error {
	_, err := sccru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sccru *SystemComponentControlRelationshipUpdate) ExecX(ctx context.Context) {
	if err := sccru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sccru *SystemComponentControlRelationshipUpdate) check() error {
	if v, ok := sccru.mutation.GetType(); ok {
		if err := systemcomponentcontrolrelationship.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "SystemComponentControlRelationship.type": %w`, err)}
		}
	}
	if sccru.mutation.ControllerCleared() && len(sccru.mutation.ControllerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SystemComponentControlRelationship.controller"`)
	}
	if sccru.mutation.ControlledCleared() && len(sccru.mutation.ControlledIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SystemComponentControlRelationship.controlled"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sccru *SystemComponentControlRelationshipUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SystemComponentControlRelationshipUpdate {
	sccru.modifiers = append(sccru.modifiers, modifiers...)
	return sccru
}

func (sccru *SystemComponentControlRelationshipUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sccru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(systemcomponentcontrolrelationship.Table, systemcomponentcontrolrelationship.Columns, sqlgraph.NewFieldSpec(systemcomponentcontrolrelationship.FieldID, field.TypeUUID))
	if ps := sccru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sccru.mutation.GetType(); ok {
		_spec.SetField(systemcomponentcontrolrelationship.FieldType, field.TypeString, value)
	}
	if value, ok := sccru.mutation.Description(); ok {
		_spec.SetField(systemcomponentcontrolrelationship.FieldDescription, field.TypeString, value)
	}
	if sccru.mutation.DescriptionCleared() {
		_spec.ClearField(systemcomponentcontrolrelationship.FieldDescription, field.TypeString)
	}
	if value, ok := sccru.mutation.CreatedAt(); ok {
		_spec.SetField(systemcomponentcontrolrelationship.FieldCreatedAt, field.TypeTime, value)
	}
	if sccru.mutation.ControllerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemcomponentcontrolrelationship.ControllerTable,
			Columns: []string{systemcomponentcontrolrelationship.ControllerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sccru.mutation.ControllerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemcomponentcontrolrelationship.ControllerTable,
			Columns: []string{systemcomponentcontrolrelationship.ControllerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sccru.mutation.ControlledCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemcomponentcontrolrelationship.ControlledTable,
			Columns: []string{systemcomponentcontrolrelationship.ControlledColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sccru.mutation.ControlledIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemcomponentcontrolrelationship.ControlledTable,
			Columns: []string{systemcomponentcontrolrelationship.ControlledColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(sccru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, sccru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systemcomponentcontrolrelationship.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sccru.mutation.done = true
	return n, nil
}

// SystemComponentControlRelationshipUpdateOne is the builder for updating a single SystemComponentControlRelationship entity.
type SystemComponentControlRelationshipUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SystemComponentControlRelationshipMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetControllerID sets the "controller_id" field.
func (sccruo *SystemComponentControlRelationshipUpdateOne) SetControllerID(u uuid.UUID) *SystemComponentControlRelationshipUpdateOne {
	sccruo.mutation.SetControllerID(u)
	return sccruo
}

// SetNillableControllerID sets the "controller_id" field if the given value is not nil.
func (sccruo *SystemComponentControlRelationshipUpdateOne) SetNillableControllerID(u *uuid.UUID) *SystemComponentControlRelationshipUpdateOne {
	if u != nil {
		sccruo.SetControllerID(*u)
	}
	return sccruo
}

// SetControlledID sets the "controlled_id" field.
func (sccruo *SystemComponentControlRelationshipUpdateOne) SetControlledID(u uuid.UUID) *SystemComponentControlRelationshipUpdateOne {
	sccruo.mutation.SetControlledID(u)
	return sccruo
}

// SetNillableControlledID sets the "controlled_id" field if the given value is not nil.
func (sccruo *SystemComponentControlRelationshipUpdateOne) SetNillableControlledID(u *uuid.UUID) *SystemComponentControlRelationshipUpdateOne {
	if u != nil {
		sccruo.SetControlledID(*u)
	}
	return sccruo
}

// SetType sets the "type" field.
func (sccruo *SystemComponentControlRelationshipUpdateOne) SetType(s string) *SystemComponentControlRelationshipUpdateOne {
	sccruo.mutation.SetType(s)
	return sccruo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (sccruo *SystemComponentControlRelationshipUpdateOne) SetNillableType(s *string) *SystemComponentControlRelationshipUpdateOne {
	if s != nil {
		sccruo.SetType(*s)
	}
	return sccruo
}

// SetDescription sets the "description" field.
func (sccruo *SystemComponentControlRelationshipUpdateOne) SetDescription(s string) *SystemComponentControlRelationshipUpdateOne {
	sccruo.mutation.SetDescription(s)
	return sccruo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sccruo *SystemComponentControlRelationshipUpdateOne) SetNillableDescription(s *string) *SystemComponentControlRelationshipUpdateOne {
	if s != nil {
		sccruo.SetDescription(*s)
	}
	return sccruo
}

// ClearDescription clears the value of the "description" field.
func (sccruo *SystemComponentControlRelationshipUpdateOne) ClearDescription() *SystemComponentControlRelationshipUpdateOne {
	sccruo.mutation.ClearDescription()
	return sccruo
}

// SetCreatedAt sets the "created_at" field.
func (sccruo *SystemComponentControlRelationshipUpdateOne) SetCreatedAt(t time.Time) *SystemComponentControlRelationshipUpdateOne {
	sccruo.mutation.SetCreatedAt(t)
	return sccruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sccruo *SystemComponentControlRelationshipUpdateOne) SetNillableCreatedAt(t *time.Time) *SystemComponentControlRelationshipUpdateOne {
	if t != nil {
		sccruo.SetCreatedAt(*t)
	}
	return sccruo
}

// SetController sets the "controller" edge to the SystemComponent entity.
func (sccruo *SystemComponentControlRelationshipUpdateOne) SetController(s *SystemComponent) *SystemComponentControlRelationshipUpdateOne {
	return sccruo.SetControllerID(s.ID)
}

// SetControlled sets the "controlled" edge to the SystemComponent entity.
func (sccruo *SystemComponentControlRelationshipUpdateOne) SetControlled(s *SystemComponent) *SystemComponentControlRelationshipUpdateOne {
	return sccruo.SetControlledID(s.ID)
}

// Mutation returns the SystemComponentControlRelationshipMutation object of the builder.
func (sccruo *SystemComponentControlRelationshipUpdateOne) Mutation() *SystemComponentControlRelationshipMutation {
	return sccruo.mutation
}

// ClearController clears the "controller" edge to the SystemComponent entity.
func (sccruo *SystemComponentControlRelationshipUpdateOne) ClearController() *SystemComponentControlRelationshipUpdateOne {
	sccruo.mutation.ClearController()
	return sccruo
}

// ClearControlled clears the "controlled" edge to the SystemComponent entity.
func (sccruo *SystemComponentControlRelationshipUpdateOne) ClearControlled() *SystemComponentControlRelationshipUpdateOne {
	sccruo.mutation.ClearControlled()
	return sccruo
}

// Where appends a list predicates to the SystemComponentControlRelationshipUpdate builder.
func (sccruo *SystemComponentControlRelationshipUpdateOne) Where(ps ...predicate.SystemComponentControlRelationship) *SystemComponentControlRelationshipUpdateOne {
	sccruo.mutation.Where(ps...)
	return sccruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sccruo *SystemComponentControlRelationshipUpdateOne) Select(field string, fields ...string) *SystemComponentControlRelationshipUpdateOne {
	sccruo.fields = append([]string{field}, fields...)
	return sccruo
}

// Save executes the query and returns the updated SystemComponentControlRelationship entity.
func (sccruo *SystemComponentControlRelationshipUpdateOne) Save(ctx context.Context) (*SystemComponentControlRelationship, error) {
	return withHooks(ctx, sccruo.sqlSave, sccruo.mutation, sccruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sccruo *SystemComponentControlRelationshipUpdateOne) SaveX(ctx context.Context) *SystemComponentControlRelationship {
	node, err := sccruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sccruo *SystemComponentControlRelationshipUpdateOne) Exec(ctx context.Context) error {
	_, err := sccruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sccruo *SystemComponentControlRelationshipUpdateOne) ExecX(ctx context.Context) {
	if err := sccruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sccruo *SystemComponentControlRelationshipUpdateOne) check() error {
	if v, ok := sccruo.mutation.GetType(); ok {
		if err := systemcomponentcontrolrelationship.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "SystemComponentControlRelationship.type": %w`, err)}
		}
	}
	if sccruo.mutation.ControllerCleared() && len(sccruo.mutation.ControllerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SystemComponentControlRelationship.controller"`)
	}
	if sccruo.mutation.ControlledCleared() && len(sccruo.mutation.ControlledIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SystemComponentControlRelationship.controlled"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sccruo *SystemComponentControlRelationshipUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SystemComponentControlRelationshipUpdateOne {
	sccruo.modifiers = append(sccruo.modifiers, modifiers...)
	return sccruo
}

func (sccruo *SystemComponentControlRelationshipUpdateOne) sqlSave(ctx context.Context) (_node *SystemComponentControlRelationship, err error) {
	if err := sccruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(systemcomponentcontrolrelationship.Table, systemcomponentcontrolrelationship.Columns, sqlgraph.NewFieldSpec(systemcomponentcontrolrelationship.FieldID, field.TypeUUID))
	id, ok := sccruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SystemComponentControlRelationship.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sccruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, systemcomponentcontrolrelationship.FieldID)
		for _, f := range fields {
			if !systemcomponentcontrolrelationship.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != systemcomponentcontrolrelationship.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sccruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sccruo.mutation.GetType(); ok {
		_spec.SetField(systemcomponentcontrolrelationship.FieldType, field.TypeString, value)
	}
	if value, ok := sccruo.mutation.Description(); ok {
		_spec.SetField(systemcomponentcontrolrelationship.FieldDescription, field.TypeString, value)
	}
	if sccruo.mutation.DescriptionCleared() {
		_spec.ClearField(systemcomponentcontrolrelationship.FieldDescription, field.TypeString)
	}
	if value, ok := sccruo.mutation.CreatedAt(); ok {
		_spec.SetField(systemcomponentcontrolrelationship.FieldCreatedAt, field.TypeTime, value)
	}
	if sccruo.mutation.ControllerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemcomponentcontrolrelationship.ControllerTable,
			Columns: []string{systemcomponentcontrolrelationship.ControllerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sccruo.mutation.ControllerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemcomponentcontrolrelationship.ControllerTable,
			Columns: []string{systemcomponentcontrolrelationship.ControllerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sccruo.mutation.ControlledCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemcomponentcontrolrelationship.ControlledTable,
			Columns: []string{systemcomponentcontrolrelationship.ControlledColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sccruo.mutation.ControlledIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemcomponentcontrolrelationship.ControlledTable,
			Columns: []string{systemcomponentcontrolrelationship.ControlledColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(sccruo.modifiers...)
	_node = &SystemComponentControlRelationship{config: sccruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sccruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systemcomponentcontrolrelationship.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sccruo.mutation.done = true
	return _node, nil
}
