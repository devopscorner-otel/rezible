// Code generated by ent, DO NOT EDIT.

package incidentfield

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.IncidentField {
	return predicate.IncidentField(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.IncidentField {
	return predicate.IncidentField(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.IncidentField {
	return predicate.IncidentField(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.IncidentField {
	return predicate.IncidentField(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.IncidentField {
	return predicate.IncidentField(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.IncidentField {
	return predicate.IncidentField(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.IncidentField {
	return predicate.IncidentField(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.IncidentField {
	return predicate.IncidentField(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.IncidentField {
	return predicate.IncidentField(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v int) predicate.IncidentField {
	return predicate.IncidentField(sql.FieldEQ(FieldTenantID, v))
}

// ArchiveTime applies equality check predicate on the "archive_time" field. It's identical to ArchiveTimeEQ.
func ArchiveTime(v time.Time) predicate.IncidentField {
	return predicate.IncidentField(sql.FieldEQ(FieldArchiveTime, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.IncidentField {
	return predicate.IncidentField(sql.FieldEQ(FieldName, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v int) predicate.IncidentField {
	return predicate.IncidentField(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v int) predicate.IncidentField {
	return predicate.IncidentField(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...int) predicate.IncidentField {
	return predicate.IncidentField(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...int) predicate.IncidentField {
	return predicate.IncidentField(sql.FieldNotIn(FieldTenantID, vs...))
}

// ArchiveTimeEQ applies the EQ predicate on the "archive_time" field.
func ArchiveTimeEQ(v time.Time) predicate.IncidentField {
	return predicate.IncidentField(sql.FieldEQ(FieldArchiveTime, v))
}

// ArchiveTimeNEQ applies the NEQ predicate on the "archive_time" field.
func ArchiveTimeNEQ(v time.Time) predicate.IncidentField {
	return predicate.IncidentField(sql.FieldNEQ(FieldArchiveTime, v))
}

// ArchiveTimeIn applies the In predicate on the "archive_time" field.
func ArchiveTimeIn(vs ...time.Time) predicate.IncidentField {
	return predicate.IncidentField(sql.FieldIn(FieldArchiveTime, vs...))
}

// ArchiveTimeNotIn applies the NotIn predicate on the "archive_time" field.
func ArchiveTimeNotIn(vs ...time.Time) predicate.IncidentField {
	return predicate.IncidentField(sql.FieldNotIn(FieldArchiveTime, vs...))
}

// ArchiveTimeGT applies the GT predicate on the "archive_time" field.
func ArchiveTimeGT(v time.Time) predicate.IncidentField {
	return predicate.IncidentField(sql.FieldGT(FieldArchiveTime, v))
}

// ArchiveTimeGTE applies the GTE predicate on the "archive_time" field.
func ArchiveTimeGTE(v time.Time) predicate.IncidentField {
	return predicate.IncidentField(sql.FieldGTE(FieldArchiveTime, v))
}

// ArchiveTimeLT applies the LT predicate on the "archive_time" field.
func ArchiveTimeLT(v time.Time) predicate.IncidentField {
	return predicate.IncidentField(sql.FieldLT(FieldArchiveTime, v))
}

// ArchiveTimeLTE applies the LTE predicate on the "archive_time" field.
func ArchiveTimeLTE(v time.Time) predicate.IncidentField {
	return predicate.IncidentField(sql.FieldLTE(FieldArchiveTime, v))
}

// ArchiveTimeIsNil applies the IsNil predicate on the "archive_time" field.
func ArchiveTimeIsNil() predicate.IncidentField {
	return predicate.IncidentField(sql.FieldIsNull(FieldArchiveTime))
}

// ArchiveTimeNotNil applies the NotNil predicate on the "archive_time" field.
func ArchiveTimeNotNil() predicate.IncidentField {
	return predicate.IncidentField(sql.FieldNotNull(FieldArchiveTime))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.IncidentField {
	return predicate.IncidentField(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.IncidentField {
	return predicate.IncidentField(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.IncidentField {
	return predicate.IncidentField(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.IncidentField {
	return predicate.IncidentField(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.IncidentField {
	return predicate.IncidentField(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.IncidentField {
	return predicate.IncidentField(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.IncidentField {
	return predicate.IncidentField(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.IncidentField {
	return predicate.IncidentField(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.IncidentField {
	return predicate.IncidentField(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.IncidentField {
	return predicate.IncidentField(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.IncidentField {
	return predicate.IncidentField(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.IncidentField {
	return predicate.IncidentField(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.IncidentField {
	return predicate.IncidentField(sql.FieldContainsFold(FieldName, v))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.IncidentField {
	return predicate.IncidentField(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.IncidentField {
	return predicate.IncidentField(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOptions applies the HasEdge predicate on the "options" edge.
func HasOptions() predicate.IncidentField {
	return predicate.IncidentField(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OptionsTable, OptionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOptionsWith applies the HasEdge predicate on the "options" edge with a given conditions (other predicates).
func HasOptionsWith(preds ...predicate.IncidentFieldOption) predicate.IncidentField {
	return predicate.IncidentField(func(s *sql.Selector) {
		step := newOptionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDebriefQuestions applies the HasEdge predicate on the "debrief_questions" edge.
func HasDebriefQuestions() predicate.IncidentField {
	return predicate.IncidentField(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, DebriefQuestionsTable, DebriefQuestionsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDebriefQuestionsWith applies the HasEdge predicate on the "debrief_questions" edge with a given conditions (other predicates).
func HasDebriefQuestionsWith(preds ...predicate.IncidentDebriefQuestion) predicate.IncidentField {
	return predicate.IncidentField(func(s *sql.Selector) {
		step := newDebriefQuestionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.IncidentField) predicate.IncidentField {
	return predicate.IncidentField(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.IncidentField) predicate.IncidentField {
	return predicate.IncidentField(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.IncidentField) predicate.IncidentField {
	return predicate.IncidentField(sql.NotPredicates(p))
}
