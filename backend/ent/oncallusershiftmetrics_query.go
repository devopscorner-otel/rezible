// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/oncallusershift"
	"github.com/rezible/rezible/ent/oncallusershiftmetrics"
	"github.com/rezible/rezible/ent/predicate"
)

// OncallUserShiftMetricsQuery is the builder for querying OncallUserShiftMetrics entities.
type OncallUserShiftMetricsQuery struct {
	config
	ctx        *QueryContext
	order      []oncallusershiftmetrics.OrderOption
	inters     []Interceptor
	predicates []predicate.OncallUserShiftMetrics
	withShift  *OncallUserShiftQuery
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OncallUserShiftMetricsQuery builder.
func (ousmq *OncallUserShiftMetricsQuery) Where(ps ...predicate.OncallUserShiftMetrics) *OncallUserShiftMetricsQuery {
	ousmq.predicates = append(ousmq.predicates, ps...)
	return ousmq
}

// Limit the number of records to be returned by this query.
func (ousmq *OncallUserShiftMetricsQuery) Limit(limit int) *OncallUserShiftMetricsQuery {
	ousmq.ctx.Limit = &limit
	return ousmq
}

// Offset to start from.
func (ousmq *OncallUserShiftMetricsQuery) Offset(offset int) *OncallUserShiftMetricsQuery {
	ousmq.ctx.Offset = &offset
	return ousmq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ousmq *OncallUserShiftMetricsQuery) Unique(unique bool) *OncallUserShiftMetricsQuery {
	ousmq.ctx.Unique = &unique
	return ousmq
}

// Order specifies how the records should be ordered.
func (ousmq *OncallUserShiftMetricsQuery) Order(o ...oncallusershiftmetrics.OrderOption) *OncallUserShiftMetricsQuery {
	ousmq.order = append(ousmq.order, o...)
	return ousmq
}

// QueryShift chains the current query on the "shift" edge.
func (ousmq *OncallUserShiftMetricsQuery) QueryShift() *OncallUserShiftQuery {
	query := (&OncallUserShiftClient{config: ousmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ousmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ousmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(oncallusershiftmetrics.Table, oncallusershiftmetrics.FieldID, selector),
			sqlgraph.To(oncallusershift.Table, oncallusershift.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, oncallusershiftmetrics.ShiftTable, oncallusershiftmetrics.ShiftColumn),
		)
		fromU = sqlgraph.SetNeighbors(ousmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first OncallUserShiftMetrics entity from the query.
// Returns a *NotFoundError when no OncallUserShiftMetrics was found.
func (ousmq *OncallUserShiftMetricsQuery) First(ctx context.Context) (*OncallUserShiftMetrics, error) {
	nodes, err := ousmq.Limit(1).All(setContextOp(ctx, ousmq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{oncallusershiftmetrics.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ousmq *OncallUserShiftMetricsQuery) FirstX(ctx context.Context) *OncallUserShiftMetrics {
	node, err := ousmq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first OncallUserShiftMetrics ID from the query.
// Returns a *NotFoundError when no OncallUserShiftMetrics ID was found.
func (ousmq *OncallUserShiftMetricsQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = ousmq.Limit(1).IDs(setContextOp(ctx, ousmq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{oncallusershiftmetrics.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ousmq *OncallUserShiftMetricsQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := ousmq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single OncallUserShiftMetrics entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one OncallUserShiftMetrics entity is found.
// Returns a *NotFoundError when no OncallUserShiftMetrics entities are found.
func (ousmq *OncallUserShiftMetricsQuery) Only(ctx context.Context) (*OncallUserShiftMetrics, error) {
	nodes, err := ousmq.Limit(2).All(setContextOp(ctx, ousmq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{oncallusershiftmetrics.Label}
	default:
		return nil, &NotSingularError{oncallusershiftmetrics.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ousmq *OncallUserShiftMetricsQuery) OnlyX(ctx context.Context) *OncallUserShiftMetrics {
	node, err := ousmq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only OncallUserShiftMetrics ID in the query.
// Returns a *NotSingularError when more than one OncallUserShiftMetrics ID is found.
// Returns a *NotFoundError when no entities are found.
func (ousmq *OncallUserShiftMetricsQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = ousmq.Limit(2).IDs(setContextOp(ctx, ousmq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{oncallusershiftmetrics.Label}
	default:
		err = &NotSingularError{oncallusershiftmetrics.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ousmq *OncallUserShiftMetricsQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := ousmq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OncallUserShiftMetricsSlice.
func (ousmq *OncallUserShiftMetricsQuery) All(ctx context.Context) ([]*OncallUserShiftMetrics, error) {
	ctx = setContextOp(ctx, ousmq.ctx, ent.OpQueryAll)
	if err := ousmq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*OncallUserShiftMetrics, *OncallUserShiftMetricsQuery]()
	return withInterceptors[[]*OncallUserShiftMetrics](ctx, ousmq, qr, ousmq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ousmq *OncallUserShiftMetricsQuery) AllX(ctx context.Context) []*OncallUserShiftMetrics {
	nodes, err := ousmq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of OncallUserShiftMetrics IDs.
func (ousmq *OncallUserShiftMetricsQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if ousmq.ctx.Unique == nil && ousmq.path != nil {
		ousmq.Unique(true)
	}
	ctx = setContextOp(ctx, ousmq.ctx, ent.OpQueryIDs)
	if err = ousmq.Select(oncallusershiftmetrics.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ousmq *OncallUserShiftMetricsQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := ousmq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ousmq *OncallUserShiftMetricsQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ousmq.ctx, ent.OpQueryCount)
	if err := ousmq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ousmq, querierCount[*OncallUserShiftMetricsQuery](), ousmq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ousmq *OncallUserShiftMetricsQuery) CountX(ctx context.Context) int {
	count, err := ousmq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ousmq *OncallUserShiftMetricsQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ousmq.ctx, ent.OpQueryExist)
	switch _, err := ousmq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ousmq *OncallUserShiftMetricsQuery) ExistX(ctx context.Context) bool {
	exist, err := ousmq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OncallUserShiftMetricsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ousmq *OncallUserShiftMetricsQuery) Clone() *OncallUserShiftMetricsQuery {
	if ousmq == nil {
		return nil
	}
	return &OncallUserShiftMetricsQuery{
		config:     ousmq.config,
		ctx:        ousmq.ctx.Clone(),
		order:      append([]oncallusershiftmetrics.OrderOption{}, ousmq.order...),
		inters:     append([]Interceptor{}, ousmq.inters...),
		predicates: append([]predicate.OncallUserShiftMetrics{}, ousmq.predicates...),
		withShift:  ousmq.withShift.Clone(),
		// clone intermediate query.
		sql:       ousmq.sql.Clone(),
		path:      ousmq.path,
		modifiers: append([]func(*sql.Selector){}, ousmq.modifiers...),
	}
}

// WithShift tells the query-builder to eager-load the nodes that are connected to
// the "shift" edge. The optional arguments are used to configure the query builder of the edge.
func (ousmq *OncallUserShiftMetricsQuery) WithShift(opts ...func(*OncallUserShiftQuery)) *OncallUserShiftMetricsQuery {
	query := (&OncallUserShiftClient{config: ousmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ousmq.withShift = query
	return ousmq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ShiftID uuid.UUID `json:"shift_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OncallUserShiftMetrics.Query().
//		GroupBy(oncallusershiftmetrics.FieldShiftID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ousmq *OncallUserShiftMetricsQuery) GroupBy(field string, fields ...string) *OncallUserShiftMetricsGroupBy {
	ousmq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &OncallUserShiftMetricsGroupBy{build: ousmq}
	grbuild.flds = &ousmq.ctx.Fields
	grbuild.label = oncallusershiftmetrics.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ShiftID uuid.UUID `json:"shift_id,omitempty"`
//	}
//
//	client.OncallUserShiftMetrics.Query().
//		Select(oncallusershiftmetrics.FieldShiftID).
//		Scan(ctx, &v)
func (ousmq *OncallUserShiftMetricsQuery) Select(fields ...string) *OncallUserShiftMetricsSelect {
	ousmq.ctx.Fields = append(ousmq.ctx.Fields, fields...)
	sbuild := &OncallUserShiftMetricsSelect{OncallUserShiftMetricsQuery: ousmq}
	sbuild.label = oncallusershiftmetrics.Label
	sbuild.flds, sbuild.scan = &ousmq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a OncallUserShiftMetricsSelect configured with the given aggregations.
func (ousmq *OncallUserShiftMetricsQuery) Aggregate(fns ...AggregateFunc) *OncallUserShiftMetricsSelect {
	return ousmq.Select().Aggregate(fns...)
}

func (ousmq *OncallUserShiftMetricsQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ousmq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ousmq); err != nil {
				return err
			}
		}
	}
	for _, f := range ousmq.ctx.Fields {
		if !oncallusershiftmetrics.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ousmq.path != nil {
		prev, err := ousmq.path(ctx)
		if err != nil {
			return err
		}
		ousmq.sql = prev
	}
	if oncallusershiftmetrics.Policy == nil {
		return errors.New("ent: uninitialized oncallusershiftmetrics.Policy (forgotten import ent/runtime?)")
	}
	if err := oncallusershiftmetrics.Policy.EvalQuery(ctx, ousmq); err != nil {
		return err
	}
	return nil
}

func (ousmq *OncallUserShiftMetricsQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*OncallUserShiftMetrics, error) {
	var (
		nodes       = []*OncallUserShiftMetrics{}
		_spec       = ousmq.querySpec()
		loadedTypes = [1]bool{
			ousmq.withShift != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*OncallUserShiftMetrics).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &OncallUserShiftMetrics{config: ousmq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(ousmq.modifiers) > 0 {
		_spec.Modifiers = ousmq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ousmq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ousmq.withShift; query != nil {
		if err := ousmq.loadShift(ctx, query, nodes, nil,
			func(n *OncallUserShiftMetrics, e *OncallUserShift) { n.Edges.Shift = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ousmq *OncallUserShiftMetricsQuery) loadShift(ctx context.Context, query *OncallUserShiftQuery, nodes []*OncallUserShiftMetrics, init func(*OncallUserShiftMetrics), assign func(*OncallUserShiftMetrics, *OncallUserShift)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*OncallUserShiftMetrics)
	for i := range nodes {
		fk := nodes[i].ShiftID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(oncallusershift.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "shift_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ousmq *OncallUserShiftMetricsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ousmq.querySpec()
	if len(ousmq.modifiers) > 0 {
		_spec.Modifiers = ousmq.modifiers
	}
	_spec.Node.Columns = ousmq.ctx.Fields
	if len(ousmq.ctx.Fields) > 0 {
		_spec.Unique = ousmq.ctx.Unique != nil && *ousmq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ousmq.driver, _spec)
}

func (ousmq *OncallUserShiftMetricsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(oncallusershiftmetrics.Table, oncallusershiftmetrics.Columns, sqlgraph.NewFieldSpec(oncallusershiftmetrics.FieldID, field.TypeUUID))
	_spec.From = ousmq.sql
	if unique := ousmq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ousmq.path != nil {
		_spec.Unique = true
	}
	if fields := ousmq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oncallusershiftmetrics.FieldID)
		for i := range fields {
			if fields[i] != oncallusershiftmetrics.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if ousmq.withShift != nil {
			_spec.Node.AddColumnOnce(oncallusershiftmetrics.FieldShiftID)
		}
	}
	if ps := ousmq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ousmq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ousmq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ousmq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ousmq *OncallUserShiftMetricsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ousmq.driver.Dialect())
	t1 := builder.Table(oncallusershiftmetrics.Table)
	columns := ousmq.ctx.Fields
	if len(columns) == 0 {
		columns = oncallusershiftmetrics.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ousmq.sql != nil {
		selector = ousmq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ousmq.ctx.Unique != nil && *ousmq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range ousmq.modifiers {
		m(selector)
	}
	for _, p := range ousmq.predicates {
		p(selector)
	}
	for _, p := range ousmq.order {
		p(selector)
	}
	if offset := ousmq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ousmq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ousmq *OncallUserShiftMetricsQuery) Modify(modifiers ...func(s *sql.Selector)) *OncallUserShiftMetricsSelect {
	ousmq.modifiers = append(ousmq.modifiers, modifiers...)
	return ousmq.Select()
}

// OncallUserShiftMetricsGroupBy is the group-by builder for OncallUserShiftMetrics entities.
type OncallUserShiftMetricsGroupBy struct {
	selector
	build *OncallUserShiftMetricsQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ousmgb *OncallUserShiftMetricsGroupBy) Aggregate(fns ...AggregateFunc) *OncallUserShiftMetricsGroupBy {
	ousmgb.fns = append(ousmgb.fns, fns...)
	return ousmgb
}

// Scan applies the selector query and scans the result into the given value.
func (ousmgb *OncallUserShiftMetricsGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ousmgb.build.ctx, ent.OpQueryGroupBy)
	if err := ousmgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OncallUserShiftMetricsQuery, *OncallUserShiftMetricsGroupBy](ctx, ousmgb.build, ousmgb, ousmgb.build.inters, v)
}

func (ousmgb *OncallUserShiftMetricsGroupBy) sqlScan(ctx context.Context, root *OncallUserShiftMetricsQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ousmgb.fns))
	for _, fn := range ousmgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ousmgb.flds)+len(ousmgb.fns))
		for _, f := range *ousmgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ousmgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ousmgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// OncallUserShiftMetricsSelect is the builder for selecting fields of OncallUserShiftMetrics entities.
type OncallUserShiftMetricsSelect struct {
	*OncallUserShiftMetricsQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ousms *OncallUserShiftMetricsSelect) Aggregate(fns ...AggregateFunc) *OncallUserShiftMetricsSelect {
	ousms.fns = append(ousms.fns, fns...)
	return ousms
}

// Scan applies the selector query and scans the result into the given value.
func (ousms *OncallUserShiftMetricsSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ousms.ctx, ent.OpQuerySelect)
	if err := ousms.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OncallUserShiftMetricsQuery, *OncallUserShiftMetricsSelect](ctx, ousms.OncallUserShiftMetricsQuery, ousms, ousms.inters, v)
}

func (ousms *OncallUserShiftMetricsSelect) sqlScan(ctx context.Context, root *OncallUserShiftMetricsQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ousms.fns))
	for _, fn := range ousms.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ousms.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ousms.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ousms *OncallUserShiftMetricsSelect) Modify(modifiers ...func(s *sql.Selector)) *OncallUserShiftMetricsSelect {
	ousms.modifiers = append(ousms.modifiers, modifiers...)
	return ousms
}
