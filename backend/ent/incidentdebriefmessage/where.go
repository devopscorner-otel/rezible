// Code generated by ent, DO NOT EDIT.

package incidentdebriefmessage

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldLTE(FieldID, id))
}

// DebriefID applies equality check predicate on the "debrief_id" field. It's identical to DebriefIDEQ.
func DebriefID(v uuid.UUID) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldEQ(FieldDebriefID, v))
}

// QuestionID applies equality check predicate on the "question_id" field. It's identical to QuestionIDEQ.
func QuestionID(v uuid.UUID) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldEQ(FieldQuestionID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldEQ(FieldCreatedAt, v))
}

// Body applies equality check predicate on the "body" field. It's identical to BodyEQ.
func Body(v string) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldEQ(FieldBody, v))
}

// DebriefIDEQ applies the EQ predicate on the "debrief_id" field.
func DebriefIDEQ(v uuid.UUID) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldEQ(FieldDebriefID, v))
}

// DebriefIDNEQ applies the NEQ predicate on the "debrief_id" field.
func DebriefIDNEQ(v uuid.UUID) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldNEQ(FieldDebriefID, v))
}

// DebriefIDIn applies the In predicate on the "debrief_id" field.
func DebriefIDIn(vs ...uuid.UUID) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldIn(FieldDebriefID, vs...))
}

// DebriefIDNotIn applies the NotIn predicate on the "debrief_id" field.
func DebriefIDNotIn(vs ...uuid.UUID) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldNotIn(FieldDebriefID, vs...))
}

// QuestionIDEQ applies the EQ predicate on the "question_id" field.
func QuestionIDEQ(v uuid.UUID) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldEQ(FieldQuestionID, v))
}

// QuestionIDNEQ applies the NEQ predicate on the "question_id" field.
func QuestionIDNEQ(v uuid.UUID) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldNEQ(FieldQuestionID, v))
}

// QuestionIDIn applies the In predicate on the "question_id" field.
func QuestionIDIn(vs ...uuid.UUID) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldIn(FieldQuestionID, vs...))
}

// QuestionIDNotIn applies the NotIn predicate on the "question_id" field.
func QuestionIDNotIn(vs ...uuid.UUID) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldNotIn(FieldQuestionID, vs...))
}

// QuestionIDIsNil applies the IsNil predicate on the "question_id" field.
func QuestionIDIsNil() predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldIsNull(FieldQuestionID))
}

// QuestionIDNotNil applies the NotNil predicate on the "question_id" field.
func QuestionIDNotNil() predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldNotNull(FieldQuestionID))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldLTE(FieldCreatedAt, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldNotIn(FieldType, vs...))
}

// RequestedToolEQ applies the EQ predicate on the "requested_tool" field.
func RequestedToolEQ(v RequestedTool) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldEQ(FieldRequestedTool, v))
}

// RequestedToolNEQ applies the NEQ predicate on the "requested_tool" field.
func RequestedToolNEQ(v RequestedTool) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldNEQ(FieldRequestedTool, v))
}

// RequestedToolIn applies the In predicate on the "requested_tool" field.
func RequestedToolIn(vs ...RequestedTool) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldIn(FieldRequestedTool, vs...))
}

// RequestedToolNotIn applies the NotIn predicate on the "requested_tool" field.
func RequestedToolNotIn(vs ...RequestedTool) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldNotIn(FieldRequestedTool, vs...))
}

// RequestedToolIsNil applies the IsNil predicate on the "requested_tool" field.
func RequestedToolIsNil() predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldIsNull(FieldRequestedTool))
}

// RequestedToolNotNil applies the NotNil predicate on the "requested_tool" field.
func RequestedToolNotNil() predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldNotNull(FieldRequestedTool))
}

// BodyEQ applies the EQ predicate on the "body" field.
func BodyEQ(v string) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldEQ(FieldBody, v))
}

// BodyNEQ applies the NEQ predicate on the "body" field.
func BodyNEQ(v string) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldNEQ(FieldBody, v))
}

// BodyIn applies the In predicate on the "body" field.
func BodyIn(vs ...string) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldIn(FieldBody, vs...))
}

// BodyNotIn applies the NotIn predicate on the "body" field.
func BodyNotIn(vs ...string) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldNotIn(FieldBody, vs...))
}

// BodyGT applies the GT predicate on the "body" field.
func BodyGT(v string) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldGT(FieldBody, v))
}

// BodyGTE applies the GTE predicate on the "body" field.
func BodyGTE(v string) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldGTE(FieldBody, v))
}

// BodyLT applies the LT predicate on the "body" field.
func BodyLT(v string) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldLT(FieldBody, v))
}

// BodyLTE applies the LTE predicate on the "body" field.
func BodyLTE(v string) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldLTE(FieldBody, v))
}

// BodyContains applies the Contains predicate on the "body" field.
func BodyContains(v string) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldContains(FieldBody, v))
}

// BodyHasPrefix applies the HasPrefix predicate on the "body" field.
func BodyHasPrefix(v string) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldHasPrefix(FieldBody, v))
}

// BodyHasSuffix applies the HasSuffix predicate on the "body" field.
func BodyHasSuffix(v string) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldHasSuffix(FieldBody, v))
}

// BodyEqualFold applies the EqualFold predicate on the "body" field.
func BodyEqualFold(v string) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldEqualFold(FieldBody, v))
}

// BodyContainsFold applies the ContainsFold predicate on the "body" field.
func BodyContainsFold(v string) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.FieldContainsFold(FieldBody, v))
}

// HasDebrief applies the HasEdge predicate on the "debrief" edge.
func HasDebrief() predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DebriefTable, DebriefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDebriefWith applies the HasEdge predicate on the "debrief" edge with a given conditions (other predicates).
func HasDebriefWith(preds ...predicate.IncidentDebrief) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(func(s *sql.Selector) {
		step := newDebriefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFromQuestion applies the HasEdge predicate on the "from_question" edge.
func HasFromQuestion() predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, FromQuestionTable, FromQuestionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFromQuestionWith applies the HasEdge predicate on the "from_question" edge with a given conditions (other predicates).
func HasFromQuestionWith(preds ...predicate.IncidentDebriefQuestion) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(func(s *sql.Selector) {
		step := newFromQuestionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.IncidentDebriefMessage) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.IncidentDebriefMessage) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.IncidentDebriefMessage) predicate.IncidentDebriefMessage {
	return predicate.IncidentDebriefMessage(sql.NotPredicates(p))
}
