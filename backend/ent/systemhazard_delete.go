// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/systemhazard"
)

// SystemHazardDelete is the builder for deleting a SystemHazard entity.
type SystemHazardDelete struct {
	config
	hooks    []Hook
	mutation *SystemHazardMutation
}

// Where appends a list predicates to the SystemHazardDelete builder.
func (shd *SystemHazardDelete) Where(ps ...predicate.SystemHazard) *SystemHazardDelete {
	shd.mutation.Where(ps...)
	return shd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (shd *SystemHazardDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, shd.sqlExec, shd.mutation, shd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (shd *SystemHazardDelete) ExecX(ctx context.Context) int {
	n, err := shd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (shd *SystemHazardDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(systemhazard.Table, sqlgraph.NewFieldSpec(systemhazard.FieldID, field.TypeUUID))
	if ps := shd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, shd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	shd.mutation.done = true
	return affected, err
}

// SystemHazardDeleteOne is the builder for deleting a single SystemHazard entity.
type SystemHazardDeleteOne struct {
	shd *SystemHazardDelete
}

// Where appends a list predicates to the SystemHazardDelete builder.
func (shdo *SystemHazardDeleteOne) Where(ps ...predicate.SystemHazard) *SystemHazardDeleteOne {
	shdo.shd.mutation.Where(ps...)
	return shdo
}

// Exec executes the deletion query.
func (shdo *SystemHazardDeleteOne) Exec(ctx context.Context) error {
	n, err := shdo.shd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{systemhazard.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (shdo *SystemHazardDeleteOne) ExecX(ctx context.Context) {
	if err := shdo.Exec(ctx); err != nil {
		panic(err)
	}
}
