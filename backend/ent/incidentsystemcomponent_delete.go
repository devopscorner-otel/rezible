// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rezible/rezible/ent/incidentsystemcomponent"
	"github.com/rezible/rezible/ent/predicate"
)

// IncidentSystemComponentDelete is the builder for deleting a IncidentSystemComponent entity.
type IncidentSystemComponentDelete struct {
	config
	hooks    []Hook
	mutation *IncidentSystemComponentMutation
}

// Where appends a list predicates to the IncidentSystemComponentDelete builder.
func (iscd *IncidentSystemComponentDelete) Where(ps ...predicate.IncidentSystemComponent) *IncidentSystemComponentDelete {
	iscd.mutation.Where(ps...)
	return iscd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (iscd *IncidentSystemComponentDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, iscd.sqlExec, iscd.mutation, iscd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (iscd *IncidentSystemComponentDelete) ExecX(ctx context.Context) int {
	n, err := iscd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (iscd *IncidentSystemComponentDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(incidentsystemcomponent.Table, sqlgraph.NewFieldSpec(incidentsystemcomponent.FieldID, field.TypeUUID))
	if ps := iscd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, iscd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	iscd.mutation.done = true
	return affected, err
}

// IncidentSystemComponentDeleteOne is the builder for deleting a single IncidentSystemComponent entity.
type IncidentSystemComponentDeleteOne struct {
	iscd *IncidentSystemComponentDelete
}

// Where appends a list predicates to the IncidentSystemComponentDelete builder.
func (iscdo *IncidentSystemComponentDeleteOne) Where(ps ...predicate.IncidentSystemComponent) *IncidentSystemComponentDeleteOne {
	iscdo.iscd.mutation.Where(ps...)
	return iscdo
}

// Exec executes the deletion query.
func (iscdo *IncidentSystemComponentDeleteOne) Exec(ctx context.Context) error {
	n, err := iscdo.iscd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{incidentsystemcomponent.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (iscdo *IncidentSystemComponentDeleteOne) ExecX(ctx context.Context) {
	if err := iscdo.Exec(ctx); err != nil {
		panic(err)
	}
}
