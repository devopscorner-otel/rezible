// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/incident"
	"github.com/rezible/rezible/ent/incidentteamassignment"
	"github.com/rezible/rezible/ent/team"
)

// IncidentTeamAssignment is the model entity for the IncidentTeamAssignment schema.
type IncidentTeamAssignment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// IncidentID holds the value of the "incident_id" field.
	IncidentID uuid.UUID `json:"incident_id,omitempty"`
	// TeamID holds the value of the "team_id" field.
	TeamID uuid.UUID `json:"team_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IncidentTeamAssignmentQuery when eager-loading is set.
	Edges        IncidentTeamAssignmentEdges `json:"edges"`
	selectValues sql.SelectValues
}

// IncidentTeamAssignmentEdges holds the relations/edges for other nodes in the graph.
type IncidentTeamAssignmentEdges struct {
	// Incident holds the value of the incident edge.
	Incident *Incident `json:"incident,omitempty"`
	// Team holds the value of the team edge.
	Team *Team `json:"team,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// IncidentOrErr returns the Incident value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IncidentTeamAssignmentEdges) IncidentOrErr() (*Incident, error) {
	if e.Incident != nil {
		return e.Incident, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: incident.Label}
	}
	return nil, &NotLoadedError{edge: "incident"}
}

// TeamOrErr returns the Team value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IncidentTeamAssignmentEdges) TeamOrErr() (*Team, error) {
	if e.Team != nil {
		return e.Team, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: team.Label}
	}
	return nil, &NotLoadedError{edge: "team"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IncidentTeamAssignment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case incidentteamassignment.FieldID:
			values[i] = new(sql.NullInt64)
		case incidentteamassignment.FieldIncidentID, incidentteamassignment.FieldTeamID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IncidentTeamAssignment fields.
func (ita *IncidentTeamAssignment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case incidentteamassignment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ita.ID = int(value.Int64)
		case incidentteamassignment.FieldIncidentID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field incident_id", values[i])
			} else if value != nil {
				ita.IncidentID = *value
			}
		case incidentteamassignment.FieldTeamID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field team_id", values[i])
			} else if value != nil {
				ita.TeamID = *value
			}
		default:
			ita.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the IncidentTeamAssignment.
// This includes values selected through modifiers, order, etc.
func (ita *IncidentTeamAssignment) Value(name string) (ent.Value, error) {
	return ita.selectValues.Get(name)
}

// QueryIncident queries the "incident" edge of the IncidentTeamAssignment entity.
func (ita *IncidentTeamAssignment) QueryIncident() *IncidentQuery {
	return NewIncidentTeamAssignmentClient(ita.config).QueryIncident(ita)
}

// QueryTeam queries the "team" edge of the IncidentTeamAssignment entity.
func (ita *IncidentTeamAssignment) QueryTeam() *TeamQuery {
	return NewIncidentTeamAssignmentClient(ita.config).QueryTeam(ita)
}

// Update returns a builder for updating this IncidentTeamAssignment.
// Note that you need to call IncidentTeamAssignment.Unwrap() before calling this method if this IncidentTeamAssignment
// was returned from a transaction, and the transaction was committed or rolled back.
func (ita *IncidentTeamAssignment) Update() *IncidentTeamAssignmentUpdateOne {
	return NewIncidentTeamAssignmentClient(ita.config).UpdateOne(ita)
}

// Unwrap unwraps the IncidentTeamAssignment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ita *IncidentTeamAssignment) Unwrap() *IncidentTeamAssignment {
	_tx, ok := ita.config.driver.(*txDriver)
	if !ok {
		panic("ent: IncidentTeamAssignment is not a transactional entity")
	}
	ita.config.driver = _tx.drv
	return ita
}

// String implements the fmt.Stringer.
func (ita *IncidentTeamAssignment) String() string {
	var builder strings.Builder
	builder.WriteString("IncidentTeamAssignment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ita.ID))
	builder.WriteString("incident_id=")
	builder.WriteString(fmt.Sprintf("%v", ita.IncidentID))
	builder.WriteString(", ")
	builder.WriteString("team_id=")
	builder.WriteString(fmt.Sprintf("%v", ita.TeamID))
	builder.WriteByte(')')
	return builder.String()
}

// IncidentTeamAssignments is a parsable slice of IncidentTeamAssignment.
type IncidentTeamAssignments []*IncidentTeamAssignment
