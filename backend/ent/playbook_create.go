// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/alert"
	"github.com/rezible/rezible/ent/playbook"
	"github.com/rezible/rezible/ent/tenant"
)

// PlaybookCreate is the builder for creating a Playbook entity.
type PlaybookCreate struct {
	config
	mutation *PlaybookMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (pc *PlaybookCreate) SetTenantID(i int) *PlaybookCreate {
	pc.mutation.SetTenantID(i)
	return pc
}

// SetTitle sets the "title" field.
func (pc *PlaybookCreate) SetTitle(s string) *PlaybookCreate {
	pc.mutation.SetTitle(s)
	return pc
}

// SetProviderID sets the "provider_id" field.
func (pc *PlaybookCreate) SetProviderID(s string) *PlaybookCreate {
	pc.mutation.SetProviderID(s)
	return pc
}

// SetContent sets the "content" field.
func (pc *PlaybookCreate) SetContent(b []byte) *PlaybookCreate {
	pc.mutation.SetContent(b)
	return pc
}

// SetID sets the "id" field.
func (pc *PlaybookCreate) SetID(u uuid.UUID) *PlaybookCreate {
	pc.mutation.SetID(u)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *PlaybookCreate) SetNillableID(u *uuid.UUID) *PlaybookCreate {
	if u != nil {
		pc.SetID(*u)
	}
	return pc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (pc *PlaybookCreate) SetTenant(t *Tenant) *PlaybookCreate {
	return pc.SetTenantID(t.ID)
}

// AddAlertIDs adds the "alerts" edge to the Alert entity by IDs.
func (pc *PlaybookCreate) AddAlertIDs(ids ...uuid.UUID) *PlaybookCreate {
	pc.mutation.AddAlertIDs(ids...)
	return pc
}

// AddAlerts adds the "alerts" edges to the Alert entity.
func (pc *PlaybookCreate) AddAlerts(a ...*Alert) *PlaybookCreate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pc.AddAlertIDs(ids...)
}

// Mutation returns the PlaybookMutation object of the builder.
func (pc *PlaybookCreate) Mutation() *PlaybookMutation {
	return pc.mutation
}

// Save creates the Playbook in the database.
func (pc *PlaybookCreate) Save(ctx context.Context) (*Playbook, error) {
	if err := pc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PlaybookCreate) SaveX(ctx context.Context) *Playbook {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PlaybookCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PlaybookCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PlaybookCreate) defaults() error {
	if _, ok := pc.mutation.ID(); !ok {
		if playbook.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized playbook.DefaultID (forgotten import ent/runtime?)")
		}
		v := playbook.DefaultID()
		pc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pc *PlaybookCreate) check() error {
	if _, ok := pc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "Playbook.tenant_id"`)}
	}
	if _, ok := pc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Playbook.title"`)}
	}
	if _, ok := pc.mutation.ProviderID(); !ok {
		return &ValidationError{Name: "provider_id", err: errors.New(`ent: missing required field "Playbook.provider_id"`)}
	}
	if _, ok := pc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Playbook.content"`)}
	}
	if len(pc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "Playbook.tenant"`)}
	}
	return nil
}

func (pc *PlaybookCreate) sqlSave(ctx context.Context) (*Playbook, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PlaybookCreate) createSpec() (*Playbook, *sqlgraph.CreateSpec) {
	var (
		_node = &Playbook{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(playbook.Table, sqlgraph.NewFieldSpec(playbook.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = pc.conflict
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pc.mutation.Title(); ok {
		_spec.SetField(playbook.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := pc.mutation.ProviderID(); ok {
		_spec.SetField(playbook.FieldProviderID, field.TypeString, value)
		_node.ProviderID = value
	}
	if value, ok := pc.mutation.Content(); ok {
		_spec.SetField(playbook.FieldContent, field.TypeBytes, value)
		_node.Content = value
	}
	if nodes := pc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   playbook.TenantTable,
			Columns: []string{playbook.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.AlertsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playbook.AlertsTable,
			Columns: playbook.AlertsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alert.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Playbook.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PlaybookUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (pc *PlaybookCreate) OnConflict(opts ...sql.ConflictOption) *PlaybookUpsertOne {
	pc.conflict = opts
	return &PlaybookUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Playbook.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *PlaybookCreate) OnConflictColumns(columns ...string) *PlaybookUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PlaybookUpsertOne{
		create: pc,
	}
}

type (
	// PlaybookUpsertOne is the builder for "upsert"-ing
	//  one Playbook node.
	PlaybookUpsertOne struct {
		create *PlaybookCreate
	}

	// PlaybookUpsert is the "OnConflict" setter.
	PlaybookUpsert struct {
		*sql.UpdateSet
	}
)

// SetTitle sets the "title" field.
func (u *PlaybookUpsert) SetTitle(v string) *PlaybookUpsert {
	u.Set(playbook.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *PlaybookUpsert) UpdateTitle() *PlaybookUpsert {
	u.SetExcluded(playbook.FieldTitle)
	return u
}

// SetProviderID sets the "provider_id" field.
func (u *PlaybookUpsert) SetProviderID(v string) *PlaybookUpsert {
	u.Set(playbook.FieldProviderID, v)
	return u
}

// UpdateProviderID sets the "provider_id" field to the value that was provided on create.
func (u *PlaybookUpsert) UpdateProviderID() *PlaybookUpsert {
	u.SetExcluded(playbook.FieldProviderID)
	return u
}

// SetContent sets the "content" field.
func (u *PlaybookUpsert) SetContent(v []byte) *PlaybookUpsert {
	u.Set(playbook.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *PlaybookUpsert) UpdateContent() *PlaybookUpsert {
	u.SetExcluded(playbook.FieldContent)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Playbook.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(playbook.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PlaybookUpsertOne) UpdateNewValues() *PlaybookUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(playbook.FieldID)
		}
		if _, exists := u.create.mutation.TenantID(); exists {
			s.SetIgnore(playbook.FieldTenantID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Playbook.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PlaybookUpsertOne) Ignore() *PlaybookUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PlaybookUpsertOne) DoNothing() *PlaybookUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PlaybookCreate.OnConflict
// documentation for more info.
func (u *PlaybookUpsertOne) Update(set func(*PlaybookUpsert)) *PlaybookUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PlaybookUpsert{UpdateSet: update})
	}))
	return u
}

// SetTitle sets the "title" field.
func (u *PlaybookUpsertOne) SetTitle(v string) *PlaybookUpsertOne {
	return u.Update(func(s *PlaybookUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *PlaybookUpsertOne) UpdateTitle() *PlaybookUpsertOne {
	return u.Update(func(s *PlaybookUpsert) {
		s.UpdateTitle()
	})
}

// SetProviderID sets the "provider_id" field.
func (u *PlaybookUpsertOne) SetProviderID(v string) *PlaybookUpsertOne {
	return u.Update(func(s *PlaybookUpsert) {
		s.SetProviderID(v)
	})
}

// UpdateProviderID sets the "provider_id" field to the value that was provided on create.
func (u *PlaybookUpsertOne) UpdateProviderID() *PlaybookUpsertOne {
	return u.Update(func(s *PlaybookUpsert) {
		s.UpdateProviderID()
	})
}

// SetContent sets the "content" field.
func (u *PlaybookUpsertOne) SetContent(v []byte) *PlaybookUpsertOne {
	return u.Update(func(s *PlaybookUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *PlaybookUpsertOne) UpdateContent() *PlaybookUpsertOne {
	return u.Update(func(s *PlaybookUpsert) {
		s.UpdateContent()
	})
}

// Exec executes the query.
func (u *PlaybookUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PlaybookCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PlaybookUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PlaybookUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PlaybookUpsertOne.ID is not supported by MySQL driver. Use PlaybookUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PlaybookUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PlaybookCreateBulk is the builder for creating many Playbook entities in bulk.
type PlaybookCreateBulk struct {
	config
	err      error
	builders []*PlaybookCreate
	conflict []sql.ConflictOption
}

// Save creates the Playbook entities in the database.
func (pcb *PlaybookCreateBulk) Save(ctx context.Context) ([]*Playbook, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Playbook, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlaybookMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PlaybookCreateBulk) SaveX(ctx context.Context) []*Playbook {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PlaybookCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PlaybookCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Playbook.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PlaybookUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (pcb *PlaybookCreateBulk) OnConflict(opts ...sql.ConflictOption) *PlaybookUpsertBulk {
	pcb.conflict = opts
	return &PlaybookUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Playbook.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *PlaybookCreateBulk) OnConflictColumns(columns ...string) *PlaybookUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PlaybookUpsertBulk{
		create: pcb,
	}
}

// PlaybookUpsertBulk is the builder for "upsert"-ing
// a bulk of Playbook nodes.
type PlaybookUpsertBulk struct {
	create *PlaybookCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Playbook.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(playbook.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PlaybookUpsertBulk) UpdateNewValues() *PlaybookUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(playbook.FieldID)
			}
			if _, exists := b.mutation.TenantID(); exists {
				s.SetIgnore(playbook.FieldTenantID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Playbook.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PlaybookUpsertBulk) Ignore() *PlaybookUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PlaybookUpsertBulk) DoNothing() *PlaybookUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PlaybookCreateBulk.OnConflict
// documentation for more info.
func (u *PlaybookUpsertBulk) Update(set func(*PlaybookUpsert)) *PlaybookUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PlaybookUpsert{UpdateSet: update})
	}))
	return u
}

// SetTitle sets the "title" field.
func (u *PlaybookUpsertBulk) SetTitle(v string) *PlaybookUpsertBulk {
	return u.Update(func(s *PlaybookUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *PlaybookUpsertBulk) UpdateTitle() *PlaybookUpsertBulk {
	return u.Update(func(s *PlaybookUpsert) {
		s.UpdateTitle()
	})
}

// SetProviderID sets the "provider_id" field.
func (u *PlaybookUpsertBulk) SetProviderID(v string) *PlaybookUpsertBulk {
	return u.Update(func(s *PlaybookUpsert) {
		s.SetProviderID(v)
	})
}

// UpdateProviderID sets the "provider_id" field to the value that was provided on create.
func (u *PlaybookUpsertBulk) UpdateProviderID() *PlaybookUpsertBulk {
	return u.Update(func(s *PlaybookUpsert) {
		s.UpdateProviderID()
	})
}

// SetContent sets the "content" field.
func (u *PlaybookUpsertBulk) SetContent(v []byte) *PlaybookUpsertBulk {
	return u.Update(func(s *PlaybookUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *PlaybookUpsertBulk) UpdateContent() *PlaybookUpsertBulk {
	return u.Update(func(s *PlaybookUpsert) {
		s.UpdateContent()
	})
}

// Exec executes the query.
func (u *PlaybookUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PlaybookCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PlaybookCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PlaybookUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
