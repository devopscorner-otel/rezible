// Code generated by ent, DO NOT EDIT.

package oncallannotation

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the oncallannotation type in the database.
	Label = "oncall_annotation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRosterID holds the string denoting the roster_id field in the database.
	FieldRosterID = "roster_id"
	// FieldCreatorID holds the string denoting the creator_id field in the database.
	FieldCreatorID = "creator_id"
	// FieldEventID holds the string denoting the event_id field in the database.
	FieldEventID = "event_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldMinutesOccupied holds the string denoting the minutes_occupied field in the database.
	FieldMinutesOccupied = "minutes_occupied"
	// FieldNotes holds the string denoting the notes field in the database.
	FieldNotes = "notes"
	// EdgeRoster holds the string denoting the roster edge name in mutations.
	EdgeRoster = "roster"
	// EdgeCreator holds the string denoting the creator edge name in mutations.
	EdgeCreator = "creator"
	// Table holds the table name of the oncallannotation in the database.
	Table = "oncall_annotations"
	// RosterTable is the table that holds the roster relation/edge.
	RosterTable = "oncall_annotations"
	// RosterInverseTable is the table name for the OncallRoster entity.
	// It exists in this package in order to avoid circular dependency with the "oncallroster" package.
	RosterInverseTable = "oncall_rosters"
	// RosterColumn is the table column denoting the roster relation/edge.
	RosterColumn = "roster_id"
	// CreatorTable is the table that holds the creator relation/edge.
	CreatorTable = "oncall_annotations"
	// CreatorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	CreatorInverseTable = "users"
	// CreatorColumn is the table column denoting the creator relation/edge.
	CreatorColumn = "creator_id"
)

// Columns holds all SQL columns for oncallannotation fields.
var Columns = []string{
	FieldID,
	FieldRosterID,
	FieldCreatorID,
	FieldEventID,
	FieldCreatedAt,
	FieldMinutesOccupied,
	FieldNotes,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the OncallAnnotation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRosterID orders the results by the roster_id field.
func ByRosterID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRosterID, opts...).ToFunc()
}

// ByCreatorID orders the results by the creator_id field.
func ByCreatorID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatorID, opts...).ToFunc()
}

// ByEventID orders the results by the event_id field.
func ByEventID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEventID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByMinutesOccupied orders the results by the minutes_occupied field.
func ByMinutesOccupied(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinutesOccupied, opts...).ToFunc()
}

// ByNotes orders the results by the notes field.
func ByNotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotes, opts...).ToFunc()
}

// ByRosterField orders the results by roster field.
func ByRosterField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRosterStep(), sql.OrderByField(field, opts...))
	}
}

// ByCreatorField orders the results by creator field.
func ByCreatorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatorStep(), sql.OrderByField(field, opts...))
	}
}
func newRosterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RosterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RosterTable, RosterColumn),
	)
}
func newCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CreatorTable, CreatorColumn),
	)
}
