// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/incident"
	"github.com/rezible/rezible/ent/incidentrole"
	"github.com/rezible/rezible/ent/incidentroleassignment"
	"github.com/rezible/rezible/ent/user"
)

// IncidentRoleAssignmentCreate is the builder for creating a IncidentRoleAssignment entity.
type IncidentRoleAssignmentCreate struct {
	config
	mutation *IncidentRoleAssignmentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetRoleID sets the "role_id" field.
func (irac *IncidentRoleAssignmentCreate) SetRoleID(u uuid.UUID) *IncidentRoleAssignmentCreate {
	irac.mutation.SetRoleID(u)
	return irac
}

// SetIncidentID sets the "incident_id" field.
func (irac *IncidentRoleAssignmentCreate) SetIncidentID(u uuid.UUID) *IncidentRoleAssignmentCreate {
	irac.mutation.SetIncidentID(u)
	return irac
}

// SetUserID sets the "user_id" field.
func (irac *IncidentRoleAssignmentCreate) SetUserID(u uuid.UUID) *IncidentRoleAssignmentCreate {
	irac.mutation.SetUserID(u)
	return irac
}

// SetID sets the "id" field.
func (irac *IncidentRoleAssignmentCreate) SetID(u uuid.UUID) *IncidentRoleAssignmentCreate {
	irac.mutation.SetID(u)
	return irac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (irac *IncidentRoleAssignmentCreate) SetNillableID(u *uuid.UUID) *IncidentRoleAssignmentCreate {
	if u != nil {
		irac.SetID(*u)
	}
	return irac
}

// SetRole sets the "role" edge to the IncidentRole entity.
func (irac *IncidentRoleAssignmentCreate) SetRole(i *IncidentRole) *IncidentRoleAssignmentCreate {
	return irac.SetRoleID(i.ID)
}

// SetIncident sets the "incident" edge to the Incident entity.
func (irac *IncidentRoleAssignmentCreate) SetIncident(i *Incident) *IncidentRoleAssignmentCreate {
	return irac.SetIncidentID(i.ID)
}

// SetUser sets the "user" edge to the User entity.
func (irac *IncidentRoleAssignmentCreate) SetUser(u *User) *IncidentRoleAssignmentCreate {
	return irac.SetUserID(u.ID)
}

// Mutation returns the IncidentRoleAssignmentMutation object of the builder.
func (irac *IncidentRoleAssignmentCreate) Mutation() *IncidentRoleAssignmentMutation {
	return irac.mutation
}

// Save creates the IncidentRoleAssignment in the database.
func (irac *IncidentRoleAssignmentCreate) Save(ctx context.Context) (*IncidentRoleAssignment, error) {
	irac.defaults()
	return withHooks(ctx, irac.sqlSave, irac.mutation, irac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (irac *IncidentRoleAssignmentCreate) SaveX(ctx context.Context) *IncidentRoleAssignment {
	v, err := irac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (irac *IncidentRoleAssignmentCreate) Exec(ctx context.Context) error {
	_, err := irac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (irac *IncidentRoleAssignmentCreate) ExecX(ctx context.Context) {
	if err := irac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (irac *IncidentRoleAssignmentCreate) defaults() {
	if _, ok := irac.mutation.ID(); !ok {
		v := incidentroleassignment.DefaultID()
		irac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (irac *IncidentRoleAssignmentCreate) check() error {
	if _, ok := irac.mutation.RoleID(); !ok {
		return &ValidationError{Name: "role_id", err: errors.New(`ent: missing required field "IncidentRoleAssignment.role_id"`)}
	}
	if _, ok := irac.mutation.IncidentID(); !ok {
		return &ValidationError{Name: "incident_id", err: errors.New(`ent: missing required field "IncidentRoleAssignment.incident_id"`)}
	}
	if _, ok := irac.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "IncidentRoleAssignment.user_id"`)}
	}
	if len(irac.mutation.RoleIDs()) == 0 {
		return &ValidationError{Name: "role", err: errors.New(`ent: missing required edge "IncidentRoleAssignment.role"`)}
	}
	if len(irac.mutation.IncidentIDs()) == 0 {
		return &ValidationError{Name: "incident", err: errors.New(`ent: missing required edge "IncidentRoleAssignment.incident"`)}
	}
	if len(irac.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "IncidentRoleAssignment.user"`)}
	}
	return nil
}

func (irac *IncidentRoleAssignmentCreate) sqlSave(ctx context.Context) (*IncidentRoleAssignment, error) {
	if err := irac.check(); err != nil {
		return nil, err
	}
	_node, _spec := irac.createSpec()
	if err := sqlgraph.CreateNode(ctx, irac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	irac.mutation.id = &_node.ID
	irac.mutation.done = true
	return _node, nil
}

func (irac *IncidentRoleAssignmentCreate) createSpec() (*IncidentRoleAssignment, *sqlgraph.CreateSpec) {
	var (
		_node = &IncidentRoleAssignment{config: irac.config}
		_spec = sqlgraph.NewCreateSpec(incidentroleassignment.Table, sqlgraph.NewFieldSpec(incidentroleassignment.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = irac.conflict
	if id, ok := irac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if nodes := irac.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentroleassignment.RoleTable,
			Columns: []string{incidentroleassignment.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentrole.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RoleID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := irac.mutation.IncidentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentroleassignment.IncidentTable,
			Columns: []string{incidentroleassignment.IncidentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.IncidentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := irac.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentroleassignment.UserTable,
			Columns: []string{incidentroleassignment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IncidentRoleAssignment.Create().
//		SetRoleID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IncidentRoleAssignmentUpsert) {
//			SetRoleID(v+v).
//		}).
//		Exec(ctx)
func (irac *IncidentRoleAssignmentCreate) OnConflict(opts ...sql.ConflictOption) *IncidentRoleAssignmentUpsertOne {
	irac.conflict = opts
	return &IncidentRoleAssignmentUpsertOne{
		create: irac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IncidentRoleAssignment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (irac *IncidentRoleAssignmentCreate) OnConflictColumns(columns ...string) *IncidentRoleAssignmentUpsertOne {
	irac.conflict = append(irac.conflict, sql.ConflictColumns(columns...))
	return &IncidentRoleAssignmentUpsertOne{
		create: irac,
	}
}

type (
	// IncidentRoleAssignmentUpsertOne is the builder for "upsert"-ing
	//  one IncidentRoleAssignment node.
	IncidentRoleAssignmentUpsertOne struct {
		create *IncidentRoleAssignmentCreate
	}

	// IncidentRoleAssignmentUpsert is the "OnConflict" setter.
	IncidentRoleAssignmentUpsert struct {
		*sql.UpdateSet
	}
)

// SetRoleID sets the "role_id" field.
func (u *IncidentRoleAssignmentUpsert) SetRoleID(v uuid.UUID) *IncidentRoleAssignmentUpsert {
	u.Set(incidentroleassignment.FieldRoleID, v)
	return u
}

// UpdateRoleID sets the "role_id" field to the value that was provided on create.
func (u *IncidentRoleAssignmentUpsert) UpdateRoleID() *IncidentRoleAssignmentUpsert {
	u.SetExcluded(incidentroleassignment.FieldRoleID)
	return u
}

// SetIncidentID sets the "incident_id" field.
func (u *IncidentRoleAssignmentUpsert) SetIncidentID(v uuid.UUID) *IncidentRoleAssignmentUpsert {
	u.Set(incidentroleassignment.FieldIncidentID, v)
	return u
}

// UpdateIncidentID sets the "incident_id" field to the value that was provided on create.
func (u *IncidentRoleAssignmentUpsert) UpdateIncidentID() *IncidentRoleAssignmentUpsert {
	u.SetExcluded(incidentroleassignment.FieldIncidentID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *IncidentRoleAssignmentUpsert) SetUserID(v uuid.UUID) *IncidentRoleAssignmentUpsert {
	u.Set(incidentroleassignment.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *IncidentRoleAssignmentUpsert) UpdateUserID() *IncidentRoleAssignmentUpsert {
	u.SetExcluded(incidentroleassignment.FieldUserID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.IncidentRoleAssignment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(incidentroleassignment.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IncidentRoleAssignmentUpsertOne) UpdateNewValues() *IncidentRoleAssignmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(incidentroleassignment.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IncidentRoleAssignment.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *IncidentRoleAssignmentUpsertOne) Ignore() *IncidentRoleAssignmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IncidentRoleAssignmentUpsertOne) DoNothing() *IncidentRoleAssignmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IncidentRoleAssignmentCreate.OnConflict
// documentation for more info.
func (u *IncidentRoleAssignmentUpsertOne) Update(set func(*IncidentRoleAssignmentUpsert)) *IncidentRoleAssignmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IncidentRoleAssignmentUpsert{UpdateSet: update})
	}))
	return u
}

// SetRoleID sets the "role_id" field.
func (u *IncidentRoleAssignmentUpsertOne) SetRoleID(v uuid.UUID) *IncidentRoleAssignmentUpsertOne {
	return u.Update(func(s *IncidentRoleAssignmentUpsert) {
		s.SetRoleID(v)
	})
}

// UpdateRoleID sets the "role_id" field to the value that was provided on create.
func (u *IncidentRoleAssignmentUpsertOne) UpdateRoleID() *IncidentRoleAssignmentUpsertOne {
	return u.Update(func(s *IncidentRoleAssignmentUpsert) {
		s.UpdateRoleID()
	})
}

// SetIncidentID sets the "incident_id" field.
func (u *IncidentRoleAssignmentUpsertOne) SetIncidentID(v uuid.UUID) *IncidentRoleAssignmentUpsertOne {
	return u.Update(func(s *IncidentRoleAssignmentUpsert) {
		s.SetIncidentID(v)
	})
}

// UpdateIncidentID sets the "incident_id" field to the value that was provided on create.
func (u *IncidentRoleAssignmentUpsertOne) UpdateIncidentID() *IncidentRoleAssignmentUpsertOne {
	return u.Update(func(s *IncidentRoleAssignmentUpsert) {
		s.UpdateIncidentID()
	})
}

// SetUserID sets the "user_id" field.
func (u *IncidentRoleAssignmentUpsertOne) SetUserID(v uuid.UUID) *IncidentRoleAssignmentUpsertOne {
	return u.Update(func(s *IncidentRoleAssignmentUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *IncidentRoleAssignmentUpsertOne) UpdateUserID() *IncidentRoleAssignmentUpsertOne {
	return u.Update(func(s *IncidentRoleAssignmentUpsert) {
		s.UpdateUserID()
	})
}

// Exec executes the query.
func (u *IncidentRoleAssignmentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IncidentRoleAssignmentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IncidentRoleAssignmentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *IncidentRoleAssignmentUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: IncidentRoleAssignmentUpsertOne.ID is not supported by MySQL driver. Use IncidentRoleAssignmentUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *IncidentRoleAssignmentUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// IncidentRoleAssignmentCreateBulk is the builder for creating many IncidentRoleAssignment entities in bulk.
type IncidentRoleAssignmentCreateBulk struct {
	config
	err      error
	builders []*IncidentRoleAssignmentCreate
	conflict []sql.ConflictOption
}

// Save creates the IncidentRoleAssignment entities in the database.
func (iracb *IncidentRoleAssignmentCreateBulk) Save(ctx context.Context) ([]*IncidentRoleAssignment, error) {
	if iracb.err != nil {
		return nil, iracb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(iracb.builders))
	nodes := make([]*IncidentRoleAssignment, len(iracb.builders))
	mutators := make([]Mutator, len(iracb.builders))
	for i := range iracb.builders {
		func(i int, root context.Context) {
			builder := iracb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IncidentRoleAssignmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iracb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = iracb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iracb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iracb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iracb *IncidentRoleAssignmentCreateBulk) SaveX(ctx context.Context) []*IncidentRoleAssignment {
	v, err := iracb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iracb *IncidentRoleAssignmentCreateBulk) Exec(ctx context.Context) error {
	_, err := iracb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iracb *IncidentRoleAssignmentCreateBulk) ExecX(ctx context.Context) {
	if err := iracb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IncidentRoleAssignment.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IncidentRoleAssignmentUpsert) {
//			SetRoleID(v+v).
//		}).
//		Exec(ctx)
func (iracb *IncidentRoleAssignmentCreateBulk) OnConflict(opts ...sql.ConflictOption) *IncidentRoleAssignmentUpsertBulk {
	iracb.conflict = opts
	return &IncidentRoleAssignmentUpsertBulk{
		create: iracb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IncidentRoleAssignment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (iracb *IncidentRoleAssignmentCreateBulk) OnConflictColumns(columns ...string) *IncidentRoleAssignmentUpsertBulk {
	iracb.conflict = append(iracb.conflict, sql.ConflictColumns(columns...))
	return &IncidentRoleAssignmentUpsertBulk{
		create: iracb,
	}
}

// IncidentRoleAssignmentUpsertBulk is the builder for "upsert"-ing
// a bulk of IncidentRoleAssignment nodes.
type IncidentRoleAssignmentUpsertBulk struct {
	create *IncidentRoleAssignmentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.IncidentRoleAssignment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(incidentroleassignment.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IncidentRoleAssignmentUpsertBulk) UpdateNewValues() *IncidentRoleAssignmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(incidentroleassignment.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IncidentRoleAssignment.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *IncidentRoleAssignmentUpsertBulk) Ignore() *IncidentRoleAssignmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IncidentRoleAssignmentUpsertBulk) DoNothing() *IncidentRoleAssignmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IncidentRoleAssignmentCreateBulk.OnConflict
// documentation for more info.
func (u *IncidentRoleAssignmentUpsertBulk) Update(set func(*IncidentRoleAssignmentUpsert)) *IncidentRoleAssignmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IncidentRoleAssignmentUpsert{UpdateSet: update})
	}))
	return u
}

// SetRoleID sets the "role_id" field.
func (u *IncidentRoleAssignmentUpsertBulk) SetRoleID(v uuid.UUID) *IncidentRoleAssignmentUpsertBulk {
	return u.Update(func(s *IncidentRoleAssignmentUpsert) {
		s.SetRoleID(v)
	})
}

// UpdateRoleID sets the "role_id" field to the value that was provided on create.
func (u *IncidentRoleAssignmentUpsertBulk) UpdateRoleID() *IncidentRoleAssignmentUpsertBulk {
	return u.Update(func(s *IncidentRoleAssignmentUpsert) {
		s.UpdateRoleID()
	})
}

// SetIncidentID sets the "incident_id" field.
func (u *IncidentRoleAssignmentUpsertBulk) SetIncidentID(v uuid.UUID) *IncidentRoleAssignmentUpsertBulk {
	return u.Update(func(s *IncidentRoleAssignmentUpsert) {
		s.SetIncidentID(v)
	})
}

// UpdateIncidentID sets the "incident_id" field to the value that was provided on create.
func (u *IncidentRoleAssignmentUpsertBulk) UpdateIncidentID() *IncidentRoleAssignmentUpsertBulk {
	return u.Update(func(s *IncidentRoleAssignmentUpsert) {
		s.UpdateIncidentID()
	})
}

// SetUserID sets the "user_id" field.
func (u *IncidentRoleAssignmentUpsertBulk) SetUserID(v uuid.UUID) *IncidentRoleAssignmentUpsertBulk {
	return u.Update(func(s *IncidentRoleAssignmentUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *IncidentRoleAssignmentUpsertBulk) UpdateUserID() *IncidentRoleAssignmentUpsertBulk {
	return u.Update(func(s *IncidentRoleAssignmentUpsert) {
		s.UpdateUserID()
	})
}

// Exec executes the query.
func (u *IncidentRoleAssignmentUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the IncidentRoleAssignmentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IncidentRoleAssignmentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IncidentRoleAssignmentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
