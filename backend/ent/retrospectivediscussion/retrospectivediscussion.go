// Code generated by ent, DO NOT EDIT.

package retrospectivediscussion

import (
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the retrospectivediscussion type in the database.
	Label = "retrospective_discussion"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRetrospectiveID holds the string denoting the retrospective_id field in the database.
	FieldRetrospectiveID = "retrospective_id"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// EdgeRetrospective holds the string denoting the retrospective edge name in mutations.
	EdgeRetrospective = "retrospective"
	// EdgeReplies holds the string denoting the replies edge name in mutations.
	EdgeReplies = "replies"
	// EdgeReview holds the string denoting the review edge name in mutations.
	EdgeReview = "review"
	// Table holds the table name of the retrospectivediscussion in the database.
	Table = "retrospective_discussions"
	// RetrospectiveTable is the table that holds the retrospective relation/edge.
	RetrospectiveTable = "retrospective_discussions"
	// RetrospectiveInverseTable is the table name for the Retrospective entity.
	// It exists in this package in order to avoid circular dependency with the "retrospective" package.
	RetrospectiveInverseTable = "retrospectives"
	// RetrospectiveColumn is the table column denoting the retrospective relation/edge.
	RetrospectiveColumn = "retrospective_id"
	// RepliesTable is the table that holds the replies relation/edge.
	RepliesTable = "retrospective_discussion_replies"
	// RepliesInverseTable is the table name for the RetrospectiveDiscussionReply entity.
	// It exists in this package in order to avoid circular dependency with the "retrospectivediscussionreply" package.
	RepliesInverseTable = "retrospective_discussion_replies"
	// RepliesColumn is the table column denoting the replies relation/edge.
	RepliesColumn = "retrospective_discussion_reply_discussion"
	// ReviewTable is the table that holds the review relation/edge.
	ReviewTable = "retrospective_reviews"
	// ReviewInverseTable is the table name for the RetrospectiveReview entity.
	// It exists in this package in order to avoid circular dependency with the "retrospectivereview" package.
	ReviewInverseTable = "retrospective_reviews"
	// ReviewColumn is the table column denoting the review relation/edge.
	ReviewColumn = "retrospective_review_discussion"
)

// Columns holds all SQL columns for retrospectivediscussion fields.
var Columns = []string{
	FieldID,
	FieldRetrospectiveID,
	FieldContent,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/rezible/rezible/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the RetrospectiveDiscussion queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRetrospectiveID orders the results by the retrospective_id field.
func ByRetrospectiveID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRetrospectiveID, opts...).ToFunc()
}

// ByRetrospectiveField orders the results by retrospective field.
func ByRetrospectiveField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRetrospectiveStep(), sql.OrderByField(field, opts...))
	}
}

// ByRepliesCount orders the results by replies count.
func ByRepliesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRepliesStep(), opts...)
	}
}

// ByReplies orders the results by replies terms.
func ByReplies(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRepliesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByReviewCount orders the results by review count.
func ByReviewCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReviewStep(), opts...)
	}
}

// ByReview orders the results by review terms.
func ByReview(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReviewStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRetrospectiveStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RetrospectiveInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RetrospectiveTable, RetrospectiveColumn),
	)
}
func newRepliesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RepliesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, RepliesTable, RepliesColumn),
	)
}
func newReviewStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReviewInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ReviewTable, ReviewColumn),
	)
}
