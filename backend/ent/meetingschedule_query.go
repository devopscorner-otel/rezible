// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/meetingschedule"
	"github.com/rezible/rezible/ent/meetingsession"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/team"
	"github.com/rezible/rezible/ent/tenant"
)

// MeetingScheduleQuery is the builder for querying MeetingSchedule entities.
type MeetingScheduleQuery struct {
	config
	ctx            *QueryContext
	order          []meetingschedule.OrderOption
	inters         []Interceptor
	predicates     []predicate.MeetingSchedule
	withTenant     *TenantQuery
	withOwningTeam *TeamQuery
	withSessions   *MeetingSessionQuery
	modifiers      []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the MeetingScheduleQuery builder.
func (msq *MeetingScheduleQuery) Where(ps ...predicate.MeetingSchedule) *MeetingScheduleQuery {
	msq.predicates = append(msq.predicates, ps...)
	return msq
}

// Limit the number of records to be returned by this query.
func (msq *MeetingScheduleQuery) Limit(limit int) *MeetingScheduleQuery {
	msq.ctx.Limit = &limit
	return msq
}

// Offset to start from.
func (msq *MeetingScheduleQuery) Offset(offset int) *MeetingScheduleQuery {
	msq.ctx.Offset = &offset
	return msq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (msq *MeetingScheduleQuery) Unique(unique bool) *MeetingScheduleQuery {
	msq.ctx.Unique = &unique
	return msq
}

// Order specifies how the records should be ordered.
func (msq *MeetingScheduleQuery) Order(o ...meetingschedule.OrderOption) *MeetingScheduleQuery {
	msq.order = append(msq.order, o...)
	return msq
}

// QueryTenant chains the current query on the "tenant" edge.
func (msq *MeetingScheduleQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: msq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := msq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := msq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(meetingschedule.Table, meetingschedule.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, meetingschedule.TenantTable, meetingschedule.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(msq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOwningTeam chains the current query on the "owning_team" edge.
func (msq *MeetingScheduleQuery) QueryOwningTeam() *TeamQuery {
	query := (&TeamClient{config: msq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := msq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := msq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(meetingschedule.Table, meetingschedule.FieldID, selector),
			sqlgraph.To(team.Table, team.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, meetingschedule.OwningTeamTable, meetingschedule.OwningTeamPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(msq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySessions chains the current query on the "sessions" edge.
func (msq *MeetingScheduleQuery) QuerySessions() *MeetingSessionQuery {
	query := (&MeetingSessionClient{config: msq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := msq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := msq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(meetingschedule.Table, meetingschedule.FieldID, selector),
			sqlgraph.To(meetingsession.Table, meetingsession.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, meetingschedule.SessionsTable, meetingschedule.SessionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(msq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first MeetingSchedule entity from the query.
// Returns a *NotFoundError when no MeetingSchedule was found.
func (msq *MeetingScheduleQuery) First(ctx context.Context) (*MeetingSchedule, error) {
	nodes, err := msq.Limit(1).All(setContextOp(ctx, msq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{meetingschedule.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (msq *MeetingScheduleQuery) FirstX(ctx context.Context) *MeetingSchedule {
	node, err := msq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first MeetingSchedule ID from the query.
// Returns a *NotFoundError when no MeetingSchedule ID was found.
func (msq *MeetingScheduleQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = msq.Limit(1).IDs(setContextOp(ctx, msq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{meetingschedule.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (msq *MeetingScheduleQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := msq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single MeetingSchedule entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one MeetingSchedule entity is found.
// Returns a *NotFoundError when no MeetingSchedule entities are found.
func (msq *MeetingScheduleQuery) Only(ctx context.Context) (*MeetingSchedule, error) {
	nodes, err := msq.Limit(2).All(setContextOp(ctx, msq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{meetingschedule.Label}
	default:
		return nil, &NotSingularError{meetingschedule.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (msq *MeetingScheduleQuery) OnlyX(ctx context.Context) *MeetingSchedule {
	node, err := msq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only MeetingSchedule ID in the query.
// Returns a *NotSingularError when more than one MeetingSchedule ID is found.
// Returns a *NotFoundError when no entities are found.
func (msq *MeetingScheduleQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = msq.Limit(2).IDs(setContextOp(ctx, msq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{meetingschedule.Label}
	default:
		err = &NotSingularError{meetingschedule.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (msq *MeetingScheduleQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := msq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of MeetingSchedules.
func (msq *MeetingScheduleQuery) All(ctx context.Context) ([]*MeetingSchedule, error) {
	ctx = setContextOp(ctx, msq.ctx, ent.OpQueryAll)
	if err := msq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*MeetingSchedule, *MeetingScheduleQuery]()
	return withInterceptors[[]*MeetingSchedule](ctx, msq, qr, msq.inters)
}

// AllX is like All, but panics if an error occurs.
func (msq *MeetingScheduleQuery) AllX(ctx context.Context) []*MeetingSchedule {
	nodes, err := msq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of MeetingSchedule IDs.
func (msq *MeetingScheduleQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if msq.ctx.Unique == nil && msq.path != nil {
		msq.Unique(true)
	}
	ctx = setContextOp(ctx, msq.ctx, ent.OpQueryIDs)
	if err = msq.Select(meetingschedule.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (msq *MeetingScheduleQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := msq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (msq *MeetingScheduleQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, msq.ctx, ent.OpQueryCount)
	if err := msq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, msq, querierCount[*MeetingScheduleQuery](), msq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (msq *MeetingScheduleQuery) CountX(ctx context.Context) int {
	count, err := msq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (msq *MeetingScheduleQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, msq.ctx, ent.OpQueryExist)
	switch _, err := msq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (msq *MeetingScheduleQuery) ExistX(ctx context.Context) bool {
	exist, err := msq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the MeetingScheduleQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (msq *MeetingScheduleQuery) Clone() *MeetingScheduleQuery {
	if msq == nil {
		return nil
	}
	return &MeetingScheduleQuery{
		config:         msq.config,
		ctx:            msq.ctx.Clone(),
		order:          append([]meetingschedule.OrderOption{}, msq.order...),
		inters:         append([]Interceptor{}, msq.inters...),
		predicates:     append([]predicate.MeetingSchedule{}, msq.predicates...),
		withTenant:     msq.withTenant.Clone(),
		withOwningTeam: msq.withOwningTeam.Clone(),
		withSessions:   msq.withSessions.Clone(),
		// clone intermediate query.
		sql:       msq.sql.Clone(),
		path:      msq.path,
		modifiers: append([]func(*sql.Selector){}, msq.modifiers...),
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (msq *MeetingScheduleQuery) WithTenant(opts ...func(*TenantQuery)) *MeetingScheduleQuery {
	query := (&TenantClient{config: msq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	msq.withTenant = query
	return msq
}

// WithOwningTeam tells the query-builder to eager-load the nodes that are connected to
// the "owning_team" edge. The optional arguments are used to configure the query builder of the edge.
func (msq *MeetingScheduleQuery) WithOwningTeam(opts ...func(*TeamQuery)) *MeetingScheduleQuery {
	query := (&TeamClient{config: msq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	msq.withOwningTeam = query
	return msq
}

// WithSessions tells the query-builder to eager-load the nodes that are connected to
// the "sessions" edge. The optional arguments are used to configure the query builder of the edge.
func (msq *MeetingScheduleQuery) WithSessions(opts ...func(*MeetingSessionQuery)) *MeetingScheduleQuery {
	query := (&MeetingSessionClient{config: msq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	msq.withSessions = query
	return msq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID int `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.MeetingSchedule.Query().
//		GroupBy(meetingschedule.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (msq *MeetingScheduleQuery) GroupBy(field string, fields ...string) *MeetingScheduleGroupBy {
	msq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &MeetingScheduleGroupBy{build: msq}
	grbuild.flds = &msq.ctx.Fields
	grbuild.label = meetingschedule.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID int `json:"tenant_id,omitempty"`
//	}
//
//	client.MeetingSchedule.Query().
//		Select(meetingschedule.FieldTenantID).
//		Scan(ctx, &v)
func (msq *MeetingScheduleQuery) Select(fields ...string) *MeetingScheduleSelect {
	msq.ctx.Fields = append(msq.ctx.Fields, fields...)
	sbuild := &MeetingScheduleSelect{MeetingScheduleQuery: msq}
	sbuild.label = meetingschedule.Label
	sbuild.flds, sbuild.scan = &msq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a MeetingScheduleSelect configured with the given aggregations.
func (msq *MeetingScheduleQuery) Aggregate(fns ...AggregateFunc) *MeetingScheduleSelect {
	return msq.Select().Aggregate(fns...)
}

func (msq *MeetingScheduleQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range msq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, msq); err != nil {
				return err
			}
		}
	}
	for _, f := range msq.ctx.Fields {
		if !meetingschedule.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if msq.path != nil {
		prev, err := msq.path(ctx)
		if err != nil {
			return err
		}
		msq.sql = prev
	}
	if meetingschedule.Policy == nil {
		return errors.New("ent: uninitialized meetingschedule.Policy (forgotten import ent/runtime?)")
	}
	if err := meetingschedule.Policy.EvalQuery(ctx, msq); err != nil {
		return err
	}
	return nil
}

func (msq *MeetingScheduleQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*MeetingSchedule, error) {
	var (
		nodes       = []*MeetingSchedule{}
		_spec       = msq.querySpec()
		loadedTypes = [3]bool{
			msq.withTenant != nil,
			msq.withOwningTeam != nil,
			msq.withSessions != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*MeetingSchedule).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &MeetingSchedule{config: msq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(msq.modifiers) > 0 {
		_spec.Modifiers = msq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, msq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := msq.withTenant; query != nil {
		if err := msq.loadTenant(ctx, query, nodes, nil,
			func(n *MeetingSchedule, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := msq.withOwningTeam; query != nil {
		if err := msq.loadOwningTeam(ctx, query, nodes,
			func(n *MeetingSchedule) { n.Edges.OwningTeam = []*Team{} },
			func(n *MeetingSchedule, e *Team) { n.Edges.OwningTeam = append(n.Edges.OwningTeam, e) }); err != nil {
			return nil, err
		}
	}
	if query := msq.withSessions; query != nil {
		if err := msq.loadSessions(ctx, query, nodes,
			func(n *MeetingSchedule) { n.Edges.Sessions = []*MeetingSession{} },
			func(n *MeetingSchedule, e *MeetingSession) { n.Edges.Sessions = append(n.Edges.Sessions, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (msq *MeetingScheduleQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*MeetingSchedule, init func(*MeetingSchedule), assign func(*MeetingSchedule, *Tenant)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*MeetingSchedule)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (msq *MeetingScheduleQuery) loadOwningTeam(ctx context.Context, query *TeamQuery, nodes []*MeetingSchedule, init func(*MeetingSchedule), assign func(*MeetingSchedule, *Team)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*MeetingSchedule)
	nids := make(map[uuid.UUID]map[*MeetingSchedule]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(meetingschedule.OwningTeamTable)
		s.Join(joinT).On(s.C(team.FieldID), joinT.C(meetingschedule.OwningTeamPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(meetingschedule.OwningTeamPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(meetingschedule.OwningTeamPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*MeetingSchedule]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Team](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "owning_team" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (msq *MeetingScheduleQuery) loadSessions(ctx context.Context, query *MeetingSessionQuery, nodes []*MeetingSchedule, init func(*MeetingSchedule), assign func(*MeetingSchedule, *MeetingSession)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*MeetingSchedule)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.MeetingSession(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(meetingschedule.SessionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.meeting_session_schedule
		if fk == nil {
			return fmt.Errorf(`foreign-key "meeting_session_schedule" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "meeting_session_schedule" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (msq *MeetingScheduleQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := msq.querySpec()
	if len(msq.modifiers) > 0 {
		_spec.Modifiers = msq.modifiers
	}
	_spec.Node.Columns = msq.ctx.Fields
	if len(msq.ctx.Fields) > 0 {
		_spec.Unique = msq.ctx.Unique != nil && *msq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, msq.driver, _spec)
}

func (msq *MeetingScheduleQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(meetingschedule.Table, meetingschedule.Columns, sqlgraph.NewFieldSpec(meetingschedule.FieldID, field.TypeUUID))
	_spec.From = msq.sql
	if unique := msq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if msq.path != nil {
		_spec.Unique = true
	}
	if fields := msq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, meetingschedule.FieldID)
		for i := range fields {
			if fields[i] != meetingschedule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if msq.withTenant != nil {
			_spec.Node.AddColumnOnce(meetingschedule.FieldTenantID)
		}
	}
	if ps := msq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := msq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := msq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := msq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (msq *MeetingScheduleQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(msq.driver.Dialect())
	t1 := builder.Table(meetingschedule.Table)
	columns := msq.ctx.Fields
	if len(columns) == 0 {
		columns = meetingschedule.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if msq.sql != nil {
		selector = msq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if msq.ctx.Unique != nil && *msq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range msq.modifiers {
		m(selector)
	}
	for _, p := range msq.predicates {
		p(selector)
	}
	for _, p := range msq.order {
		p(selector)
	}
	if offset := msq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := msq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (msq *MeetingScheduleQuery) Modify(modifiers ...func(s *sql.Selector)) *MeetingScheduleSelect {
	msq.modifiers = append(msq.modifiers, modifiers...)
	return msq.Select()
}

// MeetingScheduleGroupBy is the group-by builder for MeetingSchedule entities.
type MeetingScheduleGroupBy struct {
	selector
	build *MeetingScheduleQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (msgb *MeetingScheduleGroupBy) Aggregate(fns ...AggregateFunc) *MeetingScheduleGroupBy {
	msgb.fns = append(msgb.fns, fns...)
	return msgb
}

// Scan applies the selector query and scans the result into the given value.
func (msgb *MeetingScheduleGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, msgb.build.ctx, ent.OpQueryGroupBy)
	if err := msgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MeetingScheduleQuery, *MeetingScheduleGroupBy](ctx, msgb.build, msgb, msgb.build.inters, v)
}

func (msgb *MeetingScheduleGroupBy) sqlScan(ctx context.Context, root *MeetingScheduleQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(msgb.fns))
	for _, fn := range msgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*msgb.flds)+len(msgb.fns))
		for _, f := range *msgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*msgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := msgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// MeetingScheduleSelect is the builder for selecting fields of MeetingSchedule entities.
type MeetingScheduleSelect struct {
	*MeetingScheduleQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (mss *MeetingScheduleSelect) Aggregate(fns ...AggregateFunc) *MeetingScheduleSelect {
	mss.fns = append(mss.fns, fns...)
	return mss
}

// Scan applies the selector query and scans the result into the given value.
func (mss *MeetingScheduleSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, mss.ctx, ent.OpQuerySelect)
	if err := mss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MeetingScheduleQuery, *MeetingScheduleSelect](ctx, mss.MeetingScheduleQuery, mss, mss.inters, v)
}

func (mss *MeetingScheduleSelect) sqlScan(ctx context.Context, root *MeetingScheduleQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(mss.fns))
	for _, fn := range mss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*mss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (mss *MeetingScheduleSelect) Modify(modifiers ...func(s *sql.Selector)) *MeetingScheduleSelect {
	mss.modifiers = append(mss.modifiers, modifiers...)
	return mss
}
