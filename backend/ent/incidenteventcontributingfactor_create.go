// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/incidentevent"
	"github.com/rezible/rezible/ent/incidenteventcontributingfactor"
)

// IncidentEventContributingFactorCreate is the builder for creating a IncidentEventContributingFactor entity.
type IncidentEventContributingFactorCreate struct {
	config
	mutation *IncidentEventContributingFactorMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetFactorType sets the "factor_type" field.
func (iecfc *IncidentEventContributingFactorCreate) SetFactorType(s string) *IncidentEventContributingFactorCreate {
	iecfc.mutation.SetFactorType(s)
	return iecfc
}

// SetDescription sets the "description" field.
func (iecfc *IncidentEventContributingFactorCreate) SetDescription(s string) *IncidentEventContributingFactorCreate {
	iecfc.mutation.SetDescription(s)
	return iecfc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (iecfc *IncidentEventContributingFactorCreate) SetNillableDescription(s *string) *IncidentEventContributingFactorCreate {
	if s != nil {
		iecfc.SetDescription(*s)
	}
	return iecfc
}

// SetCreatedAt sets the "created_at" field.
func (iecfc *IncidentEventContributingFactorCreate) SetCreatedAt(t time.Time) *IncidentEventContributingFactorCreate {
	iecfc.mutation.SetCreatedAt(t)
	return iecfc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (iecfc *IncidentEventContributingFactorCreate) SetNillableCreatedAt(t *time.Time) *IncidentEventContributingFactorCreate {
	if t != nil {
		iecfc.SetCreatedAt(*t)
	}
	return iecfc
}

// SetID sets the "id" field.
func (iecfc *IncidentEventContributingFactorCreate) SetID(u uuid.UUID) *IncidentEventContributingFactorCreate {
	iecfc.mutation.SetID(u)
	return iecfc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (iecfc *IncidentEventContributingFactorCreate) SetNillableID(u *uuid.UUID) *IncidentEventContributingFactorCreate {
	if u != nil {
		iecfc.SetID(*u)
	}
	return iecfc
}

// SetEventID sets the "event" edge to the IncidentEvent entity by ID.
func (iecfc *IncidentEventContributingFactorCreate) SetEventID(id uuid.UUID) *IncidentEventContributingFactorCreate {
	iecfc.mutation.SetEventID(id)
	return iecfc
}

// SetEvent sets the "event" edge to the IncidentEvent entity.
func (iecfc *IncidentEventContributingFactorCreate) SetEvent(i *IncidentEvent) *IncidentEventContributingFactorCreate {
	return iecfc.SetEventID(i.ID)
}

// Mutation returns the IncidentEventContributingFactorMutation object of the builder.
func (iecfc *IncidentEventContributingFactorCreate) Mutation() *IncidentEventContributingFactorMutation {
	return iecfc.mutation
}

// Save creates the IncidentEventContributingFactor in the database.
func (iecfc *IncidentEventContributingFactorCreate) Save(ctx context.Context) (*IncidentEventContributingFactor, error) {
	if err := iecfc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, iecfc.sqlSave, iecfc.mutation, iecfc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (iecfc *IncidentEventContributingFactorCreate) SaveX(ctx context.Context) *IncidentEventContributingFactor {
	v, err := iecfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iecfc *IncidentEventContributingFactorCreate) Exec(ctx context.Context) error {
	_, err := iecfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iecfc *IncidentEventContributingFactorCreate) ExecX(ctx context.Context) {
	if err := iecfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iecfc *IncidentEventContributingFactorCreate) defaults() error {
	if _, ok := iecfc.mutation.CreatedAt(); !ok {
		if incidenteventcontributingfactor.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized incidenteventcontributingfactor.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := incidenteventcontributingfactor.DefaultCreatedAt()
		iecfc.mutation.SetCreatedAt(v)
	}
	if _, ok := iecfc.mutation.ID(); !ok {
		if incidenteventcontributingfactor.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized incidenteventcontributingfactor.DefaultID (forgotten import ent/runtime?)")
		}
		v := incidenteventcontributingfactor.DefaultID()
		iecfc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (iecfc *IncidentEventContributingFactorCreate) check() error {
	if _, ok := iecfc.mutation.FactorType(); !ok {
		return &ValidationError{Name: "factor_type", err: errors.New(`ent: missing required field "IncidentEventContributingFactor.factor_type"`)}
	}
	if v, ok := iecfc.mutation.FactorType(); ok {
		if err := incidenteventcontributingfactor.FactorTypeValidator(v); err != nil {
			return &ValidationError{Name: "factor_type", err: fmt.Errorf(`ent: validator failed for field "IncidentEventContributingFactor.factor_type": %w`, err)}
		}
	}
	if _, ok := iecfc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "IncidentEventContributingFactor.created_at"`)}
	}
	if len(iecfc.mutation.EventIDs()) == 0 {
		return &ValidationError{Name: "event", err: errors.New(`ent: missing required edge "IncidentEventContributingFactor.event"`)}
	}
	return nil
}

func (iecfc *IncidentEventContributingFactorCreate) sqlSave(ctx context.Context) (*IncidentEventContributingFactor, error) {
	if err := iecfc.check(); err != nil {
		return nil, err
	}
	_node, _spec := iecfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, iecfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	iecfc.mutation.id = &_node.ID
	iecfc.mutation.done = true
	return _node, nil
}

func (iecfc *IncidentEventContributingFactorCreate) createSpec() (*IncidentEventContributingFactor, *sqlgraph.CreateSpec) {
	var (
		_node = &IncidentEventContributingFactor{config: iecfc.config}
		_spec = sqlgraph.NewCreateSpec(incidenteventcontributingfactor.Table, sqlgraph.NewFieldSpec(incidenteventcontributingfactor.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = iecfc.conflict
	if id, ok := iecfc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := iecfc.mutation.FactorType(); ok {
		_spec.SetField(incidenteventcontributingfactor.FieldFactorType, field.TypeString, value)
		_node.FactorType = value
	}
	if value, ok := iecfc.mutation.Description(); ok {
		_spec.SetField(incidenteventcontributingfactor.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := iecfc.mutation.CreatedAt(); ok {
		_spec.SetField(incidenteventcontributingfactor.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := iecfc.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incidenteventcontributingfactor.EventTable,
			Columns: []string{incidenteventcontributingfactor.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentevent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.incident_event_factors = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IncidentEventContributingFactor.Create().
//		SetFactorType(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IncidentEventContributingFactorUpsert) {
//			SetFactorType(v+v).
//		}).
//		Exec(ctx)
func (iecfc *IncidentEventContributingFactorCreate) OnConflict(opts ...sql.ConflictOption) *IncidentEventContributingFactorUpsertOne {
	iecfc.conflict = opts
	return &IncidentEventContributingFactorUpsertOne{
		create: iecfc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IncidentEventContributingFactor.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (iecfc *IncidentEventContributingFactorCreate) OnConflictColumns(columns ...string) *IncidentEventContributingFactorUpsertOne {
	iecfc.conflict = append(iecfc.conflict, sql.ConflictColumns(columns...))
	return &IncidentEventContributingFactorUpsertOne{
		create: iecfc,
	}
}

type (
	// IncidentEventContributingFactorUpsertOne is the builder for "upsert"-ing
	//  one IncidentEventContributingFactor node.
	IncidentEventContributingFactorUpsertOne struct {
		create *IncidentEventContributingFactorCreate
	}

	// IncidentEventContributingFactorUpsert is the "OnConflict" setter.
	IncidentEventContributingFactorUpsert struct {
		*sql.UpdateSet
	}
)

// SetFactorType sets the "factor_type" field.
func (u *IncidentEventContributingFactorUpsert) SetFactorType(v string) *IncidentEventContributingFactorUpsert {
	u.Set(incidenteventcontributingfactor.FieldFactorType, v)
	return u
}

// UpdateFactorType sets the "factor_type" field to the value that was provided on create.
func (u *IncidentEventContributingFactorUpsert) UpdateFactorType() *IncidentEventContributingFactorUpsert {
	u.SetExcluded(incidenteventcontributingfactor.FieldFactorType)
	return u
}

// SetDescription sets the "description" field.
func (u *IncidentEventContributingFactorUpsert) SetDescription(v string) *IncidentEventContributingFactorUpsert {
	u.Set(incidenteventcontributingfactor.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *IncidentEventContributingFactorUpsert) UpdateDescription() *IncidentEventContributingFactorUpsert {
	u.SetExcluded(incidenteventcontributingfactor.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *IncidentEventContributingFactorUpsert) ClearDescription() *IncidentEventContributingFactorUpsert {
	u.SetNull(incidenteventcontributingfactor.FieldDescription)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *IncidentEventContributingFactorUpsert) SetCreatedAt(v time.Time) *IncidentEventContributingFactorUpsert {
	u.Set(incidenteventcontributingfactor.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *IncidentEventContributingFactorUpsert) UpdateCreatedAt() *IncidentEventContributingFactorUpsert {
	u.SetExcluded(incidenteventcontributingfactor.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.IncidentEventContributingFactor.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(incidenteventcontributingfactor.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IncidentEventContributingFactorUpsertOne) UpdateNewValues() *IncidentEventContributingFactorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(incidenteventcontributingfactor.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IncidentEventContributingFactor.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *IncidentEventContributingFactorUpsertOne) Ignore() *IncidentEventContributingFactorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IncidentEventContributingFactorUpsertOne) DoNothing() *IncidentEventContributingFactorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IncidentEventContributingFactorCreate.OnConflict
// documentation for more info.
func (u *IncidentEventContributingFactorUpsertOne) Update(set func(*IncidentEventContributingFactorUpsert)) *IncidentEventContributingFactorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IncidentEventContributingFactorUpsert{UpdateSet: update})
	}))
	return u
}

// SetFactorType sets the "factor_type" field.
func (u *IncidentEventContributingFactorUpsertOne) SetFactorType(v string) *IncidentEventContributingFactorUpsertOne {
	return u.Update(func(s *IncidentEventContributingFactorUpsert) {
		s.SetFactorType(v)
	})
}

// UpdateFactorType sets the "factor_type" field to the value that was provided on create.
func (u *IncidentEventContributingFactorUpsertOne) UpdateFactorType() *IncidentEventContributingFactorUpsertOne {
	return u.Update(func(s *IncidentEventContributingFactorUpsert) {
		s.UpdateFactorType()
	})
}

// SetDescription sets the "description" field.
func (u *IncidentEventContributingFactorUpsertOne) SetDescription(v string) *IncidentEventContributingFactorUpsertOne {
	return u.Update(func(s *IncidentEventContributingFactorUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *IncidentEventContributingFactorUpsertOne) UpdateDescription() *IncidentEventContributingFactorUpsertOne {
	return u.Update(func(s *IncidentEventContributingFactorUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *IncidentEventContributingFactorUpsertOne) ClearDescription() *IncidentEventContributingFactorUpsertOne {
	return u.Update(func(s *IncidentEventContributingFactorUpsert) {
		s.ClearDescription()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *IncidentEventContributingFactorUpsertOne) SetCreatedAt(v time.Time) *IncidentEventContributingFactorUpsertOne {
	return u.Update(func(s *IncidentEventContributingFactorUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *IncidentEventContributingFactorUpsertOne) UpdateCreatedAt() *IncidentEventContributingFactorUpsertOne {
	return u.Update(func(s *IncidentEventContributingFactorUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *IncidentEventContributingFactorUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IncidentEventContributingFactorCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IncidentEventContributingFactorUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *IncidentEventContributingFactorUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: IncidentEventContributingFactorUpsertOne.ID is not supported by MySQL driver. Use IncidentEventContributingFactorUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *IncidentEventContributingFactorUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// IncidentEventContributingFactorCreateBulk is the builder for creating many IncidentEventContributingFactor entities in bulk.
type IncidentEventContributingFactorCreateBulk struct {
	config
	err      error
	builders []*IncidentEventContributingFactorCreate
	conflict []sql.ConflictOption
}

// Save creates the IncidentEventContributingFactor entities in the database.
func (iecfcb *IncidentEventContributingFactorCreateBulk) Save(ctx context.Context) ([]*IncidentEventContributingFactor, error) {
	if iecfcb.err != nil {
		return nil, iecfcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(iecfcb.builders))
	nodes := make([]*IncidentEventContributingFactor, len(iecfcb.builders))
	mutators := make([]Mutator, len(iecfcb.builders))
	for i := range iecfcb.builders {
		func(i int, root context.Context) {
			builder := iecfcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IncidentEventContributingFactorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iecfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = iecfcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iecfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iecfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iecfcb *IncidentEventContributingFactorCreateBulk) SaveX(ctx context.Context) []*IncidentEventContributingFactor {
	v, err := iecfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iecfcb *IncidentEventContributingFactorCreateBulk) Exec(ctx context.Context) error {
	_, err := iecfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iecfcb *IncidentEventContributingFactorCreateBulk) ExecX(ctx context.Context) {
	if err := iecfcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IncidentEventContributingFactor.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IncidentEventContributingFactorUpsert) {
//			SetFactorType(v+v).
//		}).
//		Exec(ctx)
func (iecfcb *IncidentEventContributingFactorCreateBulk) OnConflict(opts ...sql.ConflictOption) *IncidentEventContributingFactorUpsertBulk {
	iecfcb.conflict = opts
	return &IncidentEventContributingFactorUpsertBulk{
		create: iecfcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IncidentEventContributingFactor.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (iecfcb *IncidentEventContributingFactorCreateBulk) OnConflictColumns(columns ...string) *IncidentEventContributingFactorUpsertBulk {
	iecfcb.conflict = append(iecfcb.conflict, sql.ConflictColumns(columns...))
	return &IncidentEventContributingFactorUpsertBulk{
		create: iecfcb,
	}
}

// IncidentEventContributingFactorUpsertBulk is the builder for "upsert"-ing
// a bulk of IncidentEventContributingFactor nodes.
type IncidentEventContributingFactorUpsertBulk struct {
	create *IncidentEventContributingFactorCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.IncidentEventContributingFactor.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(incidenteventcontributingfactor.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IncidentEventContributingFactorUpsertBulk) UpdateNewValues() *IncidentEventContributingFactorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(incidenteventcontributingfactor.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IncidentEventContributingFactor.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *IncidentEventContributingFactorUpsertBulk) Ignore() *IncidentEventContributingFactorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IncidentEventContributingFactorUpsertBulk) DoNothing() *IncidentEventContributingFactorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IncidentEventContributingFactorCreateBulk.OnConflict
// documentation for more info.
func (u *IncidentEventContributingFactorUpsertBulk) Update(set func(*IncidentEventContributingFactorUpsert)) *IncidentEventContributingFactorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IncidentEventContributingFactorUpsert{UpdateSet: update})
	}))
	return u
}

// SetFactorType sets the "factor_type" field.
func (u *IncidentEventContributingFactorUpsertBulk) SetFactorType(v string) *IncidentEventContributingFactorUpsertBulk {
	return u.Update(func(s *IncidentEventContributingFactorUpsert) {
		s.SetFactorType(v)
	})
}

// UpdateFactorType sets the "factor_type" field to the value that was provided on create.
func (u *IncidentEventContributingFactorUpsertBulk) UpdateFactorType() *IncidentEventContributingFactorUpsertBulk {
	return u.Update(func(s *IncidentEventContributingFactorUpsert) {
		s.UpdateFactorType()
	})
}

// SetDescription sets the "description" field.
func (u *IncidentEventContributingFactorUpsertBulk) SetDescription(v string) *IncidentEventContributingFactorUpsertBulk {
	return u.Update(func(s *IncidentEventContributingFactorUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *IncidentEventContributingFactorUpsertBulk) UpdateDescription() *IncidentEventContributingFactorUpsertBulk {
	return u.Update(func(s *IncidentEventContributingFactorUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *IncidentEventContributingFactorUpsertBulk) ClearDescription() *IncidentEventContributingFactorUpsertBulk {
	return u.Update(func(s *IncidentEventContributingFactorUpsert) {
		s.ClearDescription()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *IncidentEventContributingFactorUpsertBulk) SetCreatedAt(v time.Time) *IncidentEventContributingFactorUpsertBulk {
	return u.Update(func(s *IncidentEventContributingFactorUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *IncidentEventContributingFactorUpsertBulk) UpdateCreatedAt() *IncidentEventContributingFactorUpsertBulk {
	return u.Update(func(s *IncidentEventContributingFactorUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *IncidentEventContributingFactorUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the IncidentEventContributingFactorCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IncidentEventContributingFactorCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IncidentEventContributingFactorUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
