// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rezible/rezible/ent/oncallannotationalertfeedback"
	"github.com/rezible/rezible/ent/predicate"
)

// OncallAnnotationAlertFeedbackDelete is the builder for deleting a OncallAnnotationAlertFeedback entity.
type OncallAnnotationAlertFeedbackDelete struct {
	config
	hooks    []Hook
	mutation *OncallAnnotationAlertFeedbackMutation
}

// Where appends a list predicates to the OncallAnnotationAlertFeedbackDelete builder.
func (oaafd *OncallAnnotationAlertFeedbackDelete) Where(ps ...predicate.OncallAnnotationAlertFeedback) *OncallAnnotationAlertFeedbackDelete {
	oaafd.mutation.Where(ps...)
	return oaafd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (oaafd *OncallAnnotationAlertFeedbackDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, oaafd.sqlExec, oaafd.mutation, oaafd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (oaafd *OncallAnnotationAlertFeedbackDelete) ExecX(ctx context.Context) int {
	n, err := oaafd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (oaafd *OncallAnnotationAlertFeedbackDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(oncallannotationalertfeedback.Table, sqlgraph.NewFieldSpec(oncallannotationalertfeedback.FieldID, field.TypeUUID))
	if ps := oaafd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, oaafd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	oaafd.mutation.done = true
	return affected, err
}

// OncallAnnotationAlertFeedbackDeleteOne is the builder for deleting a single OncallAnnotationAlertFeedback entity.
type OncallAnnotationAlertFeedbackDeleteOne struct {
	oaafd *OncallAnnotationAlertFeedbackDelete
}

// Where appends a list predicates to the OncallAnnotationAlertFeedbackDelete builder.
func (oaafdo *OncallAnnotationAlertFeedbackDeleteOne) Where(ps ...predicate.OncallAnnotationAlertFeedback) *OncallAnnotationAlertFeedbackDeleteOne {
	oaafdo.oaafd.mutation.Where(ps...)
	return oaafdo
}

// Exec executes the deletion query.
func (oaafdo *OncallAnnotationAlertFeedbackDeleteOne) Exec(ctx context.Context) error {
	n, err := oaafdo.oaafd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{oncallannotationalertfeedback.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (oaafdo *OncallAnnotationAlertFeedbackDeleteOne) ExecX(ctx context.Context) {
	if err := oaafdo.Exec(ctx); err != nil {
		panic(err)
	}
}
