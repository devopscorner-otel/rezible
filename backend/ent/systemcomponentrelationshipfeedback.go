// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/systemcomponentrelationship"
	"github.com/rezible/rezible/ent/systemcomponentrelationshipfeedback"
	"github.com/rezible/rezible/ent/systemcomponentsignal"
)

// SystemComponentRelationshipFeedback is the model entity for the SystemComponentRelationshipFeedback schema.
type SystemComponentRelationshipFeedback struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// RelationshipID holds the value of the "relationship_id" field.
	RelationshipID uuid.UUID `json:"relationship_id,omitempty"`
	// SignalID holds the value of the "signal_id" field.
	SignalID uuid.UUID `json:"signal_id,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SystemComponentRelationshipFeedbackQuery when eager-loading is set.
	Edges        SystemComponentRelationshipFeedbackEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SystemComponentRelationshipFeedbackEdges holds the relations/edges for other nodes in the graph.
type SystemComponentRelationshipFeedbackEdges struct {
	// Signal holds the value of the signal edge.
	Signal *SystemComponentSignal `json:"signal,omitempty"`
	// Relationship holds the value of the relationship edge.
	Relationship *SystemComponentRelationship `json:"relationship,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SignalOrErr returns the Signal value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SystemComponentRelationshipFeedbackEdges) SignalOrErr() (*SystemComponentSignal, error) {
	if e.Signal != nil {
		return e.Signal, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: systemcomponentsignal.Label}
	}
	return nil, &NotLoadedError{edge: "signal"}
}

// RelationshipOrErr returns the Relationship value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SystemComponentRelationshipFeedbackEdges) RelationshipOrErr() (*SystemComponentRelationship, error) {
	if e.Relationship != nil {
		return e.Relationship, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: systemcomponentrelationship.Label}
	}
	return nil, &NotLoadedError{edge: "relationship"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SystemComponentRelationshipFeedback) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case systemcomponentrelationshipfeedback.FieldType, systemcomponentrelationshipfeedback.FieldDescription:
			values[i] = new(sql.NullString)
		case systemcomponentrelationshipfeedback.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case systemcomponentrelationshipfeedback.FieldID, systemcomponentrelationshipfeedback.FieldRelationshipID, systemcomponentrelationshipfeedback.FieldSignalID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SystemComponentRelationshipFeedback fields.
func (scrf *SystemComponentRelationshipFeedback) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case systemcomponentrelationshipfeedback.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				scrf.ID = *value
			}
		case systemcomponentrelationshipfeedback.FieldRelationshipID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field relationship_id", values[i])
			} else if value != nil {
				scrf.RelationshipID = *value
			}
		case systemcomponentrelationshipfeedback.FieldSignalID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field signal_id", values[i])
			} else if value != nil {
				scrf.SignalID = *value
			}
		case systemcomponentrelationshipfeedback.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				scrf.Type = value.String
			}
		case systemcomponentrelationshipfeedback.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				scrf.Description = value.String
			}
		case systemcomponentrelationshipfeedback.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				scrf.CreatedAt = value.Time
			}
		default:
			scrf.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SystemComponentRelationshipFeedback.
// This includes values selected through modifiers, order, etc.
func (scrf *SystemComponentRelationshipFeedback) Value(name string) (ent.Value, error) {
	return scrf.selectValues.Get(name)
}

// QuerySignal queries the "signal" edge of the SystemComponentRelationshipFeedback entity.
func (scrf *SystemComponentRelationshipFeedback) QuerySignal() *SystemComponentSignalQuery {
	return NewSystemComponentRelationshipFeedbackClient(scrf.config).QuerySignal(scrf)
}

// QueryRelationship queries the "relationship" edge of the SystemComponentRelationshipFeedback entity.
func (scrf *SystemComponentRelationshipFeedback) QueryRelationship() *SystemComponentRelationshipQuery {
	return NewSystemComponentRelationshipFeedbackClient(scrf.config).QueryRelationship(scrf)
}

// Update returns a builder for updating this SystemComponentRelationshipFeedback.
// Note that you need to call SystemComponentRelationshipFeedback.Unwrap() before calling this method if this SystemComponentRelationshipFeedback
// was returned from a transaction, and the transaction was committed or rolled back.
func (scrf *SystemComponentRelationshipFeedback) Update() *SystemComponentRelationshipFeedbackUpdateOne {
	return NewSystemComponentRelationshipFeedbackClient(scrf.config).UpdateOne(scrf)
}

// Unwrap unwraps the SystemComponentRelationshipFeedback entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (scrf *SystemComponentRelationshipFeedback) Unwrap() *SystemComponentRelationshipFeedback {
	_tx, ok := scrf.config.driver.(*txDriver)
	if !ok {
		panic("ent: SystemComponentRelationshipFeedback is not a transactional entity")
	}
	scrf.config.driver = _tx.drv
	return scrf
}

// String implements the fmt.Stringer.
func (scrf *SystemComponentRelationshipFeedback) String() string {
	var builder strings.Builder
	builder.WriteString("SystemComponentRelationshipFeedback(")
	builder.WriteString(fmt.Sprintf("id=%v, ", scrf.ID))
	builder.WriteString("relationship_id=")
	builder.WriteString(fmt.Sprintf("%v", scrf.RelationshipID))
	builder.WriteString(", ")
	builder.WriteString("signal_id=")
	builder.WriteString(fmt.Sprintf("%v", scrf.SignalID))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(scrf.Type)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(scrf.Description)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(scrf.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SystemComponentRelationshipFeedbacks is a parsable slice of SystemComponentRelationshipFeedback.
type SystemComponentRelationshipFeedbacks []*SystemComponentRelationshipFeedback
