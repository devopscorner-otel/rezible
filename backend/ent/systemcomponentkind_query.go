// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/systemcomponent"
	"github.com/rezible/rezible/ent/systemcomponentkind"
)

// SystemComponentKindQuery is the builder for querying SystemComponentKind entities.
type SystemComponentKindQuery struct {
	config
	ctx            *QueryContext
	order          []systemcomponentkind.OrderOption
	inters         []Interceptor
	predicates     []predicate.SystemComponentKind
	withComponents *SystemComponentQuery
	modifiers      []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SystemComponentKindQuery builder.
func (sckq *SystemComponentKindQuery) Where(ps ...predicate.SystemComponentKind) *SystemComponentKindQuery {
	sckq.predicates = append(sckq.predicates, ps...)
	return sckq
}

// Limit the number of records to be returned by this query.
func (sckq *SystemComponentKindQuery) Limit(limit int) *SystemComponentKindQuery {
	sckq.ctx.Limit = &limit
	return sckq
}

// Offset to start from.
func (sckq *SystemComponentKindQuery) Offset(offset int) *SystemComponentKindQuery {
	sckq.ctx.Offset = &offset
	return sckq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sckq *SystemComponentKindQuery) Unique(unique bool) *SystemComponentKindQuery {
	sckq.ctx.Unique = &unique
	return sckq
}

// Order specifies how the records should be ordered.
func (sckq *SystemComponentKindQuery) Order(o ...systemcomponentkind.OrderOption) *SystemComponentKindQuery {
	sckq.order = append(sckq.order, o...)
	return sckq
}

// QueryComponents chains the current query on the "components" edge.
func (sckq *SystemComponentKindQuery) QueryComponents() *SystemComponentQuery {
	query := (&SystemComponentClient{config: sckq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sckq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sckq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(systemcomponentkind.Table, systemcomponentkind.FieldID, selector),
			sqlgraph.To(systemcomponent.Table, systemcomponent.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, systemcomponentkind.ComponentsTable, systemcomponentkind.ComponentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(sckq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SystemComponentKind entity from the query.
// Returns a *NotFoundError when no SystemComponentKind was found.
func (sckq *SystemComponentKindQuery) First(ctx context.Context) (*SystemComponentKind, error) {
	nodes, err := sckq.Limit(1).All(setContextOp(ctx, sckq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{systemcomponentkind.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sckq *SystemComponentKindQuery) FirstX(ctx context.Context) *SystemComponentKind {
	node, err := sckq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SystemComponentKind ID from the query.
// Returns a *NotFoundError when no SystemComponentKind ID was found.
func (sckq *SystemComponentKindQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = sckq.Limit(1).IDs(setContextOp(ctx, sckq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{systemcomponentkind.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sckq *SystemComponentKindQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := sckq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SystemComponentKind entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SystemComponentKind entity is found.
// Returns a *NotFoundError when no SystemComponentKind entities are found.
func (sckq *SystemComponentKindQuery) Only(ctx context.Context) (*SystemComponentKind, error) {
	nodes, err := sckq.Limit(2).All(setContextOp(ctx, sckq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{systemcomponentkind.Label}
	default:
		return nil, &NotSingularError{systemcomponentkind.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sckq *SystemComponentKindQuery) OnlyX(ctx context.Context) *SystemComponentKind {
	node, err := sckq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SystemComponentKind ID in the query.
// Returns a *NotSingularError when more than one SystemComponentKind ID is found.
// Returns a *NotFoundError when no entities are found.
func (sckq *SystemComponentKindQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = sckq.Limit(2).IDs(setContextOp(ctx, sckq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{systemcomponentkind.Label}
	default:
		err = &NotSingularError{systemcomponentkind.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sckq *SystemComponentKindQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := sckq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SystemComponentKinds.
func (sckq *SystemComponentKindQuery) All(ctx context.Context) ([]*SystemComponentKind, error) {
	ctx = setContextOp(ctx, sckq.ctx, ent.OpQueryAll)
	if err := sckq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SystemComponentKind, *SystemComponentKindQuery]()
	return withInterceptors[[]*SystemComponentKind](ctx, sckq, qr, sckq.inters)
}

// AllX is like All, but panics if an error occurs.
func (sckq *SystemComponentKindQuery) AllX(ctx context.Context) []*SystemComponentKind {
	nodes, err := sckq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SystemComponentKind IDs.
func (sckq *SystemComponentKindQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if sckq.ctx.Unique == nil && sckq.path != nil {
		sckq.Unique(true)
	}
	ctx = setContextOp(ctx, sckq.ctx, ent.OpQueryIDs)
	if err = sckq.Select(systemcomponentkind.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sckq *SystemComponentKindQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := sckq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sckq *SystemComponentKindQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, sckq.ctx, ent.OpQueryCount)
	if err := sckq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, sckq, querierCount[*SystemComponentKindQuery](), sckq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (sckq *SystemComponentKindQuery) CountX(ctx context.Context) int {
	count, err := sckq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sckq *SystemComponentKindQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, sckq.ctx, ent.OpQueryExist)
	switch _, err := sckq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (sckq *SystemComponentKindQuery) ExistX(ctx context.Context) bool {
	exist, err := sckq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SystemComponentKindQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sckq *SystemComponentKindQuery) Clone() *SystemComponentKindQuery {
	if sckq == nil {
		return nil
	}
	return &SystemComponentKindQuery{
		config:         sckq.config,
		ctx:            sckq.ctx.Clone(),
		order:          append([]systemcomponentkind.OrderOption{}, sckq.order...),
		inters:         append([]Interceptor{}, sckq.inters...),
		predicates:     append([]predicate.SystemComponentKind{}, sckq.predicates...),
		withComponents: sckq.withComponents.Clone(),
		// clone intermediate query.
		sql:       sckq.sql.Clone(),
		path:      sckq.path,
		modifiers: append([]func(*sql.Selector){}, sckq.modifiers...),
	}
}

// WithComponents tells the query-builder to eager-load the nodes that are connected to
// the "components" edge. The optional arguments are used to configure the query builder of the edge.
func (sckq *SystemComponentKindQuery) WithComponents(opts ...func(*SystemComponentQuery)) *SystemComponentKindQuery {
	query := (&SystemComponentClient{config: sckq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sckq.withComponents = query
	return sckq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ProviderID string `json:"provider_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SystemComponentKind.Query().
//		GroupBy(systemcomponentkind.FieldProviderID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (sckq *SystemComponentKindQuery) GroupBy(field string, fields ...string) *SystemComponentKindGroupBy {
	sckq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SystemComponentKindGroupBy{build: sckq}
	grbuild.flds = &sckq.ctx.Fields
	grbuild.label = systemcomponentkind.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ProviderID string `json:"provider_id,omitempty"`
//	}
//
//	client.SystemComponentKind.Query().
//		Select(systemcomponentkind.FieldProviderID).
//		Scan(ctx, &v)
func (sckq *SystemComponentKindQuery) Select(fields ...string) *SystemComponentKindSelect {
	sckq.ctx.Fields = append(sckq.ctx.Fields, fields...)
	sbuild := &SystemComponentKindSelect{SystemComponentKindQuery: sckq}
	sbuild.label = systemcomponentkind.Label
	sbuild.flds, sbuild.scan = &sckq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SystemComponentKindSelect configured with the given aggregations.
func (sckq *SystemComponentKindQuery) Aggregate(fns ...AggregateFunc) *SystemComponentKindSelect {
	return sckq.Select().Aggregate(fns...)
}

func (sckq *SystemComponentKindQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range sckq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, sckq); err != nil {
				return err
			}
		}
	}
	for _, f := range sckq.ctx.Fields {
		if !systemcomponentkind.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if sckq.path != nil {
		prev, err := sckq.path(ctx)
		if err != nil {
			return err
		}
		sckq.sql = prev
	}
	if systemcomponentkind.Policy == nil {
		return errors.New("ent: uninitialized systemcomponentkind.Policy (forgotten import ent/runtime?)")
	}
	if err := systemcomponentkind.Policy.EvalQuery(ctx, sckq); err != nil {
		return err
	}
	return nil
}

func (sckq *SystemComponentKindQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SystemComponentKind, error) {
	var (
		nodes       = []*SystemComponentKind{}
		_spec       = sckq.querySpec()
		loadedTypes = [1]bool{
			sckq.withComponents != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SystemComponentKind).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SystemComponentKind{config: sckq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(sckq.modifiers) > 0 {
		_spec.Modifiers = sckq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sckq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := sckq.withComponents; query != nil {
		if err := sckq.loadComponents(ctx, query, nodes,
			func(n *SystemComponentKind) { n.Edges.Components = []*SystemComponent{} },
			func(n *SystemComponentKind, e *SystemComponent) { n.Edges.Components = append(n.Edges.Components, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (sckq *SystemComponentKindQuery) loadComponents(ctx context.Context, query *SystemComponentQuery, nodes []*SystemComponentKind, init func(*SystemComponentKind), assign func(*SystemComponentKind, *SystemComponent)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*SystemComponentKind)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(systemcomponent.FieldKindID)
	}
	query.Where(predicate.SystemComponent(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(systemcomponentkind.ComponentsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.KindID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "kind_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (sckq *SystemComponentKindQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sckq.querySpec()
	if len(sckq.modifiers) > 0 {
		_spec.Modifiers = sckq.modifiers
	}
	_spec.Node.Columns = sckq.ctx.Fields
	if len(sckq.ctx.Fields) > 0 {
		_spec.Unique = sckq.ctx.Unique != nil && *sckq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, sckq.driver, _spec)
}

func (sckq *SystemComponentKindQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(systemcomponentkind.Table, systemcomponentkind.Columns, sqlgraph.NewFieldSpec(systemcomponentkind.FieldID, field.TypeUUID))
	_spec.From = sckq.sql
	if unique := sckq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if sckq.path != nil {
		_spec.Unique = true
	}
	if fields := sckq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, systemcomponentkind.FieldID)
		for i := range fields {
			if fields[i] != systemcomponentkind.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := sckq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sckq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sckq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sckq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sckq *SystemComponentKindQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sckq.driver.Dialect())
	t1 := builder.Table(systemcomponentkind.Table)
	columns := sckq.ctx.Fields
	if len(columns) == 0 {
		columns = systemcomponentkind.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sckq.sql != nil {
		selector = sckq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sckq.ctx.Unique != nil && *sckq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range sckq.modifiers {
		m(selector)
	}
	for _, p := range sckq.predicates {
		p(selector)
	}
	for _, p := range sckq.order {
		p(selector)
	}
	if offset := sckq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sckq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (sckq *SystemComponentKindQuery) Modify(modifiers ...func(s *sql.Selector)) *SystemComponentKindSelect {
	sckq.modifiers = append(sckq.modifiers, modifiers...)
	return sckq.Select()
}

// SystemComponentKindGroupBy is the group-by builder for SystemComponentKind entities.
type SystemComponentKindGroupBy struct {
	selector
	build *SystemComponentKindQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sckgb *SystemComponentKindGroupBy) Aggregate(fns ...AggregateFunc) *SystemComponentKindGroupBy {
	sckgb.fns = append(sckgb.fns, fns...)
	return sckgb
}

// Scan applies the selector query and scans the result into the given value.
func (sckgb *SystemComponentKindGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sckgb.build.ctx, ent.OpQueryGroupBy)
	if err := sckgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SystemComponentKindQuery, *SystemComponentKindGroupBy](ctx, sckgb.build, sckgb, sckgb.build.inters, v)
}

func (sckgb *SystemComponentKindGroupBy) sqlScan(ctx context.Context, root *SystemComponentKindQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(sckgb.fns))
	for _, fn := range sckgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*sckgb.flds)+len(sckgb.fns))
		for _, f := range *sckgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*sckgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sckgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SystemComponentKindSelect is the builder for selecting fields of SystemComponentKind entities.
type SystemComponentKindSelect struct {
	*SystemComponentKindQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (scks *SystemComponentKindSelect) Aggregate(fns ...AggregateFunc) *SystemComponentKindSelect {
	scks.fns = append(scks.fns, fns...)
	return scks
}

// Scan applies the selector query and scans the result into the given value.
func (scks *SystemComponentKindSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, scks.ctx, ent.OpQuerySelect)
	if err := scks.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SystemComponentKindQuery, *SystemComponentKindSelect](ctx, scks.SystemComponentKindQuery, scks, scks.inters, v)
}

func (scks *SystemComponentKindSelect) sqlScan(ctx context.Context, root *SystemComponentKindQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(scks.fns))
	for _, fn := range scks.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*scks.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := scks.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (scks *SystemComponentKindSelect) Modify(modifiers ...func(s *sql.Selector)) *SystemComponentKindSelect {
	scks.modifiers = append(scks.modifiers, modifiers...)
	return scks
}
