// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/retrospective"
	"github.com/rezible/rezible/ent/retrospectivecomment"
	"github.com/rezible/rezible/ent/retrospectivereview"
	"github.com/rezible/rezible/ent/tenant"
	"github.com/rezible/rezible/ent/user"
)

// RetrospectiveComment is the model entity for the RetrospectiveComment schema.
type RetrospectiveComment struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID int `json:"tenant_id,omitempty"`
	// RetrospectiveID holds the value of the "retrospective_id" field.
	RetrospectiveID uuid.UUID `json:"retrospective_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// RetrospectiveReviewID holds the value of the "retrospective_review_id" field.
	RetrospectiveReviewID uuid.UUID `json:"retrospective_review_id,omitempty"`
	// ParentReplyID holds the value of the "parent_reply_id" field.
	ParentReplyID uuid.UUID `json:"parent_reply_id,omitempty"`
	// Content holds the value of the "content" field.
	Content []byte `json:"content,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RetrospectiveCommentQuery when eager-loading is set.
	Edges        RetrospectiveCommentEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RetrospectiveCommentEdges holds the relations/edges for other nodes in the graph.
type RetrospectiveCommentEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Retrospective holds the value of the retrospective edge.
	Retrospective *Retrospective `json:"retrospective,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Review holds the value of the review edge.
	Review *RetrospectiveReview `json:"review,omitempty"`
	// Parent holds the value of the parent edge.
	Parent *RetrospectiveComment `json:"parent,omitempty"`
	// Replies holds the value of the replies edge.
	Replies []*RetrospectiveComment `json:"replies,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RetrospectiveCommentEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// RetrospectiveOrErr returns the Retrospective value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RetrospectiveCommentEdges) RetrospectiveOrErr() (*Retrospective, error) {
	if e.Retrospective != nil {
		return e.Retrospective, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: retrospective.Label}
	}
	return nil, &NotLoadedError{edge: "retrospective"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RetrospectiveCommentEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ReviewOrErr returns the Review value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RetrospectiveCommentEdges) ReviewOrErr() (*RetrospectiveReview, error) {
	if e.Review != nil {
		return e.Review, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: retrospectivereview.Label}
	}
	return nil, &NotLoadedError{edge: "review"}
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RetrospectiveCommentEdges) ParentOrErr() (*RetrospectiveComment, error) {
	if e.Parent != nil {
		return e.Parent, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: retrospectivecomment.Label}
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// RepliesOrErr returns the Replies value or an error if the edge
// was not loaded in eager-loading.
func (e RetrospectiveCommentEdges) RepliesOrErr() ([]*RetrospectiveComment, error) {
	if e.loadedTypes[5] {
		return e.Replies, nil
	}
	return nil, &NotLoadedError{edge: "replies"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RetrospectiveComment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case retrospectivecomment.FieldContent:
			values[i] = new([]byte)
		case retrospectivecomment.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case retrospectivecomment.FieldID, retrospectivecomment.FieldRetrospectiveID, retrospectivecomment.FieldUserID, retrospectivecomment.FieldRetrospectiveReviewID, retrospectivecomment.FieldParentReplyID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RetrospectiveComment fields.
func (rc *RetrospectiveComment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case retrospectivecomment.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				rc.ID = *value
			}
		case retrospectivecomment.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				rc.TenantID = int(value.Int64)
			}
		case retrospectivecomment.FieldRetrospectiveID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field retrospective_id", values[i])
			} else if value != nil {
				rc.RetrospectiveID = *value
			}
		case retrospectivecomment.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				rc.UserID = *value
			}
		case retrospectivecomment.FieldRetrospectiveReviewID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field retrospective_review_id", values[i])
			} else if value != nil {
				rc.RetrospectiveReviewID = *value
			}
		case retrospectivecomment.FieldParentReplyID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field parent_reply_id", values[i])
			} else if value != nil {
				rc.ParentReplyID = *value
			}
		case retrospectivecomment.FieldContent:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value != nil {
				rc.Content = *value
			}
		default:
			rc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RetrospectiveComment.
// This includes values selected through modifiers, order, etc.
func (rc *RetrospectiveComment) Value(name string) (ent.Value, error) {
	return rc.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the RetrospectiveComment entity.
func (rc *RetrospectiveComment) QueryTenant() *TenantQuery {
	return NewRetrospectiveCommentClient(rc.config).QueryTenant(rc)
}

// QueryRetrospective queries the "retrospective" edge of the RetrospectiveComment entity.
func (rc *RetrospectiveComment) QueryRetrospective() *RetrospectiveQuery {
	return NewRetrospectiveCommentClient(rc.config).QueryRetrospective(rc)
}

// QueryUser queries the "user" edge of the RetrospectiveComment entity.
func (rc *RetrospectiveComment) QueryUser() *UserQuery {
	return NewRetrospectiveCommentClient(rc.config).QueryUser(rc)
}

// QueryReview queries the "review" edge of the RetrospectiveComment entity.
func (rc *RetrospectiveComment) QueryReview() *RetrospectiveReviewQuery {
	return NewRetrospectiveCommentClient(rc.config).QueryReview(rc)
}

// QueryParent queries the "parent" edge of the RetrospectiveComment entity.
func (rc *RetrospectiveComment) QueryParent() *RetrospectiveCommentQuery {
	return NewRetrospectiveCommentClient(rc.config).QueryParent(rc)
}

// QueryReplies queries the "replies" edge of the RetrospectiveComment entity.
func (rc *RetrospectiveComment) QueryReplies() *RetrospectiveCommentQuery {
	return NewRetrospectiveCommentClient(rc.config).QueryReplies(rc)
}

// Update returns a builder for updating this RetrospectiveComment.
// Note that you need to call RetrospectiveComment.Unwrap() before calling this method if this RetrospectiveComment
// was returned from a transaction, and the transaction was committed or rolled back.
func (rc *RetrospectiveComment) Update() *RetrospectiveCommentUpdateOne {
	return NewRetrospectiveCommentClient(rc.config).UpdateOne(rc)
}

// Unwrap unwraps the RetrospectiveComment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rc *RetrospectiveComment) Unwrap() *RetrospectiveComment {
	_tx, ok := rc.config.driver.(*txDriver)
	if !ok {
		panic("ent: RetrospectiveComment is not a transactional entity")
	}
	rc.config.driver = _tx.drv
	return rc
}

// String implements the fmt.Stringer.
func (rc *RetrospectiveComment) String() string {
	var builder strings.Builder
	builder.WriteString("RetrospectiveComment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rc.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", rc.TenantID))
	builder.WriteString(", ")
	builder.WriteString("retrospective_id=")
	builder.WriteString(fmt.Sprintf("%v", rc.RetrospectiveID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", rc.UserID))
	builder.WriteString(", ")
	builder.WriteString("retrospective_review_id=")
	builder.WriteString(fmt.Sprintf("%v", rc.RetrospectiveReviewID))
	builder.WriteString(", ")
	builder.WriteString("parent_reply_id=")
	builder.WriteString(fmt.Sprintf("%v", rc.ParentReplyID))
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(fmt.Sprintf("%v", rc.Content))
	builder.WriteByte(')')
	return builder.String()
}

// RetrospectiveComments is a parsable slice of RetrospectiveComment.
type RetrospectiveComments []*RetrospectiveComment
