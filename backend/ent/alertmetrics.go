// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/rezible/rezible/ent/alertmetrics"
)

// AlertMetrics is the model entity for the AlertMetrics schema.
type AlertMetrics struct {
	config `json:"-"`
	// EventCount holds the value of the "event_count" field.
	EventCount int `json:"event_count,omitempty"`
	// InterruptCount holds the value of the "interrupt_count" field.
	InterruptCount int `json:"interrupt_count,omitempty"`
	// NightInterruptCount holds the value of the "night_interrupt_count" field.
	NightInterruptCount int `json:"night_interrupt_count,omitempty"`
	// Incidents holds the value of the "incidents" field.
	Incidents int `json:"incidents,omitempty"`
	// FeedbackCount holds the value of the "feedback_count" field.
	FeedbackCount int `json:"feedback_count,omitempty"`
	// FeedbackActionable holds the value of the "feedback_actionable" field.
	FeedbackActionable int `json:"feedback_actionable,omitempty"`
	// FeedbackAccurate holds the value of the "feedback_accurate" field.
	FeedbackAccurate int `json:"feedback_accurate,omitempty"`
	// FeedbackAccurateUnknown holds the value of the "feedback_accurate_unknown" field.
	FeedbackAccurateUnknown int `json:"feedback_accurate_unknown,omitempty"`
	// FeedbackDocsAvailable holds the value of the "feedback_docs_available" field.
	FeedbackDocsAvailable int `json:"feedback_docs_available,omitempty"`
	// FeedbackDocsNeedUpdate holds the value of the "feedback_docs_need_update" field.
	FeedbackDocsNeedUpdate int `json:"feedback_docs_need_update,omitempty"`
	selectValues           sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AlertMetrics) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case alertmetrics.FieldEventCount, alertmetrics.FieldInterruptCount, alertmetrics.FieldNightInterruptCount, alertmetrics.FieldIncidents, alertmetrics.FieldFeedbackCount, alertmetrics.FieldFeedbackActionable, alertmetrics.FieldFeedbackAccurate, alertmetrics.FieldFeedbackAccurateUnknown, alertmetrics.FieldFeedbackDocsAvailable, alertmetrics.FieldFeedbackDocsNeedUpdate:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AlertMetrics fields.
func (am *AlertMetrics) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case alertmetrics.FieldEventCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field event_count", values[i])
			} else if value.Valid {
				am.EventCount = int(value.Int64)
			}
		case alertmetrics.FieldInterruptCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field interrupt_count", values[i])
			} else if value.Valid {
				am.InterruptCount = int(value.Int64)
			}
		case alertmetrics.FieldNightInterruptCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field night_interrupt_count", values[i])
			} else if value.Valid {
				am.NightInterruptCount = int(value.Int64)
			}
		case alertmetrics.FieldIncidents:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field incidents", values[i])
			} else if value.Valid {
				am.Incidents = int(value.Int64)
			}
		case alertmetrics.FieldFeedbackCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field feedback_count", values[i])
			} else if value.Valid {
				am.FeedbackCount = int(value.Int64)
			}
		case alertmetrics.FieldFeedbackActionable:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field feedback_actionable", values[i])
			} else if value.Valid {
				am.FeedbackActionable = int(value.Int64)
			}
		case alertmetrics.FieldFeedbackAccurate:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field feedback_accurate", values[i])
			} else if value.Valid {
				am.FeedbackAccurate = int(value.Int64)
			}
		case alertmetrics.FieldFeedbackAccurateUnknown:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field feedback_accurate_unknown", values[i])
			} else if value.Valid {
				am.FeedbackAccurateUnknown = int(value.Int64)
			}
		case alertmetrics.FieldFeedbackDocsAvailable:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field feedback_docs_available", values[i])
			} else if value.Valid {
				am.FeedbackDocsAvailable = int(value.Int64)
			}
		case alertmetrics.FieldFeedbackDocsNeedUpdate:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field feedback_docs_need_update", values[i])
			} else if value.Valid {
				am.FeedbackDocsNeedUpdate = int(value.Int64)
			}
		default:
			am.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AlertMetrics.
// This includes values selected through modifiers, order, etc.
func (am *AlertMetrics) Value(name string) (ent.Value, error) {
	return am.selectValues.Get(name)
}

// Unwrap unwraps the AlertMetrics entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (am *AlertMetrics) Unwrap() *AlertMetrics {
	_tx, ok := am.config.driver.(*txDriver)
	if !ok {
		panic("ent: AlertMetrics is not a transactional entity")
	}
	am.config.driver = _tx.drv
	return am
}

// String implements the fmt.Stringer.
func (am *AlertMetrics) String() string {
	var builder strings.Builder
	builder.WriteString("AlertMetrics(")
	builder.WriteString("event_count=")
	builder.WriteString(fmt.Sprintf("%v", am.EventCount))
	builder.WriteString(", ")
	builder.WriteString("interrupt_count=")
	builder.WriteString(fmt.Sprintf("%v", am.InterruptCount))
	builder.WriteString(", ")
	builder.WriteString("night_interrupt_count=")
	builder.WriteString(fmt.Sprintf("%v", am.NightInterruptCount))
	builder.WriteString(", ")
	builder.WriteString("incidents=")
	builder.WriteString(fmt.Sprintf("%v", am.Incidents))
	builder.WriteString(", ")
	builder.WriteString("feedback_count=")
	builder.WriteString(fmt.Sprintf("%v", am.FeedbackCount))
	builder.WriteString(", ")
	builder.WriteString("feedback_actionable=")
	builder.WriteString(fmt.Sprintf("%v", am.FeedbackActionable))
	builder.WriteString(", ")
	builder.WriteString("feedback_accurate=")
	builder.WriteString(fmt.Sprintf("%v", am.FeedbackAccurate))
	builder.WriteString(", ")
	builder.WriteString("feedback_accurate_unknown=")
	builder.WriteString(fmt.Sprintf("%v", am.FeedbackAccurateUnknown))
	builder.WriteString(", ")
	builder.WriteString("feedback_docs_available=")
	builder.WriteString(fmt.Sprintf("%v", am.FeedbackDocsAvailable))
	builder.WriteString(", ")
	builder.WriteString("feedback_docs_need_update=")
	builder.WriteString(fmt.Sprintf("%v", am.FeedbackDocsNeedUpdate))
	builder.WriteByte(')')
	return builder.String()
}

// AlertMetricsSlice is a parsable slice of AlertMetrics.
type AlertMetricsSlice []*AlertMetrics
