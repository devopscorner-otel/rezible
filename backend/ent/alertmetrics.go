// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/alert"
	"github.com/rezible/rezible/ent/alertmetrics"
)

// AlertMetrics is the model entity for the AlertMetrics schema.
type AlertMetrics struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// AlertID holds the value of the "alert_id" field.
	AlertID uuid.UUID `json:"alert_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AlertMetricsQuery when eager-loading is set.
	Edges        AlertMetricsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AlertMetricsEdges holds the relations/edges for other nodes in the graph.
type AlertMetricsEdges struct {
	// Alert holds the value of the alert edge.
	Alert *Alert `json:"alert,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AlertOrErr returns the Alert value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AlertMetricsEdges) AlertOrErr() (*Alert, error) {
	if e.Alert != nil {
		return e.Alert, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: alert.Label}
	}
	return nil, &NotLoadedError{edge: "alert"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AlertMetrics) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case alertmetrics.FieldID, alertmetrics.FieldAlertID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AlertMetrics fields.
func (am *AlertMetrics) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case alertmetrics.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				am.ID = *value
			}
		case alertmetrics.FieldAlertID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field alert_id", values[i])
			} else if value != nil {
				am.AlertID = *value
			}
		default:
			am.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AlertMetrics.
// This includes values selected through modifiers, order, etc.
func (am *AlertMetrics) Value(name string) (ent.Value, error) {
	return am.selectValues.Get(name)
}

// QueryAlert queries the "alert" edge of the AlertMetrics entity.
func (am *AlertMetrics) QueryAlert() *AlertQuery {
	return NewAlertMetricsClient(am.config).QueryAlert(am)
}

// Update returns a builder for updating this AlertMetrics.
// Note that you need to call AlertMetrics.Unwrap() before calling this method if this AlertMetrics
// was returned from a transaction, and the transaction was committed or rolled back.
func (am *AlertMetrics) Update() *AlertMetricsUpdateOne {
	return NewAlertMetricsClient(am.config).UpdateOne(am)
}

// Unwrap unwraps the AlertMetrics entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (am *AlertMetrics) Unwrap() *AlertMetrics {
	_tx, ok := am.config.driver.(*txDriver)
	if !ok {
		panic("ent: AlertMetrics is not a transactional entity")
	}
	am.config.driver = _tx.drv
	return am
}

// String implements the fmt.Stringer.
func (am *AlertMetrics) String() string {
	var builder strings.Builder
	builder.WriteString("AlertMetrics(")
	builder.WriteString(fmt.Sprintf("id=%v, ", am.ID))
	builder.WriteString("alert_id=")
	builder.WriteString(fmt.Sprintf("%v", am.AlertID))
	builder.WriteByte(')')
	return builder.String()
}

// AlertMetricsSlice is a parsable slice of AlertMetrics.
type AlertMetricsSlice []*AlertMetrics
