// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rezible/rezible/ent/oncallalertinstance"
	"github.com/rezible/rezible/ent/predicate"
)

// OncallAlertInstanceDelete is the builder for deleting a OncallAlertInstance entity.
type OncallAlertInstanceDelete struct {
	config
	hooks    []Hook
	mutation *OncallAlertInstanceMutation
}

// Where appends a list predicates to the OncallAlertInstanceDelete builder.
func (oaid *OncallAlertInstanceDelete) Where(ps ...predicate.OncallAlertInstance) *OncallAlertInstanceDelete {
	oaid.mutation.Where(ps...)
	return oaid
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (oaid *OncallAlertInstanceDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, oaid.sqlExec, oaid.mutation, oaid.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (oaid *OncallAlertInstanceDelete) ExecX(ctx context.Context) int {
	n, err := oaid.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (oaid *OncallAlertInstanceDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(oncallalertinstance.Table, sqlgraph.NewFieldSpec(oncallalertinstance.FieldID, field.TypeUUID))
	if ps := oaid.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, oaid.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	oaid.mutation.done = true
	return affected, err
}

// OncallAlertInstanceDeleteOne is the builder for deleting a single OncallAlertInstance entity.
type OncallAlertInstanceDeleteOne struct {
	oaid *OncallAlertInstanceDelete
}

// Where appends a list predicates to the OncallAlertInstanceDelete builder.
func (oaido *OncallAlertInstanceDeleteOne) Where(ps ...predicate.OncallAlertInstance) *OncallAlertInstanceDeleteOne {
	oaido.oaid.mutation.Where(ps...)
	return oaido
}

// Exec executes the deletion query.
func (oaido *OncallAlertInstanceDeleteOne) Exec(ctx context.Context) error {
	n, err := oaido.oaid.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{oncallalertinstance.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (oaido *OncallAlertInstanceDeleteOne) ExecX(ctx context.Context) {
	if err := oaido.Exec(ctx); err != nil {
		panic(err)
	}
}
