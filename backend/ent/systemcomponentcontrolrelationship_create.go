// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/systemcomponent"
	"github.com/rezible/rezible/ent/systemcomponentcontrolrelationship"
)

// SystemComponentControlRelationshipCreate is the builder for creating a SystemComponentControlRelationship entity.
type SystemComponentControlRelationshipCreate struct {
	config
	mutation *SystemComponentControlRelationshipMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetControllerID sets the "controller_id" field.
func (sccrc *SystemComponentControlRelationshipCreate) SetControllerID(u uuid.UUID) *SystemComponentControlRelationshipCreate {
	sccrc.mutation.SetControllerID(u)
	return sccrc
}

// SetControlledID sets the "controlled_id" field.
func (sccrc *SystemComponentControlRelationshipCreate) SetControlledID(u uuid.UUID) *SystemComponentControlRelationshipCreate {
	sccrc.mutation.SetControlledID(u)
	return sccrc
}

// SetType sets the "type" field.
func (sccrc *SystemComponentControlRelationshipCreate) SetType(s string) *SystemComponentControlRelationshipCreate {
	sccrc.mutation.SetType(s)
	return sccrc
}

// SetDescription sets the "description" field.
func (sccrc *SystemComponentControlRelationshipCreate) SetDescription(s string) *SystemComponentControlRelationshipCreate {
	sccrc.mutation.SetDescription(s)
	return sccrc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sccrc *SystemComponentControlRelationshipCreate) SetNillableDescription(s *string) *SystemComponentControlRelationshipCreate {
	if s != nil {
		sccrc.SetDescription(*s)
	}
	return sccrc
}

// SetCreatedAt sets the "created_at" field.
func (sccrc *SystemComponentControlRelationshipCreate) SetCreatedAt(t time.Time) *SystemComponentControlRelationshipCreate {
	sccrc.mutation.SetCreatedAt(t)
	return sccrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sccrc *SystemComponentControlRelationshipCreate) SetNillableCreatedAt(t *time.Time) *SystemComponentControlRelationshipCreate {
	if t != nil {
		sccrc.SetCreatedAt(*t)
	}
	return sccrc
}

// SetID sets the "id" field.
func (sccrc *SystemComponentControlRelationshipCreate) SetID(u uuid.UUID) *SystemComponentControlRelationshipCreate {
	sccrc.mutation.SetID(u)
	return sccrc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sccrc *SystemComponentControlRelationshipCreate) SetNillableID(u *uuid.UUID) *SystemComponentControlRelationshipCreate {
	if u != nil {
		sccrc.SetID(*u)
	}
	return sccrc
}

// SetController sets the "controller" edge to the SystemComponent entity.
func (sccrc *SystemComponentControlRelationshipCreate) SetController(s *SystemComponent) *SystemComponentControlRelationshipCreate {
	return sccrc.SetControllerID(s.ID)
}

// SetControlled sets the "controlled" edge to the SystemComponent entity.
func (sccrc *SystemComponentControlRelationshipCreate) SetControlled(s *SystemComponent) *SystemComponentControlRelationshipCreate {
	return sccrc.SetControlledID(s.ID)
}

// Mutation returns the SystemComponentControlRelationshipMutation object of the builder.
func (sccrc *SystemComponentControlRelationshipCreate) Mutation() *SystemComponentControlRelationshipMutation {
	return sccrc.mutation
}

// Save creates the SystemComponentControlRelationship in the database.
func (sccrc *SystemComponentControlRelationshipCreate) Save(ctx context.Context) (*SystemComponentControlRelationship, error) {
	sccrc.defaults()
	return withHooks(ctx, sccrc.sqlSave, sccrc.mutation, sccrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sccrc *SystemComponentControlRelationshipCreate) SaveX(ctx context.Context) *SystemComponentControlRelationship {
	v, err := sccrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sccrc *SystemComponentControlRelationshipCreate) Exec(ctx context.Context) error {
	_, err := sccrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sccrc *SystemComponentControlRelationshipCreate) ExecX(ctx context.Context) {
	if err := sccrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sccrc *SystemComponentControlRelationshipCreate) defaults() {
	if _, ok := sccrc.mutation.CreatedAt(); !ok {
		v := systemcomponentcontrolrelationship.DefaultCreatedAt()
		sccrc.mutation.SetCreatedAt(v)
	}
	if _, ok := sccrc.mutation.ID(); !ok {
		v := systemcomponentcontrolrelationship.DefaultID()
		sccrc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sccrc *SystemComponentControlRelationshipCreate) check() error {
	if _, ok := sccrc.mutation.ControllerID(); !ok {
		return &ValidationError{Name: "controller_id", err: errors.New(`ent: missing required field "SystemComponentControlRelationship.controller_id"`)}
	}
	if _, ok := sccrc.mutation.ControlledID(); !ok {
		return &ValidationError{Name: "controlled_id", err: errors.New(`ent: missing required field "SystemComponentControlRelationship.controlled_id"`)}
	}
	if _, ok := sccrc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "SystemComponentControlRelationship.type"`)}
	}
	if v, ok := sccrc.mutation.GetType(); ok {
		if err := systemcomponentcontrolrelationship.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "SystemComponentControlRelationship.type": %w`, err)}
		}
	}
	if _, ok := sccrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SystemComponentControlRelationship.created_at"`)}
	}
	if len(sccrc.mutation.ControllerIDs()) == 0 {
		return &ValidationError{Name: "controller", err: errors.New(`ent: missing required edge "SystemComponentControlRelationship.controller"`)}
	}
	if len(sccrc.mutation.ControlledIDs()) == 0 {
		return &ValidationError{Name: "controlled", err: errors.New(`ent: missing required edge "SystemComponentControlRelationship.controlled"`)}
	}
	return nil
}

func (sccrc *SystemComponentControlRelationshipCreate) sqlSave(ctx context.Context) (*SystemComponentControlRelationship, error) {
	if err := sccrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sccrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sccrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	sccrc.mutation.id = &_node.ID
	sccrc.mutation.done = true
	return _node, nil
}

func (sccrc *SystemComponentControlRelationshipCreate) createSpec() (*SystemComponentControlRelationship, *sqlgraph.CreateSpec) {
	var (
		_node = &SystemComponentControlRelationship{config: sccrc.config}
		_spec = sqlgraph.NewCreateSpec(systemcomponentcontrolrelationship.Table, sqlgraph.NewFieldSpec(systemcomponentcontrolrelationship.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = sccrc.conflict
	if id, ok := sccrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sccrc.mutation.GetType(); ok {
		_spec.SetField(systemcomponentcontrolrelationship.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := sccrc.mutation.Description(); ok {
		_spec.SetField(systemcomponentcontrolrelationship.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := sccrc.mutation.CreatedAt(); ok {
		_spec.SetField(systemcomponentcontrolrelationship.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := sccrc.mutation.ControllerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemcomponentcontrolrelationship.ControllerTable,
			Columns: []string{systemcomponentcontrolrelationship.ControllerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ControllerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sccrc.mutation.ControlledIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemcomponentcontrolrelationship.ControlledTable,
			Columns: []string{systemcomponentcontrolrelationship.ControlledColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ControlledID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SystemComponentControlRelationship.Create().
//		SetControllerID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SystemComponentControlRelationshipUpsert) {
//			SetControllerID(v+v).
//		}).
//		Exec(ctx)
func (sccrc *SystemComponentControlRelationshipCreate) OnConflict(opts ...sql.ConflictOption) *SystemComponentControlRelationshipUpsertOne {
	sccrc.conflict = opts
	return &SystemComponentControlRelationshipUpsertOne{
		create: sccrc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SystemComponentControlRelationship.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sccrc *SystemComponentControlRelationshipCreate) OnConflictColumns(columns ...string) *SystemComponentControlRelationshipUpsertOne {
	sccrc.conflict = append(sccrc.conflict, sql.ConflictColumns(columns...))
	return &SystemComponentControlRelationshipUpsertOne{
		create: sccrc,
	}
}

type (
	// SystemComponentControlRelationshipUpsertOne is the builder for "upsert"-ing
	//  one SystemComponentControlRelationship node.
	SystemComponentControlRelationshipUpsertOne struct {
		create *SystemComponentControlRelationshipCreate
	}

	// SystemComponentControlRelationshipUpsert is the "OnConflict" setter.
	SystemComponentControlRelationshipUpsert struct {
		*sql.UpdateSet
	}
)

// SetControllerID sets the "controller_id" field.
func (u *SystemComponentControlRelationshipUpsert) SetControllerID(v uuid.UUID) *SystemComponentControlRelationshipUpsert {
	u.Set(systemcomponentcontrolrelationship.FieldControllerID, v)
	return u
}

// UpdateControllerID sets the "controller_id" field to the value that was provided on create.
func (u *SystemComponentControlRelationshipUpsert) UpdateControllerID() *SystemComponentControlRelationshipUpsert {
	u.SetExcluded(systemcomponentcontrolrelationship.FieldControllerID)
	return u
}

// SetControlledID sets the "controlled_id" field.
func (u *SystemComponentControlRelationshipUpsert) SetControlledID(v uuid.UUID) *SystemComponentControlRelationshipUpsert {
	u.Set(systemcomponentcontrolrelationship.FieldControlledID, v)
	return u
}

// UpdateControlledID sets the "controlled_id" field to the value that was provided on create.
func (u *SystemComponentControlRelationshipUpsert) UpdateControlledID() *SystemComponentControlRelationshipUpsert {
	u.SetExcluded(systemcomponentcontrolrelationship.FieldControlledID)
	return u
}

// SetType sets the "type" field.
func (u *SystemComponentControlRelationshipUpsert) SetType(v string) *SystemComponentControlRelationshipUpsert {
	u.Set(systemcomponentcontrolrelationship.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *SystemComponentControlRelationshipUpsert) UpdateType() *SystemComponentControlRelationshipUpsert {
	u.SetExcluded(systemcomponentcontrolrelationship.FieldType)
	return u
}

// SetDescription sets the "description" field.
func (u *SystemComponentControlRelationshipUpsert) SetDescription(v string) *SystemComponentControlRelationshipUpsert {
	u.Set(systemcomponentcontrolrelationship.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SystemComponentControlRelationshipUpsert) UpdateDescription() *SystemComponentControlRelationshipUpsert {
	u.SetExcluded(systemcomponentcontrolrelationship.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *SystemComponentControlRelationshipUpsert) ClearDescription() *SystemComponentControlRelationshipUpsert {
	u.SetNull(systemcomponentcontrolrelationship.FieldDescription)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SystemComponentControlRelationshipUpsert) SetCreatedAt(v time.Time) *SystemComponentControlRelationshipUpsert {
	u.Set(systemcomponentcontrolrelationship.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SystemComponentControlRelationshipUpsert) UpdateCreatedAt() *SystemComponentControlRelationshipUpsert {
	u.SetExcluded(systemcomponentcontrolrelationship.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SystemComponentControlRelationship.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(systemcomponentcontrolrelationship.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SystemComponentControlRelationshipUpsertOne) UpdateNewValues() *SystemComponentControlRelationshipUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(systemcomponentcontrolrelationship.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SystemComponentControlRelationship.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SystemComponentControlRelationshipUpsertOne) Ignore() *SystemComponentControlRelationshipUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SystemComponentControlRelationshipUpsertOne) DoNothing() *SystemComponentControlRelationshipUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SystemComponentControlRelationshipCreate.OnConflict
// documentation for more info.
func (u *SystemComponentControlRelationshipUpsertOne) Update(set func(*SystemComponentControlRelationshipUpsert)) *SystemComponentControlRelationshipUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SystemComponentControlRelationshipUpsert{UpdateSet: update})
	}))
	return u
}

// SetControllerID sets the "controller_id" field.
func (u *SystemComponentControlRelationshipUpsertOne) SetControllerID(v uuid.UUID) *SystemComponentControlRelationshipUpsertOne {
	return u.Update(func(s *SystemComponentControlRelationshipUpsert) {
		s.SetControllerID(v)
	})
}

// UpdateControllerID sets the "controller_id" field to the value that was provided on create.
func (u *SystemComponentControlRelationshipUpsertOne) UpdateControllerID() *SystemComponentControlRelationshipUpsertOne {
	return u.Update(func(s *SystemComponentControlRelationshipUpsert) {
		s.UpdateControllerID()
	})
}

// SetControlledID sets the "controlled_id" field.
func (u *SystemComponentControlRelationshipUpsertOne) SetControlledID(v uuid.UUID) *SystemComponentControlRelationshipUpsertOne {
	return u.Update(func(s *SystemComponentControlRelationshipUpsert) {
		s.SetControlledID(v)
	})
}

// UpdateControlledID sets the "controlled_id" field to the value that was provided on create.
func (u *SystemComponentControlRelationshipUpsertOne) UpdateControlledID() *SystemComponentControlRelationshipUpsertOne {
	return u.Update(func(s *SystemComponentControlRelationshipUpsert) {
		s.UpdateControlledID()
	})
}

// SetType sets the "type" field.
func (u *SystemComponentControlRelationshipUpsertOne) SetType(v string) *SystemComponentControlRelationshipUpsertOne {
	return u.Update(func(s *SystemComponentControlRelationshipUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *SystemComponentControlRelationshipUpsertOne) UpdateType() *SystemComponentControlRelationshipUpsertOne {
	return u.Update(func(s *SystemComponentControlRelationshipUpsert) {
		s.UpdateType()
	})
}

// SetDescription sets the "description" field.
func (u *SystemComponentControlRelationshipUpsertOne) SetDescription(v string) *SystemComponentControlRelationshipUpsertOne {
	return u.Update(func(s *SystemComponentControlRelationshipUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SystemComponentControlRelationshipUpsertOne) UpdateDescription() *SystemComponentControlRelationshipUpsertOne {
	return u.Update(func(s *SystemComponentControlRelationshipUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *SystemComponentControlRelationshipUpsertOne) ClearDescription() *SystemComponentControlRelationshipUpsertOne {
	return u.Update(func(s *SystemComponentControlRelationshipUpsert) {
		s.ClearDescription()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SystemComponentControlRelationshipUpsertOne) SetCreatedAt(v time.Time) *SystemComponentControlRelationshipUpsertOne {
	return u.Update(func(s *SystemComponentControlRelationshipUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SystemComponentControlRelationshipUpsertOne) UpdateCreatedAt() *SystemComponentControlRelationshipUpsertOne {
	return u.Update(func(s *SystemComponentControlRelationshipUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *SystemComponentControlRelationshipUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SystemComponentControlRelationshipCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SystemComponentControlRelationshipUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SystemComponentControlRelationshipUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: SystemComponentControlRelationshipUpsertOne.ID is not supported by MySQL driver. Use SystemComponentControlRelationshipUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SystemComponentControlRelationshipUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SystemComponentControlRelationshipCreateBulk is the builder for creating many SystemComponentControlRelationship entities in bulk.
type SystemComponentControlRelationshipCreateBulk struct {
	config
	err      error
	builders []*SystemComponentControlRelationshipCreate
	conflict []sql.ConflictOption
}

// Save creates the SystemComponentControlRelationship entities in the database.
func (sccrcb *SystemComponentControlRelationshipCreateBulk) Save(ctx context.Context) ([]*SystemComponentControlRelationship, error) {
	if sccrcb.err != nil {
		return nil, sccrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sccrcb.builders))
	nodes := make([]*SystemComponentControlRelationship, len(sccrcb.builders))
	mutators := make([]Mutator, len(sccrcb.builders))
	for i := range sccrcb.builders {
		func(i int, root context.Context) {
			builder := sccrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SystemComponentControlRelationshipMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sccrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sccrcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sccrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sccrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sccrcb *SystemComponentControlRelationshipCreateBulk) SaveX(ctx context.Context) []*SystemComponentControlRelationship {
	v, err := sccrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sccrcb *SystemComponentControlRelationshipCreateBulk) Exec(ctx context.Context) error {
	_, err := sccrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sccrcb *SystemComponentControlRelationshipCreateBulk) ExecX(ctx context.Context) {
	if err := sccrcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SystemComponentControlRelationship.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SystemComponentControlRelationshipUpsert) {
//			SetControllerID(v+v).
//		}).
//		Exec(ctx)
func (sccrcb *SystemComponentControlRelationshipCreateBulk) OnConflict(opts ...sql.ConflictOption) *SystemComponentControlRelationshipUpsertBulk {
	sccrcb.conflict = opts
	return &SystemComponentControlRelationshipUpsertBulk{
		create: sccrcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SystemComponentControlRelationship.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sccrcb *SystemComponentControlRelationshipCreateBulk) OnConflictColumns(columns ...string) *SystemComponentControlRelationshipUpsertBulk {
	sccrcb.conflict = append(sccrcb.conflict, sql.ConflictColumns(columns...))
	return &SystemComponentControlRelationshipUpsertBulk{
		create: sccrcb,
	}
}

// SystemComponentControlRelationshipUpsertBulk is the builder for "upsert"-ing
// a bulk of SystemComponentControlRelationship nodes.
type SystemComponentControlRelationshipUpsertBulk struct {
	create *SystemComponentControlRelationshipCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SystemComponentControlRelationship.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(systemcomponentcontrolrelationship.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SystemComponentControlRelationshipUpsertBulk) UpdateNewValues() *SystemComponentControlRelationshipUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(systemcomponentcontrolrelationship.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SystemComponentControlRelationship.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SystemComponentControlRelationshipUpsertBulk) Ignore() *SystemComponentControlRelationshipUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SystemComponentControlRelationshipUpsertBulk) DoNothing() *SystemComponentControlRelationshipUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SystemComponentControlRelationshipCreateBulk.OnConflict
// documentation for more info.
func (u *SystemComponentControlRelationshipUpsertBulk) Update(set func(*SystemComponentControlRelationshipUpsert)) *SystemComponentControlRelationshipUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SystemComponentControlRelationshipUpsert{UpdateSet: update})
	}))
	return u
}

// SetControllerID sets the "controller_id" field.
func (u *SystemComponentControlRelationshipUpsertBulk) SetControllerID(v uuid.UUID) *SystemComponentControlRelationshipUpsertBulk {
	return u.Update(func(s *SystemComponentControlRelationshipUpsert) {
		s.SetControllerID(v)
	})
}

// UpdateControllerID sets the "controller_id" field to the value that was provided on create.
func (u *SystemComponentControlRelationshipUpsertBulk) UpdateControllerID() *SystemComponentControlRelationshipUpsertBulk {
	return u.Update(func(s *SystemComponentControlRelationshipUpsert) {
		s.UpdateControllerID()
	})
}

// SetControlledID sets the "controlled_id" field.
func (u *SystemComponentControlRelationshipUpsertBulk) SetControlledID(v uuid.UUID) *SystemComponentControlRelationshipUpsertBulk {
	return u.Update(func(s *SystemComponentControlRelationshipUpsert) {
		s.SetControlledID(v)
	})
}

// UpdateControlledID sets the "controlled_id" field to the value that was provided on create.
func (u *SystemComponentControlRelationshipUpsertBulk) UpdateControlledID() *SystemComponentControlRelationshipUpsertBulk {
	return u.Update(func(s *SystemComponentControlRelationshipUpsert) {
		s.UpdateControlledID()
	})
}

// SetType sets the "type" field.
func (u *SystemComponentControlRelationshipUpsertBulk) SetType(v string) *SystemComponentControlRelationshipUpsertBulk {
	return u.Update(func(s *SystemComponentControlRelationshipUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *SystemComponentControlRelationshipUpsertBulk) UpdateType() *SystemComponentControlRelationshipUpsertBulk {
	return u.Update(func(s *SystemComponentControlRelationshipUpsert) {
		s.UpdateType()
	})
}

// SetDescription sets the "description" field.
func (u *SystemComponentControlRelationshipUpsertBulk) SetDescription(v string) *SystemComponentControlRelationshipUpsertBulk {
	return u.Update(func(s *SystemComponentControlRelationshipUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SystemComponentControlRelationshipUpsertBulk) UpdateDescription() *SystemComponentControlRelationshipUpsertBulk {
	return u.Update(func(s *SystemComponentControlRelationshipUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *SystemComponentControlRelationshipUpsertBulk) ClearDescription() *SystemComponentControlRelationshipUpsertBulk {
	return u.Update(func(s *SystemComponentControlRelationshipUpsert) {
		s.ClearDescription()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SystemComponentControlRelationshipUpsertBulk) SetCreatedAt(v time.Time) *SystemComponentControlRelationshipUpsertBulk {
	return u.Update(func(s *SystemComponentControlRelationshipUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SystemComponentControlRelationshipUpsertBulk) UpdateCreatedAt() *SystemComponentControlRelationshipUpsertBulk {
	return u.Update(func(s *SystemComponentControlRelationshipUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *SystemComponentControlRelationshipUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SystemComponentControlRelationshipCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SystemComponentControlRelationshipCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SystemComponentControlRelationshipUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
