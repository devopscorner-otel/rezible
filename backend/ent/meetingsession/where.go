// Code generated by ent, DO NOT EDIT.

package meetingsession

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/twohundreds/rezible/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldLTE(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldEQ(FieldTitle, v))
}

// StartedAt applies equality check predicate on the "started_at" field. It's identical to StartedAtEQ.
func StartedAt(v time.Time) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldEQ(FieldStartedAt, v))
}

// EndedAt applies equality check predicate on the "ended_at" field. It's identical to EndedAtEQ.
func EndedAt(v time.Time) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldEQ(FieldEndedAt, v))
}

// DocumentName applies equality check predicate on the "document_name" field. It's identical to DocumentNameEQ.
func DocumentName(v string) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldEQ(FieldDocumentName, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldContainsFold(FieldTitle, v))
}

// StartedAtEQ applies the EQ predicate on the "started_at" field.
func StartedAtEQ(v time.Time) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldEQ(FieldStartedAt, v))
}

// StartedAtNEQ applies the NEQ predicate on the "started_at" field.
func StartedAtNEQ(v time.Time) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldNEQ(FieldStartedAt, v))
}

// StartedAtIn applies the In predicate on the "started_at" field.
func StartedAtIn(vs ...time.Time) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldIn(FieldStartedAt, vs...))
}

// StartedAtNotIn applies the NotIn predicate on the "started_at" field.
func StartedAtNotIn(vs ...time.Time) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldNotIn(FieldStartedAt, vs...))
}

// StartedAtGT applies the GT predicate on the "started_at" field.
func StartedAtGT(v time.Time) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldGT(FieldStartedAt, v))
}

// StartedAtGTE applies the GTE predicate on the "started_at" field.
func StartedAtGTE(v time.Time) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldGTE(FieldStartedAt, v))
}

// StartedAtLT applies the LT predicate on the "started_at" field.
func StartedAtLT(v time.Time) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldLT(FieldStartedAt, v))
}

// StartedAtLTE applies the LTE predicate on the "started_at" field.
func StartedAtLTE(v time.Time) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldLTE(FieldStartedAt, v))
}

// EndedAtEQ applies the EQ predicate on the "ended_at" field.
func EndedAtEQ(v time.Time) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldEQ(FieldEndedAt, v))
}

// EndedAtNEQ applies the NEQ predicate on the "ended_at" field.
func EndedAtNEQ(v time.Time) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldNEQ(FieldEndedAt, v))
}

// EndedAtIn applies the In predicate on the "ended_at" field.
func EndedAtIn(vs ...time.Time) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldIn(FieldEndedAt, vs...))
}

// EndedAtNotIn applies the NotIn predicate on the "ended_at" field.
func EndedAtNotIn(vs ...time.Time) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldNotIn(FieldEndedAt, vs...))
}

// EndedAtGT applies the GT predicate on the "ended_at" field.
func EndedAtGT(v time.Time) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldGT(FieldEndedAt, v))
}

// EndedAtGTE applies the GTE predicate on the "ended_at" field.
func EndedAtGTE(v time.Time) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldGTE(FieldEndedAt, v))
}

// EndedAtLT applies the LT predicate on the "ended_at" field.
func EndedAtLT(v time.Time) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldLT(FieldEndedAt, v))
}

// EndedAtLTE applies the LTE predicate on the "ended_at" field.
func EndedAtLTE(v time.Time) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldLTE(FieldEndedAt, v))
}

// EndedAtIsNil applies the IsNil predicate on the "ended_at" field.
func EndedAtIsNil() predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldIsNull(FieldEndedAt))
}

// EndedAtNotNil applies the NotNil predicate on the "ended_at" field.
func EndedAtNotNil() predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldNotNull(FieldEndedAt))
}

// DocumentNameEQ applies the EQ predicate on the "document_name" field.
func DocumentNameEQ(v string) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldEQ(FieldDocumentName, v))
}

// DocumentNameNEQ applies the NEQ predicate on the "document_name" field.
func DocumentNameNEQ(v string) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldNEQ(FieldDocumentName, v))
}

// DocumentNameIn applies the In predicate on the "document_name" field.
func DocumentNameIn(vs ...string) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldIn(FieldDocumentName, vs...))
}

// DocumentNameNotIn applies the NotIn predicate on the "document_name" field.
func DocumentNameNotIn(vs ...string) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldNotIn(FieldDocumentName, vs...))
}

// DocumentNameGT applies the GT predicate on the "document_name" field.
func DocumentNameGT(v string) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldGT(FieldDocumentName, v))
}

// DocumentNameGTE applies the GTE predicate on the "document_name" field.
func DocumentNameGTE(v string) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldGTE(FieldDocumentName, v))
}

// DocumentNameLT applies the LT predicate on the "document_name" field.
func DocumentNameLT(v string) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldLT(FieldDocumentName, v))
}

// DocumentNameLTE applies the LTE predicate on the "document_name" field.
func DocumentNameLTE(v string) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldLTE(FieldDocumentName, v))
}

// DocumentNameContains applies the Contains predicate on the "document_name" field.
func DocumentNameContains(v string) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldContains(FieldDocumentName, v))
}

// DocumentNameHasPrefix applies the HasPrefix predicate on the "document_name" field.
func DocumentNameHasPrefix(v string) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldHasPrefix(FieldDocumentName, v))
}

// DocumentNameHasSuffix applies the HasSuffix predicate on the "document_name" field.
func DocumentNameHasSuffix(v string) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldHasSuffix(FieldDocumentName, v))
}

// DocumentNameEqualFold applies the EqualFold predicate on the "document_name" field.
func DocumentNameEqualFold(v string) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldEqualFold(FieldDocumentName, v))
}

// DocumentNameContainsFold applies the ContainsFold predicate on the "document_name" field.
func DocumentNameContainsFold(v string) predicate.MeetingSession {
	return predicate.MeetingSession(sql.FieldContainsFold(FieldDocumentName, v))
}

// HasIncidents applies the HasEdge predicate on the "incidents" edge.
func HasIncidents() predicate.MeetingSession {
	return predicate.MeetingSession(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, IncidentsTable, IncidentsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIncidentsWith applies the HasEdge predicate on the "incidents" edge with a given conditions (other predicates).
func HasIncidentsWith(preds ...predicate.Incident) predicate.MeetingSession {
	return predicate.MeetingSession(func(s *sql.Selector) {
		step := newIncidentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MeetingSession) predicate.MeetingSession {
	return predicate.MeetingSession(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MeetingSession) predicate.MeetingSession {
	return predicate.MeetingSession(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MeetingSession) predicate.MeetingSession {
	return predicate.MeetingSession(sql.NotPredicates(p))
}
