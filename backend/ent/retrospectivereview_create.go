// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/retrospective"
	"github.com/rezible/rezible/ent/retrospectivediscussion"
	"github.com/rezible/rezible/ent/retrospectivereview"
	"github.com/rezible/rezible/ent/tenant"
	"github.com/rezible/rezible/ent/user"
)

// RetrospectiveReviewCreate is the builder for creating a RetrospectiveReview entity.
type RetrospectiveReviewCreate struct {
	config
	mutation *RetrospectiveReviewMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (rrc *RetrospectiveReviewCreate) SetTenantID(i int) *RetrospectiveReviewCreate {
	rrc.mutation.SetTenantID(i)
	return rrc
}

// SetRetrospectiveID sets the "retrospective_id" field.
func (rrc *RetrospectiveReviewCreate) SetRetrospectiveID(u uuid.UUID) *RetrospectiveReviewCreate {
	rrc.mutation.SetRetrospectiveID(u)
	return rrc
}

// SetRequesterID sets the "requester_id" field.
func (rrc *RetrospectiveReviewCreate) SetRequesterID(u uuid.UUID) *RetrospectiveReviewCreate {
	rrc.mutation.SetRequesterID(u)
	return rrc
}

// SetReviewerID sets the "reviewer_id" field.
func (rrc *RetrospectiveReviewCreate) SetReviewerID(u uuid.UUID) *RetrospectiveReviewCreate {
	rrc.mutation.SetReviewerID(u)
	return rrc
}

// SetState sets the "state" field.
func (rrc *RetrospectiveReviewCreate) SetState(r retrospectivereview.State) *RetrospectiveReviewCreate {
	rrc.mutation.SetState(r)
	return rrc
}

// SetID sets the "id" field.
func (rrc *RetrospectiveReviewCreate) SetID(u uuid.UUID) *RetrospectiveReviewCreate {
	rrc.mutation.SetID(u)
	return rrc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rrc *RetrospectiveReviewCreate) SetNillableID(u *uuid.UUID) *RetrospectiveReviewCreate {
	if u != nil {
		rrc.SetID(*u)
	}
	return rrc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (rrc *RetrospectiveReviewCreate) SetTenant(t *Tenant) *RetrospectiveReviewCreate {
	return rrc.SetTenantID(t.ID)
}

// SetRetrospective sets the "retrospective" edge to the Retrospective entity.
func (rrc *RetrospectiveReviewCreate) SetRetrospective(r *Retrospective) *RetrospectiveReviewCreate {
	return rrc.SetRetrospectiveID(r.ID)
}

// SetRequester sets the "requester" edge to the User entity.
func (rrc *RetrospectiveReviewCreate) SetRequester(u *User) *RetrospectiveReviewCreate {
	return rrc.SetRequesterID(u.ID)
}

// SetReviewer sets the "reviewer" edge to the User entity.
func (rrc *RetrospectiveReviewCreate) SetReviewer(u *User) *RetrospectiveReviewCreate {
	return rrc.SetReviewerID(u.ID)
}

// SetDiscussionID sets the "discussion" edge to the RetrospectiveDiscussion entity by ID.
func (rrc *RetrospectiveReviewCreate) SetDiscussionID(id uuid.UUID) *RetrospectiveReviewCreate {
	rrc.mutation.SetDiscussionID(id)
	return rrc
}

// SetNillableDiscussionID sets the "discussion" edge to the RetrospectiveDiscussion entity by ID if the given value is not nil.
func (rrc *RetrospectiveReviewCreate) SetNillableDiscussionID(id *uuid.UUID) *RetrospectiveReviewCreate {
	if id != nil {
		rrc = rrc.SetDiscussionID(*id)
	}
	return rrc
}

// SetDiscussion sets the "discussion" edge to the RetrospectiveDiscussion entity.
func (rrc *RetrospectiveReviewCreate) SetDiscussion(r *RetrospectiveDiscussion) *RetrospectiveReviewCreate {
	return rrc.SetDiscussionID(r.ID)
}

// Mutation returns the RetrospectiveReviewMutation object of the builder.
func (rrc *RetrospectiveReviewCreate) Mutation() *RetrospectiveReviewMutation {
	return rrc.mutation
}

// Save creates the RetrospectiveReview in the database.
func (rrc *RetrospectiveReviewCreate) Save(ctx context.Context) (*RetrospectiveReview, error) {
	if err := rrc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, rrc.sqlSave, rrc.mutation, rrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rrc *RetrospectiveReviewCreate) SaveX(ctx context.Context) *RetrospectiveReview {
	v, err := rrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rrc *RetrospectiveReviewCreate) Exec(ctx context.Context) error {
	_, err := rrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rrc *RetrospectiveReviewCreate) ExecX(ctx context.Context) {
	if err := rrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rrc *RetrospectiveReviewCreate) defaults() error {
	if _, ok := rrc.mutation.ID(); !ok {
		if retrospectivereview.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized retrospectivereview.DefaultID (forgotten import ent/runtime?)")
		}
		v := retrospectivereview.DefaultID()
		rrc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rrc *RetrospectiveReviewCreate) check() error {
	if _, ok := rrc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "RetrospectiveReview.tenant_id"`)}
	}
	if _, ok := rrc.mutation.RetrospectiveID(); !ok {
		return &ValidationError{Name: "retrospective_id", err: errors.New(`ent: missing required field "RetrospectiveReview.retrospective_id"`)}
	}
	if _, ok := rrc.mutation.RequesterID(); !ok {
		return &ValidationError{Name: "requester_id", err: errors.New(`ent: missing required field "RetrospectiveReview.requester_id"`)}
	}
	if _, ok := rrc.mutation.ReviewerID(); !ok {
		return &ValidationError{Name: "reviewer_id", err: errors.New(`ent: missing required field "RetrospectiveReview.reviewer_id"`)}
	}
	if _, ok := rrc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "RetrospectiveReview.state"`)}
	}
	if v, ok := rrc.mutation.State(); ok {
		if err := retrospectivereview.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "RetrospectiveReview.state": %w`, err)}
		}
	}
	if len(rrc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "RetrospectiveReview.tenant"`)}
	}
	if len(rrc.mutation.RetrospectiveIDs()) == 0 {
		return &ValidationError{Name: "retrospective", err: errors.New(`ent: missing required edge "RetrospectiveReview.retrospective"`)}
	}
	if len(rrc.mutation.RequesterIDs()) == 0 {
		return &ValidationError{Name: "requester", err: errors.New(`ent: missing required edge "RetrospectiveReview.requester"`)}
	}
	if len(rrc.mutation.ReviewerIDs()) == 0 {
		return &ValidationError{Name: "reviewer", err: errors.New(`ent: missing required edge "RetrospectiveReview.reviewer"`)}
	}
	return nil
}

func (rrc *RetrospectiveReviewCreate) sqlSave(ctx context.Context) (*RetrospectiveReview, error) {
	if err := rrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rrc.mutation.id = &_node.ID
	rrc.mutation.done = true
	return _node, nil
}

func (rrc *RetrospectiveReviewCreate) createSpec() (*RetrospectiveReview, *sqlgraph.CreateSpec) {
	var (
		_node = &RetrospectiveReview{config: rrc.config}
		_spec = sqlgraph.NewCreateSpec(retrospectivereview.Table, sqlgraph.NewFieldSpec(retrospectivereview.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = rrc.conflict
	if id, ok := rrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rrc.mutation.State(); ok {
		_spec.SetField(retrospectivereview.FieldState, field.TypeEnum, value)
		_node.State = value
	}
	if nodes := rrc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospectivereview.TenantTable,
			Columns: []string{retrospectivereview.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rrc.mutation.RetrospectiveIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospectivereview.RetrospectiveTable,
			Columns: []string{retrospectivereview.RetrospectiveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospective.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RetrospectiveID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rrc.mutation.RequesterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospectivereview.RequesterTable,
			Columns: []string{retrospectivereview.RequesterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RequesterID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rrc.mutation.ReviewerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospectivereview.ReviewerTable,
			Columns: []string{retrospectivereview.ReviewerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ReviewerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rrc.mutation.DiscussionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospectivereview.DiscussionTable,
			Columns: []string{retrospectivereview.DiscussionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivediscussion.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.retrospective_review_discussion = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RetrospectiveReview.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RetrospectiveReviewUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (rrc *RetrospectiveReviewCreate) OnConflict(opts ...sql.ConflictOption) *RetrospectiveReviewUpsertOne {
	rrc.conflict = opts
	return &RetrospectiveReviewUpsertOne{
		create: rrc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RetrospectiveReview.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rrc *RetrospectiveReviewCreate) OnConflictColumns(columns ...string) *RetrospectiveReviewUpsertOne {
	rrc.conflict = append(rrc.conflict, sql.ConflictColumns(columns...))
	return &RetrospectiveReviewUpsertOne{
		create: rrc,
	}
}

type (
	// RetrospectiveReviewUpsertOne is the builder for "upsert"-ing
	//  one RetrospectiveReview node.
	RetrospectiveReviewUpsertOne struct {
		create *RetrospectiveReviewCreate
	}

	// RetrospectiveReviewUpsert is the "OnConflict" setter.
	RetrospectiveReviewUpsert struct {
		*sql.UpdateSet
	}
)

// SetRetrospectiveID sets the "retrospective_id" field.
func (u *RetrospectiveReviewUpsert) SetRetrospectiveID(v uuid.UUID) *RetrospectiveReviewUpsert {
	u.Set(retrospectivereview.FieldRetrospectiveID, v)
	return u
}

// UpdateRetrospectiveID sets the "retrospective_id" field to the value that was provided on create.
func (u *RetrospectiveReviewUpsert) UpdateRetrospectiveID() *RetrospectiveReviewUpsert {
	u.SetExcluded(retrospectivereview.FieldRetrospectiveID)
	return u
}

// SetRequesterID sets the "requester_id" field.
func (u *RetrospectiveReviewUpsert) SetRequesterID(v uuid.UUID) *RetrospectiveReviewUpsert {
	u.Set(retrospectivereview.FieldRequesterID, v)
	return u
}

// UpdateRequesterID sets the "requester_id" field to the value that was provided on create.
func (u *RetrospectiveReviewUpsert) UpdateRequesterID() *RetrospectiveReviewUpsert {
	u.SetExcluded(retrospectivereview.FieldRequesterID)
	return u
}

// SetReviewerID sets the "reviewer_id" field.
func (u *RetrospectiveReviewUpsert) SetReviewerID(v uuid.UUID) *RetrospectiveReviewUpsert {
	u.Set(retrospectivereview.FieldReviewerID, v)
	return u
}

// UpdateReviewerID sets the "reviewer_id" field to the value that was provided on create.
func (u *RetrospectiveReviewUpsert) UpdateReviewerID() *RetrospectiveReviewUpsert {
	u.SetExcluded(retrospectivereview.FieldReviewerID)
	return u
}

// SetState sets the "state" field.
func (u *RetrospectiveReviewUpsert) SetState(v retrospectivereview.State) *RetrospectiveReviewUpsert {
	u.Set(retrospectivereview.FieldState, v)
	return u
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *RetrospectiveReviewUpsert) UpdateState() *RetrospectiveReviewUpsert {
	u.SetExcluded(retrospectivereview.FieldState)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.RetrospectiveReview.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(retrospectivereview.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RetrospectiveReviewUpsertOne) UpdateNewValues() *RetrospectiveReviewUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(retrospectivereview.FieldID)
		}
		if _, exists := u.create.mutation.TenantID(); exists {
			s.SetIgnore(retrospectivereview.FieldTenantID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RetrospectiveReview.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RetrospectiveReviewUpsertOne) Ignore() *RetrospectiveReviewUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RetrospectiveReviewUpsertOne) DoNothing() *RetrospectiveReviewUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RetrospectiveReviewCreate.OnConflict
// documentation for more info.
func (u *RetrospectiveReviewUpsertOne) Update(set func(*RetrospectiveReviewUpsert)) *RetrospectiveReviewUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RetrospectiveReviewUpsert{UpdateSet: update})
	}))
	return u
}

// SetRetrospectiveID sets the "retrospective_id" field.
func (u *RetrospectiveReviewUpsertOne) SetRetrospectiveID(v uuid.UUID) *RetrospectiveReviewUpsertOne {
	return u.Update(func(s *RetrospectiveReviewUpsert) {
		s.SetRetrospectiveID(v)
	})
}

// UpdateRetrospectiveID sets the "retrospective_id" field to the value that was provided on create.
func (u *RetrospectiveReviewUpsertOne) UpdateRetrospectiveID() *RetrospectiveReviewUpsertOne {
	return u.Update(func(s *RetrospectiveReviewUpsert) {
		s.UpdateRetrospectiveID()
	})
}

// SetRequesterID sets the "requester_id" field.
func (u *RetrospectiveReviewUpsertOne) SetRequesterID(v uuid.UUID) *RetrospectiveReviewUpsertOne {
	return u.Update(func(s *RetrospectiveReviewUpsert) {
		s.SetRequesterID(v)
	})
}

// UpdateRequesterID sets the "requester_id" field to the value that was provided on create.
func (u *RetrospectiveReviewUpsertOne) UpdateRequesterID() *RetrospectiveReviewUpsertOne {
	return u.Update(func(s *RetrospectiveReviewUpsert) {
		s.UpdateRequesterID()
	})
}

// SetReviewerID sets the "reviewer_id" field.
func (u *RetrospectiveReviewUpsertOne) SetReviewerID(v uuid.UUID) *RetrospectiveReviewUpsertOne {
	return u.Update(func(s *RetrospectiveReviewUpsert) {
		s.SetReviewerID(v)
	})
}

// UpdateReviewerID sets the "reviewer_id" field to the value that was provided on create.
func (u *RetrospectiveReviewUpsertOne) UpdateReviewerID() *RetrospectiveReviewUpsertOne {
	return u.Update(func(s *RetrospectiveReviewUpsert) {
		s.UpdateReviewerID()
	})
}

// SetState sets the "state" field.
func (u *RetrospectiveReviewUpsertOne) SetState(v retrospectivereview.State) *RetrospectiveReviewUpsertOne {
	return u.Update(func(s *RetrospectiveReviewUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *RetrospectiveReviewUpsertOne) UpdateState() *RetrospectiveReviewUpsertOne {
	return u.Update(func(s *RetrospectiveReviewUpsert) {
		s.UpdateState()
	})
}

// Exec executes the query.
func (u *RetrospectiveReviewUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RetrospectiveReviewCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RetrospectiveReviewUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RetrospectiveReviewUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: RetrospectiveReviewUpsertOne.ID is not supported by MySQL driver. Use RetrospectiveReviewUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RetrospectiveReviewUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RetrospectiveReviewCreateBulk is the builder for creating many RetrospectiveReview entities in bulk.
type RetrospectiveReviewCreateBulk struct {
	config
	err      error
	builders []*RetrospectiveReviewCreate
	conflict []sql.ConflictOption
}

// Save creates the RetrospectiveReview entities in the database.
func (rrcb *RetrospectiveReviewCreateBulk) Save(ctx context.Context) ([]*RetrospectiveReview, error) {
	if rrcb.err != nil {
		return nil, rrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rrcb.builders))
	nodes := make([]*RetrospectiveReview, len(rrcb.builders))
	mutators := make([]Mutator, len(rrcb.builders))
	for i := range rrcb.builders {
		func(i int, root context.Context) {
			builder := rrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RetrospectiveReviewMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rrcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rrcb *RetrospectiveReviewCreateBulk) SaveX(ctx context.Context) []*RetrospectiveReview {
	v, err := rrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rrcb *RetrospectiveReviewCreateBulk) Exec(ctx context.Context) error {
	_, err := rrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rrcb *RetrospectiveReviewCreateBulk) ExecX(ctx context.Context) {
	if err := rrcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RetrospectiveReview.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RetrospectiveReviewUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (rrcb *RetrospectiveReviewCreateBulk) OnConflict(opts ...sql.ConflictOption) *RetrospectiveReviewUpsertBulk {
	rrcb.conflict = opts
	return &RetrospectiveReviewUpsertBulk{
		create: rrcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RetrospectiveReview.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rrcb *RetrospectiveReviewCreateBulk) OnConflictColumns(columns ...string) *RetrospectiveReviewUpsertBulk {
	rrcb.conflict = append(rrcb.conflict, sql.ConflictColumns(columns...))
	return &RetrospectiveReviewUpsertBulk{
		create: rrcb,
	}
}

// RetrospectiveReviewUpsertBulk is the builder for "upsert"-ing
// a bulk of RetrospectiveReview nodes.
type RetrospectiveReviewUpsertBulk struct {
	create *RetrospectiveReviewCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.RetrospectiveReview.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(retrospectivereview.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RetrospectiveReviewUpsertBulk) UpdateNewValues() *RetrospectiveReviewUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(retrospectivereview.FieldID)
			}
			if _, exists := b.mutation.TenantID(); exists {
				s.SetIgnore(retrospectivereview.FieldTenantID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RetrospectiveReview.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RetrospectiveReviewUpsertBulk) Ignore() *RetrospectiveReviewUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RetrospectiveReviewUpsertBulk) DoNothing() *RetrospectiveReviewUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RetrospectiveReviewCreateBulk.OnConflict
// documentation for more info.
func (u *RetrospectiveReviewUpsertBulk) Update(set func(*RetrospectiveReviewUpsert)) *RetrospectiveReviewUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RetrospectiveReviewUpsert{UpdateSet: update})
	}))
	return u
}

// SetRetrospectiveID sets the "retrospective_id" field.
func (u *RetrospectiveReviewUpsertBulk) SetRetrospectiveID(v uuid.UUID) *RetrospectiveReviewUpsertBulk {
	return u.Update(func(s *RetrospectiveReviewUpsert) {
		s.SetRetrospectiveID(v)
	})
}

// UpdateRetrospectiveID sets the "retrospective_id" field to the value that was provided on create.
func (u *RetrospectiveReviewUpsertBulk) UpdateRetrospectiveID() *RetrospectiveReviewUpsertBulk {
	return u.Update(func(s *RetrospectiveReviewUpsert) {
		s.UpdateRetrospectiveID()
	})
}

// SetRequesterID sets the "requester_id" field.
func (u *RetrospectiveReviewUpsertBulk) SetRequesterID(v uuid.UUID) *RetrospectiveReviewUpsertBulk {
	return u.Update(func(s *RetrospectiveReviewUpsert) {
		s.SetRequesterID(v)
	})
}

// UpdateRequesterID sets the "requester_id" field to the value that was provided on create.
func (u *RetrospectiveReviewUpsertBulk) UpdateRequesterID() *RetrospectiveReviewUpsertBulk {
	return u.Update(func(s *RetrospectiveReviewUpsert) {
		s.UpdateRequesterID()
	})
}

// SetReviewerID sets the "reviewer_id" field.
func (u *RetrospectiveReviewUpsertBulk) SetReviewerID(v uuid.UUID) *RetrospectiveReviewUpsertBulk {
	return u.Update(func(s *RetrospectiveReviewUpsert) {
		s.SetReviewerID(v)
	})
}

// UpdateReviewerID sets the "reviewer_id" field to the value that was provided on create.
func (u *RetrospectiveReviewUpsertBulk) UpdateReviewerID() *RetrospectiveReviewUpsertBulk {
	return u.Update(func(s *RetrospectiveReviewUpsert) {
		s.UpdateReviewerID()
	})
}

// SetState sets the "state" field.
func (u *RetrospectiveReviewUpsertBulk) SetState(v retrospectivereview.State) *RetrospectiveReviewUpsertBulk {
	return u.Update(func(s *RetrospectiveReviewUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *RetrospectiveReviewUpsertBulk) UpdateState() *RetrospectiveReviewUpsertBulk {
	return u.Update(func(s *RetrospectiveReviewUpsert) {
		s.UpdateState()
	})
}

// Exec executes the query.
func (u *RetrospectiveReviewUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RetrospectiveReviewCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RetrospectiveReviewCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RetrospectiveReviewUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
