// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/retrospective"
	"github.com/rezible/rezible/ent/retrospectivecomment"
	"github.com/rezible/rezible/ent/retrospectivereview"
	"github.com/rezible/rezible/ent/user"
)

// RetrospectiveCommentUpdate is the builder for updating RetrospectiveComment entities.
type RetrospectiveCommentUpdate struct {
	config
	hooks     []Hook
	mutation  *RetrospectiveCommentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the RetrospectiveCommentUpdate builder.
func (rcu *RetrospectiveCommentUpdate) Where(ps ...predicate.RetrospectiveComment) *RetrospectiveCommentUpdate {
	rcu.mutation.Where(ps...)
	return rcu
}

// SetRetrospectiveID sets the "retrospective_id" field.
func (rcu *RetrospectiveCommentUpdate) SetRetrospectiveID(u uuid.UUID) *RetrospectiveCommentUpdate {
	rcu.mutation.SetRetrospectiveID(u)
	return rcu
}

// SetNillableRetrospectiveID sets the "retrospective_id" field if the given value is not nil.
func (rcu *RetrospectiveCommentUpdate) SetNillableRetrospectiveID(u *uuid.UUID) *RetrospectiveCommentUpdate {
	if u != nil {
		rcu.SetRetrospectiveID(*u)
	}
	return rcu
}

// SetUserID sets the "user_id" field.
func (rcu *RetrospectiveCommentUpdate) SetUserID(u uuid.UUID) *RetrospectiveCommentUpdate {
	rcu.mutation.SetUserID(u)
	return rcu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (rcu *RetrospectiveCommentUpdate) SetNillableUserID(u *uuid.UUID) *RetrospectiveCommentUpdate {
	if u != nil {
		rcu.SetUserID(*u)
	}
	return rcu
}

// SetRetrospectiveReviewID sets the "retrospective_review_id" field.
func (rcu *RetrospectiveCommentUpdate) SetRetrospectiveReviewID(u uuid.UUID) *RetrospectiveCommentUpdate {
	rcu.mutation.SetRetrospectiveReviewID(u)
	return rcu
}

// SetNillableRetrospectiveReviewID sets the "retrospective_review_id" field if the given value is not nil.
func (rcu *RetrospectiveCommentUpdate) SetNillableRetrospectiveReviewID(u *uuid.UUID) *RetrospectiveCommentUpdate {
	if u != nil {
		rcu.SetRetrospectiveReviewID(*u)
	}
	return rcu
}

// ClearRetrospectiveReviewID clears the value of the "retrospective_review_id" field.
func (rcu *RetrospectiveCommentUpdate) ClearRetrospectiveReviewID() *RetrospectiveCommentUpdate {
	rcu.mutation.ClearRetrospectiveReviewID()
	return rcu
}

// SetParentReplyID sets the "parent_reply_id" field.
func (rcu *RetrospectiveCommentUpdate) SetParentReplyID(u uuid.UUID) *RetrospectiveCommentUpdate {
	rcu.mutation.SetParentReplyID(u)
	return rcu
}

// SetNillableParentReplyID sets the "parent_reply_id" field if the given value is not nil.
func (rcu *RetrospectiveCommentUpdate) SetNillableParentReplyID(u *uuid.UUID) *RetrospectiveCommentUpdate {
	if u != nil {
		rcu.SetParentReplyID(*u)
	}
	return rcu
}

// ClearParentReplyID clears the value of the "parent_reply_id" field.
func (rcu *RetrospectiveCommentUpdate) ClearParentReplyID() *RetrospectiveCommentUpdate {
	rcu.mutation.ClearParentReplyID()
	return rcu
}

// SetContent sets the "content" field.
func (rcu *RetrospectiveCommentUpdate) SetContent(b []byte) *RetrospectiveCommentUpdate {
	rcu.mutation.SetContent(b)
	return rcu
}

// SetRetrospective sets the "retrospective" edge to the Retrospective entity.
func (rcu *RetrospectiveCommentUpdate) SetRetrospective(r *Retrospective) *RetrospectiveCommentUpdate {
	return rcu.SetRetrospectiveID(r.ID)
}

// SetUser sets the "user" edge to the User entity.
func (rcu *RetrospectiveCommentUpdate) SetUser(u *User) *RetrospectiveCommentUpdate {
	return rcu.SetUserID(u.ID)
}

// SetReviewID sets the "review" edge to the RetrospectiveReview entity by ID.
func (rcu *RetrospectiveCommentUpdate) SetReviewID(id uuid.UUID) *RetrospectiveCommentUpdate {
	rcu.mutation.SetReviewID(id)
	return rcu
}

// SetNillableReviewID sets the "review" edge to the RetrospectiveReview entity by ID if the given value is not nil.
func (rcu *RetrospectiveCommentUpdate) SetNillableReviewID(id *uuid.UUID) *RetrospectiveCommentUpdate {
	if id != nil {
		rcu = rcu.SetReviewID(*id)
	}
	return rcu
}

// SetReview sets the "review" edge to the RetrospectiveReview entity.
func (rcu *RetrospectiveCommentUpdate) SetReview(r *RetrospectiveReview) *RetrospectiveCommentUpdate {
	return rcu.SetReviewID(r.ID)
}

// SetParentID sets the "parent" edge to the RetrospectiveComment entity by ID.
func (rcu *RetrospectiveCommentUpdate) SetParentID(id uuid.UUID) *RetrospectiveCommentUpdate {
	rcu.mutation.SetParentID(id)
	return rcu
}

// SetNillableParentID sets the "parent" edge to the RetrospectiveComment entity by ID if the given value is not nil.
func (rcu *RetrospectiveCommentUpdate) SetNillableParentID(id *uuid.UUID) *RetrospectiveCommentUpdate {
	if id != nil {
		rcu = rcu.SetParentID(*id)
	}
	return rcu
}

// SetParent sets the "parent" edge to the RetrospectiveComment entity.
func (rcu *RetrospectiveCommentUpdate) SetParent(r *RetrospectiveComment) *RetrospectiveCommentUpdate {
	return rcu.SetParentID(r.ID)
}

// AddReplyIDs adds the "replies" edge to the RetrospectiveComment entity by IDs.
func (rcu *RetrospectiveCommentUpdate) AddReplyIDs(ids ...uuid.UUID) *RetrospectiveCommentUpdate {
	rcu.mutation.AddReplyIDs(ids...)
	return rcu
}

// AddReplies adds the "replies" edges to the RetrospectiveComment entity.
func (rcu *RetrospectiveCommentUpdate) AddReplies(r ...*RetrospectiveComment) *RetrospectiveCommentUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rcu.AddReplyIDs(ids...)
}

// Mutation returns the RetrospectiveCommentMutation object of the builder.
func (rcu *RetrospectiveCommentUpdate) Mutation() *RetrospectiveCommentMutation {
	return rcu.mutation
}

// ClearRetrospective clears the "retrospective" edge to the Retrospective entity.
func (rcu *RetrospectiveCommentUpdate) ClearRetrospective() *RetrospectiveCommentUpdate {
	rcu.mutation.ClearRetrospective()
	return rcu
}

// ClearUser clears the "user" edge to the User entity.
func (rcu *RetrospectiveCommentUpdate) ClearUser() *RetrospectiveCommentUpdate {
	rcu.mutation.ClearUser()
	return rcu
}

// ClearReview clears the "review" edge to the RetrospectiveReview entity.
func (rcu *RetrospectiveCommentUpdate) ClearReview() *RetrospectiveCommentUpdate {
	rcu.mutation.ClearReview()
	return rcu
}

// ClearParent clears the "parent" edge to the RetrospectiveComment entity.
func (rcu *RetrospectiveCommentUpdate) ClearParent() *RetrospectiveCommentUpdate {
	rcu.mutation.ClearParent()
	return rcu
}

// ClearReplies clears all "replies" edges to the RetrospectiveComment entity.
func (rcu *RetrospectiveCommentUpdate) ClearReplies() *RetrospectiveCommentUpdate {
	rcu.mutation.ClearReplies()
	return rcu
}

// RemoveReplyIDs removes the "replies" edge to RetrospectiveComment entities by IDs.
func (rcu *RetrospectiveCommentUpdate) RemoveReplyIDs(ids ...uuid.UUID) *RetrospectiveCommentUpdate {
	rcu.mutation.RemoveReplyIDs(ids...)
	return rcu
}

// RemoveReplies removes "replies" edges to RetrospectiveComment entities.
func (rcu *RetrospectiveCommentUpdate) RemoveReplies(r ...*RetrospectiveComment) *RetrospectiveCommentUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rcu.RemoveReplyIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rcu *RetrospectiveCommentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rcu.sqlSave, rcu.mutation, rcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rcu *RetrospectiveCommentUpdate) SaveX(ctx context.Context) int {
	affected, err := rcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rcu *RetrospectiveCommentUpdate) Exec(ctx context.Context) error {
	_, err := rcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcu *RetrospectiveCommentUpdate) ExecX(ctx context.Context) {
	if err := rcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rcu *RetrospectiveCommentUpdate) check() error {
	if rcu.mutation.TenantCleared() && len(rcu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "RetrospectiveComment.tenant"`)
	}
	if rcu.mutation.RetrospectiveCleared() && len(rcu.mutation.RetrospectiveIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "RetrospectiveComment.retrospective"`)
	}
	if rcu.mutation.UserCleared() && len(rcu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "RetrospectiveComment.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rcu *RetrospectiveCommentUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RetrospectiveCommentUpdate {
	rcu.modifiers = append(rcu.modifiers, modifiers...)
	return rcu
}

func (rcu *RetrospectiveCommentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(retrospectivecomment.Table, retrospectivecomment.Columns, sqlgraph.NewFieldSpec(retrospectivecomment.FieldID, field.TypeUUID))
	if ps := rcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rcu.mutation.Content(); ok {
		_spec.SetField(retrospectivecomment.FieldContent, field.TypeBytes, value)
	}
	if rcu.mutation.RetrospectiveCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospectivecomment.RetrospectiveTable,
			Columns: []string{retrospectivecomment.RetrospectiveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospective.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.RetrospectiveIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospectivecomment.RetrospectiveTable,
			Columns: []string{retrospectivecomment.RetrospectiveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospective.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospectivecomment.UserTable,
			Columns: []string{retrospectivecomment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospectivecomment.UserTable,
			Columns: []string{retrospectivecomment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcu.mutation.ReviewCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospectivecomment.ReviewTable,
			Columns: []string{retrospectivecomment.ReviewColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivereview.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.ReviewIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospectivecomment.ReviewTable,
			Columns: []string{retrospectivecomment.ReviewColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivereview.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   retrospectivecomment.ParentTable,
			Columns: []string{retrospectivecomment.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivecomment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   retrospectivecomment.ParentTable,
			Columns: []string{retrospectivecomment.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivecomment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcu.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   retrospectivecomment.RepliesTable,
			Columns: []string{retrospectivecomment.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivecomment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.RemovedRepliesIDs(); len(nodes) > 0 && !rcu.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   retrospectivecomment.RepliesTable,
			Columns: []string{retrospectivecomment.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivecomment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.RepliesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   retrospectivecomment.RepliesTable,
			Columns: []string{retrospectivecomment.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivecomment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(rcu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, rcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{retrospectivecomment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rcu.mutation.done = true
	return n, nil
}

// RetrospectiveCommentUpdateOne is the builder for updating a single RetrospectiveComment entity.
type RetrospectiveCommentUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *RetrospectiveCommentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetRetrospectiveID sets the "retrospective_id" field.
func (rcuo *RetrospectiveCommentUpdateOne) SetRetrospectiveID(u uuid.UUID) *RetrospectiveCommentUpdateOne {
	rcuo.mutation.SetRetrospectiveID(u)
	return rcuo
}

// SetNillableRetrospectiveID sets the "retrospective_id" field if the given value is not nil.
func (rcuo *RetrospectiveCommentUpdateOne) SetNillableRetrospectiveID(u *uuid.UUID) *RetrospectiveCommentUpdateOne {
	if u != nil {
		rcuo.SetRetrospectiveID(*u)
	}
	return rcuo
}

// SetUserID sets the "user_id" field.
func (rcuo *RetrospectiveCommentUpdateOne) SetUserID(u uuid.UUID) *RetrospectiveCommentUpdateOne {
	rcuo.mutation.SetUserID(u)
	return rcuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (rcuo *RetrospectiveCommentUpdateOne) SetNillableUserID(u *uuid.UUID) *RetrospectiveCommentUpdateOne {
	if u != nil {
		rcuo.SetUserID(*u)
	}
	return rcuo
}

// SetRetrospectiveReviewID sets the "retrospective_review_id" field.
func (rcuo *RetrospectiveCommentUpdateOne) SetRetrospectiveReviewID(u uuid.UUID) *RetrospectiveCommentUpdateOne {
	rcuo.mutation.SetRetrospectiveReviewID(u)
	return rcuo
}

// SetNillableRetrospectiveReviewID sets the "retrospective_review_id" field if the given value is not nil.
func (rcuo *RetrospectiveCommentUpdateOne) SetNillableRetrospectiveReviewID(u *uuid.UUID) *RetrospectiveCommentUpdateOne {
	if u != nil {
		rcuo.SetRetrospectiveReviewID(*u)
	}
	return rcuo
}

// ClearRetrospectiveReviewID clears the value of the "retrospective_review_id" field.
func (rcuo *RetrospectiveCommentUpdateOne) ClearRetrospectiveReviewID() *RetrospectiveCommentUpdateOne {
	rcuo.mutation.ClearRetrospectiveReviewID()
	return rcuo
}

// SetParentReplyID sets the "parent_reply_id" field.
func (rcuo *RetrospectiveCommentUpdateOne) SetParentReplyID(u uuid.UUID) *RetrospectiveCommentUpdateOne {
	rcuo.mutation.SetParentReplyID(u)
	return rcuo
}

// SetNillableParentReplyID sets the "parent_reply_id" field if the given value is not nil.
func (rcuo *RetrospectiveCommentUpdateOne) SetNillableParentReplyID(u *uuid.UUID) *RetrospectiveCommentUpdateOne {
	if u != nil {
		rcuo.SetParentReplyID(*u)
	}
	return rcuo
}

// ClearParentReplyID clears the value of the "parent_reply_id" field.
func (rcuo *RetrospectiveCommentUpdateOne) ClearParentReplyID() *RetrospectiveCommentUpdateOne {
	rcuo.mutation.ClearParentReplyID()
	return rcuo
}

// SetContent sets the "content" field.
func (rcuo *RetrospectiveCommentUpdateOne) SetContent(b []byte) *RetrospectiveCommentUpdateOne {
	rcuo.mutation.SetContent(b)
	return rcuo
}

// SetRetrospective sets the "retrospective" edge to the Retrospective entity.
func (rcuo *RetrospectiveCommentUpdateOne) SetRetrospective(r *Retrospective) *RetrospectiveCommentUpdateOne {
	return rcuo.SetRetrospectiveID(r.ID)
}

// SetUser sets the "user" edge to the User entity.
func (rcuo *RetrospectiveCommentUpdateOne) SetUser(u *User) *RetrospectiveCommentUpdateOne {
	return rcuo.SetUserID(u.ID)
}

// SetReviewID sets the "review" edge to the RetrospectiveReview entity by ID.
func (rcuo *RetrospectiveCommentUpdateOne) SetReviewID(id uuid.UUID) *RetrospectiveCommentUpdateOne {
	rcuo.mutation.SetReviewID(id)
	return rcuo
}

// SetNillableReviewID sets the "review" edge to the RetrospectiveReview entity by ID if the given value is not nil.
func (rcuo *RetrospectiveCommentUpdateOne) SetNillableReviewID(id *uuid.UUID) *RetrospectiveCommentUpdateOne {
	if id != nil {
		rcuo = rcuo.SetReviewID(*id)
	}
	return rcuo
}

// SetReview sets the "review" edge to the RetrospectiveReview entity.
func (rcuo *RetrospectiveCommentUpdateOne) SetReview(r *RetrospectiveReview) *RetrospectiveCommentUpdateOne {
	return rcuo.SetReviewID(r.ID)
}

// SetParentID sets the "parent" edge to the RetrospectiveComment entity by ID.
func (rcuo *RetrospectiveCommentUpdateOne) SetParentID(id uuid.UUID) *RetrospectiveCommentUpdateOne {
	rcuo.mutation.SetParentID(id)
	return rcuo
}

// SetNillableParentID sets the "parent" edge to the RetrospectiveComment entity by ID if the given value is not nil.
func (rcuo *RetrospectiveCommentUpdateOne) SetNillableParentID(id *uuid.UUID) *RetrospectiveCommentUpdateOne {
	if id != nil {
		rcuo = rcuo.SetParentID(*id)
	}
	return rcuo
}

// SetParent sets the "parent" edge to the RetrospectiveComment entity.
func (rcuo *RetrospectiveCommentUpdateOne) SetParent(r *RetrospectiveComment) *RetrospectiveCommentUpdateOne {
	return rcuo.SetParentID(r.ID)
}

// AddReplyIDs adds the "replies" edge to the RetrospectiveComment entity by IDs.
func (rcuo *RetrospectiveCommentUpdateOne) AddReplyIDs(ids ...uuid.UUID) *RetrospectiveCommentUpdateOne {
	rcuo.mutation.AddReplyIDs(ids...)
	return rcuo
}

// AddReplies adds the "replies" edges to the RetrospectiveComment entity.
func (rcuo *RetrospectiveCommentUpdateOne) AddReplies(r ...*RetrospectiveComment) *RetrospectiveCommentUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rcuo.AddReplyIDs(ids...)
}

// Mutation returns the RetrospectiveCommentMutation object of the builder.
func (rcuo *RetrospectiveCommentUpdateOne) Mutation() *RetrospectiveCommentMutation {
	return rcuo.mutation
}

// ClearRetrospective clears the "retrospective" edge to the Retrospective entity.
func (rcuo *RetrospectiveCommentUpdateOne) ClearRetrospective() *RetrospectiveCommentUpdateOne {
	rcuo.mutation.ClearRetrospective()
	return rcuo
}

// ClearUser clears the "user" edge to the User entity.
func (rcuo *RetrospectiveCommentUpdateOne) ClearUser() *RetrospectiveCommentUpdateOne {
	rcuo.mutation.ClearUser()
	return rcuo
}

// ClearReview clears the "review" edge to the RetrospectiveReview entity.
func (rcuo *RetrospectiveCommentUpdateOne) ClearReview() *RetrospectiveCommentUpdateOne {
	rcuo.mutation.ClearReview()
	return rcuo
}

// ClearParent clears the "parent" edge to the RetrospectiveComment entity.
func (rcuo *RetrospectiveCommentUpdateOne) ClearParent() *RetrospectiveCommentUpdateOne {
	rcuo.mutation.ClearParent()
	return rcuo
}

// ClearReplies clears all "replies" edges to the RetrospectiveComment entity.
func (rcuo *RetrospectiveCommentUpdateOne) ClearReplies() *RetrospectiveCommentUpdateOne {
	rcuo.mutation.ClearReplies()
	return rcuo
}

// RemoveReplyIDs removes the "replies" edge to RetrospectiveComment entities by IDs.
func (rcuo *RetrospectiveCommentUpdateOne) RemoveReplyIDs(ids ...uuid.UUID) *RetrospectiveCommentUpdateOne {
	rcuo.mutation.RemoveReplyIDs(ids...)
	return rcuo
}

// RemoveReplies removes "replies" edges to RetrospectiveComment entities.
func (rcuo *RetrospectiveCommentUpdateOne) RemoveReplies(r ...*RetrospectiveComment) *RetrospectiveCommentUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rcuo.RemoveReplyIDs(ids...)
}

// Where appends a list predicates to the RetrospectiveCommentUpdate builder.
func (rcuo *RetrospectiveCommentUpdateOne) Where(ps ...predicate.RetrospectiveComment) *RetrospectiveCommentUpdateOne {
	rcuo.mutation.Where(ps...)
	return rcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rcuo *RetrospectiveCommentUpdateOne) Select(field string, fields ...string) *RetrospectiveCommentUpdateOne {
	rcuo.fields = append([]string{field}, fields...)
	return rcuo
}

// Save executes the query and returns the updated RetrospectiveComment entity.
func (rcuo *RetrospectiveCommentUpdateOne) Save(ctx context.Context) (*RetrospectiveComment, error) {
	return withHooks(ctx, rcuo.sqlSave, rcuo.mutation, rcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rcuo *RetrospectiveCommentUpdateOne) SaveX(ctx context.Context) *RetrospectiveComment {
	node, err := rcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rcuo *RetrospectiveCommentUpdateOne) Exec(ctx context.Context) error {
	_, err := rcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcuo *RetrospectiveCommentUpdateOne) ExecX(ctx context.Context) {
	if err := rcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rcuo *RetrospectiveCommentUpdateOne) check() error {
	if rcuo.mutation.TenantCleared() && len(rcuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "RetrospectiveComment.tenant"`)
	}
	if rcuo.mutation.RetrospectiveCleared() && len(rcuo.mutation.RetrospectiveIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "RetrospectiveComment.retrospective"`)
	}
	if rcuo.mutation.UserCleared() && len(rcuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "RetrospectiveComment.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rcuo *RetrospectiveCommentUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RetrospectiveCommentUpdateOne {
	rcuo.modifiers = append(rcuo.modifiers, modifiers...)
	return rcuo
}

func (rcuo *RetrospectiveCommentUpdateOne) sqlSave(ctx context.Context) (_node *RetrospectiveComment, err error) {
	if err := rcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(retrospectivecomment.Table, retrospectivecomment.Columns, sqlgraph.NewFieldSpec(retrospectivecomment.FieldID, field.TypeUUID))
	id, ok := rcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RetrospectiveComment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, retrospectivecomment.FieldID)
		for _, f := range fields {
			if !retrospectivecomment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != retrospectivecomment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rcuo.mutation.Content(); ok {
		_spec.SetField(retrospectivecomment.FieldContent, field.TypeBytes, value)
	}
	if rcuo.mutation.RetrospectiveCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospectivecomment.RetrospectiveTable,
			Columns: []string{retrospectivecomment.RetrospectiveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospective.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.RetrospectiveIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospectivecomment.RetrospectiveTable,
			Columns: []string{retrospectivecomment.RetrospectiveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospective.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospectivecomment.UserTable,
			Columns: []string{retrospectivecomment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospectivecomment.UserTable,
			Columns: []string{retrospectivecomment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcuo.mutation.ReviewCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospectivecomment.ReviewTable,
			Columns: []string{retrospectivecomment.ReviewColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivereview.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.ReviewIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospectivecomment.ReviewTable,
			Columns: []string{retrospectivecomment.ReviewColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivereview.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   retrospectivecomment.ParentTable,
			Columns: []string{retrospectivecomment.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivecomment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   retrospectivecomment.ParentTable,
			Columns: []string{retrospectivecomment.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivecomment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcuo.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   retrospectivecomment.RepliesTable,
			Columns: []string{retrospectivecomment.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivecomment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.RemovedRepliesIDs(); len(nodes) > 0 && !rcuo.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   retrospectivecomment.RepliesTable,
			Columns: []string{retrospectivecomment.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivecomment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.RepliesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   retrospectivecomment.RepliesTable,
			Columns: []string{retrospectivecomment.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivecomment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(rcuo.modifiers...)
	_node = &RetrospectiveComment{config: rcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{retrospectivecomment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rcuo.mutation.done = true
	return _node, nil
}
