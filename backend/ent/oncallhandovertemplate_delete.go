// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/twohundreds/rezible/ent/oncallhandovertemplate"
	"github.com/twohundreds/rezible/ent/predicate"
)

// OncallHandoverTemplateDelete is the builder for deleting a OncallHandoverTemplate entity.
type OncallHandoverTemplateDelete struct {
	config
	hooks    []Hook
	mutation *OncallHandoverTemplateMutation
}

// Where appends a list predicates to the OncallHandoverTemplateDelete builder.
func (ohtd *OncallHandoverTemplateDelete) Where(ps ...predicate.OncallHandoverTemplate) *OncallHandoverTemplateDelete {
	ohtd.mutation.Where(ps...)
	return ohtd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ohtd *OncallHandoverTemplateDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ohtd.sqlExec, ohtd.mutation, ohtd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ohtd *OncallHandoverTemplateDelete) ExecX(ctx context.Context) int {
	n, err := ohtd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ohtd *OncallHandoverTemplateDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(oncallhandovertemplate.Table, sqlgraph.NewFieldSpec(oncallhandovertemplate.FieldID, field.TypeUUID))
	if ps := ohtd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ohtd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ohtd.mutation.done = true
	return affected, err
}

// OncallHandoverTemplateDeleteOne is the builder for deleting a single OncallHandoverTemplate entity.
type OncallHandoverTemplateDeleteOne struct {
	ohtd *OncallHandoverTemplateDelete
}

// Where appends a list predicates to the OncallHandoverTemplateDelete builder.
func (ohtdo *OncallHandoverTemplateDeleteOne) Where(ps ...predicate.OncallHandoverTemplate) *OncallHandoverTemplateDeleteOne {
	ohtdo.ohtd.mutation.Where(ps...)
	return ohtdo
}

// Exec executes the deletion query.
func (ohtdo *OncallHandoverTemplateDeleteOne) Exec(ctx context.Context) error {
	n, err := ohtdo.ohtd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{oncallhandovertemplate.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ohtdo *OncallHandoverTemplateDeleteOne) ExecX(ctx context.Context) {
	if err := ohtdo.Exec(ctx); err != nil {
		panic(err)
	}
}
