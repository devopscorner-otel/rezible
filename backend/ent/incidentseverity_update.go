// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/twohundreds/rezible/ent/incident"
	"github.com/twohundreds/rezible/ent/incidentdebriefquestion"
	"github.com/twohundreds/rezible/ent/incidentseverity"
	"github.com/twohundreds/rezible/ent/predicate"
)

// IncidentSeverityUpdate is the builder for updating IncidentSeverity entities.
type IncidentSeverityUpdate struct {
	config
	hooks     []Hook
	mutation  *IncidentSeverityMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the IncidentSeverityUpdate builder.
func (isu *IncidentSeverityUpdate) Where(ps ...predicate.IncidentSeverity) *IncidentSeverityUpdate {
	isu.mutation.Where(ps...)
	return isu
}

// SetArchiveTime sets the "archive_time" field.
func (isu *IncidentSeverityUpdate) SetArchiveTime(t time.Time) *IncidentSeverityUpdate {
	isu.mutation.SetArchiveTime(t)
	return isu
}

// SetNillableArchiveTime sets the "archive_time" field if the given value is not nil.
func (isu *IncidentSeverityUpdate) SetNillableArchiveTime(t *time.Time) *IncidentSeverityUpdate {
	if t != nil {
		isu.SetArchiveTime(*t)
	}
	return isu
}

// ClearArchiveTime clears the value of the "archive_time" field.
func (isu *IncidentSeverityUpdate) ClearArchiveTime() *IncidentSeverityUpdate {
	isu.mutation.ClearArchiveTime()
	return isu
}

// SetName sets the "name" field.
func (isu *IncidentSeverityUpdate) SetName(s string) *IncidentSeverityUpdate {
	isu.mutation.SetName(s)
	return isu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (isu *IncidentSeverityUpdate) SetNillableName(s *string) *IncidentSeverityUpdate {
	if s != nil {
		isu.SetName(*s)
	}
	return isu
}

// SetColor sets the "color" field.
func (isu *IncidentSeverityUpdate) SetColor(s string) *IncidentSeverityUpdate {
	isu.mutation.SetColor(s)
	return isu
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (isu *IncidentSeverityUpdate) SetNillableColor(s *string) *IncidentSeverityUpdate {
	if s != nil {
		isu.SetColor(*s)
	}
	return isu
}

// ClearColor clears the value of the "color" field.
func (isu *IncidentSeverityUpdate) ClearColor() *IncidentSeverityUpdate {
	isu.mutation.ClearColor()
	return isu
}

// SetDescription sets the "description" field.
func (isu *IncidentSeverityUpdate) SetDescription(s string) *IncidentSeverityUpdate {
	isu.mutation.SetDescription(s)
	return isu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (isu *IncidentSeverityUpdate) SetNillableDescription(s *string) *IncidentSeverityUpdate {
	if s != nil {
		isu.SetDescription(*s)
	}
	return isu
}

// ClearDescription clears the value of the "description" field.
func (isu *IncidentSeverityUpdate) ClearDescription() *IncidentSeverityUpdate {
	isu.mutation.ClearDescription()
	return isu
}

// AddIncidentIDs adds the "incidents" edge to the Incident entity by IDs.
func (isu *IncidentSeverityUpdate) AddIncidentIDs(ids ...uuid.UUID) *IncidentSeverityUpdate {
	isu.mutation.AddIncidentIDs(ids...)
	return isu
}

// AddIncidents adds the "incidents" edges to the Incident entity.
func (isu *IncidentSeverityUpdate) AddIncidents(i ...*Incident) *IncidentSeverityUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return isu.AddIncidentIDs(ids...)
}

// AddDebriefQuestionIDs adds the "debrief_questions" edge to the IncidentDebriefQuestion entity by IDs.
func (isu *IncidentSeverityUpdate) AddDebriefQuestionIDs(ids ...uuid.UUID) *IncidentSeverityUpdate {
	isu.mutation.AddDebriefQuestionIDs(ids...)
	return isu
}

// AddDebriefQuestions adds the "debrief_questions" edges to the IncidentDebriefQuestion entity.
func (isu *IncidentSeverityUpdate) AddDebriefQuestions(i ...*IncidentDebriefQuestion) *IncidentSeverityUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return isu.AddDebriefQuestionIDs(ids...)
}

// Mutation returns the IncidentSeverityMutation object of the builder.
func (isu *IncidentSeverityUpdate) Mutation() *IncidentSeverityMutation {
	return isu.mutation
}

// ClearIncidents clears all "incidents" edges to the Incident entity.
func (isu *IncidentSeverityUpdate) ClearIncidents() *IncidentSeverityUpdate {
	isu.mutation.ClearIncidents()
	return isu
}

// RemoveIncidentIDs removes the "incidents" edge to Incident entities by IDs.
func (isu *IncidentSeverityUpdate) RemoveIncidentIDs(ids ...uuid.UUID) *IncidentSeverityUpdate {
	isu.mutation.RemoveIncidentIDs(ids...)
	return isu
}

// RemoveIncidents removes "incidents" edges to Incident entities.
func (isu *IncidentSeverityUpdate) RemoveIncidents(i ...*Incident) *IncidentSeverityUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return isu.RemoveIncidentIDs(ids...)
}

// ClearDebriefQuestions clears all "debrief_questions" edges to the IncidentDebriefQuestion entity.
func (isu *IncidentSeverityUpdate) ClearDebriefQuestions() *IncidentSeverityUpdate {
	isu.mutation.ClearDebriefQuestions()
	return isu
}

// RemoveDebriefQuestionIDs removes the "debrief_questions" edge to IncidentDebriefQuestion entities by IDs.
func (isu *IncidentSeverityUpdate) RemoveDebriefQuestionIDs(ids ...uuid.UUID) *IncidentSeverityUpdate {
	isu.mutation.RemoveDebriefQuestionIDs(ids...)
	return isu
}

// RemoveDebriefQuestions removes "debrief_questions" edges to IncidentDebriefQuestion entities.
func (isu *IncidentSeverityUpdate) RemoveDebriefQuestions(i ...*IncidentDebriefQuestion) *IncidentSeverityUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return isu.RemoveDebriefQuestionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (isu *IncidentSeverityUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, isu.sqlSave, isu.mutation, isu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (isu *IncidentSeverityUpdate) SaveX(ctx context.Context) int {
	affected, err := isu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (isu *IncidentSeverityUpdate) Exec(ctx context.Context) error {
	_, err := isu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (isu *IncidentSeverityUpdate) ExecX(ctx context.Context) {
	if err := isu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (isu *IncidentSeverityUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *IncidentSeverityUpdate {
	isu.modifiers = append(isu.modifiers, modifiers...)
	return isu
}

func (isu *IncidentSeverityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(incidentseverity.Table, incidentseverity.Columns, sqlgraph.NewFieldSpec(incidentseverity.FieldID, field.TypeUUID))
	if ps := isu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := isu.mutation.ArchiveTime(); ok {
		_spec.SetField(incidentseverity.FieldArchiveTime, field.TypeTime, value)
	}
	if isu.mutation.ArchiveTimeCleared() {
		_spec.ClearField(incidentseverity.FieldArchiveTime, field.TypeTime)
	}
	if value, ok := isu.mutation.Name(); ok {
		_spec.SetField(incidentseverity.FieldName, field.TypeString, value)
	}
	if value, ok := isu.mutation.Color(); ok {
		_spec.SetField(incidentseverity.FieldColor, field.TypeString, value)
	}
	if isu.mutation.ColorCleared() {
		_spec.ClearField(incidentseverity.FieldColor, field.TypeString)
	}
	if value, ok := isu.mutation.Description(); ok {
		_spec.SetField(incidentseverity.FieldDescription, field.TypeString, value)
	}
	if isu.mutation.DescriptionCleared() {
		_spec.ClearField(incidentseverity.FieldDescription, field.TypeString)
	}
	if isu.mutation.IncidentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   incidentseverity.IncidentsTable,
			Columns: []string{incidentseverity.IncidentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := isu.mutation.RemovedIncidentsIDs(); len(nodes) > 0 && !isu.mutation.IncidentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   incidentseverity.IncidentsTable,
			Columns: []string{incidentseverity.IncidentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := isu.mutation.IncidentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   incidentseverity.IncidentsTable,
			Columns: []string{incidentseverity.IncidentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if isu.mutation.DebriefQuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   incidentseverity.DebriefQuestionsTable,
			Columns: incidentseverity.DebriefQuestionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentdebriefquestion.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := isu.mutation.RemovedDebriefQuestionsIDs(); len(nodes) > 0 && !isu.mutation.DebriefQuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   incidentseverity.DebriefQuestionsTable,
			Columns: incidentseverity.DebriefQuestionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentdebriefquestion.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := isu.mutation.DebriefQuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   incidentseverity.DebriefQuestionsTable,
			Columns: incidentseverity.DebriefQuestionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentdebriefquestion.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(isu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, isu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{incidentseverity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	isu.mutation.done = true
	return n, nil
}

// IncidentSeverityUpdateOne is the builder for updating a single IncidentSeverity entity.
type IncidentSeverityUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *IncidentSeverityMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetArchiveTime sets the "archive_time" field.
func (isuo *IncidentSeverityUpdateOne) SetArchiveTime(t time.Time) *IncidentSeverityUpdateOne {
	isuo.mutation.SetArchiveTime(t)
	return isuo
}

// SetNillableArchiveTime sets the "archive_time" field if the given value is not nil.
func (isuo *IncidentSeverityUpdateOne) SetNillableArchiveTime(t *time.Time) *IncidentSeverityUpdateOne {
	if t != nil {
		isuo.SetArchiveTime(*t)
	}
	return isuo
}

// ClearArchiveTime clears the value of the "archive_time" field.
func (isuo *IncidentSeverityUpdateOne) ClearArchiveTime() *IncidentSeverityUpdateOne {
	isuo.mutation.ClearArchiveTime()
	return isuo
}

// SetName sets the "name" field.
func (isuo *IncidentSeverityUpdateOne) SetName(s string) *IncidentSeverityUpdateOne {
	isuo.mutation.SetName(s)
	return isuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (isuo *IncidentSeverityUpdateOne) SetNillableName(s *string) *IncidentSeverityUpdateOne {
	if s != nil {
		isuo.SetName(*s)
	}
	return isuo
}

// SetColor sets the "color" field.
func (isuo *IncidentSeverityUpdateOne) SetColor(s string) *IncidentSeverityUpdateOne {
	isuo.mutation.SetColor(s)
	return isuo
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (isuo *IncidentSeverityUpdateOne) SetNillableColor(s *string) *IncidentSeverityUpdateOne {
	if s != nil {
		isuo.SetColor(*s)
	}
	return isuo
}

// ClearColor clears the value of the "color" field.
func (isuo *IncidentSeverityUpdateOne) ClearColor() *IncidentSeverityUpdateOne {
	isuo.mutation.ClearColor()
	return isuo
}

// SetDescription sets the "description" field.
func (isuo *IncidentSeverityUpdateOne) SetDescription(s string) *IncidentSeverityUpdateOne {
	isuo.mutation.SetDescription(s)
	return isuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (isuo *IncidentSeverityUpdateOne) SetNillableDescription(s *string) *IncidentSeverityUpdateOne {
	if s != nil {
		isuo.SetDescription(*s)
	}
	return isuo
}

// ClearDescription clears the value of the "description" field.
func (isuo *IncidentSeverityUpdateOne) ClearDescription() *IncidentSeverityUpdateOne {
	isuo.mutation.ClearDescription()
	return isuo
}

// AddIncidentIDs adds the "incidents" edge to the Incident entity by IDs.
func (isuo *IncidentSeverityUpdateOne) AddIncidentIDs(ids ...uuid.UUID) *IncidentSeverityUpdateOne {
	isuo.mutation.AddIncidentIDs(ids...)
	return isuo
}

// AddIncidents adds the "incidents" edges to the Incident entity.
func (isuo *IncidentSeverityUpdateOne) AddIncidents(i ...*Incident) *IncidentSeverityUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return isuo.AddIncidentIDs(ids...)
}

// AddDebriefQuestionIDs adds the "debrief_questions" edge to the IncidentDebriefQuestion entity by IDs.
func (isuo *IncidentSeverityUpdateOne) AddDebriefQuestionIDs(ids ...uuid.UUID) *IncidentSeverityUpdateOne {
	isuo.mutation.AddDebriefQuestionIDs(ids...)
	return isuo
}

// AddDebriefQuestions adds the "debrief_questions" edges to the IncidentDebriefQuestion entity.
func (isuo *IncidentSeverityUpdateOne) AddDebriefQuestions(i ...*IncidentDebriefQuestion) *IncidentSeverityUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return isuo.AddDebriefQuestionIDs(ids...)
}

// Mutation returns the IncidentSeverityMutation object of the builder.
func (isuo *IncidentSeverityUpdateOne) Mutation() *IncidentSeverityMutation {
	return isuo.mutation
}

// ClearIncidents clears all "incidents" edges to the Incident entity.
func (isuo *IncidentSeverityUpdateOne) ClearIncidents() *IncidentSeverityUpdateOne {
	isuo.mutation.ClearIncidents()
	return isuo
}

// RemoveIncidentIDs removes the "incidents" edge to Incident entities by IDs.
func (isuo *IncidentSeverityUpdateOne) RemoveIncidentIDs(ids ...uuid.UUID) *IncidentSeverityUpdateOne {
	isuo.mutation.RemoveIncidentIDs(ids...)
	return isuo
}

// RemoveIncidents removes "incidents" edges to Incident entities.
func (isuo *IncidentSeverityUpdateOne) RemoveIncidents(i ...*Incident) *IncidentSeverityUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return isuo.RemoveIncidentIDs(ids...)
}

// ClearDebriefQuestions clears all "debrief_questions" edges to the IncidentDebriefQuestion entity.
func (isuo *IncidentSeverityUpdateOne) ClearDebriefQuestions() *IncidentSeverityUpdateOne {
	isuo.mutation.ClearDebriefQuestions()
	return isuo
}

// RemoveDebriefQuestionIDs removes the "debrief_questions" edge to IncidentDebriefQuestion entities by IDs.
func (isuo *IncidentSeverityUpdateOne) RemoveDebriefQuestionIDs(ids ...uuid.UUID) *IncidentSeverityUpdateOne {
	isuo.mutation.RemoveDebriefQuestionIDs(ids...)
	return isuo
}

// RemoveDebriefQuestions removes "debrief_questions" edges to IncidentDebriefQuestion entities.
func (isuo *IncidentSeverityUpdateOne) RemoveDebriefQuestions(i ...*IncidentDebriefQuestion) *IncidentSeverityUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return isuo.RemoveDebriefQuestionIDs(ids...)
}

// Where appends a list predicates to the IncidentSeverityUpdate builder.
func (isuo *IncidentSeverityUpdateOne) Where(ps ...predicate.IncidentSeverity) *IncidentSeverityUpdateOne {
	isuo.mutation.Where(ps...)
	return isuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (isuo *IncidentSeverityUpdateOne) Select(field string, fields ...string) *IncidentSeverityUpdateOne {
	isuo.fields = append([]string{field}, fields...)
	return isuo
}

// Save executes the query and returns the updated IncidentSeverity entity.
func (isuo *IncidentSeverityUpdateOne) Save(ctx context.Context) (*IncidentSeverity, error) {
	return withHooks(ctx, isuo.sqlSave, isuo.mutation, isuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (isuo *IncidentSeverityUpdateOne) SaveX(ctx context.Context) *IncidentSeverity {
	node, err := isuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (isuo *IncidentSeverityUpdateOne) Exec(ctx context.Context) error {
	_, err := isuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (isuo *IncidentSeverityUpdateOne) ExecX(ctx context.Context) {
	if err := isuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (isuo *IncidentSeverityUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *IncidentSeverityUpdateOne {
	isuo.modifiers = append(isuo.modifiers, modifiers...)
	return isuo
}

func (isuo *IncidentSeverityUpdateOne) sqlSave(ctx context.Context) (_node *IncidentSeverity, err error) {
	_spec := sqlgraph.NewUpdateSpec(incidentseverity.Table, incidentseverity.Columns, sqlgraph.NewFieldSpec(incidentseverity.FieldID, field.TypeUUID))
	id, ok := isuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "IncidentSeverity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := isuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, incidentseverity.FieldID)
		for _, f := range fields {
			if !incidentseverity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != incidentseverity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := isuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := isuo.mutation.ArchiveTime(); ok {
		_spec.SetField(incidentseverity.FieldArchiveTime, field.TypeTime, value)
	}
	if isuo.mutation.ArchiveTimeCleared() {
		_spec.ClearField(incidentseverity.FieldArchiveTime, field.TypeTime)
	}
	if value, ok := isuo.mutation.Name(); ok {
		_spec.SetField(incidentseverity.FieldName, field.TypeString, value)
	}
	if value, ok := isuo.mutation.Color(); ok {
		_spec.SetField(incidentseverity.FieldColor, field.TypeString, value)
	}
	if isuo.mutation.ColorCleared() {
		_spec.ClearField(incidentseverity.FieldColor, field.TypeString)
	}
	if value, ok := isuo.mutation.Description(); ok {
		_spec.SetField(incidentseverity.FieldDescription, field.TypeString, value)
	}
	if isuo.mutation.DescriptionCleared() {
		_spec.ClearField(incidentseverity.FieldDescription, field.TypeString)
	}
	if isuo.mutation.IncidentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   incidentseverity.IncidentsTable,
			Columns: []string{incidentseverity.IncidentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := isuo.mutation.RemovedIncidentsIDs(); len(nodes) > 0 && !isuo.mutation.IncidentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   incidentseverity.IncidentsTable,
			Columns: []string{incidentseverity.IncidentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := isuo.mutation.IncidentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   incidentseverity.IncidentsTable,
			Columns: []string{incidentseverity.IncidentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if isuo.mutation.DebriefQuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   incidentseverity.DebriefQuestionsTable,
			Columns: incidentseverity.DebriefQuestionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentdebriefquestion.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := isuo.mutation.RemovedDebriefQuestionsIDs(); len(nodes) > 0 && !isuo.mutation.DebriefQuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   incidentseverity.DebriefQuestionsTable,
			Columns: incidentseverity.DebriefQuestionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentdebriefquestion.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := isuo.mutation.DebriefQuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   incidentseverity.DebriefQuestionsTable,
			Columns: incidentseverity.DebriefQuestionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentdebriefquestion.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(isuo.modifiers...)
	_node = &IncidentSeverity{config: isuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, isuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{incidentseverity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	isuo.mutation.done = true
	return _node, nil
}
