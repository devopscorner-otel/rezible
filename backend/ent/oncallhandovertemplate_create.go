// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/oncallhandovertemplate"
	"github.com/rezible/rezible/ent/oncallroster"
)

// OncallHandoverTemplateCreate is the builder for creating a OncallHandoverTemplate entity.
type OncallHandoverTemplateCreate struct {
	config
	mutation *OncallHandoverTemplateMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ohtc *OncallHandoverTemplateCreate) SetCreatedAt(t time.Time) *OncallHandoverTemplateCreate {
	ohtc.mutation.SetCreatedAt(t)
	return ohtc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ohtc *OncallHandoverTemplateCreate) SetNillableCreatedAt(t *time.Time) *OncallHandoverTemplateCreate {
	if t != nil {
		ohtc.SetCreatedAt(*t)
	}
	return ohtc
}

// SetUpdatedAt sets the "updated_at" field.
func (ohtc *OncallHandoverTemplateCreate) SetUpdatedAt(t time.Time) *OncallHandoverTemplateCreate {
	ohtc.mutation.SetUpdatedAt(t)
	return ohtc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ohtc *OncallHandoverTemplateCreate) SetNillableUpdatedAt(t *time.Time) *OncallHandoverTemplateCreate {
	if t != nil {
		ohtc.SetUpdatedAt(*t)
	}
	return ohtc
}

// SetContents sets the "contents" field.
func (ohtc *OncallHandoverTemplateCreate) SetContents(b []byte) *OncallHandoverTemplateCreate {
	ohtc.mutation.SetContents(b)
	return ohtc
}

// SetIsDefault sets the "is_default" field.
func (ohtc *OncallHandoverTemplateCreate) SetIsDefault(b bool) *OncallHandoverTemplateCreate {
	ohtc.mutation.SetIsDefault(b)
	return ohtc
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (ohtc *OncallHandoverTemplateCreate) SetNillableIsDefault(b *bool) *OncallHandoverTemplateCreate {
	if b != nil {
		ohtc.SetIsDefault(*b)
	}
	return ohtc
}

// SetID sets the "id" field.
func (ohtc *OncallHandoverTemplateCreate) SetID(u uuid.UUID) *OncallHandoverTemplateCreate {
	ohtc.mutation.SetID(u)
	return ohtc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ohtc *OncallHandoverTemplateCreate) SetNillableID(u *uuid.UUID) *OncallHandoverTemplateCreate {
	if u != nil {
		ohtc.SetID(*u)
	}
	return ohtc
}

// AddRosterIDs adds the "roster" edge to the OncallRoster entity by IDs.
func (ohtc *OncallHandoverTemplateCreate) AddRosterIDs(ids ...uuid.UUID) *OncallHandoverTemplateCreate {
	ohtc.mutation.AddRosterIDs(ids...)
	return ohtc
}

// AddRoster adds the "roster" edges to the OncallRoster entity.
func (ohtc *OncallHandoverTemplateCreate) AddRoster(o ...*OncallRoster) *OncallHandoverTemplateCreate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ohtc.AddRosterIDs(ids...)
}

// Mutation returns the OncallHandoverTemplateMutation object of the builder.
func (ohtc *OncallHandoverTemplateCreate) Mutation() *OncallHandoverTemplateMutation {
	return ohtc.mutation
}

// Save creates the OncallHandoverTemplate in the database.
func (ohtc *OncallHandoverTemplateCreate) Save(ctx context.Context) (*OncallHandoverTemplate, error) {
	ohtc.defaults()
	return withHooks(ctx, ohtc.sqlSave, ohtc.mutation, ohtc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ohtc *OncallHandoverTemplateCreate) SaveX(ctx context.Context) *OncallHandoverTemplate {
	v, err := ohtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ohtc *OncallHandoverTemplateCreate) Exec(ctx context.Context) error {
	_, err := ohtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ohtc *OncallHandoverTemplateCreate) ExecX(ctx context.Context) {
	if err := ohtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ohtc *OncallHandoverTemplateCreate) defaults() {
	if _, ok := ohtc.mutation.CreatedAt(); !ok {
		v := oncallhandovertemplate.DefaultCreatedAt()
		ohtc.mutation.SetCreatedAt(v)
	}
	if _, ok := ohtc.mutation.UpdatedAt(); !ok {
		v := oncallhandovertemplate.DefaultUpdatedAt()
		ohtc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ohtc.mutation.IsDefault(); !ok {
		v := oncallhandovertemplate.DefaultIsDefault
		ohtc.mutation.SetIsDefault(v)
	}
	if _, ok := ohtc.mutation.ID(); !ok {
		v := oncallhandovertemplate.DefaultID()
		ohtc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ohtc *OncallHandoverTemplateCreate) check() error {
	if _, ok := ohtc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OncallHandoverTemplate.created_at"`)}
	}
	if _, ok := ohtc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "OncallHandoverTemplate.updated_at"`)}
	}
	if _, ok := ohtc.mutation.Contents(); !ok {
		return &ValidationError{Name: "contents", err: errors.New(`ent: missing required field "OncallHandoverTemplate.contents"`)}
	}
	if _, ok := ohtc.mutation.IsDefault(); !ok {
		return &ValidationError{Name: "is_default", err: errors.New(`ent: missing required field "OncallHandoverTemplate.is_default"`)}
	}
	return nil
}

func (ohtc *OncallHandoverTemplateCreate) sqlSave(ctx context.Context) (*OncallHandoverTemplate, error) {
	if err := ohtc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ohtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ohtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ohtc.mutation.id = &_node.ID
	ohtc.mutation.done = true
	return _node, nil
}

func (ohtc *OncallHandoverTemplateCreate) createSpec() (*OncallHandoverTemplate, *sqlgraph.CreateSpec) {
	var (
		_node = &OncallHandoverTemplate{config: ohtc.config}
		_spec = sqlgraph.NewCreateSpec(oncallhandovertemplate.Table, sqlgraph.NewFieldSpec(oncallhandovertemplate.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = ohtc.conflict
	if id, ok := ohtc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ohtc.mutation.CreatedAt(); ok {
		_spec.SetField(oncallhandovertemplate.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ohtc.mutation.UpdatedAt(); ok {
		_spec.SetField(oncallhandovertemplate.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ohtc.mutation.Contents(); ok {
		_spec.SetField(oncallhandovertemplate.FieldContents, field.TypeBytes, value)
		_node.Contents = value
	}
	if value, ok := ohtc.mutation.IsDefault(); ok {
		_spec.SetField(oncallhandovertemplate.FieldIsDefault, field.TypeBool, value)
		_node.IsDefault = value
	}
	if nodes := ohtc.mutation.RosterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oncallhandovertemplate.RosterTable,
			Columns: []string{oncallhandovertemplate.RosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OncallHandoverTemplate.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OncallHandoverTemplateUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ohtc *OncallHandoverTemplateCreate) OnConflict(opts ...sql.ConflictOption) *OncallHandoverTemplateUpsertOne {
	ohtc.conflict = opts
	return &OncallHandoverTemplateUpsertOne{
		create: ohtc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OncallHandoverTemplate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ohtc *OncallHandoverTemplateCreate) OnConflictColumns(columns ...string) *OncallHandoverTemplateUpsertOne {
	ohtc.conflict = append(ohtc.conflict, sql.ConflictColumns(columns...))
	return &OncallHandoverTemplateUpsertOne{
		create: ohtc,
	}
}

type (
	// OncallHandoverTemplateUpsertOne is the builder for "upsert"-ing
	//  one OncallHandoverTemplate node.
	OncallHandoverTemplateUpsertOne struct {
		create *OncallHandoverTemplateCreate
	}

	// OncallHandoverTemplateUpsert is the "OnConflict" setter.
	OncallHandoverTemplateUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *OncallHandoverTemplateUpsert) SetCreatedAt(v time.Time) *OncallHandoverTemplateUpsert {
	u.Set(oncallhandovertemplate.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OncallHandoverTemplateUpsert) UpdateCreatedAt() *OncallHandoverTemplateUpsert {
	u.SetExcluded(oncallhandovertemplate.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OncallHandoverTemplateUpsert) SetUpdatedAt(v time.Time) *OncallHandoverTemplateUpsert {
	u.Set(oncallhandovertemplate.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OncallHandoverTemplateUpsert) UpdateUpdatedAt() *OncallHandoverTemplateUpsert {
	u.SetExcluded(oncallhandovertemplate.FieldUpdatedAt)
	return u
}

// SetContents sets the "contents" field.
func (u *OncallHandoverTemplateUpsert) SetContents(v []byte) *OncallHandoverTemplateUpsert {
	u.Set(oncallhandovertemplate.FieldContents, v)
	return u
}

// UpdateContents sets the "contents" field to the value that was provided on create.
func (u *OncallHandoverTemplateUpsert) UpdateContents() *OncallHandoverTemplateUpsert {
	u.SetExcluded(oncallhandovertemplate.FieldContents)
	return u
}

// SetIsDefault sets the "is_default" field.
func (u *OncallHandoverTemplateUpsert) SetIsDefault(v bool) *OncallHandoverTemplateUpsert {
	u.Set(oncallhandovertemplate.FieldIsDefault, v)
	return u
}

// UpdateIsDefault sets the "is_default" field to the value that was provided on create.
func (u *OncallHandoverTemplateUpsert) UpdateIsDefault() *OncallHandoverTemplateUpsert {
	u.SetExcluded(oncallhandovertemplate.FieldIsDefault)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OncallHandoverTemplate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oncallhandovertemplate.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OncallHandoverTemplateUpsertOne) UpdateNewValues() *OncallHandoverTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(oncallhandovertemplate.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OncallHandoverTemplate.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OncallHandoverTemplateUpsertOne) Ignore() *OncallHandoverTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OncallHandoverTemplateUpsertOne) DoNothing() *OncallHandoverTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OncallHandoverTemplateCreate.OnConflict
// documentation for more info.
func (u *OncallHandoverTemplateUpsertOne) Update(set func(*OncallHandoverTemplateUpsert)) *OncallHandoverTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OncallHandoverTemplateUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *OncallHandoverTemplateUpsertOne) SetCreatedAt(v time.Time) *OncallHandoverTemplateUpsertOne {
	return u.Update(func(s *OncallHandoverTemplateUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OncallHandoverTemplateUpsertOne) UpdateCreatedAt() *OncallHandoverTemplateUpsertOne {
	return u.Update(func(s *OncallHandoverTemplateUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OncallHandoverTemplateUpsertOne) SetUpdatedAt(v time.Time) *OncallHandoverTemplateUpsertOne {
	return u.Update(func(s *OncallHandoverTemplateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OncallHandoverTemplateUpsertOne) UpdateUpdatedAt() *OncallHandoverTemplateUpsertOne {
	return u.Update(func(s *OncallHandoverTemplateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetContents sets the "contents" field.
func (u *OncallHandoverTemplateUpsertOne) SetContents(v []byte) *OncallHandoverTemplateUpsertOne {
	return u.Update(func(s *OncallHandoverTemplateUpsert) {
		s.SetContents(v)
	})
}

// UpdateContents sets the "contents" field to the value that was provided on create.
func (u *OncallHandoverTemplateUpsertOne) UpdateContents() *OncallHandoverTemplateUpsertOne {
	return u.Update(func(s *OncallHandoverTemplateUpsert) {
		s.UpdateContents()
	})
}

// SetIsDefault sets the "is_default" field.
func (u *OncallHandoverTemplateUpsertOne) SetIsDefault(v bool) *OncallHandoverTemplateUpsertOne {
	return u.Update(func(s *OncallHandoverTemplateUpsert) {
		s.SetIsDefault(v)
	})
}

// UpdateIsDefault sets the "is_default" field to the value that was provided on create.
func (u *OncallHandoverTemplateUpsertOne) UpdateIsDefault() *OncallHandoverTemplateUpsertOne {
	return u.Update(func(s *OncallHandoverTemplateUpsert) {
		s.UpdateIsDefault()
	})
}

// Exec executes the query.
func (u *OncallHandoverTemplateUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OncallHandoverTemplateCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OncallHandoverTemplateUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OncallHandoverTemplateUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: OncallHandoverTemplateUpsertOne.ID is not supported by MySQL driver. Use OncallHandoverTemplateUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OncallHandoverTemplateUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OncallHandoverTemplateCreateBulk is the builder for creating many OncallHandoverTemplate entities in bulk.
type OncallHandoverTemplateCreateBulk struct {
	config
	err      error
	builders []*OncallHandoverTemplateCreate
	conflict []sql.ConflictOption
}

// Save creates the OncallHandoverTemplate entities in the database.
func (ohtcb *OncallHandoverTemplateCreateBulk) Save(ctx context.Context) ([]*OncallHandoverTemplate, error) {
	if ohtcb.err != nil {
		return nil, ohtcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ohtcb.builders))
	nodes := make([]*OncallHandoverTemplate, len(ohtcb.builders))
	mutators := make([]Mutator, len(ohtcb.builders))
	for i := range ohtcb.builders {
		func(i int, root context.Context) {
			builder := ohtcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OncallHandoverTemplateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ohtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ohtcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ohtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ohtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ohtcb *OncallHandoverTemplateCreateBulk) SaveX(ctx context.Context) []*OncallHandoverTemplate {
	v, err := ohtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ohtcb *OncallHandoverTemplateCreateBulk) Exec(ctx context.Context) error {
	_, err := ohtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ohtcb *OncallHandoverTemplateCreateBulk) ExecX(ctx context.Context) {
	if err := ohtcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OncallHandoverTemplate.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OncallHandoverTemplateUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ohtcb *OncallHandoverTemplateCreateBulk) OnConflict(opts ...sql.ConflictOption) *OncallHandoverTemplateUpsertBulk {
	ohtcb.conflict = opts
	return &OncallHandoverTemplateUpsertBulk{
		create: ohtcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OncallHandoverTemplate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ohtcb *OncallHandoverTemplateCreateBulk) OnConflictColumns(columns ...string) *OncallHandoverTemplateUpsertBulk {
	ohtcb.conflict = append(ohtcb.conflict, sql.ConflictColumns(columns...))
	return &OncallHandoverTemplateUpsertBulk{
		create: ohtcb,
	}
}

// OncallHandoverTemplateUpsertBulk is the builder for "upsert"-ing
// a bulk of OncallHandoverTemplate nodes.
type OncallHandoverTemplateUpsertBulk struct {
	create *OncallHandoverTemplateCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OncallHandoverTemplate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oncallhandovertemplate.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OncallHandoverTemplateUpsertBulk) UpdateNewValues() *OncallHandoverTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(oncallhandovertemplate.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OncallHandoverTemplate.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OncallHandoverTemplateUpsertBulk) Ignore() *OncallHandoverTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OncallHandoverTemplateUpsertBulk) DoNothing() *OncallHandoverTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OncallHandoverTemplateCreateBulk.OnConflict
// documentation for more info.
func (u *OncallHandoverTemplateUpsertBulk) Update(set func(*OncallHandoverTemplateUpsert)) *OncallHandoverTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OncallHandoverTemplateUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *OncallHandoverTemplateUpsertBulk) SetCreatedAt(v time.Time) *OncallHandoverTemplateUpsertBulk {
	return u.Update(func(s *OncallHandoverTemplateUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OncallHandoverTemplateUpsertBulk) UpdateCreatedAt() *OncallHandoverTemplateUpsertBulk {
	return u.Update(func(s *OncallHandoverTemplateUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OncallHandoverTemplateUpsertBulk) SetUpdatedAt(v time.Time) *OncallHandoverTemplateUpsertBulk {
	return u.Update(func(s *OncallHandoverTemplateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OncallHandoverTemplateUpsertBulk) UpdateUpdatedAt() *OncallHandoverTemplateUpsertBulk {
	return u.Update(func(s *OncallHandoverTemplateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetContents sets the "contents" field.
func (u *OncallHandoverTemplateUpsertBulk) SetContents(v []byte) *OncallHandoverTemplateUpsertBulk {
	return u.Update(func(s *OncallHandoverTemplateUpsert) {
		s.SetContents(v)
	})
}

// UpdateContents sets the "contents" field to the value that was provided on create.
func (u *OncallHandoverTemplateUpsertBulk) UpdateContents() *OncallHandoverTemplateUpsertBulk {
	return u.Update(func(s *OncallHandoverTemplateUpsert) {
		s.UpdateContents()
	})
}

// SetIsDefault sets the "is_default" field.
func (u *OncallHandoverTemplateUpsertBulk) SetIsDefault(v bool) *OncallHandoverTemplateUpsertBulk {
	return u.Update(func(s *OncallHandoverTemplateUpsert) {
		s.SetIsDefault(v)
	})
}

// UpdateIsDefault sets the "is_default" field to the value that was provided on create.
func (u *OncallHandoverTemplateUpsertBulk) UpdateIsDefault() *OncallHandoverTemplateUpsertBulk {
	return u.Update(func(s *OncallHandoverTemplateUpsert) {
		s.UpdateIsDefault()
	})
}

// Exec executes the query.
func (u *OncallHandoverTemplateUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OncallHandoverTemplateCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OncallHandoverTemplateCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OncallHandoverTemplateUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
