// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/incident"
	"github.com/rezible/rezible/ent/incidentdebrief"
	"github.com/rezible/rezible/ent/incidentdebriefmessage"
	"github.com/rezible/rezible/ent/incidentdebriefsuggestion"
	"github.com/rezible/rezible/ent/tenant"
	"github.com/rezible/rezible/ent/user"
)

// IncidentDebriefCreate is the builder for creating a IncidentDebrief entity.
type IncidentDebriefCreate struct {
	config
	mutation *IncidentDebriefMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (idc *IncidentDebriefCreate) SetTenantID(i int) *IncidentDebriefCreate {
	idc.mutation.SetTenantID(i)
	return idc
}

// SetIncidentID sets the "incident_id" field.
func (idc *IncidentDebriefCreate) SetIncidentID(u uuid.UUID) *IncidentDebriefCreate {
	idc.mutation.SetIncidentID(u)
	return idc
}

// SetUserID sets the "user_id" field.
func (idc *IncidentDebriefCreate) SetUserID(u uuid.UUID) *IncidentDebriefCreate {
	idc.mutation.SetUserID(u)
	return idc
}

// SetRequired sets the "required" field.
func (idc *IncidentDebriefCreate) SetRequired(b bool) *IncidentDebriefCreate {
	idc.mutation.SetRequired(b)
	return idc
}

// SetStarted sets the "started" field.
func (idc *IncidentDebriefCreate) SetStarted(b bool) *IncidentDebriefCreate {
	idc.mutation.SetStarted(b)
	return idc
}

// SetID sets the "id" field.
func (idc *IncidentDebriefCreate) SetID(u uuid.UUID) *IncidentDebriefCreate {
	idc.mutation.SetID(u)
	return idc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (idc *IncidentDebriefCreate) SetNillableID(u *uuid.UUID) *IncidentDebriefCreate {
	if u != nil {
		idc.SetID(*u)
	}
	return idc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (idc *IncidentDebriefCreate) SetTenant(t *Tenant) *IncidentDebriefCreate {
	return idc.SetTenantID(t.ID)
}

// SetIncident sets the "incident" edge to the Incident entity.
func (idc *IncidentDebriefCreate) SetIncident(i *Incident) *IncidentDebriefCreate {
	return idc.SetIncidentID(i.ID)
}

// SetUser sets the "user" edge to the User entity.
func (idc *IncidentDebriefCreate) SetUser(u *User) *IncidentDebriefCreate {
	return idc.SetUserID(u.ID)
}

// AddMessageIDs adds the "messages" edge to the IncidentDebriefMessage entity by IDs.
func (idc *IncidentDebriefCreate) AddMessageIDs(ids ...uuid.UUID) *IncidentDebriefCreate {
	idc.mutation.AddMessageIDs(ids...)
	return idc
}

// AddMessages adds the "messages" edges to the IncidentDebriefMessage entity.
func (idc *IncidentDebriefCreate) AddMessages(i ...*IncidentDebriefMessage) *IncidentDebriefCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return idc.AddMessageIDs(ids...)
}

// AddSuggestionIDs adds the "suggestions" edge to the IncidentDebriefSuggestion entity by IDs.
func (idc *IncidentDebriefCreate) AddSuggestionIDs(ids ...uuid.UUID) *IncidentDebriefCreate {
	idc.mutation.AddSuggestionIDs(ids...)
	return idc
}

// AddSuggestions adds the "suggestions" edges to the IncidentDebriefSuggestion entity.
func (idc *IncidentDebriefCreate) AddSuggestions(i ...*IncidentDebriefSuggestion) *IncidentDebriefCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return idc.AddSuggestionIDs(ids...)
}

// Mutation returns the IncidentDebriefMutation object of the builder.
func (idc *IncidentDebriefCreate) Mutation() *IncidentDebriefMutation {
	return idc.mutation
}

// Save creates the IncidentDebrief in the database.
func (idc *IncidentDebriefCreate) Save(ctx context.Context) (*IncidentDebrief, error) {
	if err := idc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, idc.sqlSave, idc.mutation, idc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (idc *IncidentDebriefCreate) SaveX(ctx context.Context) *IncidentDebrief {
	v, err := idc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (idc *IncidentDebriefCreate) Exec(ctx context.Context) error {
	_, err := idc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (idc *IncidentDebriefCreate) ExecX(ctx context.Context) {
	if err := idc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (idc *IncidentDebriefCreate) defaults() error {
	if _, ok := idc.mutation.ID(); !ok {
		if incidentdebrief.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized incidentdebrief.DefaultID (forgotten import ent/runtime?)")
		}
		v := incidentdebrief.DefaultID()
		idc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (idc *IncidentDebriefCreate) check() error {
	if _, ok := idc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "IncidentDebrief.tenant_id"`)}
	}
	if _, ok := idc.mutation.IncidentID(); !ok {
		return &ValidationError{Name: "incident_id", err: errors.New(`ent: missing required field "IncidentDebrief.incident_id"`)}
	}
	if _, ok := idc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "IncidentDebrief.user_id"`)}
	}
	if _, ok := idc.mutation.Required(); !ok {
		return &ValidationError{Name: "required", err: errors.New(`ent: missing required field "IncidentDebrief.required"`)}
	}
	if _, ok := idc.mutation.Started(); !ok {
		return &ValidationError{Name: "started", err: errors.New(`ent: missing required field "IncidentDebrief.started"`)}
	}
	if len(idc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "IncidentDebrief.tenant"`)}
	}
	if len(idc.mutation.IncidentIDs()) == 0 {
		return &ValidationError{Name: "incident", err: errors.New(`ent: missing required edge "IncidentDebrief.incident"`)}
	}
	if len(idc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "IncidentDebrief.user"`)}
	}
	return nil
}

func (idc *IncidentDebriefCreate) sqlSave(ctx context.Context) (*IncidentDebrief, error) {
	if err := idc.check(); err != nil {
		return nil, err
	}
	_node, _spec := idc.createSpec()
	if err := sqlgraph.CreateNode(ctx, idc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	idc.mutation.id = &_node.ID
	idc.mutation.done = true
	return _node, nil
}

func (idc *IncidentDebriefCreate) createSpec() (*IncidentDebrief, *sqlgraph.CreateSpec) {
	var (
		_node = &IncidentDebrief{config: idc.config}
		_spec = sqlgraph.NewCreateSpec(incidentdebrief.Table, sqlgraph.NewFieldSpec(incidentdebrief.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = idc.conflict
	if id, ok := idc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := idc.mutation.Required(); ok {
		_spec.SetField(incidentdebrief.FieldRequired, field.TypeBool, value)
		_node.Required = value
	}
	if value, ok := idc.mutation.Started(); ok {
		_spec.SetField(incidentdebrief.FieldStarted, field.TypeBool, value)
		_node.Started = value
	}
	if nodes := idc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentdebrief.TenantTable,
			Columns: []string{incidentdebrief.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := idc.mutation.IncidentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incidentdebrief.IncidentTable,
			Columns: []string{incidentdebrief.IncidentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.IncidentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := idc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incidentdebrief.UserTable,
			Columns: []string{incidentdebrief.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := idc.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incidentdebrief.MessagesTable,
			Columns: []string{incidentdebrief.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentdebriefmessage.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := idc.mutation.SuggestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incidentdebrief.SuggestionsTable,
			Columns: []string{incidentdebrief.SuggestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentdebriefsuggestion.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IncidentDebrief.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IncidentDebriefUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (idc *IncidentDebriefCreate) OnConflict(opts ...sql.ConflictOption) *IncidentDebriefUpsertOne {
	idc.conflict = opts
	return &IncidentDebriefUpsertOne{
		create: idc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IncidentDebrief.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (idc *IncidentDebriefCreate) OnConflictColumns(columns ...string) *IncidentDebriefUpsertOne {
	idc.conflict = append(idc.conflict, sql.ConflictColumns(columns...))
	return &IncidentDebriefUpsertOne{
		create: idc,
	}
}

type (
	// IncidentDebriefUpsertOne is the builder for "upsert"-ing
	//  one IncidentDebrief node.
	IncidentDebriefUpsertOne struct {
		create *IncidentDebriefCreate
	}

	// IncidentDebriefUpsert is the "OnConflict" setter.
	IncidentDebriefUpsert struct {
		*sql.UpdateSet
	}
)

// SetIncidentID sets the "incident_id" field.
func (u *IncidentDebriefUpsert) SetIncidentID(v uuid.UUID) *IncidentDebriefUpsert {
	u.Set(incidentdebrief.FieldIncidentID, v)
	return u
}

// UpdateIncidentID sets the "incident_id" field to the value that was provided on create.
func (u *IncidentDebriefUpsert) UpdateIncidentID() *IncidentDebriefUpsert {
	u.SetExcluded(incidentdebrief.FieldIncidentID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *IncidentDebriefUpsert) SetUserID(v uuid.UUID) *IncidentDebriefUpsert {
	u.Set(incidentdebrief.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *IncidentDebriefUpsert) UpdateUserID() *IncidentDebriefUpsert {
	u.SetExcluded(incidentdebrief.FieldUserID)
	return u
}

// SetRequired sets the "required" field.
func (u *IncidentDebriefUpsert) SetRequired(v bool) *IncidentDebriefUpsert {
	u.Set(incidentdebrief.FieldRequired, v)
	return u
}

// UpdateRequired sets the "required" field to the value that was provided on create.
func (u *IncidentDebriefUpsert) UpdateRequired() *IncidentDebriefUpsert {
	u.SetExcluded(incidentdebrief.FieldRequired)
	return u
}

// SetStarted sets the "started" field.
func (u *IncidentDebriefUpsert) SetStarted(v bool) *IncidentDebriefUpsert {
	u.Set(incidentdebrief.FieldStarted, v)
	return u
}

// UpdateStarted sets the "started" field to the value that was provided on create.
func (u *IncidentDebriefUpsert) UpdateStarted() *IncidentDebriefUpsert {
	u.SetExcluded(incidentdebrief.FieldStarted)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.IncidentDebrief.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(incidentdebrief.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IncidentDebriefUpsertOne) UpdateNewValues() *IncidentDebriefUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(incidentdebrief.FieldID)
		}
		if _, exists := u.create.mutation.TenantID(); exists {
			s.SetIgnore(incidentdebrief.FieldTenantID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IncidentDebrief.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *IncidentDebriefUpsertOne) Ignore() *IncidentDebriefUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IncidentDebriefUpsertOne) DoNothing() *IncidentDebriefUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IncidentDebriefCreate.OnConflict
// documentation for more info.
func (u *IncidentDebriefUpsertOne) Update(set func(*IncidentDebriefUpsert)) *IncidentDebriefUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IncidentDebriefUpsert{UpdateSet: update})
	}))
	return u
}

// SetIncidentID sets the "incident_id" field.
func (u *IncidentDebriefUpsertOne) SetIncidentID(v uuid.UUID) *IncidentDebriefUpsertOne {
	return u.Update(func(s *IncidentDebriefUpsert) {
		s.SetIncidentID(v)
	})
}

// UpdateIncidentID sets the "incident_id" field to the value that was provided on create.
func (u *IncidentDebriefUpsertOne) UpdateIncidentID() *IncidentDebriefUpsertOne {
	return u.Update(func(s *IncidentDebriefUpsert) {
		s.UpdateIncidentID()
	})
}

// SetUserID sets the "user_id" field.
func (u *IncidentDebriefUpsertOne) SetUserID(v uuid.UUID) *IncidentDebriefUpsertOne {
	return u.Update(func(s *IncidentDebriefUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *IncidentDebriefUpsertOne) UpdateUserID() *IncidentDebriefUpsertOne {
	return u.Update(func(s *IncidentDebriefUpsert) {
		s.UpdateUserID()
	})
}

// SetRequired sets the "required" field.
func (u *IncidentDebriefUpsertOne) SetRequired(v bool) *IncidentDebriefUpsertOne {
	return u.Update(func(s *IncidentDebriefUpsert) {
		s.SetRequired(v)
	})
}

// UpdateRequired sets the "required" field to the value that was provided on create.
func (u *IncidentDebriefUpsertOne) UpdateRequired() *IncidentDebriefUpsertOne {
	return u.Update(func(s *IncidentDebriefUpsert) {
		s.UpdateRequired()
	})
}

// SetStarted sets the "started" field.
func (u *IncidentDebriefUpsertOne) SetStarted(v bool) *IncidentDebriefUpsertOne {
	return u.Update(func(s *IncidentDebriefUpsert) {
		s.SetStarted(v)
	})
}

// UpdateStarted sets the "started" field to the value that was provided on create.
func (u *IncidentDebriefUpsertOne) UpdateStarted() *IncidentDebriefUpsertOne {
	return u.Update(func(s *IncidentDebriefUpsert) {
		s.UpdateStarted()
	})
}

// Exec executes the query.
func (u *IncidentDebriefUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IncidentDebriefCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IncidentDebriefUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *IncidentDebriefUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: IncidentDebriefUpsertOne.ID is not supported by MySQL driver. Use IncidentDebriefUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *IncidentDebriefUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// IncidentDebriefCreateBulk is the builder for creating many IncidentDebrief entities in bulk.
type IncidentDebriefCreateBulk struct {
	config
	err      error
	builders []*IncidentDebriefCreate
	conflict []sql.ConflictOption
}

// Save creates the IncidentDebrief entities in the database.
func (idcb *IncidentDebriefCreateBulk) Save(ctx context.Context) ([]*IncidentDebrief, error) {
	if idcb.err != nil {
		return nil, idcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(idcb.builders))
	nodes := make([]*IncidentDebrief, len(idcb.builders))
	mutators := make([]Mutator, len(idcb.builders))
	for i := range idcb.builders {
		func(i int, root context.Context) {
			builder := idcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IncidentDebriefMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, idcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = idcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, idcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, idcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (idcb *IncidentDebriefCreateBulk) SaveX(ctx context.Context) []*IncidentDebrief {
	v, err := idcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (idcb *IncidentDebriefCreateBulk) Exec(ctx context.Context) error {
	_, err := idcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (idcb *IncidentDebriefCreateBulk) ExecX(ctx context.Context) {
	if err := idcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IncidentDebrief.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IncidentDebriefUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (idcb *IncidentDebriefCreateBulk) OnConflict(opts ...sql.ConflictOption) *IncidentDebriefUpsertBulk {
	idcb.conflict = opts
	return &IncidentDebriefUpsertBulk{
		create: idcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IncidentDebrief.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (idcb *IncidentDebriefCreateBulk) OnConflictColumns(columns ...string) *IncidentDebriefUpsertBulk {
	idcb.conflict = append(idcb.conflict, sql.ConflictColumns(columns...))
	return &IncidentDebriefUpsertBulk{
		create: idcb,
	}
}

// IncidentDebriefUpsertBulk is the builder for "upsert"-ing
// a bulk of IncidentDebrief nodes.
type IncidentDebriefUpsertBulk struct {
	create *IncidentDebriefCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.IncidentDebrief.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(incidentdebrief.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IncidentDebriefUpsertBulk) UpdateNewValues() *IncidentDebriefUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(incidentdebrief.FieldID)
			}
			if _, exists := b.mutation.TenantID(); exists {
				s.SetIgnore(incidentdebrief.FieldTenantID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IncidentDebrief.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *IncidentDebriefUpsertBulk) Ignore() *IncidentDebriefUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IncidentDebriefUpsertBulk) DoNothing() *IncidentDebriefUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IncidentDebriefCreateBulk.OnConflict
// documentation for more info.
func (u *IncidentDebriefUpsertBulk) Update(set func(*IncidentDebriefUpsert)) *IncidentDebriefUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IncidentDebriefUpsert{UpdateSet: update})
	}))
	return u
}

// SetIncidentID sets the "incident_id" field.
func (u *IncidentDebriefUpsertBulk) SetIncidentID(v uuid.UUID) *IncidentDebriefUpsertBulk {
	return u.Update(func(s *IncidentDebriefUpsert) {
		s.SetIncidentID(v)
	})
}

// UpdateIncidentID sets the "incident_id" field to the value that was provided on create.
func (u *IncidentDebriefUpsertBulk) UpdateIncidentID() *IncidentDebriefUpsertBulk {
	return u.Update(func(s *IncidentDebriefUpsert) {
		s.UpdateIncidentID()
	})
}

// SetUserID sets the "user_id" field.
func (u *IncidentDebriefUpsertBulk) SetUserID(v uuid.UUID) *IncidentDebriefUpsertBulk {
	return u.Update(func(s *IncidentDebriefUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *IncidentDebriefUpsertBulk) UpdateUserID() *IncidentDebriefUpsertBulk {
	return u.Update(func(s *IncidentDebriefUpsert) {
		s.UpdateUserID()
	})
}

// SetRequired sets the "required" field.
func (u *IncidentDebriefUpsertBulk) SetRequired(v bool) *IncidentDebriefUpsertBulk {
	return u.Update(func(s *IncidentDebriefUpsert) {
		s.SetRequired(v)
	})
}

// UpdateRequired sets the "required" field to the value that was provided on create.
func (u *IncidentDebriefUpsertBulk) UpdateRequired() *IncidentDebriefUpsertBulk {
	return u.Update(func(s *IncidentDebriefUpsert) {
		s.UpdateRequired()
	})
}

// SetStarted sets the "started" field.
func (u *IncidentDebriefUpsertBulk) SetStarted(v bool) *IncidentDebriefUpsertBulk {
	return u.Update(func(s *IncidentDebriefUpsert) {
		s.SetStarted(v)
	})
}

// UpdateStarted sets the "started" field to the value that was provided on create.
func (u *IncidentDebriefUpsertBulk) UpdateStarted() *IncidentDebriefUpsertBulk {
	return u.Update(func(s *IncidentDebriefUpsert) {
		s.UpdateStarted()
	})
}

// Exec executes the query.
func (u *IncidentDebriefUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the IncidentDebriefCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IncidentDebriefCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IncidentDebriefUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
