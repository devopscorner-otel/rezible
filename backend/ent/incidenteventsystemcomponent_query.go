// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/incidenteventsystemcomponent"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/systemcomponent"
	"github.com/rezible/rezible/ent/tenant"
)

// IncidentEventSystemComponentQuery is the builder for querying IncidentEventSystemComponent entities.
type IncidentEventSystemComponentQuery struct {
	config
	ctx                 *QueryContext
	order               []incidenteventsystemcomponent.OrderOption
	inters              []Interceptor
	predicates          []predicate.IncidentEventSystemComponent
	withTenant          *TenantQuery
	withEvent           *IncidentEventSystemComponentQuery
	withSystemComponent *SystemComponentQuery
	modifiers           []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the IncidentEventSystemComponentQuery builder.
func (iescq *IncidentEventSystemComponentQuery) Where(ps ...predicate.IncidentEventSystemComponent) *IncidentEventSystemComponentQuery {
	iescq.predicates = append(iescq.predicates, ps...)
	return iescq
}

// Limit the number of records to be returned by this query.
func (iescq *IncidentEventSystemComponentQuery) Limit(limit int) *IncidentEventSystemComponentQuery {
	iescq.ctx.Limit = &limit
	return iescq
}

// Offset to start from.
func (iescq *IncidentEventSystemComponentQuery) Offset(offset int) *IncidentEventSystemComponentQuery {
	iescq.ctx.Offset = &offset
	return iescq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (iescq *IncidentEventSystemComponentQuery) Unique(unique bool) *IncidentEventSystemComponentQuery {
	iescq.ctx.Unique = &unique
	return iescq
}

// Order specifies how the records should be ordered.
func (iescq *IncidentEventSystemComponentQuery) Order(o ...incidenteventsystemcomponent.OrderOption) *IncidentEventSystemComponentQuery {
	iescq.order = append(iescq.order, o...)
	return iescq
}

// QueryTenant chains the current query on the "tenant" edge.
func (iescq *IncidentEventSystemComponentQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: iescq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iescq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iescq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(incidenteventsystemcomponent.Table, incidenteventsystemcomponent.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, incidenteventsystemcomponent.TenantTable, incidenteventsystemcomponent.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(iescq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEvent chains the current query on the "event" edge.
func (iescq *IncidentEventSystemComponentQuery) QueryEvent() *IncidentEventSystemComponentQuery {
	query := (&IncidentEventSystemComponentClient{config: iescq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iescq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iescq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(incidenteventsystemcomponent.Table, incidenteventsystemcomponent.FieldID, selector),
			sqlgraph.To(incidenteventsystemcomponent.Table, incidenteventsystemcomponent.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, incidenteventsystemcomponent.EventTable, incidenteventsystemcomponent.EventColumn),
		)
		fromU = sqlgraph.SetNeighbors(iescq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySystemComponent chains the current query on the "system_component" edge.
func (iescq *IncidentEventSystemComponentQuery) QuerySystemComponent() *SystemComponentQuery {
	query := (&SystemComponentClient{config: iescq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iescq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iescq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(incidenteventsystemcomponent.Table, incidenteventsystemcomponent.FieldID, selector),
			sqlgraph.To(systemcomponent.Table, systemcomponent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, incidenteventsystemcomponent.SystemComponentTable, incidenteventsystemcomponent.SystemComponentColumn),
		)
		fromU = sqlgraph.SetNeighbors(iescq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first IncidentEventSystemComponent entity from the query.
// Returns a *NotFoundError when no IncidentEventSystemComponent was found.
func (iescq *IncidentEventSystemComponentQuery) First(ctx context.Context) (*IncidentEventSystemComponent, error) {
	nodes, err := iescq.Limit(1).All(setContextOp(ctx, iescq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{incidenteventsystemcomponent.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (iescq *IncidentEventSystemComponentQuery) FirstX(ctx context.Context) *IncidentEventSystemComponent {
	node, err := iescq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first IncidentEventSystemComponent ID from the query.
// Returns a *NotFoundError when no IncidentEventSystemComponent ID was found.
func (iescq *IncidentEventSystemComponentQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = iescq.Limit(1).IDs(setContextOp(ctx, iescq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{incidenteventsystemcomponent.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (iescq *IncidentEventSystemComponentQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := iescq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single IncidentEventSystemComponent entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one IncidentEventSystemComponent entity is found.
// Returns a *NotFoundError when no IncidentEventSystemComponent entities are found.
func (iescq *IncidentEventSystemComponentQuery) Only(ctx context.Context) (*IncidentEventSystemComponent, error) {
	nodes, err := iescq.Limit(2).All(setContextOp(ctx, iescq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{incidenteventsystemcomponent.Label}
	default:
		return nil, &NotSingularError{incidenteventsystemcomponent.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (iescq *IncidentEventSystemComponentQuery) OnlyX(ctx context.Context) *IncidentEventSystemComponent {
	node, err := iescq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only IncidentEventSystemComponent ID in the query.
// Returns a *NotSingularError when more than one IncidentEventSystemComponent ID is found.
// Returns a *NotFoundError when no entities are found.
func (iescq *IncidentEventSystemComponentQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = iescq.Limit(2).IDs(setContextOp(ctx, iescq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{incidenteventsystemcomponent.Label}
	default:
		err = &NotSingularError{incidenteventsystemcomponent.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (iescq *IncidentEventSystemComponentQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := iescq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of IncidentEventSystemComponents.
func (iescq *IncidentEventSystemComponentQuery) All(ctx context.Context) ([]*IncidentEventSystemComponent, error) {
	ctx = setContextOp(ctx, iescq.ctx, ent.OpQueryAll)
	if err := iescq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*IncidentEventSystemComponent, *IncidentEventSystemComponentQuery]()
	return withInterceptors[[]*IncidentEventSystemComponent](ctx, iescq, qr, iescq.inters)
}

// AllX is like All, but panics if an error occurs.
func (iescq *IncidentEventSystemComponentQuery) AllX(ctx context.Context) []*IncidentEventSystemComponent {
	nodes, err := iescq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of IncidentEventSystemComponent IDs.
func (iescq *IncidentEventSystemComponentQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if iescq.ctx.Unique == nil && iescq.path != nil {
		iescq.Unique(true)
	}
	ctx = setContextOp(ctx, iescq.ctx, ent.OpQueryIDs)
	if err = iescq.Select(incidenteventsystemcomponent.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (iescq *IncidentEventSystemComponentQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := iescq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (iescq *IncidentEventSystemComponentQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, iescq.ctx, ent.OpQueryCount)
	if err := iescq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, iescq, querierCount[*IncidentEventSystemComponentQuery](), iescq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (iescq *IncidentEventSystemComponentQuery) CountX(ctx context.Context) int {
	count, err := iescq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (iescq *IncidentEventSystemComponentQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, iescq.ctx, ent.OpQueryExist)
	switch _, err := iescq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (iescq *IncidentEventSystemComponentQuery) ExistX(ctx context.Context) bool {
	exist, err := iescq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the IncidentEventSystemComponentQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (iescq *IncidentEventSystemComponentQuery) Clone() *IncidentEventSystemComponentQuery {
	if iescq == nil {
		return nil
	}
	return &IncidentEventSystemComponentQuery{
		config:              iescq.config,
		ctx:                 iescq.ctx.Clone(),
		order:               append([]incidenteventsystemcomponent.OrderOption{}, iescq.order...),
		inters:              append([]Interceptor{}, iescq.inters...),
		predicates:          append([]predicate.IncidentEventSystemComponent{}, iescq.predicates...),
		withTenant:          iescq.withTenant.Clone(),
		withEvent:           iescq.withEvent.Clone(),
		withSystemComponent: iescq.withSystemComponent.Clone(),
		// clone intermediate query.
		sql:       iescq.sql.Clone(),
		path:      iescq.path,
		modifiers: append([]func(*sql.Selector){}, iescq.modifiers...),
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (iescq *IncidentEventSystemComponentQuery) WithTenant(opts ...func(*TenantQuery)) *IncidentEventSystemComponentQuery {
	query := (&TenantClient{config: iescq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iescq.withTenant = query
	return iescq
}

// WithEvent tells the query-builder to eager-load the nodes that are connected to
// the "event" edge. The optional arguments are used to configure the query builder of the edge.
func (iescq *IncidentEventSystemComponentQuery) WithEvent(opts ...func(*IncidentEventSystemComponentQuery)) *IncidentEventSystemComponentQuery {
	query := (&IncidentEventSystemComponentClient{config: iescq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iescq.withEvent = query
	return iescq
}

// WithSystemComponent tells the query-builder to eager-load the nodes that are connected to
// the "system_component" edge. The optional arguments are used to configure the query builder of the edge.
func (iescq *IncidentEventSystemComponentQuery) WithSystemComponent(opts ...func(*SystemComponentQuery)) *IncidentEventSystemComponentQuery {
	query := (&SystemComponentClient{config: iescq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iescq.withSystemComponent = query
	return iescq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID int `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.IncidentEventSystemComponent.Query().
//		GroupBy(incidenteventsystemcomponent.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (iescq *IncidentEventSystemComponentQuery) GroupBy(field string, fields ...string) *IncidentEventSystemComponentGroupBy {
	iescq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &IncidentEventSystemComponentGroupBy{build: iescq}
	grbuild.flds = &iescq.ctx.Fields
	grbuild.label = incidenteventsystemcomponent.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID int `json:"tenant_id,omitempty"`
//	}
//
//	client.IncidentEventSystemComponent.Query().
//		Select(incidenteventsystemcomponent.FieldTenantID).
//		Scan(ctx, &v)
func (iescq *IncidentEventSystemComponentQuery) Select(fields ...string) *IncidentEventSystemComponentSelect {
	iescq.ctx.Fields = append(iescq.ctx.Fields, fields...)
	sbuild := &IncidentEventSystemComponentSelect{IncidentEventSystemComponentQuery: iescq}
	sbuild.label = incidenteventsystemcomponent.Label
	sbuild.flds, sbuild.scan = &iescq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a IncidentEventSystemComponentSelect configured with the given aggregations.
func (iescq *IncidentEventSystemComponentQuery) Aggregate(fns ...AggregateFunc) *IncidentEventSystemComponentSelect {
	return iescq.Select().Aggregate(fns...)
}

func (iescq *IncidentEventSystemComponentQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range iescq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, iescq); err != nil {
				return err
			}
		}
	}
	for _, f := range iescq.ctx.Fields {
		if !incidenteventsystemcomponent.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if iescq.path != nil {
		prev, err := iescq.path(ctx)
		if err != nil {
			return err
		}
		iescq.sql = prev
	}
	if incidenteventsystemcomponent.Policy == nil {
		return errors.New("ent: uninitialized incidenteventsystemcomponent.Policy (forgotten import ent/runtime?)")
	}
	if err := incidenteventsystemcomponent.Policy.EvalQuery(ctx, iescq); err != nil {
		return err
	}
	return nil
}

func (iescq *IncidentEventSystemComponentQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*IncidentEventSystemComponent, error) {
	var (
		nodes       = []*IncidentEventSystemComponent{}
		_spec       = iescq.querySpec()
		loadedTypes = [3]bool{
			iescq.withTenant != nil,
			iescq.withEvent != nil,
			iescq.withSystemComponent != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*IncidentEventSystemComponent).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &IncidentEventSystemComponent{config: iescq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(iescq.modifiers) > 0 {
		_spec.Modifiers = iescq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, iescq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := iescq.withTenant; query != nil {
		if err := iescq.loadTenant(ctx, query, nodes, nil,
			func(n *IncidentEventSystemComponent, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := iescq.withEvent; query != nil {
		if err := iescq.loadEvent(ctx, query, nodes, nil,
			func(n *IncidentEventSystemComponent, e *IncidentEventSystemComponent) { n.Edges.Event = e }); err != nil {
			return nil, err
		}
	}
	if query := iescq.withSystemComponent; query != nil {
		if err := iescq.loadSystemComponent(ctx, query, nodes, nil,
			func(n *IncidentEventSystemComponent, e *SystemComponent) { n.Edges.SystemComponent = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (iescq *IncidentEventSystemComponentQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*IncidentEventSystemComponent, init func(*IncidentEventSystemComponent), assign func(*IncidentEventSystemComponent, *Tenant)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*IncidentEventSystemComponent)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (iescq *IncidentEventSystemComponentQuery) loadEvent(ctx context.Context, query *IncidentEventSystemComponentQuery, nodes []*IncidentEventSystemComponent, init func(*IncidentEventSystemComponent), assign func(*IncidentEventSystemComponent, *IncidentEventSystemComponent)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*IncidentEventSystemComponent)
	for i := range nodes {
		fk := nodes[i].IncidentEventID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(incidenteventsystemcomponent.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "incident_event_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (iescq *IncidentEventSystemComponentQuery) loadSystemComponent(ctx context.Context, query *SystemComponentQuery, nodes []*IncidentEventSystemComponent, init func(*IncidentEventSystemComponent), assign func(*IncidentEventSystemComponent, *SystemComponent)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*IncidentEventSystemComponent)
	for i := range nodes {
		fk := nodes[i].SystemComponentID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(systemcomponent.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "system_component_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (iescq *IncidentEventSystemComponentQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := iescq.querySpec()
	if len(iescq.modifiers) > 0 {
		_spec.Modifiers = iescq.modifiers
	}
	_spec.Node.Columns = iescq.ctx.Fields
	if len(iescq.ctx.Fields) > 0 {
		_spec.Unique = iescq.ctx.Unique != nil && *iescq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, iescq.driver, _spec)
}

func (iescq *IncidentEventSystemComponentQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(incidenteventsystemcomponent.Table, incidenteventsystemcomponent.Columns, sqlgraph.NewFieldSpec(incidenteventsystemcomponent.FieldID, field.TypeUUID))
	_spec.From = iescq.sql
	if unique := iescq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if iescq.path != nil {
		_spec.Unique = true
	}
	if fields := iescq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, incidenteventsystemcomponent.FieldID)
		for i := range fields {
			if fields[i] != incidenteventsystemcomponent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if iescq.withTenant != nil {
			_spec.Node.AddColumnOnce(incidenteventsystemcomponent.FieldTenantID)
		}
		if iescq.withEvent != nil {
			_spec.Node.AddColumnOnce(incidenteventsystemcomponent.FieldIncidentEventID)
		}
		if iescq.withSystemComponent != nil {
			_spec.Node.AddColumnOnce(incidenteventsystemcomponent.FieldSystemComponentID)
		}
	}
	if ps := iescq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := iescq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := iescq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := iescq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (iescq *IncidentEventSystemComponentQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(iescq.driver.Dialect())
	t1 := builder.Table(incidenteventsystemcomponent.Table)
	columns := iescq.ctx.Fields
	if len(columns) == 0 {
		columns = incidenteventsystemcomponent.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if iescq.sql != nil {
		selector = iescq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if iescq.ctx.Unique != nil && *iescq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range iescq.modifiers {
		m(selector)
	}
	for _, p := range iescq.predicates {
		p(selector)
	}
	for _, p := range iescq.order {
		p(selector)
	}
	if offset := iescq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := iescq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (iescq *IncidentEventSystemComponentQuery) Modify(modifiers ...func(s *sql.Selector)) *IncidentEventSystemComponentSelect {
	iescq.modifiers = append(iescq.modifiers, modifiers...)
	return iescq.Select()
}

// IncidentEventSystemComponentGroupBy is the group-by builder for IncidentEventSystemComponent entities.
type IncidentEventSystemComponentGroupBy struct {
	selector
	build *IncidentEventSystemComponentQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (iescgb *IncidentEventSystemComponentGroupBy) Aggregate(fns ...AggregateFunc) *IncidentEventSystemComponentGroupBy {
	iescgb.fns = append(iescgb.fns, fns...)
	return iescgb
}

// Scan applies the selector query and scans the result into the given value.
func (iescgb *IncidentEventSystemComponentGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, iescgb.build.ctx, ent.OpQueryGroupBy)
	if err := iescgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*IncidentEventSystemComponentQuery, *IncidentEventSystemComponentGroupBy](ctx, iescgb.build, iescgb, iescgb.build.inters, v)
}

func (iescgb *IncidentEventSystemComponentGroupBy) sqlScan(ctx context.Context, root *IncidentEventSystemComponentQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(iescgb.fns))
	for _, fn := range iescgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*iescgb.flds)+len(iescgb.fns))
		for _, f := range *iescgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*iescgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := iescgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// IncidentEventSystemComponentSelect is the builder for selecting fields of IncidentEventSystemComponent entities.
type IncidentEventSystemComponentSelect struct {
	*IncidentEventSystemComponentQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (iescs *IncidentEventSystemComponentSelect) Aggregate(fns ...AggregateFunc) *IncidentEventSystemComponentSelect {
	iescs.fns = append(iescs.fns, fns...)
	return iescs
}

// Scan applies the selector query and scans the result into the given value.
func (iescs *IncidentEventSystemComponentSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, iescs.ctx, ent.OpQuerySelect)
	if err := iescs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*IncidentEventSystemComponentQuery, *IncidentEventSystemComponentSelect](ctx, iescs.IncidentEventSystemComponentQuery, iescs, iescs.inters, v)
}

func (iescs *IncidentEventSystemComponentSelect) sqlScan(ctx context.Context, root *IncidentEventSystemComponentQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(iescs.fns))
	for _, fn := range iescs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*iescs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := iescs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (iescs *IncidentEventSystemComponentSelect) Modify(modifiers ...func(s *sql.Selector)) *IncidentEventSystemComponentSelect {
	iescs.modifiers = append(iescs.modifiers, modifiers...)
	return iescs
}
