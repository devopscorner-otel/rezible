// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/twohundreds/rezible/ent/retrospectivediscussion"
	"github.com/twohundreds/rezible/ent/retrospectivediscussionreply"
)

// RetrospectiveDiscussionReplyCreate is the builder for creating a RetrospectiveDiscussionReply entity.
type RetrospectiveDiscussionReplyCreate struct {
	config
	mutation *RetrospectiveDiscussionReplyMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetContent sets the "content" field.
func (rdrc *RetrospectiveDiscussionReplyCreate) SetContent(b []byte) *RetrospectiveDiscussionReplyCreate {
	rdrc.mutation.SetContent(b)
	return rdrc
}

// SetID sets the "id" field.
func (rdrc *RetrospectiveDiscussionReplyCreate) SetID(u uuid.UUID) *RetrospectiveDiscussionReplyCreate {
	rdrc.mutation.SetID(u)
	return rdrc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rdrc *RetrospectiveDiscussionReplyCreate) SetNillableID(u *uuid.UUID) *RetrospectiveDiscussionReplyCreate {
	if u != nil {
		rdrc.SetID(*u)
	}
	return rdrc
}

// SetDiscussionID sets the "discussion" edge to the RetrospectiveDiscussion entity by ID.
func (rdrc *RetrospectiveDiscussionReplyCreate) SetDiscussionID(id uuid.UUID) *RetrospectiveDiscussionReplyCreate {
	rdrc.mutation.SetDiscussionID(id)
	return rdrc
}

// SetDiscussion sets the "discussion" edge to the RetrospectiveDiscussion entity.
func (rdrc *RetrospectiveDiscussionReplyCreate) SetDiscussion(r *RetrospectiveDiscussion) *RetrospectiveDiscussionReplyCreate {
	return rdrc.SetDiscussionID(r.ID)
}

// SetParentReplyID sets the "parent_reply" edge to the RetrospectiveDiscussionReply entity by ID.
func (rdrc *RetrospectiveDiscussionReplyCreate) SetParentReplyID(id uuid.UUID) *RetrospectiveDiscussionReplyCreate {
	rdrc.mutation.SetParentReplyID(id)
	return rdrc
}

// SetNillableParentReplyID sets the "parent_reply" edge to the RetrospectiveDiscussionReply entity by ID if the given value is not nil.
func (rdrc *RetrospectiveDiscussionReplyCreate) SetNillableParentReplyID(id *uuid.UUID) *RetrospectiveDiscussionReplyCreate {
	if id != nil {
		rdrc = rdrc.SetParentReplyID(*id)
	}
	return rdrc
}

// SetParentReply sets the "parent_reply" edge to the RetrospectiveDiscussionReply entity.
func (rdrc *RetrospectiveDiscussionReplyCreate) SetParentReply(r *RetrospectiveDiscussionReply) *RetrospectiveDiscussionReplyCreate {
	return rdrc.SetParentReplyID(r.ID)
}

// AddReplyIDs adds the "replies" edge to the RetrospectiveDiscussionReply entity by IDs.
func (rdrc *RetrospectiveDiscussionReplyCreate) AddReplyIDs(ids ...uuid.UUID) *RetrospectiveDiscussionReplyCreate {
	rdrc.mutation.AddReplyIDs(ids...)
	return rdrc
}

// AddReplies adds the "replies" edges to the RetrospectiveDiscussionReply entity.
func (rdrc *RetrospectiveDiscussionReplyCreate) AddReplies(r ...*RetrospectiveDiscussionReply) *RetrospectiveDiscussionReplyCreate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdrc.AddReplyIDs(ids...)
}

// Mutation returns the RetrospectiveDiscussionReplyMutation object of the builder.
func (rdrc *RetrospectiveDiscussionReplyCreate) Mutation() *RetrospectiveDiscussionReplyMutation {
	return rdrc.mutation
}

// Save creates the RetrospectiveDiscussionReply in the database.
func (rdrc *RetrospectiveDiscussionReplyCreate) Save(ctx context.Context) (*RetrospectiveDiscussionReply, error) {
	rdrc.defaults()
	return withHooks(ctx, rdrc.sqlSave, rdrc.mutation, rdrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rdrc *RetrospectiveDiscussionReplyCreate) SaveX(ctx context.Context) *RetrospectiveDiscussionReply {
	v, err := rdrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rdrc *RetrospectiveDiscussionReplyCreate) Exec(ctx context.Context) error {
	_, err := rdrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rdrc *RetrospectiveDiscussionReplyCreate) ExecX(ctx context.Context) {
	if err := rdrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rdrc *RetrospectiveDiscussionReplyCreate) defaults() {
	if _, ok := rdrc.mutation.ID(); !ok {
		v := retrospectivediscussionreply.DefaultID()
		rdrc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rdrc *RetrospectiveDiscussionReplyCreate) check() error {
	if _, ok := rdrc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "RetrospectiveDiscussionReply.content"`)}
	}
	if len(rdrc.mutation.DiscussionIDs()) == 0 {
		return &ValidationError{Name: "discussion", err: errors.New(`ent: missing required edge "RetrospectiveDiscussionReply.discussion"`)}
	}
	return nil
}

func (rdrc *RetrospectiveDiscussionReplyCreate) sqlSave(ctx context.Context) (*RetrospectiveDiscussionReply, error) {
	if err := rdrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rdrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rdrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rdrc.mutation.id = &_node.ID
	rdrc.mutation.done = true
	return _node, nil
}

func (rdrc *RetrospectiveDiscussionReplyCreate) createSpec() (*RetrospectiveDiscussionReply, *sqlgraph.CreateSpec) {
	var (
		_node = &RetrospectiveDiscussionReply{config: rdrc.config}
		_spec = sqlgraph.NewCreateSpec(retrospectivediscussionreply.Table, sqlgraph.NewFieldSpec(retrospectivediscussionreply.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = rdrc.conflict
	if id, ok := rdrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rdrc.mutation.Content(); ok {
		_spec.SetField(retrospectivediscussionreply.FieldContent, field.TypeBytes, value)
		_node.Content = value
	}
	if nodes := rdrc.mutation.DiscussionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospectivediscussionreply.DiscussionTable,
			Columns: []string{retrospectivediscussionreply.DiscussionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivediscussion.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.retrospective_discussion_reply_discussion = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rdrc.mutation.ParentReplyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   retrospectivediscussionreply.ParentReplyTable,
			Columns: []string{retrospectivediscussionreply.ParentReplyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivediscussionreply.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.retrospective_discussion_reply_replies = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rdrc.mutation.RepliesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   retrospectivediscussionreply.RepliesTable,
			Columns: []string{retrospectivediscussionreply.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivediscussionreply.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RetrospectiveDiscussionReply.Create().
//		SetContent(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RetrospectiveDiscussionReplyUpsert) {
//			SetContent(v+v).
//		}).
//		Exec(ctx)
func (rdrc *RetrospectiveDiscussionReplyCreate) OnConflict(opts ...sql.ConflictOption) *RetrospectiveDiscussionReplyUpsertOne {
	rdrc.conflict = opts
	return &RetrospectiveDiscussionReplyUpsertOne{
		create: rdrc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RetrospectiveDiscussionReply.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rdrc *RetrospectiveDiscussionReplyCreate) OnConflictColumns(columns ...string) *RetrospectiveDiscussionReplyUpsertOne {
	rdrc.conflict = append(rdrc.conflict, sql.ConflictColumns(columns...))
	return &RetrospectiveDiscussionReplyUpsertOne{
		create: rdrc,
	}
}

type (
	// RetrospectiveDiscussionReplyUpsertOne is the builder for "upsert"-ing
	//  one RetrospectiveDiscussionReply node.
	RetrospectiveDiscussionReplyUpsertOne struct {
		create *RetrospectiveDiscussionReplyCreate
	}

	// RetrospectiveDiscussionReplyUpsert is the "OnConflict" setter.
	RetrospectiveDiscussionReplyUpsert struct {
		*sql.UpdateSet
	}
)

// SetContent sets the "content" field.
func (u *RetrospectiveDiscussionReplyUpsert) SetContent(v []byte) *RetrospectiveDiscussionReplyUpsert {
	u.Set(retrospectivediscussionreply.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *RetrospectiveDiscussionReplyUpsert) UpdateContent() *RetrospectiveDiscussionReplyUpsert {
	u.SetExcluded(retrospectivediscussionreply.FieldContent)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.RetrospectiveDiscussionReply.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(retrospectivediscussionreply.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RetrospectiveDiscussionReplyUpsertOne) UpdateNewValues() *RetrospectiveDiscussionReplyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(retrospectivediscussionreply.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RetrospectiveDiscussionReply.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RetrospectiveDiscussionReplyUpsertOne) Ignore() *RetrospectiveDiscussionReplyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RetrospectiveDiscussionReplyUpsertOne) DoNothing() *RetrospectiveDiscussionReplyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RetrospectiveDiscussionReplyCreate.OnConflict
// documentation for more info.
func (u *RetrospectiveDiscussionReplyUpsertOne) Update(set func(*RetrospectiveDiscussionReplyUpsert)) *RetrospectiveDiscussionReplyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RetrospectiveDiscussionReplyUpsert{UpdateSet: update})
	}))
	return u
}

// SetContent sets the "content" field.
func (u *RetrospectiveDiscussionReplyUpsertOne) SetContent(v []byte) *RetrospectiveDiscussionReplyUpsertOne {
	return u.Update(func(s *RetrospectiveDiscussionReplyUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *RetrospectiveDiscussionReplyUpsertOne) UpdateContent() *RetrospectiveDiscussionReplyUpsertOne {
	return u.Update(func(s *RetrospectiveDiscussionReplyUpsert) {
		s.UpdateContent()
	})
}

// Exec executes the query.
func (u *RetrospectiveDiscussionReplyUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RetrospectiveDiscussionReplyCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RetrospectiveDiscussionReplyUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RetrospectiveDiscussionReplyUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: RetrospectiveDiscussionReplyUpsertOne.ID is not supported by MySQL driver. Use RetrospectiveDiscussionReplyUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RetrospectiveDiscussionReplyUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RetrospectiveDiscussionReplyCreateBulk is the builder for creating many RetrospectiveDiscussionReply entities in bulk.
type RetrospectiveDiscussionReplyCreateBulk struct {
	config
	err      error
	builders []*RetrospectiveDiscussionReplyCreate
	conflict []sql.ConflictOption
}

// Save creates the RetrospectiveDiscussionReply entities in the database.
func (rdrcb *RetrospectiveDiscussionReplyCreateBulk) Save(ctx context.Context) ([]*RetrospectiveDiscussionReply, error) {
	if rdrcb.err != nil {
		return nil, rdrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rdrcb.builders))
	nodes := make([]*RetrospectiveDiscussionReply, len(rdrcb.builders))
	mutators := make([]Mutator, len(rdrcb.builders))
	for i := range rdrcb.builders {
		func(i int, root context.Context) {
			builder := rdrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RetrospectiveDiscussionReplyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rdrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rdrcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rdrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rdrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rdrcb *RetrospectiveDiscussionReplyCreateBulk) SaveX(ctx context.Context) []*RetrospectiveDiscussionReply {
	v, err := rdrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rdrcb *RetrospectiveDiscussionReplyCreateBulk) Exec(ctx context.Context) error {
	_, err := rdrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rdrcb *RetrospectiveDiscussionReplyCreateBulk) ExecX(ctx context.Context) {
	if err := rdrcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RetrospectiveDiscussionReply.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RetrospectiveDiscussionReplyUpsert) {
//			SetContent(v+v).
//		}).
//		Exec(ctx)
func (rdrcb *RetrospectiveDiscussionReplyCreateBulk) OnConflict(opts ...sql.ConflictOption) *RetrospectiveDiscussionReplyUpsertBulk {
	rdrcb.conflict = opts
	return &RetrospectiveDiscussionReplyUpsertBulk{
		create: rdrcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RetrospectiveDiscussionReply.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rdrcb *RetrospectiveDiscussionReplyCreateBulk) OnConflictColumns(columns ...string) *RetrospectiveDiscussionReplyUpsertBulk {
	rdrcb.conflict = append(rdrcb.conflict, sql.ConflictColumns(columns...))
	return &RetrospectiveDiscussionReplyUpsertBulk{
		create: rdrcb,
	}
}

// RetrospectiveDiscussionReplyUpsertBulk is the builder for "upsert"-ing
// a bulk of RetrospectiveDiscussionReply nodes.
type RetrospectiveDiscussionReplyUpsertBulk struct {
	create *RetrospectiveDiscussionReplyCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.RetrospectiveDiscussionReply.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(retrospectivediscussionreply.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RetrospectiveDiscussionReplyUpsertBulk) UpdateNewValues() *RetrospectiveDiscussionReplyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(retrospectivediscussionreply.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RetrospectiveDiscussionReply.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RetrospectiveDiscussionReplyUpsertBulk) Ignore() *RetrospectiveDiscussionReplyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RetrospectiveDiscussionReplyUpsertBulk) DoNothing() *RetrospectiveDiscussionReplyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RetrospectiveDiscussionReplyCreateBulk.OnConflict
// documentation for more info.
func (u *RetrospectiveDiscussionReplyUpsertBulk) Update(set func(*RetrospectiveDiscussionReplyUpsert)) *RetrospectiveDiscussionReplyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RetrospectiveDiscussionReplyUpsert{UpdateSet: update})
	}))
	return u
}

// SetContent sets the "content" field.
func (u *RetrospectiveDiscussionReplyUpsertBulk) SetContent(v []byte) *RetrospectiveDiscussionReplyUpsertBulk {
	return u.Update(func(s *RetrospectiveDiscussionReplyUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *RetrospectiveDiscussionReplyUpsertBulk) UpdateContent() *RetrospectiveDiscussionReplyUpsertBulk {
	return u.Update(func(s *RetrospectiveDiscussionReplyUpsert) {
		s.UpdateContent()
	})
}

// Exec executes the query.
func (u *RetrospectiveDiscussionReplyUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RetrospectiveDiscussionReplyCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RetrospectiveDiscussionReplyCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RetrospectiveDiscussionReplyUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
