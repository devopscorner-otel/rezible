// Code generated by ent, DO NOT EDIT.

package incidentseverity

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v int) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldEQ(FieldTenantID, v))
}

// ArchiveTime applies equality check predicate on the "archive_time" field. It's identical to ArchiveTimeEQ.
func ArchiveTime(v time.Time) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldEQ(FieldArchiveTime, v))
}

// ProviderID applies equality check predicate on the "provider_id" field. It's identical to ProviderIDEQ.
func ProviderID(v string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldEQ(FieldProviderID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldEQ(FieldName, v))
}

// Rank applies equality check predicate on the "rank" field. It's identical to RankEQ.
func Rank(v int) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldEQ(FieldRank, v))
}

// Color applies equality check predicate on the "color" field. It's identical to ColorEQ.
func Color(v string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldEQ(FieldColor, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldEQ(FieldDescription, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v int) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v int) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...int) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...int) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldNotIn(FieldTenantID, vs...))
}

// ArchiveTimeEQ applies the EQ predicate on the "archive_time" field.
func ArchiveTimeEQ(v time.Time) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldEQ(FieldArchiveTime, v))
}

// ArchiveTimeNEQ applies the NEQ predicate on the "archive_time" field.
func ArchiveTimeNEQ(v time.Time) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldNEQ(FieldArchiveTime, v))
}

// ArchiveTimeIn applies the In predicate on the "archive_time" field.
func ArchiveTimeIn(vs ...time.Time) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldIn(FieldArchiveTime, vs...))
}

// ArchiveTimeNotIn applies the NotIn predicate on the "archive_time" field.
func ArchiveTimeNotIn(vs ...time.Time) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldNotIn(FieldArchiveTime, vs...))
}

// ArchiveTimeGT applies the GT predicate on the "archive_time" field.
func ArchiveTimeGT(v time.Time) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldGT(FieldArchiveTime, v))
}

// ArchiveTimeGTE applies the GTE predicate on the "archive_time" field.
func ArchiveTimeGTE(v time.Time) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldGTE(FieldArchiveTime, v))
}

// ArchiveTimeLT applies the LT predicate on the "archive_time" field.
func ArchiveTimeLT(v time.Time) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldLT(FieldArchiveTime, v))
}

// ArchiveTimeLTE applies the LTE predicate on the "archive_time" field.
func ArchiveTimeLTE(v time.Time) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldLTE(FieldArchiveTime, v))
}

// ArchiveTimeIsNil applies the IsNil predicate on the "archive_time" field.
func ArchiveTimeIsNil() predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldIsNull(FieldArchiveTime))
}

// ArchiveTimeNotNil applies the NotNil predicate on the "archive_time" field.
func ArchiveTimeNotNil() predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldNotNull(FieldArchiveTime))
}

// ProviderIDEQ applies the EQ predicate on the "provider_id" field.
func ProviderIDEQ(v string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldEQ(FieldProviderID, v))
}

// ProviderIDNEQ applies the NEQ predicate on the "provider_id" field.
func ProviderIDNEQ(v string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldNEQ(FieldProviderID, v))
}

// ProviderIDIn applies the In predicate on the "provider_id" field.
func ProviderIDIn(vs ...string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldIn(FieldProviderID, vs...))
}

// ProviderIDNotIn applies the NotIn predicate on the "provider_id" field.
func ProviderIDNotIn(vs ...string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldNotIn(FieldProviderID, vs...))
}

// ProviderIDGT applies the GT predicate on the "provider_id" field.
func ProviderIDGT(v string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldGT(FieldProviderID, v))
}

// ProviderIDGTE applies the GTE predicate on the "provider_id" field.
func ProviderIDGTE(v string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldGTE(FieldProviderID, v))
}

// ProviderIDLT applies the LT predicate on the "provider_id" field.
func ProviderIDLT(v string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldLT(FieldProviderID, v))
}

// ProviderIDLTE applies the LTE predicate on the "provider_id" field.
func ProviderIDLTE(v string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldLTE(FieldProviderID, v))
}

// ProviderIDContains applies the Contains predicate on the "provider_id" field.
func ProviderIDContains(v string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldContains(FieldProviderID, v))
}

// ProviderIDHasPrefix applies the HasPrefix predicate on the "provider_id" field.
func ProviderIDHasPrefix(v string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldHasPrefix(FieldProviderID, v))
}

// ProviderIDHasSuffix applies the HasSuffix predicate on the "provider_id" field.
func ProviderIDHasSuffix(v string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldHasSuffix(FieldProviderID, v))
}

// ProviderIDIsNil applies the IsNil predicate on the "provider_id" field.
func ProviderIDIsNil() predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldIsNull(FieldProviderID))
}

// ProviderIDNotNil applies the NotNil predicate on the "provider_id" field.
func ProviderIDNotNil() predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldNotNull(FieldProviderID))
}

// ProviderIDEqualFold applies the EqualFold predicate on the "provider_id" field.
func ProviderIDEqualFold(v string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldEqualFold(FieldProviderID, v))
}

// ProviderIDContainsFold applies the ContainsFold predicate on the "provider_id" field.
func ProviderIDContainsFold(v string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldContainsFold(FieldProviderID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldContainsFold(FieldName, v))
}

// RankEQ applies the EQ predicate on the "rank" field.
func RankEQ(v int) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldEQ(FieldRank, v))
}

// RankNEQ applies the NEQ predicate on the "rank" field.
func RankNEQ(v int) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldNEQ(FieldRank, v))
}

// RankIn applies the In predicate on the "rank" field.
func RankIn(vs ...int) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldIn(FieldRank, vs...))
}

// RankNotIn applies the NotIn predicate on the "rank" field.
func RankNotIn(vs ...int) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldNotIn(FieldRank, vs...))
}

// RankGT applies the GT predicate on the "rank" field.
func RankGT(v int) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldGT(FieldRank, v))
}

// RankGTE applies the GTE predicate on the "rank" field.
func RankGTE(v int) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldGTE(FieldRank, v))
}

// RankLT applies the LT predicate on the "rank" field.
func RankLT(v int) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldLT(FieldRank, v))
}

// RankLTE applies the LTE predicate on the "rank" field.
func RankLTE(v int) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldLTE(FieldRank, v))
}

// ColorEQ applies the EQ predicate on the "color" field.
func ColorEQ(v string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldEQ(FieldColor, v))
}

// ColorNEQ applies the NEQ predicate on the "color" field.
func ColorNEQ(v string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldNEQ(FieldColor, v))
}

// ColorIn applies the In predicate on the "color" field.
func ColorIn(vs ...string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldIn(FieldColor, vs...))
}

// ColorNotIn applies the NotIn predicate on the "color" field.
func ColorNotIn(vs ...string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldNotIn(FieldColor, vs...))
}

// ColorGT applies the GT predicate on the "color" field.
func ColorGT(v string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldGT(FieldColor, v))
}

// ColorGTE applies the GTE predicate on the "color" field.
func ColorGTE(v string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldGTE(FieldColor, v))
}

// ColorLT applies the LT predicate on the "color" field.
func ColorLT(v string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldLT(FieldColor, v))
}

// ColorLTE applies the LTE predicate on the "color" field.
func ColorLTE(v string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldLTE(FieldColor, v))
}

// ColorContains applies the Contains predicate on the "color" field.
func ColorContains(v string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldContains(FieldColor, v))
}

// ColorHasPrefix applies the HasPrefix predicate on the "color" field.
func ColorHasPrefix(v string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldHasPrefix(FieldColor, v))
}

// ColorHasSuffix applies the HasSuffix predicate on the "color" field.
func ColorHasSuffix(v string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldHasSuffix(FieldColor, v))
}

// ColorIsNil applies the IsNil predicate on the "color" field.
func ColorIsNil() predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldIsNull(FieldColor))
}

// ColorNotNil applies the NotNil predicate on the "color" field.
func ColorNotNil() predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldNotNull(FieldColor))
}

// ColorEqualFold applies the EqualFold predicate on the "color" field.
func ColorEqualFold(v string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldEqualFold(FieldColor, v))
}

// ColorContainsFold applies the ContainsFold predicate on the "color" field.
func ColorContainsFold(v string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldContainsFold(FieldColor, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.FieldContainsFold(FieldDescription, v))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.IncidentSeverity {
	return predicate.IncidentSeverity(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIncidents applies the HasEdge predicate on the "incidents" edge.
func HasIncidents() predicate.IncidentSeverity {
	return predicate.IncidentSeverity(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, IncidentsTable, IncidentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIncidentsWith applies the HasEdge predicate on the "incidents" edge with a given conditions (other predicates).
func HasIncidentsWith(preds ...predicate.Incident) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(func(s *sql.Selector) {
		step := newIncidentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDebriefQuestions applies the HasEdge predicate on the "debrief_questions" edge.
func HasDebriefQuestions() predicate.IncidentSeverity {
	return predicate.IncidentSeverity(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, DebriefQuestionsTable, DebriefQuestionsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDebriefQuestionsWith applies the HasEdge predicate on the "debrief_questions" edge with a given conditions (other predicates).
func HasDebriefQuestionsWith(preds ...predicate.IncidentDebriefQuestion) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(func(s *sql.Selector) {
		step := newDebriefQuestionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.IncidentSeverity) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.IncidentSeverity) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.IncidentSeverity) predicate.IncidentSeverity {
	return predicate.IncidentSeverity(sql.NotPredicates(p))
}
