// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/twohundreds/rezible/ent/incident"
	"github.com/twohundreds/rezible/ent/incidentfield"
	"github.com/twohundreds/rezible/ent/incidentfieldoption"
	"github.com/twohundreds/rezible/ent/predicate"
)

// IncidentFieldOptionUpdate is the builder for updating IncidentFieldOption entities.
type IncidentFieldOptionUpdate struct {
	config
	hooks     []Hook
	mutation  *IncidentFieldOptionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the IncidentFieldOptionUpdate builder.
func (ifou *IncidentFieldOptionUpdate) Where(ps ...predicate.IncidentFieldOption) *IncidentFieldOptionUpdate {
	ifou.mutation.Where(ps...)
	return ifou
}

// SetArchiveTime sets the "archive_time" field.
func (ifou *IncidentFieldOptionUpdate) SetArchiveTime(t time.Time) *IncidentFieldOptionUpdate {
	ifou.mutation.SetArchiveTime(t)
	return ifou
}

// SetNillableArchiveTime sets the "archive_time" field if the given value is not nil.
func (ifou *IncidentFieldOptionUpdate) SetNillableArchiveTime(t *time.Time) *IncidentFieldOptionUpdate {
	if t != nil {
		ifou.SetArchiveTime(*t)
	}
	return ifou
}

// ClearArchiveTime clears the value of the "archive_time" field.
func (ifou *IncidentFieldOptionUpdate) ClearArchiveTime() *IncidentFieldOptionUpdate {
	ifou.mutation.ClearArchiveTime()
	return ifou
}

// SetIncidentFieldID sets the "incident_field_id" field.
func (ifou *IncidentFieldOptionUpdate) SetIncidentFieldID(u uuid.UUID) *IncidentFieldOptionUpdate {
	ifou.mutation.SetIncidentFieldID(u)
	return ifou
}

// SetNillableIncidentFieldID sets the "incident_field_id" field if the given value is not nil.
func (ifou *IncidentFieldOptionUpdate) SetNillableIncidentFieldID(u *uuid.UUID) *IncidentFieldOptionUpdate {
	if u != nil {
		ifou.SetIncidentFieldID(*u)
	}
	return ifou
}

// SetType sets the "type" field.
func (ifou *IncidentFieldOptionUpdate) SetType(i incidentfieldoption.Type) *IncidentFieldOptionUpdate {
	ifou.mutation.SetType(i)
	return ifou
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ifou *IncidentFieldOptionUpdate) SetNillableType(i *incidentfieldoption.Type) *IncidentFieldOptionUpdate {
	if i != nil {
		ifou.SetType(*i)
	}
	return ifou
}

// SetValue sets the "value" field.
func (ifou *IncidentFieldOptionUpdate) SetValue(s string) *IncidentFieldOptionUpdate {
	ifou.mutation.SetValue(s)
	return ifou
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (ifou *IncidentFieldOptionUpdate) SetNillableValue(s *string) *IncidentFieldOptionUpdate {
	if s != nil {
		ifou.SetValue(*s)
	}
	return ifou
}

// SetIncidentField sets the "incident_field" edge to the IncidentField entity.
func (ifou *IncidentFieldOptionUpdate) SetIncidentField(i *IncidentField) *IncidentFieldOptionUpdate {
	return ifou.SetIncidentFieldID(i.ID)
}

// AddIncidentIDs adds the "incidents" edge to the Incident entity by IDs.
func (ifou *IncidentFieldOptionUpdate) AddIncidentIDs(ids ...uuid.UUID) *IncidentFieldOptionUpdate {
	ifou.mutation.AddIncidentIDs(ids...)
	return ifou
}

// AddIncidents adds the "incidents" edges to the Incident entity.
func (ifou *IncidentFieldOptionUpdate) AddIncidents(i ...*Incident) *IncidentFieldOptionUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ifou.AddIncidentIDs(ids...)
}

// Mutation returns the IncidentFieldOptionMutation object of the builder.
func (ifou *IncidentFieldOptionUpdate) Mutation() *IncidentFieldOptionMutation {
	return ifou.mutation
}

// ClearIncidentField clears the "incident_field" edge to the IncidentField entity.
func (ifou *IncidentFieldOptionUpdate) ClearIncidentField() *IncidentFieldOptionUpdate {
	ifou.mutation.ClearIncidentField()
	return ifou
}

// ClearIncidents clears all "incidents" edges to the Incident entity.
func (ifou *IncidentFieldOptionUpdate) ClearIncidents() *IncidentFieldOptionUpdate {
	ifou.mutation.ClearIncidents()
	return ifou
}

// RemoveIncidentIDs removes the "incidents" edge to Incident entities by IDs.
func (ifou *IncidentFieldOptionUpdate) RemoveIncidentIDs(ids ...uuid.UUID) *IncidentFieldOptionUpdate {
	ifou.mutation.RemoveIncidentIDs(ids...)
	return ifou
}

// RemoveIncidents removes "incidents" edges to Incident entities.
func (ifou *IncidentFieldOptionUpdate) RemoveIncidents(i ...*Incident) *IncidentFieldOptionUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ifou.RemoveIncidentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ifou *IncidentFieldOptionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ifou.sqlSave, ifou.mutation, ifou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ifou *IncidentFieldOptionUpdate) SaveX(ctx context.Context) int {
	affected, err := ifou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ifou *IncidentFieldOptionUpdate) Exec(ctx context.Context) error {
	_, err := ifou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ifou *IncidentFieldOptionUpdate) ExecX(ctx context.Context) {
	if err := ifou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ifou *IncidentFieldOptionUpdate) check() error {
	if v, ok := ifou.mutation.GetType(); ok {
		if err := incidentfieldoption.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "IncidentFieldOption.type": %w`, err)}
		}
	}
	if ifou.mutation.IncidentFieldCleared() && len(ifou.mutation.IncidentFieldIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IncidentFieldOption.incident_field"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ifou *IncidentFieldOptionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *IncidentFieldOptionUpdate {
	ifou.modifiers = append(ifou.modifiers, modifiers...)
	return ifou
}

func (ifou *IncidentFieldOptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ifou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(incidentfieldoption.Table, incidentfieldoption.Columns, sqlgraph.NewFieldSpec(incidentfieldoption.FieldID, field.TypeUUID))
	if ps := ifou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ifou.mutation.ArchiveTime(); ok {
		_spec.SetField(incidentfieldoption.FieldArchiveTime, field.TypeTime, value)
	}
	if ifou.mutation.ArchiveTimeCleared() {
		_spec.ClearField(incidentfieldoption.FieldArchiveTime, field.TypeTime)
	}
	if value, ok := ifou.mutation.GetType(); ok {
		_spec.SetField(incidentfieldoption.FieldType, field.TypeEnum, value)
	}
	if value, ok := ifou.mutation.Value(); ok {
		_spec.SetField(incidentfieldoption.FieldValue, field.TypeString, value)
	}
	if ifou.mutation.IncidentFieldCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incidentfieldoption.IncidentFieldTable,
			Columns: []string{incidentfieldoption.IncidentFieldColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentfield.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ifou.mutation.IncidentFieldIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incidentfieldoption.IncidentFieldTable,
			Columns: []string{incidentfieldoption.IncidentFieldColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentfield.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ifou.mutation.IncidentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   incidentfieldoption.IncidentsTable,
			Columns: incidentfieldoption.IncidentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ifou.mutation.RemovedIncidentsIDs(); len(nodes) > 0 && !ifou.mutation.IncidentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   incidentfieldoption.IncidentsTable,
			Columns: incidentfieldoption.IncidentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ifou.mutation.IncidentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   incidentfieldoption.IncidentsTable,
			Columns: incidentfieldoption.IncidentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ifou.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ifou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{incidentfieldoption.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ifou.mutation.done = true
	return n, nil
}

// IncidentFieldOptionUpdateOne is the builder for updating a single IncidentFieldOption entity.
type IncidentFieldOptionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *IncidentFieldOptionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetArchiveTime sets the "archive_time" field.
func (ifouo *IncidentFieldOptionUpdateOne) SetArchiveTime(t time.Time) *IncidentFieldOptionUpdateOne {
	ifouo.mutation.SetArchiveTime(t)
	return ifouo
}

// SetNillableArchiveTime sets the "archive_time" field if the given value is not nil.
func (ifouo *IncidentFieldOptionUpdateOne) SetNillableArchiveTime(t *time.Time) *IncidentFieldOptionUpdateOne {
	if t != nil {
		ifouo.SetArchiveTime(*t)
	}
	return ifouo
}

// ClearArchiveTime clears the value of the "archive_time" field.
func (ifouo *IncidentFieldOptionUpdateOne) ClearArchiveTime() *IncidentFieldOptionUpdateOne {
	ifouo.mutation.ClearArchiveTime()
	return ifouo
}

// SetIncidentFieldID sets the "incident_field_id" field.
func (ifouo *IncidentFieldOptionUpdateOne) SetIncidentFieldID(u uuid.UUID) *IncidentFieldOptionUpdateOne {
	ifouo.mutation.SetIncidentFieldID(u)
	return ifouo
}

// SetNillableIncidentFieldID sets the "incident_field_id" field if the given value is not nil.
func (ifouo *IncidentFieldOptionUpdateOne) SetNillableIncidentFieldID(u *uuid.UUID) *IncidentFieldOptionUpdateOne {
	if u != nil {
		ifouo.SetIncidentFieldID(*u)
	}
	return ifouo
}

// SetType sets the "type" field.
func (ifouo *IncidentFieldOptionUpdateOne) SetType(i incidentfieldoption.Type) *IncidentFieldOptionUpdateOne {
	ifouo.mutation.SetType(i)
	return ifouo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ifouo *IncidentFieldOptionUpdateOne) SetNillableType(i *incidentfieldoption.Type) *IncidentFieldOptionUpdateOne {
	if i != nil {
		ifouo.SetType(*i)
	}
	return ifouo
}

// SetValue sets the "value" field.
func (ifouo *IncidentFieldOptionUpdateOne) SetValue(s string) *IncidentFieldOptionUpdateOne {
	ifouo.mutation.SetValue(s)
	return ifouo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (ifouo *IncidentFieldOptionUpdateOne) SetNillableValue(s *string) *IncidentFieldOptionUpdateOne {
	if s != nil {
		ifouo.SetValue(*s)
	}
	return ifouo
}

// SetIncidentField sets the "incident_field" edge to the IncidentField entity.
func (ifouo *IncidentFieldOptionUpdateOne) SetIncidentField(i *IncidentField) *IncidentFieldOptionUpdateOne {
	return ifouo.SetIncidentFieldID(i.ID)
}

// AddIncidentIDs adds the "incidents" edge to the Incident entity by IDs.
func (ifouo *IncidentFieldOptionUpdateOne) AddIncidentIDs(ids ...uuid.UUID) *IncidentFieldOptionUpdateOne {
	ifouo.mutation.AddIncidentIDs(ids...)
	return ifouo
}

// AddIncidents adds the "incidents" edges to the Incident entity.
func (ifouo *IncidentFieldOptionUpdateOne) AddIncidents(i ...*Incident) *IncidentFieldOptionUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ifouo.AddIncidentIDs(ids...)
}

// Mutation returns the IncidentFieldOptionMutation object of the builder.
func (ifouo *IncidentFieldOptionUpdateOne) Mutation() *IncidentFieldOptionMutation {
	return ifouo.mutation
}

// ClearIncidentField clears the "incident_field" edge to the IncidentField entity.
func (ifouo *IncidentFieldOptionUpdateOne) ClearIncidentField() *IncidentFieldOptionUpdateOne {
	ifouo.mutation.ClearIncidentField()
	return ifouo
}

// ClearIncidents clears all "incidents" edges to the Incident entity.
func (ifouo *IncidentFieldOptionUpdateOne) ClearIncidents() *IncidentFieldOptionUpdateOne {
	ifouo.mutation.ClearIncidents()
	return ifouo
}

// RemoveIncidentIDs removes the "incidents" edge to Incident entities by IDs.
func (ifouo *IncidentFieldOptionUpdateOne) RemoveIncidentIDs(ids ...uuid.UUID) *IncidentFieldOptionUpdateOne {
	ifouo.mutation.RemoveIncidentIDs(ids...)
	return ifouo
}

// RemoveIncidents removes "incidents" edges to Incident entities.
func (ifouo *IncidentFieldOptionUpdateOne) RemoveIncidents(i ...*Incident) *IncidentFieldOptionUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ifouo.RemoveIncidentIDs(ids...)
}

// Where appends a list predicates to the IncidentFieldOptionUpdate builder.
func (ifouo *IncidentFieldOptionUpdateOne) Where(ps ...predicate.IncidentFieldOption) *IncidentFieldOptionUpdateOne {
	ifouo.mutation.Where(ps...)
	return ifouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ifouo *IncidentFieldOptionUpdateOne) Select(field string, fields ...string) *IncidentFieldOptionUpdateOne {
	ifouo.fields = append([]string{field}, fields...)
	return ifouo
}

// Save executes the query and returns the updated IncidentFieldOption entity.
func (ifouo *IncidentFieldOptionUpdateOne) Save(ctx context.Context) (*IncidentFieldOption, error) {
	return withHooks(ctx, ifouo.sqlSave, ifouo.mutation, ifouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ifouo *IncidentFieldOptionUpdateOne) SaveX(ctx context.Context) *IncidentFieldOption {
	node, err := ifouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ifouo *IncidentFieldOptionUpdateOne) Exec(ctx context.Context) error {
	_, err := ifouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ifouo *IncidentFieldOptionUpdateOne) ExecX(ctx context.Context) {
	if err := ifouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ifouo *IncidentFieldOptionUpdateOne) check() error {
	if v, ok := ifouo.mutation.GetType(); ok {
		if err := incidentfieldoption.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "IncidentFieldOption.type": %w`, err)}
		}
	}
	if ifouo.mutation.IncidentFieldCleared() && len(ifouo.mutation.IncidentFieldIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IncidentFieldOption.incident_field"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ifouo *IncidentFieldOptionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *IncidentFieldOptionUpdateOne {
	ifouo.modifiers = append(ifouo.modifiers, modifiers...)
	return ifouo
}

func (ifouo *IncidentFieldOptionUpdateOne) sqlSave(ctx context.Context) (_node *IncidentFieldOption, err error) {
	if err := ifouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(incidentfieldoption.Table, incidentfieldoption.Columns, sqlgraph.NewFieldSpec(incidentfieldoption.FieldID, field.TypeUUID))
	id, ok := ifouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "IncidentFieldOption.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ifouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, incidentfieldoption.FieldID)
		for _, f := range fields {
			if !incidentfieldoption.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != incidentfieldoption.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ifouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ifouo.mutation.ArchiveTime(); ok {
		_spec.SetField(incidentfieldoption.FieldArchiveTime, field.TypeTime, value)
	}
	if ifouo.mutation.ArchiveTimeCleared() {
		_spec.ClearField(incidentfieldoption.FieldArchiveTime, field.TypeTime)
	}
	if value, ok := ifouo.mutation.GetType(); ok {
		_spec.SetField(incidentfieldoption.FieldType, field.TypeEnum, value)
	}
	if value, ok := ifouo.mutation.Value(); ok {
		_spec.SetField(incidentfieldoption.FieldValue, field.TypeString, value)
	}
	if ifouo.mutation.IncidentFieldCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incidentfieldoption.IncidentFieldTable,
			Columns: []string{incidentfieldoption.IncidentFieldColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentfield.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ifouo.mutation.IncidentFieldIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incidentfieldoption.IncidentFieldTable,
			Columns: []string{incidentfieldoption.IncidentFieldColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentfield.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ifouo.mutation.IncidentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   incidentfieldoption.IncidentsTable,
			Columns: incidentfieldoption.IncidentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ifouo.mutation.RemovedIncidentsIDs(); len(nodes) > 0 && !ifouo.mutation.IncidentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   incidentfieldoption.IncidentsTable,
			Columns: incidentfieldoption.IncidentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ifouo.mutation.IncidentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   incidentfieldoption.IncidentsTable,
			Columns: incidentfieldoption.IncidentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ifouo.modifiers...)
	_node = &IncidentFieldOption{config: ifouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ifouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{incidentfieldoption.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ifouo.mutation.done = true
	return _node, nil
}
