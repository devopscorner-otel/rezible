// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/systemcomponent"
	"github.com/rezible/rezible/ent/systemcomponentcontrol"
	"github.com/rezible/rezible/ent/systemcomponentsignal"
	"github.com/rezible/rezible/ent/systemrelationship"
	"github.com/rezible/rezible/ent/systemrelationshipcontrolaction"
	"github.com/rezible/rezible/ent/systemrelationshipfeedbacksignal"
)

// SystemRelationshipQuery is the builder for querying SystemRelationship entities.
type SystemRelationshipQuery struct {
	config
	ctx                 *QueryContext
	order               []systemrelationship.OrderOption
	inters              []Interceptor
	predicates          []predicate.SystemRelationship
	withSourceComponent *SystemComponentQuery
	withTargetComponent *SystemComponentQuery
	withControls        *SystemComponentControlQuery
	withSignals         *SystemComponentSignalQuery
	withControlActions  *SystemRelationshipControlActionQuery
	withFeedbackSignals *SystemRelationshipFeedbackSignalQuery
	modifiers           []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SystemRelationshipQuery builder.
func (srq *SystemRelationshipQuery) Where(ps ...predicate.SystemRelationship) *SystemRelationshipQuery {
	srq.predicates = append(srq.predicates, ps...)
	return srq
}

// Limit the number of records to be returned by this query.
func (srq *SystemRelationshipQuery) Limit(limit int) *SystemRelationshipQuery {
	srq.ctx.Limit = &limit
	return srq
}

// Offset to start from.
func (srq *SystemRelationshipQuery) Offset(offset int) *SystemRelationshipQuery {
	srq.ctx.Offset = &offset
	return srq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (srq *SystemRelationshipQuery) Unique(unique bool) *SystemRelationshipQuery {
	srq.ctx.Unique = &unique
	return srq
}

// Order specifies how the records should be ordered.
func (srq *SystemRelationshipQuery) Order(o ...systemrelationship.OrderOption) *SystemRelationshipQuery {
	srq.order = append(srq.order, o...)
	return srq
}

// QuerySourceComponent chains the current query on the "source_component" edge.
func (srq *SystemRelationshipQuery) QuerySourceComponent() *SystemComponentQuery {
	query := (&SystemComponentClient{config: srq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := srq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := srq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(systemrelationship.Table, systemrelationship.FieldID, selector),
			sqlgraph.To(systemcomponent.Table, systemcomponent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, systemrelationship.SourceComponentTable, systemrelationship.SourceComponentColumn),
		)
		fromU = sqlgraph.SetNeighbors(srq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTargetComponent chains the current query on the "target_component" edge.
func (srq *SystemRelationshipQuery) QueryTargetComponent() *SystemComponentQuery {
	query := (&SystemComponentClient{config: srq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := srq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := srq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(systemrelationship.Table, systemrelationship.FieldID, selector),
			sqlgraph.To(systemcomponent.Table, systemcomponent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, systemrelationship.TargetComponentTable, systemrelationship.TargetComponentColumn),
		)
		fromU = sqlgraph.SetNeighbors(srq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryControls chains the current query on the "controls" edge.
func (srq *SystemRelationshipQuery) QueryControls() *SystemComponentControlQuery {
	query := (&SystemComponentControlClient{config: srq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := srq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := srq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(systemrelationship.Table, systemrelationship.FieldID, selector),
			sqlgraph.To(systemcomponentcontrol.Table, systemcomponentcontrol.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, systemrelationship.ControlsTable, systemrelationship.ControlsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(srq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySignals chains the current query on the "signals" edge.
func (srq *SystemRelationshipQuery) QuerySignals() *SystemComponentSignalQuery {
	query := (&SystemComponentSignalClient{config: srq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := srq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := srq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(systemrelationship.Table, systemrelationship.FieldID, selector),
			sqlgraph.To(systemcomponentsignal.Table, systemcomponentsignal.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, systemrelationship.SignalsTable, systemrelationship.SignalsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(srq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryControlActions chains the current query on the "control_actions" edge.
func (srq *SystemRelationshipQuery) QueryControlActions() *SystemRelationshipControlActionQuery {
	query := (&SystemRelationshipControlActionClient{config: srq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := srq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := srq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(systemrelationship.Table, systemrelationship.FieldID, selector),
			sqlgraph.To(systemrelationshipcontrolaction.Table, systemrelationshipcontrolaction.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, systemrelationship.ControlActionsTable, systemrelationship.ControlActionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(srq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFeedbackSignals chains the current query on the "feedback_signals" edge.
func (srq *SystemRelationshipQuery) QueryFeedbackSignals() *SystemRelationshipFeedbackSignalQuery {
	query := (&SystemRelationshipFeedbackSignalClient{config: srq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := srq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := srq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(systemrelationship.Table, systemrelationship.FieldID, selector),
			sqlgraph.To(systemrelationshipfeedbacksignal.Table, systemrelationshipfeedbacksignal.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, systemrelationship.FeedbackSignalsTable, systemrelationship.FeedbackSignalsColumn),
		)
		fromU = sqlgraph.SetNeighbors(srq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SystemRelationship entity from the query.
// Returns a *NotFoundError when no SystemRelationship was found.
func (srq *SystemRelationshipQuery) First(ctx context.Context) (*SystemRelationship, error) {
	nodes, err := srq.Limit(1).All(setContextOp(ctx, srq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{systemrelationship.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (srq *SystemRelationshipQuery) FirstX(ctx context.Context) *SystemRelationship {
	node, err := srq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SystemRelationship ID from the query.
// Returns a *NotFoundError when no SystemRelationship ID was found.
func (srq *SystemRelationshipQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = srq.Limit(1).IDs(setContextOp(ctx, srq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{systemrelationship.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (srq *SystemRelationshipQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := srq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SystemRelationship entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SystemRelationship entity is found.
// Returns a *NotFoundError when no SystemRelationship entities are found.
func (srq *SystemRelationshipQuery) Only(ctx context.Context) (*SystemRelationship, error) {
	nodes, err := srq.Limit(2).All(setContextOp(ctx, srq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{systemrelationship.Label}
	default:
		return nil, &NotSingularError{systemrelationship.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (srq *SystemRelationshipQuery) OnlyX(ctx context.Context) *SystemRelationship {
	node, err := srq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SystemRelationship ID in the query.
// Returns a *NotSingularError when more than one SystemRelationship ID is found.
// Returns a *NotFoundError when no entities are found.
func (srq *SystemRelationshipQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = srq.Limit(2).IDs(setContextOp(ctx, srq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{systemrelationship.Label}
	default:
		err = &NotSingularError{systemrelationship.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (srq *SystemRelationshipQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := srq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SystemRelationships.
func (srq *SystemRelationshipQuery) All(ctx context.Context) ([]*SystemRelationship, error) {
	ctx = setContextOp(ctx, srq.ctx, ent.OpQueryAll)
	if err := srq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SystemRelationship, *SystemRelationshipQuery]()
	return withInterceptors[[]*SystemRelationship](ctx, srq, qr, srq.inters)
}

// AllX is like All, but panics if an error occurs.
func (srq *SystemRelationshipQuery) AllX(ctx context.Context) []*SystemRelationship {
	nodes, err := srq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SystemRelationship IDs.
func (srq *SystemRelationshipQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if srq.ctx.Unique == nil && srq.path != nil {
		srq.Unique(true)
	}
	ctx = setContextOp(ctx, srq.ctx, ent.OpQueryIDs)
	if err = srq.Select(systemrelationship.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (srq *SystemRelationshipQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := srq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (srq *SystemRelationshipQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, srq.ctx, ent.OpQueryCount)
	if err := srq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, srq, querierCount[*SystemRelationshipQuery](), srq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (srq *SystemRelationshipQuery) CountX(ctx context.Context) int {
	count, err := srq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (srq *SystemRelationshipQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, srq.ctx, ent.OpQueryExist)
	switch _, err := srq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (srq *SystemRelationshipQuery) ExistX(ctx context.Context) bool {
	exist, err := srq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SystemRelationshipQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (srq *SystemRelationshipQuery) Clone() *SystemRelationshipQuery {
	if srq == nil {
		return nil
	}
	return &SystemRelationshipQuery{
		config:              srq.config,
		ctx:                 srq.ctx.Clone(),
		order:               append([]systemrelationship.OrderOption{}, srq.order...),
		inters:              append([]Interceptor{}, srq.inters...),
		predicates:          append([]predicate.SystemRelationship{}, srq.predicates...),
		withSourceComponent: srq.withSourceComponent.Clone(),
		withTargetComponent: srq.withTargetComponent.Clone(),
		withControls:        srq.withControls.Clone(),
		withSignals:         srq.withSignals.Clone(),
		withControlActions:  srq.withControlActions.Clone(),
		withFeedbackSignals: srq.withFeedbackSignals.Clone(),
		// clone intermediate query.
		sql:       srq.sql.Clone(),
		path:      srq.path,
		modifiers: append([]func(*sql.Selector){}, srq.modifiers...),
	}
}

// WithSourceComponent tells the query-builder to eager-load the nodes that are connected to
// the "source_component" edge. The optional arguments are used to configure the query builder of the edge.
func (srq *SystemRelationshipQuery) WithSourceComponent(opts ...func(*SystemComponentQuery)) *SystemRelationshipQuery {
	query := (&SystemComponentClient{config: srq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	srq.withSourceComponent = query
	return srq
}

// WithTargetComponent tells the query-builder to eager-load the nodes that are connected to
// the "target_component" edge. The optional arguments are used to configure the query builder of the edge.
func (srq *SystemRelationshipQuery) WithTargetComponent(opts ...func(*SystemComponentQuery)) *SystemRelationshipQuery {
	query := (&SystemComponentClient{config: srq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	srq.withTargetComponent = query
	return srq
}

// WithControls tells the query-builder to eager-load the nodes that are connected to
// the "controls" edge. The optional arguments are used to configure the query builder of the edge.
func (srq *SystemRelationshipQuery) WithControls(opts ...func(*SystemComponentControlQuery)) *SystemRelationshipQuery {
	query := (&SystemComponentControlClient{config: srq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	srq.withControls = query
	return srq
}

// WithSignals tells the query-builder to eager-load the nodes that are connected to
// the "signals" edge. The optional arguments are used to configure the query builder of the edge.
func (srq *SystemRelationshipQuery) WithSignals(opts ...func(*SystemComponentSignalQuery)) *SystemRelationshipQuery {
	query := (&SystemComponentSignalClient{config: srq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	srq.withSignals = query
	return srq
}

// WithControlActions tells the query-builder to eager-load the nodes that are connected to
// the "control_actions" edge. The optional arguments are used to configure the query builder of the edge.
func (srq *SystemRelationshipQuery) WithControlActions(opts ...func(*SystemRelationshipControlActionQuery)) *SystemRelationshipQuery {
	query := (&SystemRelationshipControlActionClient{config: srq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	srq.withControlActions = query
	return srq
}

// WithFeedbackSignals tells the query-builder to eager-load the nodes that are connected to
// the "feedback_signals" edge. The optional arguments are used to configure the query builder of the edge.
func (srq *SystemRelationshipQuery) WithFeedbackSignals(opts ...func(*SystemRelationshipFeedbackSignalQuery)) *SystemRelationshipQuery {
	query := (&SystemRelationshipFeedbackSignalClient{config: srq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	srq.withFeedbackSignals = query
	return srq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		SourceComponentID uuid.UUID `json:"source_component_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SystemRelationship.Query().
//		GroupBy(systemrelationship.FieldSourceComponentID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (srq *SystemRelationshipQuery) GroupBy(field string, fields ...string) *SystemRelationshipGroupBy {
	srq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SystemRelationshipGroupBy{build: srq}
	grbuild.flds = &srq.ctx.Fields
	grbuild.label = systemrelationship.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		SourceComponentID uuid.UUID `json:"source_component_id,omitempty"`
//	}
//
//	client.SystemRelationship.Query().
//		Select(systemrelationship.FieldSourceComponentID).
//		Scan(ctx, &v)
func (srq *SystemRelationshipQuery) Select(fields ...string) *SystemRelationshipSelect {
	srq.ctx.Fields = append(srq.ctx.Fields, fields...)
	sbuild := &SystemRelationshipSelect{SystemRelationshipQuery: srq}
	sbuild.label = systemrelationship.Label
	sbuild.flds, sbuild.scan = &srq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SystemRelationshipSelect configured with the given aggregations.
func (srq *SystemRelationshipQuery) Aggregate(fns ...AggregateFunc) *SystemRelationshipSelect {
	return srq.Select().Aggregate(fns...)
}

func (srq *SystemRelationshipQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range srq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, srq); err != nil {
				return err
			}
		}
	}
	for _, f := range srq.ctx.Fields {
		if !systemrelationship.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if srq.path != nil {
		prev, err := srq.path(ctx)
		if err != nil {
			return err
		}
		srq.sql = prev
	}
	return nil
}

func (srq *SystemRelationshipQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SystemRelationship, error) {
	var (
		nodes       = []*SystemRelationship{}
		_spec       = srq.querySpec()
		loadedTypes = [6]bool{
			srq.withSourceComponent != nil,
			srq.withTargetComponent != nil,
			srq.withControls != nil,
			srq.withSignals != nil,
			srq.withControlActions != nil,
			srq.withFeedbackSignals != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SystemRelationship).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SystemRelationship{config: srq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(srq.modifiers) > 0 {
		_spec.Modifiers = srq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, srq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := srq.withSourceComponent; query != nil {
		if err := srq.loadSourceComponent(ctx, query, nodes, nil,
			func(n *SystemRelationship, e *SystemComponent) { n.Edges.SourceComponent = e }); err != nil {
			return nil, err
		}
	}
	if query := srq.withTargetComponent; query != nil {
		if err := srq.loadTargetComponent(ctx, query, nodes, nil,
			func(n *SystemRelationship, e *SystemComponent) { n.Edges.TargetComponent = e }); err != nil {
			return nil, err
		}
	}
	if query := srq.withControls; query != nil {
		if err := srq.loadControls(ctx, query, nodes,
			func(n *SystemRelationship) { n.Edges.Controls = []*SystemComponentControl{} },
			func(n *SystemRelationship, e *SystemComponentControl) { n.Edges.Controls = append(n.Edges.Controls, e) }); err != nil {
			return nil, err
		}
	}
	if query := srq.withSignals; query != nil {
		if err := srq.loadSignals(ctx, query, nodes,
			func(n *SystemRelationship) { n.Edges.Signals = []*SystemComponentSignal{} },
			func(n *SystemRelationship, e *SystemComponentSignal) { n.Edges.Signals = append(n.Edges.Signals, e) }); err != nil {
			return nil, err
		}
	}
	if query := srq.withControlActions; query != nil {
		if err := srq.loadControlActions(ctx, query, nodes,
			func(n *SystemRelationship) { n.Edges.ControlActions = []*SystemRelationshipControlAction{} },
			func(n *SystemRelationship, e *SystemRelationshipControlAction) {
				n.Edges.ControlActions = append(n.Edges.ControlActions, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := srq.withFeedbackSignals; query != nil {
		if err := srq.loadFeedbackSignals(ctx, query, nodes,
			func(n *SystemRelationship) { n.Edges.FeedbackSignals = []*SystemRelationshipFeedbackSignal{} },
			func(n *SystemRelationship, e *SystemRelationshipFeedbackSignal) {
				n.Edges.FeedbackSignals = append(n.Edges.FeedbackSignals, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (srq *SystemRelationshipQuery) loadSourceComponent(ctx context.Context, query *SystemComponentQuery, nodes []*SystemRelationship, init func(*SystemRelationship), assign func(*SystemRelationship, *SystemComponent)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*SystemRelationship)
	for i := range nodes {
		fk := nodes[i].SourceComponentID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(systemcomponent.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "source_component_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (srq *SystemRelationshipQuery) loadTargetComponent(ctx context.Context, query *SystemComponentQuery, nodes []*SystemRelationship, init func(*SystemRelationship), assign func(*SystemRelationship, *SystemComponent)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*SystemRelationship)
	for i := range nodes {
		fk := nodes[i].TargetComponentID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(systemcomponent.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "target_component_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (srq *SystemRelationshipQuery) loadControls(ctx context.Context, query *SystemComponentControlQuery, nodes []*SystemRelationship, init func(*SystemRelationship), assign func(*SystemRelationship, *SystemComponentControl)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*SystemRelationship)
	nids := make(map[uuid.UUID]map[*SystemRelationship]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(systemrelationship.ControlsTable)
		s.Join(joinT).On(s.C(systemcomponentcontrol.FieldID), joinT.C(systemrelationship.ControlsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(systemrelationship.ControlsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(systemrelationship.ControlsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*SystemRelationship]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*SystemComponentControl](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "controls" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (srq *SystemRelationshipQuery) loadSignals(ctx context.Context, query *SystemComponentSignalQuery, nodes []*SystemRelationship, init func(*SystemRelationship), assign func(*SystemRelationship, *SystemComponentSignal)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*SystemRelationship)
	nids := make(map[uuid.UUID]map[*SystemRelationship]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(systemrelationship.SignalsTable)
		s.Join(joinT).On(s.C(systemcomponentsignal.FieldID), joinT.C(systemrelationship.SignalsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(systemrelationship.SignalsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(systemrelationship.SignalsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*SystemRelationship]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*SystemComponentSignal](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "signals" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (srq *SystemRelationshipQuery) loadControlActions(ctx context.Context, query *SystemRelationshipControlActionQuery, nodes []*SystemRelationship, init func(*SystemRelationship), assign func(*SystemRelationship, *SystemRelationshipControlAction)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*SystemRelationship)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(systemrelationshipcontrolaction.FieldRelationshipID)
	}
	query.Where(predicate.SystemRelationshipControlAction(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(systemrelationship.ControlActionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.RelationshipID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "relationship_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (srq *SystemRelationshipQuery) loadFeedbackSignals(ctx context.Context, query *SystemRelationshipFeedbackSignalQuery, nodes []*SystemRelationship, init func(*SystemRelationship), assign func(*SystemRelationship, *SystemRelationshipFeedbackSignal)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*SystemRelationship)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(systemrelationshipfeedbacksignal.FieldRelationshipID)
	}
	query.Where(predicate.SystemRelationshipFeedbackSignal(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(systemrelationship.FeedbackSignalsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.RelationshipID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "relationship_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (srq *SystemRelationshipQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := srq.querySpec()
	if len(srq.modifiers) > 0 {
		_spec.Modifiers = srq.modifiers
	}
	_spec.Node.Columns = srq.ctx.Fields
	if len(srq.ctx.Fields) > 0 {
		_spec.Unique = srq.ctx.Unique != nil && *srq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, srq.driver, _spec)
}

func (srq *SystemRelationshipQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(systemrelationship.Table, systemrelationship.Columns, sqlgraph.NewFieldSpec(systemrelationship.FieldID, field.TypeUUID))
	_spec.From = srq.sql
	if unique := srq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if srq.path != nil {
		_spec.Unique = true
	}
	if fields := srq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, systemrelationship.FieldID)
		for i := range fields {
			if fields[i] != systemrelationship.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if srq.withSourceComponent != nil {
			_spec.Node.AddColumnOnce(systemrelationship.FieldSourceComponentID)
		}
		if srq.withTargetComponent != nil {
			_spec.Node.AddColumnOnce(systemrelationship.FieldTargetComponentID)
		}
	}
	if ps := srq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := srq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := srq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := srq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (srq *SystemRelationshipQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(srq.driver.Dialect())
	t1 := builder.Table(systemrelationship.Table)
	columns := srq.ctx.Fields
	if len(columns) == 0 {
		columns = systemrelationship.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if srq.sql != nil {
		selector = srq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if srq.ctx.Unique != nil && *srq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range srq.modifiers {
		m(selector)
	}
	for _, p := range srq.predicates {
		p(selector)
	}
	for _, p := range srq.order {
		p(selector)
	}
	if offset := srq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := srq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (srq *SystemRelationshipQuery) Modify(modifiers ...func(s *sql.Selector)) *SystemRelationshipSelect {
	srq.modifiers = append(srq.modifiers, modifiers...)
	return srq.Select()
}

// SystemRelationshipGroupBy is the group-by builder for SystemRelationship entities.
type SystemRelationshipGroupBy struct {
	selector
	build *SystemRelationshipQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (srgb *SystemRelationshipGroupBy) Aggregate(fns ...AggregateFunc) *SystemRelationshipGroupBy {
	srgb.fns = append(srgb.fns, fns...)
	return srgb
}

// Scan applies the selector query and scans the result into the given value.
func (srgb *SystemRelationshipGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, srgb.build.ctx, ent.OpQueryGroupBy)
	if err := srgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SystemRelationshipQuery, *SystemRelationshipGroupBy](ctx, srgb.build, srgb, srgb.build.inters, v)
}

func (srgb *SystemRelationshipGroupBy) sqlScan(ctx context.Context, root *SystemRelationshipQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(srgb.fns))
	for _, fn := range srgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*srgb.flds)+len(srgb.fns))
		for _, f := range *srgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*srgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := srgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SystemRelationshipSelect is the builder for selecting fields of SystemRelationship entities.
type SystemRelationshipSelect struct {
	*SystemRelationshipQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (srs *SystemRelationshipSelect) Aggregate(fns ...AggregateFunc) *SystemRelationshipSelect {
	srs.fns = append(srs.fns, fns...)
	return srs
}

// Scan applies the selector query and scans the result into the given value.
func (srs *SystemRelationshipSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, srs.ctx, ent.OpQuerySelect)
	if err := srs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SystemRelationshipQuery, *SystemRelationshipSelect](ctx, srs.SystemRelationshipQuery, srs, srs.inters, v)
}

func (srs *SystemRelationshipSelect) sqlScan(ctx context.Context, root *SystemRelationshipQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(srs.fns))
	for _, fn := range srs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*srs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := srs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (srs *SystemRelationshipSelect) Modify(modifiers ...func(s *sql.Selector)) *SystemRelationshipSelect {
	srs.modifiers = append(srs.modifiers, modifiers...)
	return srs
}
