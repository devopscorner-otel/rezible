// Code generated by ent, DO NOT EDIT.

package oncallshiftmetrics

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.OncallShiftMetrics {
	return predicate.OncallShiftMetrics(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.OncallShiftMetrics {
	return predicate.OncallShiftMetrics(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.OncallShiftMetrics {
	return predicate.OncallShiftMetrics(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.OncallShiftMetrics {
	return predicate.OncallShiftMetrics(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.OncallShiftMetrics {
	return predicate.OncallShiftMetrics(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.OncallShiftMetrics {
	return predicate.OncallShiftMetrics(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.OncallShiftMetrics {
	return predicate.OncallShiftMetrics(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.OncallShiftMetrics {
	return predicate.OncallShiftMetrics(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.OncallShiftMetrics {
	return predicate.OncallShiftMetrics(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v int) predicate.OncallShiftMetrics {
	return predicate.OncallShiftMetrics(sql.FieldEQ(FieldTenantID, v))
}

// ShiftID applies equality check predicate on the "shift_id" field. It's identical to ShiftIDEQ.
func ShiftID(v uuid.UUID) predicate.OncallShiftMetrics {
	return predicate.OncallShiftMetrics(sql.FieldEQ(FieldShiftID, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v int) predicate.OncallShiftMetrics {
	return predicate.OncallShiftMetrics(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v int) predicate.OncallShiftMetrics {
	return predicate.OncallShiftMetrics(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...int) predicate.OncallShiftMetrics {
	return predicate.OncallShiftMetrics(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...int) predicate.OncallShiftMetrics {
	return predicate.OncallShiftMetrics(sql.FieldNotIn(FieldTenantID, vs...))
}

// ShiftIDEQ applies the EQ predicate on the "shift_id" field.
func ShiftIDEQ(v uuid.UUID) predicate.OncallShiftMetrics {
	return predicate.OncallShiftMetrics(sql.FieldEQ(FieldShiftID, v))
}

// ShiftIDNEQ applies the NEQ predicate on the "shift_id" field.
func ShiftIDNEQ(v uuid.UUID) predicate.OncallShiftMetrics {
	return predicate.OncallShiftMetrics(sql.FieldNEQ(FieldShiftID, v))
}

// ShiftIDIn applies the In predicate on the "shift_id" field.
func ShiftIDIn(vs ...uuid.UUID) predicate.OncallShiftMetrics {
	return predicate.OncallShiftMetrics(sql.FieldIn(FieldShiftID, vs...))
}

// ShiftIDNotIn applies the NotIn predicate on the "shift_id" field.
func ShiftIDNotIn(vs ...uuid.UUID) predicate.OncallShiftMetrics {
	return predicate.OncallShiftMetrics(sql.FieldNotIn(FieldShiftID, vs...))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.OncallShiftMetrics {
	return predicate.OncallShiftMetrics(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.OncallShiftMetrics {
	return predicate.OncallShiftMetrics(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasShift applies the HasEdge predicate on the "shift" edge.
func HasShift() predicate.OncallShiftMetrics {
	return predicate.OncallShiftMetrics(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ShiftTable, ShiftColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasShiftWith applies the HasEdge predicate on the "shift" edge with a given conditions (other predicates).
func HasShiftWith(preds ...predicate.OncallShift) predicate.OncallShiftMetrics {
	return predicate.OncallShiftMetrics(func(s *sql.Selector) {
		step := newShiftStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OncallShiftMetrics) predicate.OncallShiftMetrics {
	return predicate.OncallShiftMetrics(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OncallShiftMetrics) predicate.OncallShiftMetrics {
	return predicate.OncallShiftMetrics(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OncallShiftMetrics) predicate.OncallShiftMetrics {
	return predicate.OncallShiftMetrics(sql.NotPredicates(p))
}
