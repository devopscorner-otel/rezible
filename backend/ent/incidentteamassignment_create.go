// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/twohundreds/rezible/ent/incident"
	"github.com/twohundreds/rezible/ent/incidentteamassignment"
	"github.com/twohundreds/rezible/ent/team"
)

// IncidentTeamAssignmentCreate is the builder for creating a IncidentTeamAssignment entity.
type IncidentTeamAssignmentCreate struct {
	config
	mutation *IncidentTeamAssignmentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetIncidentID sets the "incident_id" field.
func (itac *IncidentTeamAssignmentCreate) SetIncidentID(u uuid.UUID) *IncidentTeamAssignmentCreate {
	itac.mutation.SetIncidentID(u)
	return itac
}

// SetTeamID sets the "team_id" field.
func (itac *IncidentTeamAssignmentCreate) SetTeamID(u uuid.UUID) *IncidentTeamAssignmentCreate {
	itac.mutation.SetTeamID(u)
	return itac
}

// SetIncident sets the "incident" edge to the Incident entity.
func (itac *IncidentTeamAssignmentCreate) SetIncident(i *Incident) *IncidentTeamAssignmentCreate {
	return itac.SetIncidentID(i.ID)
}

// SetTeam sets the "team" edge to the Team entity.
func (itac *IncidentTeamAssignmentCreate) SetTeam(t *Team) *IncidentTeamAssignmentCreate {
	return itac.SetTeamID(t.ID)
}

// Mutation returns the IncidentTeamAssignmentMutation object of the builder.
func (itac *IncidentTeamAssignmentCreate) Mutation() *IncidentTeamAssignmentMutation {
	return itac.mutation
}

// Save creates the IncidentTeamAssignment in the database.
func (itac *IncidentTeamAssignmentCreate) Save(ctx context.Context) (*IncidentTeamAssignment, error) {
	return withHooks(ctx, itac.sqlSave, itac.mutation, itac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (itac *IncidentTeamAssignmentCreate) SaveX(ctx context.Context) *IncidentTeamAssignment {
	v, err := itac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (itac *IncidentTeamAssignmentCreate) Exec(ctx context.Context) error {
	_, err := itac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (itac *IncidentTeamAssignmentCreate) ExecX(ctx context.Context) {
	if err := itac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (itac *IncidentTeamAssignmentCreate) check() error {
	if _, ok := itac.mutation.IncidentID(); !ok {
		return &ValidationError{Name: "incident_id", err: errors.New(`ent: missing required field "IncidentTeamAssignment.incident_id"`)}
	}
	if _, ok := itac.mutation.TeamID(); !ok {
		return &ValidationError{Name: "team_id", err: errors.New(`ent: missing required field "IncidentTeamAssignment.team_id"`)}
	}
	if len(itac.mutation.IncidentIDs()) == 0 {
		return &ValidationError{Name: "incident", err: errors.New(`ent: missing required edge "IncidentTeamAssignment.incident"`)}
	}
	if len(itac.mutation.TeamIDs()) == 0 {
		return &ValidationError{Name: "team", err: errors.New(`ent: missing required edge "IncidentTeamAssignment.team"`)}
	}
	return nil
}

func (itac *IncidentTeamAssignmentCreate) sqlSave(ctx context.Context) (*IncidentTeamAssignment, error) {
	if err := itac.check(); err != nil {
		return nil, err
	}
	_node, _spec := itac.createSpec()
	if err := sqlgraph.CreateNode(ctx, itac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	itac.mutation.id = &_node.ID
	itac.mutation.done = true
	return _node, nil
}

func (itac *IncidentTeamAssignmentCreate) createSpec() (*IncidentTeamAssignment, *sqlgraph.CreateSpec) {
	var (
		_node = &IncidentTeamAssignment{config: itac.config}
		_spec = sqlgraph.NewCreateSpec(incidentteamassignment.Table, sqlgraph.NewFieldSpec(incidentteamassignment.FieldID, field.TypeInt))
	)
	_spec.OnConflict = itac.conflict
	if nodes := itac.mutation.IncidentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentteamassignment.IncidentTable,
			Columns: []string{incidentteamassignment.IncidentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.IncidentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := itac.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentteamassignment.TeamTable,
			Columns: []string{incidentteamassignment.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TeamID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IncidentTeamAssignment.Create().
//		SetIncidentID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IncidentTeamAssignmentUpsert) {
//			SetIncidentID(v+v).
//		}).
//		Exec(ctx)
func (itac *IncidentTeamAssignmentCreate) OnConflict(opts ...sql.ConflictOption) *IncidentTeamAssignmentUpsertOne {
	itac.conflict = opts
	return &IncidentTeamAssignmentUpsertOne{
		create: itac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IncidentTeamAssignment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (itac *IncidentTeamAssignmentCreate) OnConflictColumns(columns ...string) *IncidentTeamAssignmentUpsertOne {
	itac.conflict = append(itac.conflict, sql.ConflictColumns(columns...))
	return &IncidentTeamAssignmentUpsertOne{
		create: itac,
	}
}

type (
	// IncidentTeamAssignmentUpsertOne is the builder for "upsert"-ing
	//  one IncidentTeamAssignment node.
	IncidentTeamAssignmentUpsertOne struct {
		create *IncidentTeamAssignmentCreate
	}

	// IncidentTeamAssignmentUpsert is the "OnConflict" setter.
	IncidentTeamAssignmentUpsert struct {
		*sql.UpdateSet
	}
)

// SetIncidentID sets the "incident_id" field.
func (u *IncidentTeamAssignmentUpsert) SetIncidentID(v uuid.UUID) *IncidentTeamAssignmentUpsert {
	u.Set(incidentteamassignment.FieldIncidentID, v)
	return u
}

// UpdateIncidentID sets the "incident_id" field to the value that was provided on create.
func (u *IncidentTeamAssignmentUpsert) UpdateIncidentID() *IncidentTeamAssignmentUpsert {
	u.SetExcluded(incidentteamassignment.FieldIncidentID)
	return u
}

// SetTeamID sets the "team_id" field.
func (u *IncidentTeamAssignmentUpsert) SetTeamID(v uuid.UUID) *IncidentTeamAssignmentUpsert {
	u.Set(incidentteamassignment.FieldTeamID, v)
	return u
}

// UpdateTeamID sets the "team_id" field to the value that was provided on create.
func (u *IncidentTeamAssignmentUpsert) UpdateTeamID() *IncidentTeamAssignmentUpsert {
	u.SetExcluded(incidentteamassignment.FieldTeamID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.IncidentTeamAssignment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *IncidentTeamAssignmentUpsertOne) UpdateNewValues() *IncidentTeamAssignmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IncidentTeamAssignment.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *IncidentTeamAssignmentUpsertOne) Ignore() *IncidentTeamAssignmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IncidentTeamAssignmentUpsertOne) DoNothing() *IncidentTeamAssignmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IncidentTeamAssignmentCreate.OnConflict
// documentation for more info.
func (u *IncidentTeamAssignmentUpsertOne) Update(set func(*IncidentTeamAssignmentUpsert)) *IncidentTeamAssignmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IncidentTeamAssignmentUpsert{UpdateSet: update})
	}))
	return u
}

// SetIncidentID sets the "incident_id" field.
func (u *IncidentTeamAssignmentUpsertOne) SetIncidentID(v uuid.UUID) *IncidentTeamAssignmentUpsertOne {
	return u.Update(func(s *IncidentTeamAssignmentUpsert) {
		s.SetIncidentID(v)
	})
}

// UpdateIncidentID sets the "incident_id" field to the value that was provided on create.
func (u *IncidentTeamAssignmentUpsertOne) UpdateIncidentID() *IncidentTeamAssignmentUpsertOne {
	return u.Update(func(s *IncidentTeamAssignmentUpsert) {
		s.UpdateIncidentID()
	})
}

// SetTeamID sets the "team_id" field.
func (u *IncidentTeamAssignmentUpsertOne) SetTeamID(v uuid.UUID) *IncidentTeamAssignmentUpsertOne {
	return u.Update(func(s *IncidentTeamAssignmentUpsert) {
		s.SetTeamID(v)
	})
}

// UpdateTeamID sets the "team_id" field to the value that was provided on create.
func (u *IncidentTeamAssignmentUpsertOne) UpdateTeamID() *IncidentTeamAssignmentUpsertOne {
	return u.Update(func(s *IncidentTeamAssignmentUpsert) {
		s.UpdateTeamID()
	})
}

// Exec executes the query.
func (u *IncidentTeamAssignmentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IncidentTeamAssignmentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IncidentTeamAssignmentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *IncidentTeamAssignmentUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *IncidentTeamAssignmentUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// IncidentTeamAssignmentCreateBulk is the builder for creating many IncidentTeamAssignment entities in bulk.
type IncidentTeamAssignmentCreateBulk struct {
	config
	err      error
	builders []*IncidentTeamAssignmentCreate
	conflict []sql.ConflictOption
}

// Save creates the IncidentTeamAssignment entities in the database.
func (itacb *IncidentTeamAssignmentCreateBulk) Save(ctx context.Context) ([]*IncidentTeamAssignment, error) {
	if itacb.err != nil {
		return nil, itacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(itacb.builders))
	nodes := make([]*IncidentTeamAssignment, len(itacb.builders))
	mutators := make([]Mutator, len(itacb.builders))
	for i := range itacb.builders {
		func(i int, root context.Context) {
			builder := itacb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IncidentTeamAssignmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, itacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = itacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, itacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, itacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (itacb *IncidentTeamAssignmentCreateBulk) SaveX(ctx context.Context) []*IncidentTeamAssignment {
	v, err := itacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (itacb *IncidentTeamAssignmentCreateBulk) Exec(ctx context.Context) error {
	_, err := itacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (itacb *IncidentTeamAssignmentCreateBulk) ExecX(ctx context.Context) {
	if err := itacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IncidentTeamAssignment.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IncidentTeamAssignmentUpsert) {
//			SetIncidentID(v+v).
//		}).
//		Exec(ctx)
func (itacb *IncidentTeamAssignmentCreateBulk) OnConflict(opts ...sql.ConflictOption) *IncidentTeamAssignmentUpsertBulk {
	itacb.conflict = opts
	return &IncidentTeamAssignmentUpsertBulk{
		create: itacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IncidentTeamAssignment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (itacb *IncidentTeamAssignmentCreateBulk) OnConflictColumns(columns ...string) *IncidentTeamAssignmentUpsertBulk {
	itacb.conflict = append(itacb.conflict, sql.ConflictColumns(columns...))
	return &IncidentTeamAssignmentUpsertBulk{
		create: itacb,
	}
}

// IncidentTeamAssignmentUpsertBulk is the builder for "upsert"-ing
// a bulk of IncidentTeamAssignment nodes.
type IncidentTeamAssignmentUpsertBulk struct {
	create *IncidentTeamAssignmentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.IncidentTeamAssignment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *IncidentTeamAssignmentUpsertBulk) UpdateNewValues() *IncidentTeamAssignmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IncidentTeamAssignment.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *IncidentTeamAssignmentUpsertBulk) Ignore() *IncidentTeamAssignmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IncidentTeamAssignmentUpsertBulk) DoNothing() *IncidentTeamAssignmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IncidentTeamAssignmentCreateBulk.OnConflict
// documentation for more info.
func (u *IncidentTeamAssignmentUpsertBulk) Update(set func(*IncidentTeamAssignmentUpsert)) *IncidentTeamAssignmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IncidentTeamAssignmentUpsert{UpdateSet: update})
	}))
	return u
}

// SetIncidentID sets the "incident_id" field.
func (u *IncidentTeamAssignmentUpsertBulk) SetIncidentID(v uuid.UUID) *IncidentTeamAssignmentUpsertBulk {
	return u.Update(func(s *IncidentTeamAssignmentUpsert) {
		s.SetIncidentID(v)
	})
}

// UpdateIncidentID sets the "incident_id" field to the value that was provided on create.
func (u *IncidentTeamAssignmentUpsertBulk) UpdateIncidentID() *IncidentTeamAssignmentUpsertBulk {
	return u.Update(func(s *IncidentTeamAssignmentUpsert) {
		s.UpdateIncidentID()
	})
}

// SetTeamID sets the "team_id" field.
func (u *IncidentTeamAssignmentUpsertBulk) SetTeamID(v uuid.UUID) *IncidentTeamAssignmentUpsertBulk {
	return u.Update(func(s *IncidentTeamAssignmentUpsert) {
		s.SetTeamID(v)
	})
}

// UpdateTeamID sets the "team_id" field to the value that was provided on create.
func (u *IncidentTeamAssignmentUpsertBulk) UpdateTeamID() *IncidentTeamAssignmentUpsertBulk {
	return u.Update(func(s *IncidentTeamAssignmentUpsert) {
		s.UpdateTeamID()
	})
}

// Exec executes the query.
func (u *IncidentTeamAssignmentUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the IncidentTeamAssignmentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IncidentTeamAssignmentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IncidentTeamAssignmentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
