// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/systemanalysis"
	"github.com/rezible/rezible/ent/systemanalysisrelationship"
	"github.com/rezible/rezible/ent/systemcomponent"
)

// SystemAnalysisRelationship is the model entity for the SystemAnalysisRelationship schema.
type SystemAnalysisRelationship struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// AnalysisID holds the value of the "analysis_id" field.
	AnalysisID uuid.UUID `json:"analysis_id,omitempty"`
	// SourceComponentID holds the value of the "source_component_id" field.
	SourceComponentID uuid.UUID `json:"source_component_id,omitempty"`
	// TargetComponentID holds the value of the "target_component_id" field.
	TargetComponentID uuid.UUID `json:"target_component_id,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SystemAnalysisRelationshipQuery when eager-loading is set.
	Edges        SystemAnalysisRelationshipEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SystemAnalysisRelationshipEdges holds the relations/edges for other nodes in the graph.
type SystemAnalysisRelationshipEdges struct {
	// SystemAnalysis holds the value of the system_analysis edge.
	SystemAnalysis *SystemAnalysis `json:"system_analysis,omitempty"`
	// SourceComponent holds the value of the source_component edge.
	SourceComponent *SystemComponent `json:"source_component,omitempty"`
	// TargetComponent holds the value of the target_component edge.
	TargetComponent *SystemComponent `json:"target_component,omitempty"`
	// Controls holds the value of the controls edge.
	Controls []*SystemComponentControl `json:"controls,omitempty"`
	// Signals holds the value of the signals edge.
	Signals []*SystemComponentSignal `json:"signals,omitempty"`
	// ControlActions holds the value of the control_actions edge.
	ControlActions []*SystemRelationshipControlAction `json:"control_actions,omitempty"`
	// FeedbackSignals holds the value of the feedback_signals edge.
	FeedbackSignals []*SystemRelationshipFeedbackSignal `json:"feedback_signals,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
}

// SystemAnalysisOrErr returns the SystemAnalysis value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SystemAnalysisRelationshipEdges) SystemAnalysisOrErr() (*SystemAnalysis, error) {
	if e.SystemAnalysis != nil {
		return e.SystemAnalysis, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: systemanalysis.Label}
	}
	return nil, &NotLoadedError{edge: "system_analysis"}
}

// SourceComponentOrErr returns the SourceComponent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SystemAnalysisRelationshipEdges) SourceComponentOrErr() (*SystemComponent, error) {
	if e.SourceComponent != nil {
		return e.SourceComponent, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: systemcomponent.Label}
	}
	return nil, &NotLoadedError{edge: "source_component"}
}

// TargetComponentOrErr returns the TargetComponent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SystemAnalysisRelationshipEdges) TargetComponentOrErr() (*SystemComponent, error) {
	if e.TargetComponent != nil {
		return e.TargetComponent, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: systemcomponent.Label}
	}
	return nil, &NotLoadedError{edge: "target_component"}
}

// ControlsOrErr returns the Controls value or an error if the edge
// was not loaded in eager-loading.
func (e SystemAnalysisRelationshipEdges) ControlsOrErr() ([]*SystemComponentControl, error) {
	if e.loadedTypes[3] {
		return e.Controls, nil
	}
	return nil, &NotLoadedError{edge: "controls"}
}

// SignalsOrErr returns the Signals value or an error if the edge
// was not loaded in eager-loading.
func (e SystemAnalysisRelationshipEdges) SignalsOrErr() ([]*SystemComponentSignal, error) {
	if e.loadedTypes[4] {
		return e.Signals, nil
	}
	return nil, &NotLoadedError{edge: "signals"}
}

// ControlActionsOrErr returns the ControlActions value or an error if the edge
// was not loaded in eager-loading.
func (e SystemAnalysisRelationshipEdges) ControlActionsOrErr() ([]*SystemRelationshipControlAction, error) {
	if e.loadedTypes[5] {
		return e.ControlActions, nil
	}
	return nil, &NotLoadedError{edge: "control_actions"}
}

// FeedbackSignalsOrErr returns the FeedbackSignals value or an error if the edge
// was not loaded in eager-loading.
func (e SystemAnalysisRelationshipEdges) FeedbackSignalsOrErr() ([]*SystemRelationshipFeedbackSignal, error) {
	if e.loadedTypes[6] {
		return e.FeedbackSignals, nil
	}
	return nil, &NotLoadedError{edge: "feedback_signals"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SystemAnalysisRelationship) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case systemanalysisrelationship.FieldDescription:
			values[i] = new(sql.NullString)
		case systemanalysisrelationship.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case systemanalysisrelationship.FieldID, systemanalysisrelationship.FieldAnalysisID, systemanalysisrelationship.FieldSourceComponentID, systemanalysisrelationship.FieldTargetComponentID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SystemAnalysisRelationship fields.
func (sar *SystemAnalysisRelationship) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case systemanalysisrelationship.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				sar.ID = *value
			}
		case systemanalysisrelationship.FieldAnalysisID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field analysis_id", values[i])
			} else if value != nil {
				sar.AnalysisID = *value
			}
		case systemanalysisrelationship.FieldSourceComponentID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field source_component_id", values[i])
			} else if value != nil {
				sar.SourceComponentID = *value
			}
		case systemanalysisrelationship.FieldTargetComponentID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field target_component_id", values[i])
			} else if value != nil {
				sar.TargetComponentID = *value
			}
		case systemanalysisrelationship.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				sar.Description = value.String
			}
		case systemanalysisrelationship.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sar.CreatedAt = value.Time
			}
		default:
			sar.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SystemAnalysisRelationship.
// This includes values selected through modifiers, order, etc.
func (sar *SystemAnalysisRelationship) Value(name string) (ent.Value, error) {
	return sar.selectValues.Get(name)
}

// QuerySystemAnalysis queries the "system_analysis" edge of the SystemAnalysisRelationship entity.
func (sar *SystemAnalysisRelationship) QuerySystemAnalysis() *SystemAnalysisQuery {
	return NewSystemAnalysisRelationshipClient(sar.config).QuerySystemAnalysis(sar)
}

// QuerySourceComponent queries the "source_component" edge of the SystemAnalysisRelationship entity.
func (sar *SystemAnalysisRelationship) QuerySourceComponent() *SystemComponentQuery {
	return NewSystemAnalysisRelationshipClient(sar.config).QuerySourceComponent(sar)
}

// QueryTargetComponent queries the "target_component" edge of the SystemAnalysisRelationship entity.
func (sar *SystemAnalysisRelationship) QueryTargetComponent() *SystemComponentQuery {
	return NewSystemAnalysisRelationshipClient(sar.config).QueryTargetComponent(sar)
}

// QueryControls queries the "controls" edge of the SystemAnalysisRelationship entity.
func (sar *SystemAnalysisRelationship) QueryControls() *SystemComponentControlQuery {
	return NewSystemAnalysisRelationshipClient(sar.config).QueryControls(sar)
}

// QuerySignals queries the "signals" edge of the SystemAnalysisRelationship entity.
func (sar *SystemAnalysisRelationship) QuerySignals() *SystemComponentSignalQuery {
	return NewSystemAnalysisRelationshipClient(sar.config).QuerySignals(sar)
}

// QueryControlActions queries the "control_actions" edge of the SystemAnalysisRelationship entity.
func (sar *SystemAnalysisRelationship) QueryControlActions() *SystemRelationshipControlActionQuery {
	return NewSystemAnalysisRelationshipClient(sar.config).QueryControlActions(sar)
}

// QueryFeedbackSignals queries the "feedback_signals" edge of the SystemAnalysisRelationship entity.
func (sar *SystemAnalysisRelationship) QueryFeedbackSignals() *SystemRelationshipFeedbackSignalQuery {
	return NewSystemAnalysisRelationshipClient(sar.config).QueryFeedbackSignals(sar)
}

// Update returns a builder for updating this SystemAnalysisRelationship.
// Note that you need to call SystemAnalysisRelationship.Unwrap() before calling this method if this SystemAnalysisRelationship
// was returned from a transaction, and the transaction was committed or rolled back.
func (sar *SystemAnalysisRelationship) Update() *SystemAnalysisRelationshipUpdateOne {
	return NewSystemAnalysisRelationshipClient(sar.config).UpdateOne(sar)
}

// Unwrap unwraps the SystemAnalysisRelationship entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sar *SystemAnalysisRelationship) Unwrap() *SystemAnalysisRelationship {
	_tx, ok := sar.config.driver.(*txDriver)
	if !ok {
		panic("ent: SystemAnalysisRelationship is not a transactional entity")
	}
	sar.config.driver = _tx.drv
	return sar
}

// String implements the fmt.Stringer.
func (sar *SystemAnalysisRelationship) String() string {
	var builder strings.Builder
	builder.WriteString("SystemAnalysisRelationship(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sar.ID))
	builder.WriteString("analysis_id=")
	builder.WriteString(fmt.Sprintf("%v", sar.AnalysisID))
	builder.WriteString(", ")
	builder.WriteString("source_component_id=")
	builder.WriteString(fmt.Sprintf("%v", sar.SourceComponentID))
	builder.WriteString(", ")
	builder.WriteString("target_component_id=")
	builder.WriteString(fmt.Sprintf("%v", sar.TargetComponentID))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(sar.Description)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sar.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SystemAnalysisRelationships is a parsable slice of SystemAnalysisRelationship.
type SystemAnalysisRelationships []*SystemAnalysisRelationship
