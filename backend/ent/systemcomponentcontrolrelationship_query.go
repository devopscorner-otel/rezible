// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/systemcomponent"
	"github.com/rezible/rezible/ent/systemcomponentcontrolrelationship"
)

// SystemComponentControlRelationshipQuery is the builder for querying SystemComponentControlRelationship entities.
type SystemComponentControlRelationshipQuery struct {
	config
	ctx            *QueryContext
	order          []systemcomponentcontrolrelationship.OrderOption
	inters         []Interceptor
	predicates     []predicate.SystemComponentControlRelationship
	withController *SystemComponentQuery
	withControlled *SystemComponentQuery
	modifiers      []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SystemComponentControlRelationshipQuery builder.
func (sccrq *SystemComponentControlRelationshipQuery) Where(ps ...predicate.SystemComponentControlRelationship) *SystemComponentControlRelationshipQuery {
	sccrq.predicates = append(sccrq.predicates, ps...)
	return sccrq
}

// Limit the number of records to be returned by this query.
func (sccrq *SystemComponentControlRelationshipQuery) Limit(limit int) *SystemComponentControlRelationshipQuery {
	sccrq.ctx.Limit = &limit
	return sccrq
}

// Offset to start from.
func (sccrq *SystemComponentControlRelationshipQuery) Offset(offset int) *SystemComponentControlRelationshipQuery {
	sccrq.ctx.Offset = &offset
	return sccrq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sccrq *SystemComponentControlRelationshipQuery) Unique(unique bool) *SystemComponentControlRelationshipQuery {
	sccrq.ctx.Unique = &unique
	return sccrq
}

// Order specifies how the records should be ordered.
func (sccrq *SystemComponentControlRelationshipQuery) Order(o ...systemcomponentcontrolrelationship.OrderOption) *SystemComponentControlRelationshipQuery {
	sccrq.order = append(sccrq.order, o...)
	return sccrq
}

// QueryController chains the current query on the "controller" edge.
func (sccrq *SystemComponentControlRelationshipQuery) QueryController() *SystemComponentQuery {
	query := (&SystemComponentClient{config: sccrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sccrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sccrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(systemcomponentcontrolrelationship.Table, systemcomponentcontrolrelationship.FieldID, selector),
			sqlgraph.To(systemcomponent.Table, systemcomponent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, systemcomponentcontrolrelationship.ControllerTable, systemcomponentcontrolrelationship.ControllerColumn),
		)
		fromU = sqlgraph.SetNeighbors(sccrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryControlled chains the current query on the "controlled" edge.
func (sccrq *SystemComponentControlRelationshipQuery) QueryControlled() *SystemComponentQuery {
	query := (&SystemComponentClient{config: sccrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sccrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sccrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(systemcomponentcontrolrelationship.Table, systemcomponentcontrolrelationship.FieldID, selector),
			sqlgraph.To(systemcomponent.Table, systemcomponent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, systemcomponentcontrolrelationship.ControlledTable, systemcomponentcontrolrelationship.ControlledColumn),
		)
		fromU = sqlgraph.SetNeighbors(sccrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SystemComponentControlRelationship entity from the query.
// Returns a *NotFoundError when no SystemComponentControlRelationship was found.
func (sccrq *SystemComponentControlRelationshipQuery) First(ctx context.Context) (*SystemComponentControlRelationship, error) {
	nodes, err := sccrq.Limit(1).All(setContextOp(ctx, sccrq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{systemcomponentcontrolrelationship.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sccrq *SystemComponentControlRelationshipQuery) FirstX(ctx context.Context) *SystemComponentControlRelationship {
	node, err := sccrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SystemComponentControlRelationship ID from the query.
// Returns a *NotFoundError when no SystemComponentControlRelationship ID was found.
func (sccrq *SystemComponentControlRelationshipQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = sccrq.Limit(1).IDs(setContextOp(ctx, sccrq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{systemcomponentcontrolrelationship.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sccrq *SystemComponentControlRelationshipQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := sccrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SystemComponentControlRelationship entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SystemComponentControlRelationship entity is found.
// Returns a *NotFoundError when no SystemComponentControlRelationship entities are found.
func (sccrq *SystemComponentControlRelationshipQuery) Only(ctx context.Context) (*SystemComponentControlRelationship, error) {
	nodes, err := sccrq.Limit(2).All(setContextOp(ctx, sccrq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{systemcomponentcontrolrelationship.Label}
	default:
		return nil, &NotSingularError{systemcomponentcontrolrelationship.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sccrq *SystemComponentControlRelationshipQuery) OnlyX(ctx context.Context) *SystemComponentControlRelationship {
	node, err := sccrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SystemComponentControlRelationship ID in the query.
// Returns a *NotSingularError when more than one SystemComponentControlRelationship ID is found.
// Returns a *NotFoundError when no entities are found.
func (sccrq *SystemComponentControlRelationshipQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = sccrq.Limit(2).IDs(setContextOp(ctx, sccrq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{systemcomponentcontrolrelationship.Label}
	default:
		err = &NotSingularError{systemcomponentcontrolrelationship.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sccrq *SystemComponentControlRelationshipQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := sccrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SystemComponentControlRelationships.
func (sccrq *SystemComponentControlRelationshipQuery) All(ctx context.Context) ([]*SystemComponentControlRelationship, error) {
	ctx = setContextOp(ctx, sccrq.ctx, ent.OpQueryAll)
	if err := sccrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SystemComponentControlRelationship, *SystemComponentControlRelationshipQuery]()
	return withInterceptors[[]*SystemComponentControlRelationship](ctx, sccrq, qr, sccrq.inters)
}

// AllX is like All, but panics if an error occurs.
func (sccrq *SystemComponentControlRelationshipQuery) AllX(ctx context.Context) []*SystemComponentControlRelationship {
	nodes, err := sccrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SystemComponentControlRelationship IDs.
func (sccrq *SystemComponentControlRelationshipQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if sccrq.ctx.Unique == nil && sccrq.path != nil {
		sccrq.Unique(true)
	}
	ctx = setContextOp(ctx, sccrq.ctx, ent.OpQueryIDs)
	if err = sccrq.Select(systemcomponentcontrolrelationship.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sccrq *SystemComponentControlRelationshipQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := sccrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sccrq *SystemComponentControlRelationshipQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, sccrq.ctx, ent.OpQueryCount)
	if err := sccrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, sccrq, querierCount[*SystemComponentControlRelationshipQuery](), sccrq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (sccrq *SystemComponentControlRelationshipQuery) CountX(ctx context.Context) int {
	count, err := sccrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sccrq *SystemComponentControlRelationshipQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, sccrq.ctx, ent.OpQueryExist)
	switch _, err := sccrq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (sccrq *SystemComponentControlRelationshipQuery) ExistX(ctx context.Context) bool {
	exist, err := sccrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SystemComponentControlRelationshipQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sccrq *SystemComponentControlRelationshipQuery) Clone() *SystemComponentControlRelationshipQuery {
	if sccrq == nil {
		return nil
	}
	return &SystemComponentControlRelationshipQuery{
		config:         sccrq.config,
		ctx:            sccrq.ctx.Clone(),
		order:          append([]systemcomponentcontrolrelationship.OrderOption{}, sccrq.order...),
		inters:         append([]Interceptor{}, sccrq.inters...),
		predicates:     append([]predicate.SystemComponentControlRelationship{}, sccrq.predicates...),
		withController: sccrq.withController.Clone(),
		withControlled: sccrq.withControlled.Clone(),
		// clone intermediate query.
		sql:       sccrq.sql.Clone(),
		path:      sccrq.path,
		modifiers: append([]func(*sql.Selector){}, sccrq.modifiers...),
	}
}

// WithController tells the query-builder to eager-load the nodes that are connected to
// the "controller" edge. The optional arguments are used to configure the query builder of the edge.
func (sccrq *SystemComponentControlRelationshipQuery) WithController(opts ...func(*SystemComponentQuery)) *SystemComponentControlRelationshipQuery {
	query := (&SystemComponentClient{config: sccrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sccrq.withController = query
	return sccrq
}

// WithControlled tells the query-builder to eager-load the nodes that are connected to
// the "controlled" edge. The optional arguments are used to configure the query builder of the edge.
func (sccrq *SystemComponentControlRelationshipQuery) WithControlled(opts ...func(*SystemComponentQuery)) *SystemComponentControlRelationshipQuery {
	query := (&SystemComponentClient{config: sccrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sccrq.withControlled = query
	return sccrq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ControllerID uuid.UUID `json:"controller_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SystemComponentControlRelationship.Query().
//		GroupBy(systemcomponentcontrolrelationship.FieldControllerID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (sccrq *SystemComponentControlRelationshipQuery) GroupBy(field string, fields ...string) *SystemComponentControlRelationshipGroupBy {
	sccrq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SystemComponentControlRelationshipGroupBy{build: sccrq}
	grbuild.flds = &sccrq.ctx.Fields
	grbuild.label = systemcomponentcontrolrelationship.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ControllerID uuid.UUID `json:"controller_id,omitempty"`
//	}
//
//	client.SystemComponentControlRelationship.Query().
//		Select(systemcomponentcontrolrelationship.FieldControllerID).
//		Scan(ctx, &v)
func (sccrq *SystemComponentControlRelationshipQuery) Select(fields ...string) *SystemComponentControlRelationshipSelect {
	sccrq.ctx.Fields = append(sccrq.ctx.Fields, fields...)
	sbuild := &SystemComponentControlRelationshipSelect{SystemComponentControlRelationshipQuery: sccrq}
	sbuild.label = systemcomponentcontrolrelationship.Label
	sbuild.flds, sbuild.scan = &sccrq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SystemComponentControlRelationshipSelect configured with the given aggregations.
func (sccrq *SystemComponentControlRelationshipQuery) Aggregate(fns ...AggregateFunc) *SystemComponentControlRelationshipSelect {
	return sccrq.Select().Aggregate(fns...)
}

func (sccrq *SystemComponentControlRelationshipQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range sccrq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, sccrq); err != nil {
				return err
			}
		}
	}
	for _, f := range sccrq.ctx.Fields {
		if !systemcomponentcontrolrelationship.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if sccrq.path != nil {
		prev, err := sccrq.path(ctx)
		if err != nil {
			return err
		}
		sccrq.sql = prev
	}
	return nil
}

func (sccrq *SystemComponentControlRelationshipQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SystemComponentControlRelationship, error) {
	var (
		nodes       = []*SystemComponentControlRelationship{}
		_spec       = sccrq.querySpec()
		loadedTypes = [2]bool{
			sccrq.withController != nil,
			sccrq.withControlled != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SystemComponentControlRelationship).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SystemComponentControlRelationship{config: sccrq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(sccrq.modifiers) > 0 {
		_spec.Modifiers = sccrq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sccrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := sccrq.withController; query != nil {
		if err := sccrq.loadController(ctx, query, nodes, nil,
			func(n *SystemComponentControlRelationship, e *SystemComponent) { n.Edges.Controller = e }); err != nil {
			return nil, err
		}
	}
	if query := sccrq.withControlled; query != nil {
		if err := sccrq.loadControlled(ctx, query, nodes, nil,
			func(n *SystemComponentControlRelationship, e *SystemComponent) { n.Edges.Controlled = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (sccrq *SystemComponentControlRelationshipQuery) loadController(ctx context.Context, query *SystemComponentQuery, nodes []*SystemComponentControlRelationship, init func(*SystemComponentControlRelationship), assign func(*SystemComponentControlRelationship, *SystemComponent)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*SystemComponentControlRelationship)
	for i := range nodes {
		fk := nodes[i].ControllerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(systemcomponent.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "controller_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sccrq *SystemComponentControlRelationshipQuery) loadControlled(ctx context.Context, query *SystemComponentQuery, nodes []*SystemComponentControlRelationship, init func(*SystemComponentControlRelationship), assign func(*SystemComponentControlRelationship, *SystemComponent)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*SystemComponentControlRelationship)
	for i := range nodes {
		fk := nodes[i].ControlledID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(systemcomponent.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "controlled_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (sccrq *SystemComponentControlRelationshipQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sccrq.querySpec()
	if len(sccrq.modifiers) > 0 {
		_spec.Modifiers = sccrq.modifiers
	}
	_spec.Node.Columns = sccrq.ctx.Fields
	if len(sccrq.ctx.Fields) > 0 {
		_spec.Unique = sccrq.ctx.Unique != nil && *sccrq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, sccrq.driver, _spec)
}

func (sccrq *SystemComponentControlRelationshipQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(systemcomponentcontrolrelationship.Table, systemcomponentcontrolrelationship.Columns, sqlgraph.NewFieldSpec(systemcomponentcontrolrelationship.FieldID, field.TypeUUID))
	_spec.From = sccrq.sql
	if unique := sccrq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if sccrq.path != nil {
		_spec.Unique = true
	}
	if fields := sccrq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, systemcomponentcontrolrelationship.FieldID)
		for i := range fields {
			if fields[i] != systemcomponentcontrolrelationship.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if sccrq.withController != nil {
			_spec.Node.AddColumnOnce(systemcomponentcontrolrelationship.FieldControllerID)
		}
		if sccrq.withControlled != nil {
			_spec.Node.AddColumnOnce(systemcomponentcontrolrelationship.FieldControlledID)
		}
	}
	if ps := sccrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sccrq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sccrq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sccrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sccrq *SystemComponentControlRelationshipQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sccrq.driver.Dialect())
	t1 := builder.Table(systemcomponentcontrolrelationship.Table)
	columns := sccrq.ctx.Fields
	if len(columns) == 0 {
		columns = systemcomponentcontrolrelationship.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sccrq.sql != nil {
		selector = sccrq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sccrq.ctx.Unique != nil && *sccrq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range sccrq.modifiers {
		m(selector)
	}
	for _, p := range sccrq.predicates {
		p(selector)
	}
	for _, p := range sccrq.order {
		p(selector)
	}
	if offset := sccrq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sccrq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (sccrq *SystemComponentControlRelationshipQuery) Modify(modifiers ...func(s *sql.Selector)) *SystemComponentControlRelationshipSelect {
	sccrq.modifiers = append(sccrq.modifiers, modifiers...)
	return sccrq.Select()
}

// SystemComponentControlRelationshipGroupBy is the group-by builder for SystemComponentControlRelationship entities.
type SystemComponentControlRelationshipGroupBy struct {
	selector
	build *SystemComponentControlRelationshipQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sccrgb *SystemComponentControlRelationshipGroupBy) Aggregate(fns ...AggregateFunc) *SystemComponentControlRelationshipGroupBy {
	sccrgb.fns = append(sccrgb.fns, fns...)
	return sccrgb
}

// Scan applies the selector query and scans the result into the given value.
func (sccrgb *SystemComponentControlRelationshipGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sccrgb.build.ctx, ent.OpQueryGroupBy)
	if err := sccrgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SystemComponentControlRelationshipQuery, *SystemComponentControlRelationshipGroupBy](ctx, sccrgb.build, sccrgb, sccrgb.build.inters, v)
}

func (sccrgb *SystemComponentControlRelationshipGroupBy) sqlScan(ctx context.Context, root *SystemComponentControlRelationshipQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(sccrgb.fns))
	for _, fn := range sccrgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*sccrgb.flds)+len(sccrgb.fns))
		for _, f := range *sccrgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*sccrgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sccrgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SystemComponentControlRelationshipSelect is the builder for selecting fields of SystemComponentControlRelationship entities.
type SystemComponentControlRelationshipSelect struct {
	*SystemComponentControlRelationshipQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (sccrs *SystemComponentControlRelationshipSelect) Aggregate(fns ...AggregateFunc) *SystemComponentControlRelationshipSelect {
	sccrs.fns = append(sccrs.fns, fns...)
	return sccrs
}

// Scan applies the selector query and scans the result into the given value.
func (sccrs *SystemComponentControlRelationshipSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sccrs.ctx, ent.OpQuerySelect)
	if err := sccrs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SystemComponentControlRelationshipQuery, *SystemComponentControlRelationshipSelect](ctx, sccrs.SystemComponentControlRelationshipQuery, sccrs, sccrs.inters, v)
}

func (sccrs *SystemComponentControlRelationshipSelect) sqlScan(ctx context.Context, root *SystemComponentControlRelationshipQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(sccrs.fns))
	for _, fn := range sccrs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*sccrs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sccrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (sccrs *SystemComponentControlRelationshipSelect) Modify(modifiers ...func(s *sql.Selector)) *SystemComponentControlRelationshipSelect {
	sccrs.modifiers = append(sccrs.modifiers, modifiers...)
	return sccrs
}
