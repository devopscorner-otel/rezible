// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/oncallusershift"
	"github.com/rezible/rezible/ent/oncallusershiftcover"
	"github.com/rezible/rezible/ent/user"
)

// OncallUserShiftCover is the model entity for the OncallUserShiftCover schema.
type OncallUserShiftCover struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// ShiftID holds the value of the "shift_id" field.
	ShiftID uuid.UUID `json:"shift_id,omitempty"`
	// StartAt holds the value of the "start_at" field.
	StartAt time.Time `json:"start_at,omitempty"`
	// EndAt holds the value of the "end_at" field.
	EndAt time.Time `json:"end_at,omitempty"`
	// ProviderID holds the value of the "provider_id" field.
	ProviderID string `json:"provider_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OncallUserShiftCoverQuery when eager-loading is set.
	Edges        OncallUserShiftCoverEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OncallUserShiftCoverEdges holds the relations/edges for other nodes in the graph.
type OncallUserShiftCoverEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Shift holds the value of the shift edge.
	Shift *OncallUserShift `json:"shift,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OncallUserShiftCoverEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ShiftOrErr returns the Shift value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OncallUserShiftCoverEdges) ShiftOrErr() (*OncallUserShift, error) {
	if e.Shift != nil {
		return e.Shift, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: oncallusershift.Label}
	}
	return nil, &NotLoadedError{edge: "shift"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OncallUserShiftCover) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case oncallusershiftcover.FieldProviderID:
			values[i] = new(sql.NullString)
		case oncallusershiftcover.FieldStartAt, oncallusershiftcover.FieldEndAt:
			values[i] = new(sql.NullTime)
		case oncallusershiftcover.FieldID, oncallusershiftcover.FieldUserID, oncallusershiftcover.FieldShiftID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OncallUserShiftCover fields.
func (ousc *OncallUserShiftCover) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case oncallusershiftcover.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ousc.ID = *value
			}
		case oncallusershiftcover.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				ousc.UserID = *value
			}
		case oncallusershiftcover.FieldShiftID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field shift_id", values[i])
			} else if value != nil {
				ousc.ShiftID = *value
			}
		case oncallusershiftcover.FieldStartAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_at", values[i])
			} else if value.Valid {
				ousc.StartAt = value.Time
			}
		case oncallusershiftcover.FieldEndAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_at", values[i])
			} else if value.Valid {
				ousc.EndAt = value.Time
			}
		case oncallusershiftcover.FieldProviderID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_id", values[i])
			} else if value.Valid {
				ousc.ProviderID = value.String
			}
		default:
			ousc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OncallUserShiftCover.
// This includes values selected through modifiers, order, etc.
func (ousc *OncallUserShiftCover) Value(name string) (ent.Value, error) {
	return ousc.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the OncallUserShiftCover entity.
func (ousc *OncallUserShiftCover) QueryUser() *UserQuery {
	return NewOncallUserShiftCoverClient(ousc.config).QueryUser(ousc)
}

// QueryShift queries the "shift" edge of the OncallUserShiftCover entity.
func (ousc *OncallUserShiftCover) QueryShift() *OncallUserShiftQuery {
	return NewOncallUserShiftCoverClient(ousc.config).QueryShift(ousc)
}

// Update returns a builder for updating this OncallUserShiftCover.
// Note that you need to call OncallUserShiftCover.Unwrap() before calling this method if this OncallUserShiftCover
// was returned from a transaction, and the transaction was committed or rolled back.
func (ousc *OncallUserShiftCover) Update() *OncallUserShiftCoverUpdateOne {
	return NewOncallUserShiftCoverClient(ousc.config).UpdateOne(ousc)
}

// Unwrap unwraps the OncallUserShiftCover entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ousc *OncallUserShiftCover) Unwrap() *OncallUserShiftCover {
	_tx, ok := ousc.config.driver.(*txDriver)
	if !ok {
		panic("ent: OncallUserShiftCover is not a transactional entity")
	}
	ousc.config.driver = _tx.drv
	return ousc
}

// String implements the fmt.Stringer.
func (ousc *OncallUserShiftCover) String() string {
	var builder strings.Builder
	builder.WriteString("OncallUserShiftCover(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ousc.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ousc.UserID))
	builder.WriteString(", ")
	builder.WriteString("shift_id=")
	builder.WriteString(fmt.Sprintf("%v", ousc.ShiftID))
	builder.WriteString(", ")
	builder.WriteString("start_at=")
	builder.WriteString(ousc.StartAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_at=")
	builder.WriteString(ousc.EndAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("provider_id=")
	builder.WriteString(ousc.ProviderID)
	builder.WriteByte(')')
	return builder.String()
}

// OncallUserShiftCovers is a parsable slice of OncallUserShiftCover.
type OncallUserShiftCovers []*OncallUserShiftCover
