// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/retrospective"
	"github.com/rezible/rezible/ent/systemanalysis"
	"github.com/rezible/rezible/ent/systemanalysiscomponent"
	"github.com/rezible/rezible/ent/systemanalysisrelationship"
	"github.com/rezible/rezible/ent/systemcomponent"
	"github.com/rezible/rezible/ent/tenant"
)

// SystemAnalysisQuery is the builder for querying SystemAnalysis entities.
type SystemAnalysisQuery struct {
	config
	ctx                    *QueryContext
	order                  []systemanalysis.OrderOption
	inters                 []Interceptor
	predicates             []predicate.SystemAnalysis
	withTenant             *TenantQuery
	withRetrospective      *RetrospectiveQuery
	withComponents         *SystemComponentQuery
	withRelationships      *SystemAnalysisRelationshipQuery
	withAnalysisComponents *SystemAnalysisComponentQuery
	modifiers              []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SystemAnalysisQuery builder.
func (saq *SystemAnalysisQuery) Where(ps ...predicate.SystemAnalysis) *SystemAnalysisQuery {
	saq.predicates = append(saq.predicates, ps...)
	return saq
}

// Limit the number of records to be returned by this query.
func (saq *SystemAnalysisQuery) Limit(limit int) *SystemAnalysisQuery {
	saq.ctx.Limit = &limit
	return saq
}

// Offset to start from.
func (saq *SystemAnalysisQuery) Offset(offset int) *SystemAnalysisQuery {
	saq.ctx.Offset = &offset
	return saq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (saq *SystemAnalysisQuery) Unique(unique bool) *SystemAnalysisQuery {
	saq.ctx.Unique = &unique
	return saq
}

// Order specifies how the records should be ordered.
func (saq *SystemAnalysisQuery) Order(o ...systemanalysis.OrderOption) *SystemAnalysisQuery {
	saq.order = append(saq.order, o...)
	return saq
}

// QueryTenant chains the current query on the "tenant" edge.
func (saq *SystemAnalysisQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: saq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := saq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := saq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(systemanalysis.Table, systemanalysis.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, systemanalysis.TenantTable, systemanalysis.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(saq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRetrospective chains the current query on the "retrospective" edge.
func (saq *SystemAnalysisQuery) QueryRetrospective() *RetrospectiveQuery {
	query := (&RetrospectiveClient{config: saq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := saq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := saq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(systemanalysis.Table, systemanalysis.FieldID, selector),
			sqlgraph.To(retrospective.Table, retrospective.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, systemanalysis.RetrospectiveTable, systemanalysis.RetrospectiveColumn),
		)
		fromU = sqlgraph.SetNeighbors(saq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryComponents chains the current query on the "components" edge.
func (saq *SystemAnalysisQuery) QueryComponents() *SystemComponentQuery {
	query := (&SystemComponentClient{config: saq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := saq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := saq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(systemanalysis.Table, systemanalysis.FieldID, selector),
			sqlgraph.To(systemcomponent.Table, systemcomponent.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, systemanalysis.ComponentsTable, systemanalysis.ComponentsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(saq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRelationships chains the current query on the "relationships" edge.
func (saq *SystemAnalysisQuery) QueryRelationships() *SystemAnalysisRelationshipQuery {
	query := (&SystemAnalysisRelationshipClient{config: saq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := saq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := saq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(systemanalysis.Table, systemanalysis.FieldID, selector),
			sqlgraph.To(systemanalysisrelationship.Table, systemanalysisrelationship.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, systemanalysis.RelationshipsTable, systemanalysis.RelationshipsColumn),
		)
		fromU = sqlgraph.SetNeighbors(saq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAnalysisComponents chains the current query on the "analysis_components" edge.
func (saq *SystemAnalysisQuery) QueryAnalysisComponents() *SystemAnalysisComponentQuery {
	query := (&SystemAnalysisComponentClient{config: saq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := saq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := saq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(systemanalysis.Table, systemanalysis.FieldID, selector),
			sqlgraph.To(systemanalysiscomponent.Table, systemanalysiscomponent.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, systemanalysis.AnalysisComponentsTable, systemanalysis.AnalysisComponentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(saq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SystemAnalysis entity from the query.
// Returns a *NotFoundError when no SystemAnalysis was found.
func (saq *SystemAnalysisQuery) First(ctx context.Context) (*SystemAnalysis, error) {
	nodes, err := saq.Limit(1).All(setContextOp(ctx, saq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{systemanalysis.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (saq *SystemAnalysisQuery) FirstX(ctx context.Context) *SystemAnalysis {
	node, err := saq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SystemAnalysis ID from the query.
// Returns a *NotFoundError when no SystemAnalysis ID was found.
func (saq *SystemAnalysisQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = saq.Limit(1).IDs(setContextOp(ctx, saq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{systemanalysis.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (saq *SystemAnalysisQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := saq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SystemAnalysis entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SystemAnalysis entity is found.
// Returns a *NotFoundError when no SystemAnalysis entities are found.
func (saq *SystemAnalysisQuery) Only(ctx context.Context) (*SystemAnalysis, error) {
	nodes, err := saq.Limit(2).All(setContextOp(ctx, saq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{systemanalysis.Label}
	default:
		return nil, &NotSingularError{systemanalysis.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (saq *SystemAnalysisQuery) OnlyX(ctx context.Context) *SystemAnalysis {
	node, err := saq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SystemAnalysis ID in the query.
// Returns a *NotSingularError when more than one SystemAnalysis ID is found.
// Returns a *NotFoundError when no entities are found.
func (saq *SystemAnalysisQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = saq.Limit(2).IDs(setContextOp(ctx, saq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{systemanalysis.Label}
	default:
		err = &NotSingularError{systemanalysis.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (saq *SystemAnalysisQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := saq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SystemAnalyses.
func (saq *SystemAnalysisQuery) All(ctx context.Context) ([]*SystemAnalysis, error) {
	ctx = setContextOp(ctx, saq.ctx, ent.OpQueryAll)
	if err := saq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SystemAnalysis, *SystemAnalysisQuery]()
	return withInterceptors[[]*SystemAnalysis](ctx, saq, qr, saq.inters)
}

// AllX is like All, but panics if an error occurs.
func (saq *SystemAnalysisQuery) AllX(ctx context.Context) []*SystemAnalysis {
	nodes, err := saq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SystemAnalysis IDs.
func (saq *SystemAnalysisQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if saq.ctx.Unique == nil && saq.path != nil {
		saq.Unique(true)
	}
	ctx = setContextOp(ctx, saq.ctx, ent.OpQueryIDs)
	if err = saq.Select(systemanalysis.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (saq *SystemAnalysisQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := saq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (saq *SystemAnalysisQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, saq.ctx, ent.OpQueryCount)
	if err := saq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, saq, querierCount[*SystemAnalysisQuery](), saq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (saq *SystemAnalysisQuery) CountX(ctx context.Context) int {
	count, err := saq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (saq *SystemAnalysisQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, saq.ctx, ent.OpQueryExist)
	switch _, err := saq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (saq *SystemAnalysisQuery) ExistX(ctx context.Context) bool {
	exist, err := saq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SystemAnalysisQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (saq *SystemAnalysisQuery) Clone() *SystemAnalysisQuery {
	if saq == nil {
		return nil
	}
	return &SystemAnalysisQuery{
		config:                 saq.config,
		ctx:                    saq.ctx.Clone(),
		order:                  append([]systemanalysis.OrderOption{}, saq.order...),
		inters:                 append([]Interceptor{}, saq.inters...),
		predicates:             append([]predicate.SystemAnalysis{}, saq.predicates...),
		withTenant:             saq.withTenant.Clone(),
		withRetrospective:      saq.withRetrospective.Clone(),
		withComponents:         saq.withComponents.Clone(),
		withRelationships:      saq.withRelationships.Clone(),
		withAnalysisComponents: saq.withAnalysisComponents.Clone(),
		// clone intermediate query.
		sql:       saq.sql.Clone(),
		path:      saq.path,
		modifiers: append([]func(*sql.Selector){}, saq.modifiers...),
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (saq *SystemAnalysisQuery) WithTenant(opts ...func(*TenantQuery)) *SystemAnalysisQuery {
	query := (&TenantClient{config: saq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	saq.withTenant = query
	return saq
}

// WithRetrospective tells the query-builder to eager-load the nodes that are connected to
// the "retrospective" edge. The optional arguments are used to configure the query builder of the edge.
func (saq *SystemAnalysisQuery) WithRetrospective(opts ...func(*RetrospectiveQuery)) *SystemAnalysisQuery {
	query := (&RetrospectiveClient{config: saq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	saq.withRetrospective = query
	return saq
}

// WithComponents tells the query-builder to eager-load the nodes that are connected to
// the "components" edge. The optional arguments are used to configure the query builder of the edge.
func (saq *SystemAnalysisQuery) WithComponents(opts ...func(*SystemComponentQuery)) *SystemAnalysisQuery {
	query := (&SystemComponentClient{config: saq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	saq.withComponents = query
	return saq
}

// WithRelationships tells the query-builder to eager-load the nodes that are connected to
// the "relationships" edge. The optional arguments are used to configure the query builder of the edge.
func (saq *SystemAnalysisQuery) WithRelationships(opts ...func(*SystemAnalysisRelationshipQuery)) *SystemAnalysisQuery {
	query := (&SystemAnalysisRelationshipClient{config: saq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	saq.withRelationships = query
	return saq
}

// WithAnalysisComponents tells the query-builder to eager-load the nodes that are connected to
// the "analysis_components" edge. The optional arguments are used to configure the query builder of the edge.
func (saq *SystemAnalysisQuery) WithAnalysisComponents(opts ...func(*SystemAnalysisComponentQuery)) *SystemAnalysisQuery {
	query := (&SystemAnalysisComponentClient{config: saq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	saq.withAnalysisComponents = query
	return saq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID int `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SystemAnalysis.Query().
//		GroupBy(systemanalysis.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (saq *SystemAnalysisQuery) GroupBy(field string, fields ...string) *SystemAnalysisGroupBy {
	saq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SystemAnalysisGroupBy{build: saq}
	grbuild.flds = &saq.ctx.Fields
	grbuild.label = systemanalysis.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID int `json:"tenant_id,omitempty"`
//	}
//
//	client.SystemAnalysis.Query().
//		Select(systemanalysis.FieldTenantID).
//		Scan(ctx, &v)
func (saq *SystemAnalysisQuery) Select(fields ...string) *SystemAnalysisSelect {
	saq.ctx.Fields = append(saq.ctx.Fields, fields...)
	sbuild := &SystemAnalysisSelect{SystemAnalysisQuery: saq}
	sbuild.label = systemanalysis.Label
	sbuild.flds, sbuild.scan = &saq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SystemAnalysisSelect configured with the given aggregations.
func (saq *SystemAnalysisQuery) Aggregate(fns ...AggregateFunc) *SystemAnalysisSelect {
	return saq.Select().Aggregate(fns...)
}

func (saq *SystemAnalysisQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range saq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, saq); err != nil {
				return err
			}
		}
	}
	for _, f := range saq.ctx.Fields {
		if !systemanalysis.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if saq.path != nil {
		prev, err := saq.path(ctx)
		if err != nil {
			return err
		}
		saq.sql = prev
	}
	if systemanalysis.Policy == nil {
		return errors.New("ent: uninitialized systemanalysis.Policy (forgotten import ent/runtime?)")
	}
	if err := systemanalysis.Policy.EvalQuery(ctx, saq); err != nil {
		return err
	}
	return nil
}

func (saq *SystemAnalysisQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SystemAnalysis, error) {
	var (
		nodes       = []*SystemAnalysis{}
		_spec       = saq.querySpec()
		loadedTypes = [5]bool{
			saq.withTenant != nil,
			saq.withRetrospective != nil,
			saq.withComponents != nil,
			saq.withRelationships != nil,
			saq.withAnalysisComponents != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SystemAnalysis).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SystemAnalysis{config: saq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(saq.modifiers) > 0 {
		_spec.Modifiers = saq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, saq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := saq.withTenant; query != nil {
		if err := saq.loadTenant(ctx, query, nodes, nil,
			func(n *SystemAnalysis, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := saq.withRetrospective; query != nil {
		if err := saq.loadRetrospective(ctx, query, nodes, nil,
			func(n *SystemAnalysis, e *Retrospective) { n.Edges.Retrospective = e }); err != nil {
			return nil, err
		}
	}
	if query := saq.withComponents; query != nil {
		if err := saq.loadComponents(ctx, query, nodes,
			func(n *SystemAnalysis) { n.Edges.Components = []*SystemComponent{} },
			func(n *SystemAnalysis, e *SystemComponent) { n.Edges.Components = append(n.Edges.Components, e) }); err != nil {
			return nil, err
		}
	}
	if query := saq.withRelationships; query != nil {
		if err := saq.loadRelationships(ctx, query, nodes,
			func(n *SystemAnalysis) { n.Edges.Relationships = []*SystemAnalysisRelationship{} },
			func(n *SystemAnalysis, e *SystemAnalysisRelationship) {
				n.Edges.Relationships = append(n.Edges.Relationships, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := saq.withAnalysisComponents; query != nil {
		if err := saq.loadAnalysisComponents(ctx, query, nodes,
			func(n *SystemAnalysis) { n.Edges.AnalysisComponents = []*SystemAnalysisComponent{} },
			func(n *SystemAnalysis, e *SystemAnalysisComponent) {
				n.Edges.AnalysisComponents = append(n.Edges.AnalysisComponents, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (saq *SystemAnalysisQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*SystemAnalysis, init func(*SystemAnalysis), assign func(*SystemAnalysis, *Tenant)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*SystemAnalysis)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (saq *SystemAnalysisQuery) loadRetrospective(ctx context.Context, query *RetrospectiveQuery, nodes []*SystemAnalysis, init func(*SystemAnalysis), assign func(*SystemAnalysis, *Retrospective)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*SystemAnalysis)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(retrospective.FieldSystemAnalysisID)
	}
	query.Where(predicate.Retrospective(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(systemanalysis.RetrospectiveColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.SystemAnalysisID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "system_analysis_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (saq *SystemAnalysisQuery) loadComponents(ctx context.Context, query *SystemComponentQuery, nodes []*SystemAnalysis, init func(*SystemAnalysis), assign func(*SystemAnalysis, *SystemComponent)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*SystemAnalysis)
	nids := make(map[uuid.UUID]map[*SystemAnalysis]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(systemanalysis.ComponentsTable)
		s.Join(joinT).On(s.C(systemcomponent.FieldID), joinT.C(systemanalysis.ComponentsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(systemanalysis.ComponentsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(systemanalysis.ComponentsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*SystemAnalysis]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*SystemComponent](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "components" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (saq *SystemAnalysisQuery) loadRelationships(ctx context.Context, query *SystemAnalysisRelationshipQuery, nodes []*SystemAnalysis, init func(*SystemAnalysis), assign func(*SystemAnalysis, *SystemAnalysisRelationship)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*SystemAnalysis)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(systemanalysisrelationship.FieldAnalysisID)
	}
	query.Where(predicate.SystemAnalysisRelationship(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(systemanalysis.RelationshipsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.AnalysisID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "analysis_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (saq *SystemAnalysisQuery) loadAnalysisComponents(ctx context.Context, query *SystemAnalysisComponentQuery, nodes []*SystemAnalysis, init func(*SystemAnalysis), assign func(*SystemAnalysis, *SystemAnalysisComponent)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*SystemAnalysis)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(systemanalysiscomponent.FieldAnalysisID)
	}
	query.Where(predicate.SystemAnalysisComponent(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(systemanalysis.AnalysisComponentsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.AnalysisID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "analysis_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (saq *SystemAnalysisQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := saq.querySpec()
	if len(saq.modifiers) > 0 {
		_spec.Modifiers = saq.modifiers
	}
	_spec.Node.Columns = saq.ctx.Fields
	if len(saq.ctx.Fields) > 0 {
		_spec.Unique = saq.ctx.Unique != nil && *saq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, saq.driver, _spec)
}

func (saq *SystemAnalysisQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(systemanalysis.Table, systemanalysis.Columns, sqlgraph.NewFieldSpec(systemanalysis.FieldID, field.TypeUUID))
	_spec.From = saq.sql
	if unique := saq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if saq.path != nil {
		_spec.Unique = true
	}
	if fields := saq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, systemanalysis.FieldID)
		for i := range fields {
			if fields[i] != systemanalysis.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if saq.withTenant != nil {
			_spec.Node.AddColumnOnce(systemanalysis.FieldTenantID)
		}
	}
	if ps := saq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := saq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := saq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := saq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (saq *SystemAnalysisQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(saq.driver.Dialect())
	t1 := builder.Table(systemanalysis.Table)
	columns := saq.ctx.Fields
	if len(columns) == 0 {
		columns = systemanalysis.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if saq.sql != nil {
		selector = saq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if saq.ctx.Unique != nil && *saq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range saq.modifiers {
		m(selector)
	}
	for _, p := range saq.predicates {
		p(selector)
	}
	for _, p := range saq.order {
		p(selector)
	}
	if offset := saq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := saq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (saq *SystemAnalysisQuery) Modify(modifiers ...func(s *sql.Selector)) *SystemAnalysisSelect {
	saq.modifiers = append(saq.modifiers, modifiers...)
	return saq.Select()
}

// SystemAnalysisGroupBy is the group-by builder for SystemAnalysis entities.
type SystemAnalysisGroupBy struct {
	selector
	build *SystemAnalysisQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sagb *SystemAnalysisGroupBy) Aggregate(fns ...AggregateFunc) *SystemAnalysisGroupBy {
	sagb.fns = append(sagb.fns, fns...)
	return sagb
}

// Scan applies the selector query and scans the result into the given value.
func (sagb *SystemAnalysisGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sagb.build.ctx, ent.OpQueryGroupBy)
	if err := sagb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SystemAnalysisQuery, *SystemAnalysisGroupBy](ctx, sagb.build, sagb, sagb.build.inters, v)
}

func (sagb *SystemAnalysisGroupBy) sqlScan(ctx context.Context, root *SystemAnalysisQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(sagb.fns))
	for _, fn := range sagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*sagb.flds)+len(sagb.fns))
		for _, f := range *sagb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*sagb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sagb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SystemAnalysisSelect is the builder for selecting fields of SystemAnalysis entities.
type SystemAnalysisSelect struct {
	*SystemAnalysisQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (sas *SystemAnalysisSelect) Aggregate(fns ...AggregateFunc) *SystemAnalysisSelect {
	sas.fns = append(sas.fns, fns...)
	return sas
}

// Scan applies the selector query and scans the result into the given value.
func (sas *SystemAnalysisSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sas.ctx, ent.OpQuerySelect)
	if err := sas.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SystemAnalysisQuery, *SystemAnalysisSelect](ctx, sas.SystemAnalysisQuery, sas, sas.inters, v)
}

func (sas *SystemAnalysisSelect) sqlScan(ctx context.Context, root *SystemAnalysisQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(sas.fns))
	for _, fn := range sas.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*sas.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (sas *SystemAnalysisSelect) Modify(modifiers ...func(s *sql.Selector)) *SystemAnalysisSelect {
	sas.modifiers = append(sas.modifiers, modifiers...)
	return sas
}
