// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/alert"
	"github.com/rezible/rezible/ent/oncallannotation"
	"github.com/rezible/rezible/ent/oncallevent"
	"github.com/rezible/rezible/ent/oncallroster"
	"github.com/rezible/rezible/ent/predicate"
)

// OncallEventUpdate is the builder for updating OncallEvent entities.
type OncallEventUpdate struct {
	config
	hooks     []Hook
	mutation  *OncallEventMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OncallEventUpdate builder.
func (oeu *OncallEventUpdate) Where(ps ...predicate.OncallEvent) *OncallEventUpdate {
	oeu.mutation.Where(ps...)
	return oeu
}

// SetProviderID sets the "provider_id" field.
func (oeu *OncallEventUpdate) SetProviderID(s string) *OncallEventUpdate {
	oeu.mutation.SetProviderID(s)
	return oeu
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (oeu *OncallEventUpdate) SetNillableProviderID(s *string) *OncallEventUpdate {
	if s != nil {
		oeu.SetProviderID(*s)
	}
	return oeu
}

// SetRosterID sets the "roster_id" field.
func (oeu *OncallEventUpdate) SetRosterID(u uuid.UUID) *OncallEventUpdate {
	oeu.mutation.SetRosterID(u)
	return oeu
}

// SetNillableRosterID sets the "roster_id" field if the given value is not nil.
func (oeu *OncallEventUpdate) SetNillableRosterID(u *uuid.UUID) *OncallEventUpdate {
	if u != nil {
		oeu.SetRosterID(*u)
	}
	return oeu
}

// ClearRosterID clears the value of the "roster_id" field.
func (oeu *OncallEventUpdate) ClearRosterID() *OncallEventUpdate {
	oeu.mutation.ClearRosterID()
	return oeu
}

// SetTimestamp sets the "timestamp" field.
func (oeu *OncallEventUpdate) SetTimestamp(t time.Time) *OncallEventUpdate {
	oeu.mutation.SetTimestamp(t)
	return oeu
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (oeu *OncallEventUpdate) SetNillableTimestamp(t *time.Time) *OncallEventUpdate {
	if t != nil {
		oeu.SetTimestamp(*t)
	}
	return oeu
}

// SetKind sets the "kind" field.
func (oeu *OncallEventUpdate) SetKind(s string) *OncallEventUpdate {
	oeu.mutation.SetKind(s)
	return oeu
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (oeu *OncallEventUpdate) SetNillableKind(s *string) *OncallEventUpdate {
	if s != nil {
		oeu.SetKind(*s)
	}
	return oeu
}

// SetTitle sets the "title" field.
func (oeu *OncallEventUpdate) SetTitle(s string) *OncallEventUpdate {
	oeu.mutation.SetTitle(s)
	return oeu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (oeu *OncallEventUpdate) SetNillableTitle(s *string) *OncallEventUpdate {
	if s != nil {
		oeu.SetTitle(*s)
	}
	return oeu
}

// SetDescription sets the "description" field.
func (oeu *OncallEventUpdate) SetDescription(s string) *OncallEventUpdate {
	oeu.mutation.SetDescription(s)
	return oeu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (oeu *OncallEventUpdate) SetNillableDescription(s *string) *OncallEventUpdate {
	if s != nil {
		oeu.SetDescription(*s)
	}
	return oeu
}

// SetSource sets the "source" field.
func (oeu *OncallEventUpdate) SetSource(s string) *OncallEventUpdate {
	oeu.mutation.SetSource(s)
	return oeu
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (oeu *OncallEventUpdate) SetNillableSource(s *string) *OncallEventUpdate {
	if s != nil {
		oeu.SetSource(*s)
	}
	return oeu
}

// SetRoster sets the "roster" edge to the OncallRoster entity.
func (oeu *OncallEventUpdate) SetRoster(o *OncallRoster) *OncallEventUpdate {
	return oeu.SetRosterID(o.ID)
}

// SetAlertID sets the "alert" edge to the Alert entity by ID.
func (oeu *OncallEventUpdate) SetAlertID(id uuid.UUID) *OncallEventUpdate {
	oeu.mutation.SetAlertID(id)
	return oeu
}

// SetNillableAlertID sets the "alert" edge to the Alert entity by ID if the given value is not nil.
func (oeu *OncallEventUpdate) SetNillableAlertID(id *uuid.UUID) *OncallEventUpdate {
	if id != nil {
		oeu = oeu.SetAlertID(*id)
	}
	return oeu
}

// SetAlert sets the "alert" edge to the Alert entity.
func (oeu *OncallEventUpdate) SetAlert(a *Alert) *OncallEventUpdate {
	return oeu.SetAlertID(a.ID)
}

// AddAnnotationIDs adds the "annotations" edge to the OncallAnnotation entity by IDs.
func (oeu *OncallEventUpdate) AddAnnotationIDs(ids ...uuid.UUID) *OncallEventUpdate {
	oeu.mutation.AddAnnotationIDs(ids...)
	return oeu
}

// AddAnnotations adds the "annotations" edges to the OncallAnnotation entity.
func (oeu *OncallEventUpdate) AddAnnotations(o ...*OncallAnnotation) *OncallEventUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oeu.AddAnnotationIDs(ids...)
}

// Mutation returns the OncallEventMutation object of the builder.
func (oeu *OncallEventUpdate) Mutation() *OncallEventMutation {
	return oeu.mutation
}

// ClearRoster clears the "roster" edge to the OncallRoster entity.
func (oeu *OncallEventUpdate) ClearRoster() *OncallEventUpdate {
	oeu.mutation.ClearRoster()
	return oeu
}

// ClearAlert clears the "alert" edge to the Alert entity.
func (oeu *OncallEventUpdate) ClearAlert() *OncallEventUpdate {
	oeu.mutation.ClearAlert()
	return oeu
}

// ClearAnnotations clears all "annotations" edges to the OncallAnnotation entity.
func (oeu *OncallEventUpdate) ClearAnnotations() *OncallEventUpdate {
	oeu.mutation.ClearAnnotations()
	return oeu
}

// RemoveAnnotationIDs removes the "annotations" edge to OncallAnnotation entities by IDs.
func (oeu *OncallEventUpdate) RemoveAnnotationIDs(ids ...uuid.UUID) *OncallEventUpdate {
	oeu.mutation.RemoveAnnotationIDs(ids...)
	return oeu
}

// RemoveAnnotations removes "annotations" edges to OncallAnnotation entities.
func (oeu *OncallEventUpdate) RemoveAnnotations(o ...*OncallAnnotation) *OncallEventUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oeu.RemoveAnnotationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oeu *OncallEventUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, oeu.sqlSave, oeu.mutation, oeu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oeu *OncallEventUpdate) SaveX(ctx context.Context) int {
	affected, err := oeu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oeu *OncallEventUpdate) Exec(ctx context.Context) error {
	_, err := oeu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oeu *OncallEventUpdate) ExecX(ctx context.Context) {
	if err := oeu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (oeu *OncallEventUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OncallEventUpdate {
	oeu.modifiers = append(oeu.modifiers, modifiers...)
	return oeu
}

func (oeu *OncallEventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(oncallevent.Table, oncallevent.Columns, sqlgraph.NewFieldSpec(oncallevent.FieldID, field.TypeUUID))
	if ps := oeu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oeu.mutation.ProviderID(); ok {
		_spec.SetField(oncallevent.FieldProviderID, field.TypeString, value)
	}
	if value, ok := oeu.mutation.Timestamp(); ok {
		_spec.SetField(oncallevent.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := oeu.mutation.Kind(); ok {
		_spec.SetField(oncallevent.FieldKind, field.TypeString, value)
	}
	if value, ok := oeu.mutation.Title(); ok {
		_spec.SetField(oncallevent.FieldTitle, field.TypeString, value)
	}
	if value, ok := oeu.mutation.Description(); ok {
		_spec.SetField(oncallevent.FieldDescription, field.TypeString, value)
	}
	if value, ok := oeu.mutation.Source(); ok {
		_spec.SetField(oncallevent.FieldSource, field.TypeString, value)
	}
	if oeu.mutation.RosterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallevent.RosterTable,
			Columns: []string{oncallevent.RosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oeu.mutation.RosterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallevent.RosterTable,
			Columns: []string{oncallevent.RosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oeu.mutation.AlertCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallevent.AlertTable,
			Columns: []string{oncallevent.AlertColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alert.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oeu.mutation.AlertIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallevent.AlertTable,
			Columns: []string{oncallevent.AlertColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alert.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oeu.mutation.AnnotationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   oncallevent.AnnotationsTable,
			Columns: []string{oncallevent.AnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallannotation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oeu.mutation.RemovedAnnotationsIDs(); len(nodes) > 0 && !oeu.mutation.AnnotationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   oncallevent.AnnotationsTable,
			Columns: []string{oncallevent.AnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallannotation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oeu.mutation.AnnotationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   oncallevent.AnnotationsTable,
			Columns: []string{oncallevent.AnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallannotation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(oeu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, oeu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oncallevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	oeu.mutation.done = true
	return n, nil
}

// OncallEventUpdateOne is the builder for updating a single OncallEvent entity.
type OncallEventUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OncallEventMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetProviderID sets the "provider_id" field.
func (oeuo *OncallEventUpdateOne) SetProviderID(s string) *OncallEventUpdateOne {
	oeuo.mutation.SetProviderID(s)
	return oeuo
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (oeuo *OncallEventUpdateOne) SetNillableProviderID(s *string) *OncallEventUpdateOne {
	if s != nil {
		oeuo.SetProviderID(*s)
	}
	return oeuo
}

// SetRosterID sets the "roster_id" field.
func (oeuo *OncallEventUpdateOne) SetRosterID(u uuid.UUID) *OncallEventUpdateOne {
	oeuo.mutation.SetRosterID(u)
	return oeuo
}

// SetNillableRosterID sets the "roster_id" field if the given value is not nil.
func (oeuo *OncallEventUpdateOne) SetNillableRosterID(u *uuid.UUID) *OncallEventUpdateOne {
	if u != nil {
		oeuo.SetRosterID(*u)
	}
	return oeuo
}

// ClearRosterID clears the value of the "roster_id" field.
func (oeuo *OncallEventUpdateOne) ClearRosterID() *OncallEventUpdateOne {
	oeuo.mutation.ClearRosterID()
	return oeuo
}

// SetTimestamp sets the "timestamp" field.
func (oeuo *OncallEventUpdateOne) SetTimestamp(t time.Time) *OncallEventUpdateOne {
	oeuo.mutation.SetTimestamp(t)
	return oeuo
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (oeuo *OncallEventUpdateOne) SetNillableTimestamp(t *time.Time) *OncallEventUpdateOne {
	if t != nil {
		oeuo.SetTimestamp(*t)
	}
	return oeuo
}

// SetKind sets the "kind" field.
func (oeuo *OncallEventUpdateOne) SetKind(s string) *OncallEventUpdateOne {
	oeuo.mutation.SetKind(s)
	return oeuo
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (oeuo *OncallEventUpdateOne) SetNillableKind(s *string) *OncallEventUpdateOne {
	if s != nil {
		oeuo.SetKind(*s)
	}
	return oeuo
}

// SetTitle sets the "title" field.
func (oeuo *OncallEventUpdateOne) SetTitle(s string) *OncallEventUpdateOne {
	oeuo.mutation.SetTitle(s)
	return oeuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (oeuo *OncallEventUpdateOne) SetNillableTitle(s *string) *OncallEventUpdateOne {
	if s != nil {
		oeuo.SetTitle(*s)
	}
	return oeuo
}

// SetDescription sets the "description" field.
func (oeuo *OncallEventUpdateOne) SetDescription(s string) *OncallEventUpdateOne {
	oeuo.mutation.SetDescription(s)
	return oeuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (oeuo *OncallEventUpdateOne) SetNillableDescription(s *string) *OncallEventUpdateOne {
	if s != nil {
		oeuo.SetDescription(*s)
	}
	return oeuo
}

// SetSource sets the "source" field.
func (oeuo *OncallEventUpdateOne) SetSource(s string) *OncallEventUpdateOne {
	oeuo.mutation.SetSource(s)
	return oeuo
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (oeuo *OncallEventUpdateOne) SetNillableSource(s *string) *OncallEventUpdateOne {
	if s != nil {
		oeuo.SetSource(*s)
	}
	return oeuo
}

// SetRoster sets the "roster" edge to the OncallRoster entity.
func (oeuo *OncallEventUpdateOne) SetRoster(o *OncallRoster) *OncallEventUpdateOne {
	return oeuo.SetRosterID(o.ID)
}

// SetAlertID sets the "alert" edge to the Alert entity by ID.
func (oeuo *OncallEventUpdateOne) SetAlertID(id uuid.UUID) *OncallEventUpdateOne {
	oeuo.mutation.SetAlertID(id)
	return oeuo
}

// SetNillableAlertID sets the "alert" edge to the Alert entity by ID if the given value is not nil.
func (oeuo *OncallEventUpdateOne) SetNillableAlertID(id *uuid.UUID) *OncallEventUpdateOne {
	if id != nil {
		oeuo = oeuo.SetAlertID(*id)
	}
	return oeuo
}

// SetAlert sets the "alert" edge to the Alert entity.
func (oeuo *OncallEventUpdateOne) SetAlert(a *Alert) *OncallEventUpdateOne {
	return oeuo.SetAlertID(a.ID)
}

// AddAnnotationIDs adds the "annotations" edge to the OncallAnnotation entity by IDs.
func (oeuo *OncallEventUpdateOne) AddAnnotationIDs(ids ...uuid.UUID) *OncallEventUpdateOne {
	oeuo.mutation.AddAnnotationIDs(ids...)
	return oeuo
}

// AddAnnotations adds the "annotations" edges to the OncallAnnotation entity.
func (oeuo *OncallEventUpdateOne) AddAnnotations(o ...*OncallAnnotation) *OncallEventUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oeuo.AddAnnotationIDs(ids...)
}

// Mutation returns the OncallEventMutation object of the builder.
func (oeuo *OncallEventUpdateOne) Mutation() *OncallEventMutation {
	return oeuo.mutation
}

// ClearRoster clears the "roster" edge to the OncallRoster entity.
func (oeuo *OncallEventUpdateOne) ClearRoster() *OncallEventUpdateOne {
	oeuo.mutation.ClearRoster()
	return oeuo
}

// ClearAlert clears the "alert" edge to the Alert entity.
func (oeuo *OncallEventUpdateOne) ClearAlert() *OncallEventUpdateOne {
	oeuo.mutation.ClearAlert()
	return oeuo
}

// ClearAnnotations clears all "annotations" edges to the OncallAnnotation entity.
func (oeuo *OncallEventUpdateOne) ClearAnnotations() *OncallEventUpdateOne {
	oeuo.mutation.ClearAnnotations()
	return oeuo
}

// RemoveAnnotationIDs removes the "annotations" edge to OncallAnnotation entities by IDs.
func (oeuo *OncallEventUpdateOne) RemoveAnnotationIDs(ids ...uuid.UUID) *OncallEventUpdateOne {
	oeuo.mutation.RemoveAnnotationIDs(ids...)
	return oeuo
}

// RemoveAnnotations removes "annotations" edges to OncallAnnotation entities.
func (oeuo *OncallEventUpdateOne) RemoveAnnotations(o ...*OncallAnnotation) *OncallEventUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oeuo.RemoveAnnotationIDs(ids...)
}

// Where appends a list predicates to the OncallEventUpdate builder.
func (oeuo *OncallEventUpdateOne) Where(ps ...predicate.OncallEvent) *OncallEventUpdateOne {
	oeuo.mutation.Where(ps...)
	return oeuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oeuo *OncallEventUpdateOne) Select(field string, fields ...string) *OncallEventUpdateOne {
	oeuo.fields = append([]string{field}, fields...)
	return oeuo
}

// Save executes the query and returns the updated OncallEvent entity.
func (oeuo *OncallEventUpdateOne) Save(ctx context.Context) (*OncallEvent, error) {
	return withHooks(ctx, oeuo.sqlSave, oeuo.mutation, oeuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oeuo *OncallEventUpdateOne) SaveX(ctx context.Context) *OncallEvent {
	node, err := oeuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oeuo *OncallEventUpdateOne) Exec(ctx context.Context) error {
	_, err := oeuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oeuo *OncallEventUpdateOne) ExecX(ctx context.Context) {
	if err := oeuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (oeuo *OncallEventUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OncallEventUpdateOne {
	oeuo.modifiers = append(oeuo.modifiers, modifiers...)
	return oeuo
}

func (oeuo *OncallEventUpdateOne) sqlSave(ctx context.Context) (_node *OncallEvent, err error) {
	_spec := sqlgraph.NewUpdateSpec(oncallevent.Table, oncallevent.Columns, sqlgraph.NewFieldSpec(oncallevent.FieldID, field.TypeUUID))
	id, ok := oeuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OncallEvent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oeuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oncallevent.FieldID)
		for _, f := range fields {
			if !oncallevent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oncallevent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oeuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oeuo.mutation.ProviderID(); ok {
		_spec.SetField(oncallevent.FieldProviderID, field.TypeString, value)
	}
	if value, ok := oeuo.mutation.Timestamp(); ok {
		_spec.SetField(oncallevent.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := oeuo.mutation.Kind(); ok {
		_spec.SetField(oncallevent.FieldKind, field.TypeString, value)
	}
	if value, ok := oeuo.mutation.Title(); ok {
		_spec.SetField(oncallevent.FieldTitle, field.TypeString, value)
	}
	if value, ok := oeuo.mutation.Description(); ok {
		_spec.SetField(oncallevent.FieldDescription, field.TypeString, value)
	}
	if value, ok := oeuo.mutation.Source(); ok {
		_spec.SetField(oncallevent.FieldSource, field.TypeString, value)
	}
	if oeuo.mutation.RosterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallevent.RosterTable,
			Columns: []string{oncallevent.RosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oeuo.mutation.RosterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallevent.RosterTable,
			Columns: []string{oncallevent.RosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oeuo.mutation.AlertCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallevent.AlertTable,
			Columns: []string{oncallevent.AlertColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alert.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oeuo.mutation.AlertIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallevent.AlertTable,
			Columns: []string{oncallevent.AlertColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alert.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oeuo.mutation.AnnotationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   oncallevent.AnnotationsTable,
			Columns: []string{oncallevent.AnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallannotation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oeuo.mutation.RemovedAnnotationsIDs(); len(nodes) > 0 && !oeuo.mutation.AnnotationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   oncallevent.AnnotationsTable,
			Columns: []string{oncallevent.AnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallannotation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oeuo.mutation.AnnotationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   oncallevent.AnnotationsTable,
			Columns: []string{oncallevent.AnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallannotation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(oeuo.modifiers...)
	_node = &OncallEvent{config: oeuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oeuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oncallevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oeuo.mutation.done = true
	return _node, nil
}
