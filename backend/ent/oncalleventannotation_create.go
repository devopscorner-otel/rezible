// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/oncalleventannotation"
	"github.com/rezible/rezible/ent/oncallusershift"
)

// OncallEventAnnotationCreate is the builder for creating a OncallEventAnnotation entity.
type OncallEventAnnotationCreate struct {
	config
	mutation *OncallEventAnnotationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEventID sets the "event_id" field.
func (oeac *OncallEventAnnotationCreate) SetEventID(s string) *OncallEventAnnotationCreate {
	oeac.mutation.SetEventID(s)
	return oeac
}

// SetCreatedAt sets the "created_at" field.
func (oeac *OncallEventAnnotationCreate) SetCreatedAt(t time.Time) *OncallEventAnnotationCreate {
	oeac.mutation.SetCreatedAt(t)
	return oeac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oeac *OncallEventAnnotationCreate) SetNillableCreatedAt(t *time.Time) *OncallEventAnnotationCreate {
	if t != nil {
		oeac.SetCreatedAt(*t)
	}
	return oeac
}

// SetMinutesOccupied sets the "minutes_occupied" field.
func (oeac *OncallEventAnnotationCreate) SetMinutesOccupied(i int) *OncallEventAnnotationCreate {
	oeac.mutation.SetMinutesOccupied(i)
	return oeac
}

// SetNotes sets the "notes" field.
func (oeac *OncallEventAnnotationCreate) SetNotes(s string) *OncallEventAnnotationCreate {
	oeac.mutation.SetNotes(s)
	return oeac
}

// SetPinned sets the "pinned" field.
func (oeac *OncallEventAnnotationCreate) SetPinned(b bool) *OncallEventAnnotationCreate {
	oeac.mutation.SetPinned(b)
	return oeac
}

// SetID sets the "id" field.
func (oeac *OncallEventAnnotationCreate) SetID(u uuid.UUID) *OncallEventAnnotationCreate {
	oeac.mutation.SetID(u)
	return oeac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (oeac *OncallEventAnnotationCreate) SetNillableID(u *uuid.UUID) *OncallEventAnnotationCreate {
	if u != nil {
		oeac.SetID(*u)
	}
	return oeac
}

// AddShiftIDs adds the "shifts" edge to the OncallUserShift entity by IDs.
func (oeac *OncallEventAnnotationCreate) AddShiftIDs(ids ...uuid.UUID) *OncallEventAnnotationCreate {
	oeac.mutation.AddShiftIDs(ids...)
	return oeac
}

// AddShifts adds the "shifts" edges to the OncallUserShift entity.
func (oeac *OncallEventAnnotationCreate) AddShifts(o ...*OncallUserShift) *OncallEventAnnotationCreate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oeac.AddShiftIDs(ids...)
}

// Mutation returns the OncallEventAnnotationMutation object of the builder.
func (oeac *OncallEventAnnotationCreate) Mutation() *OncallEventAnnotationMutation {
	return oeac.mutation
}

// Save creates the OncallEventAnnotation in the database.
func (oeac *OncallEventAnnotationCreate) Save(ctx context.Context) (*OncallEventAnnotation, error) {
	oeac.defaults()
	return withHooks(ctx, oeac.sqlSave, oeac.mutation, oeac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oeac *OncallEventAnnotationCreate) SaveX(ctx context.Context) *OncallEventAnnotation {
	v, err := oeac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oeac *OncallEventAnnotationCreate) Exec(ctx context.Context) error {
	_, err := oeac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oeac *OncallEventAnnotationCreate) ExecX(ctx context.Context) {
	if err := oeac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oeac *OncallEventAnnotationCreate) defaults() {
	if _, ok := oeac.mutation.CreatedAt(); !ok {
		v := oncalleventannotation.DefaultCreatedAt()
		oeac.mutation.SetCreatedAt(v)
	}
	if _, ok := oeac.mutation.ID(); !ok {
		v := oncalleventannotation.DefaultID()
		oeac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oeac *OncallEventAnnotationCreate) check() error {
	if _, ok := oeac.mutation.EventID(); !ok {
		return &ValidationError{Name: "event_id", err: errors.New(`ent: missing required field "OncallEventAnnotation.event_id"`)}
	}
	if _, ok := oeac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OncallEventAnnotation.created_at"`)}
	}
	if _, ok := oeac.mutation.MinutesOccupied(); !ok {
		return &ValidationError{Name: "minutes_occupied", err: errors.New(`ent: missing required field "OncallEventAnnotation.minutes_occupied"`)}
	}
	if _, ok := oeac.mutation.Notes(); !ok {
		return &ValidationError{Name: "notes", err: errors.New(`ent: missing required field "OncallEventAnnotation.notes"`)}
	}
	if _, ok := oeac.mutation.Pinned(); !ok {
		return &ValidationError{Name: "pinned", err: errors.New(`ent: missing required field "OncallEventAnnotation.pinned"`)}
	}
	return nil
}

func (oeac *OncallEventAnnotationCreate) sqlSave(ctx context.Context) (*OncallEventAnnotation, error) {
	if err := oeac.check(); err != nil {
		return nil, err
	}
	_node, _spec := oeac.createSpec()
	if err := sqlgraph.CreateNode(ctx, oeac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	oeac.mutation.id = &_node.ID
	oeac.mutation.done = true
	return _node, nil
}

func (oeac *OncallEventAnnotationCreate) createSpec() (*OncallEventAnnotation, *sqlgraph.CreateSpec) {
	var (
		_node = &OncallEventAnnotation{config: oeac.config}
		_spec = sqlgraph.NewCreateSpec(oncalleventannotation.Table, sqlgraph.NewFieldSpec(oncalleventannotation.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = oeac.conflict
	if id, ok := oeac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := oeac.mutation.EventID(); ok {
		_spec.SetField(oncalleventannotation.FieldEventID, field.TypeString, value)
		_node.EventID = value
	}
	if value, ok := oeac.mutation.CreatedAt(); ok {
		_spec.SetField(oncalleventannotation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := oeac.mutation.MinutesOccupied(); ok {
		_spec.SetField(oncalleventannotation.FieldMinutesOccupied, field.TypeInt, value)
		_node.MinutesOccupied = value
	}
	if value, ok := oeac.mutation.Notes(); ok {
		_spec.SetField(oncalleventannotation.FieldNotes, field.TypeString, value)
		_node.Notes = value
	}
	if value, ok := oeac.mutation.Pinned(); ok {
		_spec.SetField(oncalleventannotation.FieldPinned, field.TypeBool, value)
		_node.Pinned = value
	}
	if nodes := oeac.mutation.ShiftsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   oncalleventannotation.ShiftsTable,
			Columns: oncalleventannotation.ShiftsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallusershift.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OncallEventAnnotation.Create().
//		SetEventID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OncallEventAnnotationUpsert) {
//			SetEventID(v+v).
//		}).
//		Exec(ctx)
func (oeac *OncallEventAnnotationCreate) OnConflict(opts ...sql.ConflictOption) *OncallEventAnnotationUpsertOne {
	oeac.conflict = opts
	return &OncallEventAnnotationUpsertOne{
		create: oeac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OncallEventAnnotation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oeac *OncallEventAnnotationCreate) OnConflictColumns(columns ...string) *OncallEventAnnotationUpsertOne {
	oeac.conflict = append(oeac.conflict, sql.ConflictColumns(columns...))
	return &OncallEventAnnotationUpsertOne{
		create: oeac,
	}
}

type (
	// OncallEventAnnotationUpsertOne is the builder for "upsert"-ing
	//  one OncallEventAnnotation node.
	OncallEventAnnotationUpsertOne struct {
		create *OncallEventAnnotationCreate
	}

	// OncallEventAnnotationUpsert is the "OnConflict" setter.
	OncallEventAnnotationUpsert struct {
		*sql.UpdateSet
	}
)

// SetEventID sets the "event_id" field.
func (u *OncallEventAnnotationUpsert) SetEventID(v string) *OncallEventAnnotationUpsert {
	u.Set(oncalleventannotation.FieldEventID, v)
	return u
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *OncallEventAnnotationUpsert) UpdateEventID() *OncallEventAnnotationUpsert {
	u.SetExcluded(oncalleventannotation.FieldEventID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *OncallEventAnnotationUpsert) SetCreatedAt(v time.Time) *OncallEventAnnotationUpsert {
	u.Set(oncalleventannotation.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OncallEventAnnotationUpsert) UpdateCreatedAt() *OncallEventAnnotationUpsert {
	u.SetExcluded(oncalleventannotation.FieldCreatedAt)
	return u
}

// SetMinutesOccupied sets the "minutes_occupied" field.
func (u *OncallEventAnnotationUpsert) SetMinutesOccupied(v int) *OncallEventAnnotationUpsert {
	u.Set(oncalleventannotation.FieldMinutesOccupied, v)
	return u
}

// UpdateMinutesOccupied sets the "minutes_occupied" field to the value that was provided on create.
func (u *OncallEventAnnotationUpsert) UpdateMinutesOccupied() *OncallEventAnnotationUpsert {
	u.SetExcluded(oncalleventannotation.FieldMinutesOccupied)
	return u
}

// AddMinutesOccupied adds v to the "minutes_occupied" field.
func (u *OncallEventAnnotationUpsert) AddMinutesOccupied(v int) *OncallEventAnnotationUpsert {
	u.Add(oncalleventannotation.FieldMinutesOccupied, v)
	return u
}

// SetNotes sets the "notes" field.
func (u *OncallEventAnnotationUpsert) SetNotes(v string) *OncallEventAnnotationUpsert {
	u.Set(oncalleventannotation.FieldNotes, v)
	return u
}

// UpdateNotes sets the "notes" field to the value that was provided on create.
func (u *OncallEventAnnotationUpsert) UpdateNotes() *OncallEventAnnotationUpsert {
	u.SetExcluded(oncalleventannotation.FieldNotes)
	return u
}

// SetPinned sets the "pinned" field.
func (u *OncallEventAnnotationUpsert) SetPinned(v bool) *OncallEventAnnotationUpsert {
	u.Set(oncalleventannotation.FieldPinned, v)
	return u
}

// UpdatePinned sets the "pinned" field to the value that was provided on create.
func (u *OncallEventAnnotationUpsert) UpdatePinned() *OncallEventAnnotationUpsert {
	u.SetExcluded(oncalleventannotation.FieldPinned)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OncallEventAnnotation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oncalleventannotation.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OncallEventAnnotationUpsertOne) UpdateNewValues() *OncallEventAnnotationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(oncalleventannotation.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OncallEventAnnotation.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OncallEventAnnotationUpsertOne) Ignore() *OncallEventAnnotationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OncallEventAnnotationUpsertOne) DoNothing() *OncallEventAnnotationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OncallEventAnnotationCreate.OnConflict
// documentation for more info.
func (u *OncallEventAnnotationUpsertOne) Update(set func(*OncallEventAnnotationUpsert)) *OncallEventAnnotationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OncallEventAnnotationUpsert{UpdateSet: update})
	}))
	return u
}

// SetEventID sets the "event_id" field.
func (u *OncallEventAnnotationUpsertOne) SetEventID(v string) *OncallEventAnnotationUpsertOne {
	return u.Update(func(s *OncallEventAnnotationUpsert) {
		s.SetEventID(v)
	})
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *OncallEventAnnotationUpsertOne) UpdateEventID() *OncallEventAnnotationUpsertOne {
	return u.Update(func(s *OncallEventAnnotationUpsert) {
		s.UpdateEventID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *OncallEventAnnotationUpsertOne) SetCreatedAt(v time.Time) *OncallEventAnnotationUpsertOne {
	return u.Update(func(s *OncallEventAnnotationUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OncallEventAnnotationUpsertOne) UpdateCreatedAt() *OncallEventAnnotationUpsertOne {
	return u.Update(func(s *OncallEventAnnotationUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetMinutesOccupied sets the "minutes_occupied" field.
func (u *OncallEventAnnotationUpsertOne) SetMinutesOccupied(v int) *OncallEventAnnotationUpsertOne {
	return u.Update(func(s *OncallEventAnnotationUpsert) {
		s.SetMinutesOccupied(v)
	})
}

// AddMinutesOccupied adds v to the "minutes_occupied" field.
func (u *OncallEventAnnotationUpsertOne) AddMinutesOccupied(v int) *OncallEventAnnotationUpsertOne {
	return u.Update(func(s *OncallEventAnnotationUpsert) {
		s.AddMinutesOccupied(v)
	})
}

// UpdateMinutesOccupied sets the "minutes_occupied" field to the value that was provided on create.
func (u *OncallEventAnnotationUpsertOne) UpdateMinutesOccupied() *OncallEventAnnotationUpsertOne {
	return u.Update(func(s *OncallEventAnnotationUpsert) {
		s.UpdateMinutesOccupied()
	})
}

// SetNotes sets the "notes" field.
func (u *OncallEventAnnotationUpsertOne) SetNotes(v string) *OncallEventAnnotationUpsertOne {
	return u.Update(func(s *OncallEventAnnotationUpsert) {
		s.SetNotes(v)
	})
}

// UpdateNotes sets the "notes" field to the value that was provided on create.
func (u *OncallEventAnnotationUpsertOne) UpdateNotes() *OncallEventAnnotationUpsertOne {
	return u.Update(func(s *OncallEventAnnotationUpsert) {
		s.UpdateNotes()
	})
}

// SetPinned sets the "pinned" field.
func (u *OncallEventAnnotationUpsertOne) SetPinned(v bool) *OncallEventAnnotationUpsertOne {
	return u.Update(func(s *OncallEventAnnotationUpsert) {
		s.SetPinned(v)
	})
}

// UpdatePinned sets the "pinned" field to the value that was provided on create.
func (u *OncallEventAnnotationUpsertOne) UpdatePinned() *OncallEventAnnotationUpsertOne {
	return u.Update(func(s *OncallEventAnnotationUpsert) {
		s.UpdatePinned()
	})
}

// Exec executes the query.
func (u *OncallEventAnnotationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OncallEventAnnotationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OncallEventAnnotationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OncallEventAnnotationUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: OncallEventAnnotationUpsertOne.ID is not supported by MySQL driver. Use OncallEventAnnotationUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OncallEventAnnotationUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OncallEventAnnotationCreateBulk is the builder for creating many OncallEventAnnotation entities in bulk.
type OncallEventAnnotationCreateBulk struct {
	config
	err      error
	builders []*OncallEventAnnotationCreate
	conflict []sql.ConflictOption
}

// Save creates the OncallEventAnnotation entities in the database.
func (oeacb *OncallEventAnnotationCreateBulk) Save(ctx context.Context) ([]*OncallEventAnnotation, error) {
	if oeacb.err != nil {
		return nil, oeacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(oeacb.builders))
	nodes := make([]*OncallEventAnnotation, len(oeacb.builders))
	mutators := make([]Mutator, len(oeacb.builders))
	for i := range oeacb.builders {
		func(i int, root context.Context) {
			builder := oeacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OncallEventAnnotationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oeacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = oeacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oeacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oeacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oeacb *OncallEventAnnotationCreateBulk) SaveX(ctx context.Context) []*OncallEventAnnotation {
	v, err := oeacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oeacb *OncallEventAnnotationCreateBulk) Exec(ctx context.Context) error {
	_, err := oeacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oeacb *OncallEventAnnotationCreateBulk) ExecX(ctx context.Context) {
	if err := oeacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OncallEventAnnotation.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OncallEventAnnotationUpsert) {
//			SetEventID(v+v).
//		}).
//		Exec(ctx)
func (oeacb *OncallEventAnnotationCreateBulk) OnConflict(opts ...sql.ConflictOption) *OncallEventAnnotationUpsertBulk {
	oeacb.conflict = opts
	return &OncallEventAnnotationUpsertBulk{
		create: oeacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OncallEventAnnotation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oeacb *OncallEventAnnotationCreateBulk) OnConflictColumns(columns ...string) *OncallEventAnnotationUpsertBulk {
	oeacb.conflict = append(oeacb.conflict, sql.ConflictColumns(columns...))
	return &OncallEventAnnotationUpsertBulk{
		create: oeacb,
	}
}

// OncallEventAnnotationUpsertBulk is the builder for "upsert"-ing
// a bulk of OncallEventAnnotation nodes.
type OncallEventAnnotationUpsertBulk struct {
	create *OncallEventAnnotationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OncallEventAnnotation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oncalleventannotation.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OncallEventAnnotationUpsertBulk) UpdateNewValues() *OncallEventAnnotationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(oncalleventannotation.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OncallEventAnnotation.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OncallEventAnnotationUpsertBulk) Ignore() *OncallEventAnnotationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OncallEventAnnotationUpsertBulk) DoNothing() *OncallEventAnnotationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OncallEventAnnotationCreateBulk.OnConflict
// documentation for more info.
func (u *OncallEventAnnotationUpsertBulk) Update(set func(*OncallEventAnnotationUpsert)) *OncallEventAnnotationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OncallEventAnnotationUpsert{UpdateSet: update})
	}))
	return u
}

// SetEventID sets the "event_id" field.
func (u *OncallEventAnnotationUpsertBulk) SetEventID(v string) *OncallEventAnnotationUpsertBulk {
	return u.Update(func(s *OncallEventAnnotationUpsert) {
		s.SetEventID(v)
	})
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *OncallEventAnnotationUpsertBulk) UpdateEventID() *OncallEventAnnotationUpsertBulk {
	return u.Update(func(s *OncallEventAnnotationUpsert) {
		s.UpdateEventID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *OncallEventAnnotationUpsertBulk) SetCreatedAt(v time.Time) *OncallEventAnnotationUpsertBulk {
	return u.Update(func(s *OncallEventAnnotationUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OncallEventAnnotationUpsertBulk) UpdateCreatedAt() *OncallEventAnnotationUpsertBulk {
	return u.Update(func(s *OncallEventAnnotationUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetMinutesOccupied sets the "minutes_occupied" field.
func (u *OncallEventAnnotationUpsertBulk) SetMinutesOccupied(v int) *OncallEventAnnotationUpsertBulk {
	return u.Update(func(s *OncallEventAnnotationUpsert) {
		s.SetMinutesOccupied(v)
	})
}

// AddMinutesOccupied adds v to the "minutes_occupied" field.
func (u *OncallEventAnnotationUpsertBulk) AddMinutesOccupied(v int) *OncallEventAnnotationUpsertBulk {
	return u.Update(func(s *OncallEventAnnotationUpsert) {
		s.AddMinutesOccupied(v)
	})
}

// UpdateMinutesOccupied sets the "minutes_occupied" field to the value that was provided on create.
func (u *OncallEventAnnotationUpsertBulk) UpdateMinutesOccupied() *OncallEventAnnotationUpsertBulk {
	return u.Update(func(s *OncallEventAnnotationUpsert) {
		s.UpdateMinutesOccupied()
	})
}

// SetNotes sets the "notes" field.
func (u *OncallEventAnnotationUpsertBulk) SetNotes(v string) *OncallEventAnnotationUpsertBulk {
	return u.Update(func(s *OncallEventAnnotationUpsert) {
		s.SetNotes(v)
	})
}

// UpdateNotes sets the "notes" field to the value that was provided on create.
func (u *OncallEventAnnotationUpsertBulk) UpdateNotes() *OncallEventAnnotationUpsertBulk {
	return u.Update(func(s *OncallEventAnnotationUpsert) {
		s.UpdateNotes()
	})
}

// SetPinned sets the "pinned" field.
func (u *OncallEventAnnotationUpsertBulk) SetPinned(v bool) *OncallEventAnnotationUpsertBulk {
	return u.Update(func(s *OncallEventAnnotationUpsert) {
		s.SetPinned(v)
	})
}

// UpdatePinned sets the "pinned" field to the value that was provided on create.
func (u *OncallEventAnnotationUpsertBulk) UpdatePinned() *OncallEventAnnotationUpsertBulk {
	return u.Update(func(s *OncallEventAnnotationUpsert) {
		s.UpdatePinned()
	})
}

// Exec executes the query.
func (u *OncallEventAnnotationUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OncallEventAnnotationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OncallEventAnnotationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OncallEventAnnotationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
