// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/alert"
	"github.com/rezible/rezible/ent/alertfeedback"
	"github.com/rezible/rezible/ent/oncallannotation"
	"github.com/rezible/rezible/ent/tenant"
)

// AlertFeedback is the model entity for the AlertFeedback schema.
type AlertFeedback struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID int `json:"tenant_id,omitempty"`
	// AlertID holds the value of the "alert_id" field.
	AlertID uuid.UUID `json:"alert_id,omitempty"`
	// AnnotationID holds the value of the "annotation_id" field.
	AnnotationID uuid.UUID `json:"annotation_id,omitempty"`
	// Actionable holds the value of the "actionable" field.
	Actionable bool `json:"actionable,omitempty"`
	// Accurate holds the value of the "accurate" field.
	Accurate alertfeedback.Accurate `json:"accurate,omitempty"`
	// DocumentationAvailable holds the value of the "documentation_available" field.
	DocumentationAvailable alertfeedback.DocumentationAvailable `json:"documentation_available,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AlertFeedbackQuery when eager-loading is set.
	Edges        AlertFeedbackEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AlertFeedbackEdges holds the relations/edges for other nodes in the graph.
type AlertFeedbackEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Alert holds the value of the alert edge.
	Alert *Alert `json:"alert,omitempty"`
	// Annotation holds the value of the annotation edge.
	Annotation *OncallAnnotation `json:"annotation,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AlertFeedbackEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// AlertOrErr returns the Alert value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AlertFeedbackEdges) AlertOrErr() (*Alert, error) {
	if e.Alert != nil {
		return e.Alert, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: alert.Label}
	}
	return nil, &NotLoadedError{edge: "alert"}
}

// AnnotationOrErr returns the Annotation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AlertFeedbackEdges) AnnotationOrErr() (*OncallAnnotation, error) {
	if e.Annotation != nil {
		return e.Annotation, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: oncallannotation.Label}
	}
	return nil, &NotLoadedError{edge: "annotation"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AlertFeedback) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case alertfeedback.FieldActionable:
			values[i] = new(sql.NullBool)
		case alertfeedback.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case alertfeedback.FieldAccurate, alertfeedback.FieldDocumentationAvailable:
			values[i] = new(sql.NullString)
		case alertfeedback.FieldID, alertfeedback.FieldAlertID, alertfeedback.FieldAnnotationID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AlertFeedback fields.
func (af *AlertFeedback) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case alertfeedback.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				af.ID = *value
			}
		case alertfeedback.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				af.TenantID = int(value.Int64)
			}
		case alertfeedback.FieldAlertID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field alert_id", values[i])
			} else if value != nil {
				af.AlertID = *value
			}
		case alertfeedback.FieldAnnotationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field annotation_id", values[i])
			} else if value != nil {
				af.AnnotationID = *value
			}
		case alertfeedback.FieldActionable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field actionable", values[i])
			} else if value.Valid {
				af.Actionable = value.Bool
			}
		case alertfeedback.FieldAccurate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field accurate", values[i])
			} else if value.Valid {
				af.Accurate = alertfeedback.Accurate(value.String)
			}
		case alertfeedback.FieldDocumentationAvailable:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field documentation_available", values[i])
			} else if value.Valid {
				af.DocumentationAvailable = alertfeedback.DocumentationAvailable(value.String)
			}
		default:
			af.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AlertFeedback.
// This includes values selected through modifiers, order, etc.
func (af *AlertFeedback) Value(name string) (ent.Value, error) {
	return af.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the AlertFeedback entity.
func (af *AlertFeedback) QueryTenant() *TenantQuery {
	return NewAlertFeedbackClient(af.config).QueryTenant(af)
}

// QueryAlert queries the "alert" edge of the AlertFeedback entity.
func (af *AlertFeedback) QueryAlert() *AlertQuery {
	return NewAlertFeedbackClient(af.config).QueryAlert(af)
}

// QueryAnnotation queries the "annotation" edge of the AlertFeedback entity.
func (af *AlertFeedback) QueryAnnotation() *OncallAnnotationQuery {
	return NewAlertFeedbackClient(af.config).QueryAnnotation(af)
}

// Update returns a builder for updating this AlertFeedback.
// Note that you need to call AlertFeedback.Unwrap() before calling this method if this AlertFeedback
// was returned from a transaction, and the transaction was committed or rolled back.
func (af *AlertFeedback) Update() *AlertFeedbackUpdateOne {
	return NewAlertFeedbackClient(af.config).UpdateOne(af)
}

// Unwrap unwraps the AlertFeedback entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (af *AlertFeedback) Unwrap() *AlertFeedback {
	_tx, ok := af.config.driver.(*txDriver)
	if !ok {
		panic("ent: AlertFeedback is not a transactional entity")
	}
	af.config.driver = _tx.drv
	return af
}

// String implements the fmt.Stringer.
func (af *AlertFeedback) String() string {
	var builder strings.Builder
	builder.WriteString("AlertFeedback(")
	builder.WriteString(fmt.Sprintf("id=%v, ", af.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", af.TenantID))
	builder.WriteString(", ")
	builder.WriteString("alert_id=")
	builder.WriteString(fmt.Sprintf("%v", af.AlertID))
	builder.WriteString(", ")
	builder.WriteString("annotation_id=")
	builder.WriteString(fmt.Sprintf("%v", af.AnnotationID))
	builder.WriteString(", ")
	builder.WriteString("actionable=")
	builder.WriteString(fmt.Sprintf("%v", af.Actionable))
	builder.WriteString(", ")
	builder.WriteString("accurate=")
	builder.WriteString(fmt.Sprintf("%v", af.Accurate))
	builder.WriteString(", ")
	builder.WriteString("documentation_available=")
	builder.WriteString(fmt.Sprintf("%v", af.DocumentationAvailable))
	builder.WriteByte(')')
	return builder.String()
}

// AlertFeedbacks is a parsable slice of AlertFeedback.
type AlertFeedbacks []*AlertFeedback
