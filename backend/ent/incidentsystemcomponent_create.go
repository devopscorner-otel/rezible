// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/incident"
	"github.com/rezible/rezible/ent/incidentsystemcomponent"
	"github.com/rezible/rezible/ent/systemcomponent"
)

// IncidentSystemComponentCreate is the builder for creating a IncidentSystemComponent entity.
type IncidentSystemComponentCreate struct {
	config
	mutation *IncidentSystemComponentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetIncidentID sets the "incident_id" field.
func (iscc *IncidentSystemComponentCreate) SetIncidentID(u uuid.UUID) *IncidentSystemComponentCreate {
	iscc.mutation.SetIncidentID(u)
	return iscc
}

// SetSystemComponentID sets the "system_component_id" field.
func (iscc *IncidentSystemComponentCreate) SetSystemComponentID(u uuid.UUID) *IncidentSystemComponentCreate {
	iscc.mutation.SetSystemComponentID(u)
	return iscc
}

// SetRole sets the "role" field.
func (iscc *IncidentSystemComponentCreate) SetRole(i incidentsystemcomponent.Role) *IncidentSystemComponentCreate {
	iscc.mutation.SetRole(i)
	return iscc
}

// SetCreatedAt sets the "created_at" field.
func (iscc *IncidentSystemComponentCreate) SetCreatedAt(t time.Time) *IncidentSystemComponentCreate {
	iscc.mutation.SetCreatedAt(t)
	return iscc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (iscc *IncidentSystemComponentCreate) SetNillableCreatedAt(t *time.Time) *IncidentSystemComponentCreate {
	if t != nil {
		iscc.SetCreatedAt(*t)
	}
	return iscc
}

// SetID sets the "id" field.
func (iscc *IncidentSystemComponentCreate) SetID(u uuid.UUID) *IncidentSystemComponentCreate {
	iscc.mutation.SetID(u)
	return iscc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (iscc *IncidentSystemComponentCreate) SetNillableID(u *uuid.UUID) *IncidentSystemComponentCreate {
	if u != nil {
		iscc.SetID(*u)
	}
	return iscc
}

// SetIncident sets the "incident" edge to the Incident entity.
func (iscc *IncidentSystemComponentCreate) SetIncident(i *Incident) *IncidentSystemComponentCreate {
	return iscc.SetIncidentID(i.ID)
}

// SetSystemComponent sets the "system_component" edge to the SystemComponent entity.
func (iscc *IncidentSystemComponentCreate) SetSystemComponent(s *SystemComponent) *IncidentSystemComponentCreate {
	return iscc.SetSystemComponentID(s.ID)
}

// Mutation returns the IncidentSystemComponentMutation object of the builder.
func (iscc *IncidentSystemComponentCreate) Mutation() *IncidentSystemComponentMutation {
	return iscc.mutation
}

// Save creates the IncidentSystemComponent in the database.
func (iscc *IncidentSystemComponentCreate) Save(ctx context.Context) (*IncidentSystemComponent, error) {
	iscc.defaults()
	return withHooks(ctx, iscc.sqlSave, iscc.mutation, iscc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (iscc *IncidentSystemComponentCreate) SaveX(ctx context.Context) *IncidentSystemComponent {
	v, err := iscc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iscc *IncidentSystemComponentCreate) Exec(ctx context.Context) error {
	_, err := iscc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iscc *IncidentSystemComponentCreate) ExecX(ctx context.Context) {
	if err := iscc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iscc *IncidentSystemComponentCreate) defaults() {
	if _, ok := iscc.mutation.CreatedAt(); !ok {
		v := incidentsystemcomponent.DefaultCreatedAt()
		iscc.mutation.SetCreatedAt(v)
	}
	if _, ok := iscc.mutation.ID(); !ok {
		v := incidentsystemcomponent.DefaultID()
		iscc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iscc *IncidentSystemComponentCreate) check() error {
	if _, ok := iscc.mutation.IncidentID(); !ok {
		return &ValidationError{Name: "incident_id", err: errors.New(`ent: missing required field "IncidentSystemComponent.incident_id"`)}
	}
	if _, ok := iscc.mutation.SystemComponentID(); !ok {
		return &ValidationError{Name: "system_component_id", err: errors.New(`ent: missing required field "IncidentSystemComponent.system_component_id"`)}
	}
	if _, ok := iscc.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New(`ent: missing required field "IncidentSystemComponent.role"`)}
	}
	if v, ok := iscc.mutation.Role(); ok {
		if err := incidentsystemcomponent.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "IncidentSystemComponent.role": %w`, err)}
		}
	}
	if _, ok := iscc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "IncidentSystemComponent.created_at"`)}
	}
	if len(iscc.mutation.IncidentIDs()) == 0 {
		return &ValidationError{Name: "incident", err: errors.New(`ent: missing required edge "IncidentSystemComponent.incident"`)}
	}
	if len(iscc.mutation.SystemComponentIDs()) == 0 {
		return &ValidationError{Name: "system_component", err: errors.New(`ent: missing required edge "IncidentSystemComponent.system_component"`)}
	}
	return nil
}

func (iscc *IncidentSystemComponentCreate) sqlSave(ctx context.Context) (*IncidentSystemComponent, error) {
	if err := iscc.check(); err != nil {
		return nil, err
	}
	_node, _spec := iscc.createSpec()
	if err := sqlgraph.CreateNode(ctx, iscc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	iscc.mutation.id = &_node.ID
	iscc.mutation.done = true
	return _node, nil
}

func (iscc *IncidentSystemComponentCreate) createSpec() (*IncidentSystemComponent, *sqlgraph.CreateSpec) {
	var (
		_node = &IncidentSystemComponent{config: iscc.config}
		_spec = sqlgraph.NewCreateSpec(incidentsystemcomponent.Table, sqlgraph.NewFieldSpec(incidentsystemcomponent.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = iscc.conflict
	if id, ok := iscc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := iscc.mutation.Role(); ok {
		_spec.SetField(incidentsystemcomponent.FieldRole, field.TypeEnum, value)
		_node.Role = value
	}
	if value, ok := iscc.mutation.CreatedAt(); ok {
		_spec.SetField(incidentsystemcomponent.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := iscc.mutation.IncidentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentsystemcomponent.IncidentTable,
			Columns: []string{incidentsystemcomponent.IncidentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.IncidentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := iscc.mutation.SystemComponentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentsystemcomponent.SystemComponentTable,
			Columns: []string{incidentsystemcomponent.SystemComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SystemComponentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IncidentSystemComponent.Create().
//		SetIncidentID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IncidentSystemComponentUpsert) {
//			SetIncidentID(v+v).
//		}).
//		Exec(ctx)
func (iscc *IncidentSystemComponentCreate) OnConflict(opts ...sql.ConflictOption) *IncidentSystemComponentUpsertOne {
	iscc.conflict = opts
	return &IncidentSystemComponentUpsertOne{
		create: iscc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IncidentSystemComponent.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (iscc *IncidentSystemComponentCreate) OnConflictColumns(columns ...string) *IncidentSystemComponentUpsertOne {
	iscc.conflict = append(iscc.conflict, sql.ConflictColumns(columns...))
	return &IncidentSystemComponentUpsertOne{
		create: iscc,
	}
}

type (
	// IncidentSystemComponentUpsertOne is the builder for "upsert"-ing
	//  one IncidentSystemComponent node.
	IncidentSystemComponentUpsertOne struct {
		create *IncidentSystemComponentCreate
	}

	// IncidentSystemComponentUpsert is the "OnConflict" setter.
	IncidentSystemComponentUpsert struct {
		*sql.UpdateSet
	}
)

// SetIncidentID sets the "incident_id" field.
func (u *IncidentSystemComponentUpsert) SetIncidentID(v uuid.UUID) *IncidentSystemComponentUpsert {
	u.Set(incidentsystemcomponent.FieldIncidentID, v)
	return u
}

// UpdateIncidentID sets the "incident_id" field to the value that was provided on create.
func (u *IncidentSystemComponentUpsert) UpdateIncidentID() *IncidentSystemComponentUpsert {
	u.SetExcluded(incidentsystemcomponent.FieldIncidentID)
	return u
}

// SetSystemComponentID sets the "system_component_id" field.
func (u *IncidentSystemComponentUpsert) SetSystemComponentID(v uuid.UUID) *IncidentSystemComponentUpsert {
	u.Set(incidentsystemcomponent.FieldSystemComponentID, v)
	return u
}

// UpdateSystemComponentID sets the "system_component_id" field to the value that was provided on create.
func (u *IncidentSystemComponentUpsert) UpdateSystemComponentID() *IncidentSystemComponentUpsert {
	u.SetExcluded(incidentsystemcomponent.FieldSystemComponentID)
	return u
}

// SetRole sets the "role" field.
func (u *IncidentSystemComponentUpsert) SetRole(v incidentsystemcomponent.Role) *IncidentSystemComponentUpsert {
	u.Set(incidentsystemcomponent.FieldRole, v)
	return u
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *IncidentSystemComponentUpsert) UpdateRole() *IncidentSystemComponentUpsert {
	u.SetExcluded(incidentsystemcomponent.FieldRole)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *IncidentSystemComponentUpsert) SetCreatedAt(v time.Time) *IncidentSystemComponentUpsert {
	u.Set(incidentsystemcomponent.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *IncidentSystemComponentUpsert) UpdateCreatedAt() *IncidentSystemComponentUpsert {
	u.SetExcluded(incidentsystemcomponent.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.IncidentSystemComponent.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(incidentsystemcomponent.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IncidentSystemComponentUpsertOne) UpdateNewValues() *IncidentSystemComponentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(incidentsystemcomponent.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IncidentSystemComponent.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *IncidentSystemComponentUpsertOne) Ignore() *IncidentSystemComponentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IncidentSystemComponentUpsertOne) DoNothing() *IncidentSystemComponentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IncidentSystemComponentCreate.OnConflict
// documentation for more info.
func (u *IncidentSystemComponentUpsertOne) Update(set func(*IncidentSystemComponentUpsert)) *IncidentSystemComponentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IncidentSystemComponentUpsert{UpdateSet: update})
	}))
	return u
}

// SetIncidentID sets the "incident_id" field.
func (u *IncidentSystemComponentUpsertOne) SetIncidentID(v uuid.UUID) *IncidentSystemComponentUpsertOne {
	return u.Update(func(s *IncidentSystemComponentUpsert) {
		s.SetIncidentID(v)
	})
}

// UpdateIncidentID sets the "incident_id" field to the value that was provided on create.
func (u *IncidentSystemComponentUpsertOne) UpdateIncidentID() *IncidentSystemComponentUpsertOne {
	return u.Update(func(s *IncidentSystemComponentUpsert) {
		s.UpdateIncidentID()
	})
}

// SetSystemComponentID sets the "system_component_id" field.
func (u *IncidentSystemComponentUpsertOne) SetSystemComponentID(v uuid.UUID) *IncidentSystemComponentUpsertOne {
	return u.Update(func(s *IncidentSystemComponentUpsert) {
		s.SetSystemComponentID(v)
	})
}

// UpdateSystemComponentID sets the "system_component_id" field to the value that was provided on create.
func (u *IncidentSystemComponentUpsertOne) UpdateSystemComponentID() *IncidentSystemComponentUpsertOne {
	return u.Update(func(s *IncidentSystemComponentUpsert) {
		s.UpdateSystemComponentID()
	})
}

// SetRole sets the "role" field.
func (u *IncidentSystemComponentUpsertOne) SetRole(v incidentsystemcomponent.Role) *IncidentSystemComponentUpsertOne {
	return u.Update(func(s *IncidentSystemComponentUpsert) {
		s.SetRole(v)
	})
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *IncidentSystemComponentUpsertOne) UpdateRole() *IncidentSystemComponentUpsertOne {
	return u.Update(func(s *IncidentSystemComponentUpsert) {
		s.UpdateRole()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *IncidentSystemComponentUpsertOne) SetCreatedAt(v time.Time) *IncidentSystemComponentUpsertOne {
	return u.Update(func(s *IncidentSystemComponentUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *IncidentSystemComponentUpsertOne) UpdateCreatedAt() *IncidentSystemComponentUpsertOne {
	return u.Update(func(s *IncidentSystemComponentUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *IncidentSystemComponentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IncidentSystemComponentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IncidentSystemComponentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *IncidentSystemComponentUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: IncidentSystemComponentUpsertOne.ID is not supported by MySQL driver. Use IncidentSystemComponentUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *IncidentSystemComponentUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// IncidentSystemComponentCreateBulk is the builder for creating many IncidentSystemComponent entities in bulk.
type IncidentSystemComponentCreateBulk struct {
	config
	err      error
	builders []*IncidentSystemComponentCreate
	conflict []sql.ConflictOption
}

// Save creates the IncidentSystemComponent entities in the database.
func (isccb *IncidentSystemComponentCreateBulk) Save(ctx context.Context) ([]*IncidentSystemComponent, error) {
	if isccb.err != nil {
		return nil, isccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(isccb.builders))
	nodes := make([]*IncidentSystemComponent, len(isccb.builders))
	mutators := make([]Mutator, len(isccb.builders))
	for i := range isccb.builders {
		func(i int, root context.Context) {
			builder := isccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IncidentSystemComponentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, isccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = isccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, isccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, isccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (isccb *IncidentSystemComponentCreateBulk) SaveX(ctx context.Context) []*IncidentSystemComponent {
	v, err := isccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (isccb *IncidentSystemComponentCreateBulk) Exec(ctx context.Context) error {
	_, err := isccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (isccb *IncidentSystemComponentCreateBulk) ExecX(ctx context.Context) {
	if err := isccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IncidentSystemComponent.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IncidentSystemComponentUpsert) {
//			SetIncidentID(v+v).
//		}).
//		Exec(ctx)
func (isccb *IncidentSystemComponentCreateBulk) OnConflict(opts ...sql.ConflictOption) *IncidentSystemComponentUpsertBulk {
	isccb.conflict = opts
	return &IncidentSystemComponentUpsertBulk{
		create: isccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IncidentSystemComponent.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (isccb *IncidentSystemComponentCreateBulk) OnConflictColumns(columns ...string) *IncidentSystemComponentUpsertBulk {
	isccb.conflict = append(isccb.conflict, sql.ConflictColumns(columns...))
	return &IncidentSystemComponentUpsertBulk{
		create: isccb,
	}
}

// IncidentSystemComponentUpsertBulk is the builder for "upsert"-ing
// a bulk of IncidentSystemComponent nodes.
type IncidentSystemComponentUpsertBulk struct {
	create *IncidentSystemComponentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.IncidentSystemComponent.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(incidentsystemcomponent.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IncidentSystemComponentUpsertBulk) UpdateNewValues() *IncidentSystemComponentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(incidentsystemcomponent.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IncidentSystemComponent.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *IncidentSystemComponentUpsertBulk) Ignore() *IncidentSystemComponentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IncidentSystemComponentUpsertBulk) DoNothing() *IncidentSystemComponentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IncidentSystemComponentCreateBulk.OnConflict
// documentation for more info.
func (u *IncidentSystemComponentUpsertBulk) Update(set func(*IncidentSystemComponentUpsert)) *IncidentSystemComponentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IncidentSystemComponentUpsert{UpdateSet: update})
	}))
	return u
}

// SetIncidentID sets the "incident_id" field.
func (u *IncidentSystemComponentUpsertBulk) SetIncidentID(v uuid.UUID) *IncidentSystemComponentUpsertBulk {
	return u.Update(func(s *IncidentSystemComponentUpsert) {
		s.SetIncidentID(v)
	})
}

// UpdateIncidentID sets the "incident_id" field to the value that was provided on create.
func (u *IncidentSystemComponentUpsertBulk) UpdateIncidentID() *IncidentSystemComponentUpsertBulk {
	return u.Update(func(s *IncidentSystemComponentUpsert) {
		s.UpdateIncidentID()
	})
}

// SetSystemComponentID sets the "system_component_id" field.
func (u *IncidentSystemComponentUpsertBulk) SetSystemComponentID(v uuid.UUID) *IncidentSystemComponentUpsertBulk {
	return u.Update(func(s *IncidentSystemComponentUpsert) {
		s.SetSystemComponentID(v)
	})
}

// UpdateSystemComponentID sets the "system_component_id" field to the value that was provided on create.
func (u *IncidentSystemComponentUpsertBulk) UpdateSystemComponentID() *IncidentSystemComponentUpsertBulk {
	return u.Update(func(s *IncidentSystemComponentUpsert) {
		s.UpdateSystemComponentID()
	})
}

// SetRole sets the "role" field.
func (u *IncidentSystemComponentUpsertBulk) SetRole(v incidentsystemcomponent.Role) *IncidentSystemComponentUpsertBulk {
	return u.Update(func(s *IncidentSystemComponentUpsert) {
		s.SetRole(v)
	})
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *IncidentSystemComponentUpsertBulk) UpdateRole() *IncidentSystemComponentUpsertBulk {
	return u.Update(func(s *IncidentSystemComponentUpsert) {
		s.UpdateRole()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *IncidentSystemComponentUpsertBulk) SetCreatedAt(v time.Time) *IncidentSystemComponentUpsertBulk {
	return u.Update(func(s *IncidentSystemComponentUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *IncidentSystemComponentUpsertBulk) UpdateCreatedAt() *IncidentSystemComponentUpsertBulk {
	return u.Update(func(s *IncidentSystemComponentUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *IncidentSystemComponentUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the IncidentSystemComponentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IncidentSystemComponentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IncidentSystemComponentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
