// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/incident"
	"github.com/rezible/rezible/ent/incidentevent"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/service"
)

// IncidentEventQuery is the builder for querying IncidentEvent entities.
type IncidentEventQuery struct {
	config
	ctx          *QueryContext
	order        []incidentevent.OrderOption
	inters       []Interceptor
	predicates   []predicate.IncidentEvent
	withIncident *IncidentQuery
	withServices *ServiceQuery
	modifiers    []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the IncidentEventQuery builder.
func (ieq *IncidentEventQuery) Where(ps ...predicate.IncidentEvent) *IncidentEventQuery {
	ieq.predicates = append(ieq.predicates, ps...)
	return ieq
}

// Limit the number of records to be returned by this query.
func (ieq *IncidentEventQuery) Limit(limit int) *IncidentEventQuery {
	ieq.ctx.Limit = &limit
	return ieq
}

// Offset to start from.
func (ieq *IncidentEventQuery) Offset(offset int) *IncidentEventQuery {
	ieq.ctx.Offset = &offset
	return ieq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ieq *IncidentEventQuery) Unique(unique bool) *IncidentEventQuery {
	ieq.ctx.Unique = &unique
	return ieq
}

// Order specifies how the records should be ordered.
func (ieq *IncidentEventQuery) Order(o ...incidentevent.OrderOption) *IncidentEventQuery {
	ieq.order = append(ieq.order, o...)
	return ieq
}

// QueryIncident chains the current query on the "incident" edge.
func (ieq *IncidentEventQuery) QueryIncident() *IncidentQuery {
	query := (&IncidentClient{config: ieq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ieq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ieq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(incidentevent.Table, incidentevent.FieldID, selector),
			sqlgraph.To(incident.Table, incident.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, incidentevent.IncidentTable, incidentevent.IncidentColumn),
		)
		fromU = sqlgraph.SetNeighbors(ieq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryServices chains the current query on the "services" edge.
func (ieq *IncidentEventQuery) QueryServices() *ServiceQuery {
	query := (&ServiceClient{config: ieq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ieq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ieq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(incidentevent.Table, incidentevent.FieldID, selector),
			sqlgraph.To(service.Table, service.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, incidentevent.ServicesTable, incidentevent.ServicesColumn),
		)
		fromU = sqlgraph.SetNeighbors(ieq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first IncidentEvent entity from the query.
// Returns a *NotFoundError when no IncidentEvent was found.
func (ieq *IncidentEventQuery) First(ctx context.Context) (*IncidentEvent, error) {
	nodes, err := ieq.Limit(1).All(setContextOp(ctx, ieq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{incidentevent.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ieq *IncidentEventQuery) FirstX(ctx context.Context) *IncidentEvent {
	node, err := ieq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first IncidentEvent ID from the query.
// Returns a *NotFoundError when no IncidentEvent ID was found.
func (ieq *IncidentEventQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = ieq.Limit(1).IDs(setContextOp(ctx, ieq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{incidentevent.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ieq *IncidentEventQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := ieq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single IncidentEvent entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one IncidentEvent entity is found.
// Returns a *NotFoundError when no IncidentEvent entities are found.
func (ieq *IncidentEventQuery) Only(ctx context.Context) (*IncidentEvent, error) {
	nodes, err := ieq.Limit(2).All(setContextOp(ctx, ieq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{incidentevent.Label}
	default:
		return nil, &NotSingularError{incidentevent.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ieq *IncidentEventQuery) OnlyX(ctx context.Context) *IncidentEvent {
	node, err := ieq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only IncidentEvent ID in the query.
// Returns a *NotSingularError when more than one IncidentEvent ID is found.
// Returns a *NotFoundError when no entities are found.
func (ieq *IncidentEventQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = ieq.Limit(2).IDs(setContextOp(ctx, ieq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{incidentevent.Label}
	default:
		err = &NotSingularError{incidentevent.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ieq *IncidentEventQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := ieq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of IncidentEvents.
func (ieq *IncidentEventQuery) All(ctx context.Context) ([]*IncidentEvent, error) {
	ctx = setContextOp(ctx, ieq.ctx, ent.OpQueryAll)
	if err := ieq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*IncidentEvent, *IncidentEventQuery]()
	return withInterceptors[[]*IncidentEvent](ctx, ieq, qr, ieq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ieq *IncidentEventQuery) AllX(ctx context.Context) []*IncidentEvent {
	nodes, err := ieq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of IncidentEvent IDs.
func (ieq *IncidentEventQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if ieq.ctx.Unique == nil && ieq.path != nil {
		ieq.Unique(true)
	}
	ctx = setContextOp(ctx, ieq.ctx, ent.OpQueryIDs)
	if err = ieq.Select(incidentevent.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ieq *IncidentEventQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := ieq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ieq *IncidentEventQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ieq.ctx, ent.OpQueryCount)
	if err := ieq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ieq, querierCount[*IncidentEventQuery](), ieq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ieq *IncidentEventQuery) CountX(ctx context.Context) int {
	count, err := ieq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ieq *IncidentEventQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ieq.ctx, ent.OpQueryExist)
	switch _, err := ieq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ieq *IncidentEventQuery) ExistX(ctx context.Context) bool {
	exist, err := ieq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the IncidentEventQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ieq *IncidentEventQuery) Clone() *IncidentEventQuery {
	if ieq == nil {
		return nil
	}
	return &IncidentEventQuery{
		config:       ieq.config,
		ctx:          ieq.ctx.Clone(),
		order:        append([]incidentevent.OrderOption{}, ieq.order...),
		inters:       append([]Interceptor{}, ieq.inters...),
		predicates:   append([]predicate.IncidentEvent{}, ieq.predicates...),
		withIncident: ieq.withIncident.Clone(),
		withServices: ieq.withServices.Clone(),
		// clone intermediate query.
		sql:       ieq.sql.Clone(),
		path:      ieq.path,
		modifiers: append([]func(*sql.Selector){}, ieq.modifiers...),
	}
}

// WithIncident tells the query-builder to eager-load the nodes that are connected to
// the "incident" edge. The optional arguments are used to configure the query builder of the edge.
func (ieq *IncidentEventQuery) WithIncident(opts ...func(*IncidentQuery)) *IncidentEventQuery {
	query := (&IncidentClient{config: ieq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ieq.withIncident = query
	return ieq
}

// WithServices tells the query-builder to eager-load the nodes that are connected to
// the "services" edge. The optional arguments are used to configure the query builder of the edge.
func (ieq *IncidentEventQuery) WithServices(opts ...func(*ServiceQuery)) *IncidentEventQuery {
	query := (&ServiceClient{config: ieq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ieq.withServices = query
	return ieq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Type incidentevent.Type `json:"type,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.IncidentEvent.Query().
//		GroupBy(incidentevent.FieldType).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ieq *IncidentEventQuery) GroupBy(field string, fields ...string) *IncidentEventGroupBy {
	ieq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &IncidentEventGroupBy{build: ieq}
	grbuild.flds = &ieq.ctx.Fields
	grbuild.label = incidentevent.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Type incidentevent.Type `json:"type,omitempty"`
//	}
//
//	client.IncidentEvent.Query().
//		Select(incidentevent.FieldType).
//		Scan(ctx, &v)
func (ieq *IncidentEventQuery) Select(fields ...string) *IncidentEventSelect {
	ieq.ctx.Fields = append(ieq.ctx.Fields, fields...)
	sbuild := &IncidentEventSelect{IncidentEventQuery: ieq}
	sbuild.label = incidentevent.Label
	sbuild.flds, sbuild.scan = &ieq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a IncidentEventSelect configured with the given aggregations.
func (ieq *IncidentEventQuery) Aggregate(fns ...AggregateFunc) *IncidentEventSelect {
	return ieq.Select().Aggregate(fns...)
}

func (ieq *IncidentEventQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ieq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ieq); err != nil {
				return err
			}
		}
	}
	for _, f := range ieq.ctx.Fields {
		if !incidentevent.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ieq.path != nil {
		prev, err := ieq.path(ctx)
		if err != nil {
			return err
		}
		ieq.sql = prev
	}
	return nil
}

func (ieq *IncidentEventQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*IncidentEvent, error) {
	var (
		nodes       = []*IncidentEvent{}
		_spec       = ieq.querySpec()
		loadedTypes = [2]bool{
			ieq.withIncident != nil,
			ieq.withServices != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*IncidentEvent).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &IncidentEvent{config: ieq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(ieq.modifiers) > 0 {
		_spec.Modifiers = ieq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ieq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ieq.withIncident; query != nil {
		if err := ieq.loadIncident(ctx, query, nodes, nil,
			func(n *IncidentEvent, e *Incident) { n.Edges.Incident = e }); err != nil {
			return nil, err
		}
	}
	if query := ieq.withServices; query != nil {
		if err := ieq.loadServices(ctx, query, nodes,
			func(n *IncidentEvent) { n.Edges.Services = []*Service{} },
			func(n *IncidentEvent, e *Service) { n.Edges.Services = append(n.Edges.Services, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ieq *IncidentEventQuery) loadIncident(ctx context.Context, query *IncidentQuery, nodes []*IncidentEvent, init func(*IncidentEvent), assign func(*IncidentEvent, *Incident)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*IncidentEvent)
	for i := range nodes {
		fk := nodes[i].IncidentID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(incident.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "incident_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ieq *IncidentEventQuery) loadServices(ctx context.Context, query *ServiceQuery, nodes []*IncidentEvent, init func(*IncidentEvent), assign func(*IncidentEvent, *Service)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*IncidentEvent)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Service(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(incidentevent.ServicesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.incident_event_services
		if fk == nil {
			return fmt.Errorf(`foreign-key "incident_event_services" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "incident_event_services" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (ieq *IncidentEventQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ieq.querySpec()
	if len(ieq.modifiers) > 0 {
		_spec.Modifiers = ieq.modifiers
	}
	_spec.Node.Columns = ieq.ctx.Fields
	if len(ieq.ctx.Fields) > 0 {
		_spec.Unique = ieq.ctx.Unique != nil && *ieq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ieq.driver, _spec)
}

func (ieq *IncidentEventQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(incidentevent.Table, incidentevent.Columns, sqlgraph.NewFieldSpec(incidentevent.FieldID, field.TypeUUID))
	_spec.From = ieq.sql
	if unique := ieq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ieq.path != nil {
		_spec.Unique = true
	}
	if fields := ieq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, incidentevent.FieldID)
		for i := range fields {
			if fields[i] != incidentevent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if ieq.withIncident != nil {
			_spec.Node.AddColumnOnce(incidentevent.FieldIncidentID)
		}
	}
	if ps := ieq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ieq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ieq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ieq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ieq *IncidentEventQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ieq.driver.Dialect())
	t1 := builder.Table(incidentevent.Table)
	columns := ieq.ctx.Fields
	if len(columns) == 0 {
		columns = incidentevent.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ieq.sql != nil {
		selector = ieq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ieq.ctx.Unique != nil && *ieq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range ieq.modifiers {
		m(selector)
	}
	for _, p := range ieq.predicates {
		p(selector)
	}
	for _, p := range ieq.order {
		p(selector)
	}
	if offset := ieq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ieq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ieq *IncidentEventQuery) Modify(modifiers ...func(s *sql.Selector)) *IncidentEventSelect {
	ieq.modifiers = append(ieq.modifiers, modifiers...)
	return ieq.Select()
}

// IncidentEventGroupBy is the group-by builder for IncidentEvent entities.
type IncidentEventGroupBy struct {
	selector
	build *IncidentEventQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (iegb *IncidentEventGroupBy) Aggregate(fns ...AggregateFunc) *IncidentEventGroupBy {
	iegb.fns = append(iegb.fns, fns...)
	return iegb
}

// Scan applies the selector query and scans the result into the given value.
func (iegb *IncidentEventGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, iegb.build.ctx, ent.OpQueryGroupBy)
	if err := iegb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*IncidentEventQuery, *IncidentEventGroupBy](ctx, iegb.build, iegb, iegb.build.inters, v)
}

func (iegb *IncidentEventGroupBy) sqlScan(ctx context.Context, root *IncidentEventQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(iegb.fns))
	for _, fn := range iegb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*iegb.flds)+len(iegb.fns))
		for _, f := range *iegb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*iegb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := iegb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// IncidentEventSelect is the builder for selecting fields of IncidentEvent entities.
type IncidentEventSelect struct {
	*IncidentEventQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ies *IncidentEventSelect) Aggregate(fns ...AggregateFunc) *IncidentEventSelect {
	ies.fns = append(ies.fns, fns...)
	return ies
}

// Scan applies the selector query and scans the result into the given value.
func (ies *IncidentEventSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ies.ctx, ent.OpQuerySelect)
	if err := ies.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*IncidentEventQuery, *IncidentEventSelect](ctx, ies.IncidentEventQuery, ies, ies.inters, v)
}

func (ies *IncidentEventSelect) sqlScan(ctx context.Context, root *IncidentEventQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ies.fns))
	for _, fn := range ies.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ies.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ies.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ies *IncidentEventSelect) Modify(modifiers ...func(s *sql.Selector)) *IncidentEventSelect {
	ies.modifiers = append(ies.modifiers, modifiers...)
	return ies
}
