// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/incidentdebrief"
	"github.com/rezible/rezible/ent/incidentdebriefmessage"
	"github.com/rezible/rezible/ent/incidentdebriefquestion"
	"github.com/rezible/rezible/ent/predicate"
)

// IncidentDebriefMessageUpdate is the builder for updating IncidentDebriefMessage entities.
type IncidentDebriefMessageUpdate struct {
	config
	hooks     []Hook
	mutation  *IncidentDebriefMessageMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the IncidentDebriefMessageUpdate builder.
func (idmu *IncidentDebriefMessageUpdate) Where(ps ...predicate.IncidentDebriefMessage) *IncidentDebriefMessageUpdate {
	idmu.mutation.Where(ps...)
	return idmu
}

// SetDebriefID sets the "debrief_id" field.
func (idmu *IncidentDebriefMessageUpdate) SetDebriefID(u uuid.UUID) *IncidentDebriefMessageUpdate {
	idmu.mutation.SetDebriefID(u)
	return idmu
}

// SetNillableDebriefID sets the "debrief_id" field if the given value is not nil.
func (idmu *IncidentDebriefMessageUpdate) SetNillableDebriefID(u *uuid.UUID) *IncidentDebriefMessageUpdate {
	if u != nil {
		idmu.SetDebriefID(*u)
	}
	return idmu
}

// SetQuestionID sets the "question_id" field.
func (idmu *IncidentDebriefMessageUpdate) SetQuestionID(u uuid.UUID) *IncidentDebriefMessageUpdate {
	idmu.mutation.SetQuestionID(u)
	return idmu
}

// SetNillableQuestionID sets the "question_id" field if the given value is not nil.
func (idmu *IncidentDebriefMessageUpdate) SetNillableQuestionID(u *uuid.UUID) *IncidentDebriefMessageUpdate {
	if u != nil {
		idmu.SetQuestionID(*u)
	}
	return idmu
}

// ClearQuestionID clears the value of the "question_id" field.
func (idmu *IncidentDebriefMessageUpdate) ClearQuestionID() *IncidentDebriefMessageUpdate {
	idmu.mutation.ClearQuestionID()
	return idmu
}

// SetCreatedAt sets the "created_at" field.
func (idmu *IncidentDebriefMessageUpdate) SetCreatedAt(t time.Time) *IncidentDebriefMessageUpdate {
	idmu.mutation.SetCreatedAt(t)
	return idmu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (idmu *IncidentDebriefMessageUpdate) SetNillableCreatedAt(t *time.Time) *IncidentDebriefMessageUpdate {
	if t != nil {
		idmu.SetCreatedAt(*t)
	}
	return idmu
}

// SetType sets the "type" field.
func (idmu *IncidentDebriefMessageUpdate) SetType(i incidentdebriefmessage.Type) *IncidentDebriefMessageUpdate {
	idmu.mutation.SetType(i)
	return idmu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (idmu *IncidentDebriefMessageUpdate) SetNillableType(i *incidentdebriefmessage.Type) *IncidentDebriefMessageUpdate {
	if i != nil {
		idmu.SetType(*i)
	}
	return idmu
}

// SetRequestedTool sets the "requested_tool" field.
func (idmu *IncidentDebriefMessageUpdate) SetRequestedTool(it incidentdebriefmessage.RequestedTool) *IncidentDebriefMessageUpdate {
	idmu.mutation.SetRequestedTool(it)
	return idmu
}

// SetNillableRequestedTool sets the "requested_tool" field if the given value is not nil.
func (idmu *IncidentDebriefMessageUpdate) SetNillableRequestedTool(it *incidentdebriefmessage.RequestedTool) *IncidentDebriefMessageUpdate {
	if it != nil {
		idmu.SetRequestedTool(*it)
	}
	return idmu
}

// ClearRequestedTool clears the value of the "requested_tool" field.
func (idmu *IncidentDebriefMessageUpdate) ClearRequestedTool() *IncidentDebriefMessageUpdate {
	idmu.mutation.ClearRequestedTool()
	return idmu
}

// SetBody sets the "body" field.
func (idmu *IncidentDebriefMessageUpdate) SetBody(s string) *IncidentDebriefMessageUpdate {
	idmu.mutation.SetBody(s)
	return idmu
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (idmu *IncidentDebriefMessageUpdate) SetNillableBody(s *string) *IncidentDebriefMessageUpdate {
	if s != nil {
		idmu.SetBody(*s)
	}
	return idmu
}

// SetDebrief sets the "debrief" edge to the IncidentDebrief entity.
func (idmu *IncidentDebriefMessageUpdate) SetDebrief(i *IncidentDebrief) *IncidentDebriefMessageUpdate {
	return idmu.SetDebriefID(i.ID)
}

// SetFromQuestionID sets the "from_question" edge to the IncidentDebriefQuestion entity by ID.
func (idmu *IncidentDebriefMessageUpdate) SetFromQuestionID(id uuid.UUID) *IncidentDebriefMessageUpdate {
	idmu.mutation.SetFromQuestionID(id)
	return idmu
}

// SetNillableFromQuestionID sets the "from_question" edge to the IncidentDebriefQuestion entity by ID if the given value is not nil.
func (idmu *IncidentDebriefMessageUpdate) SetNillableFromQuestionID(id *uuid.UUID) *IncidentDebriefMessageUpdate {
	if id != nil {
		idmu = idmu.SetFromQuestionID(*id)
	}
	return idmu
}

// SetFromQuestion sets the "from_question" edge to the IncidentDebriefQuestion entity.
func (idmu *IncidentDebriefMessageUpdate) SetFromQuestion(i *IncidentDebriefQuestion) *IncidentDebriefMessageUpdate {
	return idmu.SetFromQuestionID(i.ID)
}

// Mutation returns the IncidentDebriefMessageMutation object of the builder.
func (idmu *IncidentDebriefMessageUpdate) Mutation() *IncidentDebriefMessageMutation {
	return idmu.mutation
}

// ClearDebrief clears the "debrief" edge to the IncidentDebrief entity.
func (idmu *IncidentDebriefMessageUpdate) ClearDebrief() *IncidentDebriefMessageUpdate {
	idmu.mutation.ClearDebrief()
	return idmu
}

// ClearFromQuestion clears the "from_question" edge to the IncidentDebriefQuestion entity.
func (idmu *IncidentDebriefMessageUpdate) ClearFromQuestion() *IncidentDebriefMessageUpdate {
	idmu.mutation.ClearFromQuestion()
	return idmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (idmu *IncidentDebriefMessageUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, idmu.sqlSave, idmu.mutation, idmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (idmu *IncidentDebriefMessageUpdate) SaveX(ctx context.Context) int {
	affected, err := idmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (idmu *IncidentDebriefMessageUpdate) Exec(ctx context.Context) error {
	_, err := idmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (idmu *IncidentDebriefMessageUpdate) ExecX(ctx context.Context) {
	if err := idmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (idmu *IncidentDebriefMessageUpdate) check() error {
	if v, ok := idmu.mutation.GetType(); ok {
		if err := incidentdebriefmessage.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "IncidentDebriefMessage.type": %w`, err)}
		}
	}
	if v, ok := idmu.mutation.RequestedTool(); ok {
		if err := incidentdebriefmessage.RequestedToolValidator(v); err != nil {
			return &ValidationError{Name: "requested_tool", err: fmt.Errorf(`ent: validator failed for field "IncidentDebriefMessage.requested_tool": %w`, err)}
		}
	}
	if idmu.mutation.DebriefCleared() && len(idmu.mutation.DebriefIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IncidentDebriefMessage.debrief"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (idmu *IncidentDebriefMessageUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *IncidentDebriefMessageUpdate {
	idmu.modifiers = append(idmu.modifiers, modifiers...)
	return idmu
}

func (idmu *IncidentDebriefMessageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := idmu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(incidentdebriefmessage.Table, incidentdebriefmessage.Columns, sqlgraph.NewFieldSpec(incidentdebriefmessage.FieldID, field.TypeUUID))
	if ps := idmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := idmu.mutation.CreatedAt(); ok {
		_spec.SetField(incidentdebriefmessage.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := idmu.mutation.GetType(); ok {
		_spec.SetField(incidentdebriefmessage.FieldType, field.TypeEnum, value)
	}
	if value, ok := idmu.mutation.RequestedTool(); ok {
		_spec.SetField(incidentdebriefmessage.FieldRequestedTool, field.TypeEnum, value)
	}
	if idmu.mutation.RequestedToolCleared() {
		_spec.ClearField(incidentdebriefmessage.FieldRequestedTool, field.TypeEnum)
	}
	if value, ok := idmu.mutation.Body(); ok {
		_spec.SetField(incidentdebriefmessage.FieldBody, field.TypeString, value)
	}
	if idmu.mutation.DebriefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incidentdebriefmessage.DebriefTable,
			Columns: []string{incidentdebriefmessage.DebriefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentdebrief.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := idmu.mutation.DebriefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incidentdebriefmessage.DebriefTable,
			Columns: []string{incidentdebriefmessage.DebriefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentdebrief.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if idmu.mutation.FromQuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentdebriefmessage.FromQuestionTable,
			Columns: []string{incidentdebriefmessage.FromQuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentdebriefquestion.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := idmu.mutation.FromQuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentdebriefmessage.FromQuestionTable,
			Columns: []string{incidentdebriefmessage.FromQuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentdebriefquestion.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(idmu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, idmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{incidentdebriefmessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	idmu.mutation.done = true
	return n, nil
}

// IncidentDebriefMessageUpdateOne is the builder for updating a single IncidentDebriefMessage entity.
type IncidentDebriefMessageUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *IncidentDebriefMessageMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDebriefID sets the "debrief_id" field.
func (idmuo *IncidentDebriefMessageUpdateOne) SetDebriefID(u uuid.UUID) *IncidentDebriefMessageUpdateOne {
	idmuo.mutation.SetDebriefID(u)
	return idmuo
}

// SetNillableDebriefID sets the "debrief_id" field if the given value is not nil.
func (idmuo *IncidentDebriefMessageUpdateOne) SetNillableDebriefID(u *uuid.UUID) *IncidentDebriefMessageUpdateOne {
	if u != nil {
		idmuo.SetDebriefID(*u)
	}
	return idmuo
}

// SetQuestionID sets the "question_id" field.
func (idmuo *IncidentDebriefMessageUpdateOne) SetQuestionID(u uuid.UUID) *IncidentDebriefMessageUpdateOne {
	idmuo.mutation.SetQuestionID(u)
	return idmuo
}

// SetNillableQuestionID sets the "question_id" field if the given value is not nil.
func (idmuo *IncidentDebriefMessageUpdateOne) SetNillableQuestionID(u *uuid.UUID) *IncidentDebriefMessageUpdateOne {
	if u != nil {
		idmuo.SetQuestionID(*u)
	}
	return idmuo
}

// ClearQuestionID clears the value of the "question_id" field.
func (idmuo *IncidentDebriefMessageUpdateOne) ClearQuestionID() *IncidentDebriefMessageUpdateOne {
	idmuo.mutation.ClearQuestionID()
	return idmuo
}

// SetCreatedAt sets the "created_at" field.
func (idmuo *IncidentDebriefMessageUpdateOne) SetCreatedAt(t time.Time) *IncidentDebriefMessageUpdateOne {
	idmuo.mutation.SetCreatedAt(t)
	return idmuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (idmuo *IncidentDebriefMessageUpdateOne) SetNillableCreatedAt(t *time.Time) *IncidentDebriefMessageUpdateOne {
	if t != nil {
		idmuo.SetCreatedAt(*t)
	}
	return idmuo
}

// SetType sets the "type" field.
func (idmuo *IncidentDebriefMessageUpdateOne) SetType(i incidentdebriefmessage.Type) *IncidentDebriefMessageUpdateOne {
	idmuo.mutation.SetType(i)
	return idmuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (idmuo *IncidentDebriefMessageUpdateOne) SetNillableType(i *incidentdebriefmessage.Type) *IncidentDebriefMessageUpdateOne {
	if i != nil {
		idmuo.SetType(*i)
	}
	return idmuo
}

// SetRequestedTool sets the "requested_tool" field.
func (idmuo *IncidentDebriefMessageUpdateOne) SetRequestedTool(it incidentdebriefmessage.RequestedTool) *IncidentDebriefMessageUpdateOne {
	idmuo.mutation.SetRequestedTool(it)
	return idmuo
}

// SetNillableRequestedTool sets the "requested_tool" field if the given value is not nil.
func (idmuo *IncidentDebriefMessageUpdateOne) SetNillableRequestedTool(it *incidentdebriefmessage.RequestedTool) *IncidentDebriefMessageUpdateOne {
	if it != nil {
		idmuo.SetRequestedTool(*it)
	}
	return idmuo
}

// ClearRequestedTool clears the value of the "requested_tool" field.
func (idmuo *IncidentDebriefMessageUpdateOne) ClearRequestedTool() *IncidentDebriefMessageUpdateOne {
	idmuo.mutation.ClearRequestedTool()
	return idmuo
}

// SetBody sets the "body" field.
func (idmuo *IncidentDebriefMessageUpdateOne) SetBody(s string) *IncidentDebriefMessageUpdateOne {
	idmuo.mutation.SetBody(s)
	return idmuo
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (idmuo *IncidentDebriefMessageUpdateOne) SetNillableBody(s *string) *IncidentDebriefMessageUpdateOne {
	if s != nil {
		idmuo.SetBody(*s)
	}
	return idmuo
}

// SetDebrief sets the "debrief" edge to the IncidentDebrief entity.
func (idmuo *IncidentDebriefMessageUpdateOne) SetDebrief(i *IncidentDebrief) *IncidentDebriefMessageUpdateOne {
	return idmuo.SetDebriefID(i.ID)
}

// SetFromQuestionID sets the "from_question" edge to the IncidentDebriefQuestion entity by ID.
func (idmuo *IncidentDebriefMessageUpdateOne) SetFromQuestionID(id uuid.UUID) *IncidentDebriefMessageUpdateOne {
	idmuo.mutation.SetFromQuestionID(id)
	return idmuo
}

// SetNillableFromQuestionID sets the "from_question" edge to the IncidentDebriefQuestion entity by ID if the given value is not nil.
func (idmuo *IncidentDebriefMessageUpdateOne) SetNillableFromQuestionID(id *uuid.UUID) *IncidentDebriefMessageUpdateOne {
	if id != nil {
		idmuo = idmuo.SetFromQuestionID(*id)
	}
	return idmuo
}

// SetFromQuestion sets the "from_question" edge to the IncidentDebriefQuestion entity.
func (idmuo *IncidentDebriefMessageUpdateOne) SetFromQuestion(i *IncidentDebriefQuestion) *IncidentDebriefMessageUpdateOne {
	return idmuo.SetFromQuestionID(i.ID)
}

// Mutation returns the IncidentDebriefMessageMutation object of the builder.
func (idmuo *IncidentDebriefMessageUpdateOne) Mutation() *IncidentDebriefMessageMutation {
	return idmuo.mutation
}

// ClearDebrief clears the "debrief" edge to the IncidentDebrief entity.
func (idmuo *IncidentDebriefMessageUpdateOne) ClearDebrief() *IncidentDebriefMessageUpdateOne {
	idmuo.mutation.ClearDebrief()
	return idmuo
}

// ClearFromQuestion clears the "from_question" edge to the IncidentDebriefQuestion entity.
func (idmuo *IncidentDebriefMessageUpdateOne) ClearFromQuestion() *IncidentDebriefMessageUpdateOne {
	idmuo.mutation.ClearFromQuestion()
	return idmuo
}

// Where appends a list predicates to the IncidentDebriefMessageUpdate builder.
func (idmuo *IncidentDebriefMessageUpdateOne) Where(ps ...predicate.IncidentDebriefMessage) *IncidentDebriefMessageUpdateOne {
	idmuo.mutation.Where(ps...)
	return idmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (idmuo *IncidentDebriefMessageUpdateOne) Select(field string, fields ...string) *IncidentDebriefMessageUpdateOne {
	idmuo.fields = append([]string{field}, fields...)
	return idmuo
}

// Save executes the query and returns the updated IncidentDebriefMessage entity.
func (idmuo *IncidentDebriefMessageUpdateOne) Save(ctx context.Context) (*IncidentDebriefMessage, error) {
	return withHooks(ctx, idmuo.sqlSave, idmuo.mutation, idmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (idmuo *IncidentDebriefMessageUpdateOne) SaveX(ctx context.Context) *IncidentDebriefMessage {
	node, err := idmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (idmuo *IncidentDebriefMessageUpdateOne) Exec(ctx context.Context) error {
	_, err := idmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (idmuo *IncidentDebriefMessageUpdateOne) ExecX(ctx context.Context) {
	if err := idmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (idmuo *IncidentDebriefMessageUpdateOne) check() error {
	if v, ok := idmuo.mutation.GetType(); ok {
		if err := incidentdebriefmessage.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "IncidentDebriefMessage.type": %w`, err)}
		}
	}
	if v, ok := idmuo.mutation.RequestedTool(); ok {
		if err := incidentdebriefmessage.RequestedToolValidator(v); err != nil {
			return &ValidationError{Name: "requested_tool", err: fmt.Errorf(`ent: validator failed for field "IncidentDebriefMessage.requested_tool": %w`, err)}
		}
	}
	if idmuo.mutation.DebriefCleared() && len(idmuo.mutation.DebriefIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IncidentDebriefMessage.debrief"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (idmuo *IncidentDebriefMessageUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *IncidentDebriefMessageUpdateOne {
	idmuo.modifiers = append(idmuo.modifiers, modifiers...)
	return idmuo
}

func (idmuo *IncidentDebriefMessageUpdateOne) sqlSave(ctx context.Context) (_node *IncidentDebriefMessage, err error) {
	if err := idmuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(incidentdebriefmessage.Table, incidentdebriefmessage.Columns, sqlgraph.NewFieldSpec(incidentdebriefmessage.FieldID, field.TypeUUID))
	id, ok := idmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "IncidentDebriefMessage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := idmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, incidentdebriefmessage.FieldID)
		for _, f := range fields {
			if !incidentdebriefmessage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != incidentdebriefmessage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := idmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := idmuo.mutation.CreatedAt(); ok {
		_spec.SetField(incidentdebriefmessage.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := idmuo.mutation.GetType(); ok {
		_spec.SetField(incidentdebriefmessage.FieldType, field.TypeEnum, value)
	}
	if value, ok := idmuo.mutation.RequestedTool(); ok {
		_spec.SetField(incidentdebriefmessage.FieldRequestedTool, field.TypeEnum, value)
	}
	if idmuo.mutation.RequestedToolCleared() {
		_spec.ClearField(incidentdebriefmessage.FieldRequestedTool, field.TypeEnum)
	}
	if value, ok := idmuo.mutation.Body(); ok {
		_spec.SetField(incidentdebriefmessage.FieldBody, field.TypeString, value)
	}
	if idmuo.mutation.DebriefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incidentdebriefmessage.DebriefTable,
			Columns: []string{incidentdebriefmessage.DebriefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentdebrief.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := idmuo.mutation.DebriefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incidentdebriefmessage.DebriefTable,
			Columns: []string{incidentdebriefmessage.DebriefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentdebrief.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if idmuo.mutation.FromQuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentdebriefmessage.FromQuestionTable,
			Columns: []string{incidentdebriefmessage.FromQuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentdebriefquestion.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := idmuo.mutation.FromQuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentdebriefmessage.FromQuestionTable,
			Columns: []string{incidentdebriefmessage.FromQuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentdebriefquestion.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(idmuo.modifiers...)
	_node = &IncidentDebriefMessage{config: idmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, idmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{incidentdebriefmessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	idmuo.mutation.done = true
	return _node, nil
}
