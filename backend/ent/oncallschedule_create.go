// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/oncallroster"
	"github.com/rezible/rezible/ent/oncallschedule"
	"github.com/rezible/rezible/ent/oncallscheduleparticipant"
)

// OncallScheduleCreate is the builder for creating a OncallSchedule entity.
type OncallScheduleCreate struct {
	config
	mutation *OncallScheduleMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetArchiveTime sets the "archive_time" field.
func (osc *OncallScheduleCreate) SetArchiveTime(t time.Time) *OncallScheduleCreate {
	osc.mutation.SetArchiveTime(t)
	return osc
}

// SetNillableArchiveTime sets the "archive_time" field if the given value is not nil.
func (osc *OncallScheduleCreate) SetNillableArchiveTime(t *time.Time) *OncallScheduleCreate {
	if t != nil {
		osc.SetArchiveTime(*t)
	}
	return osc
}

// SetName sets the "name" field.
func (osc *OncallScheduleCreate) SetName(s string) *OncallScheduleCreate {
	osc.mutation.SetName(s)
	return osc
}

// SetRosterID sets the "roster_id" field.
func (osc *OncallScheduleCreate) SetRosterID(u uuid.UUID) *OncallScheduleCreate {
	osc.mutation.SetRosterID(u)
	return osc
}

// SetTimezone sets the "timezone" field.
func (osc *OncallScheduleCreate) SetTimezone(s string) *OncallScheduleCreate {
	osc.mutation.SetTimezone(s)
	return osc
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (osc *OncallScheduleCreate) SetNillableTimezone(s *string) *OncallScheduleCreate {
	if s != nil {
		osc.SetTimezone(*s)
	}
	return osc
}

// SetProviderID sets the "provider_id" field.
func (osc *OncallScheduleCreate) SetProviderID(s string) *OncallScheduleCreate {
	osc.mutation.SetProviderID(s)
	return osc
}

// SetID sets the "id" field.
func (osc *OncallScheduleCreate) SetID(u uuid.UUID) *OncallScheduleCreate {
	osc.mutation.SetID(u)
	return osc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (osc *OncallScheduleCreate) SetNillableID(u *uuid.UUID) *OncallScheduleCreate {
	if u != nil {
		osc.SetID(*u)
	}
	return osc
}

// AddParticipantIDs adds the "participants" edge to the OncallScheduleParticipant entity by IDs.
func (osc *OncallScheduleCreate) AddParticipantIDs(ids ...uuid.UUID) *OncallScheduleCreate {
	osc.mutation.AddParticipantIDs(ids...)
	return osc
}

// AddParticipants adds the "participants" edges to the OncallScheduleParticipant entity.
func (osc *OncallScheduleCreate) AddParticipants(o ...*OncallScheduleParticipant) *OncallScheduleCreate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return osc.AddParticipantIDs(ids...)
}

// SetRoster sets the "roster" edge to the OncallRoster entity.
func (osc *OncallScheduleCreate) SetRoster(o *OncallRoster) *OncallScheduleCreate {
	return osc.SetRosterID(o.ID)
}

// Mutation returns the OncallScheduleMutation object of the builder.
func (osc *OncallScheduleCreate) Mutation() *OncallScheduleMutation {
	return osc.mutation
}

// Save creates the OncallSchedule in the database.
func (osc *OncallScheduleCreate) Save(ctx context.Context) (*OncallSchedule, error) {
	if err := osc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, osc.sqlSave, osc.mutation, osc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (osc *OncallScheduleCreate) SaveX(ctx context.Context) *OncallSchedule {
	v, err := osc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (osc *OncallScheduleCreate) Exec(ctx context.Context) error {
	_, err := osc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osc *OncallScheduleCreate) ExecX(ctx context.Context) {
	if err := osc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (osc *OncallScheduleCreate) defaults() error {
	if _, ok := osc.mutation.ID(); !ok {
		if oncallschedule.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized oncallschedule.DefaultID (forgotten import ent/runtime?)")
		}
		v := oncallschedule.DefaultID()
		osc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (osc *OncallScheduleCreate) check() error {
	if _, ok := osc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "OncallSchedule.name"`)}
	}
	if _, ok := osc.mutation.RosterID(); !ok {
		return &ValidationError{Name: "roster_id", err: errors.New(`ent: missing required field "OncallSchedule.roster_id"`)}
	}
	if _, ok := osc.mutation.ProviderID(); !ok {
		return &ValidationError{Name: "provider_id", err: errors.New(`ent: missing required field "OncallSchedule.provider_id"`)}
	}
	if len(osc.mutation.RosterIDs()) == 0 {
		return &ValidationError{Name: "roster", err: errors.New(`ent: missing required edge "OncallSchedule.roster"`)}
	}
	return nil
}

func (osc *OncallScheduleCreate) sqlSave(ctx context.Context) (*OncallSchedule, error) {
	if err := osc.check(); err != nil {
		return nil, err
	}
	_node, _spec := osc.createSpec()
	if err := sqlgraph.CreateNode(ctx, osc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	osc.mutation.id = &_node.ID
	osc.mutation.done = true
	return _node, nil
}

func (osc *OncallScheduleCreate) createSpec() (*OncallSchedule, *sqlgraph.CreateSpec) {
	var (
		_node = &OncallSchedule{config: osc.config}
		_spec = sqlgraph.NewCreateSpec(oncallschedule.Table, sqlgraph.NewFieldSpec(oncallschedule.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = osc.conflict
	if id, ok := osc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := osc.mutation.ArchiveTime(); ok {
		_spec.SetField(oncallschedule.FieldArchiveTime, field.TypeTime, value)
		_node.ArchiveTime = value
	}
	if value, ok := osc.mutation.Name(); ok {
		_spec.SetField(oncallschedule.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := osc.mutation.Timezone(); ok {
		_spec.SetField(oncallschedule.FieldTimezone, field.TypeString, value)
		_node.Timezone = value
	}
	if value, ok := osc.mutation.ProviderID(); ok {
		_spec.SetField(oncallschedule.FieldProviderID, field.TypeString, value)
		_node.ProviderID = value
	}
	if nodes := osc.mutation.ParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oncallschedule.ParticipantsTable,
			Columns: []string{oncallschedule.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallscheduleparticipant.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := osc.mutation.RosterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oncallschedule.RosterTable,
			Columns: []string{oncallschedule.RosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RosterID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OncallSchedule.Create().
//		SetArchiveTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OncallScheduleUpsert) {
//			SetArchiveTime(v+v).
//		}).
//		Exec(ctx)
func (osc *OncallScheduleCreate) OnConflict(opts ...sql.ConflictOption) *OncallScheduleUpsertOne {
	osc.conflict = opts
	return &OncallScheduleUpsertOne{
		create: osc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OncallSchedule.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (osc *OncallScheduleCreate) OnConflictColumns(columns ...string) *OncallScheduleUpsertOne {
	osc.conflict = append(osc.conflict, sql.ConflictColumns(columns...))
	return &OncallScheduleUpsertOne{
		create: osc,
	}
}

type (
	// OncallScheduleUpsertOne is the builder for "upsert"-ing
	//  one OncallSchedule node.
	OncallScheduleUpsertOne struct {
		create *OncallScheduleCreate
	}

	// OncallScheduleUpsert is the "OnConflict" setter.
	OncallScheduleUpsert struct {
		*sql.UpdateSet
	}
)

// SetArchiveTime sets the "archive_time" field.
func (u *OncallScheduleUpsert) SetArchiveTime(v time.Time) *OncallScheduleUpsert {
	u.Set(oncallschedule.FieldArchiveTime, v)
	return u
}

// UpdateArchiveTime sets the "archive_time" field to the value that was provided on create.
func (u *OncallScheduleUpsert) UpdateArchiveTime() *OncallScheduleUpsert {
	u.SetExcluded(oncallschedule.FieldArchiveTime)
	return u
}

// ClearArchiveTime clears the value of the "archive_time" field.
func (u *OncallScheduleUpsert) ClearArchiveTime() *OncallScheduleUpsert {
	u.SetNull(oncallschedule.FieldArchiveTime)
	return u
}

// SetName sets the "name" field.
func (u *OncallScheduleUpsert) SetName(v string) *OncallScheduleUpsert {
	u.Set(oncallschedule.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OncallScheduleUpsert) UpdateName() *OncallScheduleUpsert {
	u.SetExcluded(oncallschedule.FieldName)
	return u
}

// SetRosterID sets the "roster_id" field.
func (u *OncallScheduleUpsert) SetRosterID(v uuid.UUID) *OncallScheduleUpsert {
	u.Set(oncallschedule.FieldRosterID, v)
	return u
}

// UpdateRosterID sets the "roster_id" field to the value that was provided on create.
func (u *OncallScheduleUpsert) UpdateRosterID() *OncallScheduleUpsert {
	u.SetExcluded(oncallschedule.FieldRosterID)
	return u
}

// SetTimezone sets the "timezone" field.
func (u *OncallScheduleUpsert) SetTimezone(v string) *OncallScheduleUpsert {
	u.Set(oncallschedule.FieldTimezone, v)
	return u
}

// UpdateTimezone sets the "timezone" field to the value that was provided on create.
func (u *OncallScheduleUpsert) UpdateTimezone() *OncallScheduleUpsert {
	u.SetExcluded(oncallschedule.FieldTimezone)
	return u
}

// ClearTimezone clears the value of the "timezone" field.
func (u *OncallScheduleUpsert) ClearTimezone() *OncallScheduleUpsert {
	u.SetNull(oncallschedule.FieldTimezone)
	return u
}

// SetProviderID sets the "provider_id" field.
func (u *OncallScheduleUpsert) SetProviderID(v string) *OncallScheduleUpsert {
	u.Set(oncallschedule.FieldProviderID, v)
	return u
}

// UpdateProviderID sets the "provider_id" field to the value that was provided on create.
func (u *OncallScheduleUpsert) UpdateProviderID() *OncallScheduleUpsert {
	u.SetExcluded(oncallschedule.FieldProviderID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OncallSchedule.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oncallschedule.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OncallScheduleUpsertOne) UpdateNewValues() *OncallScheduleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(oncallschedule.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OncallSchedule.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OncallScheduleUpsertOne) Ignore() *OncallScheduleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OncallScheduleUpsertOne) DoNothing() *OncallScheduleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OncallScheduleCreate.OnConflict
// documentation for more info.
func (u *OncallScheduleUpsertOne) Update(set func(*OncallScheduleUpsert)) *OncallScheduleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OncallScheduleUpsert{UpdateSet: update})
	}))
	return u
}

// SetArchiveTime sets the "archive_time" field.
func (u *OncallScheduleUpsertOne) SetArchiveTime(v time.Time) *OncallScheduleUpsertOne {
	return u.Update(func(s *OncallScheduleUpsert) {
		s.SetArchiveTime(v)
	})
}

// UpdateArchiveTime sets the "archive_time" field to the value that was provided on create.
func (u *OncallScheduleUpsertOne) UpdateArchiveTime() *OncallScheduleUpsertOne {
	return u.Update(func(s *OncallScheduleUpsert) {
		s.UpdateArchiveTime()
	})
}

// ClearArchiveTime clears the value of the "archive_time" field.
func (u *OncallScheduleUpsertOne) ClearArchiveTime() *OncallScheduleUpsertOne {
	return u.Update(func(s *OncallScheduleUpsert) {
		s.ClearArchiveTime()
	})
}

// SetName sets the "name" field.
func (u *OncallScheduleUpsertOne) SetName(v string) *OncallScheduleUpsertOne {
	return u.Update(func(s *OncallScheduleUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OncallScheduleUpsertOne) UpdateName() *OncallScheduleUpsertOne {
	return u.Update(func(s *OncallScheduleUpsert) {
		s.UpdateName()
	})
}

// SetRosterID sets the "roster_id" field.
func (u *OncallScheduleUpsertOne) SetRosterID(v uuid.UUID) *OncallScheduleUpsertOne {
	return u.Update(func(s *OncallScheduleUpsert) {
		s.SetRosterID(v)
	})
}

// UpdateRosterID sets the "roster_id" field to the value that was provided on create.
func (u *OncallScheduleUpsertOne) UpdateRosterID() *OncallScheduleUpsertOne {
	return u.Update(func(s *OncallScheduleUpsert) {
		s.UpdateRosterID()
	})
}

// SetTimezone sets the "timezone" field.
func (u *OncallScheduleUpsertOne) SetTimezone(v string) *OncallScheduleUpsertOne {
	return u.Update(func(s *OncallScheduleUpsert) {
		s.SetTimezone(v)
	})
}

// UpdateTimezone sets the "timezone" field to the value that was provided on create.
func (u *OncallScheduleUpsertOne) UpdateTimezone() *OncallScheduleUpsertOne {
	return u.Update(func(s *OncallScheduleUpsert) {
		s.UpdateTimezone()
	})
}

// ClearTimezone clears the value of the "timezone" field.
func (u *OncallScheduleUpsertOne) ClearTimezone() *OncallScheduleUpsertOne {
	return u.Update(func(s *OncallScheduleUpsert) {
		s.ClearTimezone()
	})
}

// SetProviderID sets the "provider_id" field.
func (u *OncallScheduleUpsertOne) SetProviderID(v string) *OncallScheduleUpsertOne {
	return u.Update(func(s *OncallScheduleUpsert) {
		s.SetProviderID(v)
	})
}

// UpdateProviderID sets the "provider_id" field to the value that was provided on create.
func (u *OncallScheduleUpsertOne) UpdateProviderID() *OncallScheduleUpsertOne {
	return u.Update(func(s *OncallScheduleUpsert) {
		s.UpdateProviderID()
	})
}

// Exec executes the query.
func (u *OncallScheduleUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OncallScheduleCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OncallScheduleUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OncallScheduleUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: OncallScheduleUpsertOne.ID is not supported by MySQL driver. Use OncallScheduleUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OncallScheduleUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OncallScheduleCreateBulk is the builder for creating many OncallSchedule entities in bulk.
type OncallScheduleCreateBulk struct {
	config
	err      error
	builders []*OncallScheduleCreate
	conflict []sql.ConflictOption
}

// Save creates the OncallSchedule entities in the database.
func (oscb *OncallScheduleCreateBulk) Save(ctx context.Context) ([]*OncallSchedule, error) {
	if oscb.err != nil {
		return nil, oscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(oscb.builders))
	nodes := make([]*OncallSchedule, len(oscb.builders))
	mutators := make([]Mutator, len(oscb.builders))
	for i := range oscb.builders {
		func(i int, root context.Context) {
			builder := oscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OncallScheduleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = oscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oscb *OncallScheduleCreateBulk) SaveX(ctx context.Context) []*OncallSchedule {
	v, err := oscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oscb *OncallScheduleCreateBulk) Exec(ctx context.Context) error {
	_, err := oscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oscb *OncallScheduleCreateBulk) ExecX(ctx context.Context) {
	if err := oscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OncallSchedule.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OncallScheduleUpsert) {
//			SetArchiveTime(v+v).
//		}).
//		Exec(ctx)
func (oscb *OncallScheduleCreateBulk) OnConflict(opts ...sql.ConflictOption) *OncallScheduleUpsertBulk {
	oscb.conflict = opts
	return &OncallScheduleUpsertBulk{
		create: oscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OncallSchedule.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oscb *OncallScheduleCreateBulk) OnConflictColumns(columns ...string) *OncallScheduleUpsertBulk {
	oscb.conflict = append(oscb.conflict, sql.ConflictColumns(columns...))
	return &OncallScheduleUpsertBulk{
		create: oscb,
	}
}

// OncallScheduleUpsertBulk is the builder for "upsert"-ing
// a bulk of OncallSchedule nodes.
type OncallScheduleUpsertBulk struct {
	create *OncallScheduleCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OncallSchedule.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oncallschedule.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OncallScheduleUpsertBulk) UpdateNewValues() *OncallScheduleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(oncallschedule.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OncallSchedule.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OncallScheduleUpsertBulk) Ignore() *OncallScheduleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OncallScheduleUpsertBulk) DoNothing() *OncallScheduleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OncallScheduleCreateBulk.OnConflict
// documentation for more info.
func (u *OncallScheduleUpsertBulk) Update(set func(*OncallScheduleUpsert)) *OncallScheduleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OncallScheduleUpsert{UpdateSet: update})
	}))
	return u
}

// SetArchiveTime sets the "archive_time" field.
func (u *OncallScheduleUpsertBulk) SetArchiveTime(v time.Time) *OncallScheduleUpsertBulk {
	return u.Update(func(s *OncallScheduleUpsert) {
		s.SetArchiveTime(v)
	})
}

// UpdateArchiveTime sets the "archive_time" field to the value that was provided on create.
func (u *OncallScheduleUpsertBulk) UpdateArchiveTime() *OncallScheduleUpsertBulk {
	return u.Update(func(s *OncallScheduleUpsert) {
		s.UpdateArchiveTime()
	})
}

// ClearArchiveTime clears the value of the "archive_time" field.
func (u *OncallScheduleUpsertBulk) ClearArchiveTime() *OncallScheduleUpsertBulk {
	return u.Update(func(s *OncallScheduleUpsert) {
		s.ClearArchiveTime()
	})
}

// SetName sets the "name" field.
func (u *OncallScheduleUpsertBulk) SetName(v string) *OncallScheduleUpsertBulk {
	return u.Update(func(s *OncallScheduleUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OncallScheduleUpsertBulk) UpdateName() *OncallScheduleUpsertBulk {
	return u.Update(func(s *OncallScheduleUpsert) {
		s.UpdateName()
	})
}

// SetRosterID sets the "roster_id" field.
func (u *OncallScheduleUpsertBulk) SetRosterID(v uuid.UUID) *OncallScheduleUpsertBulk {
	return u.Update(func(s *OncallScheduleUpsert) {
		s.SetRosterID(v)
	})
}

// UpdateRosterID sets the "roster_id" field to the value that was provided on create.
func (u *OncallScheduleUpsertBulk) UpdateRosterID() *OncallScheduleUpsertBulk {
	return u.Update(func(s *OncallScheduleUpsert) {
		s.UpdateRosterID()
	})
}

// SetTimezone sets the "timezone" field.
func (u *OncallScheduleUpsertBulk) SetTimezone(v string) *OncallScheduleUpsertBulk {
	return u.Update(func(s *OncallScheduleUpsert) {
		s.SetTimezone(v)
	})
}

// UpdateTimezone sets the "timezone" field to the value that was provided on create.
func (u *OncallScheduleUpsertBulk) UpdateTimezone() *OncallScheduleUpsertBulk {
	return u.Update(func(s *OncallScheduleUpsert) {
		s.UpdateTimezone()
	})
}

// ClearTimezone clears the value of the "timezone" field.
func (u *OncallScheduleUpsertBulk) ClearTimezone() *OncallScheduleUpsertBulk {
	return u.Update(func(s *OncallScheduleUpsert) {
		s.ClearTimezone()
	})
}

// SetProviderID sets the "provider_id" field.
func (u *OncallScheduleUpsertBulk) SetProviderID(v string) *OncallScheduleUpsertBulk {
	return u.Update(func(s *OncallScheduleUpsert) {
		s.SetProviderID(v)
	})
}

// UpdateProviderID sets the "provider_id" field to the value that was provided on create.
func (u *OncallScheduleUpsertBulk) UpdateProviderID() *OncallScheduleUpsertBulk {
	return u.Update(func(s *OncallScheduleUpsert) {
		s.UpdateProviderID()
	})
}

// Exec executes the query.
func (u *OncallScheduleUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OncallScheduleCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OncallScheduleCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OncallScheduleUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
