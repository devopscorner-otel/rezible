// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/oncallroster"
	"github.com/rezible/rezible/ent/oncallschedule"
	"github.com/rezible/rezible/ent/oncallscheduleparticipant"
	"github.com/rezible/rezible/ent/predicate"
)

// OncallScheduleUpdate is the builder for updating OncallSchedule entities.
type OncallScheduleUpdate struct {
	config
	hooks     []Hook
	mutation  *OncallScheduleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OncallScheduleUpdate builder.
func (osu *OncallScheduleUpdate) Where(ps ...predicate.OncallSchedule) *OncallScheduleUpdate {
	osu.mutation.Where(ps...)
	return osu
}

// SetArchiveTime sets the "archive_time" field.
func (osu *OncallScheduleUpdate) SetArchiveTime(t time.Time) *OncallScheduleUpdate {
	osu.mutation.SetArchiveTime(t)
	return osu
}

// SetNillableArchiveTime sets the "archive_time" field if the given value is not nil.
func (osu *OncallScheduleUpdate) SetNillableArchiveTime(t *time.Time) *OncallScheduleUpdate {
	if t != nil {
		osu.SetArchiveTime(*t)
	}
	return osu
}

// ClearArchiveTime clears the value of the "archive_time" field.
func (osu *OncallScheduleUpdate) ClearArchiveTime() *OncallScheduleUpdate {
	osu.mutation.ClearArchiveTime()
	return osu
}

// SetName sets the "name" field.
func (osu *OncallScheduleUpdate) SetName(s string) *OncallScheduleUpdate {
	osu.mutation.SetName(s)
	return osu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (osu *OncallScheduleUpdate) SetNillableName(s *string) *OncallScheduleUpdate {
	if s != nil {
		osu.SetName(*s)
	}
	return osu
}

// SetRosterID sets the "roster_id" field.
func (osu *OncallScheduleUpdate) SetRosterID(u uuid.UUID) *OncallScheduleUpdate {
	osu.mutation.SetRosterID(u)
	return osu
}

// SetNillableRosterID sets the "roster_id" field if the given value is not nil.
func (osu *OncallScheduleUpdate) SetNillableRosterID(u *uuid.UUID) *OncallScheduleUpdate {
	if u != nil {
		osu.SetRosterID(*u)
	}
	return osu
}

// SetTimezone sets the "timezone" field.
func (osu *OncallScheduleUpdate) SetTimezone(s string) *OncallScheduleUpdate {
	osu.mutation.SetTimezone(s)
	return osu
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (osu *OncallScheduleUpdate) SetNillableTimezone(s *string) *OncallScheduleUpdate {
	if s != nil {
		osu.SetTimezone(*s)
	}
	return osu
}

// ClearTimezone clears the value of the "timezone" field.
func (osu *OncallScheduleUpdate) ClearTimezone() *OncallScheduleUpdate {
	osu.mutation.ClearTimezone()
	return osu
}

// SetProviderID sets the "provider_id" field.
func (osu *OncallScheduleUpdate) SetProviderID(s string) *OncallScheduleUpdate {
	osu.mutation.SetProviderID(s)
	return osu
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (osu *OncallScheduleUpdate) SetNillableProviderID(s *string) *OncallScheduleUpdate {
	if s != nil {
		osu.SetProviderID(*s)
	}
	return osu
}

// AddParticipantIDs adds the "participants" edge to the OncallScheduleParticipant entity by IDs.
func (osu *OncallScheduleUpdate) AddParticipantIDs(ids ...uuid.UUID) *OncallScheduleUpdate {
	osu.mutation.AddParticipantIDs(ids...)
	return osu
}

// AddParticipants adds the "participants" edges to the OncallScheduleParticipant entity.
func (osu *OncallScheduleUpdate) AddParticipants(o ...*OncallScheduleParticipant) *OncallScheduleUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return osu.AddParticipantIDs(ids...)
}

// SetRoster sets the "roster" edge to the OncallRoster entity.
func (osu *OncallScheduleUpdate) SetRoster(o *OncallRoster) *OncallScheduleUpdate {
	return osu.SetRosterID(o.ID)
}

// Mutation returns the OncallScheduleMutation object of the builder.
func (osu *OncallScheduleUpdate) Mutation() *OncallScheduleMutation {
	return osu.mutation
}

// ClearParticipants clears all "participants" edges to the OncallScheduleParticipant entity.
func (osu *OncallScheduleUpdate) ClearParticipants() *OncallScheduleUpdate {
	osu.mutation.ClearParticipants()
	return osu
}

// RemoveParticipantIDs removes the "participants" edge to OncallScheduleParticipant entities by IDs.
func (osu *OncallScheduleUpdate) RemoveParticipantIDs(ids ...uuid.UUID) *OncallScheduleUpdate {
	osu.mutation.RemoveParticipantIDs(ids...)
	return osu
}

// RemoveParticipants removes "participants" edges to OncallScheduleParticipant entities.
func (osu *OncallScheduleUpdate) RemoveParticipants(o ...*OncallScheduleParticipant) *OncallScheduleUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return osu.RemoveParticipantIDs(ids...)
}

// ClearRoster clears the "roster" edge to the OncallRoster entity.
func (osu *OncallScheduleUpdate) ClearRoster() *OncallScheduleUpdate {
	osu.mutation.ClearRoster()
	return osu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (osu *OncallScheduleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, osu.sqlSave, osu.mutation, osu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (osu *OncallScheduleUpdate) SaveX(ctx context.Context) int {
	affected, err := osu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (osu *OncallScheduleUpdate) Exec(ctx context.Context) error {
	_, err := osu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osu *OncallScheduleUpdate) ExecX(ctx context.Context) {
	if err := osu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (osu *OncallScheduleUpdate) check() error {
	if osu.mutation.TenantCleared() && len(osu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallSchedule.tenant"`)
	}
	if osu.mutation.RosterCleared() && len(osu.mutation.RosterIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallSchedule.roster"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (osu *OncallScheduleUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OncallScheduleUpdate {
	osu.modifiers = append(osu.modifiers, modifiers...)
	return osu
}

func (osu *OncallScheduleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := osu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(oncallschedule.Table, oncallschedule.Columns, sqlgraph.NewFieldSpec(oncallschedule.FieldID, field.TypeUUID))
	if ps := osu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := osu.mutation.ArchiveTime(); ok {
		_spec.SetField(oncallschedule.FieldArchiveTime, field.TypeTime, value)
	}
	if osu.mutation.ArchiveTimeCleared() {
		_spec.ClearField(oncallschedule.FieldArchiveTime, field.TypeTime)
	}
	if value, ok := osu.mutation.Name(); ok {
		_spec.SetField(oncallschedule.FieldName, field.TypeString, value)
	}
	if value, ok := osu.mutation.Timezone(); ok {
		_spec.SetField(oncallschedule.FieldTimezone, field.TypeString, value)
	}
	if osu.mutation.TimezoneCleared() {
		_spec.ClearField(oncallschedule.FieldTimezone, field.TypeString)
	}
	if value, ok := osu.mutation.ProviderID(); ok {
		_spec.SetField(oncallschedule.FieldProviderID, field.TypeString, value)
	}
	if osu.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oncallschedule.ParticipantsTable,
			Columns: []string{oncallschedule.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallscheduleparticipant.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osu.mutation.RemovedParticipantsIDs(); len(nodes) > 0 && !osu.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oncallschedule.ParticipantsTable,
			Columns: []string{oncallschedule.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallscheduleparticipant.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osu.mutation.ParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oncallschedule.ParticipantsTable,
			Columns: []string{oncallschedule.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallscheduleparticipant.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if osu.mutation.RosterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oncallschedule.RosterTable,
			Columns: []string{oncallschedule.RosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osu.mutation.RosterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oncallschedule.RosterTable,
			Columns: []string{oncallschedule.RosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(osu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, osu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oncallschedule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	osu.mutation.done = true
	return n, nil
}

// OncallScheduleUpdateOne is the builder for updating a single OncallSchedule entity.
type OncallScheduleUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OncallScheduleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetArchiveTime sets the "archive_time" field.
func (osuo *OncallScheduleUpdateOne) SetArchiveTime(t time.Time) *OncallScheduleUpdateOne {
	osuo.mutation.SetArchiveTime(t)
	return osuo
}

// SetNillableArchiveTime sets the "archive_time" field if the given value is not nil.
func (osuo *OncallScheduleUpdateOne) SetNillableArchiveTime(t *time.Time) *OncallScheduleUpdateOne {
	if t != nil {
		osuo.SetArchiveTime(*t)
	}
	return osuo
}

// ClearArchiveTime clears the value of the "archive_time" field.
func (osuo *OncallScheduleUpdateOne) ClearArchiveTime() *OncallScheduleUpdateOne {
	osuo.mutation.ClearArchiveTime()
	return osuo
}

// SetName sets the "name" field.
func (osuo *OncallScheduleUpdateOne) SetName(s string) *OncallScheduleUpdateOne {
	osuo.mutation.SetName(s)
	return osuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (osuo *OncallScheduleUpdateOne) SetNillableName(s *string) *OncallScheduleUpdateOne {
	if s != nil {
		osuo.SetName(*s)
	}
	return osuo
}

// SetRosterID sets the "roster_id" field.
func (osuo *OncallScheduleUpdateOne) SetRosterID(u uuid.UUID) *OncallScheduleUpdateOne {
	osuo.mutation.SetRosterID(u)
	return osuo
}

// SetNillableRosterID sets the "roster_id" field if the given value is not nil.
func (osuo *OncallScheduleUpdateOne) SetNillableRosterID(u *uuid.UUID) *OncallScheduleUpdateOne {
	if u != nil {
		osuo.SetRosterID(*u)
	}
	return osuo
}

// SetTimezone sets the "timezone" field.
func (osuo *OncallScheduleUpdateOne) SetTimezone(s string) *OncallScheduleUpdateOne {
	osuo.mutation.SetTimezone(s)
	return osuo
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (osuo *OncallScheduleUpdateOne) SetNillableTimezone(s *string) *OncallScheduleUpdateOne {
	if s != nil {
		osuo.SetTimezone(*s)
	}
	return osuo
}

// ClearTimezone clears the value of the "timezone" field.
func (osuo *OncallScheduleUpdateOne) ClearTimezone() *OncallScheduleUpdateOne {
	osuo.mutation.ClearTimezone()
	return osuo
}

// SetProviderID sets the "provider_id" field.
func (osuo *OncallScheduleUpdateOne) SetProviderID(s string) *OncallScheduleUpdateOne {
	osuo.mutation.SetProviderID(s)
	return osuo
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (osuo *OncallScheduleUpdateOne) SetNillableProviderID(s *string) *OncallScheduleUpdateOne {
	if s != nil {
		osuo.SetProviderID(*s)
	}
	return osuo
}

// AddParticipantIDs adds the "participants" edge to the OncallScheduleParticipant entity by IDs.
func (osuo *OncallScheduleUpdateOne) AddParticipantIDs(ids ...uuid.UUID) *OncallScheduleUpdateOne {
	osuo.mutation.AddParticipantIDs(ids...)
	return osuo
}

// AddParticipants adds the "participants" edges to the OncallScheduleParticipant entity.
func (osuo *OncallScheduleUpdateOne) AddParticipants(o ...*OncallScheduleParticipant) *OncallScheduleUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return osuo.AddParticipantIDs(ids...)
}

// SetRoster sets the "roster" edge to the OncallRoster entity.
func (osuo *OncallScheduleUpdateOne) SetRoster(o *OncallRoster) *OncallScheduleUpdateOne {
	return osuo.SetRosterID(o.ID)
}

// Mutation returns the OncallScheduleMutation object of the builder.
func (osuo *OncallScheduleUpdateOne) Mutation() *OncallScheduleMutation {
	return osuo.mutation
}

// ClearParticipants clears all "participants" edges to the OncallScheduleParticipant entity.
func (osuo *OncallScheduleUpdateOne) ClearParticipants() *OncallScheduleUpdateOne {
	osuo.mutation.ClearParticipants()
	return osuo
}

// RemoveParticipantIDs removes the "participants" edge to OncallScheduleParticipant entities by IDs.
func (osuo *OncallScheduleUpdateOne) RemoveParticipantIDs(ids ...uuid.UUID) *OncallScheduleUpdateOne {
	osuo.mutation.RemoveParticipantIDs(ids...)
	return osuo
}

// RemoveParticipants removes "participants" edges to OncallScheduleParticipant entities.
func (osuo *OncallScheduleUpdateOne) RemoveParticipants(o ...*OncallScheduleParticipant) *OncallScheduleUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return osuo.RemoveParticipantIDs(ids...)
}

// ClearRoster clears the "roster" edge to the OncallRoster entity.
func (osuo *OncallScheduleUpdateOne) ClearRoster() *OncallScheduleUpdateOne {
	osuo.mutation.ClearRoster()
	return osuo
}

// Where appends a list predicates to the OncallScheduleUpdate builder.
func (osuo *OncallScheduleUpdateOne) Where(ps ...predicate.OncallSchedule) *OncallScheduleUpdateOne {
	osuo.mutation.Where(ps...)
	return osuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (osuo *OncallScheduleUpdateOne) Select(field string, fields ...string) *OncallScheduleUpdateOne {
	osuo.fields = append([]string{field}, fields...)
	return osuo
}

// Save executes the query and returns the updated OncallSchedule entity.
func (osuo *OncallScheduleUpdateOne) Save(ctx context.Context) (*OncallSchedule, error) {
	return withHooks(ctx, osuo.sqlSave, osuo.mutation, osuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (osuo *OncallScheduleUpdateOne) SaveX(ctx context.Context) *OncallSchedule {
	node, err := osuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (osuo *OncallScheduleUpdateOne) Exec(ctx context.Context) error {
	_, err := osuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osuo *OncallScheduleUpdateOne) ExecX(ctx context.Context) {
	if err := osuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (osuo *OncallScheduleUpdateOne) check() error {
	if osuo.mutation.TenantCleared() && len(osuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallSchedule.tenant"`)
	}
	if osuo.mutation.RosterCleared() && len(osuo.mutation.RosterIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallSchedule.roster"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (osuo *OncallScheduleUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OncallScheduleUpdateOne {
	osuo.modifiers = append(osuo.modifiers, modifiers...)
	return osuo
}

func (osuo *OncallScheduleUpdateOne) sqlSave(ctx context.Context) (_node *OncallSchedule, err error) {
	if err := osuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(oncallschedule.Table, oncallschedule.Columns, sqlgraph.NewFieldSpec(oncallschedule.FieldID, field.TypeUUID))
	id, ok := osuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OncallSchedule.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := osuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oncallschedule.FieldID)
		for _, f := range fields {
			if !oncallschedule.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oncallschedule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := osuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := osuo.mutation.ArchiveTime(); ok {
		_spec.SetField(oncallschedule.FieldArchiveTime, field.TypeTime, value)
	}
	if osuo.mutation.ArchiveTimeCleared() {
		_spec.ClearField(oncallschedule.FieldArchiveTime, field.TypeTime)
	}
	if value, ok := osuo.mutation.Name(); ok {
		_spec.SetField(oncallschedule.FieldName, field.TypeString, value)
	}
	if value, ok := osuo.mutation.Timezone(); ok {
		_spec.SetField(oncallschedule.FieldTimezone, field.TypeString, value)
	}
	if osuo.mutation.TimezoneCleared() {
		_spec.ClearField(oncallschedule.FieldTimezone, field.TypeString)
	}
	if value, ok := osuo.mutation.ProviderID(); ok {
		_spec.SetField(oncallschedule.FieldProviderID, field.TypeString, value)
	}
	if osuo.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oncallschedule.ParticipantsTable,
			Columns: []string{oncallschedule.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallscheduleparticipant.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osuo.mutation.RemovedParticipantsIDs(); len(nodes) > 0 && !osuo.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oncallschedule.ParticipantsTable,
			Columns: []string{oncallschedule.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallscheduleparticipant.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osuo.mutation.ParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oncallschedule.ParticipantsTable,
			Columns: []string{oncallschedule.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallscheduleparticipant.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if osuo.mutation.RosterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oncallschedule.RosterTable,
			Columns: []string{oncallschedule.RosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osuo.mutation.RosterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oncallschedule.RosterTable,
			Columns: []string{oncallschedule.RosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(osuo.modifiers...)
	_node = &OncallSchedule{config: osuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, osuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oncallschedule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	osuo.mutation.done = true
	return _node, nil
}
