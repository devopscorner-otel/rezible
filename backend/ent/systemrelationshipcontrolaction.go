// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/systemanalysisrelationship"
	"github.com/rezible/rezible/ent/systemcomponentcontrol"
	"github.com/rezible/rezible/ent/systemrelationshipcontrolaction"
	"github.com/rezible/rezible/ent/tenant"
)

// SystemRelationshipControlAction is the model entity for the SystemRelationshipControlAction schema.
type SystemRelationshipControlAction struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID int `json:"tenant_id,omitempty"`
	// RelationshipID holds the value of the "relationship_id" field.
	RelationshipID uuid.UUID `json:"relationship_id,omitempty"`
	// ControlID holds the value of the "control_id" field.
	ControlID uuid.UUID `json:"control_id,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SystemRelationshipControlActionQuery when eager-loading is set.
	Edges        SystemRelationshipControlActionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SystemRelationshipControlActionEdges holds the relations/edges for other nodes in the graph.
type SystemRelationshipControlActionEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Relationship holds the value of the relationship edge.
	Relationship *SystemAnalysisRelationship `json:"relationship,omitempty"`
	// Control holds the value of the control edge.
	Control *SystemComponentControl `json:"control,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SystemRelationshipControlActionEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// RelationshipOrErr returns the Relationship value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SystemRelationshipControlActionEdges) RelationshipOrErr() (*SystemAnalysisRelationship, error) {
	if e.Relationship != nil {
		return e.Relationship, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: systemanalysisrelationship.Label}
	}
	return nil, &NotLoadedError{edge: "relationship"}
}

// ControlOrErr returns the Control value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SystemRelationshipControlActionEdges) ControlOrErr() (*SystemComponentControl, error) {
	if e.Control != nil {
		return e.Control, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: systemcomponentcontrol.Label}
	}
	return nil, &NotLoadedError{edge: "control"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SystemRelationshipControlAction) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case systemrelationshipcontrolaction.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case systemrelationshipcontrolaction.FieldType, systemrelationshipcontrolaction.FieldDescription:
			values[i] = new(sql.NullString)
		case systemrelationshipcontrolaction.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case systemrelationshipcontrolaction.FieldID, systemrelationshipcontrolaction.FieldRelationshipID, systemrelationshipcontrolaction.FieldControlID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SystemRelationshipControlAction fields.
func (srca *SystemRelationshipControlAction) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case systemrelationshipcontrolaction.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				srca.ID = *value
			}
		case systemrelationshipcontrolaction.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				srca.TenantID = int(value.Int64)
			}
		case systemrelationshipcontrolaction.FieldRelationshipID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field relationship_id", values[i])
			} else if value != nil {
				srca.RelationshipID = *value
			}
		case systemrelationshipcontrolaction.FieldControlID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field control_id", values[i])
			} else if value != nil {
				srca.ControlID = *value
			}
		case systemrelationshipcontrolaction.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				srca.Type = value.String
			}
		case systemrelationshipcontrolaction.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				srca.Description = value.String
			}
		case systemrelationshipcontrolaction.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				srca.CreatedAt = value.Time
			}
		default:
			srca.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SystemRelationshipControlAction.
// This includes values selected through modifiers, order, etc.
func (srca *SystemRelationshipControlAction) Value(name string) (ent.Value, error) {
	return srca.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the SystemRelationshipControlAction entity.
func (srca *SystemRelationshipControlAction) QueryTenant() *TenantQuery {
	return NewSystemRelationshipControlActionClient(srca.config).QueryTenant(srca)
}

// QueryRelationship queries the "relationship" edge of the SystemRelationshipControlAction entity.
func (srca *SystemRelationshipControlAction) QueryRelationship() *SystemAnalysisRelationshipQuery {
	return NewSystemRelationshipControlActionClient(srca.config).QueryRelationship(srca)
}

// QueryControl queries the "control" edge of the SystemRelationshipControlAction entity.
func (srca *SystemRelationshipControlAction) QueryControl() *SystemComponentControlQuery {
	return NewSystemRelationshipControlActionClient(srca.config).QueryControl(srca)
}

// Update returns a builder for updating this SystemRelationshipControlAction.
// Note that you need to call SystemRelationshipControlAction.Unwrap() before calling this method if this SystemRelationshipControlAction
// was returned from a transaction, and the transaction was committed or rolled back.
func (srca *SystemRelationshipControlAction) Update() *SystemRelationshipControlActionUpdateOne {
	return NewSystemRelationshipControlActionClient(srca.config).UpdateOne(srca)
}

// Unwrap unwraps the SystemRelationshipControlAction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (srca *SystemRelationshipControlAction) Unwrap() *SystemRelationshipControlAction {
	_tx, ok := srca.config.driver.(*txDriver)
	if !ok {
		panic("ent: SystemRelationshipControlAction is not a transactional entity")
	}
	srca.config.driver = _tx.drv
	return srca
}

// String implements the fmt.Stringer.
func (srca *SystemRelationshipControlAction) String() string {
	var builder strings.Builder
	builder.WriteString("SystemRelationshipControlAction(")
	builder.WriteString(fmt.Sprintf("id=%v, ", srca.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", srca.TenantID))
	builder.WriteString(", ")
	builder.WriteString("relationship_id=")
	builder.WriteString(fmt.Sprintf("%v", srca.RelationshipID))
	builder.WriteString(", ")
	builder.WriteString("control_id=")
	builder.WriteString(fmt.Sprintf("%v", srca.ControlID))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(srca.Type)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(srca.Description)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(srca.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SystemRelationshipControlActions is a parsable slice of SystemRelationshipControlAction.
type SystemRelationshipControlActions []*SystemRelationshipControlAction
