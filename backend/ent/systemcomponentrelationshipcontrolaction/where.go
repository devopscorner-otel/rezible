// Code generated by ent, DO NOT EDIT.

package systemcomponentrelationshipcontrolaction

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldLTE(FieldID, id))
}

// ControlID applies equality check predicate on the "control_id" field. It's identical to ControlIDEQ.
func ControlID(v uuid.UUID) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldEQ(FieldControlID, v))
}

// RelationshipID applies equality check predicate on the "relationship_id" field. It's identical to RelationshipIDEQ.
func RelationshipID(v uuid.UUID) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldEQ(FieldRelationshipID, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldEQ(FieldType, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldEQ(FieldDescription, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldEQ(FieldCreatedAt, v))
}

// ControlIDEQ applies the EQ predicate on the "control_id" field.
func ControlIDEQ(v uuid.UUID) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldEQ(FieldControlID, v))
}

// ControlIDNEQ applies the NEQ predicate on the "control_id" field.
func ControlIDNEQ(v uuid.UUID) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldNEQ(FieldControlID, v))
}

// ControlIDIn applies the In predicate on the "control_id" field.
func ControlIDIn(vs ...uuid.UUID) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldIn(FieldControlID, vs...))
}

// ControlIDNotIn applies the NotIn predicate on the "control_id" field.
func ControlIDNotIn(vs ...uuid.UUID) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldNotIn(FieldControlID, vs...))
}

// RelationshipIDEQ applies the EQ predicate on the "relationship_id" field.
func RelationshipIDEQ(v uuid.UUID) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldEQ(FieldRelationshipID, v))
}

// RelationshipIDNEQ applies the NEQ predicate on the "relationship_id" field.
func RelationshipIDNEQ(v uuid.UUID) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldNEQ(FieldRelationshipID, v))
}

// RelationshipIDIn applies the In predicate on the "relationship_id" field.
func RelationshipIDIn(vs ...uuid.UUID) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldIn(FieldRelationshipID, vs...))
}

// RelationshipIDNotIn applies the NotIn predicate on the "relationship_id" field.
func RelationshipIDNotIn(vs ...uuid.UUID) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldNotIn(FieldRelationshipID, vs...))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldContainsFold(FieldType, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldContainsFold(FieldDescription, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.FieldLTE(FieldCreatedAt, v))
}

// HasControl applies the HasEdge predicate on the "control" edge.
func HasControl() predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ControlTable, ControlColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasControlWith applies the HasEdge predicate on the "control" edge with a given conditions (other predicates).
func HasControlWith(preds ...predicate.SystemComponentControl) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(func(s *sql.Selector) {
		step := newControlStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRelationship applies the HasEdge predicate on the "relationship" edge.
func HasRelationship() predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RelationshipTable, RelationshipColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRelationshipWith applies the HasEdge predicate on the "relationship" edge with a given conditions (other predicates).
func HasRelationshipWith(preds ...predicate.SystemComponentRelationship) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(func(s *sql.Selector) {
		step := newRelationshipStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SystemComponentRelationshipControlAction) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SystemComponentRelationshipControlAction) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SystemComponentRelationshipControlAction) predicate.SystemComponentRelationshipControlAction {
	return predicate.SystemComponentRelationshipControlAction(sql.NotPredicates(p))
}
