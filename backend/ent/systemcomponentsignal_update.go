// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/systemanalysisrelationship"
	"github.com/rezible/rezible/ent/systemcomponent"
	"github.com/rezible/rezible/ent/systemcomponentsignal"
	"github.com/rezible/rezible/ent/systemrelationshipfeedbacksignal"
)

// SystemComponentSignalUpdate is the builder for updating SystemComponentSignal entities.
type SystemComponentSignalUpdate struct {
	config
	hooks     []Hook
	mutation  *SystemComponentSignalMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SystemComponentSignalUpdate builder.
func (scsu *SystemComponentSignalUpdate) Where(ps ...predicate.SystemComponentSignal) *SystemComponentSignalUpdate {
	scsu.mutation.Where(ps...)
	return scsu
}

// SetComponentID sets the "component_id" field.
func (scsu *SystemComponentSignalUpdate) SetComponentID(u uuid.UUID) *SystemComponentSignalUpdate {
	scsu.mutation.SetComponentID(u)
	return scsu
}

// SetNillableComponentID sets the "component_id" field if the given value is not nil.
func (scsu *SystemComponentSignalUpdate) SetNillableComponentID(u *uuid.UUID) *SystemComponentSignalUpdate {
	if u != nil {
		scsu.SetComponentID(*u)
	}
	return scsu
}

// SetLabel sets the "label" field.
func (scsu *SystemComponentSignalUpdate) SetLabel(s string) *SystemComponentSignalUpdate {
	scsu.mutation.SetLabel(s)
	return scsu
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (scsu *SystemComponentSignalUpdate) SetNillableLabel(s *string) *SystemComponentSignalUpdate {
	if s != nil {
		scsu.SetLabel(*s)
	}
	return scsu
}

// SetDescription sets the "description" field.
func (scsu *SystemComponentSignalUpdate) SetDescription(s string) *SystemComponentSignalUpdate {
	scsu.mutation.SetDescription(s)
	return scsu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (scsu *SystemComponentSignalUpdate) SetNillableDescription(s *string) *SystemComponentSignalUpdate {
	if s != nil {
		scsu.SetDescription(*s)
	}
	return scsu
}

// ClearDescription clears the value of the "description" field.
func (scsu *SystemComponentSignalUpdate) ClearDescription() *SystemComponentSignalUpdate {
	scsu.mutation.ClearDescription()
	return scsu
}

// SetCreatedAt sets the "created_at" field.
func (scsu *SystemComponentSignalUpdate) SetCreatedAt(t time.Time) *SystemComponentSignalUpdate {
	scsu.mutation.SetCreatedAt(t)
	return scsu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (scsu *SystemComponentSignalUpdate) SetNillableCreatedAt(t *time.Time) *SystemComponentSignalUpdate {
	if t != nil {
		scsu.SetCreatedAt(*t)
	}
	return scsu
}

// SetComponent sets the "component" edge to the SystemComponent entity.
func (scsu *SystemComponentSignalUpdate) SetComponent(s *SystemComponent) *SystemComponentSignalUpdate {
	return scsu.SetComponentID(s.ID)
}

// AddRelationshipIDs adds the "relationships" edge to the SystemAnalysisRelationship entity by IDs.
func (scsu *SystemComponentSignalUpdate) AddRelationshipIDs(ids ...uuid.UUID) *SystemComponentSignalUpdate {
	scsu.mutation.AddRelationshipIDs(ids...)
	return scsu
}

// AddRelationships adds the "relationships" edges to the SystemAnalysisRelationship entity.
func (scsu *SystemComponentSignalUpdate) AddRelationships(s ...*SystemAnalysisRelationship) *SystemComponentSignalUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scsu.AddRelationshipIDs(ids...)
}

// AddFeedbackSignalIDs adds the "feedback_signals" edge to the SystemRelationshipFeedbackSignal entity by IDs.
func (scsu *SystemComponentSignalUpdate) AddFeedbackSignalIDs(ids ...uuid.UUID) *SystemComponentSignalUpdate {
	scsu.mutation.AddFeedbackSignalIDs(ids...)
	return scsu
}

// AddFeedbackSignals adds the "feedback_signals" edges to the SystemRelationshipFeedbackSignal entity.
func (scsu *SystemComponentSignalUpdate) AddFeedbackSignals(s ...*SystemRelationshipFeedbackSignal) *SystemComponentSignalUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scsu.AddFeedbackSignalIDs(ids...)
}

// Mutation returns the SystemComponentSignalMutation object of the builder.
func (scsu *SystemComponentSignalUpdate) Mutation() *SystemComponentSignalMutation {
	return scsu.mutation
}

// ClearComponent clears the "component" edge to the SystemComponent entity.
func (scsu *SystemComponentSignalUpdate) ClearComponent() *SystemComponentSignalUpdate {
	scsu.mutation.ClearComponent()
	return scsu
}

// ClearRelationships clears all "relationships" edges to the SystemAnalysisRelationship entity.
func (scsu *SystemComponentSignalUpdate) ClearRelationships() *SystemComponentSignalUpdate {
	scsu.mutation.ClearRelationships()
	return scsu
}

// RemoveRelationshipIDs removes the "relationships" edge to SystemAnalysisRelationship entities by IDs.
func (scsu *SystemComponentSignalUpdate) RemoveRelationshipIDs(ids ...uuid.UUID) *SystemComponentSignalUpdate {
	scsu.mutation.RemoveRelationshipIDs(ids...)
	return scsu
}

// RemoveRelationships removes "relationships" edges to SystemAnalysisRelationship entities.
func (scsu *SystemComponentSignalUpdate) RemoveRelationships(s ...*SystemAnalysisRelationship) *SystemComponentSignalUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scsu.RemoveRelationshipIDs(ids...)
}

// ClearFeedbackSignals clears all "feedback_signals" edges to the SystemRelationshipFeedbackSignal entity.
func (scsu *SystemComponentSignalUpdate) ClearFeedbackSignals() *SystemComponentSignalUpdate {
	scsu.mutation.ClearFeedbackSignals()
	return scsu
}

// RemoveFeedbackSignalIDs removes the "feedback_signals" edge to SystemRelationshipFeedbackSignal entities by IDs.
func (scsu *SystemComponentSignalUpdate) RemoveFeedbackSignalIDs(ids ...uuid.UUID) *SystemComponentSignalUpdate {
	scsu.mutation.RemoveFeedbackSignalIDs(ids...)
	return scsu
}

// RemoveFeedbackSignals removes "feedback_signals" edges to SystemRelationshipFeedbackSignal entities.
func (scsu *SystemComponentSignalUpdate) RemoveFeedbackSignals(s ...*SystemRelationshipFeedbackSignal) *SystemComponentSignalUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scsu.RemoveFeedbackSignalIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (scsu *SystemComponentSignalUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, scsu.sqlSave, scsu.mutation, scsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scsu *SystemComponentSignalUpdate) SaveX(ctx context.Context) int {
	affected, err := scsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (scsu *SystemComponentSignalUpdate) Exec(ctx context.Context) error {
	_, err := scsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scsu *SystemComponentSignalUpdate) ExecX(ctx context.Context) {
	if err := scsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scsu *SystemComponentSignalUpdate) check() error {
	if scsu.mutation.ComponentCleared() && len(scsu.mutation.ComponentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SystemComponentSignal.component"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (scsu *SystemComponentSignalUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SystemComponentSignalUpdate {
	scsu.modifiers = append(scsu.modifiers, modifiers...)
	return scsu
}

func (scsu *SystemComponentSignalUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := scsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(systemcomponentsignal.Table, systemcomponentsignal.Columns, sqlgraph.NewFieldSpec(systemcomponentsignal.FieldID, field.TypeUUID))
	if ps := scsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scsu.mutation.Label(); ok {
		_spec.SetField(systemcomponentsignal.FieldLabel, field.TypeString, value)
	}
	if value, ok := scsu.mutation.Description(); ok {
		_spec.SetField(systemcomponentsignal.FieldDescription, field.TypeString, value)
	}
	if scsu.mutation.DescriptionCleared() {
		_spec.ClearField(systemcomponentsignal.FieldDescription, field.TypeString)
	}
	if value, ok := scsu.mutation.CreatedAt(); ok {
		_spec.SetField(systemcomponentsignal.FieldCreatedAt, field.TypeTime, value)
	}
	if scsu.mutation.ComponentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemcomponentsignal.ComponentTable,
			Columns: []string{systemcomponentsignal.ComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scsu.mutation.ComponentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemcomponentsignal.ComponentTable,
			Columns: []string{systemcomponentsignal.ComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scsu.mutation.RelationshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   systemcomponentsignal.RelationshipsTable,
			Columns: systemcomponentsignal.RelationshipsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemanalysisrelationship.FieldID, field.TypeUUID),
			},
		}
		createE := &SystemRelationshipFeedbackSignalCreate{config: scsu.config, mutation: newSystemRelationshipFeedbackSignalMutation(scsu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scsu.mutation.RemovedRelationshipsIDs(); len(nodes) > 0 && !scsu.mutation.RelationshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   systemcomponentsignal.RelationshipsTable,
			Columns: systemcomponentsignal.RelationshipsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemanalysisrelationship.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SystemRelationshipFeedbackSignalCreate{config: scsu.config, mutation: newSystemRelationshipFeedbackSignalMutation(scsu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scsu.mutation.RelationshipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   systemcomponentsignal.RelationshipsTable,
			Columns: systemcomponentsignal.RelationshipsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemanalysisrelationship.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SystemRelationshipFeedbackSignalCreate{config: scsu.config, mutation: newSystemRelationshipFeedbackSignalMutation(scsu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scsu.mutation.FeedbackSignalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponentsignal.FeedbackSignalsTable,
			Columns: []string{systemcomponentsignal.FeedbackSignalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemrelationshipfeedbacksignal.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scsu.mutation.RemovedFeedbackSignalsIDs(); len(nodes) > 0 && !scsu.mutation.FeedbackSignalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponentsignal.FeedbackSignalsTable,
			Columns: []string{systemcomponentsignal.FeedbackSignalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemrelationshipfeedbacksignal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scsu.mutation.FeedbackSignalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponentsignal.FeedbackSignalsTable,
			Columns: []string{systemcomponentsignal.FeedbackSignalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemrelationshipfeedbacksignal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(scsu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, scsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systemcomponentsignal.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	scsu.mutation.done = true
	return n, nil
}

// SystemComponentSignalUpdateOne is the builder for updating a single SystemComponentSignal entity.
type SystemComponentSignalUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SystemComponentSignalMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetComponentID sets the "component_id" field.
func (scsuo *SystemComponentSignalUpdateOne) SetComponentID(u uuid.UUID) *SystemComponentSignalUpdateOne {
	scsuo.mutation.SetComponentID(u)
	return scsuo
}

// SetNillableComponentID sets the "component_id" field if the given value is not nil.
func (scsuo *SystemComponentSignalUpdateOne) SetNillableComponentID(u *uuid.UUID) *SystemComponentSignalUpdateOne {
	if u != nil {
		scsuo.SetComponentID(*u)
	}
	return scsuo
}

// SetLabel sets the "label" field.
func (scsuo *SystemComponentSignalUpdateOne) SetLabel(s string) *SystemComponentSignalUpdateOne {
	scsuo.mutation.SetLabel(s)
	return scsuo
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (scsuo *SystemComponentSignalUpdateOne) SetNillableLabel(s *string) *SystemComponentSignalUpdateOne {
	if s != nil {
		scsuo.SetLabel(*s)
	}
	return scsuo
}

// SetDescription sets the "description" field.
func (scsuo *SystemComponentSignalUpdateOne) SetDescription(s string) *SystemComponentSignalUpdateOne {
	scsuo.mutation.SetDescription(s)
	return scsuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (scsuo *SystemComponentSignalUpdateOne) SetNillableDescription(s *string) *SystemComponentSignalUpdateOne {
	if s != nil {
		scsuo.SetDescription(*s)
	}
	return scsuo
}

// ClearDescription clears the value of the "description" field.
func (scsuo *SystemComponentSignalUpdateOne) ClearDescription() *SystemComponentSignalUpdateOne {
	scsuo.mutation.ClearDescription()
	return scsuo
}

// SetCreatedAt sets the "created_at" field.
func (scsuo *SystemComponentSignalUpdateOne) SetCreatedAt(t time.Time) *SystemComponentSignalUpdateOne {
	scsuo.mutation.SetCreatedAt(t)
	return scsuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (scsuo *SystemComponentSignalUpdateOne) SetNillableCreatedAt(t *time.Time) *SystemComponentSignalUpdateOne {
	if t != nil {
		scsuo.SetCreatedAt(*t)
	}
	return scsuo
}

// SetComponent sets the "component" edge to the SystemComponent entity.
func (scsuo *SystemComponentSignalUpdateOne) SetComponent(s *SystemComponent) *SystemComponentSignalUpdateOne {
	return scsuo.SetComponentID(s.ID)
}

// AddRelationshipIDs adds the "relationships" edge to the SystemAnalysisRelationship entity by IDs.
func (scsuo *SystemComponentSignalUpdateOne) AddRelationshipIDs(ids ...uuid.UUID) *SystemComponentSignalUpdateOne {
	scsuo.mutation.AddRelationshipIDs(ids...)
	return scsuo
}

// AddRelationships adds the "relationships" edges to the SystemAnalysisRelationship entity.
func (scsuo *SystemComponentSignalUpdateOne) AddRelationships(s ...*SystemAnalysisRelationship) *SystemComponentSignalUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scsuo.AddRelationshipIDs(ids...)
}

// AddFeedbackSignalIDs adds the "feedback_signals" edge to the SystemRelationshipFeedbackSignal entity by IDs.
func (scsuo *SystemComponentSignalUpdateOne) AddFeedbackSignalIDs(ids ...uuid.UUID) *SystemComponentSignalUpdateOne {
	scsuo.mutation.AddFeedbackSignalIDs(ids...)
	return scsuo
}

// AddFeedbackSignals adds the "feedback_signals" edges to the SystemRelationshipFeedbackSignal entity.
func (scsuo *SystemComponentSignalUpdateOne) AddFeedbackSignals(s ...*SystemRelationshipFeedbackSignal) *SystemComponentSignalUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scsuo.AddFeedbackSignalIDs(ids...)
}

// Mutation returns the SystemComponentSignalMutation object of the builder.
func (scsuo *SystemComponentSignalUpdateOne) Mutation() *SystemComponentSignalMutation {
	return scsuo.mutation
}

// ClearComponent clears the "component" edge to the SystemComponent entity.
func (scsuo *SystemComponentSignalUpdateOne) ClearComponent() *SystemComponentSignalUpdateOne {
	scsuo.mutation.ClearComponent()
	return scsuo
}

// ClearRelationships clears all "relationships" edges to the SystemAnalysisRelationship entity.
func (scsuo *SystemComponentSignalUpdateOne) ClearRelationships() *SystemComponentSignalUpdateOne {
	scsuo.mutation.ClearRelationships()
	return scsuo
}

// RemoveRelationshipIDs removes the "relationships" edge to SystemAnalysisRelationship entities by IDs.
func (scsuo *SystemComponentSignalUpdateOne) RemoveRelationshipIDs(ids ...uuid.UUID) *SystemComponentSignalUpdateOne {
	scsuo.mutation.RemoveRelationshipIDs(ids...)
	return scsuo
}

// RemoveRelationships removes "relationships" edges to SystemAnalysisRelationship entities.
func (scsuo *SystemComponentSignalUpdateOne) RemoveRelationships(s ...*SystemAnalysisRelationship) *SystemComponentSignalUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scsuo.RemoveRelationshipIDs(ids...)
}

// ClearFeedbackSignals clears all "feedback_signals" edges to the SystemRelationshipFeedbackSignal entity.
func (scsuo *SystemComponentSignalUpdateOne) ClearFeedbackSignals() *SystemComponentSignalUpdateOne {
	scsuo.mutation.ClearFeedbackSignals()
	return scsuo
}

// RemoveFeedbackSignalIDs removes the "feedback_signals" edge to SystemRelationshipFeedbackSignal entities by IDs.
func (scsuo *SystemComponentSignalUpdateOne) RemoveFeedbackSignalIDs(ids ...uuid.UUID) *SystemComponentSignalUpdateOne {
	scsuo.mutation.RemoveFeedbackSignalIDs(ids...)
	return scsuo
}

// RemoveFeedbackSignals removes "feedback_signals" edges to SystemRelationshipFeedbackSignal entities.
func (scsuo *SystemComponentSignalUpdateOne) RemoveFeedbackSignals(s ...*SystemRelationshipFeedbackSignal) *SystemComponentSignalUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scsuo.RemoveFeedbackSignalIDs(ids...)
}

// Where appends a list predicates to the SystemComponentSignalUpdate builder.
func (scsuo *SystemComponentSignalUpdateOne) Where(ps ...predicate.SystemComponentSignal) *SystemComponentSignalUpdateOne {
	scsuo.mutation.Where(ps...)
	return scsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (scsuo *SystemComponentSignalUpdateOne) Select(field string, fields ...string) *SystemComponentSignalUpdateOne {
	scsuo.fields = append([]string{field}, fields...)
	return scsuo
}

// Save executes the query and returns the updated SystemComponentSignal entity.
func (scsuo *SystemComponentSignalUpdateOne) Save(ctx context.Context) (*SystemComponentSignal, error) {
	return withHooks(ctx, scsuo.sqlSave, scsuo.mutation, scsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scsuo *SystemComponentSignalUpdateOne) SaveX(ctx context.Context) *SystemComponentSignal {
	node, err := scsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (scsuo *SystemComponentSignalUpdateOne) Exec(ctx context.Context) error {
	_, err := scsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scsuo *SystemComponentSignalUpdateOne) ExecX(ctx context.Context) {
	if err := scsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scsuo *SystemComponentSignalUpdateOne) check() error {
	if scsuo.mutation.ComponentCleared() && len(scsuo.mutation.ComponentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SystemComponentSignal.component"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (scsuo *SystemComponentSignalUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SystemComponentSignalUpdateOne {
	scsuo.modifiers = append(scsuo.modifiers, modifiers...)
	return scsuo
}

func (scsuo *SystemComponentSignalUpdateOne) sqlSave(ctx context.Context) (_node *SystemComponentSignal, err error) {
	if err := scsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(systemcomponentsignal.Table, systemcomponentsignal.Columns, sqlgraph.NewFieldSpec(systemcomponentsignal.FieldID, field.TypeUUID))
	id, ok := scsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SystemComponentSignal.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := scsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, systemcomponentsignal.FieldID)
		for _, f := range fields {
			if !systemcomponentsignal.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != systemcomponentsignal.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := scsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scsuo.mutation.Label(); ok {
		_spec.SetField(systemcomponentsignal.FieldLabel, field.TypeString, value)
	}
	if value, ok := scsuo.mutation.Description(); ok {
		_spec.SetField(systemcomponentsignal.FieldDescription, field.TypeString, value)
	}
	if scsuo.mutation.DescriptionCleared() {
		_spec.ClearField(systemcomponentsignal.FieldDescription, field.TypeString)
	}
	if value, ok := scsuo.mutation.CreatedAt(); ok {
		_spec.SetField(systemcomponentsignal.FieldCreatedAt, field.TypeTime, value)
	}
	if scsuo.mutation.ComponentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemcomponentsignal.ComponentTable,
			Columns: []string{systemcomponentsignal.ComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scsuo.mutation.ComponentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemcomponentsignal.ComponentTable,
			Columns: []string{systemcomponentsignal.ComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scsuo.mutation.RelationshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   systemcomponentsignal.RelationshipsTable,
			Columns: systemcomponentsignal.RelationshipsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemanalysisrelationship.FieldID, field.TypeUUID),
			},
		}
		createE := &SystemRelationshipFeedbackSignalCreate{config: scsuo.config, mutation: newSystemRelationshipFeedbackSignalMutation(scsuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scsuo.mutation.RemovedRelationshipsIDs(); len(nodes) > 0 && !scsuo.mutation.RelationshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   systemcomponentsignal.RelationshipsTable,
			Columns: systemcomponentsignal.RelationshipsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemanalysisrelationship.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SystemRelationshipFeedbackSignalCreate{config: scsuo.config, mutation: newSystemRelationshipFeedbackSignalMutation(scsuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scsuo.mutation.RelationshipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   systemcomponentsignal.RelationshipsTable,
			Columns: systemcomponentsignal.RelationshipsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemanalysisrelationship.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SystemRelationshipFeedbackSignalCreate{config: scsuo.config, mutation: newSystemRelationshipFeedbackSignalMutation(scsuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scsuo.mutation.FeedbackSignalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponentsignal.FeedbackSignalsTable,
			Columns: []string{systemcomponentsignal.FeedbackSignalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemrelationshipfeedbacksignal.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scsuo.mutation.RemovedFeedbackSignalsIDs(); len(nodes) > 0 && !scsuo.mutation.FeedbackSignalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponentsignal.FeedbackSignalsTable,
			Columns: []string{systemcomponentsignal.FeedbackSignalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemrelationshipfeedbacksignal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scsuo.mutation.FeedbackSignalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponentsignal.FeedbackSignalsTable,
			Columns: []string{systemcomponentsignal.FeedbackSignalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemrelationshipfeedbacksignal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(scsuo.modifiers...)
	_node = &SystemComponentSignal{config: scsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, scsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systemcomponentsignal.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	scsuo.mutation.done = true
	return _node, nil
}
