// Code generated by ent, DO NOT EDIT.

package systemrelationshipcontrolaction

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the systemrelationshipcontrolaction type in the database.
	Label = "system_relationship_control_action"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldRelationshipID holds the string denoting the relationship_id field in the database.
	FieldRelationshipID = "relationship_id"
	// FieldControlID holds the string denoting the control_id field in the database.
	FieldControlID = "control_id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeRelationship holds the string denoting the relationship edge name in mutations.
	EdgeRelationship = "relationship"
	// EdgeControl holds the string denoting the control edge name in mutations.
	EdgeControl = "control"
	// Table holds the table name of the systemrelationshipcontrolaction in the database.
	Table = "system_relationship_control_actions"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "system_relationship_control_actions"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// RelationshipTable is the table that holds the relationship relation/edge.
	RelationshipTable = "system_relationship_control_actions"
	// RelationshipInverseTable is the table name for the SystemAnalysisRelationship entity.
	// It exists in this package in order to avoid circular dependency with the "systemanalysisrelationship" package.
	RelationshipInverseTable = "system_analysis_relationships"
	// RelationshipColumn is the table column denoting the relationship relation/edge.
	RelationshipColumn = "relationship_id"
	// ControlTable is the table that holds the control relation/edge.
	ControlTable = "system_relationship_control_actions"
	// ControlInverseTable is the table name for the SystemComponentControl entity.
	// It exists in this package in order to avoid circular dependency with the "systemcomponentcontrol" package.
	ControlInverseTable = "system_component_controls"
	// ControlColumn is the table column denoting the control relation/edge.
	ControlColumn = "control_id"
)

// Columns holds all SQL columns for systemrelationshipcontrolaction fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldRelationshipID,
	FieldControlID,
	FieldType,
	FieldDescription,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/rezible/rezible/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// TypeValidator is a validator for the "type" field. It is called by the builders before save.
	TypeValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the SystemRelationshipControlAction queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByRelationshipID orders the results by the relationship_id field.
func ByRelationshipID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRelationshipID, opts...).ToFunc()
}

// ByControlID orders the results by the control_id field.
func ByControlID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldControlID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByRelationshipField orders the results by relationship field.
func ByRelationshipField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRelationshipStep(), sql.OrderByField(field, opts...))
	}
}

// ByControlField orders the results by control field.
func ByControlField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newControlStep(), sql.OrderByField(field, opts...))
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newRelationshipStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RelationshipInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RelationshipTable, RelationshipColumn),
	)
}
func newControlStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ControlInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ControlTable, ControlColumn),
	)
}
