// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/twohundreds/rezible/ent/predicate"
	"github.com/twohundreds/rezible/ent/retrospective"
	"github.com/twohundreds/rezible/ent/retrospectivediscussion"
	"github.com/twohundreds/rezible/ent/retrospectivediscussionreply"
	"github.com/twohundreds/rezible/ent/retrospectivereview"
)

// RetrospectiveDiscussionUpdate is the builder for updating RetrospectiveDiscussion entities.
type RetrospectiveDiscussionUpdate struct {
	config
	hooks     []Hook
	mutation  *RetrospectiveDiscussionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the RetrospectiveDiscussionUpdate builder.
func (rdu *RetrospectiveDiscussionUpdate) Where(ps ...predicate.RetrospectiveDiscussion) *RetrospectiveDiscussionUpdate {
	rdu.mutation.Where(ps...)
	return rdu
}

// SetRetrospectiveID sets the "retrospective_id" field.
func (rdu *RetrospectiveDiscussionUpdate) SetRetrospectiveID(u uuid.UUID) *RetrospectiveDiscussionUpdate {
	rdu.mutation.SetRetrospectiveID(u)
	return rdu
}

// SetNillableRetrospectiveID sets the "retrospective_id" field if the given value is not nil.
func (rdu *RetrospectiveDiscussionUpdate) SetNillableRetrospectiveID(u *uuid.UUID) *RetrospectiveDiscussionUpdate {
	if u != nil {
		rdu.SetRetrospectiveID(*u)
	}
	return rdu
}

// SetContent sets the "content" field.
func (rdu *RetrospectiveDiscussionUpdate) SetContent(b []byte) *RetrospectiveDiscussionUpdate {
	rdu.mutation.SetContent(b)
	return rdu
}

// SetRetrospective sets the "retrospective" edge to the Retrospective entity.
func (rdu *RetrospectiveDiscussionUpdate) SetRetrospective(r *Retrospective) *RetrospectiveDiscussionUpdate {
	return rdu.SetRetrospectiveID(r.ID)
}

// AddReplyIDs adds the "replies" edge to the RetrospectiveDiscussionReply entity by IDs.
func (rdu *RetrospectiveDiscussionUpdate) AddReplyIDs(ids ...uuid.UUID) *RetrospectiveDiscussionUpdate {
	rdu.mutation.AddReplyIDs(ids...)
	return rdu
}

// AddReplies adds the "replies" edges to the RetrospectiveDiscussionReply entity.
func (rdu *RetrospectiveDiscussionUpdate) AddReplies(r ...*RetrospectiveDiscussionReply) *RetrospectiveDiscussionUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdu.AddReplyIDs(ids...)
}

// AddReviewIDs adds the "review" edge to the RetrospectiveReview entity by IDs.
func (rdu *RetrospectiveDiscussionUpdate) AddReviewIDs(ids ...uuid.UUID) *RetrospectiveDiscussionUpdate {
	rdu.mutation.AddReviewIDs(ids...)
	return rdu
}

// AddReview adds the "review" edges to the RetrospectiveReview entity.
func (rdu *RetrospectiveDiscussionUpdate) AddReview(r ...*RetrospectiveReview) *RetrospectiveDiscussionUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdu.AddReviewIDs(ids...)
}

// Mutation returns the RetrospectiveDiscussionMutation object of the builder.
func (rdu *RetrospectiveDiscussionUpdate) Mutation() *RetrospectiveDiscussionMutation {
	return rdu.mutation
}

// ClearRetrospective clears the "retrospective" edge to the Retrospective entity.
func (rdu *RetrospectiveDiscussionUpdate) ClearRetrospective() *RetrospectiveDiscussionUpdate {
	rdu.mutation.ClearRetrospective()
	return rdu
}

// ClearReplies clears all "replies" edges to the RetrospectiveDiscussionReply entity.
func (rdu *RetrospectiveDiscussionUpdate) ClearReplies() *RetrospectiveDiscussionUpdate {
	rdu.mutation.ClearReplies()
	return rdu
}

// RemoveReplyIDs removes the "replies" edge to RetrospectiveDiscussionReply entities by IDs.
func (rdu *RetrospectiveDiscussionUpdate) RemoveReplyIDs(ids ...uuid.UUID) *RetrospectiveDiscussionUpdate {
	rdu.mutation.RemoveReplyIDs(ids...)
	return rdu
}

// RemoveReplies removes "replies" edges to RetrospectiveDiscussionReply entities.
func (rdu *RetrospectiveDiscussionUpdate) RemoveReplies(r ...*RetrospectiveDiscussionReply) *RetrospectiveDiscussionUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdu.RemoveReplyIDs(ids...)
}

// ClearReview clears all "review" edges to the RetrospectiveReview entity.
func (rdu *RetrospectiveDiscussionUpdate) ClearReview() *RetrospectiveDiscussionUpdate {
	rdu.mutation.ClearReview()
	return rdu
}

// RemoveReviewIDs removes the "review" edge to RetrospectiveReview entities by IDs.
func (rdu *RetrospectiveDiscussionUpdate) RemoveReviewIDs(ids ...uuid.UUID) *RetrospectiveDiscussionUpdate {
	rdu.mutation.RemoveReviewIDs(ids...)
	return rdu
}

// RemoveReview removes "review" edges to RetrospectiveReview entities.
func (rdu *RetrospectiveDiscussionUpdate) RemoveReview(r ...*RetrospectiveReview) *RetrospectiveDiscussionUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdu.RemoveReviewIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rdu *RetrospectiveDiscussionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rdu.sqlSave, rdu.mutation, rdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rdu *RetrospectiveDiscussionUpdate) SaveX(ctx context.Context) int {
	affected, err := rdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rdu *RetrospectiveDiscussionUpdate) Exec(ctx context.Context) error {
	_, err := rdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rdu *RetrospectiveDiscussionUpdate) ExecX(ctx context.Context) {
	if err := rdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rdu *RetrospectiveDiscussionUpdate) check() error {
	if rdu.mutation.RetrospectiveCleared() && len(rdu.mutation.RetrospectiveIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "RetrospectiveDiscussion.retrospective"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rdu *RetrospectiveDiscussionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RetrospectiveDiscussionUpdate {
	rdu.modifiers = append(rdu.modifiers, modifiers...)
	return rdu
}

func (rdu *RetrospectiveDiscussionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(retrospectivediscussion.Table, retrospectivediscussion.Columns, sqlgraph.NewFieldSpec(retrospectivediscussion.FieldID, field.TypeUUID))
	if ps := rdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rdu.mutation.Content(); ok {
		_spec.SetField(retrospectivediscussion.FieldContent, field.TypeBytes, value)
	}
	if rdu.mutation.RetrospectiveCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospectivediscussion.RetrospectiveTable,
			Columns: []string{retrospectivediscussion.RetrospectiveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospective.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdu.mutation.RetrospectiveIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospectivediscussion.RetrospectiveTable,
			Columns: []string{retrospectivediscussion.RetrospectiveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospective.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rdu.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   retrospectivediscussion.RepliesTable,
			Columns: []string{retrospectivediscussion.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivediscussionreply.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdu.mutation.RemovedRepliesIDs(); len(nodes) > 0 && !rdu.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   retrospectivediscussion.RepliesTable,
			Columns: []string{retrospectivediscussion.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivediscussionreply.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdu.mutation.RepliesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   retrospectivediscussion.RepliesTable,
			Columns: []string{retrospectivediscussion.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivediscussionreply.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rdu.mutation.ReviewCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   retrospectivediscussion.ReviewTable,
			Columns: []string{retrospectivediscussion.ReviewColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivereview.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdu.mutation.RemovedReviewIDs(); len(nodes) > 0 && !rdu.mutation.ReviewCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   retrospectivediscussion.ReviewTable,
			Columns: []string{retrospectivediscussion.ReviewColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivereview.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdu.mutation.ReviewIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   retrospectivediscussion.ReviewTable,
			Columns: []string{retrospectivediscussion.ReviewColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivereview.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(rdu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, rdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{retrospectivediscussion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rdu.mutation.done = true
	return n, nil
}

// RetrospectiveDiscussionUpdateOne is the builder for updating a single RetrospectiveDiscussion entity.
type RetrospectiveDiscussionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *RetrospectiveDiscussionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetRetrospectiveID sets the "retrospective_id" field.
func (rduo *RetrospectiveDiscussionUpdateOne) SetRetrospectiveID(u uuid.UUID) *RetrospectiveDiscussionUpdateOne {
	rduo.mutation.SetRetrospectiveID(u)
	return rduo
}

// SetNillableRetrospectiveID sets the "retrospective_id" field if the given value is not nil.
func (rduo *RetrospectiveDiscussionUpdateOne) SetNillableRetrospectiveID(u *uuid.UUID) *RetrospectiveDiscussionUpdateOne {
	if u != nil {
		rduo.SetRetrospectiveID(*u)
	}
	return rduo
}

// SetContent sets the "content" field.
func (rduo *RetrospectiveDiscussionUpdateOne) SetContent(b []byte) *RetrospectiveDiscussionUpdateOne {
	rduo.mutation.SetContent(b)
	return rduo
}

// SetRetrospective sets the "retrospective" edge to the Retrospective entity.
func (rduo *RetrospectiveDiscussionUpdateOne) SetRetrospective(r *Retrospective) *RetrospectiveDiscussionUpdateOne {
	return rduo.SetRetrospectiveID(r.ID)
}

// AddReplyIDs adds the "replies" edge to the RetrospectiveDiscussionReply entity by IDs.
func (rduo *RetrospectiveDiscussionUpdateOne) AddReplyIDs(ids ...uuid.UUID) *RetrospectiveDiscussionUpdateOne {
	rduo.mutation.AddReplyIDs(ids...)
	return rduo
}

// AddReplies adds the "replies" edges to the RetrospectiveDiscussionReply entity.
func (rduo *RetrospectiveDiscussionUpdateOne) AddReplies(r ...*RetrospectiveDiscussionReply) *RetrospectiveDiscussionUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rduo.AddReplyIDs(ids...)
}

// AddReviewIDs adds the "review" edge to the RetrospectiveReview entity by IDs.
func (rduo *RetrospectiveDiscussionUpdateOne) AddReviewIDs(ids ...uuid.UUID) *RetrospectiveDiscussionUpdateOne {
	rduo.mutation.AddReviewIDs(ids...)
	return rduo
}

// AddReview adds the "review" edges to the RetrospectiveReview entity.
func (rduo *RetrospectiveDiscussionUpdateOne) AddReview(r ...*RetrospectiveReview) *RetrospectiveDiscussionUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rduo.AddReviewIDs(ids...)
}

// Mutation returns the RetrospectiveDiscussionMutation object of the builder.
func (rduo *RetrospectiveDiscussionUpdateOne) Mutation() *RetrospectiveDiscussionMutation {
	return rduo.mutation
}

// ClearRetrospective clears the "retrospective" edge to the Retrospective entity.
func (rduo *RetrospectiveDiscussionUpdateOne) ClearRetrospective() *RetrospectiveDiscussionUpdateOne {
	rduo.mutation.ClearRetrospective()
	return rduo
}

// ClearReplies clears all "replies" edges to the RetrospectiveDiscussionReply entity.
func (rduo *RetrospectiveDiscussionUpdateOne) ClearReplies() *RetrospectiveDiscussionUpdateOne {
	rduo.mutation.ClearReplies()
	return rduo
}

// RemoveReplyIDs removes the "replies" edge to RetrospectiveDiscussionReply entities by IDs.
func (rduo *RetrospectiveDiscussionUpdateOne) RemoveReplyIDs(ids ...uuid.UUID) *RetrospectiveDiscussionUpdateOne {
	rduo.mutation.RemoveReplyIDs(ids...)
	return rduo
}

// RemoveReplies removes "replies" edges to RetrospectiveDiscussionReply entities.
func (rduo *RetrospectiveDiscussionUpdateOne) RemoveReplies(r ...*RetrospectiveDiscussionReply) *RetrospectiveDiscussionUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rduo.RemoveReplyIDs(ids...)
}

// ClearReview clears all "review" edges to the RetrospectiveReview entity.
func (rduo *RetrospectiveDiscussionUpdateOne) ClearReview() *RetrospectiveDiscussionUpdateOne {
	rduo.mutation.ClearReview()
	return rduo
}

// RemoveReviewIDs removes the "review" edge to RetrospectiveReview entities by IDs.
func (rduo *RetrospectiveDiscussionUpdateOne) RemoveReviewIDs(ids ...uuid.UUID) *RetrospectiveDiscussionUpdateOne {
	rduo.mutation.RemoveReviewIDs(ids...)
	return rduo
}

// RemoveReview removes "review" edges to RetrospectiveReview entities.
func (rduo *RetrospectiveDiscussionUpdateOne) RemoveReview(r ...*RetrospectiveReview) *RetrospectiveDiscussionUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rduo.RemoveReviewIDs(ids...)
}

// Where appends a list predicates to the RetrospectiveDiscussionUpdate builder.
func (rduo *RetrospectiveDiscussionUpdateOne) Where(ps ...predicate.RetrospectiveDiscussion) *RetrospectiveDiscussionUpdateOne {
	rduo.mutation.Where(ps...)
	return rduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rduo *RetrospectiveDiscussionUpdateOne) Select(field string, fields ...string) *RetrospectiveDiscussionUpdateOne {
	rduo.fields = append([]string{field}, fields...)
	return rduo
}

// Save executes the query and returns the updated RetrospectiveDiscussion entity.
func (rduo *RetrospectiveDiscussionUpdateOne) Save(ctx context.Context) (*RetrospectiveDiscussion, error) {
	return withHooks(ctx, rduo.sqlSave, rduo.mutation, rduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rduo *RetrospectiveDiscussionUpdateOne) SaveX(ctx context.Context) *RetrospectiveDiscussion {
	node, err := rduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rduo *RetrospectiveDiscussionUpdateOne) Exec(ctx context.Context) error {
	_, err := rduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rduo *RetrospectiveDiscussionUpdateOne) ExecX(ctx context.Context) {
	if err := rduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rduo *RetrospectiveDiscussionUpdateOne) check() error {
	if rduo.mutation.RetrospectiveCleared() && len(rduo.mutation.RetrospectiveIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "RetrospectiveDiscussion.retrospective"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rduo *RetrospectiveDiscussionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RetrospectiveDiscussionUpdateOne {
	rduo.modifiers = append(rduo.modifiers, modifiers...)
	return rduo
}

func (rduo *RetrospectiveDiscussionUpdateOne) sqlSave(ctx context.Context) (_node *RetrospectiveDiscussion, err error) {
	if err := rduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(retrospectivediscussion.Table, retrospectivediscussion.Columns, sqlgraph.NewFieldSpec(retrospectivediscussion.FieldID, field.TypeUUID))
	id, ok := rduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RetrospectiveDiscussion.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, retrospectivediscussion.FieldID)
		for _, f := range fields {
			if !retrospectivediscussion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != retrospectivediscussion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rduo.mutation.Content(); ok {
		_spec.SetField(retrospectivediscussion.FieldContent, field.TypeBytes, value)
	}
	if rduo.mutation.RetrospectiveCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospectivediscussion.RetrospectiveTable,
			Columns: []string{retrospectivediscussion.RetrospectiveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospective.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rduo.mutation.RetrospectiveIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospectivediscussion.RetrospectiveTable,
			Columns: []string{retrospectivediscussion.RetrospectiveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospective.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rduo.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   retrospectivediscussion.RepliesTable,
			Columns: []string{retrospectivediscussion.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivediscussionreply.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rduo.mutation.RemovedRepliesIDs(); len(nodes) > 0 && !rduo.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   retrospectivediscussion.RepliesTable,
			Columns: []string{retrospectivediscussion.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivediscussionreply.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rduo.mutation.RepliesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   retrospectivediscussion.RepliesTable,
			Columns: []string{retrospectivediscussion.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivediscussionreply.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rduo.mutation.ReviewCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   retrospectivediscussion.ReviewTable,
			Columns: []string{retrospectivediscussion.ReviewColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivereview.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rduo.mutation.RemovedReviewIDs(); len(nodes) > 0 && !rduo.mutation.ReviewCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   retrospectivediscussion.ReviewTable,
			Columns: []string{retrospectivediscussion.ReviewColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivereview.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rduo.mutation.ReviewIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   retrospectivediscussion.ReviewTable,
			Columns: []string{retrospectivediscussion.ReviewColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivereview.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(rduo.modifiers...)
	_node = &RetrospectiveDiscussion{config: rduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{retrospectivediscussion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rduo.mutation.done = true
	return _node, nil
}
