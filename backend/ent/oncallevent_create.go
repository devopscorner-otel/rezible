// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/alert"
	"github.com/rezible/rezible/ent/oncallannotation"
	"github.com/rezible/rezible/ent/oncallevent"
	"github.com/rezible/rezible/ent/oncallroster"
	"github.com/rezible/rezible/ent/tenant"
)

// OncallEventCreate is the builder for creating a OncallEvent entity.
type OncallEventCreate struct {
	config
	mutation *OncallEventMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (oec *OncallEventCreate) SetTenantID(i int) *OncallEventCreate {
	oec.mutation.SetTenantID(i)
	return oec
}

// SetProviderID sets the "provider_id" field.
func (oec *OncallEventCreate) SetProviderID(s string) *OncallEventCreate {
	oec.mutation.SetProviderID(s)
	return oec
}

// SetRosterID sets the "roster_id" field.
func (oec *OncallEventCreate) SetRosterID(u uuid.UUID) *OncallEventCreate {
	oec.mutation.SetRosterID(u)
	return oec
}

// SetNillableRosterID sets the "roster_id" field if the given value is not nil.
func (oec *OncallEventCreate) SetNillableRosterID(u *uuid.UUID) *OncallEventCreate {
	if u != nil {
		oec.SetRosterID(*u)
	}
	return oec
}

// SetAlertID sets the "alert_id" field.
func (oec *OncallEventCreate) SetAlertID(u uuid.UUID) *OncallEventCreate {
	oec.mutation.SetAlertID(u)
	return oec
}

// SetNillableAlertID sets the "alert_id" field if the given value is not nil.
func (oec *OncallEventCreate) SetNillableAlertID(u *uuid.UUID) *OncallEventCreate {
	if u != nil {
		oec.SetAlertID(*u)
	}
	return oec
}

// SetTimestamp sets the "timestamp" field.
func (oec *OncallEventCreate) SetTimestamp(t time.Time) *OncallEventCreate {
	oec.mutation.SetTimestamp(t)
	return oec
}

// SetKind sets the "kind" field.
func (oec *OncallEventCreate) SetKind(o oncallevent.Kind) *OncallEventCreate {
	oec.mutation.SetKind(o)
	return oec
}

// SetTitle sets the "title" field.
func (oec *OncallEventCreate) SetTitle(s string) *OncallEventCreate {
	oec.mutation.SetTitle(s)
	return oec
}

// SetDescription sets the "description" field.
func (oec *OncallEventCreate) SetDescription(s string) *OncallEventCreate {
	oec.mutation.SetDescription(s)
	return oec
}

// SetSource sets the "source" field.
func (oec *OncallEventCreate) SetSource(s string) *OncallEventCreate {
	oec.mutation.SetSource(s)
	return oec
}

// SetID sets the "id" field.
func (oec *OncallEventCreate) SetID(u uuid.UUID) *OncallEventCreate {
	oec.mutation.SetID(u)
	return oec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (oec *OncallEventCreate) SetNillableID(u *uuid.UUID) *OncallEventCreate {
	if u != nil {
		oec.SetID(*u)
	}
	return oec
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (oec *OncallEventCreate) SetTenant(t *Tenant) *OncallEventCreate {
	return oec.SetTenantID(t.ID)
}

// SetRoster sets the "roster" edge to the OncallRoster entity.
func (oec *OncallEventCreate) SetRoster(o *OncallRoster) *OncallEventCreate {
	return oec.SetRosterID(o.ID)
}

// SetAlert sets the "alert" edge to the Alert entity.
func (oec *OncallEventCreate) SetAlert(a *Alert) *OncallEventCreate {
	return oec.SetAlertID(a.ID)
}

// AddAnnotationIDs adds the "annotations" edge to the OncallAnnotation entity by IDs.
func (oec *OncallEventCreate) AddAnnotationIDs(ids ...uuid.UUID) *OncallEventCreate {
	oec.mutation.AddAnnotationIDs(ids...)
	return oec
}

// AddAnnotations adds the "annotations" edges to the OncallAnnotation entity.
func (oec *OncallEventCreate) AddAnnotations(o ...*OncallAnnotation) *OncallEventCreate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oec.AddAnnotationIDs(ids...)
}

// Mutation returns the OncallEventMutation object of the builder.
func (oec *OncallEventCreate) Mutation() *OncallEventMutation {
	return oec.mutation
}

// Save creates the OncallEvent in the database.
func (oec *OncallEventCreate) Save(ctx context.Context) (*OncallEvent, error) {
	if err := oec.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, oec.sqlSave, oec.mutation, oec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oec *OncallEventCreate) SaveX(ctx context.Context) *OncallEvent {
	v, err := oec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oec *OncallEventCreate) Exec(ctx context.Context) error {
	_, err := oec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oec *OncallEventCreate) ExecX(ctx context.Context) {
	if err := oec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oec *OncallEventCreate) defaults() error {
	if _, ok := oec.mutation.ID(); !ok {
		if oncallevent.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized oncallevent.DefaultID (forgotten import ent/runtime?)")
		}
		v := oncallevent.DefaultID()
		oec.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (oec *OncallEventCreate) check() error {
	if _, ok := oec.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "OncallEvent.tenant_id"`)}
	}
	if _, ok := oec.mutation.ProviderID(); !ok {
		return &ValidationError{Name: "provider_id", err: errors.New(`ent: missing required field "OncallEvent.provider_id"`)}
	}
	if _, ok := oec.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`ent: missing required field "OncallEvent.timestamp"`)}
	}
	if _, ok := oec.mutation.Kind(); !ok {
		return &ValidationError{Name: "kind", err: errors.New(`ent: missing required field "OncallEvent.kind"`)}
	}
	if v, ok := oec.mutation.Kind(); ok {
		if err := oncallevent.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "OncallEvent.kind": %w`, err)}
		}
	}
	if _, ok := oec.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "OncallEvent.title"`)}
	}
	if _, ok := oec.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "OncallEvent.description"`)}
	}
	if _, ok := oec.mutation.Source(); !ok {
		return &ValidationError{Name: "source", err: errors.New(`ent: missing required field "OncallEvent.source"`)}
	}
	if len(oec.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "OncallEvent.tenant"`)}
	}
	return nil
}

func (oec *OncallEventCreate) sqlSave(ctx context.Context) (*OncallEvent, error) {
	if err := oec.check(); err != nil {
		return nil, err
	}
	_node, _spec := oec.createSpec()
	if err := sqlgraph.CreateNode(ctx, oec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	oec.mutation.id = &_node.ID
	oec.mutation.done = true
	return _node, nil
}

func (oec *OncallEventCreate) createSpec() (*OncallEvent, *sqlgraph.CreateSpec) {
	var (
		_node = &OncallEvent{config: oec.config}
		_spec = sqlgraph.NewCreateSpec(oncallevent.Table, sqlgraph.NewFieldSpec(oncallevent.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = oec.conflict
	if id, ok := oec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := oec.mutation.ProviderID(); ok {
		_spec.SetField(oncallevent.FieldProviderID, field.TypeString, value)
		_node.ProviderID = value
	}
	if value, ok := oec.mutation.Timestamp(); ok {
		_spec.SetField(oncallevent.FieldTimestamp, field.TypeTime, value)
		_node.Timestamp = value
	}
	if value, ok := oec.mutation.Kind(); ok {
		_spec.SetField(oncallevent.FieldKind, field.TypeEnum, value)
		_node.Kind = value
	}
	if value, ok := oec.mutation.Title(); ok {
		_spec.SetField(oncallevent.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := oec.mutation.Description(); ok {
		_spec.SetField(oncallevent.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := oec.mutation.Source(); ok {
		_spec.SetField(oncallevent.FieldSource, field.TypeString, value)
		_node.Source = value
	}
	if nodes := oec.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallevent.TenantTable,
			Columns: []string{oncallevent.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oec.mutation.RosterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallevent.RosterTable,
			Columns: []string{oncallevent.RosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RosterID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oec.mutation.AlertIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallevent.AlertTable,
			Columns: []string{oncallevent.AlertColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(alert.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AlertID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oec.mutation.AnnotationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   oncallevent.AnnotationsTable,
			Columns: []string{oncallevent.AnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallannotation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OncallEvent.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OncallEventUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (oec *OncallEventCreate) OnConflict(opts ...sql.ConflictOption) *OncallEventUpsertOne {
	oec.conflict = opts
	return &OncallEventUpsertOne{
		create: oec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OncallEvent.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oec *OncallEventCreate) OnConflictColumns(columns ...string) *OncallEventUpsertOne {
	oec.conflict = append(oec.conflict, sql.ConflictColumns(columns...))
	return &OncallEventUpsertOne{
		create: oec,
	}
}

type (
	// OncallEventUpsertOne is the builder for "upsert"-ing
	//  one OncallEvent node.
	OncallEventUpsertOne struct {
		create *OncallEventCreate
	}

	// OncallEventUpsert is the "OnConflict" setter.
	OncallEventUpsert struct {
		*sql.UpdateSet
	}
)

// SetProviderID sets the "provider_id" field.
func (u *OncallEventUpsert) SetProviderID(v string) *OncallEventUpsert {
	u.Set(oncallevent.FieldProviderID, v)
	return u
}

// UpdateProviderID sets the "provider_id" field to the value that was provided on create.
func (u *OncallEventUpsert) UpdateProviderID() *OncallEventUpsert {
	u.SetExcluded(oncallevent.FieldProviderID)
	return u
}

// SetRosterID sets the "roster_id" field.
func (u *OncallEventUpsert) SetRosterID(v uuid.UUID) *OncallEventUpsert {
	u.Set(oncallevent.FieldRosterID, v)
	return u
}

// UpdateRosterID sets the "roster_id" field to the value that was provided on create.
func (u *OncallEventUpsert) UpdateRosterID() *OncallEventUpsert {
	u.SetExcluded(oncallevent.FieldRosterID)
	return u
}

// ClearRosterID clears the value of the "roster_id" field.
func (u *OncallEventUpsert) ClearRosterID() *OncallEventUpsert {
	u.SetNull(oncallevent.FieldRosterID)
	return u
}

// SetAlertID sets the "alert_id" field.
func (u *OncallEventUpsert) SetAlertID(v uuid.UUID) *OncallEventUpsert {
	u.Set(oncallevent.FieldAlertID, v)
	return u
}

// UpdateAlertID sets the "alert_id" field to the value that was provided on create.
func (u *OncallEventUpsert) UpdateAlertID() *OncallEventUpsert {
	u.SetExcluded(oncallevent.FieldAlertID)
	return u
}

// ClearAlertID clears the value of the "alert_id" field.
func (u *OncallEventUpsert) ClearAlertID() *OncallEventUpsert {
	u.SetNull(oncallevent.FieldAlertID)
	return u
}

// SetTimestamp sets the "timestamp" field.
func (u *OncallEventUpsert) SetTimestamp(v time.Time) *OncallEventUpsert {
	u.Set(oncallevent.FieldTimestamp, v)
	return u
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *OncallEventUpsert) UpdateTimestamp() *OncallEventUpsert {
	u.SetExcluded(oncallevent.FieldTimestamp)
	return u
}

// SetKind sets the "kind" field.
func (u *OncallEventUpsert) SetKind(v oncallevent.Kind) *OncallEventUpsert {
	u.Set(oncallevent.FieldKind, v)
	return u
}

// UpdateKind sets the "kind" field to the value that was provided on create.
func (u *OncallEventUpsert) UpdateKind() *OncallEventUpsert {
	u.SetExcluded(oncallevent.FieldKind)
	return u
}

// SetTitle sets the "title" field.
func (u *OncallEventUpsert) SetTitle(v string) *OncallEventUpsert {
	u.Set(oncallevent.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *OncallEventUpsert) UpdateTitle() *OncallEventUpsert {
	u.SetExcluded(oncallevent.FieldTitle)
	return u
}

// SetDescription sets the "description" field.
func (u *OncallEventUpsert) SetDescription(v string) *OncallEventUpsert {
	u.Set(oncallevent.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *OncallEventUpsert) UpdateDescription() *OncallEventUpsert {
	u.SetExcluded(oncallevent.FieldDescription)
	return u
}

// SetSource sets the "source" field.
func (u *OncallEventUpsert) SetSource(v string) *OncallEventUpsert {
	u.Set(oncallevent.FieldSource, v)
	return u
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *OncallEventUpsert) UpdateSource() *OncallEventUpsert {
	u.SetExcluded(oncallevent.FieldSource)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OncallEvent.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oncallevent.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OncallEventUpsertOne) UpdateNewValues() *OncallEventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(oncallevent.FieldID)
		}
		if _, exists := u.create.mutation.TenantID(); exists {
			s.SetIgnore(oncallevent.FieldTenantID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OncallEvent.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OncallEventUpsertOne) Ignore() *OncallEventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OncallEventUpsertOne) DoNothing() *OncallEventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OncallEventCreate.OnConflict
// documentation for more info.
func (u *OncallEventUpsertOne) Update(set func(*OncallEventUpsert)) *OncallEventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OncallEventUpsert{UpdateSet: update})
	}))
	return u
}

// SetProviderID sets the "provider_id" field.
func (u *OncallEventUpsertOne) SetProviderID(v string) *OncallEventUpsertOne {
	return u.Update(func(s *OncallEventUpsert) {
		s.SetProviderID(v)
	})
}

// UpdateProviderID sets the "provider_id" field to the value that was provided on create.
func (u *OncallEventUpsertOne) UpdateProviderID() *OncallEventUpsertOne {
	return u.Update(func(s *OncallEventUpsert) {
		s.UpdateProviderID()
	})
}

// SetRosterID sets the "roster_id" field.
func (u *OncallEventUpsertOne) SetRosterID(v uuid.UUID) *OncallEventUpsertOne {
	return u.Update(func(s *OncallEventUpsert) {
		s.SetRosterID(v)
	})
}

// UpdateRosterID sets the "roster_id" field to the value that was provided on create.
func (u *OncallEventUpsertOne) UpdateRosterID() *OncallEventUpsertOne {
	return u.Update(func(s *OncallEventUpsert) {
		s.UpdateRosterID()
	})
}

// ClearRosterID clears the value of the "roster_id" field.
func (u *OncallEventUpsertOne) ClearRosterID() *OncallEventUpsertOne {
	return u.Update(func(s *OncallEventUpsert) {
		s.ClearRosterID()
	})
}

// SetAlertID sets the "alert_id" field.
func (u *OncallEventUpsertOne) SetAlertID(v uuid.UUID) *OncallEventUpsertOne {
	return u.Update(func(s *OncallEventUpsert) {
		s.SetAlertID(v)
	})
}

// UpdateAlertID sets the "alert_id" field to the value that was provided on create.
func (u *OncallEventUpsertOne) UpdateAlertID() *OncallEventUpsertOne {
	return u.Update(func(s *OncallEventUpsert) {
		s.UpdateAlertID()
	})
}

// ClearAlertID clears the value of the "alert_id" field.
func (u *OncallEventUpsertOne) ClearAlertID() *OncallEventUpsertOne {
	return u.Update(func(s *OncallEventUpsert) {
		s.ClearAlertID()
	})
}

// SetTimestamp sets the "timestamp" field.
func (u *OncallEventUpsertOne) SetTimestamp(v time.Time) *OncallEventUpsertOne {
	return u.Update(func(s *OncallEventUpsert) {
		s.SetTimestamp(v)
	})
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *OncallEventUpsertOne) UpdateTimestamp() *OncallEventUpsertOne {
	return u.Update(func(s *OncallEventUpsert) {
		s.UpdateTimestamp()
	})
}

// SetKind sets the "kind" field.
func (u *OncallEventUpsertOne) SetKind(v oncallevent.Kind) *OncallEventUpsertOne {
	return u.Update(func(s *OncallEventUpsert) {
		s.SetKind(v)
	})
}

// UpdateKind sets the "kind" field to the value that was provided on create.
func (u *OncallEventUpsertOne) UpdateKind() *OncallEventUpsertOne {
	return u.Update(func(s *OncallEventUpsert) {
		s.UpdateKind()
	})
}

// SetTitle sets the "title" field.
func (u *OncallEventUpsertOne) SetTitle(v string) *OncallEventUpsertOne {
	return u.Update(func(s *OncallEventUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *OncallEventUpsertOne) UpdateTitle() *OncallEventUpsertOne {
	return u.Update(func(s *OncallEventUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *OncallEventUpsertOne) SetDescription(v string) *OncallEventUpsertOne {
	return u.Update(func(s *OncallEventUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *OncallEventUpsertOne) UpdateDescription() *OncallEventUpsertOne {
	return u.Update(func(s *OncallEventUpsert) {
		s.UpdateDescription()
	})
}

// SetSource sets the "source" field.
func (u *OncallEventUpsertOne) SetSource(v string) *OncallEventUpsertOne {
	return u.Update(func(s *OncallEventUpsert) {
		s.SetSource(v)
	})
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *OncallEventUpsertOne) UpdateSource() *OncallEventUpsertOne {
	return u.Update(func(s *OncallEventUpsert) {
		s.UpdateSource()
	})
}

// Exec executes the query.
func (u *OncallEventUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OncallEventCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OncallEventUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OncallEventUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: OncallEventUpsertOne.ID is not supported by MySQL driver. Use OncallEventUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OncallEventUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OncallEventCreateBulk is the builder for creating many OncallEvent entities in bulk.
type OncallEventCreateBulk struct {
	config
	err      error
	builders []*OncallEventCreate
	conflict []sql.ConflictOption
}

// Save creates the OncallEvent entities in the database.
func (oecb *OncallEventCreateBulk) Save(ctx context.Context) ([]*OncallEvent, error) {
	if oecb.err != nil {
		return nil, oecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(oecb.builders))
	nodes := make([]*OncallEvent, len(oecb.builders))
	mutators := make([]Mutator, len(oecb.builders))
	for i := range oecb.builders {
		func(i int, root context.Context) {
			builder := oecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OncallEventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = oecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oecb *OncallEventCreateBulk) SaveX(ctx context.Context) []*OncallEvent {
	v, err := oecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oecb *OncallEventCreateBulk) Exec(ctx context.Context) error {
	_, err := oecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oecb *OncallEventCreateBulk) ExecX(ctx context.Context) {
	if err := oecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OncallEvent.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OncallEventUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (oecb *OncallEventCreateBulk) OnConflict(opts ...sql.ConflictOption) *OncallEventUpsertBulk {
	oecb.conflict = opts
	return &OncallEventUpsertBulk{
		create: oecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OncallEvent.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oecb *OncallEventCreateBulk) OnConflictColumns(columns ...string) *OncallEventUpsertBulk {
	oecb.conflict = append(oecb.conflict, sql.ConflictColumns(columns...))
	return &OncallEventUpsertBulk{
		create: oecb,
	}
}

// OncallEventUpsertBulk is the builder for "upsert"-ing
// a bulk of OncallEvent nodes.
type OncallEventUpsertBulk struct {
	create *OncallEventCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OncallEvent.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oncallevent.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OncallEventUpsertBulk) UpdateNewValues() *OncallEventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(oncallevent.FieldID)
			}
			if _, exists := b.mutation.TenantID(); exists {
				s.SetIgnore(oncallevent.FieldTenantID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OncallEvent.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OncallEventUpsertBulk) Ignore() *OncallEventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OncallEventUpsertBulk) DoNothing() *OncallEventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OncallEventCreateBulk.OnConflict
// documentation for more info.
func (u *OncallEventUpsertBulk) Update(set func(*OncallEventUpsert)) *OncallEventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OncallEventUpsert{UpdateSet: update})
	}))
	return u
}

// SetProviderID sets the "provider_id" field.
func (u *OncallEventUpsertBulk) SetProviderID(v string) *OncallEventUpsertBulk {
	return u.Update(func(s *OncallEventUpsert) {
		s.SetProviderID(v)
	})
}

// UpdateProviderID sets the "provider_id" field to the value that was provided on create.
func (u *OncallEventUpsertBulk) UpdateProviderID() *OncallEventUpsertBulk {
	return u.Update(func(s *OncallEventUpsert) {
		s.UpdateProviderID()
	})
}

// SetRosterID sets the "roster_id" field.
func (u *OncallEventUpsertBulk) SetRosterID(v uuid.UUID) *OncallEventUpsertBulk {
	return u.Update(func(s *OncallEventUpsert) {
		s.SetRosterID(v)
	})
}

// UpdateRosterID sets the "roster_id" field to the value that was provided on create.
func (u *OncallEventUpsertBulk) UpdateRosterID() *OncallEventUpsertBulk {
	return u.Update(func(s *OncallEventUpsert) {
		s.UpdateRosterID()
	})
}

// ClearRosterID clears the value of the "roster_id" field.
func (u *OncallEventUpsertBulk) ClearRosterID() *OncallEventUpsertBulk {
	return u.Update(func(s *OncallEventUpsert) {
		s.ClearRosterID()
	})
}

// SetAlertID sets the "alert_id" field.
func (u *OncallEventUpsertBulk) SetAlertID(v uuid.UUID) *OncallEventUpsertBulk {
	return u.Update(func(s *OncallEventUpsert) {
		s.SetAlertID(v)
	})
}

// UpdateAlertID sets the "alert_id" field to the value that was provided on create.
func (u *OncallEventUpsertBulk) UpdateAlertID() *OncallEventUpsertBulk {
	return u.Update(func(s *OncallEventUpsert) {
		s.UpdateAlertID()
	})
}

// ClearAlertID clears the value of the "alert_id" field.
func (u *OncallEventUpsertBulk) ClearAlertID() *OncallEventUpsertBulk {
	return u.Update(func(s *OncallEventUpsert) {
		s.ClearAlertID()
	})
}

// SetTimestamp sets the "timestamp" field.
func (u *OncallEventUpsertBulk) SetTimestamp(v time.Time) *OncallEventUpsertBulk {
	return u.Update(func(s *OncallEventUpsert) {
		s.SetTimestamp(v)
	})
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *OncallEventUpsertBulk) UpdateTimestamp() *OncallEventUpsertBulk {
	return u.Update(func(s *OncallEventUpsert) {
		s.UpdateTimestamp()
	})
}

// SetKind sets the "kind" field.
func (u *OncallEventUpsertBulk) SetKind(v oncallevent.Kind) *OncallEventUpsertBulk {
	return u.Update(func(s *OncallEventUpsert) {
		s.SetKind(v)
	})
}

// UpdateKind sets the "kind" field to the value that was provided on create.
func (u *OncallEventUpsertBulk) UpdateKind() *OncallEventUpsertBulk {
	return u.Update(func(s *OncallEventUpsert) {
		s.UpdateKind()
	})
}

// SetTitle sets the "title" field.
func (u *OncallEventUpsertBulk) SetTitle(v string) *OncallEventUpsertBulk {
	return u.Update(func(s *OncallEventUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *OncallEventUpsertBulk) UpdateTitle() *OncallEventUpsertBulk {
	return u.Update(func(s *OncallEventUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *OncallEventUpsertBulk) SetDescription(v string) *OncallEventUpsertBulk {
	return u.Update(func(s *OncallEventUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *OncallEventUpsertBulk) UpdateDescription() *OncallEventUpsertBulk {
	return u.Update(func(s *OncallEventUpsert) {
		s.UpdateDescription()
	})
}

// SetSource sets the "source" field.
func (u *OncallEventUpsertBulk) SetSource(v string) *OncallEventUpsertBulk {
	return u.Update(func(s *OncallEventUpsert) {
		s.SetSource(v)
	})
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *OncallEventUpsertBulk) UpdateSource() *OncallEventUpsertBulk {
	return u.Update(func(s *OncallEventUpsert) {
		s.UpdateSource()
	})
}

// Exec executes the query.
func (u *OncallEventUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OncallEventCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OncallEventCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OncallEventUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
