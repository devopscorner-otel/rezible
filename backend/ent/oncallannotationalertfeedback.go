// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/oncallannotation"
	"github.com/rezible/rezible/ent/oncallannotationalertfeedback"
)

// OncallAnnotationAlertFeedback is the model entity for the OncallAnnotationAlertFeedback schema.
type OncallAnnotationAlertFeedback struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// AnnotationID holds the value of the "annotation_id" field.
	AnnotationID uuid.UUID `json:"annotation_id,omitempty"`
	// Actionable holds the value of the "actionable" field.
	Actionable bool `json:"actionable,omitempty"`
	// Accurate holds the value of the "accurate" field.
	Accurate oncallannotationalertfeedback.Accurate `json:"accurate,omitempty"`
	// DocumentationAvailable holds the value of the "documentation_available" field.
	DocumentationAvailable oncallannotationalertfeedback.DocumentationAvailable `json:"documentation_available,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OncallAnnotationAlertFeedbackQuery when eager-loading is set.
	Edges        OncallAnnotationAlertFeedbackEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OncallAnnotationAlertFeedbackEdges holds the relations/edges for other nodes in the graph.
type OncallAnnotationAlertFeedbackEdges struct {
	// Annotation holds the value of the annotation edge.
	Annotation *OncallAnnotation `json:"annotation,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AnnotationOrErr returns the Annotation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OncallAnnotationAlertFeedbackEdges) AnnotationOrErr() (*OncallAnnotation, error) {
	if e.Annotation != nil {
		return e.Annotation, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: oncallannotation.Label}
	}
	return nil, &NotLoadedError{edge: "annotation"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OncallAnnotationAlertFeedback) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case oncallannotationalertfeedback.FieldActionable:
			values[i] = new(sql.NullBool)
		case oncallannotationalertfeedback.FieldAccurate, oncallannotationalertfeedback.FieldDocumentationAvailable:
			values[i] = new(sql.NullString)
		case oncallannotationalertfeedback.FieldID, oncallannotationalertfeedback.FieldAnnotationID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OncallAnnotationAlertFeedback fields.
func (oaaf *OncallAnnotationAlertFeedback) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case oncallannotationalertfeedback.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				oaaf.ID = *value
			}
		case oncallannotationalertfeedback.FieldAnnotationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field annotation_id", values[i])
			} else if value != nil {
				oaaf.AnnotationID = *value
			}
		case oncallannotationalertfeedback.FieldActionable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field actionable", values[i])
			} else if value.Valid {
				oaaf.Actionable = value.Bool
			}
		case oncallannotationalertfeedback.FieldAccurate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field accurate", values[i])
			} else if value.Valid {
				oaaf.Accurate = oncallannotationalertfeedback.Accurate(value.String)
			}
		case oncallannotationalertfeedback.FieldDocumentationAvailable:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field documentation_available", values[i])
			} else if value.Valid {
				oaaf.DocumentationAvailable = oncallannotationalertfeedback.DocumentationAvailable(value.String)
			}
		default:
			oaaf.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OncallAnnotationAlertFeedback.
// This includes values selected through modifiers, order, etc.
func (oaaf *OncallAnnotationAlertFeedback) Value(name string) (ent.Value, error) {
	return oaaf.selectValues.Get(name)
}

// QueryAnnotation queries the "annotation" edge of the OncallAnnotationAlertFeedback entity.
func (oaaf *OncallAnnotationAlertFeedback) QueryAnnotation() *OncallAnnotationQuery {
	return NewOncallAnnotationAlertFeedbackClient(oaaf.config).QueryAnnotation(oaaf)
}

// Update returns a builder for updating this OncallAnnotationAlertFeedback.
// Note that you need to call OncallAnnotationAlertFeedback.Unwrap() before calling this method if this OncallAnnotationAlertFeedback
// was returned from a transaction, and the transaction was committed or rolled back.
func (oaaf *OncallAnnotationAlertFeedback) Update() *OncallAnnotationAlertFeedbackUpdateOne {
	return NewOncallAnnotationAlertFeedbackClient(oaaf.config).UpdateOne(oaaf)
}

// Unwrap unwraps the OncallAnnotationAlertFeedback entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (oaaf *OncallAnnotationAlertFeedback) Unwrap() *OncallAnnotationAlertFeedback {
	_tx, ok := oaaf.config.driver.(*txDriver)
	if !ok {
		panic("ent: OncallAnnotationAlertFeedback is not a transactional entity")
	}
	oaaf.config.driver = _tx.drv
	return oaaf
}

// String implements the fmt.Stringer.
func (oaaf *OncallAnnotationAlertFeedback) String() string {
	var builder strings.Builder
	builder.WriteString("OncallAnnotationAlertFeedback(")
	builder.WriteString(fmt.Sprintf("id=%v, ", oaaf.ID))
	builder.WriteString("annotation_id=")
	builder.WriteString(fmt.Sprintf("%v", oaaf.AnnotationID))
	builder.WriteString(", ")
	builder.WriteString("actionable=")
	builder.WriteString(fmt.Sprintf("%v", oaaf.Actionable))
	builder.WriteString(", ")
	builder.WriteString("accurate=")
	builder.WriteString(fmt.Sprintf("%v", oaaf.Accurate))
	builder.WriteString(", ")
	builder.WriteString("documentation_available=")
	builder.WriteString(fmt.Sprintf("%v", oaaf.DocumentationAvailable))
	builder.WriteByte(')')
	return builder.String()
}

// OncallAnnotationAlertFeedbacks is a parsable slice of OncallAnnotationAlertFeedback.
type OncallAnnotationAlertFeedbacks []*OncallAnnotationAlertFeedback
