// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/retrospective"
	"github.com/rezible/rezible/ent/retrospectivecomment"
	"github.com/rezible/rezible/ent/retrospectivereview"
	"github.com/rezible/rezible/ent/tenant"
	"github.com/rezible/rezible/ent/user"
)

// RetrospectiveCommentQuery is the builder for querying RetrospectiveComment entities.
type RetrospectiveCommentQuery struct {
	config
	ctx               *QueryContext
	order             []retrospectivecomment.OrderOption
	inters            []Interceptor
	predicates        []predicate.RetrospectiveComment
	withTenant        *TenantQuery
	withRetrospective *RetrospectiveQuery
	withUser          *UserQuery
	withReview        *RetrospectiveReviewQuery
	withParent        *RetrospectiveCommentQuery
	withReplies       *RetrospectiveCommentQuery
	modifiers         []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the RetrospectiveCommentQuery builder.
func (rcq *RetrospectiveCommentQuery) Where(ps ...predicate.RetrospectiveComment) *RetrospectiveCommentQuery {
	rcq.predicates = append(rcq.predicates, ps...)
	return rcq
}

// Limit the number of records to be returned by this query.
func (rcq *RetrospectiveCommentQuery) Limit(limit int) *RetrospectiveCommentQuery {
	rcq.ctx.Limit = &limit
	return rcq
}

// Offset to start from.
func (rcq *RetrospectiveCommentQuery) Offset(offset int) *RetrospectiveCommentQuery {
	rcq.ctx.Offset = &offset
	return rcq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (rcq *RetrospectiveCommentQuery) Unique(unique bool) *RetrospectiveCommentQuery {
	rcq.ctx.Unique = &unique
	return rcq
}

// Order specifies how the records should be ordered.
func (rcq *RetrospectiveCommentQuery) Order(o ...retrospectivecomment.OrderOption) *RetrospectiveCommentQuery {
	rcq.order = append(rcq.order, o...)
	return rcq
}

// QueryTenant chains the current query on the "tenant" edge.
func (rcq *RetrospectiveCommentQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: rcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(retrospectivecomment.Table, retrospectivecomment.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, retrospectivecomment.TenantTable, retrospectivecomment.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(rcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRetrospective chains the current query on the "retrospective" edge.
func (rcq *RetrospectiveCommentQuery) QueryRetrospective() *RetrospectiveQuery {
	query := (&RetrospectiveClient{config: rcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(retrospectivecomment.Table, retrospectivecomment.FieldID, selector),
			sqlgraph.To(retrospective.Table, retrospective.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, retrospectivecomment.RetrospectiveTable, retrospectivecomment.RetrospectiveColumn),
		)
		fromU = sqlgraph.SetNeighbors(rcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUser chains the current query on the "user" edge.
func (rcq *RetrospectiveCommentQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: rcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(retrospectivecomment.Table, retrospectivecomment.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, retrospectivecomment.UserTable, retrospectivecomment.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(rcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReview chains the current query on the "review" edge.
func (rcq *RetrospectiveCommentQuery) QueryReview() *RetrospectiveReviewQuery {
	query := (&RetrospectiveReviewClient{config: rcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(retrospectivecomment.Table, retrospectivecomment.FieldID, selector),
			sqlgraph.To(retrospectivereview.Table, retrospectivereview.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, retrospectivecomment.ReviewTable, retrospectivecomment.ReviewColumn),
		)
		fromU = sqlgraph.SetNeighbors(rcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryParent chains the current query on the "parent" edge.
func (rcq *RetrospectiveCommentQuery) QueryParent() *RetrospectiveCommentQuery {
	query := (&RetrospectiveCommentClient{config: rcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(retrospectivecomment.Table, retrospectivecomment.FieldID, selector),
			sqlgraph.To(retrospectivecomment.Table, retrospectivecomment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, retrospectivecomment.ParentTable, retrospectivecomment.ParentColumn),
		)
		fromU = sqlgraph.SetNeighbors(rcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReplies chains the current query on the "replies" edge.
func (rcq *RetrospectiveCommentQuery) QueryReplies() *RetrospectiveCommentQuery {
	query := (&RetrospectiveCommentClient{config: rcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(retrospectivecomment.Table, retrospectivecomment.FieldID, selector),
			sqlgraph.To(retrospectivecomment.Table, retrospectivecomment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, retrospectivecomment.RepliesTable, retrospectivecomment.RepliesColumn),
		)
		fromU = sqlgraph.SetNeighbors(rcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first RetrospectiveComment entity from the query.
// Returns a *NotFoundError when no RetrospectiveComment was found.
func (rcq *RetrospectiveCommentQuery) First(ctx context.Context) (*RetrospectiveComment, error) {
	nodes, err := rcq.Limit(1).All(setContextOp(ctx, rcq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{retrospectivecomment.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rcq *RetrospectiveCommentQuery) FirstX(ctx context.Context) *RetrospectiveComment {
	node, err := rcq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first RetrospectiveComment ID from the query.
// Returns a *NotFoundError when no RetrospectiveComment ID was found.
func (rcq *RetrospectiveCommentQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = rcq.Limit(1).IDs(setContextOp(ctx, rcq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{retrospectivecomment.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rcq *RetrospectiveCommentQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := rcq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single RetrospectiveComment entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one RetrospectiveComment entity is found.
// Returns a *NotFoundError when no RetrospectiveComment entities are found.
func (rcq *RetrospectiveCommentQuery) Only(ctx context.Context) (*RetrospectiveComment, error) {
	nodes, err := rcq.Limit(2).All(setContextOp(ctx, rcq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{retrospectivecomment.Label}
	default:
		return nil, &NotSingularError{retrospectivecomment.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rcq *RetrospectiveCommentQuery) OnlyX(ctx context.Context) *RetrospectiveComment {
	node, err := rcq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only RetrospectiveComment ID in the query.
// Returns a *NotSingularError when more than one RetrospectiveComment ID is found.
// Returns a *NotFoundError when no entities are found.
func (rcq *RetrospectiveCommentQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = rcq.Limit(2).IDs(setContextOp(ctx, rcq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{retrospectivecomment.Label}
	default:
		err = &NotSingularError{retrospectivecomment.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rcq *RetrospectiveCommentQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := rcq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of RetrospectiveComments.
func (rcq *RetrospectiveCommentQuery) All(ctx context.Context) ([]*RetrospectiveComment, error) {
	ctx = setContextOp(ctx, rcq.ctx, ent.OpQueryAll)
	if err := rcq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*RetrospectiveComment, *RetrospectiveCommentQuery]()
	return withInterceptors[[]*RetrospectiveComment](ctx, rcq, qr, rcq.inters)
}

// AllX is like All, but panics if an error occurs.
func (rcq *RetrospectiveCommentQuery) AllX(ctx context.Context) []*RetrospectiveComment {
	nodes, err := rcq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of RetrospectiveComment IDs.
func (rcq *RetrospectiveCommentQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if rcq.ctx.Unique == nil && rcq.path != nil {
		rcq.Unique(true)
	}
	ctx = setContextOp(ctx, rcq.ctx, ent.OpQueryIDs)
	if err = rcq.Select(retrospectivecomment.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rcq *RetrospectiveCommentQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := rcq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rcq *RetrospectiveCommentQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, rcq.ctx, ent.OpQueryCount)
	if err := rcq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, rcq, querierCount[*RetrospectiveCommentQuery](), rcq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (rcq *RetrospectiveCommentQuery) CountX(ctx context.Context) int {
	count, err := rcq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rcq *RetrospectiveCommentQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, rcq.ctx, ent.OpQueryExist)
	switch _, err := rcq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (rcq *RetrospectiveCommentQuery) ExistX(ctx context.Context) bool {
	exist, err := rcq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the RetrospectiveCommentQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rcq *RetrospectiveCommentQuery) Clone() *RetrospectiveCommentQuery {
	if rcq == nil {
		return nil
	}
	return &RetrospectiveCommentQuery{
		config:            rcq.config,
		ctx:               rcq.ctx.Clone(),
		order:             append([]retrospectivecomment.OrderOption{}, rcq.order...),
		inters:            append([]Interceptor{}, rcq.inters...),
		predicates:        append([]predicate.RetrospectiveComment{}, rcq.predicates...),
		withTenant:        rcq.withTenant.Clone(),
		withRetrospective: rcq.withRetrospective.Clone(),
		withUser:          rcq.withUser.Clone(),
		withReview:        rcq.withReview.Clone(),
		withParent:        rcq.withParent.Clone(),
		withReplies:       rcq.withReplies.Clone(),
		// clone intermediate query.
		sql:       rcq.sql.Clone(),
		path:      rcq.path,
		modifiers: append([]func(*sql.Selector){}, rcq.modifiers...),
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (rcq *RetrospectiveCommentQuery) WithTenant(opts ...func(*TenantQuery)) *RetrospectiveCommentQuery {
	query := (&TenantClient{config: rcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rcq.withTenant = query
	return rcq
}

// WithRetrospective tells the query-builder to eager-load the nodes that are connected to
// the "retrospective" edge. The optional arguments are used to configure the query builder of the edge.
func (rcq *RetrospectiveCommentQuery) WithRetrospective(opts ...func(*RetrospectiveQuery)) *RetrospectiveCommentQuery {
	query := (&RetrospectiveClient{config: rcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rcq.withRetrospective = query
	return rcq
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (rcq *RetrospectiveCommentQuery) WithUser(opts ...func(*UserQuery)) *RetrospectiveCommentQuery {
	query := (&UserClient{config: rcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rcq.withUser = query
	return rcq
}

// WithReview tells the query-builder to eager-load the nodes that are connected to
// the "review" edge. The optional arguments are used to configure the query builder of the edge.
func (rcq *RetrospectiveCommentQuery) WithReview(opts ...func(*RetrospectiveReviewQuery)) *RetrospectiveCommentQuery {
	query := (&RetrospectiveReviewClient{config: rcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rcq.withReview = query
	return rcq
}

// WithParent tells the query-builder to eager-load the nodes that are connected to
// the "parent" edge. The optional arguments are used to configure the query builder of the edge.
func (rcq *RetrospectiveCommentQuery) WithParent(opts ...func(*RetrospectiveCommentQuery)) *RetrospectiveCommentQuery {
	query := (&RetrospectiveCommentClient{config: rcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rcq.withParent = query
	return rcq
}

// WithReplies tells the query-builder to eager-load the nodes that are connected to
// the "replies" edge. The optional arguments are used to configure the query builder of the edge.
func (rcq *RetrospectiveCommentQuery) WithReplies(opts ...func(*RetrospectiveCommentQuery)) *RetrospectiveCommentQuery {
	query := (&RetrospectiveCommentClient{config: rcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rcq.withReplies = query
	return rcq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID int `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.RetrospectiveComment.Query().
//		GroupBy(retrospectivecomment.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (rcq *RetrospectiveCommentQuery) GroupBy(field string, fields ...string) *RetrospectiveCommentGroupBy {
	rcq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &RetrospectiveCommentGroupBy{build: rcq}
	grbuild.flds = &rcq.ctx.Fields
	grbuild.label = retrospectivecomment.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID int `json:"tenant_id,omitempty"`
//	}
//
//	client.RetrospectiveComment.Query().
//		Select(retrospectivecomment.FieldTenantID).
//		Scan(ctx, &v)
func (rcq *RetrospectiveCommentQuery) Select(fields ...string) *RetrospectiveCommentSelect {
	rcq.ctx.Fields = append(rcq.ctx.Fields, fields...)
	sbuild := &RetrospectiveCommentSelect{RetrospectiveCommentQuery: rcq}
	sbuild.label = retrospectivecomment.Label
	sbuild.flds, sbuild.scan = &rcq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a RetrospectiveCommentSelect configured with the given aggregations.
func (rcq *RetrospectiveCommentQuery) Aggregate(fns ...AggregateFunc) *RetrospectiveCommentSelect {
	return rcq.Select().Aggregate(fns...)
}

func (rcq *RetrospectiveCommentQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range rcq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, rcq); err != nil {
				return err
			}
		}
	}
	for _, f := range rcq.ctx.Fields {
		if !retrospectivecomment.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if rcq.path != nil {
		prev, err := rcq.path(ctx)
		if err != nil {
			return err
		}
		rcq.sql = prev
	}
	if retrospectivecomment.Policy == nil {
		return errors.New("ent: uninitialized retrospectivecomment.Policy (forgotten import ent/runtime?)")
	}
	if err := retrospectivecomment.Policy.EvalQuery(ctx, rcq); err != nil {
		return err
	}
	return nil
}

func (rcq *RetrospectiveCommentQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*RetrospectiveComment, error) {
	var (
		nodes       = []*RetrospectiveComment{}
		_spec       = rcq.querySpec()
		loadedTypes = [6]bool{
			rcq.withTenant != nil,
			rcq.withRetrospective != nil,
			rcq.withUser != nil,
			rcq.withReview != nil,
			rcq.withParent != nil,
			rcq.withReplies != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*RetrospectiveComment).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &RetrospectiveComment{config: rcq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(rcq.modifiers) > 0 {
		_spec.Modifiers = rcq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, rcq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := rcq.withTenant; query != nil {
		if err := rcq.loadTenant(ctx, query, nodes, nil,
			func(n *RetrospectiveComment, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := rcq.withRetrospective; query != nil {
		if err := rcq.loadRetrospective(ctx, query, nodes, nil,
			func(n *RetrospectiveComment, e *Retrospective) { n.Edges.Retrospective = e }); err != nil {
			return nil, err
		}
	}
	if query := rcq.withUser; query != nil {
		if err := rcq.loadUser(ctx, query, nodes, nil,
			func(n *RetrospectiveComment, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := rcq.withReview; query != nil {
		if err := rcq.loadReview(ctx, query, nodes, nil,
			func(n *RetrospectiveComment, e *RetrospectiveReview) { n.Edges.Review = e }); err != nil {
			return nil, err
		}
	}
	if query := rcq.withParent; query != nil {
		if err := rcq.loadParent(ctx, query, nodes, nil,
			func(n *RetrospectiveComment, e *RetrospectiveComment) { n.Edges.Parent = e }); err != nil {
			return nil, err
		}
	}
	if query := rcq.withReplies; query != nil {
		if err := rcq.loadReplies(ctx, query, nodes,
			func(n *RetrospectiveComment) { n.Edges.Replies = []*RetrospectiveComment{} },
			func(n *RetrospectiveComment, e *RetrospectiveComment) { n.Edges.Replies = append(n.Edges.Replies, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (rcq *RetrospectiveCommentQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*RetrospectiveComment, init func(*RetrospectiveComment), assign func(*RetrospectiveComment, *Tenant)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*RetrospectiveComment)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rcq *RetrospectiveCommentQuery) loadRetrospective(ctx context.Context, query *RetrospectiveQuery, nodes []*RetrospectiveComment, init func(*RetrospectiveComment), assign func(*RetrospectiveComment, *Retrospective)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*RetrospectiveComment)
	for i := range nodes {
		fk := nodes[i].RetrospectiveID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(retrospective.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "retrospective_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rcq *RetrospectiveCommentQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*RetrospectiveComment, init func(*RetrospectiveComment), assign func(*RetrospectiveComment, *User)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*RetrospectiveComment)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rcq *RetrospectiveCommentQuery) loadReview(ctx context.Context, query *RetrospectiveReviewQuery, nodes []*RetrospectiveComment, init func(*RetrospectiveComment), assign func(*RetrospectiveComment, *RetrospectiveReview)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*RetrospectiveComment)
	for i := range nodes {
		fk := nodes[i].RetrospectiveReviewID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(retrospectivereview.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "retrospective_review_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rcq *RetrospectiveCommentQuery) loadParent(ctx context.Context, query *RetrospectiveCommentQuery, nodes []*RetrospectiveComment, init func(*RetrospectiveComment), assign func(*RetrospectiveComment, *RetrospectiveComment)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*RetrospectiveComment)
	for i := range nodes {
		fk := nodes[i].ParentReplyID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(retrospectivecomment.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "parent_reply_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rcq *RetrospectiveCommentQuery) loadReplies(ctx context.Context, query *RetrospectiveCommentQuery, nodes []*RetrospectiveComment, init func(*RetrospectiveComment), assign func(*RetrospectiveComment, *RetrospectiveComment)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*RetrospectiveComment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(retrospectivecomment.FieldParentReplyID)
	}
	query.Where(predicate.RetrospectiveComment(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(retrospectivecomment.RepliesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ParentReplyID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "parent_reply_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (rcq *RetrospectiveCommentQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rcq.querySpec()
	if len(rcq.modifiers) > 0 {
		_spec.Modifiers = rcq.modifiers
	}
	_spec.Node.Columns = rcq.ctx.Fields
	if len(rcq.ctx.Fields) > 0 {
		_spec.Unique = rcq.ctx.Unique != nil && *rcq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, rcq.driver, _spec)
}

func (rcq *RetrospectiveCommentQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(retrospectivecomment.Table, retrospectivecomment.Columns, sqlgraph.NewFieldSpec(retrospectivecomment.FieldID, field.TypeUUID))
	_spec.From = rcq.sql
	if unique := rcq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if rcq.path != nil {
		_spec.Unique = true
	}
	if fields := rcq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, retrospectivecomment.FieldID)
		for i := range fields {
			if fields[i] != retrospectivecomment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if rcq.withTenant != nil {
			_spec.Node.AddColumnOnce(retrospectivecomment.FieldTenantID)
		}
		if rcq.withRetrospective != nil {
			_spec.Node.AddColumnOnce(retrospectivecomment.FieldRetrospectiveID)
		}
		if rcq.withUser != nil {
			_spec.Node.AddColumnOnce(retrospectivecomment.FieldUserID)
		}
		if rcq.withReview != nil {
			_spec.Node.AddColumnOnce(retrospectivecomment.FieldRetrospectiveReviewID)
		}
		if rcq.withParent != nil {
			_spec.Node.AddColumnOnce(retrospectivecomment.FieldParentReplyID)
		}
	}
	if ps := rcq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rcq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rcq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rcq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (rcq *RetrospectiveCommentQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(rcq.driver.Dialect())
	t1 := builder.Table(retrospectivecomment.Table)
	columns := rcq.ctx.Fields
	if len(columns) == 0 {
		columns = retrospectivecomment.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if rcq.sql != nil {
		selector = rcq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if rcq.ctx.Unique != nil && *rcq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range rcq.modifiers {
		m(selector)
	}
	for _, p := range rcq.predicates {
		p(selector)
	}
	for _, p := range rcq.order {
		p(selector)
	}
	if offset := rcq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rcq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (rcq *RetrospectiveCommentQuery) Modify(modifiers ...func(s *sql.Selector)) *RetrospectiveCommentSelect {
	rcq.modifiers = append(rcq.modifiers, modifiers...)
	return rcq.Select()
}

// RetrospectiveCommentGroupBy is the group-by builder for RetrospectiveComment entities.
type RetrospectiveCommentGroupBy struct {
	selector
	build *RetrospectiveCommentQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rcgb *RetrospectiveCommentGroupBy) Aggregate(fns ...AggregateFunc) *RetrospectiveCommentGroupBy {
	rcgb.fns = append(rcgb.fns, fns...)
	return rcgb
}

// Scan applies the selector query and scans the result into the given value.
func (rcgb *RetrospectiveCommentGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rcgb.build.ctx, ent.OpQueryGroupBy)
	if err := rcgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RetrospectiveCommentQuery, *RetrospectiveCommentGroupBy](ctx, rcgb.build, rcgb, rcgb.build.inters, v)
}

func (rcgb *RetrospectiveCommentGroupBy) sqlScan(ctx context.Context, root *RetrospectiveCommentQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(rcgb.fns))
	for _, fn := range rcgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*rcgb.flds)+len(rcgb.fns))
		for _, f := range *rcgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*rcgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rcgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// RetrospectiveCommentSelect is the builder for selecting fields of RetrospectiveComment entities.
type RetrospectiveCommentSelect struct {
	*RetrospectiveCommentQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (rcs *RetrospectiveCommentSelect) Aggregate(fns ...AggregateFunc) *RetrospectiveCommentSelect {
	rcs.fns = append(rcs.fns, fns...)
	return rcs
}

// Scan applies the selector query and scans the result into the given value.
func (rcs *RetrospectiveCommentSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rcs.ctx, ent.OpQuerySelect)
	if err := rcs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RetrospectiveCommentQuery, *RetrospectiveCommentSelect](ctx, rcs.RetrospectiveCommentQuery, rcs, rcs.inters, v)
}

func (rcs *RetrospectiveCommentSelect) sqlScan(ctx context.Context, root *RetrospectiveCommentQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(rcs.fns))
	for _, fn := range rcs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*rcs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rcs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (rcs *RetrospectiveCommentSelect) Modify(modifiers ...func(s *sql.Selector)) *RetrospectiveCommentSelect {
	rcs.modifiers = append(rcs.modifiers, modifiers...)
	return rcs
}
