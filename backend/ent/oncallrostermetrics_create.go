// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/oncallroster"
	"github.com/rezible/rezible/ent/oncallrostermetrics"
	"github.com/rezible/rezible/ent/tenant"
)

// OncallRosterMetricsCreate is the builder for creating a OncallRosterMetrics entity.
type OncallRosterMetricsCreate struct {
	config
	mutation *OncallRosterMetricsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (ormc *OncallRosterMetricsCreate) SetTenantID(i int) *OncallRosterMetricsCreate {
	ormc.mutation.SetTenantID(i)
	return ormc
}

// SetRosterID sets the "roster_id" field.
func (ormc *OncallRosterMetricsCreate) SetRosterID(u uuid.UUID) *OncallRosterMetricsCreate {
	ormc.mutation.SetRosterID(u)
	return ormc
}

// SetID sets the "id" field.
func (ormc *OncallRosterMetricsCreate) SetID(u uuid.UUID) *OncallRosterMetricsCreate {
	ormc.mutation.SetID(u)
	return ormc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ormc *OncallRosterMetricsCreate) SetNillableID(u *uuid.UUID) *OncallRosterMetricsCreate {
	if u != nil {
		ormc.SetID(*u)
	}
	return ormc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (ormc *OncallRosterMetricsCreate) SetTenant(t *Tenant) *OncallRosterMetricsCreate {
	return ormc.SetTenantID(t.ID)
}

// SetRoster sets the "roster" edge to the OncallRoster entity.
func (ormc *OncallRosterMetricsCreate) SetRoster(o *OncallRoster) *OncallRosterMetricsCreate {
	return ormc.SetRosterID(o.ID)
}

// Mutation returns the OncallRosterMetricsMutation object of the builder.
func (ormc *OncallRosterMetricsCreate) Mutation() *OncallRosterMetricsMutation {
	return ormc.mutation
}

// Save creates the OncallRosterMetrics in the database.
func (ormc *OncallRosterMetricsCreate) Save(ctx context.Context) (*OncallRosterMetrics, error) {
	if err := ormc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ormc.sqlSave, ormc.mutation, ormc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ormc *OncallRosterMetricsCreate) SaveX(ctx context.Context) *OncallRosterMetrics {
	v, err := ormc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ormc *OncallRosterMetricsCreate) Exec(ctx context.Context) error {
	_, err := ormc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ormc *OncallRosterMetricsCreate) ExecX(ctx context.Context) {
	if err := ormc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ormc *OncallRosterMetricsCreate) defaults() error {
	if _, ok := ormc.mutation.ID(); !ok {
		if oncallrostermetrics.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized oncallrostermetrics.DefaultID (forgotten import ent/runtime?)")
		}
		v := oncallrostermetrics.DefaultID()
		ormc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ormc *OncallRosterMetricsCreate) check() error {
	if _, ok := ormc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "OncallRosterMetrics.tenant_id"`)}
	}
	if _, ok := ormc.mutation.RosterID(); !ok {
		return &ValidationError{Name: "roster_id", err: errors.New(`ent: missing required field "OncallRosterMetrics.roster_id"`)}
	}
	if len(ormc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "OncallRosterMetrics.tenant"`)}
	}
	if len(ormc.mutation.RosterIDs()) == 0 {
		return &ValidationError{Name: "roster", err: errors.New(`ent: missing required edge "OncallRosterMetrics.roster"`)}
	}
	return nil
}

func (ormc *OncallRosterMetricsCreate) sqlSave(ctx context.Context) (*OncallRosterMetrics, error) {
	if err := ormc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ormc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ormc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ormc.mutation.id = &_node.ID
	ormc.mutation.done = true
	return _node, nil
}

func (ormc *OncallRosterMetricsCreate) createSpec() (*OncallRosterMetrics, *sqlgraph.CreateSpec) {
	var (
		_node = &OncallRosterMetrics{config: ormc.config}
		_spec = sqlgraph.NewCreateSpec(oncallrostermetrics.Table, sqlgraph.NewFieldSpec(oncallrostermetrics.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = ormc.conflict
	if id, ok := ormc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if nodes := ormc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallrostermetrics.TenantTable,
			Columns: []string{oncallrostermetrics.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ormc.mutation.RosterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallrostermetrics.RosterTable,
			Columns: []string{oncallrostermetrics.RosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RosterID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OncallRosterMetrics.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OncallRosterMetricsUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (ormc *OncallRosterMetricsCreate) OnConflict(opts ...sql.ConflictOption) *OncallRosterMetricsUpsertOne {
	ormc.conflict = opts
	return &OncallRosterMetricsUpsertOne{
		create: ormc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OncallRosterMetrics.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ormc *OncallRosterMetricsCreate) OnConflictColumns(columns ...string) *OncallRosterMetricsUpsertOne {
	ormc.conflict = append(ormc.conflict, sql.ConflictColumns(columns...))
	return &OncallRosterMetricsUpsertOne{
		create: ormc,
	}
}

type (
	// OncallRosterMetricsUpsertOne is the builder for "upsert"-ing
	//  one OncallRosterMetrics node.
	OncallRosterMetricsUpsertOne struct {
		create *OncallRosterMetricsCreate
	}

	// OncallRosterMetricsUpsert is the "OnConflict" setter.
	OncallRosterMetricsUpsert struct {
		*sql.UpdateSet
	}
)

// SetRosterID sets the "roster_id" field.
func (u *OncallRosterMetricsUpsert) SetRosterID(v uuid.UUID) *OncallRosterMetricsUpsert {
	u.Set(oncallrostermetrics.FieldRosterID, v)
	return u
}

// UpdateRosterID sets the "roster_id" field to the value that was provided on create.
func (u *OncallRosterMetricsUpsert) UpdateRosterID() *OncallRosterMetricsUpsert {
	u.SetExcluded(oncallrostermetrics.FieldRosterID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OncallRosterMetrics.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oncallrostermetrics.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OncallRosterMetricsUpsertOne) UpdateNewValues() *OncallRosterMetricsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(oncallrostermetrics.FieldID)
		}
		if _, exists := u.create.mutation.TenantID(); exists {
			s.SetIgnore(oncallrostermetrics.FieldTenantID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OncallRosterMetrics.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OncallRosterMetricsUpsertOne) Ignore() *OncallRosterMetricsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OncallRosterMetricsUpsertOne) DoNothing() *OncallRosterMetricsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OncallRosterMetricsCreate.OnConflict
// documentation for more info.
func (u *OncallRosterMetricsUpsertOne) Update(set func(*OncallRosterMetricsUpsert)) *OncallRosterMetricsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OncallRosterMetricsUpsert{UpdateSet: update})
	}))
	return u
}

// SetRosterID sets the "roster_id" field.
func (u *OncallRosterMetricsUpsertOne) SetRosterID(v uuid.UUID) *OncallRosterMetricsUpsertOne {
	return u.Update(func(s *OncallRosterMetricsUpsert) {
		s.SetRosterID(v)
	})
}

// UpdateRosterID sets the "roster_id" field to the value that was provided on create.
func (u *OncallRosterMetricsUpsertOne) UpdateRosterID() *OncallRosterMetricsUpsertOne {
	return u.Update(func(s *OncallRosterMetricsUpsert) {
		s.UpdateRosterID()
	})
}

// Exec executes the query.
func (u *OncallRosterMetricsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OncallRosterMetricsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OncallRosterMetricsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OncallRosterMetricsUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: OncallRosterMetricsUpsertOne.ID is not supported by MySQL driver. Use OncallRosterMetricsUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OncallRosterMetricsUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OncallRosterMetricsCreateBulk is the builder for creating many OncallRosterMetrics entities in bulk.
type OncallRosterMetricsCreateBulk struct {
	config
	err      error
	builders []*OncallRosterMetricsCreate
	conflict []sql.ConflictOption
}

// Save creates the OncallRosterMetrics entities in the database.
func (ormcb *OncallRosterMetricsCreateBulk) Save(ctx context.Context) ([]*OncallRosterMetrics, error) {
	if ormcb.err != nil {
		return nil, ormcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ormcb.builders))
	nodes := make([]*OncallRosterMetrics, len(ormcb.builders))
	mutators := make([]Mutator, len(ormcb.builders))
	for i := range ormcb.builders {
		func(i int, root context.Context) {
			builder := ormcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OncallRosterMetricsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ormcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ormcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ormcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ormcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ormcb *OncallRosterMetricsCreateBulk) SaveX(ctx context.Context) []*OncallRosterMetrics {
	v, err := ormcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ormcb *OncallRosterMetricsCreateBulk) Exec(ctx context.Context) error {
	_, err := ormcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ormcb *OncallRosterMetricsCreateBulk) ExecX(ctx context.Context) {
	if err := ormcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OncallRosterMetrics.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OncallRosterMetricsUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (ormcb *OncallRosterMetricsCreateBulk) OnConflict(opts ...sql.ConflictOption) *OncallRosterMetricsUpsertBulk {
	ormcb.conflict = opts
	return &OncallRosterMetricsUpsertBulk{
		create: ormcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OncallRosterMetrics.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ormcb *OncallRosterMetricsCreateBulk) OnConflictColumns(columns ...string) *OncallRosterMetricsUpsertBulk {
	ormcb.conflict = append(ormcb.conflict, sql.ConflictColumns(columns...))
	return &OncallRosterMetricsUpsertBulk{
		create: ormcb,
	}
}

// OncallRosterMetricsUpsertBulk is the builder for "upsert"-ing
// a bulk of OncallRosterMetrics nodes.
type OncallRosterMetricsUpsertBulk struct {
	create *OncallRosterMetricsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OncallRosterMetrics.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oncallrostermetrics.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OncallRosterMetricsUpsertBulk) UpdateNewValues() *OncallRosterMetricsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(oncallrostermetrics.FieldID)
			}
			if _, exists := b.mutation.TenantID(); exists {
				s.SetIgnore(oncallrostermetrics.FieldTenantID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OncallRosterMetrics.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OncallRosterMetricsUpsertBulk) Ignore() *OncallRosterMetricsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OncallRosterMetricsUpsertBulk) DoNothing() *OncallRosterMetricsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OncallRosterMetricsCreateBulk.OnConflict
// documentation for more info.
func (u *OncallRosterMetricsUpsertBulk) Update(set func(*OncallRosterMetricsUpsert)) *OncallRosterMetricsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OncallRosterMetricsUpsert{UpdateSet: update})
	}))
	return u
}

// SetRosterID sets the "roster_id" field.
func (u *OncallRosterMetricsUpsertBulk) SetRosterID(v uuid.UUID) *OncallRosterMetricsUpsertBulk {
	return u.Update(func(s *OncallRosterMetricsUpsert) {
		s.SetRosterID(v)
	})
}

// UpdateRosterID sets the "roster_id" field to the value that was provided on create.
func (u *OncallRosterMetricsUpsertBulk) UpdateRosterID() *OncallRosterMetricsUpsertBulk {
	return u.Update(func(s *OncallRosterMetricsUpsert) {
		s.UpdateRosterID()
	})
}

// Exec executes the query.
func (u *OncallRosterMetricsUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OncallRosterMetricsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OncallRosterMetricsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OncallRosterMetricsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
