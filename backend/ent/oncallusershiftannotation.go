// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/oncallusershift"
	"github.com/rezible/rezible/ent/oncallusershiftannotation"
)

// OncallUserShiftAnnotation is the model entity for the OncallUserShiftAnnotation schema.
type OncallUserShiftAnnotation struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ShiftID holds the value of the "shift_id" field.
	ShiftID uuid.UUID `json:"shift_id,omitempty"`
	// EventID holds the value of the "event_id" field.
	EventID string `json:"event_id,omitempty"`
	// EventKind holds the value of the "event_kind" field.
	EventKind oncallusershiftannotation.EventKind `json:"event_kind,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// OccurredAt holds the value of the "occurred_at" field.
	OccurredAt time.Time `json:"occurred_at,omitempty"`
	// MinutesOccupied holds the value of the "minutes_occupied" field.
	MinutesOccupied int `json:"minutes_occupied,omitempty"`
	// Notes holds the value of the "notes" field.
	Notes string `json:"notes,omitempty"`
	// Pinned holds the value of the "pinned" field.
	Pinned bool `json:"pinned,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OncallUserShiftAnnotationQuery when eager-loading is set.
	Edges        OncallUserShiftAnnotationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OncallUserShiftAnnotationEdges holds the relations/edges for other nodes in the graph.
type OncallUserShiftAnnotationEdges struct {
	// Shift holds the value of the shift edge.
	Shift *OncallUserShift `json:"shift,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ShiftOrErr returns the Shift value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OncallUserShiftAnnotationEdges) ShiftOrErr() (*OncallUserShift, error) {
	if e.Shift != nil {
		return e.Shift, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: oncallusershift.Label}
	}
	return nil, &NotLoadedError{edge: "shift"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OncallUserShiftAnnotation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case oncallusershiftannotation.FieldPinned:
			values[i] = new(sql.NullBool)
		case oncallusershiftannotation.FieldMinutesOccupied:
			values[i] = new(sql.NullInt64)
		case oncallusershiftannotation.FieldEventID, oncallusershiftannotation.FieldEventKind, oncallusershiftannotation.FieldTitle, oncallusershiftannotation.FieldNotes:
			values[i] = new(sql.NullString)
		case oncallusershiftannotation.FieldOccurredAt:
			values[i] = new(sql.NullTime)
		case oncallusershiftannotation.FieldID, oncallusershiftannotation.FieldShiftID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OncallUserShiftAnnotation fields.
func (ousa *OncallUserShiftAnnotation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case oncallusershiftannotation.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ousa.ID = *value
			}
		case oncallusershiftannotation.FieldShiftID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field shift_id", values[i])
			} else if value != nil {
				ousa.ShiftID = *value
			}
		case oncallusershiftannotation.FieldEventID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_id", values[i])
			} else if value.Valid {
				ousa.EventID = value.String
			}
		case oncallusershiftannotation.FieldEventKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_kind", values[i])
			} else if value.Valid {
				ousa.EventKind = oncallusershiftannotation.EventKind(value.String)
			}
		case oncallusershiftannotation.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				ousa.Title = value.String
			}
		case oncallusershiftannotation.FieldOccurredAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field occurred_at", values[i])
			} else if value.Valid {
				ousa.OccurredAt = value.Time
			}
		case oncallusershiftannotation.FieldMinutesOccupied:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field minutes_occupied", values[i])
			} else if value.Valid {
				ousa.MinutesOccupied = int(value.Int64)
			}
		case oncallusershiftannotation.FieldNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notes", values[i])
			} else if value.Valid {
				ousa.Notes = value.String
			}
		case oncallusershiftannotation.FieldPinned:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field pinned", values[i])
			} else if value.Valid {
				ousa.Pinned = value.Bool
			}
		default:
			ousa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OncallUserShiftAnnotation.
// This includes values selected through modifiers, order, etc.
func (ousa *OncallUserShiftAnnotation) Value(name string) (ent.Value, error) {
	return ousa.selectValues.Get(name)
}

// QueryShift queries the "shift" edge of the OncallUserShiftAnnotation entity.
func (ousa *OncallUserShiftAnnotation) QueryShift() *OncallUserShiftQuery {
	return NewOncallUserShiftAnnotationClient(ousa.config).QueryShift(ousa)
}

// Update returns a builder for updating this OncallUserShiftAnnotation.
// Note that you need to call OncallUserShiftAnnotation.Unwrap() before calling this method if this OncallUserShiftAnnotation
// was returned from a transaction, and the transaction was committed or rolled back.
func (ousa *OncallUserShiftAnnotation) Update() *OncallUserShiftAnnotationUpdateOne {
	return NewOncallUserShiftAnnotationClient(ousa.config).UpdateOne(ousa)
}

// Unwrap unwraps the OncallUserShiftAnnotation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ousa *OncallUserShiftAnnotation) Unwrap() *OncallUserShiftAnnotation {
	_tx, ok := ousa.config.driver.(*txDriver)
	if !ok {
		panic("ent: OncallUserShiftAnnotation is not a transactional entity")
	}
	ousa.config.driver = _tx.drv
	return ousa
}

// String implements the fmt.Stringer.
func (ousa *OncallUserShiftAnnotation) String() string {
	var builder strings.Builder
	builder.WriteString("OncallUserShiftAnnotation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ousa.ID))
	builder.WriteString("shift_id=")
	builder.WriteString(fmt.Sprintf("%v", ousa.ShiftID))
	builder.WriteString(", ")
	builder.WriteString("event_id=")
	builder.WriteString(ousa.EventID)
	builder.WriteString(", ")
	builder.WriteString("event_kind=")
	builder.WriteString(fmt.Sprintf("%v", ousa.EventKind))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(ousa.Title)
	builder.WriteString(", ")
	builder.WriteString("occurred_at=")
	builder.WriteString(ousa.OccurredAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("minutes_occupied=")
	builder.WriteString(fmt.Sprintf("%v", ousa.MinutesOccupied))
	builder.WriteString(", ")
	builder.WriteString("notes=")
	builder.WriteString(ousa.Notes)
	builder.WriteString(", ")
	builder.WriteString("pinned=")
	builder.WriteString(fmt.Sprintf("%v", ousa.Pinned))
	builder.WriteByte(')')
	return builder.String()
}

// OncallUserShiftAnnotations is a parsable slice of OncallUserShiftAnnotation.
type OncallUserShiftAnnotations []*OncallUserShiftAnnotation
