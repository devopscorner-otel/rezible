// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/oncallevent"
)

// OncallEvent is the model entity for the OncallEvent schema.
type OncallEvent struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ProviderID holds the value of the "provider_id" field.
	ProviderID string `json:"provider_id,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp time.Time `json:"timestamp,omitempty"`
	// Kind holds the value of the "kind" field.
	Kind string `json:"kind,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Source holds the value of the "source" field.
	Source string `json:"source,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OncallEventQuery when eager-loading is set.
	Edges        OncallEventEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OncallEventEdges holds the relations/edges for other nodes in the graph.
type OncallEventEdges struct {
	// Annotations holds the value of the annotations edge.
	Annotations []*OncallAnnotation `json:"annotations,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AnnotationsOrErr returns the Annotations value or an error if the edge
// was not loaded in eager-loading.
func (e OncallEventEdges) AnnotationsOrErr() ([]*OncallAnnotation, error) {
	if e.loadedTypes[0] {
		return e.Annotations, nil
	}
	return nil, &NotLoadedError{edge: "annotations"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OncallEvent) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case oncallevent.FieldProviderID, oncallevent.FieldKind, oncallevent.FieldTitle, oncallevent.FieldDescription, oncallevent.FieldSource:
			values[i] = new(sql.NullString)
		case oncallevent.FieldTimestamp:
			values[i] = new(sql.NullTime)
		case oncallevent.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OncallEvent fields.
func (oe *OncallEvent) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case oncallevent.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				oe.ID = *value
			}
		case oncallevent.FieldProviderID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_id", values[i])
			} else if value.Valid {
				oe.ProviderID = value.String
			}
		case oncallevent.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				oe.Timestamp = value.Time
			}
		case oncallevent.FieldKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				oe.Kind = value.String
			}
		case oncallevent.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				oe.Title = value.String
			}
		case oncallevent.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				oe.Description = value.String
			}
		case oncallevent.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				oe.Source = value.String
			}
		default:
			oe.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OncallEvent.
// This includes values selected through modifiers, order, etc.
func (oe *OncallEvent) Value(name string) (ent.Value, error) {
	return oe.selectValues.Get(name)
}

// QueryAnnotations queries the "annotations" edge of the OncallEvent entity.
func (oe *OncallEvent) QueryAnnotations() *OncallAnnotationQuery {
	return NewOncallEventClient(oe.config).QueryAnnotations(oe)
}

// Update returns a builder for updating this OncallEvent.
// Note that you need to call OncallEvent.Unwrap() before calling this method if this OncallEvent
// was returned from a transaction, and the transaction was committed or rolled back.
func (oe *OncallEvent) Update() *OncallEventUpdateOne {
	return NewOncallEventClient(oe.config).UpdateOne(oe)
}

// Unwrap unwraps the OncallEvent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (oe *OncallEvent) Unwrap() *OncallEvent {
	_tx, ok := oe.config.driver.(*txDriver)
	if !ok {
		panic("ent: OncallEvent is not a transactional entity")
	}
	oe.config.driver = _tx.drv
	return oe
}

// String implements the fmt.Stringer.
func (oe *OncallEvent) String() string {
	var builder strings.Builder
	builder.WriteString("OncallEvent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", oe.ID))
	builder.WriteString("provider_id=")
	builder.WriteString(oe.ProviderID)
	builder.WriteString(", ")
	builder.WriteString("timestamp=")
	builder.WriteString(oe.Timestamp.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("kind=")
	builder.WriteString(oe.Kind)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(oe.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(oe.Description)
	builder.WriteString(", ")
	builder.WriteString("source=")
	builder.WriteString(oe.Source)
	builder.WriteByte(')')
	return builder.String()
}

// OncallEvents is a parsable slice of OncallEvent.
type OncallEvents []*OncallEvent
