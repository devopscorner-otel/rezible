// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/oncallannotation"
	"github.com/rezible/rezible/ent/oncallusershift"
	"github.com/rezible/rezible/ent/oncallusershifthandover"
	"github.com/rezible/rezible/ent/predicate"
)

// OncallUserShiftHandoverUpdate is the builder for updating OncallUserShiftHandover entities.
type OncallUserShiftHandoverUpdate struct {
	config
	hooks     []Hook
	mutation  *OncallUserShiftHandoverMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OncallUserShiftHandoverUpdate builder.
func (oushu *OncallUserShiftHandoverUpdate) Where(ps ...predicate.OncallUserShiftHandover) *OncallUserShiftHandoverUpdate {
	oushu.mutation.Where(ps...)
	return oushu
}

// SetShiftID sets the "shift_id" field.
func (oushu *OncallUserShiftHandoverUpdate) SetShiftID(u uuid.UUID) *OncallUserShiftHandoverUpdate {
	oushu.mutation.SetShiftID(u)
	return oushu
}

// SetNillableShiftID sets the "shift_id" field if the given value is not nil.
func (oushu *OncallUserShiftHandoverUpdate) SetNillableShiftID(u *uuid.UUID) *OncallUserShiftHandoverUpdate {
	if u != nil {
		oushu.SetShiftID(*u)
	}
	return oushu
}

// SetCreatedAt sets the "created_at" field.
func (oushu *OncallUserShiftHandoverUpdate) SetCreatedAt(t time.Time) *OncallUserShiftHandoverUpdate {
	oushu.mutation.SetCreatedAt(t)
	return oushu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oushu *OncallUserShiftHandoverUpdate) SetNillableCreatedAt(t *time.Time) *OncallUserShiftHandoverUpdate {
	if t != nil {
		oushu.SetCreatedAt(*t)
	}
	return oushu
}

// SetReminderSent sets the "reminder_sent" field.
func (oushu *OncallUserShiftHandoverUpdate) SetReminderSent(b bool) *OncallUserShiftHandoverUpdate {
	oushu.mutation.SetReminderSent(b)
	return oushu
}

// SetNillableReminderSent sets the "reminder_sent" field if the given value is not nil.
func (oushu *OncallUserShiftHandoverUpdate) SetNillableReminderSent(b *bool) *OncallUserShiftHandoverUpdate {
	if b != nil {
		oushu.SetReminderSent(*b)
	}
	return oushu
}

// SetUpdatedAt sets the "updated_at" field.
func (oushu *OncallUserShiftHandoverUpdate) SetUpdatedAt(t time.Time) *OncallUserShiftHandoverUpdate {
	oushu.mutation.SetUpdatedAt(t)
	return oushu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oushu *OncallUserShiftHandoverUpdate) SetNillableUpdatedAt(t *time.Time) *OncallUserShiftHandoverUpdate {
	if t != nil {
		oushu.SetUpdatedAt(*t)
	}
	return oushu
}

// SetSentAt sets the "sent_at" field.
func (oushu *OncallUserShiftHandoverUpdate) SetSentAt(t time.Time) *OncallUserShiftHandoverUpdate {
	oushu.mutation.SetSentAt(t)
	return oushu
}

// SetNillableSentAt sets the "sent_at" field if the given value is not nil.
func (oushu *OncallUserShiftHandoverUpdate) SetNillableSentAt(t *time.Time) *OncallUserShiftHandoverUpdate {
	if t != nil {
		oushu.SetSentAt(*t)
	}
	return oushu
}

// ClearSentAt clears the value of the "sent_at" field.
func (oushu *OncallUserShiftHandoverUpdate) ClearSentAt() *OncallUserShiftHandoverUpdate {
	oushu.mutation.ClearSentAt()
	return oushu
}

// SetContents sets the "contents" field.
func (oushu *OncallUserShiftHandoverUpdate) SetContents(b []byte) *OncallUserShiftHandoverUpdate {
	oushu.mutation.SetContents(b)
	return oushu
}

// SetShift sets the "shift" edge to the OncallUserShift entity.
func (oushu *OncallUserShiftHandoverUpdate) SetShift(o *OncallUserShift) *OncallUserShiftHandoverUpdate {
	return oushu.SetShiftID(o.ID)
}

// AddPinnedAnnotationIDs adds the "pinned_annotations" edge to the OncallAnnotation entity by IDs.
func (oushu *OncallUserShiftHandoverUpdate) AddPinnedAnnotationIDs(ids ...uuid.UUID) *OncallUserShiftHandoverUpdate {
	oushu.mutation.AddPinnedAnnotationIDs(ids...)
	return oushu
}

// AddPinnedAnnotations adds the "pinned_annotations" edges to the OncallAnnotation entity.
func (oushu *OncallUserShiftHandoverUpdate) AddPinnedAnnotations(o ...*OncallAnnotation) *OncallUserShiftHandoverUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oushu.AddPinnedAnnotationIDs(ids...)
}

// Mutation returns the OncallUserShiftHandoverMutation object of the builder.
func (oushu *OncallUserShiftHandoverUpdate) Mutation() *OncallUserShiftHandoverMutation {
	return oushu.mutation
}

// ClearShift clears the "shift" edge to the OncallUserShift entity.
func (oushu *OncallUserShiftHandoverUpdate) ClearShift() *OncallUserShiftHandoverUpdate {
	oushu.mutation.ClearShift()
	return oushu
}

// ClearPinnedAnnotations clears all "pinned_annotations" edges to the OncallAnnotation entity.
func (oushu *OncallUserShiftHandoverUpdate) ClearPinnedAnnotations() *OncallUserShiftHandoverUpdate {
	oushu.mutation.ClearPinnedAnnotations()
	return oushu
}

// RemovePinnedAnnotationIDs removes the "pinned_annotations" edge to OncallAnnotation entities by IDs.
func (oushu *OncallUserShiftHandoverUpdate) RemovePinnedAnnotationIDs(ids ...uuid.UUID) *OncallUserShiftHandoverUpdate {
	oushu.mutation.RemovePinnedAnnotationIDs(ids...)
	return oushu
}

// RemovePinnedAnnotations removes "pinned_annotations" edges to OncallAnnotation entities.
func (oushu *OncallUserShiftHandoverUpdate) RemovePinnedAnnotations(o ...*OncallAnnotation) *OncallUserShiftHandoverUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oushu.RemovePinnedAnnotationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oushu *OncallUserShiftHandoverUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, oushu.sqlSave, oushu.mutation, oushu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oushu *OncallUserShiftHandoverUpdate) SaveX(ctx context.Context) int {
	affected, err := oushu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oushu *OncallUserShiftHandoverUpdate) Exec(ctx context.Context) error {
	_, err := oushu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oushu *OncallUserShiftHandoverUpdate) ExecX(ctx context.Context) {
	if err := oushu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oushu *OncallUserShiftHandoverUpdate) check() error {
	if oushu.mutation.ShiftCleared() && len(oushu.mutation.ShiftIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallUserShiftHandover.shift"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (oushu *OncallUserShiftHandoverUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OncallUserShiftHandoverUpdate {
	oushu.modifiers = append(oushu.modifiers, modifiers...)
	return oushu
}

func (oushu *OncallUserShiftHandoverUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := oushu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(oncallusershifthandover.Table, oncallusershifthandover.Columns, sqlgraph.NewFieldSpec(oncallusershifthandover.FieldID, field.TypeUUID))
	if ps := oushu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oushu.mutation.CreatedAt(); ok {
		_spec.SetField(oncallusershifthandover.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := oushu.mutation.ReminderSent(); ok {
		_spec.SetField(oncallusershifthandover.FieldReminderSent, field.TypeBool, value)
	}
	if value, ok := oushu.mutation.UpdatedAt(); ok {
		_spec.SetField(oncallusershifthandover.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := oushu.mutation.SentAt(); ok {
		_spec.SetField(oncallusershifthandover.FieldSentAt, field.TypeTime, value)
	}
	if oushu.mutation.SentAtCleared() {
		_spec.ClearField(oncallusershifthandover.FieldSentAt, field.TypeTime)
	}
	if value, ok := oushu.mutation.Contents(); ok {
		_spec.SetField(oncallusershifthandover.FieldContents, field.TypeBytes, value)
	}
	if oushu.mutation.ShiftCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   oncallusershifthandover.ShiftTable,
			Columns: []string{oncallusershifthandover.ShiftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallusershift.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oushu.mutation.ShiftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   oncallusershifthandover.ShiftTable,
			Columns: []string{oncallusershifthandover.ShiftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallusershift.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oushu.mutation.PinnedAnnotationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oncallusershifthandover.PinnedAnnotationsTable,
			Columns: oncallusershifthandover.PinnedAnnotationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallannotation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oushu.mutation.RemovedPinnedAnnotationsIDs(); len(nodes) > 0 && !oushu.mutation.PinnedAnnotationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oncallusershifthandover.PinnedAnnotationsTable,
			Columns: oncallusershifthandover.PinnedAnnotationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallannotation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oushu.mutation.PinnedAnnotationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oncallusershifthandover.PinnedAnnotationsTable,
			Columns: oncallusershifthandover.PinnedAnnotationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallannotation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(oushu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, oushu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oncallusershifthandover.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	oushu.mutation.done = true
	return n, nil
}

// OncallUserShiftHandoverUpdateOne is the builder for updating a single OncallUserShiftHandover entity.
type OncallUserShiftHandoverUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OncallUserShiftHandoverMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetShiftID sets the "shift_id" field.
func (oushuo *OncallUserShiftHandoverUpdateOne) SetShiftID(u uuid.UUID) *OncallUserShiftHandoverUpdateOne {
	oushuo.mutation.SetShiftID(u)
	return oushuo
}

// SetNillableShiftID sets the "shift_id" field if the given value is not nil.
func (oushuo *OncallUserShiftHandoverUpdateOne) SetNillableShiftID(u *uuid.UUID) *OncallUserShiftHandoverUpdateOne {
	if u != nil {
		oushuo.SetShiftID(*u)
	}
	return oushuo
}

// SetCreatedAt sets the "created_at" field.
func (oushuo *OncallUserShiftHandoverUpdateOne) SetCreatedAt(t time.Time) *OncallUserShiftHandoverUpdateOne {
	oushuo.mutation.SetCreatedAt(t)
	return oushuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oushuo *OncallUserShiftHandoverUpdateOne) SetNillableCreatedAt(t *time.Time) *OncallUserShiftHandoverUpdateOne {
	if t != nil {
		oushuo.SetCreatedAt(*t)
	}
	return oushuo
}

// SetReminderSent sets the "reminder_sent" field.
func (oushuo *OncallUserShiftHandoverUpdateOne) SetReminderSent(b bool) *OncallUserShiftHandoverUpdateOne {
	oushuo.mutation.SetReminderSent(b)
	return oushuo
}

// SetNillableReminderSent sets the "reminder_sent" field if the given value is not nil.
func (oushuo *OncallUserShiftHandoverUpdateOne) SetNillableReminderSent(b *bool) *OncallUserShiftHandoverUpdateOne {
	if b != nil {
		oushuo.SetReminderSent(*b)
	}
	return oushuo
}

// SetUpdatedAt sets the "updated_at" field.
func (oushuo *OncallUserShiftHandoverUpdateOne) SetUpdatedAt(t time.Time) *OncallUserShiftHandoverUpdateOne {
	oushuo.mutation.SetUpdatedAt(t)
	return oushuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oushuo *OncallUserShiftHandoverUpdateOne) SetNillableUpdatedAt(t *time.Time) *OncallUserShiftHandoverUpdateOne {
	if t != nil {
		oushuo.SetUpdatedAt(*t)
	}
	return oushuo
}

// SetSentAt sets the "sent_at" field.
func (oushuo *OncallUserShiftHandoverUpdateOne) SetSentAt(t time.Time) *OncallUserShiftHandoverUpdateOne {
	oushuo.mutation.SetSentAt(t)
	return oushuo
}

// SetNillableSentAt sets the "sent_at" field if the given value is not nil.
func (oushuo *OncallUserShiftHandoverUpdateOne) SetNillableSentAt(t *time.Time) *OncallUserShiftHandoverUpdateOne {
	if t != nil {
		oushuo.SetSentAt(*t)
	}
	return oushuo
}

// ClearSentAt clears the value of the "sent_at" field.
func (oushuo *OncallUserShiftHandoverUpdateOne) ClearSentAt() *OncallUserShiftHandoverUpdateOne {
	oushuo.mutation.ClearSentAt()
	return oushuo
}

// SetContents sets the "contents" field.
func (oushuo *OncallUserShiftHandoverUpdateOne) SetContents(b []byte) *OncallUserShiftHandoverUpdateOne {
	oushuo.mutation.SetContents(b)
	return oushuo
}

// SetShift sets the "shift" edge to the OncallUserShift entity.
func (oushuo *OncallUserShiftHandoverUpdateOne) SetShift(o *OncallUserShift) *OncallUserShiftHandoverUpdateOne {
	return oushuo.SetShiftID(o.ID)
}

// AddPinnedAnnotationIDs adds the "pinned_annotations" edge to the OncallAnnotation entity by IDs.
func (oushuo *OncallUserShiftHandoverUpdateOne) AddPinnedAnnotationIDs(ids ...uuid.UUID) *OncallUserShiftHandoverUpdateOne {
	oushuo.mutation.AddPinnedAnnotationIDs(ids...)
	return oushuo
}

// AddPinnedAnnotations adds the "pinned_annotations" edges to the OncallAnnotation entity.
func (oushuo *OncallUserShiftHandoverUpdateOne) AddPinnedAnnotations(o ...*OncallAnnotation) *OncallUserShiftHandoverUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oushuo.AddPinnedAnnotationIDs(ids...)
}

// Mutation returns the OncallUserShiftHandoverMutation object of the builder.
func (oushuo *OncallUserShiftHandoverUpdateOne) Mutation() *OncallUserShiftHandoverMutation {
	return oushuo.mutation
}

// ClearShift clears the "shift" edge to the OncallUserShift entity.
func (oushuo *OncallUserShiftHandoverUpdateOne) ClearShift() *OncallUserShiftHandoverUpdateOne {
	oushuo.mutation.ClearShift()
	return oushuo
}

// ClearPinnedAnnotations clears all "pinned_annotations" edges to the OncallAnnotation entity.
func (oushuo *OncallUserShiftHandoverUpdateOne) ClearPinnedAnnotations() *OncallUserShiftHandoverUpdateOne {
	oushuo.mutation.ClearPinnedAnnotations()
	return oushuo
}

// RemovePinnedAnnotationIDs removes the "pinned_annotations" edge to OncallAnnotation entities by IDs.
func (oushuo *OncallUserShiftHandoverUpdateOne) RemovePinnedAnnotationIDs(ids ...uuid.UUID) *OncallUserShiftHandoverUpdateOne {
	oushuo.mutation.RemovePinnedAnnotationIDs(ids...)
	return oushuo
}

// RemovePinnedAnnotations removes "pinned_annotations" edges to OncallAnnotation entities.
func (oushuo *OncallUserShiftHandoverUpdateOne) RemovePinnedAnnotations(o ...*OncallAnnotation) *OncallUserShiftHandoverUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oushuo.RemovePinnedAnnotationIDs(ids...)
}

// Where appends a list predicates to the OncallUserShiftHandoverUpdate builder.
func (oushuo *OncallUserShiftHandoverUpdateOne) Where(ps ...predicate.OncallUserShiftHandover) *OncallUserShiftHandoverUpdateOne {
	oushuo.mutation.Where(ps...)
	return oushuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oushuo *OncallUserShiftHandoverUpdateOne) Select(field string, fields ...string) *OncallUserShiftHandoverUpdateOne {
	oushuo.fields = append([]string{field}, fields...)
	return oushuo
}

// Save executes the query and returns the updated OncallUserShiftHandover entity.
func (oushuo *OncallUserShiftHandoverUpdateOne) Save(ctx context.Context) (*OncallUserShiftHandover, error) {
	return withHooks(ctx, oushuo.sqlSave, oushuo.mutation, oushuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oushuo *OncallUserShiftHandoverUpdateOne) SaveX(ctx context.Context) *OncallUserShiftHandover {
	node, err := oushuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oushuo *OncallUserShiftHandoverUpdateOne) Exec(ctx context.Context) error {
	_, err := oushuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oushuo *OncallUserShiftHandoverUpdateOne) ExecX(ctx context.Context) {
	if err := oushuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oushuo *OncallUserShiftHandoverUpdateOne) check() error {
	if oushuo.mutation.ShiftCleared() && len(oushuo.mutation.ShiftIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallUserShiftHandover.shift"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (oushuo *OncallUserShiftHandoverUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OncallUserShiftHandoverUpdateOne {
	oushuo.modifiers = append(oushuo.modifiers, modifiers...)
	return oushuo
}

func (oushuo *OncallUserShiftHandoverUpdateOne) sqlSave(ctx context.Context) (_node *OncallUserShiftHandover, err error) {
	if err := oushuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(oncallusershifthandover.Table, oncallusershifthandover.Columns, sqlgraph.NewFieldSpec(oncallusershifthandover.FieldID, field.TypeUUID))
	id, ok := oushuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OncallUserShiftHandover.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oushuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oncallusershifthandover.FieldID)
		for _, f := range fields {
			if !oncallusershifthandover.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oncallusershifthandover.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oushuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oushuo.mutation.CreatedAt(); ok {
		_spec.SetField(oncallusershifthandover.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := oushuo.mutation.ReminderSent(); ok {
		_spec.SetField(oncallusershifthandover.FieldReminderSent, field.TypeBool, value)
	}
	if value, ok := oushuo.mutation.UpdatedAt(); ok {
		_spec.SetField(oncallusershifthandover.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := oushuo.mutation.SentAt(); ok {
		_spec.SetField(oncallusershifthandover.FieldSentAt, field.TypeTime, value)
	}
	if oushuo.mutation.SentAtCleared() {
		_spec.ClearField(oncallusershifthandover.FieldSentAt, field.TypeTime)
	}
	if value, ok := oushuo.mutation.Contents(); ok {
		_spec.SetField(oncallusershifthandover.FieldContents, field.TypeBytes, value)
	}
	if oushuo.mutation.ShiftCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   oncallusershifthandover.ShiftTable,
			Columns: []string{oncallusershifthandover.ShiftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallusershift.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oushuo.mutation.ShiftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   oncallusershifthandover.ShiftTable,
			Columns: []string{oncallusershifthandover.ShiftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallusershift.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oushuo.mutation.PinnedAnnotationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oncallusershifthandover.PinnedAnnotationsTable,
			Columns: oncallusershifthandover.PinnedAnnotationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallannotation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oushuo.mutation.RemovedPinnedAnnotationsIDs(); len(nodes) > 0 && !oushuo.mutation.PinnedAnnotationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oncallusershifthandover.PinnedAnnotationsTable,
			Columns: oncallusershifthandover.PinnedAnnotationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallannotation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oushuo.mutation.PinnedAnnotationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oncallusershifthandover.PinnedAnnotationsTable,
			Columns: oncallusershifthandover.PinnedAnnotationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallannotation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(oushuo.modifiers...)
	_node = &OncallUserShiftHandover{config: oushuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oushuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oncallusershifthandover.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oushuo.mutation.done = true
	return _node, nil
}
