// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/twohundreds/rezible/ent/retrospective"
	"github.com/twohundreds/rezible/ent/retrospectivediscussion"
	"github.com/twohundreds/rezible/ent/retrospectivediscussionreply"
	"github.com/twohundreds/rezible/ent/retrospectivereview"
)

// RetrospectiveDiscussionCreate is the builder for creating a RetrospectiveDiscussion entity.
type RetrospectiveDiscussionCreate struct {
	config
	mutation *RetrospectiveDiscussionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetRetrospectiveID sets the "retrospective_id" field.
func (rdc *RetrospectiveDiscussionCreate) SetRetrospectiveID(u uuid.UUID) *RetrospectiveDiscussionCreate {
	rdc.mutation.SetRetrospectiveID(u)
	return rdc
}

// SetContent sets the "content" field.
func (rdc *RetrospectiveDiscussionCreate) SetContent(b []byte) *RetrospectiveDiscussionCreate {
	rdc.mutation.SetContent(b)
	return rdc
}

// SetID sets the "id" field.
func (rdc *RetrospectiveDiscussionCreate) SetID(u uuid.UUID) *RetrospectiveDiscussionCreate {
	rdc.mutation.SetID(u)
	return rdc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rdc *RetrospectiveDiscussionCreate) SetNillableID(u *uuid.UUID) *RetrospectiveDiscussionCreate {
	if u != nil {
		rdc.SetID(*u)
	}
	return rdc
}

// SetRetrospective sets the "retrospective" edge to the Retrospective entity.
func (rdc *RetrospectiveDiscussionCreate) SetRetrospective(r *Retrospective) *RetrospectiveDiscussionCreate {
	return rdc.SetRetrospectiveID(r.ID)
}

// AddReplyIDs adds the "replies" edge to the RetrospectiveDiscussionReply entity by IDs.
func (rdc *RetrospectiveDiscussionCreate) AddReplyIDs(ids ...uuid.UUID) *RetrospectiveDiscussionCreate {
	rdc.mutation.AddReplyIDs(ids...)
	return rdc
}

// AddReplies adds the "replies" edges to the RetrospectiveDiscussionReply entity.
func (rdc *RetrospectiveDiscussionCreate) AddReplies(r ...*RetrospectiveDiscussionReply) *RetrospectiveDiscussionCreate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdc.AddReplyIDs(ids...)
}

// AddReviewIDs adds the "review" edge to the RetrospectiveReview entity by IDs.
func (rdc *RetrospectiveDiscussionCreate) AddReviewIDs(ids ...uuid.UUID) *RetrospectiveDiscussionCreate {
	rdc.mutation.AddReviewIDs(ids...)
	return rdc
}

// AddReview adds the "review" edges to the RetrospectiveReview entity.
func (rdc *RetrospectiveDiscussionCreate) AddReview(r ...*RetrospectiveReview) *RetrospectiveDiscussionCreate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdc.AddReviewIDs(ids...)
}

// Mutation returns the RetrospectiveDiscussionMutation object of the builder.
func (rdc *RetrospectiveDiscussionCreate) Mutation() *RetrospectiveDiscussionMutation {
	return rdc.mutation
}

// Save creates the RetrospectiveDiscussion in the database.
func (rdc *RetrospectiveDiscussionCreate) Save(ctx context.Context) (*RetrospectiveDiscussion, error) {
	rdc.defaults()
	return withHooks(ctx, rdc.sqlSave, rdc.mutation, rdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rdc *RetrospectiveDiscussionCreate) SaveX(ctx context.Context) *RetrospectiveDiscussion {
	v, err := rdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rdc *RetrospectiveDiscussionCreate) Exec(ctx context.Context) error {
	_, err := rdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rdc *RetrospectiveDiscussionCreate) ExecX(ctx context.Context) {
	if err := rdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rdc *RetrospectiveDiscussionCreate) defaults() {
	if _, ok := rdc.mutation.ID(); !ok {
		v := retrospectivediscussion.DefaultID()
		rdc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rdc *RetrospectiveDiscussionCreate) check() error {
	if _, ok := rdc.mutation.RetrospectiveID(); !ok {
		return &ValidationError{Name: "retrospective_id", err: errors.New(`ent: missing required field "RetrospectiveDiscussion.retrospective_id"`)}
	}
	if _, ok := rdc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "RetrospectiveDiscussion.content"`)}
	}
	if len(rdc.mutation.RetrospectiveIDs()) == 0 {
		return &ValidationError{Name: "retrospective", err: errors.New(`ent: missing required edge "RetrospectiveDiscussion.retrospective"`)}
	}
	return nil
}

func (rdc *RetrospectiveDiscussionCreate) sqlSave(ctx context.Context) (*RetrospectiveDiscussion, error) {
	if err := rdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rdc.mutation.id = &_node.ID
	rdc.mutation.done = true
	return _node, nil
}

func (rdc *RetrospectiveDiscussionCreate) createSpec() (*RetrospectiveDiscussion, *sqlgraph.CreateSpec) {
	var (
		_node = &RetrospectiveDiscussion{config: rdc.config}
		_spec = sqlgraph.NewCreateSpec(retrospectivediscussion.Table, sqlgraph.NewFieldSpec(retrospectivediscussion.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = rdc.conflict
	if id, ok := rdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rdc.mutation.Content(); ok {
		_spec.SetField(retrospectivediscussion.FieldContent, field.TypeBytes, value)
		_node.Content = value
	}
	if nodes := rdc.mutation.RetrospectiveIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospectivediscussion.RetrospectiveTable,
			Columns: []string{retrospectivediscussion.RetrospectiveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospective.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RetrospectiveID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rdc.mutation.RepliesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   retrospectivediscussion.RepliesTable,
			Columns: []string{retrospectivediscussion.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivediscussionreply.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rdc.mutation.ReviewIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   retrospectivediscussion.ReviewTable,
			Columns: []string{retrospectivediscussion.ReviewColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivereview.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RetrospectiveDiscussion.Create().
//		SetRetrospectiveID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RetrospectiveDiscussionUpsert) {
//			SetRetrospectiveID(v+v).
//		}).
//		Exec(ctx)
func (rdc *RetrospectiveDiscussionCreate) OnConflict(opts ...sql.ConflictOption) *RetrospectiveDiscussionUpsertOne {
	rdc.conflict = opts
	return &RetrospectiveDiscussionUpsertOne{
		create: rdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RetrospectiveDiscussion.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rdc *RetrospectiveDiscussionCreate) OnConflictColumns(columns ...string) *RetrospectiveDiscussionUpsertOne {
	rdc.conflict = append(rdc.conflict, sql.ConflictColumns(columns...))
	return &RetrospectiveDiscussionUpsertOne{
		create: rdc,
	}
}

type (
	// RetrospectiveDiscussionUpsertOne is the builder for "upsert"-ing
	//  one RetrospectiveDiscussion node.
	RetrospectiveDiscussionUpsertOne struct {
		create *RetrospectiveDiscussionCreate
	}

	// RetrospectiveDiscussionUpsert is the "OnConflict" setter.
	RetrospectiveDiscussionUpsert struct {
		*sql.UpdateSet
	}
)

// SetRetrospectiveID sets the "retrospective_id" field.
func (u *RetrospectiveDiscussionUpsert) SetRetrospectiveID(v uuid.UUID) *RetrospectiveDiscussionUpsert {
	u.Set(retrospectivediscussion.FieldRetrospectiveID, v)
	return u
}

// UpdateRetrospectiveID sets the "retrospective_id" field to the value that was provided on create.
func (u *RetrospectiveDiscussionUpsert) UpdateRetrospectiveID() *RetrospectiveDiscussionUpsert {
	u.SetExcluded(retrospectivediscussion.FieldRetrospectiveID)
	return u
}

// SetContent sets the "content" field.
func (u *RetrospectiveDiscussionUpsert) SetContent(v []byte) *RetrospectiveDiscussionUpsert {
	u.Set(retrospectivediscussion.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *RetrospectiveDiscussionUpsert) UpdateContent() *RetrospectiveDiscussionUpsert {
	u.SetExcluded(retrospectivediscussion.FieldContent)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.RetrospectiveDiscussion.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(retrospectivediscussion.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RetrospectiveDiscussionUpsertOne) UpdateNewValues() *RetrospectiveDiscussionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(retrospectivediscussion.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RetrospectiveDiscussion.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RetrospectiveDiscussionUpsertOne) Ignore() *RetrospectiveDiscussionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RetrospectiveDiscussionUpsertOne) DoNothing() *RetrospectiveDiscussionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RetrospectiveDiscussionCreate.OnConflict
// documentation for more info.
func (u *RetrospectiveDiscussionUpsertOne) Update(set func(*RetrospectiveDiscussionUpsert)) *RetrospectiveDiscussionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RetrospectiveDiscussionUpsert{UpdateSet: update})
	}))
	return u
}

// SetRetrospectiveID sets the "retrospective_id" field.
func (u *RetrospectiveDiscussionUpsertOne) SetRetrospectiveID(v uuid.UUID) *RetrospectiveDiscussionUpsertOne {
	return u.Update(func(s *RetrospectiveDiscussionUpsert) {
		s.SetRetrospectiveID(v)
	})
}

// UpdateRetrospectiveID sets the "retrospective_id" field to the value that was provided on create.
func (u *RetrospectiveDiscussionUpsertOne) UpdateRetrospectiveID() *RetrospectiveDiscussionUpsertOne {
	return u.Update(func(s *RetrospectiveDiscussionUpsert) {
		s.UpdateRetrospectiveID()
	})
}

// SetContent sets the "content" field.
func (u *RetrospectiveDiscussionUpsertOne) SetContent(v []byte) *RetrospectiveDiscussionUpsertOne {
	return u.Update(func(s *RetrospectiveDiscussionUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *RetrospectiveDiscussionUpsertOne) UpdateContent() *RetrospectiveDiscussionUpsertOne {
	return u.Update(func(s *RetrospectiveDiscussionUpsert) {
		s.UpdateContent()
	})
}

// Exec executes the query.
func (u *RetrospectiveDiscussionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RetrospectiveDiscussionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RetrospectiveDiscussionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RetrospectiveDiscussionUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: RetrospectiveDiscussionUpsertOne.ID is not supported by MySQL driver. Use RetrospectiveDiscussionUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RetrospectiveDiscussionUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RetrospectiveDiscussionCreateBulk is the builder for creating many RetrospectiveDiscussion entities in bulk.
type RetrospectiveDiscussionCreateBulk struct {
	config
	err      error
	builders []*RetrospectiveDiscussionCreate
	conflict []sql.ConflictOption
}

// Save creates the RetrospectiveDiscussion entities in the database.
func (rdcb *RetrospectiveDiscussionCreateBulk) Save(ctx context.Context) ([]*RetrospectiveDiscussion, error) {
	if rdcb.err != nil {
		return nil, rdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rdcb.builders))
	nodes := make([]*RetrospectiveDiscussion, len(rdcb.builders))
	mutators := make([]Mutator, len(rdcb.builders))
	for i := range rdcb.builders {
		func(i int, root context.Context) {
			builder := rdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RetrospectiveDiscussionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rdcb *RetrospectiveDiscussionCreateBulk) SaveX(ctx context.Context) []*RetrospectiveDiscussion {
	v, err := rdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rdcb *RetrospectiveDiscussionCreateBulk) Exec(ctx context.Context) error {
	_, err := rdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rdcb *RetrospectiveDiscussionCreateBulk) ExecX(ctx context.Context) {
	if err := rdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RetrospectiveDiscussion.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RetrospectiveDiscussionUpsert) {
//			SetRetrospectiveID(v+v).
//		}).
//		Exec(ctx)
func (rdcb *RetrospectiveDiscussionCreateBulk) OnConflict(opts ...sql.ConflictOption) *RetrospectiveDiscussionUpsertBulk {
	rdcb.conflict = opts
	return &RetrospectiveDiscussionUpsertBulk{
		create: rdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RetrospectiveDiscussion.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rdcb *RetrospectiveDiscussionCreateBulk) OnConflictColumns(columns ...string) *RetrospectiveDiscussionUpsertBulk {
	rdcb.conflict = append(rdcb.conflict, sql.ConflictColumns(columns...))
	return &RetrospectiveDiscussionUpsertBulk{
		create: rdcb,
	}
}

// RetrospectiveDiscussionUpsertBulk is the builder for "upsert"-ing
// a bulk of RetrospectiveDiscussion nodes.
type RetrospectiveDiscussionUpsertBulk struct {
	create *RetrospectiveDiscussionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.RetrospectiveDiscussion.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(retrospectivediscussion.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RetrospectiveDiscussionUpsertBulk) UpdateNewValues() *RetrospectiveDiscussionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(retrospectivediscussion.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RetrospectiveDiscussion.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RetrospectiveDiscussionUpsertBulk) Ignore() *RetrospectiveDiscussionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RetrospectiveDiscussionUpsertBulk) DoNothing() *RetrospectiveDiscussionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RetrospectiveDiscussionCreateBulk.OnConflict
// documentation for more info.
func (u *RetrospectiveDiscussionUpsertBulk) Update(set func(*RetrospectiveDiscussionUpsert)) *RetrospectiveDiscussionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RetrospectiveDiscussionUpsert{UpdateSet: update})
	}))
	return u
}

// SetRetrospectiveID sets the "retrospective_id" field.
func (u *RetrospectiveDiscussionUpsertBulk) SetRetrospectiveID(v uuid.UUID) *RetrospectiveDiscussionUpsertBulk {
	return u.Update(func(s *RetrospectiveDiscussionUpsert) {
		s.SetRetrospectiveID(v)
	})
}

// UpdateRetrospectiveID sets the "retrospective_id" field to the value that was provided on create.
func (u *RetrospectiveDiscussionUpsertBulk) UpdateRetrospectiveID() *RetrospectiveDiscussionUpsertBulk {
	return u.Update(func(s *RetrospectiveDiscussionUpsert) {
		s.UpdateRetrospectiveID()
	})
}

// SetContent sets the "content" field.
func (u *RetrospectiveDiscussionUpsertBulk) SetContent(v []byte) *RetrospectiveDiscussionUpsertBulk {
	return u.Update(func(s *RetrospectiveDiscussionUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *RetrospectiveDiscussionUpsertBulk) UpdateContent() *RetrospectiveDiscussionUpsertBulk {
	return u.Update(func(s *RetrospectiveDiscussionUpsert) {
		s.UpdateContent()
	})
}

// Exec executes the query.
func (u *RetrospectiveDiscussionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RetrospectiveDiscussionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RetrospectiveDiscussionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RetrospectiveDiscussionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
