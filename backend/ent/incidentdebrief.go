// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/incident"
	"github.com/rezible/rezible/ent/incidentdebrief"
	"github.com/rezible/rezible/ent/user"
)

// IncidentDebrief is the model entity for the IncidentDebrief schema.
type IncidentDebrief struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// IncidentID holds the value of the "incident_id" field.
	IncidentID uuid.UUID `json:"incident_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// Required holds the value of the "required" field.
	Required bool `json:"required,omitempty"`
	// Started holds the value of the "started" field.
	Started bool `json:"started,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IncidentDebriefQuery when eager-loading is set.
	Edges        IncidentDebriefEdges `json:"edges"`
	selectValues sql.SelectValues
}

// IncidentDebriefEdges holds the relations/edges for other nodes in the graph.
type IncidentDebriefEdges struct {
	// Incident holds the value of the incident edge.
	Incident *Incident `json:"incident,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Messages holds the value of the messages edge.
	Messages []*IncidentDebriefMessage `json:"messages,omitempty"`
	// Suggestions holds the value of the suggestions edge.
	Suggestions []*IncidentDebriefSuggestion `json:"suggestions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// IncidentOrErr returns the Incident value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IncidentDebriefEdges) IncidentOrErr() (*Incident, error) {
	if e.Incident != nil {
		return e.Incident, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: incident.Label}
	}
	return nil, &NotLoadedError{edge: "incident"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IncidentDebriefEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// MessagesOrErr returns the Messages value or an error if the edge
// was not loaded in eager-loading.
func (e IncidentDebriefEdges) MessagesOrErr() ([]*IncidentDebriefMessage, error) {
	if e.loadedTypes[2] {
		return e.Messages, nil
	}
	return nil, &NotLoadedError{edge: "messages"}
}

// SuggestionsOrErr returns the Suggestions value or an error if the edge
// was not loaded in eager-loading.
func (e IncidentDebriefEdges) SuggestionsOrErr() ([]*IncidentDebriefSuggestion, error) {
	if e.loadedTypes[3] {
		return e.Suggestions, nil
	}
	return nil, &NotLoadedError{edge: "suggestions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IncidentDebrief) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case incidentdebrief.FieldRequired, incidentdebrief.FieldStarted:
			values[i] = new(sql.NullBool)
		case incidentdebrief.FieldID, incidentdebrief.FieldIncidentID, incidentdebrief.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IncidentDebrief fields.
func (id *IncidentDebrief) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case incidentdebrief.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				id.ID = *value
			}
		case incidentdebrief.FieldIncidentID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field incident_id", values[i])
			} else if value != nil {
				id.IncidentID = *value
			}
		case incidentdebrief.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				id.UserID = *value
			}
		case incidentdebrief.FieldRequired:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field required", values[i])
			} else if value.Valid {
				id.Required = value.Bool
			}
		case incidentdebrief.FieldStarted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field started", values[i])
			} else if value.Valid {
				id.Started = value.Bool
			}
		default:
			id.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the IncidentDebrief.
// This includes values selected through modifiers, order, etc.
func (id *IncidentDebrief) Value(name string) (ent.Value, error) {
	return id.selectValues.Get(name)
}

// QueryIncident queries the "incident" edge of the IncidentDebrief entity.
func (id *IncidentDebrief) QueryIncident() *IncidentQuery {
	return NewIncidentDebriefClient(id.config).QueryIncident(id)
}

// QueryUser queries the "user" edge of the IncidentDebrief entity.
func (id *IncidentDebrief) QueryUser() *UserQuery {
	return NewIncidentDebriefClient(id.config).QueryUser(id)
}

// QueryMessages queries the "messages" edge of the IncidentDebrief entity.
func (id *IncidentDebrief) QueryMessages() *IncidentDebriefMessageQuery {
	return NewIncidentDebriefClient(id.config).QueryMessages(id)
}

// QuerySuggestions queries the "suggestions" edge of the IncidentDebrief entity.
func (id *IncidentDebrief) QuerySuggestions() *IncidentDebriefSuggestionQuery {
	return NewIncidentDebriefClient(id.config).QuerySuggestions(id)
}

// Update returns a builder for updating this IncidentDebrief.
// Note that you need to call IncidentDebrief.Unwrap() before calling this method if this IncidentDebrief
// was returned from a transaction, and the transaction was committed or rolled back.
func (id *IncidentDebrief) Update() *IncidentDebriefUpdateOne {
	return NewIncidentDebriefClient(id.config).UpdateOne(id)
}

// Unwrap unwraps the IncidentDebrief entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (id *IncidentDebrief) Unwrap() *IncidentDebrief {
	_tx, ok := id.config.driver.(*txDriver)
	if !ok {
		panic("ent: IncidentDebrief is not a transactional entity")
	}
	id.config.driver = _tx.drv
	return id
}

// String implements the fmt.Stringer.
func (id *IncidentDebrief) String() string {
	var builder strings.Builder
	builder.WriteString("IncidentDebrief(")
	builder.WriteString(fmt.Sprintf("id=%v, ", id.ID))
	builder.WriteString("incident_id=")
	builder.WriteString(fmt.Sprintf("%v", id.IncidentID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", id.UserID))
	builder.WriteString(", ")
	builder.WriteString("required=")
	builder.WriteString(fmt.Sprintf("%v", id.Required))
	builder.WriteString(", ")
	builder.WriteString("started=")
	builder.WriteString(fmt.Sprintf("%v", id.Started))
	builder.WriteByte(')')
	return builder.String()
}

// IncidentDebriefs is a parsable slice of IncidentDebrief.
type IncidentDebriefs []*IncidentDebrief
