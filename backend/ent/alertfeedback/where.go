// Code generated by ent, DO NOT EDIT.

package alertfeedback

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.AlertFeedback {
	return predicate.AlertFeedback(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.AlertFeedback {
	return predicate.AlertFeedback(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.AlertFeedback {
	return predicate.AlertFeedback(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.AlertFeedback {
	return predicate.AlertFeedback(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.AlertFeedback {
	return predicate.AlertFeedback(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.AlertFeedback {
	return predicate.AlertFeedback(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.AlertFeedback {
	return predicate.AlertFeedback(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.AlertFeedback {
	return predicate.AlertFeedback(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.AlertFeedback {
	return predicate.AlertFeedback(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v int) predicate.AlertFeedback {
	return predicate.AlertFeedback(sql.FieldEQ(FieldTenantID, v))
}

// AlertID applies equality check predicate on the "alert_id" field. It's identical to AlertIDEQ.
func AlertID(v uuid.UUID) predicate.AlertFeedback {
	return predicate.AlertFeedback(sql.FieldEQ(FieldAlertID, v))
}

// AnnotationID applies equality check predicate on the "annotation_id" field. It's identical to AnnotationIDEQ.
func AnnotationID(v uuid.UUID) predicate.AlertFeedback {
	return predicate.AlertFeedback(sql.FieldEQ(FieldAnnotationID, v))
}

// Actionable applies equality check predicate on the "actionable" field. It's identical to ActionableEQ.
func Actionable(v bool) predicate.AlertFeedback {
	return predicate.AlertFeedback(sql.FieldEQ(FieldActionable, v))
}

// DocumentationAvailable applies equality check predicate on the "documentation_available" field. It's identical to DocumentationAvailableEQ.
func DocumentationAvailable(v bool) predicate.AlertFeedback {
	return predicate.AlertFeedback(sql.FieldEQ(FieldDocumentationAvailable, v))
}

// DocumentationNeedsUpdate applies equality check predicate on the "documentation_needs_update" field. It's identical to DocumentationNeedsUpdateEQ.
func DocumentationNeedsUpdate(v bool) predicate.AlertFeedback {
	return predicate.AlertFeedback(sql.FieldEQ(FieldDocumentationNeedsUpdate, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v int) predicate.AlertFeedback {
	return predicate.AlertFeedback(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v int) predicate.AlertFeedback {
	return predicate.AlertFeedback(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...int) predicate.AlertFeedback {
	return predicate.AlertFeedback(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...int) predicate.AlertFeedback {
	return predicate.AlertFeedback(sql.FieldNotIn(FieldTenantID, vs...))
}

// AlertIDEQ applies the EQ predicate on the "alert_id" field.
func AlertIDEQ(v uuid.UUID) predicate.AlertFeedback {
	return predicate.AlertFeedback(sql.FieldEQ(FieldAlertID, v))
}

// AlertIDNEQ applies the NEQ predicate on the "alert_id" field.
func AlertIDNEQ(v uuid.UUID) predicate.AlertFeedback {
	return predicate.AlertFeedback(sql.FieldNEQ(FieldAlertID, v))
}

// AlertIDIn applies the In predicate on the "alert_id" field.
func AlertIDIn(vs ...uuid.UUID) predicate.AlertFeedback {
	return predicate.AlertFeedback(sql.FieldIn(FieldAlertID, vs...))
}

// AlertIDNotIn applies the NotIn predicate on the "alert_id" field.
func AlertIDNotIn(vs ...uuid.UUID) predicate.AlertFeedback {
	return predicate.AlertFeedback(sql.FieldNotIn(FieldAlertID, vs...))
}

// AnnotationIDEQ applies the EQ predicate on the "annotation_id" field.
func AnnotationIDEQ(v uuid.UUID) predicate.AlertFeedback {
	return predicate.AlertFeedback(sql.FieldEQ(FieldAnnotationID, v))
}

// AnnotationIDNEQ applies the NEQ predicate on the "annotation_id" field.
func AnnotationIDNEQ(v uuid.UUID) predicate.AlertFeedback {
	return predicate.AlertFeedback(sql.FieldNEQ(FieldAnnotationID, v))
}

// AnnotationIDIn applies the In predicate on the "annotation_id" field.
func AnnotationIDIn(vs ...uuid.UUID) predicate.AlertFeedback {
	return predicate.AlertFeedback(sql.FieldIn(FieldAnnotationID, vs...))
}

// AnnotationIDNotIn applies the NotIn predicate on the "annotation_id" field.
func AnnotationIDNotIn(vs ...uuid.UUID) predicate.AlertFeedback {
	return predicate.AlertFeedback(sql.FieldNotIn(FieldAnnotationID, vs...))
}

// ActionableEQ applies the EQ predicate on the "actionable" field.
func ActionableEQ(v bool) predicate.AlertFeedback {
	return predicate.AlertFeedback(sql.FieldEQ(FieldActionable, v))
}

// ActionableNEQ applies the NEQ predicate on the "actionable" field.
func ActionableNEQ(v bool) predicate.AlertFeedback {
	return predicate.AlertFeedback(sql.FieldNEQ(FieldActionable, v))
}

// AccurateEQ applies the EQ predicate on the "accurate" field.
func AccurateEQ(v Accurate) predicate.AlertFeedback {
	return predicate.AlertFeedback(sql.FieldEQ(FieldAccurate, v))
}

// AccurateNEQ applies the NEQ predicate on the "accurate" field.
func AccurateNEQ(v Accurate) predicate.AlertFeedback {
	return predicate.AlertFeedback(sql.FieldNEQ(FieldAccurate, v))
}

// AccurateIn applies the In predicate on the "accurate" field.
func AccurateIn(vs ...Accurate) predicate.AlertFeedback {
	return predicate.AlertFeedback(sql.FieldIn(FieldAccurate, vs...))
}

// AccurateNotIn applies the NotIn predicate on the "accurate" field.
func AccurateNotIn(vs ...Accurate) predicate.AlertFeedback {
	return predicate.AlertFeedback(sql.FieldNotIn(FieldAccurate, vs...))
}

// DocumentationAvailableEQ applies the EQ predicate on the "documentation_available" field.
func DocumentationAvailableEQ(v bool) predicate.AlertFeedback {
	return predicate.AlertFeedback(sql.FieldEQ(FieldDocumentationAvailable, v))
}

// DocumentationAvailableNEQ applies the NEQ predicate on the "documentation_available" field.
func DocumentationAvailableNEQ(v bool) predicate.AlertFeedback {
	return predicate.AlertFeedback(sql.FieldNEQ(FieldDocumentationAvailable, v))
}

// DocumentationNeedsUpdateEQ applies the EQ predicate on the "documentation_needs_update" field.
func DocumentationNeedsUpdateEQ(v bool) predicate.AlertFeedback {
	return predicate.AlertFeedback(sql.FieldEQ(FieldDocumentationNeedsUpdate, v))
}

// DocumentationNeedsUpdateNEQ applies the NEQ predicate on the "documentation_needs_update" field.
func DocumentationNeedsUpdateNEQ(v bool) predicate.AlertFeedback {
	return predicate.AlertFeedback(sql.FieldNEQ(FieldDocumentationNeedsUpdate, v))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.AlertFeedback {
	return predicate.AlertFeedback(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.AlertFeedback {
	return predicate.AlertFeedback(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAlert applies the HasEdge predicate on the "alert" edge.
func HasAlert() predicate.AlertFeedback {
	return predicate.AlertFeedback(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AlertTable, AlertColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAlertWith applies the HasEdge predicate on the "alert" edge with a given conditions (other predicates).
func HasAlertWith(preds ...predicate.Alert) predicate.AlertFeedback {
	return predicate.AlertFeedback(func(s *sql.Selector) {
		step := newAlertStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAnnotation applies the HasEdge predicate on the "annotation" edge.
func HasAnnotation() predicate.AlertFeedback {
	return predicate.AlertFeedback(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, AnnotationTable, AnnotationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAnnotationWith applies the HasEdge predicate on the "annotation" edge with a given conditions (other predicates).
func HasAnnotationWith(preds ...predicate.OncallAnnotation) predicate.AlertFeedback {
	return predicate.AlertFeedback(func(s *sql.Selector) {
		step := newAnnotationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AlertFeedback) predicate.AlertFeedback {
	return predicate.AlertFeedback(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AlertFeedback) predicate.AlertFeedback {
	return predicate.AlertFeedback(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AlertFeedback) predicate.AlertFeedback {
	return predicate.AlertFeedback(sql.NotPredicates(p))
}
