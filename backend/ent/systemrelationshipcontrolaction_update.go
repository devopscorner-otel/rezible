// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/systemcomponentcontrol"
	"github.com/rezible/rezible/ent/systemrelationship"
	"github.com/rezible/rezible/ent/systemrelationshipcontrolaction"
)

// SystemRelationshipControlActionUpdate is the builder for updating SystemRelationshipControlAction entities.
type SystemRelationshipControlActionUpdate struct {
	config
	hooks     []Hook
	mutation  *SystemRelationshipControlActionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SystemRelationshipControlActionUpdate builder.
func (srcau *SystemRelationshipControlActionUpdate) Where(ps ...predicate.SystemRelationshipControlAction) *SystemRelationshipControlActionUpdate {
	srcau.mutation.Where(ps...)
	return srcau
}

// SetRelationshipID sets the "relationship_id" field.
func (srcau *SystemRelationshipControlActionUpdate) SetRelationshipID(u uuid.UUID) *SystemRelationshipControlActionUpdate {
	srcau.mutation.SetRelationshipID(u)
	return srcau
}

// SetNillableRelationshipID sets the "relationship_id" field if the given value is not nil.
func (srcau *SystemRelationshipControlActionUpdate) SetNillableRelationshipID(u *uuid.UUID) *SystemRelationshipControlActionUpdate {
	if u != nil {
		srcau.SetRelationshipID(*u)
	}
	return srcau
}

// SetControlID sets the "control_id" field.
func (srcau *SystemRelationshipControlActionUpdate) SetControlID(u uuid.UUID) *SystemRelationshipControlActionUpdate {
	srcau.mutation.SetControlID(u)
	return srcau
}

// SetNillableControlID sets the "control_id" field if the given value is not nil.
func (srcau *SystemRelationshipControlActionUpdate) SetNillableControlID(u *uuid.UUID) *SystemRelationshipControlActionUpdate {
	if u != nil {
		srcau.SetControlID(*u)
	}
	return srcau
}

// SetType sets the "type" field.
func (srcau *SystemRelationshipControlActionUpdate) SetType(s string) *SystemRelationshipControlActionUpdate {
	srcau.mutation.SetType(s)
	return srcau
}

// SetNillableType sets the "type" field if the given value is not nil.
func (srcau *SystemRelationshipControlActionUpdate) SetNillableType(s *string) *SystemRelationshipControlActionUpdate {
	if s != nil {
		srcau.SetType(*s)
	}
	return srcau
}

// SetDescription sets the "description" field.
func (srcau *SystemRelationshipControlActionUpdate) SetDescription(s string) *SystemRelationshipControlActionUpdate {
	srcau.mutation.SetDescription(s)
	return srcau
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (srcau *SystemRelationshipControlActionUpdate) SetNillableDescription(s *string) *SystemRelationshipControlActionUpdate {
	if s != nil {
		srcau.SetDescription(*s)
	}
	return srcau
}

// ClearDescription clears the value of the "description" field.
func (srcau *SystemRelationshipControlActionUpdate) ClearDescription() *SystemRelationshipControlActionUpdate {
	srcau.mutation.ClearDescription()
	return srcau
}

// SetCreatedAt sets the "created_at" field.
func (srcau *SystemRelationshipControlActionUpdate) SetCreatedAt(t time.Time) *SystemRelationshipControlActionUpdate {
	srcau.mutation.SetCreatedAt(t)
	return srcau
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (srcau *SystemRelationshipControlActionUpdate) SetNillableCreatedAt(t *time.Time) *SystemRelationshipControlActionUpdate {
	if t != nil {
		srcau.SetCreatedAt(*t)
	}
	return srcau
}

// SetRelationship sets the "relationship" edge to the SystemRelationship entity.
func (srcau *SystemRelationshipControlActionUpdate) SetRelationship(s *SystemRelationship) *SystemRelationshipControlActionUpdate {
	return srcau.SetRelationshipID(s.ID)
}

// SetControl sets the "control" edge to the SystemComponentControl entity.
func (srcau *SystemRelationshipControlActionUpdate) SetControl(s *SystemComponentControl) *SystemRelationshipControlActionUpdate {
	return srcau.SetControlID(s.ID)
}

// Mutation returns the SystemRelationshipControlActionMutation object of the builder.
func (srcau *SystemRelationshipControlActionUpdate) Mutation() *SystemRelationshipControlActionMutation {
	return srcau.mutation
}

// ClearRelationship clears the "relationship" edge to the SystemRelationship entity.
func (srcau *SystemRelationshipControlActionUpdate) ClearRelationship() *SystemRelationshipControlActionUpdate {
	srcau.mutation.ClearRelationship()
	return srcau
}

// ClearControl clears the "control" edge to the SystemComponentControl entity.
func (srcau *SystemRelationshipControlActionUpdate) ClearControl() *SystemRelationshipControlActionUpdate {
	srcau.mutation.ClearControl()
	return srcau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (srcau *SystemRelationshipControlActionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, srcau.sqlSave, srcau.mutation, srcau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (srcau *SystemRelationshipControlActionUpdate) SaveX(ctx context.Context) int {
	affected, err := srcau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (srcau *SystemRelationshipControlActionUpdate) Exec(ctx context.Context) error {
	_, err := srcau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (srcau *SystemRelationshipControlActionUpdate) ExecX(ctx context.Context) {
	if err := srcau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (srcau *SystemRelationshipControlActionUpdate) check() error {
	if v, ok := srcau.mutation.GetType(); ok {
		if err := systemrelationshipcontrolaction.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "SystemRelationshipControlAction.type": %w`, err)}
		}
	}
	if srcau.mutation.RelationshipCleared() && len(srcau.mutation.RelationshipIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SystemRelationshipControlAction.relationship"`)
	}
	if srcau.mutation.ControlCleared() && len(srcau.mutation.ControlIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SystemRelationshipControlAction.control"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (srcau *SystemRelationshipControlActionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SystemRelationshipControlActionUpdate {
	srcau.modifiers = append(srcau.modifiers, modifiers...)
	return srcau
}

func (srcau *SystemRelationshipControlActionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := srcau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(systemrelationshipcontrolaction.Table, systemrelationshipcontrolaction.Columns, sqlgraph.NewFieldSpec(systemrelationshipcontrolaction.FieldID, field.TypeUUID))
	if ps := srcau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := srcau.mutation.GetType(); ok {
		_spec.SetField(systemrelationshipcontrolaction.FieldType, field.TypeString, value)
	}
	if value, ok := srcau.mutation.Description(); ok {
		_spec.SetField(systemrelationshipcontrolaction.FieldDescription, field.TypeString, value)
	}
	if srcau.mutation.DescriptionCleared() {
		_spec.ClearField(systemrelationshipcontrolaction.FieldDescription, field.TypeString)
	}
	if value, ok := srcau.mutation.CreatedAt(); ok {
		_spec.SetField(systemrelationshipcontrolaction.FieldCreatedAt, field.TypeTime, value)
	}
	if srcau.mutation.RelationshipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemrelationshipcontrolaction.RelationshipTable,
			Columns: []string{systemrelationshipcontrolaction.RelationshipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemrelationship.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := srcau.mutation.RelationshipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemrelationshipcontrolaction.RelationshipTable,
			Columns: []string{systemrelationshipcontrolaction.RelationshipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemrelationship.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if srcau.mutation.ControlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemrelationshipcontrolaction.ControlTable,
			Columns: []string{systemrelationshipcontrolaction.ControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentcontrol.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := srcau.mutation.ControlIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemrelationshipcontrolaction.ControlTable,
			Columns: []string{systemrelationshipcontrolaction.ControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentcontrol.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(srcau.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, srcau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systemrelationshipcontrolaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	srcau.mutation.done = true
	return n, nil
}

// SystemRelationshipControlActionUpdateOne is the builder for updating a single SystemRelationshipControlAction entity.
type SystemRelationshipControlActionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SystemRelationshipControlActionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetRelationshipID sets the "relationship_id" field.
func (srcauo *SystemRelationshipControlActionUpdateOne) SetRelationshipID(u uuid.UUID) *SystemRelationshipControlActionUpdateOne {
	srcauo.mutation.SetRelationshipID(u)
	return srcauo
}

// SetNillableRelationshipID sets the "relationship_id" field if the given value is not nil.
func (srcauo *SystemRelationshipControlActionUpdateOne) SetNillableRelationshipID(u *uuid.UUID) *SystemRelationshipControlActionUpdateOne {
	if u != nil {
		srcauo.SetRelationshipID(*u)
	}
	return srcauo
}

// SetControlID sets the "control_id" field.
func (srcauo *SystemRelationshipControlActionUpdateOne) SetControlID(u uuid.UUID) *SystemRelationshipControlActionUpdateOne {
	srcauo.mutation.SetControlID(u)
	return srcauo
}

// SetNillableControlID sets the "control_id" field if the given value is not nil.
func (srcauo *SystemRelationshipControlActionUpdateOne) SetNillableControlID(u *uuid.UUID) *SystemRelationshipControlActionUpdateOne {
	if u != nil {
		srcauo.SetControlID(*u)
	}
	return srcauo
}

// SetType sets the "type" field.
func (srcauo *SystemRelationshipControlActionUpdateOne) SetType(s string) *SystemRelationshipControlActionUpdateOne {
	srcauo.mutation.SetType(s)
	return srcauo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (srcauo *SystemRelationshipControlActionUpdateOne) SetNillableType(s *string) *SystemRelationshipControlActionUpdateOne {
	if s != nil {
		srcauo.SetType(*s)
	}
	return srcauo
}

// SetDescription sets the "description" field.
func (srcauo *SystemRelationshipControlActionUpdateOne) SetDescription(s string) *SystemRelationshipControlActionUpdateOne {
	srcauo.mutation.SetDescription(s)
	return srcauo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (srcauo *SystemRelationshipControlActionUpdateOne) SetNillableDescription(s *string) *SystemRelationshipControlActionUpdateOne {
	if s != nil {
		srcauo.SetDescription(*s)
	}
	return srcauo
}

// ClearDescription clears the value of the "description" field.
func (srcauo *SystemRelationshipControlActionUpdateOne) ClearDescription() *SystemRelationshipControlActionUpdateOne {
	srcauo.mutation.ClearDescription()
	return srcauo
}

// SetCreatedAt sets the "created_at" field.
func (srcauo *SystemRelationshipControlActionUpdateOne) SetCreatedAt(t time.Time) *SystemRelationshipControlActionUpdateOne {
	srcauo.mutation.SetCreatedAt(t)
	return srcauo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (srcauo *SystemRelationshipControlActionUpdateOne) SetNillableCreatedAt(t *time.Time) *SystemRelationshipControlActionUpdateOne {
	if t != nil {
		srcauo.SetCreatedAt(*t)
	}
	return srcauo
}

// SetRelationship sets the "relationship" edge to the SystemRelationship entity.
func (srcauo *SystemRelationshipControlActionUpdateOne) SetRelationship(s *SystemRelationship) *SystemRelationshipControlActionUpdateOne {
	return srcauo.SetRelationshipID(s.ID)
}

// SetControl sets the "control" edge to the SystemComponentControl entity.
func (srcauo *SystemRelationshipControlActionUpdateOne) SetControl(s *SystemComponentControl) *SystemRelationshipControlActionUpdateOne {
	return srcauo.SetControlID(s.ID)
}

// Mutation returns the SystemRelationshipControlActionMutation object of the builder.
func (srcauo *SystemRelationshipControlActionUpdateOne) Mutation() *SystemRelationshipControlActionMutation {
	return srcauo.mutation
}

// ClearRelationship clears the "relationship" edge to the SystemRelationship entity.
func (srcauo *SystemRelationshipControlActionUpdateOne) ClearRelationship() *SystemRelationshipControlActionUpdateOne {
	srcauo.mutation.ClearRelationship()
	return srcauo
}

// ClearControl clears the "control" edge to the SystemComponentControl entity.
func (srcauo *SystemRelationshipControlActionUpdateOne) ClearControl() *SystemRelationshipControlActionUpdateOne {
	srcauo.mutation.ClearControl()
	return srcauo
}

// Where appends a list predicates to the SystemRelationshipControlActionUpdate builder.
func (srcauo *SystemRelationshipControlActionUpdateOne) Where(ps ...predicate.SystemRelationshipControlAction) *SystemRelationshipControlActionUpdateOne {
	srcauo.mutation.Where(ps...)
	return srcauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (srcauo *SystemRelationshipControlActionUpdateOne) Select(field string, fields ...string) *SystemRelationshipControlActionUpdateOne {
	srcauo.fields = append([]string{field}, fields...)
	return srcauo
}

// Save executes the query and returns the updated SystemRelationshipControlAction entity.
func (srcauo *SystemRelationshipControlActionUpdateOne) Save(ctx context.Context) (*SystemRelationshipControlAction, error) {
	return withHooks(ctx, srcauo.sqlSave, srcauo.mutation, srcauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (srcauo *SystemRelationshipControlActionUpdateOne) SaveX(ctx context.Context) *SystemRelationshipControlAction {
	node, err := srcauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (srcauo *SystemRelationshipControlActionUpdateOne) Exec(ctx context.Context) error {
	_, err := srcauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (srcauo *SystemRelationshipControlActionUpdateOne) ExecX(ctx context.Context) {
	if err := srcauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (srcauo *SystemRelationshipControlActionUpdateOne) check() error {
	if v, ok := srcauo.mutation.GetType(); ok {
		if err := systemrelationshipcontrolaction.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "SystemRelationshipControlAction.type": %w`, err)}
		}
	}
	if srcauo.mutation.RelationshipCleared() && len(srcauo.mutation.RelationshipIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SystemRelationshipControlAction.relationship"`)
	}
	if srcauo.mutation.ControlCleared() && len(srcauo.mutation.ControlIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SystemRelationshipControlAction.control"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (srcauo *SystemRelationshipControlActionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SystemRelationshipControlActionUpdateOne {
	srcauo.modifiers = append(srcauo.modifiers, modifiers...)
	return srcauo
}

func (srcauo *SystemRelationshipControlActionUpdateOne) sqlSave(ctx context.Context) (_node *SystemRelationshipControlAction, err error) {
	if err := srcauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(systemrelationshipcontrolaction.Table, systemrelationshipcontrolaction.Columns, sqlgraph.NewFieldSpec(systemrelationshipcontrolaction.FieldID, field.TypeUUID))
	id, ok := srcauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SystemRelationshipControlAction.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := srcauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, systemrelationshipcontrolaction.FieldID)
		for _, f := range fields {
			if !systemrelationshipcontrolaction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != systemrelationshipcontrolaction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := srcauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := srcauo.mutation.GetType(); ok {
		_spec.SetField(systemrelationshipcontrolaction.FieldType, field.TypeString, value)
	}
	if value, ok := srcauo.mutation.Description(); ok {
		_spec.SetField(systemrelationshipcontrolaction.FieldDescription, field.TypeString, value)
	}
	if srcauo.mutation.DescriptionCleared() {
		_spec.ClearField(systemrelationshipcontrolaction.FieldDescription, field.TypeString)
	}
	if value, ok := srcauo.mutation.CreatedAt(); ok {
		_spec.SetField(systemrelationshipcontrolaction.FieldCreatedAt, field.TypeTime, value)
	}
	if srcauo.mutation.RelationshipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemrelationshipcontrolaction.RelationshipTable,
			Columns: []string{systemrelationshipcontrolaction.RelationshipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemrelationship.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := srcauo.mutation.RelationshipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemrelationshipcontrolaction.RelationshipTable,
			Columns: []string{systemrelationshipcontrolaction.RelationshipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemrelationship.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if srcauo.mutation.ControlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemrelationshipcontrolaction.ControlTable,
			Columns: []string{systemrelationshipcontrolaction.ControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentcontrol.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := srcauo.mutation.ControlIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemrelationshipcontrolaction.ControlTable,
			Columns: []string{systemrelationshipcontrolaction.ControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentcontrol.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(srcauo.modifiers...)
	_node = &SystemRelationshipControlAction{config: srcauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, srcauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systemrelationshipcontrolaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	srcauo.mutation.done = true
	return _node, nil
}
