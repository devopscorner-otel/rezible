// Code generated by ent, DO NOT EDIT.

package providerconfig

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the providerconfig type in the database.
	Label = "provider_config"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldProviderType holds the string denoting the provider_type field in the database.
	FieldProviderType = "provider_type"
	// FieldProviderName holds the string denoting the provider_name field in the database.
	FieldProviderName = "provider_name"
	// FieldProviderConfig holds the string denoting the provider_config field in the database.
	FieldProviderConfig = "provider_config"
	// FieldEnabled holds the string denoting the enabled field in the database.
	FieldEnabled = "enabled"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the providerconfig in the database.
	Table = "provider_configs"
)

// Columns holds all SQL columns for providerconfig fields.
var Columns = []string{
	FieldID,
	FieldProviderType,
	FieldProviderName,
	FieldProviderConfig,
	FieldEnabled,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/rezible/rezible/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultEnabled holds the default value on creation for the "enabled" field.
	DefaultEnabled bool
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// ProviderType defines the type for the "provider_type" enum field.
type ProviderType string

// ProviderType values.
const (
	ProviderTypeAuthSession      ProviderType = "auth_session"
	ProviderTypeUsers            ProviderType = "users"
	ProviderTypeTeams            ProviderType = "teams"
	ProviderTypeChat             ProviderType = "chat"
	ProviderTypeIncidents        ProviderType = "incidents"
	ProviderTypeOncall           ProviderType = "oncall"
	ProviderTypeAlerts           ProviderType = "alerts"
	ProviderTypeAi               ProviderType = "ai"
	ProviderTypeSystemComponents ProviderType = "system_components"
	ProviderTypeTickets          ProviderType = "tickets"
	ProviderTypePlaybooks        ProviderType = "playbooks"
)

func (pt ProviderType) String() string {
	return string(pt)
}

// ProviderTypeValidator is a validator for the "provider_type" field enum values. It is called by the builders before save.
func ProviderTypeValidator(pt ProviderType) error {
	switch pt {
	case ProviderTypeAuthSession, ProviderTypeUsers, ProviderTypeTeams, ProviderTypeChat, ProviderTypeIncidents, ProviderTypeOncall, ProviderTypeAlerts, ProviderTypeAi, ProviderTypeSystemComponents, ProviderTypeTickets, ProviderTypePlaybooks:
		return nil
	default:
		return fmt.Errorf("providerconfig: invalid enum value for provider_type field: %q", pt)
	}
}

// OrderOption defines the ordering options for the ProviderConfig queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByProviderType orders the results by the provider_type field.
func ByProviderType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProviderType, opts...).ToFunc()
}

// ByProviderName orders the results by the provider_name field.
func ByProviderName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProviderName, opts...).ToFunc()
}

// ByEnabled orders the results by the enabled field.
func ByEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnabled, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
