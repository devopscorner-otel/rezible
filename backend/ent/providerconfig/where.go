// Code generated by ent, DO NOT EDIT.

package providerconfig

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/twohundreds/rezible/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldLTE(FieldID, id))
}

// ProviderName applies equality check predicate on the "provider_name" field. It's identical to ProviderNameEQ.
func ProviderName(v string) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldEQ(FieldProviderName, v))
}

// ProviderConfig applies equality check predicate on the "provider_config" field. It's identical to ProviderConfigEQ.
func ProviderConfig(v []byte) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldEQ(FieldProviderConfig, v))
}

// Enabled applies equality check predicate on the "enabled" field. It's identical to EnabledEQ.
func Enabled(v bool) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldEQ(FieldEnabled, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldEQ(FieldUpdatedAt, v))
}

// ProviderTypeEQ applies the EQ predicate on the "provider_type" field.
func ProviderTypeEQ(v ProviderType) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldEQ(FieldProviderType, v))
}

// ProviderTypeNEQ applies the NEQ predicate on the "provider_type" field.
func ProviderTypeNEQ(v ProviderType) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldNEQ(FieldProviderType, v))
}

// ProviderTypeIn applies the In predicate on the "provider_type" field.
func ProviderTypeIn(vs ...ProviderType) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldIn(FieldProviderType, vs...))
}

// ProviderTypeNotIn applies the NotIn predicate on the "provider_type" field.
func ProviderTypeNotIn(vs ...ProviderType) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldNotIn(FieldProviderType, vs...))
}

// ProviderNameEQ applies the EQ predicate on the "provider_name" field.
func ProviderNameEQ(v string) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldEQ(FieldProviderName, v))
}

// ProviderNameNEQ applies the NEQ predicate on the "provider_name" field.
func ProviderNameNEQ(v string) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldNEQ(FieldProviderName, v))
}

// ProviderNameIn applies the In predicate on the "provider_name" field.
func ProviderNameIn(vs ...string) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldIn(FieldProviderName, vs...))
}

// ProviderNameNotIn applies the NotIn predicate on the "provider_name" field.
func ProviderNameNotIn(vs ...string) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldNotIn(FieldProviderName, vs...))
}

// ProviderNameGT applies the GT predicate on the "provider_name" field.
func ProviderNameGT(v string) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldGT(FieldProviderName, v))
}

// ProviderNameGTE applies the GTE predicate on the "provider_name" field.
func ProviderNameGTE(v string) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldGTE(FieldProviderName, v))
}

// ProviderNameLT applies the LT predicate on the "provider_name" field.
func ProviderNameLT(v string) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldLT(FieldProviderName, v))
}

// ProviderNameLTE applies the LTE predicate on the "provider_name" field.
func ProviderNameLTE(v string) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldLTE(FieldProviderName, v))
}

// ProviderNameContains applies the Contains predicate on the "provider_name" field.
func ProviderNameContains(v string) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldContains(FieldProviderName, v))
}

// ProviderNameHasPrefix applies the HasPrefix predicate on the "provider_name" field.
func ProviderNameHasPrefix(v string) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldHasPrefix(FieldProviderName, v))
}

// ProviderNameHasSuffix applies the HasSuffix predicate on the "provider_name" field.
func ProviderNameHasSuffix(v string) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldHasSuffix(FieldProviderName, v))
}

// ProviderNameEqualFold applies the EqualFold predicate on the "provider_name" field.
func ProviderNameEqualFold(v string) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldEqualFold(FieldProviderName, v))
}

// ProviderNameContainsFold applies the ContainsFold predicate on the "provider_name" field.
func ProviderNameContainsFold(v string) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldContainsFold(FieldProviderName, v))
}

// ProviderConfigEQ applies the EQ predicate on the "provider_config" field.
func ProviderConfigEQ(v []byte) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldEQ(FieldProviderConfig, v))
}

// ProviderConfigNEQ applies the NEQ predicate on the "provider_config" field.
func ProviderConfigNEQ(v []byte) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldNEQ(FieldProviderConfig, v))
}

// ProviderConfigIn applies the In predicate on the "provider_config" field.
func ProviderConfigIn(vs ...[]byte) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldIn(FieldProviderConfig, vs...))
}

// ProviderConfigNotIn applies the NotIn predicate on the "provider_config" field.
func ProviderConfigNotIn(vs ...[]byte) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldNotIn(FieldProviderConfig, vs...))
}

// ProviderConfigGT applies the GT predicate on the "provider_config" field.
func ProviderConfigGT(v []byte) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldGT(FieldProviderConfig, v))
}

// ProviderConfigGTE applies the GTE predicate on the "provider_config" field.
func ProviderConfigGTE(v []byte) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldGTE(FieldProviderConfig, v))
}

// ProviderConfigLT applies the LT predicate on the "provider_config" field.
func ProviderConfigLT(v []byte) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldLT(FieldProviderConfig, v))
}

// ProviderConfigLTE applies the LTE predicate on the "provider_config" field.
func ProviderConfigLTE(v []byte) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldLTE(FieldProviderConfig, v))
}

// EnabledEQ applies the EQ predicate on the "enabled" field.
func EnabledEQ(v bool) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldEQ(FieldEnabled, v))
}

// EnabledNEQ applies the NEQ predicate on the "enabled" field.
func EnabledNEQ(v bool) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldNEQ(FieldEnabled, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProviderConfig) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProviderConfig) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProviderConfig) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.NotPredicates(p))
}
