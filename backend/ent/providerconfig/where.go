// Code generated by ent, DO NOT EDIT.

package providerconfig

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v int) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldEQ(FieldTenantID, v))
}

// ProviderID applies equality check predicate on the "provider_id" field. It's identical to ProviderIDEQ.
func ProviderID(v string) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldEQ(FieldProviderID, v))
}

// Config applies equality check predicate on the "config" field. It's identical to ConfigEQ.
func Config(v []byte) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldEQ(FieldConfig, v))
}

// Enabled applies equality check predicate on the "enabled" field. It's identical to EnabledEQ.
func Enabled(v bool) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldEQ(FieldEnabled, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldEQ(FieldUpdatedAt, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v int) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v int) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...int) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...int) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldNotIn(FieldTenantID, vs...))
}

// ProviderTypeEQ applies the EQ predicate on the "provider_type" field.
func ProviderTypeEQ(v ProviderType) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldEQ(FieldProviderType, v))
}

// ProviderTypeNEQ applies the NEQ predicate on the "provider_type" field.
func ProviderTypeNEQ(v ProviderType) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldNEQ(FieldProviderType, v))
}

// ProviderTypeIn applies the In predicate on the "provider_type" field.
func ProviderTypeIn(vs ...ProviderType) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldIn(FieldProviderType, vs...))
}

// ProviderTypeNotIn applies the NotIn predicate on the "provider_type" field.
func ProviderTypeNotIn(vs ...ProviderType) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldNotIn(FieldProviderType, vs...))
}

// ProviderIDEQ applies the EQ predicate on the "provider_id" field.
func ProviderIDEQ(v string) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldEQ(FieldProviderID, v))
}

// ProviderIDNEQ applies the NEQ predicate on the "provider_id" field.
func ProviderIDNEQ(v string) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldNEQ(FieldProviderID, v))
}

// ProviderIDIn applies the In predicate on the "provider_id" field.
func ProviderIDIn(vs ...string) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldIn(FieldProviderID, vs...))
}

// ProviderIDNotIn applies the NotIn predicate on the "provider_id" field.
func ProviderIDNotIn(vs ...string) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldNotIn(FieldProviderID, vs...))
}

// ProviderIDGT applies the GT predicate on the "provider_id" field.
func ProviderIDGT(v string) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldGT(FieldProviderID, v))
}

// ProviderIDGTE applies the GTE predicate on the "provider_id" field.
func ProviderIDGTE(v string) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldGTE(FieldProviderID, v))
}

// ProviderIDLT applies the LT predicate on the "provider_id" field.
func ProviderIDLT(v string) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldLT(FieldProviderID, v))
}

// ProviderIDLTE applies the LTE predicate on the "provider_id" field.
func ProviderIDLTE(v string) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldLTE(FieldProviderID, v))
}

// ProviderIDContains applies the Contains predicate on the "provider_id" field.
func ProviderIDContains(v string) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldContains(FieldProviderID, v))
}

// ProviderIDHasPrefix applies the HasPrefix predicate on the "provider_id" field.
func ProviderIDHasPrefix(v string) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldHasPrefix(FieldProviderID, v))
}

// ProviderIDHasSuffix applies the HasSuffix predicate on the "provider_id" field.
func ProviderIDHasSuffix(v string) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldHasSuffix(FieldProviderID, v))
}

// ProviderIDEqualFold applies the EqualFold predicate on the "provider_id" field.
func ProviderIDEqualFold(v string) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldEqualFold(FieldProviderID, v))
}

// ProviderIDContainsFold applies the ContainsFold predicate on the "provider_id" field.
func ProviderIDContainsFold(v string) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldContainsFold(FieldProviderID, v))
}

// ConfigEQ applies the EQ predicate on the "config" field.
func ConfigEQ(v []byte) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldEQ(FieldConfig, v))
}

// ConfigNEQ applies the NEQ predicate on the "config" field.
func ConfigNEQ(v []byte) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldNEQ(FieldConfig, v))
}

// ConfigIn applies the In predicate on the "config" field.
func ConfigIn(vs ...[]byte) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldIn(FieldConfig, vs...))
}

// ConfigNotIn applies the NotIn predicate on the "config" field.
func ConfigNotIn(vs ...[]byte) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldNotIn(FieldConfig, vs...))
}

// ConfigGT applies the GT predicate on the "config" field.
func ConfigGT(v []byte) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldGT(FieldConfig, v))
}

// ConfigGTE applies the GTE predicate on the "config" field.
func ConfigGTE(v []byte) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldGTE(FieldConfig, v))
}

// ConfigLT applies the LT predicate on the "config" field.
func ConfigLT(v []byte) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldLT(FieldConfig, v))
}

// ConfigLTE applies the LTE predicate on the "config" field.
func ConfigLTE(v []byte) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldLTE(FieldConfig, v))
}

// EnabledEQ applies the EQ predicate on the "enabled" field.
func EnabledEQ(v bool) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldEQ(FieldEnabled, v))
}

// EnabledNEQ applies the NEQ predicate on the "enabled" field.
func EnabledNEQ(v bool) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldNEQ(FieldEnabled, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.ProviderConfig {
	return predicate.ProviderConfig(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.ProviderConfig {
	return predicate.ProviderConfig(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProviderConfig) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProviderConfig) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProviderConfig) predicate.ProviderConfig {
	return predicate.ProviderConfig(sql.NotPredicates(p))
}
