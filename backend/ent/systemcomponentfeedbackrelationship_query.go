// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/systemcomponent"
	"github.com/rezible/rezible/ent/systemcomponentfeedbackrelationship"
)

// SystemComponentFeedbackRelationshipQuery is the builder for querying SystemComponentFeedbackRelationship entities.
type SystemComponentFeedbackRelationshipQuery struct {
	config
	ctx        *QueryContext
	order      []systemcomponentfeedbackrelationship.OrderOption
	inters     []Interceptor
	predicates []predicate.SystemComponentFeedbackRelationship
	withSource *SystemComponentQuery
	withTarget *SystemComponentQuery
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SystemComponentFeedbackRelationshipQuery builder.
func (scfrq *SystemComponentFeedbackRelationshipQuery) Where(ps ...predicate.SystemComponentFeedbackRelationship) *SystemComponentFeedbackRelationshipQuery {
	scfrq.predicates = append(scfrq.predicates, ps...)
	return scfrq
}

// Limit the number of records to be returned by this query.
func (scfrq *SystemComponentFeedbackRelationshipQuery) Limit(limit int) *SystemComponentFeedbackRelationshipQuery {
	scfrq.ctx.Limit = &limit
	return scfrq
}

// Offset to start from.
func (scfrq *SystemComponentFeedbackRelationshipQuery) Offset(offset int) *SystemComponentFeedbackRelationshipQuery {
	scfrq.ctx.Offset = &offset
	return scfrq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (scfrq *SystemComponentFeedbackRelationshipQuery) Unique(unique bool) *SystemComponentFeedbackRelationshipQuery {
	scfrq.ctx.Unique = &unique
	return scfrq
}

// Order specifies how the records should be ordered.
func (scfrq *SystemComponentFeedbackRelationshipQuery) Order(o ...systemcomponentfeedbackrelationship.OrderOption) *SystemComponentFeedbackRelationshipQuery {
	scfrq.order = append(scfrq.order, o...)
	return scfrq
}

// QuerySource chains the current query on the "source" edge.
func (scfrq *SystemComponentFeedbackRelationshipQuery) QuerySource() *SystemComponentQuery {
	query := (&SystemComponentClient{config: scfrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := scfrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := scfrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(systemcomponentfeedbackrelationship.Table, systemcomponentfeedbackrelationship.FieldID, selector),
			sqlgraph.To(systemcomponent.Table, systemcomponent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, systemcomponentfeedbackrelationship.SourceTable, systemcomponentfeedbackrelationship.SourceColumn),
		)
		fromU = sqlgraph.SetNeighbors(scfrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTarget chains the current query on the "target" edge.
func (scfrq *SystemComponentFeedbackRelationshipQuery) QueryTarget() *SystemComponentQuery {
	query := (&SystemComponentClient{config: scfrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := scfrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := scfrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(systemcomponentfeedbackrelationship.Table, systemcomponentfeedbackrelationship.FieldID, selector),
			sqlgraph.To(systemcomponent.Table, systemcomponent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, systemcomponentfeedbackrelationship.TargetTable, systemcomponentfeedbackrelationship.TargetColumn),
		)
		fromU = sqlgraph.SetNeighbors(scfrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SystemComponentFeedbackRelationship entity from the query.
// Returns a *NotFoundError when no SystemComponentFeedbackRelationship was found.
func (scfrq *SystemComponentFeedbackRelationshipQuery) First(ctx context.Context) (*SystemComponentFeedbackRelationship, error) {
	nodes, err := scfrq.Limit(1).All(setContextOp(ctx, scfrq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{systemcomponentfeedbackrelationship.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (scfrq *SystemComponentFeedbackRelationshipQuery) FirstX(ctx context.Context) *SystemComponentFeedbackRelationship {
	node, err := scfrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SystemComponentFeedbackRelationship ID from the query.
// Returns a *NotFoundError when no SystemComponentFeedbackRelationship ID was found.
func (scfrq *SystemComponentFeedbackRelationshipQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = scfrq.Limit(1).IDs(setContextOp(ctx, scfrq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{systemcomponentfeedbackrelationship.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (scfrq *SystemComponentFeedbackRelationshipQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := scfrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SystemComponentFeedbackRelationship entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SystemComponentFeedbackRelationship entity is found.
// Returns a *NotFoundError when no SystemComponentFeedbackRelationship entities are found.
func (scfrq *SystemComponentFeedbackRelationshipQuery) Only(ctx context.Context) (*SystemComponentFeedbackRelationship, error) {
	nodes, err := scfrq.Limit(2).All(setContextOp(ctx, scfrq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{systemcomponentfeedbackrelationship.Label}
	default:
		return nil, &NotSingularError{systemcomponentfeedbackrelationship.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (scfrq *SystemComponentFeedbackRelationshipQuery) OnlyX(ctx context.Context) *SystemComponentFeedbackRelationship {
	node, err := scfrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SystemComponentFeedbackRelationship ID in the query.
// Returns a *NotSingularError when more than one SystemComponentFeedbackRelationship ID is found.
// Returns a *NotFoundError when no entities are found.
func (scfrq *SystemComponentFeedbackRelationshipQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = scfrq.Limit(2).IDs(setContextOp(ctx, scfrq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{systemcomponentfeedbackrelationship.Label}
	default:
		err = &NotSingularError{systemcomponentfeedbackrelationship.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (scfrq *SystemComponentFeedbackRelationshipQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := scfrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SystemComponentFeedbackRelationships.
func (scfrq *SystemComponentFeedbackRelationshipQuery) All(ctx context.Context) ([]*SystemComponentFeedbackRelationship, error) {
	ctx = setContextOp(ctx, scfrq.ctx, ent.OpQueryAll)
	if err := scfrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SystemComponentFeedbackRelationship, *SystemComponentFeedbackRelationshipQuery]()
	return withInterceptors[[]*SystemComponentFeedbackRelationship](ctx, scfrq, qr, scfrq.inters)
}

// AllX is like All, but panics if an error occurs.
func (scfrq *SystemComponentFeedbackRelationshipQuery) AllX(ctx context.Context) []*SystemComponentFeedbackRelationship {
	nodes, err := scfrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SystemComponentFeedbackRelationship IDs.
func (scfrq *SystemComponentFeedbackRelationshipQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if scfrq.ctx.Unique == nil && scfrq.path != nil {
		scfrq.Unique(true)
	}
	ctx = setContextOp(ctx, scfrq.ctx, ent.OpQueryIDs)
	if err = scfrq.Select(systemcomponentfeedbackrelationship.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (scfrq *SystemComponentFeedbackRelationshipQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := scfrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (scfrq *SystemComponentFeedbackRelationshipQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, scfrq.ctx, ent.OpQueryCount)
	if err := scfrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, scfrq, querierCount[*SystemComponentFeedbackRelationshipQuery](), scfrq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (scfrq *SystemComponentFeedbackRelationshipQuery) CountX(ctx context.Context) int {
	count, err := scfrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (scfrq *SystemComponentFeedbackRelationshipQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, scfrq.ctx, ent.OpQueryExist)
	switch _, err := scfrq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (scfrq *SystemComponentFeedbackRelationshipQuery) ExistX(ctx context.Context) bool {
	exist, err := scfrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SystemComponentFeedbackRelationshipQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (scfrq *SystemComponentFeedbackRelationshipQuery) Clone() *SystemComponentFeedbackRelationshipQuery {
	if scfrq == nil {
		return nil
	}
	return &SystemComponentFeedbackRelationshipQuery{
		config:     scfrq.config,
		ctx:        scfrq.ctx.Clone(),
		order:      append([]systemcomponentfeedbackrelationship.OrderOption{}, scfrq.order...),
		inters:     append([]Interceptor{}, scfrq.inters...),
		predicates: append([]predicate.SystemComponentFeedbackRelationship{}, scfrq.predicates...),
		withSource: scfrq.withSource.Clone(),
		withTarget: scfrq.withTarget.Clone(),
		// clone intermediate query.
		sql:       scfrq.sql.Clone(),
		path:      scfrq.path,
		modifiers: append([]func(*sql.Selector){}, scfrq.modifiers...),
	}
}

// WithSource tells the query-builder to eager-load the nodes that are connected to
// the "source" edge. The optional arguments are used to configure the query builder of the edge.
func (scfrq *SystemComponentFeedbackRelationshipQuery) WithSource(opts ...func(*SystemComponentQuery)) *SystemComponentFeedbackRelationshipQuery {
	query := (&SystemComponentClient{config: scfrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	scfrq.withSource = query
	return scfrq
}

// WithTarget tells the query-builder to eager-load the nodes that are connected to
// the "target" edge. The optional arguments are used to configure the query builder of the edge.
func (scfrq *SystemComponentFeedbackRelationshipQuery) WithTarget(opts ...func(*SystemComponentQuery)) *SystemComponentFeedbackRelationshipQuery {
	query := (&SystemComponentClient{config: scfrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	scfrq.withTarget = query
	return scfrq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		SourceID uuid.UUID `json:"source_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SystemComponentFeedbackRelationship.Query().
//		GroupBy(systemcomponentfeedbackrelationship.FieldSourceID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (scfrq *SystemComponentFeedbackRelationshipQuery) GroupBy(field string, fields ...string) *SystemComponentFeedbackRelationshipGroupBy {
	scfrq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SystemComponentFeedbackRelationshipGroupBy{build: scfrq}
	grbuild.flds = &scfrq.ctx.Fields
	grbuild.label = systemcomponentfeedbackrelationship.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		SourceID uuid.UUID `json:"source_id,omitempty"`
//	}
//
//	client.SystemComponentFeedbackRelationship.Query().
//		Select(systemcomponentfeedbackrelationship.FieldSourceID).
//		Scan(ctx, &v)
func (scfrq *SystemComponentFeedbackRelationshipQuery) Select(fields ...string) *SystemComponentFeedbackRelationshipSelect {
	scfrq.ctx.Fields = append(scfrq.ctx.Fields, fields...)
	sbuild := &SystemComponentFeedbackRelationshipSelect{SystemComponentFeedbackRelationshipQuery: scfrq}
	sbuild.label = systemcomponentfeedbackrelationship.Label
	sbuild.flds, sbuild.scan = &scfrq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SystemComponentFeedbackRelationshipSelect configured with the given aggregations.
func (scfrq *SystemComponentFeedbackRelationshipQuery) Aggregate(fns ...AggregateFunc) *SystemComponentFeedbackRelationshipSelect {
	return scfrq.Select().Aggregate(fns...)
}

func (scfrq *SystemComponentFeedbackRelationshipQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range scfrq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, scfrq); err != nil {
				return err
			}
		}
	}
	for _, f := range scfrq.ctx.Fields {
		if !systemcomponentfeedbackrelationship.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if scfrq.path != nil {
		prev, err := scfrq.path(ctx)
		if err != nil {
			return err
		}
		scfrq.sql = prev
	}
	return nil
}

func (scfrq *SystemComponentFeedbackRelationshipQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SystemComponentFeedbackRelationship, error) {
	var (
		nodes       = []*SystemComponentFeedbackRelationship{}
		_spec       = scfrq.querySpec()
		loadedTypes = [2]bool{
			scfrq.withSource != nil,
			scfrq.withTarget != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SystemComponentFeedbackRelationship).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SystemComponentFeedbackRelationship{config: scfrq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(scfrq.modifiers) > 0 {
		_spec.Modifiers = scfrq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, scfrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := scfrq.withSource; query != nil {
		if err := scfrq.loadSource(ctx, query, nodes, nil,
			func(n *SystemComponentFeedbackRelationship, e *SystemComponent) { n.Edges.Source = e }); err != nil {
			return nil, err
		}
	}
	if query := scfrq.withTarget; query != nil {
		if err := scfrq.loadTarget(ctx, query, nodes, nil,
			func(n *SystemComponentFeedbackRelationship, e *SystemComponent) { n.Edges.Target = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (scfrq *SystemComponentFeedbackRelationshipQuery) loadSource(ctx context.Context, query *SystemComponentQuery, nodes []*SystemComponentFeedbackRelationship, init func(*SystemComponentFeedbackRelationship), assign func(*SystemComponentFeedbackRelationship, *SystemComponent)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*SystemComponentFeedbackRelationship)
	for i := range nodes {
		fk := nodes[i].SourceID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(systemcomponent.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "source_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (scfrq *SystemComponentFeedbackRelationshipQuery) loadTarget(ctx context.Context, query *SystemComponentQuery, nodes []*SystemComponentFeedbackRelationship, init func(*SystemComponentFeedbackRelationship), assign func(*SystemComponentFeedbackRelationship, *SystemComponent)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*SystemComponentFeedbackRelationship)
	for i := range nodes {
		fk := nodes[i].TargetID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(systemcomponent.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "target_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (scfrq *SystemComponentFeedbackRelationshipQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := scfrq.querySpec()
	if len(scfrq.modifiers) > 0 {
		_spec.Modifiers = scfrq.modifiers
	}
	_spec.Node.Columns = scfrq.ctx.Fields
	if len(scfrq.ctx.Fields) > 0 {
		_spec.Unique = scfrq.ctx.Unique != nil && *scfrq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, scfrq.driver, _spec)
}

func (scfrq *SystemComponentFeedbackRelationshipQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(systemcomponentfeedbackrelationship.Table, systemcomponentfeedbackrelationship.Columns, sqlgraph.NewFieldSpec(systemcomponentfeedbackrelationship.FieldID, field.TypeUUID))
	_spec.From = scfrq.sql
	if unique := scfrq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if scfrq.path != nil {
		_spec.Unique = true
	}
	if fields := scfrq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, systemcomponentfeedbackrelationship.FieldID)
		for i := range fields {
			if fields[i] != systemcomponentfeedbackrelationship.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if scfrq.withSource != nil {
			_spec.Node.AddColumnOnce(systemcomponentfeedbackrelationship.FieldSourceID)
		}
		if scfrq.withTarget != nil {
			_spec.Node.AddColumnOnce(systemcomponentfeedbackrelationship.FieldTargetID)
		}
	}
	if ps := scfrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := scfrq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := scfrq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := scfrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (scfrq *SystemComponentFeedbackRelationshipQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(scfrq.driver.Dialect())
	t1 := builder.Table(systemcomponentfeedbackrelationship.Table)
	columns := scfrq.ctx.Fields
	if len(columns) == 0 {
		columns = systemcomponentfeedbackrelationship.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if scfrq.sql != nil {
		selector = scfrq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if scfrq.ctx.Unique != nil && *scfrq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range scfrq.modifiers {
		m(selector)
	}
	for _, p := range scfrq.predicates {
		p(selector)
	}
	for _, p := range scfrq.order {
		p(selector)
	}
	if offset := scfrq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := scfrq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (scfrq *SystemComponentFeedbackRelationshipQuery) Modify(modifiers ...func(s *sql.Selector)) *SystemComponentFeedbackRelationshipSelect {
	scfrq.modifiers = append(scfrq.modifiers, modifiers...)
	return scfrq.Select()
}

// SystemComponentFeedbackRelationshipGroupBy is the group-by builder for SystemComponentFeedbackRelationship entities.
type SystemComponentFeedbackRelationshipGroupBy struct {
	selector
	build *SystemComponentFeedbackRelationshipQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (scfrgb *SystemComponentFeedbackRelationshipGroupBy) Aggregate(fns ...AggregateFunc) *SystemComponentFeedbackRelationshipGroupBy {
	scfrgb.fns = append(scfrgb.fns, fns...)
	return scfrgb
}

// Scan applies the selector query and scans the result into the given value.
func (scfrgb *SystemComponentFeedbackRelationshipGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, scfrgb.build.ctx, ent.OpQueryGroupBy)
	if err := scfrgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SystemComponentFeedbackRelationshipQuery, *SystemComponentFeedbackRelationshipGroupBy](ctx, scfrgb.build, scfrgb, scfrgb.build.inters, v)
}

func (scfrgb *SystemComponentFeedbackRelationshipGroupBy) sqlScan(ctx context.Context, root *SystemComponentFeedbackRelationshipQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(scfrgb.fns))
	for _, fn := range scfrgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*scfrgb.flds)+len(scfrgb.fns))
		for _, f := range *scfrgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*scfrgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := scfrgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SystemComponentFeedbackRelationshipSelect is the builder for selecting fields of SystemComponentFeedbackRelationship entities.
type SystemComponentFeedbackRelationshipSelect struct {
	*SystemComponentFeedbackRelationshipQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (scfrs *SystemComponentFeedbackRelationshipSelect) Aggregate(fns ...AggregateFunc) *SystemComponentFeedbackRelationshipSelect {
	scfrs.fns = append(scfrs.fns, fns...)
	return scfrs
}

// Scan applies the selector query and scans the result into the given value.
func (scfrs *SystemComponentFeedbackRelationshipSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, scfrs.ctx, ent.OpQuerySelect)
	if err := scfrs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SystemComponentFeedbackRelationshipQuery, *SystemComponentFeedbackRelationshipSelect](ctx, scfrs.SystemComponentFeedbackRelationshipQuery, scfrs, scfrs.inters, v)
}

func (scfrs *SystemComponentFeedbackRelationshipSelect) sqlScan(ctx context.Context, root *SystemComponentFeedbackRelationshipQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(scfrs.fns))
	for _, fn := range scfrs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*scfrs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := scfrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (scfrs *SystemComponentFeedbackRelationshipSelect) Modify(modifiers ...func(s *sql.Selector)) *SystemComponentFeedbackRelationshipSelect {
	scfrs.modifiers = append(scfrs.modifiers, modifiers...)
	return scfrs
}
