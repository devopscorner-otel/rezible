// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/systemcomponent"
	"github.com/rezible/rezible/ent/systemcomponentrelationship"
	"github.com/rezible/rezible/ent/systemcomponentrelationshipcontrolaction"
	"github.com/rezible/rezible/ent/systemcomponentrelationshipfeedback"
)

// SystemComponentRelationshipQuery is the builder for querying SystemComponentRelationship entities.
type SystemComponentRelationshipQuery struct {
	config
	ctx                *QueryContext
	order              []systemcomponentrelationship.OrderOption
	inters             []Interceptor
	predicates         []predicate.SystemComponentRelationship
	withSource         *SystemComponentQuery
	withTarget         *SystemComponentQuery
	withControlActions *SystemComponentRelationshipControlActionQuery
	withFeedback       *SystemComponentRelationshipFeedbackQuery
	modifiers          []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SystemComponentRelationshipQuery builder.
func (scrq *SystemComponentRelationshipQuery) Where(ps ...predicate.SystemComponentRelationship) *SystemComponentRelationshipQuery {
	scrq.predicates = append(scrq.predicates, ps...)
	return scrq
}

// Limit the number of records to be returned by this query.
func (scrq *SystemComponentRelationshipQuery) Limit(limit int) *SystemComponentRelationshipQuery {
	scrq.ctx.Limit = &limit
	return scrq
}

// Offset to start from.
func (scrq *SystemComponentRelationshipQuery) Offset(offset int) *SystemComponentRelationshipQuery {
	scrq.ctx.Offset = &offset
	return scrq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (scrq *SystemComponentRelationshipQuery) Unique(unique bool) *SystemComponentRelationshipQuery {
	scrq.ctx.Unique = &unique
	return scrq
}

// Order specifies how the records should be ordered.
func (scrq *SystemComponentRelationshipQuery) Order(o ...systemcomponentrelationship.OrderOption) *SystemComponentRelationshipQuery {
	scrq.order = append(scrq.order, o...)
	return scrq
}

// QuerySource chains the current query on the "source" edge.
func (scrq *SystemComponentRelationshipQuery) QuerySource() *SystemComponentQuery {
	query := (&SystemComponentClient{config: scrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := scrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := scrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(systemcomponentrelationship.Table, systemcomponentrelationship.FieldID, selector),
			sqlgraph.To(systemcomponent.Table, systemcomponent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, systemcomponentrelationship.SourceTable, systemcomponentrelationship.SourceColumn),
		)
		fromU = sqlgraph.SetNeighbors(scrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTarget chains the current query on the "target" edge.
func (scrq *SystemComponentRelationshipQuery) QueryTarget() *SystemComponentQuery {
	query := (&SystemComponentClient{config: scrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := scrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := scrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(systemcomponentrelationship.Table, systemcomponentrelationship.FieldID, selector),
			sqlgraph.To(systemcomponent.Table, systemcomponent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, systemcomponentrelationship.TargetTable, systemcomponentrelationship.TargetColumn),
		)
		fromU = sqlgraph.SetNeighbors(scrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryControlActions chains the current query on the "control_actions" edge.
func (scrq *SystemComponentRelationshipQuery) QueryControlActions() *SystemComponentRelationshipControlActionQuery {
	query := (&SystemComponentRelationshipControlActionClient{config: scrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := scrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := scrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(systemcomponentrelationship.Table, systemcomponentrelationship.FieldID, selector),
			sqlgraph.To(systemcomponentrelationshipcontrolaction.Table, systemcomponentrelationshipcontrolaction.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, systemcomponentrelationship.ControlActionsTable, systemcomponentrelationship.ControlActionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(scrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFeedback chains the current query on the "feedback" edge.
func (scrq *SystemComponentRelationshipQuery) QueryFeedback() *SystemComponentRelationshipFeedbackQuery {
	query := (&SystemComponentRelationshipFeedbackClient{config: scrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := scrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := scrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(systemcomponentrelationship.Table, systemcomponentrelationship.FieldID, selector),
			sqlgraph.To(systemcomponentrelationshipfeedback.Table, systemcomponentrelationshipfeedback.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, systemcomponentrelationship.FeedbackTable, systemcomponentrelationship.FeedbackColumn),
		)
		fromU = sqlgraph.SetNeighbors(scrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SystemComponentRelationship entity from the query.
// Returns a *NotFoundError when no SystemComponentRelationship was found.
func (scrq *SystemComponentRelationshipQuery) First(ctx context.Context) (*SystemComponentRelationship, error) {
	nodes, err := scrq.Limit(1).All(setContextOp(ctx, scrq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{systemcomponentrelationship.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (scrq *SystemComponentRelationshipQuery) FirstX(ctx context.Context) *SystemComponentRelationship {
	node, err := scrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SystemComponentRelationship ID from the query.
// Returns a *NotFoundError when no SystemComponentRelationship ID was found.
func (scrq *SystemComponentRelationshipQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = scrq.Limit(1).IDs(setContextOp(ctx, scrq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{systemcomponentrelationship.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (scrq *SystemComponentRelationshipQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := scrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SystemComponentRelationship entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SystemComponentRelationship entity is found.
// Returns a *NotFoundError when no SystemComponentRelationship entities are found.
func (scrq *SystemComponentRelationshipQuery) Only(ctx context.Context) (*SystemComponentRelationship, error) {
	nodes, err := scrq.Limit(2).All(setContextOp(ctx, scrq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{systemcomponentrelationship.Label}
	default:
		return nil, &NotSingularError{systemcomponentrelationship.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (scrq *SystemComponentRelationshipQuery) OnlyX(ctx context.Context) *SystemComponentRelationship {
	node, err := scrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SystemComponentRelationship ID in the query.
// Returns a *NotSingularError when more than one SystemComponentRelationship ID is found.
// Returns a *NotFoundError when no entities are found.
func (scrq *SystemComponentRelationshipQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = scrq.Limit(2).IDs(setContextOp(ctx, scrq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{systemcomponentrelationship.Label}
	default:
		err = &NotSingularError{systemcomponentrelationship.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (scrq *SystemComponentRelationshipQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := scrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SystemComponentRelationships.
func (scrq *SystemComponentRelationshipQuery) All(ctx context.Context) ([]*SystemComponentRelationship, error) {
	ctx = setContextOp(ctx, scrq.ctx, ent.OpQueryAll)
	if err := scrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SystemComponentRelationship, *SystemComponentRelationshipQuery]()
	return withInterceptors[[]*SystemComponentRelationship](ctx, scrq, qr, scrq.inters)
}

// AllX is like All, but panics if an error occurs.
func (scrq *SystemComponentRelationshipQuery) AllX(ctx context.Context) []*SystemComponentRelationship {
	nodes, err := scrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SystemComponentRelationship IDs.
func (scrq *SystemComponentRelationshipQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if scrq.ctx.Unique == nil && scrq.path != nil {
		scrq.Unique(true)
	}
	ctx = setContextOp(ctx, scrq.ctx, ent.OpQueryIDs)
	if err = scrq.Select(systemcomponentrelationship.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (scrq *SystemComponentRelationshipQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := scrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (scrq *SystemComponentRelationshipQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, scrq.ctx, ent.OpQueryCount)
	if err := scrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, scrq, querierCount[*SystemComponentRelationshipQuery](), scrq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (scrq *SystemComponentRelationshipQuery) CountX(ctx context.Context) int {
	count, err := scrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (scrq *SystemComponentRelationshipQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, scrq.ctx, ent.OpQueryExist)
	switch _, err := scrq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (scrq *SystemComponentRelationshipQuery) ExistX(ctx context.Context) bool {
	exist, err := scrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SystemComponentRelationshipQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (scrq *SystemComponentRelationshipQuery) Clone() *SystemComponentRelationshipQuery {
	if scrq == nil {
		return nil
	}
	return &SystemComponentRelationshipQuery{
		config:             scrq.config,
		ctx:                scrq.ctx.Clone(),
		order:              append([]systemcomponentrelationship.OrderOption{}, scrq.order...),
		inters:             append([]Interceptor{}, scrq.inters...),
		predicates:         append([]predicate.SystemComponentRelationship{}, scrq.predicates...),
		withSource:         scrq.withSource.Clone(),
		withTarget:         scrq.withTarget.Clone(),
		withControlActions: scrq.withControlActions.Clone(),
		withFeedback:       scrq.withFeedback.Clone(),
		// clone intermediate query.
		sql:       scrq.sql.Clone(),
		path:      scrq.path,
		modifiers: append([]func(*sql.Selector){}, scrq.modifiers...),
	}
}

// WithSource tells the query-builder to eager-load the nodes that are connected to
// the "source" edge. The optional arguments are used to configure the query builder of the edge.
func (scrq *SystemComponentRelationshipQuery) WithSource(opts ...func(*SystemComponentQuery)) *SystemComponentRelationshipQuery {
	query := (&SystemComponentClient{config: scrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	scrq.withSource = query
	return scrq
}

// WithTarget tells the query-builder to eager-load the nodes that are connected to
// the "target" edge. The optional arguments are used to configure the query builder of the edge.
func (scrq *SystemComponentRelationshipQuery) WithTarget(opts ...func(*SystemComponentQuery)) *SystemComponentRelationshipQuery {
	query := (&SystemComponentClient{config: scrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	scrq.withTarget = query
	return scrq
}

// WithControlActions tells the query-builder to eager-load the nodes that are connected to
// the "control_actions" edge. The optional arguments are used to configure the query builder of the edge.
func (scrq *SystemComponentRelationshipQuery) WithControlActions(opts ...func(*SystemComponentRelationshipControlActionQuery)) *SystemComponentRelationshipQuery {
	query := (&SystemComponentRelationshipControlActionClient{config: scrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	scrq.withControlActions = query
	return scrq
}

// WithFeedback tells the query-builder to eager-load the nodes that are connected to
// the "feedback" edge. The optional arguments are used to configure the query builder of the edge.
func (scrq *SystemComponentRelationshipQuery) WithFeedback(opts ...func(*SystemComponentRelationshipFeedbackQuery)) *SystemComponentRelationshipQuery {
	query := (&SystemComponentRelationshipFeedbackClient{config: scrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	scrq.withFeedback = query
	return scrq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		SourceID uuid.UUID `json:"source_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SystemComponentRelationship.Query().
//		GroupBy(systemcomponentrelationship.FieldSourceID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (scrq *SystemComponentRelationshipQuery) GroupBy(field string, fields ...string) *SystemComponentRelationshipGroupBy {
	scrq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SystemComponentRelationshipGroupBy{build: scrq}
	grbuild.flds = &scrq.ctx.Fields
	grbuild.label = systemcomponentrelationship.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		SourceID uuid.UUID `json:"source_id,omitempty"`
//	}
//
//	client.SystemComponentRelationship.Query().
//		Select(systemcomponentrelationship.FieldSourceID).
//		Scan(ctx, &v)
func (scrq *SystemComponentRelationshipQuery) Select(fields ...string) *SystemComponentRelationshipSelect {
	scrq.ctx.Fields = append(scrq.ctx.Fields, fields...)
	sbuild := &SystemComponentRelationshipSelect{SystemComponentRelationshipQuery: scrq}
	sbuild.label = systemcomponentrelationship.Label
	sbuild.flds, sbuild.scan = &scrq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SystemComponentRelationshipSelect configured with the given aggregations.
func (scrq *SystemComponentRelationshipQuery) Aggregate(fns ...AggregateFunc) *SystemComponentRelationshipSelect {
	return scrq.Select().Aggregate(fns...)
}

func (scrq *SystemComponentRelationshipQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range scrq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, scrq); err != nil {
				return err
			}
		}
	}
	for _, f := range scrq.ctx.Fields {
		if !systemcomponentrelationship.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if scrq.path != nil {
		prev, err := scrq.path(ctx)
		if err != nil {
			return err
		}
		scrq.sql = prev
	}
	return nil
}

func (scrq *SystemComponentRelationshipQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SystemComponentRelationship, error) {
	var (
		nodes       = []*SystemComponentRelationship{}
		_spec       = scrq.querySpec()
		loadedTypes = [4]bool{
			scrq.withSource != nil,
			scrq.withTarget != nil,
			scrq.withControlActions != nil,
			scrq.withFeedback != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SystemComponentRelationship).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SystemComponentRelationship{config: scrq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(scrq.modifiers) > 0 {
		_spec.Modifiers = scrq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, scrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := scrq.withSource; query != nil {
		if err := scrq.loadSource(ctx, query, nodes, nil,
			func(n *SystemComponentRelationship, e *SystemComponent) { n.Edges.Source = e }); err != nil {
			return nil, err
		}
	}
	if query := scrq.withTarget; query != nil {
		if err := scrq.loadTarget(ctx, query, nodes, nil,
			func(n *SystemComponentRelationship, e *SystemComponent) { n.Edges.Target = e }); err != nil {
			return nil, err
		}
	}
	if query := scrq.withControlActions; query != nil {
		if err := scrq.loadControlActions(ctx, query, nodes,
			func(n *SystemComponentRelationship) {
				n.Edges.ControlActions = []*SystemComponentRelationshipControlAction{}
			},
			func(n *SystemComponentRelationship, e *SystemComponentRelationshipControlAction) {
				n.Edges.ControlActions = append(n.Edges.ControlActions, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := scrq.withFeedback; query != nil {
		if err := scrq.loadFeedback(ctx, query, nodes,
			func(n *SystemComponentRelationship) { n.Edges.Feedback = []*SystemComponentRelationshipFeedback{} },
			func(n *SystemComponentRelationship, e *SystemComponentRelationshipFeedback) {
				n.Edges.Feedback = append(n.Edges.Feedback, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (scrq *SystemComponentRelationshipQuery) loadSource(ctx context.Context, query *SystemComponentQuery, nodes []*SystemComponentRelationship, init func(*SystemComponentRelationship), assign func(*SystemComponentRelationship, *SystemComponent)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*SystemComponentRelationship)
	for i := range nodes {
		fk := nodes[i].SourceID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(systemcomponent.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "source_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (scrq *SystemComponentRelationshipQuery) loadTarget(ctx context.Context, query *SystemComponentQuery, nodes []*SystemComponentRelationship, init func(*SystemComponentRelationship), assign func(*SystemComponentRelationship, *SystemComponent)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*SystemComponentRelationship)
	for i := range nodes {
		fk := nodes[i].TargetID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(systemcomponent.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "target_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (scrq *SystemComponentRelationshipQuery) loadControlActions(ctx context.Context, query *SystemComponentRelationshipControlActionQuery, nodes []*SystemComponentRelationship, init func(*SystemComponentRelationship), assign func(*SystemComponentRelationship, *SystemComponentRelationshipControlAction)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*SystemComponentRelationship)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(systemcomponentrelationshipcontrolaction.FieldRelationshipID)
	}
	query.Where(predicate.SystemComponentRelationshipControlAction(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(systemcomponentrelationship.ControlActionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.RelationshipID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "relationship_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (scrq *SystemComponentRelationshipQuery) loadFeedback(ctx context.Context, query *SystemComponentRelationshipFeedbackQuery, nodes []*SystemComponentRelationship, init func(*SystemComponentRelationship), assign func(*SystemComponentRelationship, *SystemComponentRelationshipFeedback)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*SystemComponentRelationship)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(systemcomponentrelationshipfeedback.FieldRelationshipID)
	}
	query.Where(predicate.SystemComponentRelationshipFeedback(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(systemcomponentrelationship.FeedbackColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.RelationshipID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "relationship_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (scrq *SystemComponentRelationshipQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := scrq.querySpec()
	if len(scrq.modifiers) > 0 {
		_spec.Modifiers = scrq.modifiers
	}
	_spec.Node.Columns = scrq.ctx.Fields
	if len(scrq.ctx.Fields) > 0 {
		_spec.Unique = scrq.ctx.Unique != nil && *scrq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, scrq.driver, _spec)
}

func (scrq *SystemComponentRelationshipQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(systemcomponentrelationship.Table, systemcomponentrelationship.Columns, sqlgraph.NewFieldSpec(systemcomponentrelationship.FieldID, field.TypeUUID))
	_spec.From = scrq.sql
	if unique := scrq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if scrq.path != nil {
		_spec.Unique = true
	}
	if fields := scrq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, systemcomponentrelationship.FieldID)
		for i := range fields {
			if fields[i] != systemcomponentrelationship.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if scrq.withSource != nil {
			_spec.Node.AddColumnOnce(systemcomponentrelationship.FieldSourceID)
		}
		if scrq.withTarget != nil {
			_spec.Node.AddColumnOnce(systemcomponentrelationship.FieldTargetID)
		}
	}
	if ps := scrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := scrq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := scrq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := scrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (scrq *SystemComponentRelationshipQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(scrq.driver.Dialect())
	t1 := builder.Table(systemcomponentrelationship.Table)
	columns := scrq.ctx.Fields
	if len(columns) == 0 {
		columns = systemcomponentrelationship.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if scrq.sql != nil {
		selector = scrq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if scrq.ctx.Unique != nil && *scrq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range scrq.modifiers {
		m(selector)
	}
	for _, p := range scrq.predicates {
		p(selector)
	}
	for _, p := range scrq.order {
		p(selector)
	}
	if offset := scrq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := scrq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (scrq *SystemComponentRelationshipQuery) Modify(modifiers ...func(s *sql.Selector)) *SystemComponentRelationshipSelect {
	scrq.modifiers = append(scrq.modifiers, modifiers...)
	return scrq.Select()
}

// SystemComponentRelationshipGroupBy is the group-by builder for SystemComponentRelationship entities.
type SystemComponentRelationshipGroupBy struct {
	selector
	build *SystemComponentRelationshipQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (scrgb *SystemComponentRelationshipGroupBy) Aggregate(fns ...AggregateFunc) *SystemComponentRelationshipGroupBy {
	scrgb.fns = append(scrgb.fns, fns...)
	return scrgb
}

// Scan applies the selector query and scans the result into the given value.
func (scrgb *SystemComponentRelationshipGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, scrgb.build.ctx, ent.OpQueryGroupBy)
	if err := scrgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SystemComponentRelationshipQuery, *SystemComponentRelationshipGroupBy](ctx, scrgb.build, scrgb, scrgb.build.inters, v)
}

func (scrgb *SystemComponentRelationshipGroupBy) sqlScan(ctx context.Context, root *SystemComponentRelationshipQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(scrgb.fns))
	for _, fn := range scrgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*scrgb.flds)+len(scrgb.fns))
		for _, f := range *scrgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*scrgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := scrgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SystemComponentRelationshipSelect is the builder for selecting fields of SystemComponentRelationship entities.
type SystemComponentRelationshipSelect struct {
	*SystemComponentRelationshipQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (scrs *SystemComponentRelationshipSelect) Aggregate(fns ...AggregateFunc) *SystemComponentRelationshipSelect {
	scrs.fns = append(scrs.fns, fns...)
	return scrs
}

// Scan applies the selector query and scans the result into the given value.
func (scrs *SystemComponentRelationshipSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, scrs.ctx, ent.OpQuerySelect)
	if err := scrs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SystemComponentRelationshipQuery, *SystemComponentRelationshipSelect](ctx, scrs.SystemComponentRelationshipQuery, scrs, scrs.inters, v)
}

func (scrs *SystemComponentRelationshipSelect) sqlScan(ctx context.Context, root *SystemComponentRelationshipQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(scrs.fns))
	for _, fn := range scrs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*scrs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := scrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (scrs *SystemComponentRelationshipSelect) Modify(modifiers ...func(s *sql.Selector)) *SystemComponentRelationshipSelect {
	scrs.modifiers = append(scrs.modifiers, modifiers...)
	return scrs
}
