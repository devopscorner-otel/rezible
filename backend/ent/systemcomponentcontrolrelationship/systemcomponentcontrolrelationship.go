// Code generated by ent, DO NOT EDIT.

package systemcomponentcontrolrelationship

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the systemcomponentcontrolrelationship type in the database.
	Label = "system_component_control_relationship"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldControllerID holds the string denoting the controller_id field in the database.
	FieldControllerID = "controller_id"
	// FieldControlledID holds the string denoting the controlled_id field in the database.
	FieldControlledID = "controlled_id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeController holds the string denoting the controller edge name in mutations.
	EdgeController = "controller"
	// EdgeControlled holds the string denoting the controlled edge name in mutations.
	EdgeControlled = "controlled"
	// Table holds the table name of the systemcomponentcontrolrelationship in the database.
	Table = "system_component_control_relationships"
	// ControllerTable is the table that holds the controller relation/edge.
	ControllerTable = "system_component_control_relationships"
	// ControllerInverseTable is the table name for the SystemComponent entity.
	// It exists in this package in order to avoid circular dependency with the "systemcomponent" package.
	ControllerInverseTable = "system_components"
	// ControllerColumn is the table column denoting the controller relation/edge.
	ControllerColumn = "controller_id"
	// ControlledTable is the table that holds the controlled relation/edge.
	ControlledTable = "system_component_control_relationships"
	// ControlledInverseTable is the table name for the SystemComponent entity.
	// It exists in this package in order to avoid circular dependency with the "systemcomponent" package.
	ControlledInverseTable = "system_components"
	// ControlledColumn is the table column denoting the controlled relation/edge.
	ControlledColumn = "controlled_id"
)

// Columns holds all SQL columns for systemcomponentcontrolrelationship fields.
var Columns = []string{
	FieldID,
	FieldControllerID,
	FieldControlledID,
	FieldType,
	FieldDescription,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TypeValidator is a validator for the "type" field. It is called by the builders before save.
	TypeValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the SystemComponentControlRelationship queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByControllerID orders the results by the controller_id field.
func ByControllerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldControllerID, opts...).ToFunc()
}

// ByControlledID orders the results by the controlled_id field.
func ByControlledID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldControlledID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByControllerField orders the results by controller field.
func ByControllerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newControllerStep(), sql.OrderByField(field, opts...))
	}
}

// ByControlledField orders the results by controlled field.
func ByControlledField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newControlledStep(), sql.OrderByField(field, opts...))
	}
}
func newControllerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ControllerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ControllerTable, ControllerColumn),
	)
}
func newControlledStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ControlledInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ControlledTable, ControlledColumn),
	)
}
