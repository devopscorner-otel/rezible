// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/twohundreds/rezible/ent/oncallhandovertemplate"
	"github.com/twohundreds/rezible/ent/oncallroster"
)

// OncallRoster is the model entity for the OncallRoster schema.
type OncallRoster struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ArchiveTime holds the value of the "archive_time" field.
	ArchiveTime time.Time `json:"archive_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// ProviderID holds the value of the "provider_id" field.
	ProviderID string `json:"provider_id,omitempty"`
	// Timezone holds the value of the "timezone" field.
	Timezone string `json:"timezone,omitempty"`
	// ChatHandle holds the value of the "chat_handle" field.
	ChatHandle string `json:"chat_handle,omitempty"`
	// ChatChannelID holds the value of the "chat_channel_id" field.
	ChatChannelID string `json:"chat_channel_id,omitempty"`
	// HandoverTemplateID holds the value of the "handover_template_id" field.
	HandoverTemplateID uuid.UUID `json:"handover_template_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OncallRosterQuery when eager-loading is set.
	Edges        OncallRosterEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OncallRosterEdges holds the relations/edges for other nodes in the graph.
type OncallRosterEdges struct {
	// Schedules holds the value of the schedules edge.
	Schedules []*OncallSchedule `json:"schedules,omitempty"`
	// HandoverTemplate holds the value of the handover_template edge.
	HandoverTemplate *OncallHandoverTemplate `json:"handover_template,omitempty"`
	// Teams holds the value of the teams edge.
	Teams []*Team `json:"teams,omitempty"`
	// Shifts holds the value of the shifts edge.
	Shifts []*OncallUserShift `json:"shifts,omitempty"`
	// Alerts holds the value of the alerts edge.
	Alerts []*OncallAlert `json:"alerts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// SchedulesOrErr returns the Schedules value or an error if the edge
// was not loaded in eager-loading.
func (e OncallRosterEdges) SchedulesOrErr() ([]*OncallSchedule, error) {
	if e.loadedTypes[0] {
		return e.Schedules, nil
	}
	return nil, &NotLoadedError{edge: "schedules"}
}

// HandoverTemplateOrErr returns the HandoverTemplate value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OncallRosterEdges) HandoverTemplateOrErr() (*OncallHandoverTemplate, error) {
	if e.HandoverTemplate != nil {
		return e.HandoverTemplate, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: oncallhandovertemplate.Label}
	}
	return nil, &NotLoadedError{edge: "handover_template"}
}

// TeamsOrErr returns the Teams value or an error if the edge
// was not loaded in eager-loading.
func (e OncallRosterEdges) TeamsOrErr() ([]*Team, error) {
	if e.loadedTypes[2] {
		return e.Teams, nil
	}
	return nil, &NotLoadedError{edge: "teams"}
}

// ShiftsOrErr returns the Shifts value or an error if the edge
// was not loaded in eager-loading.
func (e OncallRosterEdges) ShiftsOrErr() ([]*OncallUserShift, error) {
	if e.loadedTypes[3] {
		return e.Shifts, nil
	}
	return nil, &NotLoadedError{edge: "shifts"}
}

// AlertsOrErr returns the Alerts value or an error if the edge
// was not loaded in eager-loading.
func (e OncallRosterEdges) AlertsOrErr() ([]*OncallAlert, error) {
	if e.loadedTypes[4] {
		return e.Alerts, nil
	}
	return nil, &NotLoadedError{edge: "alerts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OncallRoster) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case oncallroster.FieldName, oncallroster.FieldSlug, oncallroster.FieldProviderID, oncallroster.FieldTimezone, oncallroster.FieldChatHandle, oncallroster.FieldChatChannelID:
			values[i] = new(sql.NullString)
		case oncallroster.FieldArchiveTime:
			values[i] = new(sql.NullTime)
		case oncallroster.FieldID, oncallroster.FieldHandoverTemplateID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OncallRoster fields.
func (or *OncallRoster) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case oncallroster.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				or.ID = *value
			}
		case oncallroster.FieldArchiveTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field archive_time", values[i])
			} else if value.Valid {
				or.ArchiveTime = value.Time
			}
		case oncallroster.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				or.Name = value.String
			}
		case oncallroster.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				or.Slug = value.String
			}
		case oncallroster.FieldProviderID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_id", values[i])
			} else if value.Valid {
				or.ProviderID = value.String
			}
		case oncallroster.FieldTimezone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field timezone", values[i])
			} else if value.Valid {
				or.Timezone = value.String
			}
		case oncallroster.FieldChatHandle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field chat_handle", values[i])
			} else if value.Valid {
				or.ChatHandle = value.String
			}
		case oncallroster.FieldChatChannelID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field chat_channel_id", values[i])
			} else if value.Valid {
				or.ChatChannelID = value.String
			}
		case oncallroster.FieldHandoverTemplateID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field handover_template_id", values[i])
			} else if value != nil {
				or.HandoverTemplateID = *value
			}
		default:
			or.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OncallRoster.
// This includes values selected through modifiers, order, etc.
func (or *OncallRoster) Value(name string) (ent.Value, error) {
	return or.selectValues.Get(name)
}

// QuerySchedules queries the "schedules" edge of the OncallRoster entity.
func (or *OncallRoster) QuerySchedules() *OncallScheduleQuery {
	return NewOncallRosterClient(or.config).QuerySchedules(or)
}

// QueryHandoverTemplate queries the "handover_template" edge of the OncallRoster entity.
func (or *OncallRoster) QueryHandoverTemplate() *OncallHandoverTemplateQuery {
	return NewOncallRosterClient(or.config).QueryHandoverTemplate(or)
}

// QueryTeams queries the "teams" edge of the OncallRoster entity.
func (or *OncallRoster) QueryTeams() *TeamQuery {
	return NewOncallRosterClient(or.config).QueryTeams(or)
}

// QueryShifts queries the "shifts" edge of the OncallRoster entity.
func (or *OncallRoster) QueryShifts() *OncallUserShiftQuery {
	return NewOncallRosterClient(or.config).QueryShifts(or)
}

// QueryAlerts queries the "alerts" edge of the OncallRoster entity.
func (or *OncallRoster) QueryAlerts() *OncallAlertQuery {
	return NewOncallRosterClient(or.config).QueryAlerts(or)
}

// Update returns a builder for updating this OncallRoster.
// Note that you need to call OncallRoster.Unwrap() before calling this method if this OncallRoster
// was returned from a transaction, and the transaction was committed or rolled back.
func (or *OncallRoster) Update() *OncallRosterUpdateOne {
	return NewOncallRosterClient(or.config).UpdateOne(or)
}

// Unwrap unwraps the OncallRoster entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (or *OncallRoster) Unwrap() *OncallRoster {
	_tx, ok := or.config.driver.(*txDriver)
	if !ok {
		panic("ent: OncallRoster is not a transactional entity")
	}
	or.config.driver = _tx.drv
	return or
}

// String implements the fmt.Stringer.
func (or *OncallRoster) String() string {
	var builder strings.Builder
	builder.WriteString("OncallRoster(")
	builder.WriteString(fmt.Sprintf("id=%v, ", or.ID))
	builder.WriteString("archive_time=")
	builder.WriteString(or.ArchiveTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(or.Name)
	builder.WriteString(", ")
	builder.WriteString("slug=")
	builder.WriteString(or.Slug)
	builder.WriteString(", ")
	builder.WriteString("provider_id=")
	builder.WriteString(or.ProviderID)
	builder.WriteString(", ")
	builder.WriteString("timezone=")
	builder.WriteString(or.Timezone)
	builder.WriteString(", ")
	builder.WriteString("chat_handle=")
	builder.WriteString(or.ChatHandle)
	builder.WriteString(", ")
	builder.WriteString("chat_channel_id=")
	builder.WriteString(or.ChatChannelID)
	builder.WriteString(", ")
	builder.WriteString("handover_template_id=")
	builder.WriteString(fmt.Sprintf("%v", or.HandoverTemplateID))
	builder.WriteByte(')')
	return builder.String()
}

// OncallRosters is a parsable slice of OncallRoster.
type OncallRosters []*OncallRoster
