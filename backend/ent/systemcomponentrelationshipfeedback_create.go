// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/systemcomponentrelationship"
	"github.com/rezible/rezible/ent/systemcomponentrelationshipfeedback"
	"github.com/rezible/rezible/ent/systemcomponentsignal"
)

// SystemComponentRelationshipFeedbackCreate is the builder for creating a SystemComponentRelationshipFeedback entity.
type SystemComponentRelationshipFeedbackCreate struct {
	config
	mutation *SystemComponentRelationshipFeedbackMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetRelationshipID sets the "relationship_id" field.
func (scrfc *SystemComponentRelationshipFeedbackCreate) SetRelationshipID(u uuid.UUID) *SystemComponentRelationshipFeedbackCreate {
	scrfc.mutation.SetRelationshipID(u)
	return scrfc
}

// SetSignalID sets the "signal_id" field.
func (scrfc *SystemComponentRelationshipFeedbackCreate) SetSignalID(u uuid.UUID) *SystemComponentRelationshipFeedbackCreate {
	scrfc.mutation.SetSignalID(u)
	return scrfc
}

// SetType sets the "type" field.
func (scrfc *SystemComponentRelationshipFeedbackCreate) SetType(s string) *SystemComponentRelationshipFeedbackCreate {
	scrfc.mutation.SetType(s)
	return scrfc
}

// SetDescription sets the "description" field.
func (scrfc *SystemComponentRelationshipFeedbackCreate) SetDescription(s string) *SystemComponentRelationshipFeedbackCreate {
	scrfc.mutation.SetDescription(s)
	return scrfc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (scrfc *SystemComponentRelationshipFeedbackCreate) SetNillableDescription(s *string) *SystemComponentRelationshipFeedbackCreate {
	if s != nil {
		scrfc.SetDescription(*s)
	}
	return scrfc
}

// SetCreatedAt sets the "created_at" field.
func (scrfc *SystemComponentRelationshipFeedbackCreate) SetCreatedAt(t time.Time) *SystemComponentRelationshipFeedbackCreate {
	scrfc.mutation.SetCreatedAt(t)
	return scrfc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (scrfc *SystemComponentRelationshipFeedbackCreate) SetNillableCreatedAt(t *time.Time) *SystemComponentRelationshipFeedbackCreate {
	if t != nil {
		scrfc.SetCreatedAt(*t)
	}
	return scrfc
}

// SetID sets the "id" field.
func (scrfc *SystemComponentRelationshipFeedbackCreate) SetID(u uuid.UUID) *SystemComponentRelationshipFeedbackCreate {
	scrfc.mutation.SetID(u)
	return scrfc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (scrfc *SystemComponentRelationshipFeedbackCreate) SetNillableID(u *uuid.UUID) *SystemComponentRelationshipFeedbackCreate {
	if u != nil {
		scrfc.SetID(*u)
	}
	return scrfc
}

// SetSignal sets the "signal" edge to the SystemComponentSignal entity.
func (scrfc *SystemComponentRelationshipFeedbackCreate) SetSignal(s *SystemComponentSignal) *SystemComponentRelationshipFeedbackCreate {
	return scrfc.SetSignalID(s.ID)
}

// SetRelationship sets the "relationship" edge to the SystemComponentRelationship entity.
func (scrfc *SystemComponentRelationshipFeedbackCreate) SetRelationship(s *SystemComponentRelationship) *SystemComponentRelationshipFeedbackCreate {
	return scrfc.SetRelationshipID(s.ID)
}

// Mutation returns the SystemComponentRelationshipFeedbackMutation object of the builder.
func (scrfc *SystemComponentRelationshipFeedbackCreate) Mutation() *SystemComponentRelationshipFeedbackMutation {
	return scrfc.mutation
}

// Save creates the SystemComponentRelationshipFeedback in the database.
func (scrfc *SystemComponentRelationshipFeedbackCreate) Save(ctx context.Context) (*SystemComponentRelationshipFeedback, error) {
	scrfc.defaults()
	return withHooks(ctx, scrfc.sqlSave, scrfc.mutation, scrfc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (scrfc *SystemComponentRelationshipFeedbackCreate) SaveX(ctx context.Context) *SystemComponentRelationshipFeedback {
	v, err := scrfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scrfc *SystemComponentRelationshipFeedbackCreate) Exec(ctx context.Context) error {
	_, err := scrfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scrfc *SystemComponentRelationshipFeedbackCreate) ExecX(ctx context.Context) {
	if err := scrfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scrfc *SystemComponentRelationshipFeedbackCreate) defaults() {
	if _, ok := scrfc.mutation.CreatedAt(); !ok {
		v := systemcomponentrelationshipfeedback.DefaultCreatedAt()
		scrfc.mutation.SetCreatedAt(v)
	}
	if _, ok := scrfc.mutation.ID(); !ok {
		v := systemcomponentrelationshipfeedback.DefaultID()
		scrfc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scrfc *SystemComponentRelationshipFeedbackCreate) check() error {
	if _, ok := scrfc.mutation.RelationshipID(); !ok {
		return &ValidationError{Name: "relationship_id", err: errors.New(`ent: missing required field "SystemComponentRelationshipFeedback.relationship_id"`)}
	}
	if _, ok := scrfc.mutation.SignalID(); !ok {
		return &ValidationError{Name: "signal_id", err: errors.New(`ent: missing required field "SystemComponentRelationshipFeedback.signal_id"`)}
	}
	if _, ok := scrfc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "SystemComponentRelationshipFeedback.type"`)}
	}
	if v, ok := scrfc.mutation.GetType(); ok {
		if err := systemcomponentrelationshipfeedback.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "SystemComponentRelationshipFeedback.type": %w`, err)}
		}
	}
	if _, ok := scrfc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SystemComponentRelationshipFeedback.created_at"`)}
	}
	if len(scrfc.mutation.SignalIDs()) == 0 {
		return &ValidationError{Name: "signal", err: errors.New(`ent: missing required edge "SystemComponentRelationshipFeedback.signal"`)}
	}
	if len(scrfc.mutation.RelationshipIDs()) == 0 {
		return &ValidationError{Name: "relationship", err: errors.New(`ent: missing required edge "SystemComponentRelationshipFeedback.relationship"`)}
	}
	return nil
}

func (scrfc *SystemComponentRelationshipFeedbackCreate) sqlSave(ctx context.Context) (*SystemComponentRelationshipFeedback, error) {
	if err := scrfc.check(); err != nil {
		return nil, err
	}
	_node, _spec := scrfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, scrfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	scrfc.mutation.id = &_node.ID
	scrfc.mutation.done = true
	return _node, nil
}

func (scrfc *SystemComponentRelationshipFeedbackCreate) createSpec() (*SystemComponentRelationshipFeedback, *sqlgraph.CreateSpec) {
	var (
		_node = &SystemComponentRelationshipFeedback{config: scrfc.config}
		_spec = sqlgraph.NewCreateSpec(systemcomponentrelationshipfeedback.Table, sqlgraph.NewFieldSpec(systemcomponentrelationshipfeedback.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = scrfc.conflict
	if id, ok := scrfc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := scrfc.mutation.GetType(); ok {
		_spec.SetField(systemcomponentrelationshipfeedback.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := scrfc.mutation.Description(); ok {
		_spec.SetField(systemcomponentrelationshipfeedback.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := scrfc.mutation.CreatedAt(); ok {
		_spec.SetField(systemcomponentrelationshipfeedback.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := scrfc.mutation.SignalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemcomponentrelationshipfeedback.SignalTable,
			Columns: []string{systemcomponentrelationshipfeedback.SignalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentsignal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SignalID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := scrfc.mutation.RelationshipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   systemcomponentrelationshipfeedback.RelationshipTable,
			Columns: []string{systemcomponentrelationshipfeedback.RelationshipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentrelationship.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RelationshipID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SystemComponentRelationshipFeedback.Create().
//		SetRelationshipID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SystemComponentRelationshipFeedbackUpsert) {
//			SetRelationshipID(v+v).
//		}).
//		Exec(ctx)
func (scrfc *SystemComponentRelationshipFeedbackCreate) OnConflict(opts ...sql.ConflictOption) *SystemComponentRelationshipFeedbackUpsertOne {
	scrfc.conflict = opts
	return &SystemComponentRelationshipFeedbackUpsertOne{
		create: scrfc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SystemComponentRelationshipFeedback.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scrfc *SystemComponentRelationshipFeedbackCreate) OnConflictColumns(columns ...string) *SystemComponentRelationshipFeedbackUpsertOne {
	scrfc.conflict = append(scrfc.conflict, sql.ConflictColumns(columns...))
	return &SystemComponentRelationshipFeedbackUpsertOne{
		create: scrfc,
	}
}

type (
	// SystemComponentRelationshipFeedbackUpsertOne is the builder for "upsert"-ing
	//  one SystemComponentRelationshipFeedback node.
	SystemComponentRelationshipFeedbackUpsertOne struct {
		create *SystemComponentRelationshipFeedbackCreate
	}

	// SystemComponentRelationshipFeedbackUpsert is the "OnConflict" setter.
	SystemComponentRelationshipFeedbackUpsert struct {
		*sql.UpdateSet
	}
)

// SetRelationshipID sets the "relationship_id" field.
func (u *SystemComponentRelationshipFeedbackUpsert) SetRelationshipID(v uuid.UUID) *SystemComponentRelationshipFeedbackUpsert {
	u.Set(systemcomponentrelationshipfeedback.FieldRelationshipID, v)
	return u
}

// UpdateRelationshipID sets the "relationship_id" field to the value that was provided on create.
func (u *SystemComponentRelationshipFeedbackUpsert) UpdateRelationshipID() *SystemComponentRelationshipFeedbackUpsert {
	u.SetExcluded(systemcomponentrelationshipfeedback.FieldRelationshipID)
	return u
}

// SetSignalID sets the "signal_id" field.
func (u *SystemComponentRelationshipFeedbackUpsert) SetSignalID(v uuid.UUID) *SystemComponentRelationshipFeedbackUpsert {
	u.Set(systemcomponentrelationshipfeedback.FieldSignalID, v)
	return u
}

// UpdateSignalID sets the "signal_id" field to the value that was provided on create.
func (u *SystemComponentRelationshipFeedbackUpsert) UpdateSignalID() *SystemComponentRelationshipFeedbackUpsert {
	u.SetExcluded(systemcomponentrelationshipfeedback.FieldSignalID)
	return u
}

// SetType sets the "type" field.
func (u *SystemComponentRelationshipFeedbackUpsert) SetType(v string) *SystemComponentRelationshipFeedbackUpsert {
	u.Set(systemcomponentrelationshipfeedback.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *SystemComponentRelationshipFeedbackUpsert) UpdateType() *SystemComponentRelationshipFeedbackUpsert {
	u.SetExcluded(systemcomponentrelationshipfeedback.FieldType)
	return u
}

// SetDescription sets the "description" field.
func (u *SystemComponentRelationshipFeedbackUpsert) SetDescription(v string) *SystemComponentRelationshipFeedbackUpsert {
	u.Set(systemcomponentrelationshipfeedback.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SystemComponentRelationshipFeedbackUpsert) UpdateDescription() *SystemComponentRelationshipFeedbackUpsert {
	u.SetExcluded(systemcomponentrelationshipfeedback.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *SystemComponentRelationshipFeedbackUpsert) ClearDescription() *SystemComponentRelationshipFeedbackUpsert {
	u.SetNull(systemcomponentrelationshipfeedback.FieldDescription)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SystemComponentRelationshipFeedbackUpsert) SetCreatedAt(v time.Time) *SystemComponentRelationshipFeedbackUpsert {
	u.Set(systemcomponentrelationshipfeedback.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SystemComponentRelationshipFeedbackUpsert) UpdateCreatedAt() *SystemComponentRelationshipFeedbackUpsert {
	u.SetExcluded(systemcomponentrelationshipfeedback.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SystemComponentRelationshipFeedback.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(systemcomponentrelationshipfeedback.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SystemComponentRelationshipFeedbackUpsertOne) UpdateNewValues() *SystemComponentRelationshipFeedbackUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(systemcomponentrelationshipfeedback.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SystemComponentRelationshipFeedback.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SystemComponentRelationshipFeedbackUpsertOne) Ignore() *SystemComponentRelationshipFeedbackUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SystemComponentRelationshipFeedbackUpsertOne) DoNothing() *SystemComponentRelationshipFeedbackUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SystemComponentRelationshipFeedbackCreate.OnConflict
// documentation for more info.
func (u *SystemComponentRelationshipFeedbackUpsertOne) Update(set func(*SystemComponentRelationshipFeedbackUpsert)) *SystemComponentRelationshipFeedbackUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SystemComponentRelationshipFeedbackUpsert{UpdateSet: update})
	}))
	return u
}

// SetRelationshipID sets the "relationship_id" field.
func (u *SystemComponentRelationshipFeedbackUpsertOne) SetRelationshipID(v uuid.UUID) *SystemComponentRelationshipFeedbackUpsertOne {
	return u.Update(func(s *SystemComponentRelationshipFeedbackUpsert) {
		s.SetRelationshipID(v)
	})
}

// UpdateRelationshipID sets the "relationship_id" field to the value that was provided on create.
func (u *SystemComponentRelationshipFeedbackUpsertOne) UpdateRelationshipID() *SystemComponentRelationshipFeedbackUpsertOne {
	return u.Update(func(s *SystemComponentRelationshipFeedbackUpsert) {
		s.UpdateRelationshipID()
	})
}

// SetSignalID sets the "signal_id" field.
func (u *SystemComponentRelationshipFeedbackUpsertOne) SetSignalID(v uuid.UUID) *SystemComponentRelationshipFeedbackUpsertOne {
	return u.Update(func(s *SystemComponentRelationshipFeedbackUpsert) {
		s.SetSignalID(v)
	})
}

// UpdateSignalID sets the "signal_id" field to the value that was provided on create.
func (u *SystemComponentRelationshipFeedbackUpsertOne) UpdateSignalID() *SystemComponentRelationshipFeedbackUpsertOne {
	return u.Update(func(s *SystemComponentRelationshipFeedbackUpsert) {
		s.UpdateSignalID()
	})
}

// SetType sets the "type" field.
func (u *SystemComponentRelationshipFeedbackUpsertOne) SetType(v string) *SystemComponentRelationshipFeedbackUpsertOne {
	return u.Update(func(s *SystemComponentRelationshipFeedbackUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *SystemComponentRelationshipFeedbackUpsertOne) UpdateType() *SystemComponentRelationshipFeedbackUpsertOne {
	return u.Update(func(s *SystemComponentRelationshipFeedbackUpsert) {
		s.UpdateType()
	})
}

// SetDescription sets the "description" field.
func (u *SystemComponentRelationshipFeedbackUpsertOne) SetDescription(v string) *SystemComponentRelationshipFeedbackUpsertOne {
	return u.Update(func(s *SystemComponentRelationshipFeedbackUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SystemComponentRelationshipFeedbackUpsertOne) UpdateDescription() *SystemComponentRelationshipFeedbackUpsertOne {
	return u.Update(func(s *SystemComponentRelationshipFeedbackUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *SystemComponentRelationshipFeedbackUpsertOne) ClearDescription() *SystemComponentRelationshipFeedbackUpsertOne {
	return u.Update(func(s *SystemComponentRelationshipFeedbackUpsert) {
		s.ClearDescription()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SystemComponentRelationshipFeedbackUpsertOne) SetCreatedAt(v time.Time) *SystemComponentRelationshipFeedbackUpsertOne {
	return u.Update(func(s *SystemComponentRelationshipFeedbackUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SystemComponentRelationshipFeedbackUpsertOne) UpdateCreatedAt() *SystemComponentRelationshipFeedbackUpsertOne {
	return u.Update(func(s *SystemComponentRelationshipFeedbackUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *SystemComponentRelationshipFeedbackUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SystemComponentRelationshipFeedbackCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SystemComponentRelationshipFeedbackUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SystemComponentRelationshipFeedbackUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: SystemComponentRelationshipFeedbackUpsertOne.ID is not supported by MySQL driver. Use SystemComponentRelationshipFeedbackUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SystemComponentRelationshipFeedbackUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SystemComponentRelationshipFeedbackCreateBulk is the builder for creating many SystemComponentRelationshipFeedback entities in bulk.
type SystemComponentRelationshipFeedbackCreateBulk struct {
	config
	err      error
	builders []*SystemComponentRelationshipFeedbackCreate
	conflict []sql.ConflictOption
}

// Save creates the SystemComponentRelationshipFeedback entities in the database.
func (scrfcb *SystemComponentRelationshipFeedbackCreateBulk) Save(ctx context.Context) ([]*SystemComponentRelationshipFeedback, error) {
	if scrfcb.err != nil {
		return nil, scrfcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scrfcb.builders))
	nodes := make([]*SystemComponentRelationshipFeedback, len(scrfcb.builders))
	mutators := make([]Mutator, len(scrfcb.builders))
	for i := range scrfcb.builders {
		func(i int, root context.Context) {
			builder := scrfcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SystemComponentRelationshipFeedbackMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scrfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scrfcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scrfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scrfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scrfcb *SystemComponentRelationshipFeedbackCreateBulk) SaveX(ctx context.Context) []*SystemComponentRelationshipFeedback {
	v, err := scrfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scrfcb *SystemComponentRelationshipFeedbackCreateBulk) Exec(ctx context.Context) error {
	_, err := scrfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scrfcb *SystemComponentRelationshipFeedbackCreateBulk) ExecX(ctx context.Context) {
	if err := scrfcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SystemComponentRelationshipFeedback.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SystemComponentRelationshipFeedbackUpsert) {
//			SetRelationshipID(v+v).
//		}).
//		Exec(ctx)
func (scrfcb *SystemComponentRelationshipFeedbackCreateBulk) OnConflict(opts ...sql.ConflictOption) *SystemComponentRelationshipFeedbackUpsertBulk {
	scrfcb.conflict = opts
	return &SystemComponentRelationshipFeedbackUpsertBulk{
		create: scrfcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SystemComponentRelationshipFeedback.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scrfcb *SystemComponentRelationshipFeedbackCreateBulk) OnConflictColumns(columns ...string) *SystemComponentRelationshipFeedbackUpsertBulk {
	scrfcb.conflict = append(scrfcb.conflict, sql.ConflictColumns(columns...))
	return &SystemComponentRelationshipFeedbackUpsertBulk{
		create: scrfcb,
	}
}

// SystemComponentRelationshipFeedbackUpsertBulk is the builder for "upsert"-ing
// a bulk of SystemComponentRelationshipFeedback nodes.
type SystemComponentRelationshipFeedbackUpsertBulk struct {
	create *SystemComponentRelationshipFeedbackCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SystemComponentRelationshipFeedback.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(systemcomponentrelationshipfeedback.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SystemComponentRelationshipFeedbackUpsertBulk) UpdateNewValues() *SystemComponentRelationshipFeedbackUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(systemcomponentrelationshipfeedback.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SystemComponentRelationshipFeedback.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SystemComponentRelationshipFeedbackUpsertBulk) Ignore() *SystemComponentRelationshipFeedbackUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SystemComponentRelationshipFeedbackUpsertBulk) DoNothing() *SystemComponentRelationshipFeedbackUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SystemComponentRelationshipFeedbackCreateBulk.OnConflict
// documentation for more info.
func (u *SystemComponentRelationshipFeedbackUpsertBulk) Update(set func(*SystemComponentRelationshipFeedbackUpsert)) *SystemComponentRelationshipFeedbackUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SystemComponentRelationshipFeedbackUpsert{UpdateSet: update})
	}))
	return u
}

// SetRelationshipID sets the "relationship_id" field.
func (u *SystemComponentRelationshipFeedbackUpsertBulk) SetRelationshipID(v uuid.UUID) *SystemComponentRelationshipFeedbackUpsertBulk {
	return u.Update(func(s *SystemComponentRelationshipFeedbackUpsert) {
		s.SetRelationshipID(v)
	})
}

// UpdateRelationshipID sets the "relationship_id" field to the value that was provided on create.
func (u *SystemComponentRelationshipFeedbackUpsertBulk) UpdateRelationshipID() *SystemComponentRelationshipFeedbackUpsertBulk {
	return u.Update(func(s *SystemComponentRelationshipFeedbackUpsert) {
		s.UpdateRelationshipID()
	})
}

// SetSignalID sets the "signal_id" field.
func (u *SystemComponentRelationshipFeedbackUpsertBulk) SetSignalID(v uuid.UUID) *SystemComponentRelationshipFeedbackUpsertBulk {
	return u.Update(func(s *SystemComponentRelationshipFeedbackUpsert) {
		s.SetSignalID(v)
	})
}

// UpdateSignalID sets the "signal_id" field to the value that was provided on create.
func (u *SystemComponentRelationshipFeedbackUpsertBulk) UpdateSignalID() *SystemComponentRelationshipFeedbackUpsertBulk {
	return u.Update(func(s *SystemComponentRelationshipFeedbackUpsert) {
		s.UpdateSignalID()
	})
}

// SetType sets the "type" field.
func (u *SystemComponentRelationshipFeedbackUpsertBulk) SetType(v string) *SystemComponentRelationshipFeedbackUpsertBulk {
	return u.Update(func(s *SystemComponentRelationshipFeedbackUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *SystemComponentRelationshipFeedbackUpsertBulk) UpdateType() *SystemComponentRelationshipFeedbackUpsertBulk {
	return u.Update(func(s *SystemComponentRelationshipFeedbackUpsert) {
		s.UpdateType()
	})
}

// SetDescription sets the "description" field.
func (u *SystemComponentRelationshipFeedbackUpsertBulk) SetDescription(v string) *SystemComponentRelationshipFeedbackUpsertBulk {
	return u.Update(func(s *SystemComponentRelationshipFeedbackUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SystemComponentRelationshipFeedbackUpsertBulk) UpdateDescription() *SystemComponentRelationshipFeedbackUpsertBulk {
	return u.Update(func(s *SystemComponentRelationshipFeedbackUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *SystemComponentRelationshipFeedbackUpsertBulk) ClearDescription() *SystemComponentRelationshipFeedbackUpsertBulk {
	return u.Update(func(s *SystemComponentRelationshipFeedbackUpsert) {
		s.ClearDescription()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SystemComponentRelationshipFeedbackUpsertBulk) SetCreatedAt(v time.Time) *SystemComponentRelationshipFeedbackUpsertBulk {
	return u.Update(func(s *SystemComponentRelationshipFeedbackUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SystemComponentRelationshipFeedbackUpsertBulk) UpdateCreatedAt() *SystemComponentRelationshipFeedbackUpsertBulk {
	return u.Update(func(s *SystemComponentRelationshipFeedbackUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *SystemComponentRelationshipFeedbackUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SystemComponentRelationshipFeedbackCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SystemComponentRelationshipFeedbackCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SystemComponentRelationshipFeedbackUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
