// Code generated by ent, DO NOT EDIT.

package incidenteventcontext

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldLTE(FieldID, id))
}

// SystemState applies equality check predicate on the "system_state" field. It's identical to SystemStateEQ.
func SystemState(v string) predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldEQ(FieldSystemState, v))
}

// DecisionRationale applies equality check predicate on the "decision_rationale" field. It's identical to DecisionRationaleEQ.
func DecisionRationale(v string) predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldEQ(FieldDecisionRationale, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldEQ(FieldCreatedAt, v))
}

// SystemStateEQ applies the EQ predicate on the "system_state" field.
func SystemStateEQ(v string) predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldEQ(FieldSystemState, v))
}

// SystemStateNEQ applies the NEQ predicate on the "system_state" field.
func SystemStateNEQ(v string) predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldNEQ(FieldSystemState, v))
}

// SystemStateIn applies the In predicate on the "system_state" field.
func SystemStateIn(vs ...string) predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldIn(FieldSystemState, vs...))
}

// SystemStateNotIn applies the NotIn predicate on the "system_state" field.
func SystemStateNotIn(vs ...string) predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldNotIn(FieldSystemState, vs...))
}

// SystemStateGT applies the GT predicate on the "system_state" field.
func SystemStateGT(v string) predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldGT(FieldSystemState, v))
}

// SystemStateGTE applies the GTE predicate on the "system_state" field.
func SystemStateGTE(v string) predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldGTE(FieldSystemState, v))
}

// SystemStateLT applies the LT predicate on the "system_state" field.
func SystemStateLT(v string) predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldLT(FieldSystemState, v))
}

// SystemStateLTE applies the LTE predicate on the "system_state" field.
func SystemStateLTE(v string) predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldLTE(FieldSystemState, v))
}

// SystemStateContains applies the Contains predicate on the "system_state" field.
func SystemStateContains(v string) predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldContains(FieldSystemState, v))
}

// SystemStateHasPrefix applies the HasPrefix predicate on the "system_state" field.
func SystemStateHasPrefix(v string) predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldHasPrefix(FieldSystemState, v))
}

// SystemStateHasSuffix applies the HasSuffix predicate on the "system_state" field.
func SystemStateHasSuffix(v string) predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldHasSuffix(FieldSystemState, v))
}

// SystemStateIsNil applies the IsNil predicate on the "system_state" field.
func SystemStateIsNil() predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldIsNull(FieldSystemState))
}

// SystemStateNotNil applies the NotNil predicate on the "system_state" field.
func SystemStateNotNil() predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldNotNull(FieldSystemState))
}

// SystemStateEqualFold applies the EqualFold predicate on the "system_state" field.
func SystemStateEqualFold(v string) predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldEqualFold(FieldSystemState, v))
}

// SystemStateContainsFold applies the ContainsFold predicate on the "system_state" field.
func SystemStateContainsFold(v string) predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldContainsFold(FieldSystemState, v))
}

// DecisionOptionsIsNil applies the IsNil predicate on the "decision_options" field.
func DecisionOptionsIsNil() predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldIsNull(FieldDecisionOptions))
}

// DecisionOptionsNotNil applies the NotNil predicate on the "decision_options" field.
func DecisionOptionsNotNil() predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldNotNull(FieldDecisionOptions))
}

// DecisionRationaleEQ applies the EQ predicate on the "decision_rationale" field.
func DecisionRationaleEQ(v string) predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldEQ(FieldDecisionRationale, v))
}

// DecisionRationaleNEQ applies the NEQ predicate on the "decision_rationale" field.
func DecisionRationaleNEQ(v string) predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldNEQ(FieldDecisionRationale, v))
}

// DecisionRationaleIn applies the In predicate on the "decision_rationale" field.
func DecisionRationaleIn(vs ...string) predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldIn(FieldDecisionRationale, vs...))
}

// DecisionRationaleNotIn applies the NotIn predicate on the "decision_rationale" field.
func DecisionRationaleNotIn(vs ...string) predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldNotIn(FieldDecisionRationale, vs...))
}

// DecisionRationaleGT applies the GT predicate on the "decision_rationale" field.
func DecisionRationaleGT(v string) predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldGT(FieldDecisionRationale, v))
}

// DecisionRationaleGTE applies the GTE predicate on the "decision_rationale" field.
func DecisionRationaleGTE(v string) predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldGTE(FieldDecisionRationale, v))
}

// DecisionRationaleLT applies the LT predicate on the "decision_rationale" field.
func DecisionRationaleLT(v string) predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldLT(FieldDecisionRationale, v))
}

// DecisionRationaleLTE applies the LTE predicate on the "decision_rationale" field.
func DecisionRationaleLTE(v string) predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldLTE(FieldDecisionRationale, v))
}

// DecisionRationaleContains applies the Contains predicate on the "decision_rationale" field.
func DecisionRationaleContains(v string) predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldContains(FieldDecisionRationale, v))
}

// DecisionRationaleHasPrefix applies the HasPrefix predicate on the "decision_rationale" field.
func DecisionRationaleHasPrefix(v string) predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldHasPrefix(FieldDecisionRationale, v))
}

// DecisionRationaleHasSuffix applies the HasSuffix predicate on the "decision_rationale" field.
func DecisionRationaleHasSuffix(v string) predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldHasSuffix(FieldDecisionRationale, v))
}

// DecisionRationaleIsNil applies the IsNil predicate on the "decision_rationale" field.
func DecisionRationaleIsNil() predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldIsNull(FieldDecisionRationale))
}

// DecisionRationaleNotNil applies the NotNil predicate on the "decision_rationale" field.
func DecisionRationaleNotNil() predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldNotNull(FieldDecisionRationale))
}

// DecisionRationaleEqualFold applies the EqualFold predicate on the "decision_rationale" field.
func DecisionRationaleEqualFold(v string) predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldEqualFold(FieldDecisionRationale, v))
}

// DecisionRationaleContainsFold applies the ContainsFold predicate on the "decision_rationale" field.
func DecisionRationaleContainsFold(v string) predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldContainsFold(FieldDecisionRationale, v))
}

// InvolvedPersonnelIsNil applies the IsNil predicate on the "involved_personnel" field.
func InvolvedPersonnelIsNil() predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldIsNull(FieldInvolvedPersonnel))
}

// InvolvedPersonnelNotNil applies the NotNil predicate on the "involved_personnel" field.
func InvolvedPersonnelNotNil() predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldNotNull(FieldInvolvedPersonnel))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.FieldLTE(FieldCreatedAt, v))
}

// HasEvent applies the HasEdge predicate on the "event" edge.
func HasEvent() predicate.IncidentEventContext {
	return predicate.IncidentEventContext(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, EventTable, EventColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventWith applies the HasEdge predicate on the "event" edge with a given conditions (other predicates).
func HasEventWith(preds ...predicate.IncidentEvent) predicate.IncidentEventContext {
	return predicate.IncidentEventContext(func(s *sql.Selector) {
		step := newEventStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.IncidentEventContext) predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.IncidentEventContext) predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.IncidentEventContext) predicate.IncidentEventContext {
	return predicate.IncidentEventContext(sql.NotPredicates(p))
}
