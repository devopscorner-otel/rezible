// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rezible/rezible/ent/incidentroleassignment"
	"github.com/rezible/rezible/ent/predicate"
)

// IncidentRoleAssignmentDelete is the builder for deleting a IncidentRoleAssignment entity.
type IncidentRoleAssignmentDelete struct {
	config
	hooks    []Hook
	mutation *IncidentRoleAssignmentMutation
}

// Where appends a list predicates to the IncidentRoleAssignmentDelete builder.
func (irad *IncidentRoleAssignmentDelete) Where(ps ...predicate.IncidentRoleAssignment) *IncidentRoleAssignmentDelete {
	irad.mutation.Where(ps...)
	return irad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (irad *IncidentRoleAssignmentDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, irad.sqlExec, irad.mutation, irad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (irad *IncidentRoleAssignmentDelete) ExecX(ctx context.Context) int {
	n, err := irad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (irad *IncidentRoleAssignmentDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(incidentroleassignment.Table, sqlgraph.NewFieldSpec(incidentroleassignment.FieldID, field.TypeUUID))
	if ps := irad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, irad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	irad.mutation.done = true
	return affected, err
}

// IncidentRoleAssignmentDeleteOne is the builder for deleting a single IncidentRoleAssignment entity.
type IncidentRoleAssignmentDeleteOne struct {
	irad *IncidentRoleAssignmentDelete
}

// Where appends a list predicates to the IncidentRoleAssignmentDelete builder.
func (irado *IncidentRoleAssignmentDeleteOne) Where(ps ...predicate.IncidentRoleAssignment) *IncidentRoleAssignmentDeleteOne {
	irado.irad.mutation.Where(ps...)
	return irado
}

// Exec executes the deletion query.
func (irado *IncidentRoleAssignmentDeleteOne) Exec(ctx context.Context) error {
	n, err := irado.irad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{incidentroleassignment.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (irado *IncidentRoleAssignmentDeleteOne) ExecX(ctx context.Context) {
	if err := irado.Exec(ctx); err != nil {
		panic(err)
	}
}
