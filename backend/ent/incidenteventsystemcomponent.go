// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/incidenteventsystemcomponent"
	"github.com/rezible/rezible/ent/systemcomponent"
	"github.com/rezible/rezible/ent/tenant"
)

// IncidentEventSystemComponent is the model entity for the IncidentEventSystemComponent schema.
type IncidentEventSystemComponent struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID int `json:"tenant_id,omitempty"`
	// IncidentEventID holds the value of the "incident_event_id" field.
	IncidentEventID uuid.UUID `json:"incident_event_id,omitempty"`
	// SystemComponentID holds the value of the "system_component_id" field.
	SystemComponentID uuid.UUID `json:"system_component_id,omitempty"`
	// Relationship holds the value of the "relationship" field.
	Relationship incidenteventsystemcomponent.Relationship `json:"relationship,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IncidentEventSystemComponentQuery when eager-loading is set.
	Edges        IncidentEventSystemComponentEdges `json:"edges"`
	selectValues sql.SelectValues
}

// IncidentEventSystemComponentEdges holds the relations/edges for other nodes in the graph.
type IncidentEventSystemComponentEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Event holds the value of the event edge.
	Event *IncidentEventSystemComponent `json:"event,omitempty"`
	// SystemComponent holds the value of the system_component edge.
	SystemComponent *SystemComponent `json:"system_component,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IncidentEventSystemComponentEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IncidentEventSystemComponentEdges) EventOrErr() (*IncidentEventSystemComponent, error) {
	if e.Event != nil {
		return e.Event, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: incidenteventsystemcomponent.Label}
	}
	return nil, &NotLoadedError{edge: "event"}
}

// SystemComponentOrErr returns the SystemComponent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IncidentEventSystemComponentEdges) SystemComponentOrErr() (*SystemComponent, error) {
	if e.SystemComponent != nil {
		return e.SystemComponent, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: systemcomponent.Label}
	}
	return nil, &NotLoadedError{edge: "system_component"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IncidentEventSystemComponent) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case incidenteventsystemcomponent.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case incidenteventsystemcomponent.FieldRelationship:
			values[i] = new(sql.NullString)
		case incidenteventsystemcomponent.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case incidenteventsystemcomponent.FieldID, incidenteventsystemcomponent.FieldIncidentEventID, incidenteventsystemcomponent.FieldSystemComponentID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IncidentEventSystemComponent fields.
func (iesc *IncidentEventSystemComponent) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case incidenteventsystemcomponent.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				iesc.ID = *value
			}
		case incidenteventsystemcomponent.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				iesc.TenantID = int(value.Int64)
			}
		case incidenteventsystemcomponent.FieldIncidentEventID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field incident_event_id", values[i])
			} else if value != nil {
				iesc.IncidentEventID = *value
			}
		case incidenteventsystemcomponent.FieldSystemComponentID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field system_component_id", values[i])
			} else if value != nil {
				iesc.SystemComponentID = *value
			}
		case incidenteventsystemcomponent.FieldRelationship:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field relationship", values[i])
			} else if value.Valid {
				iesc.Relationship = incidenteventsystemcomponent.Relationship(value.String)
			}
		case incidenteventsystemcomponent.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				iesc.CreatedAt = value.Time
			}
		default:
			iesc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the IncidentEventSystemComponent.
// This includes values selected through modifiers, order, etc.
func (iesc *IncidentEventSystemComponent) Value(name string) (ent.Value, error) {
	return iesc.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the IncidentEventSystemComponent entity.
func (iesc *IncidentEventSystemComponent) QueryTenant() *TenantQuery {
	return NewIncidentEventSystemComponentClient(iesc.config).QueryTenant(iesc)
}

// QueryEvent queries the "event" edge of the IncidentEventSystemComponent entity.
func (iesc *IncidentEventSystemComponent) QueryEvent() *IncidentEventSystemComponentQuery {
	return NewIncidentEventSystemComponentClient(iesc.config).QueryEvent(iesc)
}

// QuerySystemComponent queries the "system_component" edge of the IncidentEventSystemComponent entity.
func (iesc *IncidentEventSystemComponent) QuerySystemComponent() *SystemComponentQuery {
	return NewIncidentEventSystemComponentClient(iesc.config).QuerySystemComponent(iesc)
}

// Update returns a builder for updating this IncidentEventSystemComponent.
// Note that you need to call IncidentEventSystemComponent.Unwrap() before calling this method if this IncidentEventSystemComponent
// was returned from a transaction, and the transaction was committed or rolled back.
func (iesc *IncidentEventSystemComponent) Update() *IncidentEventSystemComponentUpdateOne {
	return NewIncidentEventSystemComponentClient(iesc.config).UpdateOne(iesc)
}

// Unwrap unwraps the IncidentEventSystemComponent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (iesc *IncidentEventSystemComponent) Unwrap() *IncidentEventSystemComponent {
	_tx, ok := iesc.config.driver.(*txDriver)
	if !ok {
		panic("ent: IncidentEventSystemComponent is not a transactional entity")
	}
	iesc.config.driver = _tx.drv
	return iesc
}

// String implements the fmt.Stringer.
func (iesc *IncidentEventSystemComponent) String() string {
	var builder strings.Builder
	builder.WriteString("IncidentEventSystemComponent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", iesc.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", iesc.TenantID))
	builder.WriteString(", ")
	builder.WriteString("incident_event_id=")
	builder.WriteString(fmt.Sprintf("%v", iesc.IncidentEventID))
	builder.WriteString(", ")
	builder.WriteString("system_component_id=")
	builder.WriteString(fmt.Sprintf("%v", iesc.SystemComponentID))
	builder.WriteString(", ")
	builder.WriteString("relationship=")
	builder.WriteString(fmt.Sprintf("%v", iesc.Relationship))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(iesc.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// IncidentEventSystemComponents is a parsable slice of IncidentEventSystemComponent.
type IncidentEventSystemComponents []*IncidentEventSystemComponent
