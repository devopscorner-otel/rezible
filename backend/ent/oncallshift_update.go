// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/oncallroster"
	"github.com/rezible/rezible/ent/oncallshift"
	"github.com/rezible/rezible/ent/oncallshifthandover"
	"github.com/rezible/rezible/ent/oncallshiftmetrics"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/user"
)

// OncallShiftUpdate is the builder for updating OncallShift entities.
type OncallShiftUpdate struct {
	config
	hooks     []Hook
	mutation  *OncallShiftMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OncallShiftUpdate builder.
func (osu *OncallShiftUpdate) Where(ps ...predicate.OncallShift) *OncallShiftUpdate {
	osu.mutation.Where(ps...)
	return osu
}

// SetUserID sets the "user_id" field.
func (osu *OncallShiftUpdate) SetUserID(u uuid.UUID) *OncallShiftUpdate {
	osu.mutation.SetUserID(u)
	return osu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (osu *OncallShiftUpdate) SetNillableUserID(u *uuid.UUID) *OncallShiftUpdate {
	if u != nil {
		osu.SetUserID(*u)
	}
	return osu
}

// SetRosterID sets the "roster_id" field.
func (osu *OncallShiftUpdate) SetRosterID(u uuid.UUID) *OncallShiftUpdate {
	osu.mutation.SetRosterID(u)
	return osu
}

// SetNillableRosterID sets the "roster_id" field if the given value is not nil.
func (osu *OncallShiftUpdate) SetNillableRosterID(u *uuid.UUID) *OncallShiftUpdate {
	if u != nil {
		osu.SetRosterID(*u)
	}
	return osu
}

// SetProviderID sets the "provider_id" field.
func (osu *OncallShiftUpdate) SetProviderID(s string) *OncallShiftUpdate {
	osu.mutation.SetProviderID(s)
	return osu
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (osu *OncallShiftUpdate) SetNillableProviderID(s *string) *OncallShiftUpdate {
	if s != nil {
		osu.SetProviderID(*s)
	}
	return osu
}

// ClearProviderID clears the value of the "provider_id" field.
func (osu *OncallShiftUpdate) ClearProviderID() *OncallShiftUpdate {
	osu.mutation.ClearProviderID()
	return osu
}

// SetRole sets the "role" field.
func (osu *OncallShiftUpdate) SetRole(o oncallshift.Role) *OncallShiftUpdate {
	osu.mutation.SetRole(o)
	return osu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (osu *OncallShiftUpdate) SetNillableRole(o *oncallshift.Role) *OncallShiftUpdate {
	if o != nil {
		osu.SetRole(*o)
	}
	return osu
}

// ClearRole clears the value of the "role" field.
func (osu *OncallShiftUpdate) ClearRole() *OncallShiftUpdate {
	osu.mutation.ClearRole()
	return osu
}

// SetPrimaryShiftID sets the "primary_shift_id" field.
func (osu *OncallShiftUpdate) SetPrimaryShiftID(u uuid.UUID) *OncallShiftUpdate {
	osu.mutation.SetPrimaryShiftID(u)
	return osu
}

// SetNillablePrimaryShiftID sets the "primary_shift_id" field if the given value is not nil.
func (osu *OncallShiftUpdate) SetNillablePrimaryShiftID(u *uuid.UUID) *OncallShiftUpdate {
	if u != nil {
		osu.SetPrimaryShiftID(*u)
	}
	return osu
}

// ClearPrimaryShiftID clears the value of the "primary_shift_id" field.
func (osu *OncallShiftUpdate) ClearPrimaryShiftID() *OncallShiftUpdate {
	osu.mutation.ClearPrimaryShiftID()
	return osu
}

// SetStartAt sets the "start_at" field.
func (osu *OncallShiftUpdate) SetStartAt(t time.Time) *OncallShiftUpdate {
	osu.mutation.SetStartAt(t)
	return osu
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (osu *OncallShiftUpdate) SetNillableStartAt(t *time.Time) *OncallShiftUpdate {
	if t != nil {
		osu.SetStartAt(*t)
	}
	return osu
}

// SetEndAt sets the "end_at" field.
func (osu *OncallShiftUpdate) SetEndAt(t time.Time) *OncallShiftUpdate {
	osu.mutation.SetEndAt(t)
	return osu
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (osu *OncallShiftUpdate) SetNillableEndAt(t *time.Time) *OncallShiftUpdate {
	if t != nil {
		osu.SetEndAt(*t)
	}
	return osu
}

// SetUser sets the "user" edge to the User entity.
func (osu *OncallShiftUpdate) SetUser(u *User) *OncallShiftUpdate {
	return osu.SetUserID(u.ID)
}

// SetRoster sets the "roster" edge to the OncallRoster entity.
func (osu *OncallShiftUpdate) SetRoster(o *OncallRoster) *OncallShiftUpdate {
	return osu.SetRosterID(o.ID)
}

// SetPrimaryShift sets the "primary_shift" edge to the OncallShift entity.
func (osu *OncallShiftUpdate) SetPrimaryShift(o *OncallShift) *OncallShiftUpdate {
	return osu.SetPrimaryShiftID(o.ID)
}

// SetHandoverID sets the "handover" edge to the OncallShiftHandover entity by ID.
func (osu *OncallShiftUpdate) SetHandoverID(id uuid.UUID) *OncallShiftUpdate {
	osu.mutation.SetHandoverID(id)
	return osu
}

// SetNillableHandoverID sets the "handover" edge to the OncallShiftHandover entity by ID if the given value is not nil.
func (osu *OncallShiftUpdate) SetNillableHandoverID(id *uuid.UUID) *OncallShiftUpdate {
	if id != nil {
		osu = osu.SetHandoverID(*id)
	}
	return osu
}

// SetHandover sets the "handover" edge to the OncallShiftHandover entity.
func (osu *OncallShiftUpdate) SetHandover(o *OncallShiftHandover) *OncallShiftUpdate {
	return osu.SetHandoverID(o.ID)
}

// SetMetricsID sets the "metrics" edge to the OncallShiftMetrics entity by ID.
func (osu *OncallShiftUpdate) SetMetricsID(id uuid.UUID) *OncallShiftUpdate {
	osu.mutation.SetMetricsID(id)
	return osu
}

// SetNillableMetricsID sets the "metrics" edge to the OncallShiftMetrics entity by ID if the given value is not nil.
func (osu *OncallShiftUpdate) SetNillableMetricsID(id *uuid.UUID) *OncallShiftUpdate {
	if id != nil {
		osu = osu.SetMetricsID(*id)
	}
	return osu
}

// SetMetrics sets the "metrics" edge to the OncallShiftMetrics entity.
func (osu *OncallShiftUpdate) SetMetrics(o *OncallShiftMetrics) *OncallShiftUpdate {
	return osu.SetMetricsID(o.ID)
}

// Mutation returns the OncallShiftMutation object of the builder.
func (osu *OncallShiftUpdate) Mutation() *OncallShiftMutation {
	return osu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (osu *OncallShiftUpdate) ClearUser() *OncallShiftUpdate {
	osu.mutation.ClearUser()
	return osu
}

// ClearRoster clears the "roster" edge to the OncallRoster entity.
func (osu *OncallShiftUpdate) ClearRoster() *OncallShiftUpdate {
	osu.mutation.ClearRoster()
	return osu
}

// ClearPrimaryShift clears the "primary_shift" edge to the OncallShift entity.
func (osu *OncallShiftUpdate) ClearPrimaryShift() *OncallShiftUpdate {
	osu.mutation.ClearPrimaryShift()
	return osu
}

// ClearHandover clears the "handover" edge to the OncallShiftHandover entity.
func (osu *OncallShiftUpdate) ClearHandover() *OncallShiftUpdate {
	osu.mutation.ClearHandover()
	return osu
}

// ClearMetrics clears the "metrics" edge to the OncallShiftMetrics entity.
func (osu *OncallShiftUpdate) ClearMetrics() *OncallShiftUpdate {
	osu.mutation.ClearMetrics()
	return osu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (osu *OncallShiftUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, osu.sqlSave, osu.mutation, osu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (osu *OncallShiftUpdate) SaveX(ctx context.Context) int {
	affected, err := osu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (osu *OncallShiftUpdate) Exec(ctx context.Context) error {
	_, err := osu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osu *OncallShiftUpdate) ExecX(ctx context.Context) {
	if err := osu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (osu *OncallShiftUpdate) check() error {
	if v, ok := osu.mutation.Role(); ok {
		if err := oncallshift.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "OncallShift.role": %w`, err)}
		}
	}
	if osu.mutation.TenantCleared() && len(osu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallShift.tenant"`)
	}
	if osu.mutation.UserCleared() && len(osu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallShift.user"`)
	}
	if osu.mutation.RosterCleared() && len(osu.mutation.RosterIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallShift.roster"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (osu *OncallShiftUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OncallShiftUpdate {
	osu.modifiers = append(osu.modifiers, modifiers...)
	return osu
}

func (osu *OncallShiftUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := osu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(oncallshift.Table, oncallshift.Columns, sqlgraph.NewFieldSpec(oncallshift.FieldID, field.TypeUUID))
	if ps := osu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := osu.mutation.ProviderID(); ok {
		_spec.SetField(oncallshift.FieldProviderID, field.TypeString, value)
	}
	if osu.mutation.ProviderIDCleared() {
		_spec.ClearField(oncallshift.FieldProviderID, field.TypeString)
	}
	if value, ok := osu.mutation.Role(); ok {
		_spec.SetField(oncallshift.FieldRole, field.TypeEnum, value)
	}
	if osu.mutation.RoleCleared() {
		_spec.ClearField(oncallshift.FieldRole, field.TypeEnum)
	}
	if value, ok := osu.mutation.StartAt(); ok {
		_spec.SetField(oncallshift.FieldStartAt, field.TypeTime, value)
	}
	if value, ok := osu.mutation.EndAt(); ok {
		_spec.SetField(oncallshift.FieldEndAt, field.TypeTime, value)
	}
	if osu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallshift.UserTable,
			Columns: []string{oncallshift.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallshift.UserTable,
			Columns: []string{oncallshift.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if osu.mutation.RosterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallshift.RosterTable,
			Columns: []string{oncallshift.RosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osu.mutation.RosterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallshift.RosterTable,
			Columns: []string{oncallshift.RosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if osu.mutation.PrimaryShiftCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oncallshift.PrimaryShiftTable,
			Columns: []string{oncallshift.PrimaryShiftColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallshift.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osu.mutation.PrimaryShiftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oncallshift.PrimaryShiftTable,
			Columns: []string{oncallshift.PrimaryShiftColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallshift.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if osu.mutation.HandoverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oncallshift.HandoverTable,
			Columns: []string{oncallshift.HandoverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallshifthandover.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osu.mutation.HandoverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oncallshift.HandoverTable,
			Columns: []string{oncallshift.HandoverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallshifthandover.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if osu.mutation.MetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oncallshift.MetricsTable,
			Columns: []string{oncallshift.MetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallshiftmetrics.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osu.mutation.MetricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oncallshift.MetricsTable,
			Columns: []string{oncallshift.MetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallshiftmetrics.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(osu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, osu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oncallshift.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	osu.mutation.done = true
	return n, nil
}

// OncallShiftUpdateOne is the builder for updating a single OncallShift entity.
type OncallShiftUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OncallShiftMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUserID sets the "user_id" field.
func (osuo *OncallShiftUpdateOne) SetUserID(u uuid.UUID) *OncallShiftUpdateOne {
	osuo.mutation.SetUserID(u)
	return osuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (osuo *OncallShiftUpdateOne) SetNillableUserID(u *uuid.UUID) *OncallShiftUpdateOne {
	if u != nil {
		osuo.SetUserID(*u)
	}
	return osuo
}

// SetRosterID sets the "roster_id" field.
func (osuo *OncallShiftUpdateOne) SetRosterID(u uuid.UUID) *OncallShiftUpdateOne {
	osuo.mutation.SetRosterID(u)
	return osuo
}

// SetNillableRosterID sets the "roster_id" field if the given value is not nil.
func (osuo *OncallShiftUpdateOne) SetNillableRosterID(u *uuid.UUID) *OncallShiftUpdateOne {
	if u != nil {
		osuo.SetRosterID(*u)
	}
	return osuo
}

// SetProviderID sets the "provider_id" field.
func (osuo *OncallShiftUpdateOne) SetProviderID(s string) *OncallShiftUpdateOne {
	osuo.mutation.SetProviderID(s)
	return osuo
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (osuo *OncallShiftUpdateOne) SetNillableProviderID(s *string) *OncallShiftUpdateOne {
	if s != nil {
		osuo.SetProviderID(*s)
	}
	return osuo
}

// ClearProviderID clears the value of the "provider_id" field.
func (osuo *OncallShiftUpdateOne) ClearProviderID() *OncallShiftUpdateOne {
	osuo.mutation.ClearProviderID()
	return osuo
}

// SetRole sets the "role" field.
func (osuo *OncallShiftUpdateOne) SetRole(o oncallshift.Role) *OncallShiftUpdateOne {
	osuo.mutation.SetRole(o)
	return osuo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (osuo *OncallShiftUpdateOne) SetNillableRole(o *oncallshift.Role) *OncallShiftUpdateOne {
	if o != nil {
		osuo.SetRole(*o)
	}
	return osuo
}

// ClearRole clears the value of the "role" field.
func (osuo *OncallShiftUpdateOne) ClearRole() *OncallShiftUpdateOne {
	osuo.mutation.ClearRole()
	return osuo
}

// SetPrimaryShiftID sets the "primary_shift_id" field.
func (osuo *OncallShiftUpdateOne) SetPrimaryShiftID(u uuid.UUID) *OncallShiftUpdateOne {
	osuo.mutation.SetPrimaryShiftID(u)
	return osuo
}

// SetNillablePrimaryShiftID sets the "primary_shift_id" field if the given value is not nil.
func (osuo *OncallShiftUpdateOne) SetNillablePrimaryShiftID(u *uuid.UUID) *OncallShiftUpdateOne {
	if u != nil {
		osuo.SetPrimaryShiftID(*u)
	}
	return osuo
}

// ClearPrimaryShiftID clears the value of the "primary_shift_id" field.
func (osuo *OncallShiftUpdateOne) ClearPrimaryShiftID() *OncallShiftUpdateOne {
	osuo.mutation.ClearPrimaryShiftID()
	return osuo
}

// SetStartAt sets the "start_at" field.
func (osuo *OncallShiftUpdateOne) SetStartAt(t time.Time) *OncallShiftUpdateOne {
	osuo.mutation.SetStartAt(t)
	return osuo
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (osuo *OncallShiftUpdateOne) SetNillableStartAt(t *time.Time) *OncallShiftUpdateOne {
	if t != nil {
		osuo.SetStartAt(*t)
	}
	return osuo
}

// SetEndAt sets the "end_at" field.
func (osuo *OncallShiftUpdateOne) SetEndAt(t time.Time) *OncallShiftUpdateOne {
	osuo.mutation.SetEndAt(t)
	return osuo
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (osuo *OncallShiftUpdateOne) SetNillableEndAt(t *time.Time) *OncallShiftUpdateOne {
	if t != nil {
		osuo.SetEndAt(*t)
	}
	return osuo
}

// SetUser sets the "user" edge to the User entity.
func (osuo *OncallShiftUpdateOne) SetUser(u *User) *OncallShiftUpdateOne {
	return osuo.SetUserID(u.ID)
}

// SetRoster sets the "roster" edge to the OncallRoster entity.
func (osuo *OncallShiftUpdateOne) SetRoster(o *OncallRoster) *OncallShiftUpdateOne {
	return osuo.SetRosterID(o.ID)
}

// SetPrimaryShift sets the "primary_shift" edge to the OncallShift entity.
func (osuo *OncallShiftUpdateOne) SetPrimaryShift(o *OncallShift) *OncallShiftUpdateOne {
	return osuo.SetPrimaryShiftID(o.ID)
}

// SetHandoverID sets the "handover" edge to the OncallShiftHandover entity by ID.
func (osuo *OncallShiftUpdateOne) SetHandoverID(id uuid.UUID) *OncallShiftUpdateOne {
	osuo.mutation.SetHandoverID(id)
	return osuo
}

// SetNillableHandoverID sets the "handover" edge to the OncallShiftHandover entity by ID if the given value is not nil.
func (osuo *OncallShiftUpdateOne) SetNillableHandoverID(id *uuid.UUID) *OncallShiftUpdateOne {
	if id != nil {
		osuo = osuo.SetHandoverID(*id)
	}
	return osuo
}

// SetHandover sets the "handover" edge to the OncallShiftHandover entity.
func (osuo *OncallShiftUpdateOne) SetHandover(o *OncallShiftHandover) *OncallShiftUpdateOne {
	return osuo.SetHandoverID(o.ID)
}

// SetMetricsID sets the "metrics" edge to the OncallShiftMetrics entity by ID.
func (osuo *OncallShiftUpdateOne) SetMetricsID(id uuid.UUID) *OncallShiftUpdateOne {
	osuo.mutation.SetMetricsID(id)
	return osuo
}

// SetNillableMetricsID sets the "metrics" edge to the OncallShiftMetrics entity by ID if the given value is not nil.
func (osuo *OncallShiftUpdateOne) SetNillableMetricsID(id *uuid.UUID) *OncallShiftUpdateOne {
	if id != nil {
		osuo = osuo.SetMetricsID(*id)
	}
	return osuo
}

// SetMetrics sets the "metrics" edge to the OncallShiftMetrics entity.
func (osuo *OncallShiftUpdateOne) SetMetrics(o *OncallShiftMetrics) *OncallShiftUpdateOne {
	return osuo.SetMetricsID(o.ID)
}

// Mutation returns the OncallShiftMutation object of the builder.
func (osuo *OncallShiftUpdateOne) Mutation() *OncallShiftMutation {
	return osuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (osuo *OncallShiftUpdateOne) ClearUser() *OncallShiftUpdateOne {
	osuo.mutation.ClearUser()
	return osuo
}

// ClearRoster clears the "roster" edge to the OncallRoster entity.
func (osuo *OncallShiftUpdateOne) ClearRoster() *OncallShiftUpdateOne {
	osuo.mutation.ClearRoster()
	return osuo
}

// ClearPrimaryShift clears the "primary_shift" edge to the OncallShift entity.
func (osuo *OncallShiftUpdateOne) ClearPrimaryShift() *OncallShiftUpdateOne {
	osuo.mutation.ClearPrimaryShift()
	return osuo
}

// ClearHandover clears the "handover" edge to the OncallShiftHandover entity.
func (osuo *OncallShiftUpdateOne) ClearHandover() *OncallShiftUpdateOne {
	osuo.mutation.ClearHandover()
	return osuo
}

// ClearMetrics clears the "metrics" edge to the OncallShiftMetrics entity.
func (osuo *OncallShiftUpdateOne) ClearMetrics() *OncallShiftUpdateOne {
	osuo.mutation.ClearMetrics()
	return osuo
}

// Where appends a list predicates to the OncallShiftUpdate builder.
func (osuo *OncallShiftUpdateOne) Where(ps ...predicate.OncallShift) *OncallShiftUpdateOne {
	osuo.mutation.Where(ps...)
	return osuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (osuo *OncallShiftUpdateOne) Select(field string, fields ...string) *OncallShiftUpdateOne {
	osuo.fields = append([]string{field}, fields...)
	return osuo
}

// Save executes the query and returns the updated OncallShift entity.
func (osuo *OncallShiftUpdateOne) Save(ctx context.Context) (*OncallShift, error) {
	return withHooks(ctx, osuo.sqlSave, osuo.mutation, osuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (osuo *OncallShiftUpdateOne) SaveX(ctx context.Context) *OncallShift {
	node, err := osuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (osuo *OncallShiftUpdateOne) Exec(ctx context.Context) error {
	_, err := osuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osuo *OncallShiftUpdateOne) ExecX(ctx context.Context) {
	if err := osuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (osuo *OncallShiftUpdateOne) check() error {
	if v, ok := osuo.mutation.Role(); ok {
		if err := oncallshift.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "OncallShift.role": %w`, err)}
		}
	}
	if osuo.mutation.TenantCleared() && len(osuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallShift.tenant"`)
	}
	if osuo.mutation.UserCleared() && len(osuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallShift.user"`)
	}
	if osuo.mutation.RosterCleared() && len(osuo.mutation.RosterIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallShift.roster"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (osuo *OncallShiftUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OncallShiftUpdateOne {
	osuo.modifiers = append(osuo.modifiers, modifiers...)
	return osuo
}

func (osuo *OncallShiftUpdateOne) sqlSave(ctx context.Context) (_node *OncallShift, err error) {
	if err := osuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(oncallshift.Table, oncallshift.Columns, sqlgraph.NewFieldSpec(oncallshift.FieldID, field.TypeUUID))
	id, ok := osuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OncallShift.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := osuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oncallshift.FieldID)
		for _, f := range fields {
			if !oncallshift.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oncallshift.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := osuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := osuo.mutation.ProviderID(); ok {
		_spec.SetField(oncallshift.FieldProviderID, field.TypeString, value)
	}
	if osuo.mutation.ProviderIDCleared() {
		_spec.ClearField(oncallshift.FieldProviderID, field.TypeString)
	}
	if value, ok := osuo.mutation.Role(); ok {
		_spec.SetField(oncallshift.FieldRole, field.TypeEnum, value)
	}
	if osuo.mutation.RoleCleared() {
		_spec.ClearField(oncallshift.FieldRole, field.TypeEnum)
	}
	if value, ok := osuo.mutation.StartAt(); ok {
		_spec.SetField(oncallshift.FieldStartAt, field.TypeTime, value)
	}
	if value, ok := osuo.mutation.EndAt(); ok {
		_spec.SetField(oncallshift.FieldEndAt, field.TypeTime, value)
	}
	if osuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallshift.UserTable,
			Columns: []string{oncallshift.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallshift.UserTable,
			Columns: []string{oncallshift.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if osuo.mutation.RosterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallshift.RosterTable,
			Columns: []string{oncallshift.RosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osuo.mutation.RosterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallshift.RosterTable,
			Columns: []string{oncallshift.RosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if osuo.mutation.PrimaryShiftCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oncallshift.PrimaryShiftTable,
			Columns: []string{oncallshift.PrimaryShiftColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallshift.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osuo.mutation.PrimaryShiftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oncallshift.PrimaryShiftTable,
			Columns: []string{oncallshift.PrimaryShiftColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallshift.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if osuo.mutation.HandoverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oncallshift.HandoverTable,
			Columns: []string{oncallshift.HandoverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallshifthandover.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osuo.mutation.HandoverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oncallshift.HandoverTable,
			Columns: []string{oncallshift.HandoverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallshifthandover.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if osuo.mutation.MetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oncallshift.MetricsTable,
			Columns: []string{oncallshift.MetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallshiftmetrics.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osuo.mutation.MetricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oncallshift.MetricsTable,
			Columns: []string{oncallshift.MetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallshiftmetrics.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(osuo.modifiers...)
	_node = &OncallShift{config: osuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, osuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oncallshift.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	osuo.mutation.done = true
	return _node, nil
}
