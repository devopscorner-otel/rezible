// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rezible/rezible/ent/oncallusershifthandover"
	"github.com/rezible/rezible/ent/predicate"
)

// OncallUserShiftHandoverDelete is the builder for deleting a OncallUserShiftHandover entity.
type OncallUserShiftHandoverDelete struct {
	config
	hooks    []Hook
	mutation *OncallUserShiftHandoverMutation
}

// Where appends a list predicates to the OncallUserShiftHandoverDelete builder.
func (oushd *OncallUserShiftHandoverDelete) Where(ps ...predicate.OncallUserShiftHandover) *OncallUserShiftHandoverDelete {
	oushd.mutation.Where(ps...)
	return oushd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (oushd *OncallUserShiftHandoverDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, oushd.sqlExec, oushd.mutation, oushd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (oushd *OncallUserShiftHandoverDelete) ExecX(ctx context.Context) int {
	n, err := oushd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (oushd *OncallUserShiftHandoverDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(oncallusershifthandover.Table, sqlgraph.NewFieldSpec(oncallusershifthandover.FieldID, field.TypeUUID))
	if ps := oushd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, oushd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	oushd.mutation.done = true
	return affected, err
}

// OncallUserShiftHandoverDeleteOne is the builder for deleting a single OncallUserShiftHandover entity.
type OncallUserShiftHandoverDeleteOne struct {
	oushd *OncallUserShiftHandoverDelete
}

// Where appends a list predicates to the OncallUserShiftHandoverDelete builder.
func (oushdo *OncallUserShiftHandoverDeleteOne) Where(ps ...predicate.OncallUserShiftHandover) *OncallUserShiftHandoverDeleteOne {
	oushdo.oushd.mutation.Where(ps...)
	return oushdo
}

// Exec executes the deletion query.
func (oushdo *OncallUserShiftHandoverDeleteOne) Exec(ctx context.Context) error {
	n, err := oushdo.oushd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{oncallusershifthandover.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (oushdo *OncallUserShiftHandoverDeleteOne) ExecX(ctx context.Context) {
	if err := oushdo.Exec(ctx); err != nil {
		panic(err)
	}
}
