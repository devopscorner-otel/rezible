// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/incident"
	"github.com/rezible/rezible/ent/meetingsession"
	"github.com/rezible/rezible/ent/predicate"
)

// MeetingSessionUpdate is the builder for updating MeetingSession entities.
type MeetingSessionUpdate struct {
	config
	hooks     []Hook
	mutation  *MeetingSessionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the MeetingSessionUpdate builder.
func (msu *MeetingSessionUpdate) Where(ps ...predicate.MeetingSession) *MeetingSessionUpdate {
	msu.mutation.Where(ps...)
	return msu
}

// SetTitle sets the "title" field.
func (msu *MeetingSessionUpdate) SetTitle(s string) *MeetingSessionUpdate {
	msu.mutation.SetTitle(s)
	return msu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (msu *MeetingSessionUpdate) SetNillableTitle(s *string) *MeetingSessionUpdate {
	if s != nil {
		msu.SetTitle(*s)
	}
	return msu
}

// SetStartedAt sets the "started_at" field.
func (msu *MeetingSessionUpdate) SetStartedAt(t time.Time) *MeetingSessionUpdate {
	msu.mutation.SetStartedAt(t)
	return msu
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (msu *MeetingSessionUpdate) SetNillableStartedAt(t *time.Time) *MeetingSessionUpdate {
	if t != nil {
		msu.SetStartedAt(*t)
	}
	return msu
}

// SetEndedAt sets the "ended_at" field.
func (msu *MeetingSessionUpdate) SetEndedAt(t time.Time) *MeetingSessionUpdate {
	msu.mutation.SetEndedAt(t)
	return msu
}

// SetNillableEndedAt sets the "ended_at" field if the given value is not nil.
func (msu *MeetingSessionUpdate) SetNillableEndedAt(t *time.Time) *MeetingSessionUpdate {
	if t != nil {
		msu.SetEndedAt(*t)
	}
	return msu
}

// ClearEndedAt clears the value of the "ended_at" field.
func (msu *MeetingSessionUpdate) ClearEndedAt() *MeetingSessionUpdate {
	msu.mutation.ClearEndedAt()
	return msu
}

// SetDocumentName sets the "document_name" field.
func (msu *MeetingSessionUpdate) SetDocumentName(s string) *MeetingSessionUpdate {
	msu.mutation.SetDocumentName(s)
	return msu
}

// SetNillableDocumentName sets the "document_name" field if the given value is not nil.
func (msu *MeetingSessionUpdate) SetNillableDocumentName(s *string) *MeetingSessionUpdate {
	if s != nil {
		msu.SetDocumentName(*s)
	}
	return msu
}

// AddIncidentIDs adds the "incidents" edge to the Incident entity by IDs.
func (msu *MeetingSessionUpdate) AddIncidentIDs(ids ...uuid.UUID) *MeetingSessionUpdate {
	msu.mutation.AddIncidentIDs(ids...)
	return msu
}

// AddIncidents adds the "incidents" edges to the Incident entity.
func (msu *MeetingSessionUpdate) AddIncidents(i ...*Incident) *MeetingSessionUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return msu.AddIncidentIDs(ids...)
}

// Mutation returns the MeetingSessionMutation object of the builder.
func (msu *MeetingSessionUpdate) Mutation() *MeetingSessionMutation {
	return msu.mutation
}

// ClearIncidents clears all "incidents" edges to the Incident entity.
func (msu *MeetingSessionUpdate) ClearIncidents() *MeetingSessionUpdate {
	msu.mutation.ClearIncidents()
	return msu
}

// RemoveIncidentIDs removes the "incidents" edge to Incident entities by IDs.
func (msu *MeetingSessionUpdate) RemoveIncidentIDs(ids ...uuid.UUID) *MeetingSessionUpdate {
	msu.mutation.RemoveIncidentIDs(ids...)
	return msu
}

// RemoveIncidents removes "incidents" edges to Incident entities.
func (msu *MeetingSessionUpdate) RemoveIncidents(i ...*Incident) *MeetingSessionUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return msu.RemoveIncidentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (msu *MeetingSessionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, msu.sqlSave, msu.mutation, msu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (msu *MeetingSessionUpdate) SaveX(ctx context.Context) int {
	affected, err := msu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (msu *MeetingSessionUpdate) Exec(ctx context.Context) error {
	_, err := msu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msu *MeetingSessionUpdate) ExecX(ctx context.Context) {
	if err := msu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (msu *MeetingSessionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MeetingSessionUpdate {
	msu.modifiers = append(msu.modifiers, modifiers...)
	return msu
}

func (msu *MeetingSessionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(meetingsession.Table, meetingsession.Columns, sqlgraph.NewFieldSpec(meetingsession.FieldID, field.TypeUUID))
	if ps := msu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := msu.mutation.Title(); ok {
		_spec.SetField(meetingsession.FieldTitle, field.TypeString, value)
	}
	if value, ok := msu.mutation.StartedAt(); ok {
		_spec.SetField(meetingsession.FieldStartedAt, field.TypeTime, value)
	}
	if value, ok := msu.mutation.EndedAt(); ok {
		_spec.SetField(meetingsession.FieldEndedAt, field.TypeTime, value)
	}
	if msu.mutation.EndedAtCleared() {
		_spec.ClearField(meetingsession.FieldEndedAt, field.TypeTime)
	}
	if value, ok := msu.mutation.DocumentName(); ok {
		_spec.SetField(meetingsession.FieldDocumentName, field.TypeString, value)
	}
	if msu.mutation.IncidentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   meetingsession.IncidentsTable,
			Columns: meetingsession.IncidentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := msu.mutation.RemovedIncidentsIDs(); len(nodes) > 0 && !msu.mutation.IncidentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   meetingsession.IncidentsTable,
			Columns: meetingsession.IncidentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := msu.mutation.IncidentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   meetingsession.IncidentsTable,
			Columns: meetingsession.IncidentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(msu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, msu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{meetingsession.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	msu.mutation.done = true
	return n, nil
}

// MeetingSessionUpdateOne is the builder for updating a single MeetingSession entity.
type MeetingSessionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *MeetingSessionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetTitle sets the "title" field.
func (msuo *MeetingSessionUpdateOne) SetTitle(s string) *MeetingSessionUpdateOne {
	msuo.mutation.SetTitle(s)
	return msuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (msuo *MeetingSessionUpdateOne) SetNillableTitle(s *string) *MeetingSessionUpdateOne {
	if s != nil {
		msuo.SetTitle(*s)
	}
	return msuo
}

// SetStartedAt sets the "started_at" field.
func (msuo *MeetingSessionUpdateOne) SetStartedAt(t time.Time) *MeetingSessionUpdateOne {
	msuo.mutation.SetStartedAt(t)
	return msuo
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (msuo *MeetingSessionUpdateOne) SetNillableStartedAt(t *time.Time) *MeetingSessionUpdateOne {
	if t != nil {
		msuo.SetStartedAt(*t)
	}
	return msuo
}

// SetEndedAt sets the "ended_at" field.
func (msuo *MeetingSessionUpdateOne) SetEndedAt(t time.Time) *MeetingSessionUpdateOne {
	msuo.mutation.SetEndedAt(t)
	return msuo
}

// SetNillableEndedAt sets the "ended_at" field if the given value is not nil.
func (msuo *MeetingSessionUpdateOne) SetNillableEndedAt(t *time.Time) *MeetingSessionUpdateOne {
	if t != nil {
		msuo.SetEndedAt(*t)
	}
	return msuo
}

// ClearEndedAt clears the value of the "ended_at" field.
func (msuo *MeetingSessionUpdateOne) ClearEndedAt() *MeetingSessionUpdateOne {
	msuo.mutation.ClearEndedAt()
	return msuo
}

// SetDocumentName sets the "document_name" field.
func (msuo *MeetingSessionUpdateOne) SetDocumentName(s string) *MeetingSessionUpdateOne {
	msuo.mutation.SetDocumentName(s)
	return msuo
}

// SetNillableDocumentName sets the "document_name" field if the given value is not nil.
func (msuo *MeetingSessionUpdateOne) SetNillableDocumentName(s *string) *MeetingSessionUpdateOne {
	if s != nil {
		msuo.SetDocumentName(*s)
	}
	return msuo
}

// AddIncidentIDs adds the "incidents" edge to the Incident entity by IDs.
func (msuo *MeetingSessionUpdateOne) AddIncidentIDs(ids ...uuid.UUID) *MeetingSessionUpdateOne {
	msuo.mutation.AddIncidentIDs(ids...)
	return msuo
}

// AddIncidents adds the "incidents" edges to the Incident entity.
func (msuo *MeetingSessionUpdateOne) AddIncidents(i ...*Incident) *MeetingSessionUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return msuo.AddIncidentIDs(ids...)
}

// Mutation returns the MeetingSessionMutation object of the builder.
func (msuo *MeetingSessionUpdateOne) Mutation() *MeetingSessionMutation {
	return msuo.mutation
}

// ClearIncidents clears all "incidents" edges to the Incident entity.
func (msuo *MeetingSessionUpdateOne) ClearIncidents() *MeetingSessionUpdateOne {
	msuo.mutation.ClearIncidents()
	return msuo
}

// RemoveIncidentIDs removes the "incidents" edge to Incident entities by IDs.
func (msuo *MeetingSessionUpdateOne) RemoveIncidentIDs(ids ...uuid.UUID) *MeetingSessionUpdateOne {
	msuo.mutation.RemoveIncidentIDs(ids...)
	return msuo
}

// RemoveIncidents removes "incidents" edges to Incident entities.
func (msuo *MeetingSessionUpdateOne) RemoveIncidents(i ...*Incident) *MeetingSessionUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return msuo.RemoveIncidentIDs(ids...)
}

// Where appends a list predicates to the MeetingSessionUpdate builder.
func (msuo *MeetingSessionUpdateOne) Where(ps ...predicate.MeetingSession) *MeetingSessionUpdateOne {
	msuo.mutation.Where(ps...)
	return msuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (msuo *MeetingSessionUpdateOne) Select(field string, fields ...string) *MeetingSessionUpdateOne {
	msuo.fields = append([]string{field}, fields...)
	return msuo
}

// Save executes the query and returns the updated MeetingSession entity.
func (msuo *MeetingSessionUpdateOne) Save(ctx context.Context) (*MeetingSession, error) {
	return withHooks(ctx, msuo.sqlSave, msuo.mutation, msuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (msuo *MeetingSessionUpdateOne) SaveX(ctx context.Context) *MeetingSession {
	node, err := msuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (msuo *MeetingSessionUpdateOne) Exec(ctx context.Context) error {
	_, err := msuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msuo *MeetingSessionUpdateOne) ExecX(ctx context.Context) {
	if err := msuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (msuo *MeetingSessionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MeetingSessionUpdateOne {
	msuo.modifiers = append(msuo.modifiers, modifiers...)
	return msuo
}

func (msuo *MeetingSessionUpdateOne) sqlSave(ctx context.Context) (_node *MeetingSession, err error) {
	_spec := sqlgraph.NewUpdateSpec(meetingsession.Table, meetingsession.Columns, sqlgraph.NewFieldSpec(meetingsession.FieldID, field.TypeUUID))
	id, ok := msuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MeetingSession.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := msuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, meetingsession.FieldID)
		for _, f := range fields {
			if !meetingsession.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != meetingsession.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := msuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := msuo.mutation.Title(); ok {
		_spec.SetField(meetingsession.FieldTitle, field.TypeString, value)
	}
	if value, ok := msuo.mutation.StartedAt(); ok {
		_spec.SetField(meetingsession.FieldStartedAt, field.TypeTime, value)
	}
	if value, ok := msuo.mutation.EndedAt(); ok {
		_spec.SetField(meetingsession.FieldEndedAt, field.TypeTime, value)
	}
	if msuo.mutation.EndedAtCleared() {
		_spec.ClearField(meetingsession.FieldEndedAt, field.TypeTime)
	}
	if value, ok := msuo.mutation.DocumentName(); ok {
		_spec.SetField(meetingsession.FieldDocumentName, field.TypeString, value)
	}
	if msuo.mutation.IncidentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   meetingsession.IncidentsTable,
			Columns: meetingsession.IncidentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := msuo.mutation.RemovedIncidentsIDs(); len(nodes) > 0 && !msuo.mutation.IncidentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   meetingsession.IncidentsTable,
			Columns: meetingsession.IncidentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := msuo.mutation.IncidentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   meetingsession.IncidentsTable,
			Columns: meetingsession.IncidentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(msuo.modifiers...)
	_node = &MeetingSession{config: msuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, msuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{meetingsession.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	msuo.mutation.done = true
	return _node, nil
}
