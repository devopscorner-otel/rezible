// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/document"
	"github.com/rezible/rezible/ent/incident"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/retrospective"
	"github.com/rezible/rezible/ent/retrospectivecomment"
	"github.com/rezible/rezible/ent/systemanalysis"
)

// RetrospectiveUpdate is the builder for updating Retrospective entities.
type RetrospectiveUpdate struct {
	config
	hooks     []Hook
	mutation  *RetrospectiveMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the RetrospectiveUpdate builder.
func (ru *RetrospectiveUpdate) Where(ps ...predicate.Retrospective) *RetrospectiveUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetIncidentID sets the "incident_id" field.
func (ru *RetrospectiveUpdate) SetIncidentID(u uuid.UUID) *RetrospectiveUpdate {
	ru.mutation.SetIncidentID(u)
	return ru
}

// SetNillableIncidentID sets the "incident_id" field if the given value is not nil.
func (ru *RetrospectiveUpdate) SetNillableIncidentID(u *uuid.UUID) *RetrospectiveUpdate {
	if u != nil {
		ru.SetIncidentID(*u)
	}
	return ru
}

// SetDocumentID sets the "document_id" field.
func (ru *RetrospectiveUpdate) SetDocumentID(u uuid.UUID) *RetrospectiveUpdate {
	ru.mutation.SetDocumentID(u)
	return ru
}

// SetNillableDocumentID sets the "document_id" field if the given value is not nil.
func (ru *RetrospectiveUpdate) SetNillableDocumentID(u *uuid.UUID) *RetrospectiveUpdate {
	if u != nil {
		ru.SetDocumentID(*u)
	}
	return ru
}

// SetSystemAnalysisID sets the "system_analysis_id" field.
func (ru *RetrospectiveUpdate) SetSystemAnalysisID(u uuid.UUID) *RetrospectiveUpdate {
	ru.mutation.SetSystemAnalysisID(u)
	return ru
}

// SetNillableSystemAnalysisID sets the "system_analysis_id" field if the given value is not nil.
func (ru *RetrospectiveUpdate) SetNillableSystemAnalysisID(u *uuid.UUID) *RetrospectiveUpdate {
	if u != nil {
		ru.SetSystemAnalysisID(*u)
	}
	return ru
}

// ClearSystemAnalysisID clears the value of the "system_analysis_id" field.
func (ru *RetrospectiveUpdate) ClearSystemAnalysisID() *RetrospectiveUpdate {
	ru.mutation.ClearSystemAnalysisID()
	return ru
}

// SetType sets the "type" field.
func (ru *RetrospectiveUpdate) SetType(r retrospective.Type) *RetrospectiveUpdate {
	ru.mutation.SetType(r)
	return ru
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ru *RetrospectiveUpdate) SetNillableType(r *retrospective.Type) *RetrospectiveUpdate {
	if r != nil {
		ru.SetType(*r)
	}
	return ru
}

// SetState sets the "state" field.
func (ru *RetrospectiveUpdate) SetState(r retrospective.State) *RetrospectiveUpdate {
	ru.mutation.SetState(r)
	return ru
}

// SetNillableState sets the "state" field if the given value is not nil.
func (ru *RetrospectiveUpdate) SetNillableState(r *retrospective.State) *RetrospectiveUpdate {
	if r != nil {
		ru.SetState(*r)
	}
	return ru
}

// SetIncident sets the "incident" edge to the Incident entity.
func (ru *RetrospectiveUpdate) SetIncident(i *Incident) *RetrospectiveUpdate {
	return ru.SetIncidentID(i.ID)
}

// SetDocument sets the "document" edge to the Document entity.
func (ru *RetrospectiveUpdate) SetDocument(d *Document) *RetrospectiveUpdate {
	return ru.SetDocumentID(d.ID)
}

// AddCommentIDs adds the "comments" edge to the RetrospectiveComment entity by IDs.
func (ru *RetrospectiveUpdate) AddCommentIDs(ids ...uuid.UUID) *RetrospectiveUpdate {
	ru.mutation.AddCommentIDs(ids...)
	return ru
}

// AddComments adds the "comments" edges to the RetrospectiveComment entity.
func (ru *RetrospectiveUpdate) AddComments(r ...*RetrospectiveComment) *RetrospectiveUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddCommentIDs(ids...)
}

// SetSystemAnalysis sets the "system_analysis" edge to the SystemAnalysis entity.
func (ru *RetrospectiveUpdate) SetSystemAnalysis(s *SystemAnalysis) *RetrospectiveUpdate {
	return ru.SetSystemAnalysisID(s.ID)
}

// Mutation returns the RetrospectiveMutation object of the builder.
func (ru *RetrospectiveUpdate) Mutation() *RetrospectiveMutation {
	return ru.mutation
}

// ClearIncident clears the "incident" edge to the Incident entity.
func (ru *RetrospectiveUpdate) ClearIncident() *RetrospectiveUpdate {
	ru.mutation.ClearIncident()
	return ru
}

// ClearDocument clears the "document" edge to the Document entity.
func (ru *RetrospectiveUpdate) ClearDocument() *RetrospectiveUpdate {
	ru.mutation.ClearDocument()
	return ru
}

// ClearComments clears all "comments" edges to the RetrospectiveComment entity.
func (ru *RetrospectiveUpdate) ClearComments() *RetrospectiveUpdate {
	ru.mutation.ClearComments()
	return ru
}

// RemoveCommentIDs removes the "comments" edge to RetrospectiveComment entities by IDs.
func (ru *RetrospectiveUpdate) RemoveCommentIDs(ids ...uuid.UUID) *RetrospectiveUpdate {
	ru.mutation.RemoveCommentIDs(ids...)
	return ru
}

// RemoveComments removes "comments" edges to RetrospectiveComment entities.
func (ru *RetrospectiveUpdate) RemoveComments(r ...*RetrospectiveComment) *RetrospectiveUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveCommentIDs(ids...)
}

// ClearSystemAnalysis clears the "system_analysis" edge to the SystemAnalysis entity.
func (ru *RetrospectiveUpdate) ClearSystemAnalysis() *RetrospectiveUpdate {
	ru.mutation.ClearSystemAnalysis()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RetrospectiveUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RetrospectiveUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RetrospectiveUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RetrospectiveUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RetrospectiveUpdate) check() error {
	if v, ok := ru.mutation.GetType(); ok {
		if err := retrospective.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Retrospective.type": %w`, err)}
		}
	}
	if v, ok := ru.mutation.State(); ok {
		if err := retrospective.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Retrospective.state": %w`, err)}
		}
	}
	if ru.mutation.TenantCleared() && len(ru.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Retrospective.tenant"`)
	}
	if ru.mutation.IncidentCleared() && len(ru.mutation.IncidentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Retrospective.incident"`)
	}
	if ru.mutation.DocumentCleared() && len(ru.mutation.DocumentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Retrospective.document"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ru *RetrospectiveUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RetrospectiveUpdate {
	ru.modifiers = append(ru.modifiers, modifiers...)
	return ru
}

func (ru *RetrospectiveUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(retrospective.Table, retrospective.Columns, sqlgraph.NewFieldSpec(retrospective.FieldID, field.TypeUUID))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.GetType(); ok {
		_spec.SetField(retrospective.FieldType, field.TypeEnum, value)
	}
	if value, ok := ru.mutation.State(); ok {
		_spec.SetField(retrospective.FieldState, field.TypeEnum, value)
	}
	if ru.mutation.IncidentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   retrospective.IncidentTable,
			Columns: []string{retrospective.IncidentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.IncidentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   retrospective.IncidentTable,
			Columns: []string{retrospective.IncidentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.DocumentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   retrospective.DocumentTable,
			Columns: []string{retrospective.DocumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.DocumentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   retrospective.DocumentTable,
			Columns: []string{retrospective.DocumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   retrospective.CommentsTable,
			Columns: []string{retrospective.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivecomment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !ru.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   retrospective.CommentsTable,
			Columns: []string{retrospective.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivecomment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   retrospective.CommentsTable,
			Columns: []string{retrospective.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivecomment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.SystemAnalysisCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   retrospective.SystemAnalysisTable,
			Columns: []string{retrospective.SystemAnalysisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemanalysis.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.SystemAnalysisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   retrospective.SystemAnalysisTable,
			Columns: []string{retrospective.SystemAnalysisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemanalysis.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{retrospective.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RetrospectiveUpdateOne is the builder for updating a single Retrospective entity.
type RetrospectiveUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *RetrospectiveMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetIncidentID sets the "incident_id" field.
func (ruo *RetrospectiveUpdateOne) SetIncidentID(u uuid.UUID) *RetrospectiveUpdateOne {
	ruo.mutation.SetIncidentID(u)
	return ruo
}

// SetNillableIncidentID sets the "incident_id" field if the given value is not nil.
func (ruo *RetrospectiveUpdateOne) SetNillableIncidentID(u *uuid.UUID) *RetrospectiveUpdateOne {
	if u != nil {
		ruo.SetIncidentID(*u)
	}
	return ruo
}

// SetDocumentID sets the "document_id" field.
func (ruo *RetrospectiveUpdateOne) SetDocumentID(u uuid.UUID) *RetrospectiveUpdateOne {
	ruo.mutation.SetDocumentID(u)
	return ruo
}

// SetNillableDocumentID sets the "document_id" field if the given value is not nil.
func (ruo *RetrospectiveUpdateOne) SetNillableDocumentID(u *uuid.UUID) *RetrospectiveUpdateOne {
	if u != nil {
		ruo.SetDocumentID(*u)
	}
	return ruo
}

// SetSystemAnalysisID sets the "system_analysis_id" field.
func (ruo *RetrospectiveUpdateOne) SetSystemAnalysisID(u uuid.UUID) *RetrospectiveUpdateOne {
	ruo.mutation.SetSystemAnalysisID(u)
	return ruo
}

// SetNillableSystemAnalysisID sets the "system_analysis_id" field if the given value is not nil.
func (ruo *RetrospectiveUpdateOne) SetNillableSystemAnalysisID(u *uuid.UUID) *RetrospectiveUpdateOne {
	if u != nil {
		ruo.SetSystemAnalysisID(*u)
	}
	return ruo
}

// ClearSystemAnalysisID clears the value of the "system_analysis_id" field.
func (ruo *RetrospectiveUpdateOne) ClearSystemAnalysisID() *RetrospectiveUpdateOne {
	ruo.mutation.ClearSystemAnalysisID()
	return ruo
}

// SetType sets the "type" field.
func (ruo *RetrospectiveUpdateOne) SetType(r retrospective.Type) *RetrospectiveUpdateOne {
	ruo.mutation.SetType(r)
	return ruo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ruo *RetrospectiveUpdateOne) SetNillableType(r *retrospective.Type) *RetrospectiveUpdateOne {
	if r != nil {
		ruo.SetType(*r)
	}
	return ruo
}

// SetState sets the "state" field.
func (ruo *RetrospectiveUpdateOne) SetState(r retrospective.State) *RetrospectiveUpdateOne {
	ruo.mutation.SetState(r)
	return ruo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (ruo *RetrospectiveUpdateOne) SetNillableState(r *retrospective.State) *RetrospectiveUpdateOne {
	if r != nil {
		ruo.SetState(*r)
	}
	return ruo
}

// SetIncident sets the "incident" edge to the Incident entity.
func (ruo *RetrospectiveUpdateOne) SetIncident(i *Incident) *RetrospectiveUpdateOne {
	return ruo.SetIncidentID(i.ID)
}

// SetDocument sets the "document" edge to the Document entity.
func (ruo *RetrospectiveUpdateOne) SetDocument(d *Document) *RetrospectiveUpdateOne {
	return ruo.SetDocumentID(d.ID)
}

// AddCommentIDs adds the "comments" edge to the RetrospectiveComment entity by IDs.
func (ruo *RetrospectiveUpdateOne) AddCommentIDs(ids ...uuid.UUID) *RetrospectiveUpdateOne {
	ruo.mutation.AddCommentIDs(ids...)
	return ruo
}

// AddComments adds the "comments" edges to the RetrospectiveComment entity.
func (ruo *RetrospectiveUpdateOne) AddComments(r ...*RetrospectiveComment) *RetrospectiveUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddCommentIDs(ids...)
}

// SetSystemAnalysis sets the "system_analysis" edge to the SystemAnalysis entity.
func (ruo *RetrospectiveUpdateOne) SetSystemAnalysis(s *SystemAnalysis) *RetrospectiveUpdateOne {
	return ruo.SetSystemAnalysisID(s.ID)
}

// Mutation returns the RetrospectiveMutation object of the builder.
func (ruo *RetrospectiveUpdateOne) Mutation() *RetrospectiveMutation {
	return ruo.mutation
}

// ClearIncident clears the "incident" edge to the Incident entity.
func (ruo *RetrospectiveUpdateOne) ClearIncident() *RetrospectiveUpdateOne {
	ruo.mutation.ClearIncident()
	return ruo
}

// ClearDocument clears the "document" edge to the Document entity.
func (ruo *RetrospectiveUpdateOne) ClearDocument() *RetrospectiveUpdateOne {
	ruo.mutation.ClearDocument()
	return ruo
}

// ClearComments clears all "comments" edges to the RetrospectiveComment entity.
func (ruo *RetrospectiveUpdateOne) ClearComments() *RetrospectiveUpdateOne {
	ruo.mutation.ClearComments()
	return ruo
}

// RemoveCommentIDs removes the "comments" edge to RetrospectiveComment entities by IDs.
func (ruo *RetrospectiveUpdateOne) RemoveCommentIDs(ids ...uuid.UUID) *RetrospectiveUpdateOne {
	ruo.mutation.RemoveCommentIDs(ids...)
	return ruo
}

// RemoveComments removes "comments" edges to RetrospectiveComment entities.
func (ruo *RetrospectiveUpdateOne) RemoveComments(r ...*RetrospectiveComment) *RetrospectiveUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveCommentIDs(ids...)
}

// ClearSystemAnalysis clears the "system_analysis" edge to the SystemAnalysis entity.
func (ruo *RetrospectiveUpdateOne) ClearSystemAnalysis() *RetrospectiveUpdateOne {
	ruo.mutation.ClearSystemAnalysis()
	return ruo
}

// Where appends a list predicates to the RetrospectiveUpdate builder.
func (ruo *RetrospectiveUpdateOne) Where(ps ...predicate.Retrospective) *RetrospectiveUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RetrospectiveUpdateOne) Select(field string, fields ...string) *RetrospectiveUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Retrospective entity.
func (ruo *RetrospectiveUpdateOne) Save(ctx context.Context) (*Retrospective, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RetrospectiveUpdateOne) SaveX(ctx context.Context) *Retrospective {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RetrospectiveUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RetrospectiveUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RetrospectiveUpdateOne) check() error {
	if v, ok := ruo.mutation.GetType(); ok {
		if err := retrospective.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Retrospective.type": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.State(); ok {
		if err := retrospective.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Retrospective.state": %w`, err)}
		}
	}
	if ruo.mutation.TenantCleared() && len(ruo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Retrospective.tenant"`)
	}
	if ruo.mutation.IncidentCleared() && len(ruo.mutation.IncidentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Retrospective.incident"`)
	}
	if ruo.mutation.DocumentCleared() && len(ruo.mutation.DocumentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Retrospective.document"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ruo *RetrospectiveUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RetrospectiveUpdateOne {
	ruo.modifiers = append(ruo.modifiers, modifiers...)
	return ruo
}

func (ruo *RetrospectiveUpdateOne) sqlSave(ctx context.Context) (_node *Retrospective, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(retrospective.Table, retrospective.Columns, sqlgraph.NewFieldSpec(retrospective.FieldID, field.TypeUUID))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Retrospective.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, retrospective.FieldID)
		for _, f := range fields {
			if !retrospective.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != retrospective.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.GetType(); ok {
		_spec.SetField(retrospective.FieldType, field.TypeEnum, value)
	}
	if value, ok := ruo.mutation.State(); ok {
		_spec.SetField(retrospective.FieldState, field.TypeEnum, value)
	}
	if ruo.mutation.IncidentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   retrospective.IncidentTable,
			Columns: []string{retrospective.IncidentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.IncidentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   retrospective.IncidentTable,
			Columns: []string{retrospective.IncidentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.DocumentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   retrospective.DocumentTable,
			Columns: []string{retrospective.DocumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.DocumentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   retrospective.DocumentTable,
			Columns: []string{retrospective.DocumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   retrospective.CommentsTable,
			Columns: []string{retrospective.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivecomment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !ruo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   retrospective.CommentsTable,
			Columns: []string{retrospective.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivecomment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   retrospective.CommentsTable,
			Columns: []string{retrospective.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivecomment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.SystemAnalysisCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   retrospective.SystemAnalysisTable,
			Columns: []string{retrospective.SystemAnalysisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemanalysis.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.SystemAnalysisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   retrospective.SystemAnalysisTable,
			Columns: []string{retrospective.SystemAnalysisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemanalysis.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ruo.modifiers...)
	_node = &Retrospective{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{retrospective.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
