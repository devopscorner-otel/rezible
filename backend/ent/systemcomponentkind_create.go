// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/systemcomponent"
	"github.com/rezible/rezible/ent/systemcomponentkind"
)

// SystemComponentKindCreate is the builder for creating a SystemComponentKind entity.
type SystemComponentKindCreate struct {
	config
	mutation *SystemComponentKindMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetLabel sets the "label" field.
func (sckc *SystemComponentKindCreate) SetLabel(s string) *SystemComponentKindCreate {
	sckc.mutation.SetLabel(s)
	return sckc
}

// SetDescription sets the "description" field.
func (sckc *SystemComponentKindCreate) SetDescription(s string) *SystemComponentKindCreate {
	sckc.mutation.SetDescription(s)
	return sckc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sckc *SystemComponentKindCreate) SetNillableDescription(s *string) *SystemComponentKindCreate {
	if s != nil {
		sckc.SetDescription(*s)
	}
	return sckc
}

// SetCreatedAt sets the "created_at" field.
func (sckc *SystemComponentKindCreate) SetCreatedAt(t time.Time) *SystemComponentKindCreate {
	sckc.mutation.SetCreatedAt(t)
	return sckc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sckc *SystemComponentKindCreate) SetNillableCreatedAt(t *time.Time) *SystemComponentKindCreate {
	if t != nil {
		sckc.SetCreatedAt(*t)
	}
	return sckc
}

// SetID sets the "id" field.
func (sckc *SystemComponentKindCreate) SetID(u uuid.UUID) *SystemComponentKindCreate {
	sckc.mutation.SetID(u)
	return sckc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sckc *SystemComponentKindCreate) SetNillableID(u *uuid.UUID) *SystemComponentKindCreate {
	if u != nil {
		sckc.SetID(*u)
	}
	return sckc
}

// AddComponentIDs adds the "components" edge to the SystemComponent entity by IDs.
func (sckc *SystemComponentKindCreate) AddComponentIDs(ids ...uuid.UUID) *SystemComponentKindCreate {
	sckc.mutation.AddComponentIDs(ids...)
	return sckc
}

// AddComponents adds the "components" edges to the SystemComponent entity.
func (sckc *SystemComponentKindCreate) AddComponents(s ...*SystemComponent) *SystemComponentKindCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sckc.AddComponentIDs(ids...)
}

// Mutation returns the SystemComponentKindMutation object of the builder.
func (sckc *SystemComponentKindCreate) Mutation() *SystemComponentKindMutation {
	return sckc.mutation
}

// Save creates the SystemComponentKind in the database.
func (sckc *SystemComponentKindCreate) Save(ctx context.Context) (*SystemComponentKind, error) {
	sckc.defaults()
	return withHooks(ctx, sckc.sqlSave, sckc.mutation, sckc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sckc *SystemComponentKindCreate) SaveX(ctx context.Context) *SystemComponentKind {
	v, err := sckc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sckc *SystemComponentKindCreate) Exec(ctx context.Context) error {
	_, err := sckc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sckc *SystemComponentKindCreate) ExecX(ctx context.Context) {
	if err := sckc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sckc *SystemComponentKindCreate) defaults() {
	if _, ok := sckc.mutation.CreatedAt(); !ok {
		v := systemcomponentkind.DefaultCreatedAt()
		sckc.mutation.SetCreatedAt(v)
	}
	if _, ok := sckc.mutation.ID(); !ok {
		v := systemcomponentkind.DefaultID()
		sckc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sckc *SystemComponentKindCreate) check() error {
	if _, ok := sckc.mutation.Label(); !ok {
		return &ValidationError{Name: "label", err: errors.New(`ent: missing required field "SystemComponentKind.label"`)}
	}
	if _, ok := sckc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SystemComponentKind.created_at"`)}
	}
	return nil
}

func (sckc *SystemComponentKindCreate) sqlSave(ctx context.Context) (*SystemComponentKind, error) {
	if err := sckc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sckc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sckc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	sckc.mutation.id = &_node.ID
	sckc.mutation.done = true
	return _node, nil
}

func (sckc *SystemComponentKindCreate) createSpec() (*SystemComponentKind, *sqlgraph.CreateSpec) {
	var (
		_node = &SystemComponentKind{config: sckc.config}
		_spec = sqlgraph.NewCreateSpec(systemcomponentkind.Table, sqlgraph.NewFieldSpec(systemcomponentkind.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = sckc.conflict
	if id, ok := sckc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sckc.mutation.Label(); ok {
		_spec.SetField(systemcomponentkind.FieldLabel, field.TypeString, value)
		_node.Label = value
	}
	if value, ok := sckc.mutation.Description(); ok {
		_spec.SetField(systemcomponentkind.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := sckc.mutation.CreatedAt(); ok {
		_spec.SetField(systemcomponentkind.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := sckc.mutation.ComponentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponentkind.ComponentsTable,
			Columns: []string{systemcomponentkind.ComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SystemComponentKind.Create().
//		SetLabel(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SystemComponentKindUpsert) {
//			SetLabel(v+v).
//		}).
//		Exec(ctx)
func (sckc *SystemComponentKindCreate) OnConflict(opts ...sql.ConflictOption) *SystemComponentKindUpsertOne {
	sckc.conflict = opts
	return &SystemComponentKindUpsertOne{
		create: sckc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SystemComponentKind.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sckc *SystemComponentKindCreate) OnConflictColumns(columns ...string) *SystemComponentKindUpsertOne {
	sckc.conflict = append(sckc.conflict, sql.ConflictColumns(columns...))
	return &SystemComponentKindUpsertOne{
		create: sckc,
	}
}

type (
	// SystemComponentKindUpsertOne is the builder for "upsert"-ing
	//  one SystemComponentKind node.
	SystemComponentKindUpsertOne struct {
		create *SystemComponentKindCreate
	}

	// SystemComponentKindUpsert is the "OnConflict" setter.
	SystemComponentKindUpsert struct {
		*sql.UpdateSet
	}
)

// SetLabel sets the "label" field.
func (u *SystemComponentKindUpsert) SetLabel(v string) *SystemComponentKindUpsert {
	u.Set(systemcomponentkind.FieldLabel, v)
	return u
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *SystemComponentKindUpsert) UpdateLabel() *SystemComponentKindUpsert {
	u.SetExcluded(systemcomponentkind.FieldLabel)
	return u
}

// SetDescription sets the "description" field.
func (u *SystemComponentKindUpsert) SetDescription(v string) *SystemComponentKindUpsert {
	u.Set(systemcomponentkind.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SystemComponentKindUpsert) UpdateDescription() *SystemComponentKindUpsert {
	u.SetExcluded(systemcomponentkind.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *SystemComponentKindUpsert) ClearDescription() *SystemComponentKindUpsert {
	u.SetNull(systemcomponentkind.FieldDescription)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SystemComponentKindUpsert) SetCreatedAt(v time.Time) *SystemComponentKindUpsert {
	u.Set(systemcomponentkind.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SystemComponentKindUpsert) UpdateCreatedAt() *SystemComponentKindUpsert {
	u.SetExcluded(systemcomponentkind.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SystemComponentKind.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(systemcomponentkind.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SystemComponentKindUpsertOne) UpdateNewValues() *SystemComponentKindUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(systemcomponentkind.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SystemComponentKind.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SystemComponentKindUpsertOne) Ignore() *SystemComponentKindUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SystemComponentKindUpsertOne) DoNothing() *SystemComponentKindUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SystemComponentKindCreate.OnConflict
// documentation for more info.
func (u *SystemComponentKindUpsertOne) Update(set func(*SystemComponentKindUpsert)) *SystemComponentKindUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SystemComponentKindUpsert{UpdateSet: update})
	}))
	return u
}

// SetLabel sets the "label" field.
func (u *SystemComponentKindUpsertOne) SetLabel(v string) *SystemComponentKindUpsertOne {
	return u.Update(func(s *SystemComponentKindUpsert) {
		s.SetLabel(v)
	})
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *SystemComponentKindUpsertOne) UpdateLabel() *SystemComponentKindUpsertOne {
	return u.Update(func(s *SystemComponentKindUpsert) {
		s.UpdateLabel()
	})
}

// SetDescription sets the "description" field.
func (u *SystemComponentKindUpsertOne) SetDescription(v string) *SystemComponentKindUpsertOne {
	return u.Update(func(s *SystemComponentKindUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SystemComponentKindUpsertOne) UpdateDescription() *SystemComponentKindUpsertOne {
	return u.Update(func(s *SystemComponentKindUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *SystemComponentKindUpsertOne) ClearDescription() *SystemComponentKindUpsertOne {
	return u.Update(func(s *SystemComponentKindUpsert) {
		s.ClearDescription()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SystemComponentKindUpsertOne) SetCreatedAt(v time.Time) *SystemComponentKindUpsertOne {
	return u.Update(func(s *SystemComponentKindUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SystemComponentKindUpsertOne) UpdateCreatedAt() *SystemComponentKindUpsertOne {
	return u.Update(func(s *SystemComponentKindUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *SystemComponentKindUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SystemComponentKindCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SystemComponentKindUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SystemComponentKindUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: SystemComponentKindUpsertOne.ID is not supported by MySQL driver. Use SystemComponentKindUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SystemComponentKindUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SystemComponentKindCreateBulk is the builder for creating many SystemComponentKind entities in bulk.
type SystemComponentKindCreateBulk struct {
	config
	err      error
	builders []*SystemComponentKindCreate
	conflict []sql.ConflictOption
}

// Save creates the SystemComponentKind entities in the database.
func (sckcb *SystemComponentKindCreateBulk) Save(ctx context.Context) ([]*SystemComponentKind, error) {
	if sckcb.err != nil {
		return nil, sckcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sckcb.builders))
	nodes := make([]*SystemComponentKind, len(sckcb.builders))
	mutators := make([]Mutator, len(sckcb.builders))
	for i := range sckcb.builders {
		func(i int, root context.Context) {
			builder := sckcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SystemComponentKindMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sckcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sckcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sckcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sckcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sckcb *SystemComponentKindCreateBulk) SaveX(ctx context.Context) []*SystemComponentKind {
	v, err := sckcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sckcb *SystemComponentKindCreateBulk) Exec(ctx context.Context) error {
	_, err := sckcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sckcb *SystemComponentKindCreateBulk) ExecX(ctx context.Context) {
	if err := sckcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SystemComponentKind.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SystemComponentKindUpsert) {
//			SetLabel(v+v).
//		}).
//		Exec(ctx)
func (sckcb *SystemComponentKindCreateBulk) OnConflict(opts ...sql.ConflictOption) *SystemComponentKindUpsertBulk {
	sckcb.conflict = opts
	return &SystemComponentKindUpsertBulk{
		create: sckcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SystemComponentKind.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sckcb *SystemComponentKindCreateBulk) OnConflictColumns(columns ...string) *SystemComponentKindUpsertBulk {
	sckcb.conflict = append(sckcb.conflict, sql.ConflictColumns(columns...))
	return &SystemComponentKindUpsertBulk{
		create: sckcb,
	}
}

// SystemComponentKindUpsertBulk is the builder for "upsert"-ing
// a bulk of SystemComponentKind nodes.
type SystemComponentKindUpsertBulk struct {
	create *SystemComponentKindCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SystemComponentKind.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(systemcomponentkind.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SystemComponentKindUpsertBulk) UpdateNewValues() *SystemComponentKindUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(systemcomponentkind.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SystemComponentKind.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SystemComponentKindUpsertBulk) Ignore() *SystemComponentKindUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SystemComponentKindUpsertBulk) DoNothing() *SystemComponentKindUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SystemComponentKindCreateBulk.OnConflict
// documentation for more info.
func (u *SystemComponentKindUpsertBulk) Update(set func(*SystemComponentKindUpsert)) *SystemComponentKindUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SystemComponentKindUpsert{UpdateSet: update})
	}))
	return u
}

// SetLabel sets the "label" field.
func (u *SystemComponentKindUpsertBulk) SetLabel(v string) *SystemComponentKindUpsertBulk {
	return u.Update(func(s *SystemComponentKindUpsert) {
		s.SetLabel(v)
	})
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *SystemComponentKindUpsertBulk) UpdateLabel() *SystemComponentKindUpsertBulk {
	return u.Update(func(s *SystemComponentKindUpsert) {
		s.UpdateLabel()
	})
}

// SetDescription sets the "description" field.
func (u *SystemComponentKindUpsertBulk) SetDescription(v string) *SystemComponentKindUpsertBulk {
	return u.Update(func(s *SystemComponentKindUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SystemComponentKindUpsertBulk) UpdateDescription() *SystemComponentKindUpsertBulk {
	return u.Update(func(s *SystemComponentKindUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *SystemComponentKindUpsertBulk) ClearDescription() *SystemComponentKindUpsertBulk {
	return u.Update(func(s *SystemComponentKindUpsert) {
		s.ClearDescription()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SystemComponentKindUpsertBulk) SetCreatedAt(v time.Time) *SystemComponentKindUpsertBulk {
	return u.Update(func(s *SystemComponentKindUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SystemComponentKindUpsertBulk) UpdateCreatedAt() *SystemComponentKindUpsertBulk {
	return u.Update(func(s *SystemComponentKindUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *SystemComponentKindUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SystemComponentKindCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SystemComponentKindCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SystemComponentKindUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
