// Code generated by ent, DO NOT EDIT.

package oncallusershift

import (
	"fmt"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the oncallusershift type in the database.
	Label = "oncall_user_shift"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldRosterID holds the string denoting the roster_id field in the database.
	FieldRosterID = "roster_id"
	// FieldProviderID holds the string denoting the provider_id field in the database.
	FieldProviderID = "provider_id"
	// FieldRole holds the string denoting the role field in the database.
	FieldRole = "role"
	// FieldPrimaryShiftID holds the string denoting the primary_shift_id field in the database.
	FieldPrimaryShiftID = "primary_shift_id"
	// FieldStartAt holds the string denoting the start_at field in the database.
	FieldStartAt = "start_at"
	// FieldEndAt holds the string denoting the end_at field in the database.
	FieldEndAt = "end_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeRoster holds the string denoting the roster edge name in mutations.
	EdgeRoster = "roster"
	// EdgePrimaryShift holds the string denoting the primary_shift edge name in mutations.
	EdgePrimaryShift = "primary_shift"
	// EdgeHandover holds the string denoting the handover edge name in mutations.
	EdgeHandover = "handover"
	// EdgeMetrics holds the string denoting the metrics edge name in mutations.
	EdgeMetrics = "metrics"
	// Table holds the table name of the oncallusershift in the database.
	Table = "oncall_user_shifts"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "oncall_user_shifts"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// RosterTable is the table that holds the roster relation/edge.
	RosterTable = "oncall_user_shifts"
	// RosterInverseTable is the table name for the OncallRoster entity.
	// It exists in this package in order to avoid circular dependency with the "oncallroster" package.
	RosterInverseTable = "oncall_rosters"
	// RosterColumn is the table column denoting the roster relation/edge.
	RosterColumn = "roster_id"
	// PrimaryShiftTable is the table that holds the primary_shift relation/edge.
	PrimaryShiftTable = "oncall_user_shifts"
	// PrimaryShiftColumn is the table column denoting the primary_shift relation/edge.
	PrimaryShiftColumn = "primary_shift_id"
	// HandoverTable is the table that holds the handover relation/edge.
	HandoverTable = "oncall_user_shift_handovers"
	// HandoverInverseTable is the table name for the OncallUserShiftHandover entity.
	// It exists in this package in order to avoid circular dependency with the "oncallusershifthandover" package.
	HandoverInverseTable = "oncall_user_shift_handovers"
	// HandoverColumn is the table column denoting the handover relation/edge.
	HandoverColumn = "shift_id"
	// MetricsTable is the table that holds the metrics relation/edge.
	MetricsTable = "oncall_user_shift_metrics"
	// MetricsInverseTable is the table name for the OncallUserShiftMetrics entity.
	// It exists in this package in order to avoid circular dependency with the "oncallusershiftmetrics" package.
	MetricsInverseTable = "oncall_user_shift_metrics"
	// MetricsColumn is the table column denoting the metrics relation/edge.
	MetricsColumn = "shift_id"
)

// Columns holds all SQL columns for oncallusershift fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldRosterID,
	FieldProviderID,
	FieldRole,
	FieldPrimaryShiftID,
	FieldStartAt,
	FieldEndAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/rezible/rezible/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Role defines the type for the "role" enum field.
type Role string

// RolePrimary is the default value of the Role enum.
const DefaultRole = RolePrimary

// Role values.
const (
	RolePrimary   Role = "primary"
	RoleSecondary Role = "secondary"
	RoleShadow    Role = "shadow"
	RoleCovering  Role = "covering"
)

func (r Role) String() string {
	return string(r)
}

// RoleValidator is a validator for the "role" field enum values. It is called by the builders before save.
func RoleValidator(r Role) error {
	switch r {
	case RolePrimary, RoleSecondary, RoleShadow, RoleCovering:
		return nil
	default:
		return fmt.Errorf("oncallusershift: invalid enum value for role field: %q", r)
	}
}

// OrderOption defines the ordering options for the OncallUserShift queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByRosterID orders the results by the roster_id field.
func ByRosterID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRosterID, opts...).ToFunc()
}

// ByProviderID orders the results by the provider_id field.
func ByProviderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProviderID, opts...).ToFunc()
}

// ByRole orders the results by the role field.
func ByRole(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRole, opts...).ToFunc()
}

// ByPrimaryShiftID orders the results by the primary_shift_id field.
func ByPrimaryShiftID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrimaryShiftID, opts...).ToFunc()
}

// ByStartAt orders the results by the start_at field.
func ByStartAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartAt, opts...).ToFunc()
}

// ByEndAt orders the results by the end_at field.
func ByEndAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByRosterField orders the results by roster field.
func ByRosterField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRosterStep(), sql.OrderByField(field, opts...))
	}
}

// ByPrimaryShiftField orders the results by primary_shift field.
func ByPrimaryShiftField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPrimaryShiftStep(), sql.OrderByField(field, opts...))
	}
}

// ByHandoverField orders the results by handover field.
func ByHandoverField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHandoverStep(), sql.OrderByField(field, opts...))
	}
}

// ByMetricsField orders the results by metrics field.
func ByMetricsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMetricsStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
	)
}
func newRosterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RosterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RosterTable, RosterColumn),
	)
}
func newPrimaryShiftStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, PrimaryShiftTable, PrimaryShiftColumn),
	)
}
func newHandoverStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HandoverInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, HandoverTable, HandoverColumn),
	)
}
func newMetricsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MetricsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, MetricsTable, MetricsColumn),
	)
}
