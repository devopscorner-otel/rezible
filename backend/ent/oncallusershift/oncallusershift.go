// Code generated by ent, DO NOT EDIT.

package oncallusershift

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the oncallusershift type in the database.
	Label = "oncall_user_shift"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldRosterID holds the string denoting the roster_id field in the database.
	FieldRosterID = "roster_id"
	// FieldStartAt holds the string denoting the start_at field in the database.
	FieldStartAt = "start_at"
	// FieldEndAt holds the string denoting the end_at field in the database.
	FieldEndAt = "end_at"
	// FieldProviderID holds the string denoting the provider_id field in the database.
	FieldProviderID = "provider_id"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeRoster holds the string denoting the roster edge name in mutations.
	EdgeRoster = "roster"
	// EdgeCovers holds the string denoting the covers edge name in mutations.
	EdgeCovers = "covers"
	// EdgeAnnotations holds the string denoting the annotations edge name in mutations.
	EdgeAnnotations = "annotations"
	// EdgeHandover holds the string denoting the handover edge name in mutations.
	EdgeHandover = "handover"
	// Table holds the table name of the oncallusershift in the database.
	Table = "oncall_user_shifts"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "oncall_user_shifts"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// RosterTable is the table that holds the roster relation/edge.
	RosterTable = "oncall_user_shifts"
	// RosterInverseTable is the table name for the OncallRoster entity.
	// It exists in this package in order to avoid circular dependency with the "oncallroster" package.
	RosterInverseTable = "oncall_rosters"
	// RosterColumn is the table column denoting the roster relation/edge.
	RosterColumn = "roster_id"
	// CoversTable is the table that holds the covers relation/edge.
	CoversTable = "oncall_user_shift_covers"
	// CoversInverseTable is the table name for the OncallUserShiftCover entity.
	// It exists in this package in order to avoid circular dependency with the "oncallusershiftcover" package.
	CoversInverseTable = "oncall_user_shift_covers"
	// CoversColumn is the table column denoting the covers relation/edge.
	CoversColumn = "shift_id"
	// AnnotationsTable is the table that holds the annotations relation/edge.
	AnnotationsTable = "oncall_user_shift_annotations"
	// AnnotationsInverseTable is the table name for the OncallUserShiftAnnotation entity.
	// It exists in this package in order to avoid circular dependency with the "oncallusershiftannotation" package.
	AnnotationsInverseTable = "oncall_user_shift_annotations"
	// AnnotationsColumn is the table column denoting the annotations relation/edge.
	AnnotationsColumn = "shift_id"
	// HandoverTable is the table that holds the handover relation/edge.
	HandoverTable = "oncall_user_shift_handovers"
	// HandoverInverseTable is the table name for the OncallUserShiftHandover entity.
	// It exists in this package in order to avoid circular dependency with the "oncallusershifthandover" package.
	HandoverInverseTable = "oncall_user_shift_handovers"
	// HandoverColumn is the table column denoting the handover relation/edge.
	HandoverColumn = "shift_id"
)

// Columns holds all SQL columns for oncallusershift fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldRosterID,
	FieldStartAt,
	FieldEndAt,
	FieldProviderID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the OncallUserShift queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByRosterID orders the results by the roster_id field.
func ByRosterID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRosterID, opts...).ToFunc()
}

// ByStartAt orders the results by the start_at field.
func ByStartAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartAt, opts...).ToFunc()
}

// ByEndAt orders the results by the end_at field.
func ByEndAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndAt, opts...).ToFunc()
}

// ByProviderID orders the results by the provider_id field.
func ByProviderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProviderID, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByRosterField orders the results by roster field.
func ByRosterField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRosterStep(), sql.OrderByField(field, opts...))
	}
}

// ByCoversCount orders the results by covers count.
func ByCoversCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCoversStep(), opts...)
	}
}

// ByCovers orders the results by covers terms.
func ByCovers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCoversStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAnnotationsCount orders the results by annotations count.
func ByAnnotationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAnnotationsStep(), opts...)
	}
}

// ByAnnotations orders the results by annotations terms.
func ByAnnotations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAnnotationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByHandoverField orders the results by handover field.
func ByHandoverField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHandoverStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
	)
}
func newRosterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RosterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RosterTable, RosterColumn),
	)
}
func newCoversStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CoversInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CoversTable, CoversColumn),
	)
}
func newAnnotationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AnnotationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AnnotationsTable, AnnotationsColumn),
	)
}
func newHandoverStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HandoverInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, HandoverTable, HandoverColumn),
	)
}
