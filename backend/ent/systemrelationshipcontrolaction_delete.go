// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/systemrelationshipcontrolaction"
)

// SystemRelationshipControlActionDelete is the builder for deleting a SystemRelationshipControlAction entity.
type SystemRelationshipControlActionDelete struct {
	config
	hooks    []Hook
	mutation *SystemRelationshipControlActionMutation
}

// Where appends a list predicates to the SystemRelationshipControlActionDelete builder.
func (srcad *SystemRelationshipControlActionDelete) Where(ps ...predicate.SystemRelationshipControlAction) *SystemRelationshipControlActionDelete {
	srcad.mutation.Where(ps...)
	return srcad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (srcad *SystemRelationshipControlActionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, srcad.sqlExec, srcad.mutation, srcad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (srcad *SystemRelationshipControlActionDelete) ExecX(ctx context.Context) int {
	n, err := srcad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (srcad *SystemRelationshipControlActionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(systemrelationshipcontrolaction.Table, sqlgraph.NewFieldSpec(systemrelationshipcontrolaction.FieldID, field.TypeUUID))
	if ps := srcad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, srcad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	srcad.mutation.done = true
	return affected, err
}

// SystemRelationshipControlActionDeleteOne is the builder for deleting a single SystemRelationshipControlAction entity.
type SystemRelationshipControlActionDeleteOne struct {
	srcad *SystemRelationshipControlActionDelete
}

// Where appends a list predicates to the SystemRelationshipControlActionDelete builder.
func (srcado *SystemRelationshipControlActionDeleteOne) Where(ps ...predicate.SystemRelationshipControlAction) *SystemRelationshipControlActionDeleteOne {
	srcado.srcad.mutation.Where(ps...)
	return srcado
}

// Exec executes the deletion query.
func (srcado *SystemRelationshipControlActionDeleteOne) Exec(ctx context.Context) error {
	n, err := srcado.srcad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{systemrelationshipcontrolaction.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (srcado *SystemRelationshipControlActionDeleteOne) ExecX(ctx context.Context) {
	if err := srcado.Exec(ctx); err != nil {
		panic(err)
	}
}
