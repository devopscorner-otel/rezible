// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/rezible/rezible/ent/alert"
	"github.com/rezible/rezible/ent/alertmetrics"
	"github.com/rezible/rezible/ent/environment"
	"github.com/rezible/rezible/ent/functionality"
	"github.com/rezible/rezible/ent/incident"
	"github.com/rezible/rezible/ent/incidentdebrief"
	"github.com/rezible/rezible/ent/incidentdebriefmessage"
	"github.com/rezible/rezible/ent/incidentdebriefquestion"
	"github.com/rezible/rezible/ent/incidentdebriefsuggestion"
	"github.com/rezible/rezible/ent/incidentevent"
	"github.com/rezible/rezible/ent/incidenteventcontext"
	"github.com/rezible/rezible/ent/incidenteventcontributingfactor"
	"github.com/rezible/rezible/ent/incidenteventevidence"
	"github.com/rezible/rezible/ent/incidenteventsystemcomponent"
	"github.com/rezible/rezible/ent/incidentfield"
	"github.com/rezible/rezible/ent/incidentfieldoption"
	"github.com/rezible/rezible/ent/incidentlink"
	"github.com/rezible/rezible/ent/incidentmilestone"
	"github.com/rezible/rezible/ent/incidentrole"
	"github.com/rezible/rezible/ent/incidentroleassignment"
	"github.com/rezible/rezible/ent/incidentseverity"
	"github.com/rezible/rezible/ent/incidenttag"
	"github.com/rezible/rezible/ent/incidentteamassignment"
	"github.com/rezible/rezible/ent/incidenttype"
	"github.com/rezible/rezible/ent/meetingschedule"
	"github.com/rezible/rezible/ent/meetingsession"
	"github.com/rezible/rezible/ent/oncallannotation"
	"github.com/rezible/rezible/ent/oncallannotationalertfeedback"
	"github.com/rezible/rezible/ent/oncallevent"
	"github.com/rezible/rezible/ent/oncallhandovertemplate"
	"github.com/rezible/rezible/ent/oncallroster"
	"github.com/rezible/rezible/ent/oncallrostermetrics"
	"github.com/rezible/rezible/ent/oncallschedule"
	"github.com/rezible/rezible/ent/oncallscheduleparticipant"
	"github.com/rezible/rezible/ent/oncallusershift"
	"github.com/rezible/rezible/ent/oncallusershifthandover"
	"github.com/rezible/rezible/ent/oncallusershiftmetrics"
	"github.com/rezible/rezible/ent/playbook"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/providerconfig"
	"github.com/rezible/rezible/ent/providersynchistory"
	"github.com/rezible/rezible/ent/retrospective"
	"github.com/rezible/rezible/ent/retrospectivediscussion"
	"github.com/rezible/rezible/ent/retrospectivediscussionreply"
	"github.com/rezible/rezible/ent/retrospectivereview"
	"github.com/rezible/rezible/ent/systemanalysis"
	"github.com/rezible/rezible/ent/systemanalysiscomponent"
	"github.com/rezible/rezible/ent/systemanalysisrelationship"
	"github.com/rezible/rezible/ent/systemcomponent"
	"github.com/rezible/rezible/ent/systemcomponentconstraint"
	"github.com/rezible/rezible/ent/systemcomponentcontrol"
	"github.com/rezible/rezible/ent/systemcomponentkind"
	"github.com/rezible/rezible/ent/systemcomponentrelationship"
	"github.com/rezible/rezible/ent/systemcomponentsignal"
	"github.com/rezible/rezible/ent/systemhazard"
	"github.com/rezible/rezible/ent/systemrelationshipcontrolaction"
	"github.com/rezible/rezible/ent/systemrelationshipfeedbacksignal"
	"github.com/rezible/rezible/ent/task"
	"github.com/rezible/rezible/ent/team"
	"github.com/rezible/rezible/ent/tenant"
	"github.com/rezible/rezible/ent/ticket"
	"github.com/rezible/rezible/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 61)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   alert.Table,
			Columns: alert.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: alert.FieldID,
			},
		},
		Type: "Alert",
		Fields: map[string]*sqlgraph.FieldSpec{
			alert.FieldTitle:      {Type: field.TypeString, Column: alert.FieldTitle},
			alert.FieldProviderID: {Type: field.TypeString, Column: alert.FieldProviderID},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   alertmetrics.Table,
			Columns: alertmetrics.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: alertmetrics.FieldID,
			},
		},
		Type: "AlertMetrics",
		Fields: map[string]*sqlgraph.FieldSpec{
			alertmetrics.FieldAlertID: {Type: field.TypeUUID, Column: alertmetrics.FieldAlertID},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   environment.Table,
			Columns: environment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: environment.FieldID,
			},
		},
		Type: "Environment",
		Fields: map[string]*sqlgraph.FieldSpec{
			environment.FieldArchiveTime: {Type: field.TypeTime, Column: environment.FieldArchiveTime},
			environment.FieldName:        {Type: field.TypeString, Column: environment.FieldName},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   functionality.Table,
			Columns: functionality.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: functionality.FieldID,
			},
		},
		Type: "Functionality",
		Fields: map[string]*sqlgraph.FieldSpec{
			functionality.FieldName: {Type: field.TypeString, Column: functionality.FieldName},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   incident.Table,
			Columns: incident.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: incident.FieldID,
			},
		},
		Type: "Incident",
		Fields: map[string]*sqlgraph.FieldSpec{
			incident.FieldSlug:          {Type: field.TypeString, Column: incident.FieldSlug},
			incident.FieldTitle:         {Type: field.TypeString, Column: incident.FieldTitle},
			incident.FieldPrivate:       {Type: field.TypeBool, Column: incident.FieldPrivate},
			incident.FieldSummary:       {Type: field.TypeString, Column: incident.FieldSummary},
			incident.FieldOpenedAt:      {Type: field.TypeTime, Column: incident.FieldOpenedAt},
			incident.FieldModifiedAt:    {Type: field.TypeTime, Column: incident.FieldModifiedAt},
			incident.FieldClosedAt:      {Type: field.TypeTime, Column: incident.FieldClosedAt},
			incident.FieldProviderID:    {Type: field.TypeString, Column: incident.FieldProviderID},
			incident.FieldChatChannelID: {Type: field.TypeString, Column: incident.FieldChatChannelID},
			incident.FieldSeverityID:    {Type: field.TypeUUID, Column: incident.FieldSeverityID},
			incident.FieldTypeID:        {Type: field.TypeUUID, Column: incident.FieldTypeID},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   incidentdebrief.Table,
			Columns: incidentdebrief.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: incidentdebrief.FieldID,
			},
		},
		Type: "IncidentDebrief",
		Fields: map[string]*sqlgraph.FieldSpec{
			incidentdebrief.FieldIncidentID: {Type: field.TypeUUID, Column: incidentdebrief.FieldIncidentID},
			incidentdebrief.FieldUserID:     {Type: field.TypeUUID, Column: incidentdebrief.FieldUserID},
			incidentdebrief.FieldRequired:   {Type: field.TypeBool, Column: incidentdebrief.FieldRequired},
			incidentdebrief.FieldStarted:    {Type: field.TypeBool, Column: incidentdebrief.FieldStarted},
		},
	}
	graph.Nodes[6] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   incidentdebriefmessage.Table,
			Columns: incidentdebriefmessage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: incidentdebriefmessage.FieldID,
			},
		},
		Type: "IncidentDebriefMessage",
		Fields: map[string]*sqlgraph.FieldSpec{
			incidentdebriefmessage.FieldDebriefID:     {Type: field.TypeUUID, Column: incidentdebriefmessage.FieldDebriefID},
			incidentdebriefmessage.FieldQuestionID:    {Type: field.TypeUUID, Column: incidentdebriefmessage.FieldQuestionID},
			incidentdebriefmessage.FieldCreatedAt:     {Type: field.TypeTime, Column: incidentdebriefmessage.FieldCreatedAt},
			incidentdebriefmessage.FieldType:          {Type: field.TypeEnum, Column: incidentdebriefmessage.FieldType},
			incidentdebriefmessage.FieldRequestedTool: {Type: field.TypeEnum, Column: incidentdebriefmessage.FieldRequestedTool},
			incidentdebriefmessage.FieldBody:          {Type: field.TypeString, Column: incidentdebriefmessage.FieldBody},
		},
	}
	graph.Nodes[7] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   incidentdebriefquestion.Table,
			Columns: incidentdebriefquestion.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: incidentdebriefquestion.FieldID,
			},
		},
		Type: "IncidentDebriefQuestion",
		Fields: map[string]*sqlgraph.FieldSpec{
			incidentdebriefquestion.FieldContent: {Type: field.TypeString, Column: incidentdebriefquestion.FieldContent},
		},
	}
	graph.Nodes[8] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   incidentdebriefsuggestion.Table,
			Columns: incidentdebriefsuggestion.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: incidentdebriefsuggestion.FieldID,
			},
		},
		Type: "IncidentDebriefSuggestion",
		Fields: map[string]*sqlgraph.FieldSpec{
			incidentdebriefsuggestion.FieldContent: {Type: field.TypeString, Column: incidentdebriefsuggestion.FieldContent},
		},
	}
	graph.Nodes[9] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   incidentevent.Table,
			Columns: incidentevent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: incidentevent.FieldID,
			},
		},
		Type: "IncidentEvent",
		Fields: map[string]*sqlgraph.FieldSpec{
			incidentevent.FieldIncidentID:  {Type: field.TypeUUID, Column: incidentevent.FieldIncidentID},
			incidentevent.FieldTimestamp:   {Type: field.TypeTime, Column: incidentevent.FieldTimestamp},
			incidentevent.FieldKind:        {Type: field.TypeEnum, Column: incidentevent.FieldKind},
			incidentevent.FieldTitle:       {Type: field.TypeString, Column: incidentevent.FieldTitle},
			incidentevent.FieldDescription: {Type: field.TypeString, Column: incidentevent.FieldDescription},
			incidentevent.FieldIsKey:       {Type: field.TypeBool, Column: incidentevent.FieldIsKey},
			incidentevent.FieldCreatedAt:   {Type: field.TypeTime, Column: incidentevent.FieldCreatedAt},
			incidentevent.FieldUpdatedAt:   {Type: field.TypeTime, Column: incidentevent.FieldUpdatedAt},
			incidentevent.FieldCreatedBy:   {Type: field.TypeUUID, Column: incidentevent.FieldCreatedBy},
			incidentevent.FieldSequence:    {Type: field.TypeInt, Column: incidentevent.FieldSequence},
			incidentevent.FieldIsDraft:     {Type: field.TypeBool, Column: incidentevent.FieldIsDraft},
		},
	}
	graph.Nodes[10] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   incidenteventcontext.Table,
			Columns: incidenteventcontext.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: incidenteventcontext.FieldID,
			},
		},
		Type: "IncidentEventContext",
		Fields: map[string]*sqlgraph.FieldSpec{
			incidenteventcontext.FieldSystemState:       {Type: field.TypeString, Column: incidenteventcontext.FieldSystemState},
			incidenteventcontext.FieldDecisionOptions:   {Type: field.TypeJSON, Column: incidenteventcontext.FieldDecisionOptions},
			incidenteventcontext.FieldDecisionRationale: {Type: field.TypeString, Column: incidenteventcontext.FieldDecisionRationale},
			incidenteventcontext.FieldInvolvedPersonnel: {Type: field.TypeJSON, Column: incidenteventcontext.FieldInvolvedPersonnel},
			incidenteventcontext.FieldCreatedAt:         {Type: field.TypeTime, Column: incidenteventcontext.FieldCreatedAt},
		},
	}
	graph.Nodes[11] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   incidenteventcontributingfactor.Table,
			Columns: incidenteventcontributingfactor.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: incidenteventcontributingfactor.FieldID,
			},
		},
		Type: "IncidentEventContributingFactor",
		Fields: map[string]*sqlgraph.FieldSpec{
			incidenteventcontributingfactor.FieldFactorType:  {Type: field.TypeString, Column: incidenteventcontributingfactor.FieldFactorType},
			incidenteventcontributingfactor.FieldDescription: {Type: field.TypeString, Column: incidenteventcontributingfactor.FieldDescription},
			incidenteventcontributingfactor.FieldCreatedAt:   {Type: field.TypeTime, Column: incidenteventcontributingfactor.FieldCreatedAt},
		},
	}
	graph.Nodes[12] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   incidenteventevidence.Table,
			Columns: incidenteventevidence.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: incidenteventevidence.FieldID,
			},
		},
		Type: "IncidentEventEvidence",
		Fields: map[string]*sqlgraph.FieldSpec{
			incidenteventevidence.FieldEvidenceType: {Type: field.TypeEnum, Column: incidenteventevidence.FieldEvidenceType},
			incidenteventevidence.FieldURL:          {Type: field.TypeString, Column: incidenteventevidence.FieldURL},
			incidenteventevidence.FieldTitle:        {Type: field.TypeString, Column: incidenteventevidence.FieldTitle},
			incidenteventevidence.FieldDescription:  {Type: field.TypeString, Column: incidenteventevidence.FieldDescription},
			incidenteventevidence.FieldCreatedAt:    {Type: field.TypeTime, Column: incidenteventevidence.FieldCreatedAt},
		},
	}
	graph.Nodes[13] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   incidenteventsystemcomponent.Table,
			Columns: incidenteventsystemcomponent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: incidenteventsystemcomponent.FieldID,
			},
		},
		Type: "IncidentEventSystemComponent",
		Fields: map[string]*sqlgraph.FieldSpec{
			incidenteventsystemcomponent.FieldIncidentEventID:   {Type: field.TypeUUID, Column: incidenteventsystemcomponent.FieldIncidentEventID},
			incidenteventsystemcomponent.FieldSystemComponentID: {Type: field.TypeUUID, Column: incidenteventsystemcomponent.FieldSystemComponentID},
			incidenteventsystemcomponent.FieldRelationship:      {Type: field.TypeEnum, Column: incidenteventsystemcomponent.FieldRelationship},
			incidenteventsystemcomponent.FieldCreatedAt:         {Type: field.TypeTime, Column: incidenteventsystemcomponent.FieldCreatedAt},
		},
	}
	graph.Nodes[14] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   incidentfield.Table,
			Columns: incidentfield.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: incidentfield.FieldID,
			},
		},
		Type: "IncidentField",
		Fields: map[string]*sqlgraph.FieldSpec{
			incidentfield.FieldArchiveTime: {Type: field.TypeTime, Column: incidentfield.FieldArchiveTime},
			incidentfield.FieldName:        {Type: field.TypeString, Column: incidentfield.FieldName},
		},
	}
	graph.Nodes[15] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   incidentfieldoption.Table,
			Columns: incidentfieldoption.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: incidentfieldoption.FieldID,
			},
		},
		Type: "IncidentFieldOption",
		Fields: map[string]*sqlgraph.FieldSpec{
			incidentfieldoption.FieldArchiveTime:     {Type: field.TypeTime, Column: incidentfieldoption.FieldArchiveTime},
			incidentfieldoption.FieldIncidentFieldID: {Type: field.TypeUUID, Column: incidentfieldoption.FieldIncidentFieldID},
			incidentfieldoption.FieldType:            {Type: field.TypeEnum, Column: incidentfieldoption.FieldType},
			incidentfieldoption.FieldValue:           {Type: field.TypeString, Column: incidentfieldoption.FieldValue},
		},
	}
	graph.Nodes[16] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   incidentlink.Table,
			Columns: incidentlink.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: incidentlink.FieldID,
			},
		},
		Type: "IncidentLink",
		Fields: map[string]*sqlgraph.FieldSpec{
			incidentlink.FieldIncidentID:       {Type: field.TypeUUID, Column: incidentlink.FieldIncidentID},
			incidentlink.FieldLinkedIncidentID: {Type: field.TypeUUID, Column: incidentlink.FieldLinkedIncidentID},
			incidentlink.FieldDescription:      {Type: field.TypeString, Column: incidentlink.FieldDescription},
			incidentlink.FieldLinkType:         {Type: field.TypeEnum, Column: incidentlink.FieldLinkType},
		},
	}
	graph.Nodes[17] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   incidentmilestone.Table,
			Columns: incidentmilestone.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: incidentmilestone.FieldID,
			},
		},
		Type: "IncidentMilestone",
		Fields: map[string]*sqlgraph.FieldSpec{
			incidentmilestone.FieldIncidentID:  {Type: field.TypeUUID, Column: incidentmilestone.FieldIncidentID},
			incidentmilestone.FieldKind:        {Type: field.TypeEnum, Column: incidentmilestone.FieldKind},
			incidentmilestone.FieldDescription: {Type: field.TypeString, Column: incidentmilestone.FieldDescription},
			incidentmilestone.FieldTime:        {Type: field.TypeTime, Column: incidentmilestone.FieldTime},
		},
	}
	graph.Nodes[18] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   incidentrole.Table,
			Columns: incidentrole.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: incidentrole.FieldID,
			},
		},
		Type: "IncidentRole",
		Fields: map[string]*sqlgraph.FieldSpec{
			incidentrole.FieldArchiveTime: {Type: field.TypeTime, Column: incidentrole.FieldArchiveTime},
			incidentrole.FieldName:        {Type: field.TypeString, Column: incidentrole.FieldName},
			incidentrole.FieldProviderID:  {Type: field.TypeString, Column: incidentrole.FieldProviderID},
			incidentrole.FieldRequired:    {Type: field.TypeBool, Column: incidentrole.FieldRequired},
		},
	}
	graph.Nodes[19] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   incidentroleassignment.Table,
			Columns: incidentroleassignment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: incidentroleassignment.FieldID,
			},
		},
		Type: "IncidentRoleAssignment",
		Fields: map[string]*sqlgraph.FieldSpec{
			incidentroleassignment.FieldRoleID:     {Type: field.TypeUUID, Column: incidentroleassignment.FieldRoleID},
			incidentroleassignment.FieldIncidentID: {Type: field.TypeUUID, Column: incidentroleassignment.FieldIncidentID},
			incidentroleassignment.FieldUserID:     {Type: field.TypeUUID, Column: incidentroleassignment.FieldUserID},
		},
	}
	graph.Nodes[20] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   incidentseverity.Table,
			Columns: incidentseverity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: incidentseverity.FieldID,
			},
		},
		Type: "IncidentSeverity",
		Fields: map[string]*sqlgraph.FieldSpec{
			incidentseverity.FieldArchiveTime: {Type: field.TypeTime, Column: incidentseverity.FieldArchiveTime},
			incidentseverity.FieldProviderID:  {Type: field.TypeString, Column: incidentseverity.FieldProviderID},
			incidentseverity.FieldName:        {Type: field.TypeString, Column: incidentseverity.FieldName},
			incidentseverity.FieldRank:        {Type: field.TypeInt, Column: incidentseverity.FieldRank},
			incidentseverity.FieldColor:       {Type: field.TypeString, Column: incidentseverity.FieldColor},
			incidentseverity.FieldDescription: {Type: field.TypeString, Column: incidentseverity.FieldDescription},
		},
	}
	graph.Nodes[21] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   incidenttag.Table,
			Columns: incidenttag.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: incidenttag.FieldID,
			},
		},
		Type: "IncidentTag",
		Fields: map[string]*sqlgraph.FieldSpec{
			incidenttag.FieldArchiveTime: {Type: field.TypeTime, Column: incidenttag.FieldArchiveTime},
			incidenttag.FieldKey:         {Type: field.TypeString, Column: incidenttag.FieldKey},
			incidenttag.FieldValue:       {Type: field.TypeString, Column: incidenttag.FieldValue},
		},
	}
	graph.Nodes[22] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   incidentteamassignment.Table,
			Columns: incidentteamassignment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: incidentteamassignment.FieldID,
			},
		},
		Type: "IncidentTeamAssignment",
		Fields: map[string]*sqlgraph.FieldSpec{
			incidentteamassignment.FieldIncidentID: {Type: field.TypeUUID, Column: incidentteamassignment.FieldIncidentID},
			incidentteamassignment.FieldTeamID:     {Type: field.TypeUUID, Column: incidentteamassignment.FieldTeamID},
		},
	}
	graph.Nodes[23] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   incidenttype.Table,
			Columns: incidenttype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: incidenttype.FieldID,
			},
		},
		Type: "IncidentType",
		Fields: map[string]*sqlgraph.FieldSpec{
			incidenttype.FieldArchiveTime: {Type: field.TypeTime, Column: incidenttype.FieldArchiveTime},
			incidenttype.FieldName:        {Type: field.TypeString, Column: incidenttype.FieldName},
		},
	}
	graph.Nodes[24] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   meetingschedule.Table,
			Columns: meetingschedule.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: meetingschedule.FieldID,
			},
		},
		Type: "MeetingSchedule",
		Fields: map[string]*sqlgraph.FieldSpec{
			meetingschedule.FieldArchiveTime:     {Type: field.TypeTime, Column: meetingschedule.FieldArchiveTime},
			meetingschedule.FieldName:            {Type: field.TypeString, Column: meetingschedule.FieldName},
			meetingschedule.FieldDescription:     {Type: field.TypeString, Column: meetingschedule.FieldDescription},
			meetingschedule.FieldBeginMinute:     {Type: field.TypeInt, Column: meetingschedule.FieldBeginMinute},
			meetingschedule.FieldDurationMinutes: {Type: field.TypeInt, Column: meetingschedule.FieldDurationMinutes},
			meetingschedule.FieldStartDate:       {Type: field.TypeTime, Column: meetingschedule.FieldStartDate},
			meetingschedule.FieldRepeats:         {Type: field.TypeEnum, Column: meetingschedule.FieldRepeats},
			meetingschedule.FieldRepetitionStep:  {Type: field.TypeInt, Column: meetingschedule.FieldRepetitionStep},
			meetingschedule.FieldWeekDays:        {Type: field.TypeJSON, Column: meetingschedule.FieldWeekDays},
			meetingschedule.FieldMonthlyOn:       {Type: field.TypeEnum, Column: meetingschedule.FieldMonthlyOn},
			meetingschedule.FieldUntilDate:       {Type: field.TypeTime, Column: meetingschedule.FieldUntilDate},
			meetingschedule.FieldNumRepetitions:  {Type: field.TypeInt, Column: meetingschedule.FieldNumRepetitions},
		},
	}
	graph.Nodes[25] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   meetingsession.Table,
			Columns: meetingsession.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: meetingsession.FieldID,
			},
		},
		Type: "MeetingSession",
		Fields: map[string]*sqlgraph.FieldSpec{
			meetingsession.FieldTitle:        {Type: field.TypeString, Column: meetingsession.FieldTitle},
			meetingsession.FieldStartedAt:    {Type: field.TypeTime, Column: meetingsession.FieldStartedAt},
			meetingsession.FieldEndedAt:      {Type: field.TypeTime, Column: meetingsession.FieldEndedAt},
			meetingsession.FieldDocumentName: {Type: field.TypeString, Column: meetingsession.FieldDocumentName},
		},
	}
	graph.Nodes[26] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   oncallannotation.Table,
			Columns: oncallannotation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: oncallannotation.FieldID,
			},
		},
		Type: "OncallAnnotation",
		Fields: map[string]*sqlgraph.FieldSpec{
			oncallannotation.FieldEventID:         {Type: field.TypeUUID, Column: oncallannotation.FieldEventID},
			oncallannotation.FieldRosterID:        {Type: field.TypeUUID, Column: oncallannotation.FieldRosterID},
			oncallannotation.FieldCreatorID:       {Type: field.TypeUUID, Column: oncallannotation.FieldCreatorID},
			oncallannotation.FieldCreatedAt:       {Type: field.TypeTime, Column: oncallannotation.FieldCreatedAt},
			oncallannotation.FieldMinutesOccupied: {Type: field.TypeInt, Column: oncallannotation.FieldMinutesOccupied},
			oncallannotation.FieldNotes:           {Type: field.TypeString, Column: oncallannotation.FieldNotes},
			oncallannotation.FieldTags:            {Type: field.TypeJSON, Column: oncallannotation.FieldTags},
		},
	}
	graph.Nodes[27] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   oncallannotationalertfeedback.Table,
			Columns: oncallannotationalertfeedback.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: oncallannotationalertfeedback.FieldID,
			},
		},
		Type: "OncallAnnotationAlertFeedback",
		Fields: map[string]*sqlgraph.FieldSpec{
			oncallannotationalertfeedback.FieldAnnotationID:           {Type: field.TypeUUID, Column: oncallannotationalertfeedback.FieldAnnotationID},
			oncallannotationalertfeedback.FieldActionable:             {Type: field.TypeBool, Column: oncallannotationalertfeedback.FieldActionable},
			oncallannotationalertfeedback.FieldAccurate:               {Type: field.TypeEnum, Column: oncallannotationalertfeedback.FieldAccurate},
			oncallannotationalertfeedback.FieldDocumentationAvailable: {Type: field.TypeEnum, Column: oncallannotationalertfeedback.FieldDocumentationAvailable},
		},
	}
	graph.Nodes[28] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   oncallevent.Table,
			Columns: oncallevent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: oncallevent.FieldID,
			},
		},
		Type: "OncallEvent",
		Fields: map[string]*sqlgraph.FieldSpec{
			oncallevent.FieldProviderID:  {Type: field.TypeString, Column: oncallevent.FieldProviderID},
			oncallevent.FieldRosterID:    {Type: field.TypeUUID, Column: oncallevent.FieldRosterID},
			oncallevent.FieldAlertID:     {Type: field.TypeUUID, Column: oncallevent.FieldAlertID},
			oncallevent.FieldTimestamp:   {Type: field.TypeTime, Column: oncallevent.FieldTimestamp},
			oncallevent.FieldKind:        {Type: field.TypeEnum, Column: oncallevent.FieldKind},
			oncallevent.FieldTitle:       {Type: field.TypeString, Column: oncallevent.FieldTitle},
			oncallevent.FieldDescription: {Type: field.TypeString, Column: oncallevent.FieldDescription},
			oncallevent.FieldSource:      {Type: field.TypeString, Column: oncallevent.FieldSource},
		},
	}
	graph.Nodes[29] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   oncallhandovertemplate.Table,
			Columns: oncallhandovertemplate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: oncallhandovertemplate.FieldID,
			},
		},
		Type: "OncallHandoverTemplate",
		Fields: map[string]*sqlgraph.FieldSpec{
			oncallhandovertemplate.FieldCreatedAt: {Type: field.TypeTime, Column: oncallhandovertemplate.FieldCreatedAt},
			oncallhandovertemplate.FieldUpdatedAt: {Type: field.TypeTime, Column: oncallhandovertemplate.FieldUpdatedAt},
			oncallhandovertemplate.FieldContents:  {Type: field.TypeBytes, Column: oncallhandovertemplate.FieldContents},
			oncallhandovertemplate.FieldIsDefault: {Type: field.TypeBool, Column: oncallhandovertemplate.FieldIsDefault},
		},
	}
	graph.Nodes[30] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   oncallroster.Table,
			Columns: oncallroster.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: oncallroster.FieldID,
			},
		},
		Type: "OncallRoster",
		Fields: map[string]*sqlgraph.FieldSpec{
			oncallroster.FieldArchiveTime:        {Type: field.TypeTime, Column: oncallroster.FieldArchiveTime},
			oncallroster.FieldName:               {Type: field.TypeString, Column: oncallroster.FieldName},
			oncallroster.FieldSlug:               {Type: field.TypeString, Column: oncallroster.FieldSlug},
			oncallroster.FieldProviderID:         {Type: field.TypeString, Column: oncallroster.FieldProviderID},
			oncallroster.FieldTimezone:           {Type: field.TypeString, Column: oncallroster.FieldTimezone},
			oncallroster.FieldChatHandle:         {Type: field.TypeString, Column: oncallroster.FieldChatHandle},
			oncallroster.FieldChatChannelID:      {Type: field.TypeString, Column: oncallroster.FieldChatChannelID},
			oncallroster.FieldHandoverTemplateID: {Type: field.TypeUUID, Column: oncallroster.FieldHandoverTemplateID},
		},
	}
	graph.Nodes[31] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   oncallrostermetrics.Table,
			Columns: oncallrostermetrics.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: oncallrostermetrics.FieldID,
			},
		},
		Type: "OncallRosterMetrics",
		Fields: map[string]*sqlgraph.FieldSpec{
			oncallrostermetrics.FieldRosterID: {Type: field.TypeUUID, Column: oncallrostermetrics.FieldRosterID},
		},
	}
	graph.Nodes[32] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   oncallschedule.Table,
			Columns: oncallschedule.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: oncallschedule.FieldID,
			},
		},
		Type: "OncallSchedule",
		Fields: map[string]*sqlgraph.FieldSpec{
			oncallschedule.FieldArchiveTime: {Type: field.TypeTime, Column: oncallschedule.FieldArchiveTime},
			oncallschedule.FieldName:        {Type: field.TypeString, Column: oncallschedule.FieldName},
			oncallschedule.FieldRosterID:    {Type: field.TypeUUID, Column: oncallschedule.FieldRosterID},
			oncallschedule.FieldTimezone:    {Type: field.TypeString, Column: oncallschedule.FieldTimezone},
			oncallschedule.FieldProviderID:  {Type: field.TypeString, Column: oncallschedule.FieldProviderID},
		},
	}
	graph.Nodes[33] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   oncallscheduleparticipant.Table,
			Columns: oncallscheduleparticipant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: oncallscheduleparticipant.FieldID,
			},
		},
		Type: "OncallScheduleParticipant",
		Fields: map[string]*sqlgraph.FieldSpec{
			oncallscheduleparticipant.FieldScheduleID: {Type: field.TypeUUID, Column: oncallscheduleparticipant.FieldScheduleID},
			oncallscheduleparticipant.FieldUserID:     {Type: field.TypeUUID, Column: oncallscheduleparticipant.FieldUserID},
			oncallscheduleparticipant.FieldIndex:      {Type: field.TypeInt, Column: oncallscheduleparticipant.FieldIndex},
		},
	}
	graph.Nodes[34] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   oncallusershift.Table,
			Columns: oncallusershift.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: oncallusershift.FieldID,
			},
		},
		Type: "OncallUserShift",
		Fields: map[string]*sqlgraph.FieldSpec{
			oncallusershift.FieldUserID:         {Type: field.TypeUUID, Column: oncallusershift.FieldUserID},
			oncallusershift.FieldRosterID:       {Type: field.TypeUUID, Column: oncallusershift.FieldRosterID},
			oncallusershift.FieldProviderID:     {Type: field.TypeString, Column: oncallusershift.FieldProviderID},
			oncallusershift.FieldRole:           {Type: field.TypeEnum, Column: oncallusershift.FieldRole},
			oncallusershift.FieldPrimaryShiftID: {Type: field.TypeUUID, Column: oncallusershift.FieldPrimaryShiftID},
			oncallusershift.FieldStartAt:        {Type: field.TypeTime, Column: oncallusershift.FieldStartAt},
			oncallusershift.FieldEndAt:          {Type: field.TypeTime, Column: oncallusershift.FieldEndAt},
		},
	}
	graph.Nodes[35] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   oncallusershifthandover.Table,
			Columns: oncallusershifthandover.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: oncallusershifthandover.FieldID,
			},
		},
		Type: "OncallUserShiftHandover",
		Fields: map[string]*sqlgraph.FieldSpec{
			oncallusershifthandover.FieldShiftID:      {Type: field.TypeUUID, Column: oncallusershifthandover.FieldShiftID},
			oncallusershifthandover.FieldCreatedAt:    {Type: field.TypeTime, Column: oncallusershifthandover.FieldCreatedAt},
			oncallusershifthandover.FieldReminderSent: {Type: field.TypeBool, Column: oncallusershifthandover.FieldReminderSent},
			oncallusershifthandover.FieldUpdatedAt:    {Type: field.TypeTime, Column: oncallusershifthandover.FieldUpdatedAt},
			oncallusershifthandover.FieldSentAt:       {Type: field.TypeTime, Column: oncallusershifthandover.FieldSentAt},
			oncallusershifthandover.FieldContents:     {Type: field.TypeBytes, Column: oncallusershifthandover.FieldContents},
		},
	}
	graph.Nodes[36] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   oncallusershiftmetrics.Table,
			Columns: oncallusershiftmetrics.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: oncallusershiftmetrics.FieldID,
			},
		},
		Type: "OncallUserShiftMetrics",
		Fields: map[string]*sqlgraph.FieldSpec{
			oncallusershiftmetrics.FieldShiftID: {Type: field.TypeUUID, Column: oncallusershiftmetrics.FieldShiftID},
		},
	}
	graph.Nodes[37] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   playbook.Table,
			Columns: playbook.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: playbook.FieldID,
			},
		},
		Type: "Playbook",
		Fields: map[string]*sqlgraph.FieldSpec{
			playbook.FieldTitle:      {Type: field.TypeString, Column: playbook.FieldTitle},
			playbook.FieldProviderID: {Type: field.TypeString, Column: playbook.FieldProviderID},
			playbook.FieldContent:    {Type: field.TypeBytes, Column: playbook.FieldContent},
		},
	}
	graph.Nodes[38] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   providerconfig.Table,
			Columns: providerconfig.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: providerconfig.FieldID,
			},
		},
		Type: "ProviderConfig",
		Fields: map[string]*sqlgraph.FieldSpec{
			providerconfig.FieldProviderType:   {Type: field.TypeEnum, Column: providerconfig.FieldProviderType},
			providerconfig.FieldProviderName:   {Type: field.TypeString, Column: providerconfig.FieldProviderName},
			providerconfig.FieldProviderConfig: {Type: field.TypeBytes, Column: providerconfig.FieldProviderConfig},
			providerconfig.FieldEnabled:        {Type: field.TypeBool, Column: providerconfig.FieldEnabled},
			providerconfig.FieldUpdatedAt:      {Type: field.TypeTime, Column: providerconfig.FieldUpdatedAt},
		},
	}
	graph.Nodes[39] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   providersynchistory.Table,
			Columns: providersynchistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: providersynchistory.FieldID,
			},
		},
		Type: "ProviderSyncHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			providersynchistory.FieldDataType:     {Type: field.TypeString, Column: providersynchistory.FieldDataType},
			providersynchistory.FieldStartedAt:    {Type: field.TypeTime, Column: providersynchistory.FieldStartedAt},
			providersynchistory.FieldFinishedAt:   {Type: field.TypeTime, Column: providersynchistory.FieldFinishedAt},
			providersynchistory.FieldNumMutations: {Type: field.TypeInt, Column: providersynchistory.FieldNumMutations},
		},
	}
	graph.Nodes[40] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   retrospective.Table,
			Columns: retrospective.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: retrospective.FieldID,
			},
		},
		Type: "Retrospective",
		Fields: map[string]*sqlgraph.FieldSpec{
			retrospective.FieldIncidentID:       {Type: field.TypeUUID, Column: retrospective.FieldIncidentID},
			retrospective.FieldSystemAnalysisID: {Type: field.TypeUUID, Column: retrospective.FieldSystemAnalysisID},
			retrospective.FieldDocumentName:     {Type: field.TypeString, Column: retrospective.FieldDocumentName},
			retrospective.FieldType:             {Type: field.TypeEnum, Column: retrospective.FieldType},
			retrospective.FieldState:            {Type: field.TypeEnum, Column: retrospective.FieldState},
		},
	}
	graph.Nodes[41] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   retrospectivediscussion.Table,
			Columns: retrospectivediscussion.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: retrospectivediscussion.FieldID,
			},
		},
		Type: "RetrospectiveDiscussion",
		Fields: map[string]*sqlgraph.FieldSpec{
			retrospectivediscussion.FieldRetrospectiveID: {Type: field.TypeUUID, Column: retrospectivediscussion.FieldRetrospectiveID},
			retrospectivediscussion.FieldContent:         {Type: field.TypeBytes, Column: retrospectivediscussion.FieldContent},
		},
	}
	graph.Nodes[42] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   retrospectivediscussionreply.Table,
			Columns: retrospectivediscussionreply.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: retrospectivediscussionreply.FieldID,
			},
		},
		Type: "RetrospectiveDiscussionReply",
		Fields: map[string]*sqlgraph.FieldSpec{
			retrospectivediscussionreply.FieldContent: {Type: field.TypeBytes, Column: retrospectivediscussionreply.FieldContent},
		},
	}
	graph.Nodes[43] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   retrospectivereview.Table,
			Columns: retrospectivereview.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: retrospectivereview.FieldID,
			},
		},
		Type: "RetrospectiveReview",
		Fields: map[string]*sqlgraph.FieldSpec{
			retrospectivereview.FieldRetrospectiveID: {Type: field.TypeUUID, Column: retrospectivereview.FieldRetrospectiveID},
			retrospectivereview.FieldRequesterID:     {Type: field.TypeUUID, Column: retrospectivereview.FieldRequesterID},
			retrospectivereview.FieldReviewerID:      {Type: field.TypeUUID, Column: retrospectivereview.FieldReviewerID},
			retrospectivereview.FieldState:           {Type: field.TypeEnum, Column: retrospectivereview.FieldState},
		},
	}
	graph.Nodes[44] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   systemanalysis.Table,
			Columns: systemanalysis.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: systemanalysis.FieldID,
			},
		},
		Type: "SystemAnalysis",
		Fields: map[string]*sqlgraph.FieldSpec{
			systemanalysis.FieldCreatedAt: {Type: field.TypeTime, Column: systemanalysis.FieldCreatedAt},
			systemanalysis.FieldUpdatedAt: {Type: field.TypeTime, Column: systemanalysis.FieldUpdatedAt},
		},
	}
	graph.Nodes[45] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   systemanalysiscomponent.Table,
			Columns: systemanalysiscomponent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: systemanalysiscomponent.FieldID,
			},
		},
		Type: "SystemAnalysisComponent",
		Fields: map[string]*sqlgraph.FieldSpec{
			systemanalysiscomponent.FieldAnalysisID:  {Type: field.TypeUUID, Column: systemanalysiscomponent.FieldAnalysisID},
			systemanalysiscomponent.FieldComponentID: {Type: field.TypeUUID, Column: systemanalysiscomponent.FieldComponentID},
			systemanalysiscomponent.FieldDescription: {Type: field.TypeString, Column: systemanalysiscomponent.FieldDescription},
			systemanalysiscomponent.FieldPosX:        {Type: field.TypeFloat64, Column: systemanalysiscomponent.FieldPosX},
			systemanalysiscomponent.FieldPosY:        {Type: field.TypeFloat64, Column: systemanalysiscomponent.FieldPosY},
			systemanalysiscomponent.FieldCreatedAt:   {Type: field.TypeTime, Column: systemanalysiscomponent.FieldCreatedAt},
		},
	}
	graph.Nodes[46] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   systemanalysisrelationship.Table,
			Columns: systemanalysisrelationship.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: systemanalysisrelationship.FieldID,
			},
		},
		Type: "SystemAnalysisRelationship",
		Fields: map[string]*sqlgraph.FieldSpec{
			systemanalysisrelationship.FieldAnalysisID:              {Type: field.TypeUUID, Column: systemanalysisrelationship.FieldAnalysisID},
			systemanalysisrelationship.FieldComponentRelationshipID: {Type: field.TypeUUID, Column: systemanalysisrelationship.FieldComponentRelationshipID},
			systemanalysisrelationship.FieldDescription:             {Type: field.TypeString, Column: systemanalysisrelationship.FieldDescription},
			systemanalysisrelationship.FieldCreatedAt:               {Type: field.TypeTime, Column: systemanalysisrelationship.FieldCreatedAt},
		},
	}
	graph.Nodes[47] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   systemcomponent.Table,
			Columns: systemcomponent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: systemcomponent.FieldID,
			},
		},
		Type: "SystemComponent",
		Fields: map[string]*sqlgraph.FieldSpec{
			systemcomponent.FieldName:        {Type: field.TypeString, Column: systemcomponent.FieldName},
			systemcomponent.FieldProviderID:  {Type: field.TypeString, Column: systemcomponent.FieldProviderID},
			systemcomponent.FieldKindID:      {Type: field.TypeUUID, Column: systemcomponent.FieldKindID},
			systemcomponent.FieldDescription: {Type: field.TypeString, Column: systemcomponent.FieldDescription},
			systemcomponent.FieldProperties:  {Type: field.TypeJSON, Column: systemcomponent.FieldProperties},
			systemcomponent.FieldCreatedAt:   {Type: field.TypeTime, Column: systemcomponent.FieldCreatedAt},
			systemcomponent.FieldUpdatedAt:   {Type: field.TypeTime, Column: systemcomponent.FieldUpdatedAt},
		},
	}
	graph.Nodes[48] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   systemcomponentconstraint.Table,
			Columns: systemcomponentconstraint.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: systemcomponentconstraint.FieldID,
			},
		},
		Type: "SystemComponentConstraint",
		Fields: map[string]*sqlgraph.FieldSpec{
			systemcomponentconstraint.FieldComponentID: {Type: field.TypeUUID, Column: systemcomponentconstraint.FieldComponentID},
			systemcomponentconstraint.FieldLabel:       {Type: field.TypeString, Column: systemcomponentconstraint.FieldLabel},
			systemcomponentconstraint.FieldDescription: {Type: field.TypeString, Column: systemcomponentconstraint.FieldDescription},
			systemcomponentconstraint.FieldCreatedAt:   {Type: field.TypeTime, Column: systemcomponentconstraint.FieldCreatedAt},
		},
	}
	graph.Nodes[49] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   systemcomponentcontrol.Table,
			Columns: systemcomponentcontrol.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: systemcomponentcontrol.FieldID,
			},
		},
		Type: "SystemComponentControl",
		Fields: map[string]*sqlgraph.FieldSpec{
			systemcomponentcontrol.FieldComponentID: {Type: field.TypeUUID, Column: systemcomponentcontrol.FieldComponentID},
			systemcomponentcontrol.FieldLabel:       {Type: field.TypeString, Column: systemcomponentcontrol.FieldLabel},
			systemcomponentcontrol.FieldDescription: {Type: field.TypeString, Column: systemcomponentcontrol.FieldDescription},
			systemcomponentcontrol.FieldCreatedAt:   {Type: field.TypeTime, Column: systemcomponentcontrol.FieldCreatedAt},
		},
	}
	graph.Nodes[50] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   systemcomponentkind.Table,
			Columns: systemcomponentkind.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: systemcomponentkind.FieldID,
			},
		},
		Type: "SystemComponentKind",
		Fields: map[string]*sqlgraph.FieldSpec{
			systemcomponentkind.FieldProviderID:  {Type: field.TypeString, Column: systemcomponentkind.FieldProviderID},
			systemcomponentkind.FieldLabel:       {Type: field.TypeString, Column: systemcomponentkind.FieldLabel},
			systemcomponentkind.FieldDescription: {Type: field.TypeString, Column: systemcomponentkind.FieldDescription},
			systemcomponentkind.FieldCreatedAt:   {Type: field.TypeTime, Column: systemcomponentkind.FieldCreatedAt},
		},
	}
	graph.Nodes[51] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   systemcomponentrelationship.Table,
			Columns: systemcomponentrelationship.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: systemcomponentrelationship.FieldID,
			},
		},
		Type: "SystemComponentRelationship",
		Fields: map[string]*sqlgraph.FieldSpec{
			systemcomponentrelationship.FieldProviderID:  {Type: field.TypeString, Column: systemcomponentrelationship.FieldProviderID},
			systemcomponentrelationship.FieldSourceID:    {Type: field.TypeUUID, Column: systemcomponentrelationship.FieldSourceID},
			systemcomponentrelationship.FieldTargetID:    {Type: field.TypeUUID, Column: systemcomponentrelationship.FieldTargetID},
			systemcomponentrelationship.FieldDescription: {Type: field.TypeString, Column: systemcomponentrelationship.FieldDescription},
			systemcomponentrelationship.FieldCreatedAt:   {Type: field.TypeTime, Column: systemcomponentrelationship.FieldCreatedAt},
		},
	}
	graph.Nodes[52] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   systemcomponentsignal.Table,
			Columns: systemcomponentsignal.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: systemcomponentsignal.FieldID,
			},
		},
		Type: "SystemComponentSignal",
		Fields: map[string]*sqlgraph.FieldSpec{
			systemcomponentsignal.FieldComponentID: {Type: field.TypeUUID, Column: systemcomponentsignal.FieldComponentID},
			systemcomponentsignal.FieldLabel:       {Type: field.TypeString, Column: systemcomponentsignal.FieldLabel},
			systemcomponentsignal.FieldDescription: {Type: field.TypeString, Column: systemcomponentsignal.FieldDescription},
			systemcomponentsignal.FieldCreatedAt:   {Type: field.TypeTime, Column: systemcomponentsignal.FieldCreatedAt},
		},
	}
	graph.Nodes[53] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   systemhazard.Table,
			Columns: systemhazard.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: systemhazard.FieldID,
			},
		},
		Type: "SystemHazard",
		Fields: map[string]*sqlgraph.FieldSpec{
			systemhazard.FieldName:        {Type: field.TypeString, Column: systemhazard.FieldName},
			systemhazard.FieldDescription: {Type: field.TypeString, Column: systemhazard.FieldDescription},
			systemhazard.FieldCreatedAt:   {Type: field.TypeTime, Column: systemhazard.FieldCreatedAt},
			systemhazard.FieldUpdatedAt:   {Type: field.TypeTime, Column: systemhazard.FieldUpdatedAt},
		},
	}
	graph.Nodes[54] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   systemrelationshipcontrolaction.Table,
			Columns: systemrelationshipcontrolaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: systemrelationshipcontrolaction.FieldID,
			},
		},
		Type: "SystemRelationshipControlAction",
		Fields: map[string]*sqlgraph.FieldSpec{
			systemrelationshipcontrolaction.FieldRelationshipID: {Type: field.TypeUUID, Column: systemrelationshipcontrolaction.FieldRelationshipID},
			systemrelationshipcontrolaction.FieldControlID:      {Type: field.TypeUUID, Column: systemrelationshipcontrolaction.FieldControlID},
			systemrelationshipcontrolaction.FieldType:           {Type: field.TypeString, Column: systemrelationshipcontrolaction.FieldType},
			systemrelationshipcontrolaction.FieldDescription:    {Type: field.TypeString, Column: systemrelationshipcontrolaction.FieldDescription},
			systemrelationshipcontrolaction.FieldCreatedAt:      {Type: field.TypeTime, Column: systemrelationshipcontrolaction.FieldCreatedAt},
		},
	}
	graph.Nodes[55] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   systemrelationshipfeedbacksignal.Table,
			Columns: systemrelationshipfeedbacksignal.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: systemrelationshipfeedbacksignal.FieldID,
			},
		},
		Type: "SystemRelationshipFeedbackSignal",
		Fields: map[string]*sqlgraph.FieldSpec{
			systemrelationshipfeedbacksignal.FieldRelationshipID: {Type: field.TypeUUID, Column: systemrelationshipfeedbacksignal.FieldRelationshipID},
			systemrelationshipfeedbacksignal.FieldSignalID:       {Type: field.TypeUUID, Column: systemrelationshipfeedbacksignal.FieldSignalID},
			systemrelationshipfeedbacksignal.FieldType:           {Type: field.TypeString, Column: systemrelationshipfeedbacksignal.FieldType},
			systemrelationshipfeedbacksignal.FieldDescription:    {Type: field.TypeString, Column: systemrelationshipfeedbacksignal.FieldDescription},
			systemrelationshipfeedbacksignal.FieldCreatedAt:      {Type: field.TypeTime, Column: systemrelationshipfeedbacksignal.FieldCreatedAt},
		},
	}
	graph.Nodes[56] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   task.Table,
			Columns: task.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: task.FieldID,
			},
		},
		Type: "Task",
		Fields: map[string]*sqlgraph.FieldSpec{
			task.FieldType:       {Type: field.TypeEnum, Column: task.FieldType},
			task.FieldTitle:      {Type: field.TypeString, Column: task.FieldTitle},
			task.FieldIncidentID: {Type: field.TypeUUID, Column: task.FieldIncidentID},
			task.FieldAssigneeID: {Type: field.TypeUUID, Column: task.FieldAssigneeID},
			task.FieldCreatorID:  {Type: field.TypeUUID, Column: task.FieldCreatorID},
		},
	}
	graph.Nodes[57] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   team.Table,
			Columns: team.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: team.FieldID,
			},
		},
		Type: "Team",
		Fields: map[string]*sqlgraph.FieldSpec{
			team.FieldSlug:          {Type: field.TypeString, Column: team.FieldSlug},
			team.FieldProviderID:    {Type: field.TypeString, Column: team.FieldProviderID},
			team.FieldName:          {Type: field.TypeString, Column: team.FieldName},
			team.FieldChatChannelID: {Type: field.TypeString, Column: team.FieldChatChannelID},
			team.FieldTimezone:      {Type: field.TypeString, Column: team.FieldTimezone},
		},
	}
	graph.Nodes[58] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   tenant.Table,
			Columns: tenant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tenant.FieldID,
			},
		},
		Type: "Tenant",
		Fields: map[string]*sqlgraph.FieldSpec{
			tenant.FieldName:     {Type: field.TypeString, Column: tenant.FieldName},
			tenant.FieldPublicID: {Type: field.TypeUUID, Column: tenant.FieldPublicID},
		},
	}
	graph.Nodes[59] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   ticket.Table,
			Columns: ticket.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: ticket.FieldID,
			},
		},
		Type: "Ticket",
		Fields: map[string]*sqlgraph.FieldSpec{
			ticket.FieldProviderID: {Type: field.TypeString, Column: ticket.FieldProviderID},
			ticket.FieldTitle:      {Type: field.TypeString, Column: ticket.FieldTitle},
		},
	}
	graph.Nodes[60] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: user.FieldID,
			},
		},
		Type: "User",
		Fields: map[string]*sqlgraph.FieldSpec{
			user.FieldTenantID: {Type: field.TypeInt, Column: user.FieldTenantID},
			user.FieldName:     {Type: field.TypeString, Column: user.FieldName},
			user.FieldEmail:    {Type: field.TypeString, Column: user.FieldEmail},
			user.FieldChatID:   {Type: field.TypeString, Column: user.FieldChatID},
			user.FieldTimezone: {Type: field.TypeString, Column: user.FieldTimezone},
		},
	}
	graph.MustAddE(
		"metrics",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   alert.MetricsTable,
			Columns: []string{alert.MetricsColumn},
			Bidi:    false,
		},
		"Alert",
		"AlertMetrics",
	)
	graph.MustAddE(
		"playbooks",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   alert.PlaybooksTable,
			Columns: alert.PlaybooksPrimaryKey,
			Bidi:    false,
		},
		"Alert",
		"Playbook",
	)
	graph.MustAddE(
		"instances",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   alert.InstancesTable,
			Columns: []string{alert.InstancesColumn},
			Bidi:    false,
		},
		"Alert",
		"OncallEvent",
	)
	graph.MustAddE(
		"alert",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   alertmetrics.AlertTable,
			Columns: []string{alertmetrics.AlertColumn},
			Bidi:    false,
		},
		"AlertMetrics",
		"Alert",
	)
	graph.MustAddE(
		"incidents",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   environment.IncidentsTable,
			Columns: environment.IncidentsPrimaryKey,
			Bidi:    false,
		},
		"Environment",
		"Incident",
	)
	graph.MustAddE(
		"environments",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incident.EnvironmentsTable,
			Columns: incident.EnvironmentsPrimaryKey,
			Bidi:    false,
		},
		"Incident",
		"Environment",
	)
	graph.MustAddE(
		"severity",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incident.SeverityTable,
			Columns: []string{incident.SeverityColumn},
			Bidi:    false,
		},
		"Incident",
		"IncidentSeverity",
	)
	graph.MustAddE(
		"type",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incident.TypeTable,
			Columns: []string{incident.TypeColumn},
			Bidi:    false,
		},
		"Incident",
		"IncidentType",
	)
	graph.MustAddE(
		"team_assignments",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   incident.TeamAssignmentsTable,
			Columns: []string{incident.TeamAssignmentsColumn},
			Bidi:    false,
		},
		"Incident",
		"IncidentTeamAssignment",
	)
	graph.MustAddE(
		"role_assignments",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   incident.RoleAssignmentsTable,
			Columns: []string{incident.RoleAssignmentsColumn},
			Bidi:    false,
		},
		"Incident",
		"IncidentRoleAssignment",
	)
	graph.MustAddE(
		"milestones",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incident.MilestonesTable,
			Columns: []string{incident.MilestonesColumn},
			Bidi:    false,
		},
		"Incident",
		"IncidentMilestone",
	)
	graph.MustAddE(
		"events",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incident.EventsTable,
			Columns: []string{incident.EventsColumn},
			Bidi:    false,
		},
		"Incident",
		"IncidentEvent",
	)
	graph.MustAddE(
		"retrospective",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   incident.RetrospectiveTable,
			Columns: []string{incident.RetrospectiveColumn},
			Bidi:    false,
		},
		"Incident",
		"Retrospective",
	)
	graph.MustAddE(
		"linked_incidents",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incident.LinkedIncidentsTable,
			Columns: incident.LinkedIncidentsPrimaryKey,
			Bidi:    true,
		},
		"Incident",
		"Incident",
	)
	graph.MustAddE(
		"field_selections",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incident.FieldSelectionsTable,
			Columns: incident.FieldSelectionsPrimaryKey,
			Bidi:    false,
		},
		"Incident",
		"IncidentFieldOption",
	)
	graph.MustAddE(
		"tasks",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incident.TasksTable,
			Columns: []string{incident.TasksColumn},
			Bidi:    false,
		},
		"Incident",
		"Task",
	)
	graph.MustAddE(
		"tag_assignments",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incident.TagAssignmentsTable,
			Columns: incident.TagAssignmentsPrimaryKey,
			Bidi:    false,
		},
		"Incident",
		"IncidentTag",
	)
	graph.MustAddE(
		"debriefs",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incident.DebriefsTable,
			Columns: []string{incident.DebriefsColumn},
			Bidi:    false,
		},
		"Incident",
		"IncidentDebrief",
	)
	graph.MustAddE(
		"review_sessions",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incident.ReviewSessionsTable,
			Columns: incident.ReviewSessionsPrimaryKey,
			Bidi:    false,
		},
		"Incident",
		"MeetingSession",
	)
	graph.MustAddE(
		"incident_links",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   incident.IncidentLinksTable,
			Columns: []string{incident.IncidentLinksColumn},
			Bidi:    false,
		},
		"Incident",
		"IncidentLink",
	)
	graph.MustAddE(
		"incident",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incidentdebrief.IncidentTable,
			Columns: []string{incidentdebrief.IncidentColumn},
			Bidi:    false,
		},
		"IncidentDebrief",
		"Incident",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incidentdebrief.UserTable,
			Columns: []string{incidentdebrief.UserColumn},
			Bidi:    false,
		},
		"IncidentDebrief",
		"User",
	)
	graph.MustAddE(
		"messages",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incidentdebrief.MessagesTable,
			Columns: []string{incidentdebrief.MessagesColumn},
			Bidi:    false,
		},
		"IncidentDebrief",
		"IncidentDebriefMessage",
	)
	graph.MustAddE(
		"suggestions",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incidentdebrief.SuggestionsTable,
			Columns: []string{incidentdebrief.SuggestionsColumn},
			Bidi:    false,
		},
		"IncidentDebrief",
		"IncidentDebriefSuggestion",
	)
	graph.MustAddE(
		"debrief",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incidentdebriefmessage.DebriefTable,
			Columns: []string{incidentdebriefmessage.DebriefColumn},
			Bidi:    false,
		},
		"IncidentDebriefMessage",
		"IncidentDebrief",
	)
	graph.MustAddE(
		"from_question",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentdebriefmessage.FromQuestionTable,
			Columns: []string{incidentdebriefmessage.FromQuestionColumn},
			Bidi:    false,
		},
		"IncidentDebriefMessage",
		"IncidentDebriefQuestion",
	)
	graph.MustAddE(
		"messages",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   incidentdebriefquestion.MessagesTable,
			Columns: []string{incidentdebriefquestion.MessagesColumn},
			Bidi:    false,
		},
		"IncidentDebriefQuestion",
		"IncidentDebriefMessage",
	)
	graph.MustAddE(
		"incident_fields",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incidentdebriefquestion.IncidentFieldsTable,
			Columns: incidentdebriefquestion.IncidentFieldsPrimaryKey,
			Bidi:    false,
		},
		"IncidentDebriefQuestion",
		"IncidentField",
	)
	graph.MustAddE(
		"incident_roles",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incidentdebriefquestion.IncidentRolesTable,
			Columns: incidentdebriefquestion.IncidentRolesPrimaryKey,
			Bidi:    false,
		},
		"IncidentDebriefQuestion",
		"IncidentRole",
	)
	graph.MustAddE(
		"incident_severities",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incidentdebriefquestion.IncidentSeveritiesTable,
			Columns: incidentdebriefquestion.IncidentSeveritiesPrimaryKey,
			Bidi:    false,
		},
		"IncidentDebriefQuestion",
		"IncidentSeverity",
	)
	graph.MustAddE(
		"incident_tags",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incidentdebriefquestion.IncidentTagsTable,
			Columns: incidentdebriefquestion.IncidentTagsPrimaryKey,
			Bidi:    false,
		},
		"IncidentDebriefQuestion",
		"IncidentTag",
	)
	graph.MustAddE(
		"incident_types",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incidentdebriefquestion.IncidentTypesTable,
			Columns: incidentdebriefquestion.IncidentTypesPrimaryKey,
			Bidi:    false,
		},
		"IncidentDebriefQuestion",
		"IncidentType",
	)
	graph.MustAddE(
		"debrief",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incidentdebriefsuggestion.DebriefTable,
			Columns: []string{incidentdebriefsuggestion.DebriefColumn},
			Bidi:    false,
		},
		"IncidentDebriefSuggestion",
		"IncidentDebrief",
	)
	graph.MustAddE(
		"incident",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incidentevent.IncidentTable,
			Columns: []string{incidentevent.IncidentColumn},
			Bidi:    false,
		},
		"IncidentEvent",
		"Incident",
	)
	graph.MustAddE(
		"context",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   incidentevent.ContextTable,
			Columns: []string{incidentevent.ContextColumn},
			Bidi:    false,
		},
		"IncidentEvent",
		"IncidentEventContext",
	)
	graph.MustAddE(
		"factors",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incidentevent.FactorsTable,
			Columns: []string{incidentevent.FactorsColumn},
			Bidi:    false,
		},
		"IncidentEvent",
		"IncidentEventContributingFactor",
	)
	graph.MustAddE(
		"evidence",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incidentevent.EvidenceTable,
			Columns: []string{incidentevent.EvidenceColumn},
			Bidi:    false,
		},
		"IncidentEvent",
		"IncidentEventEvidence",
	)
	graph.MustAddE(
		"system_components",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   incidentevent.SystemComponentsTable,
			Columns: incidentevent.SystemComponentsPrimaryKey,
			Bidi:    false,
		},
		"IncidentEvent",
		"SystemComponent",
	)
	graph.MustAddE(
		"event_components",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   incidentevent.EventComponentsTable,
			Columns: []string{incidentevent.EventComponentsColumn},
			Bidi:    false,
		},
		"IncidentEvent",
		"IncidentEventSystemComponent",
	)
	graph.MustAddE(
		"event",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   incidenteventcontext.EventTable,
			Columns: []string{incidenteventcontext.EventColumn},
			Bidi:    false,
		},
		"IncidentEventContext",
		"IncidentEvent",
	)
	graph.MustAddE(
		"event",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incidenteventcontributingfactor.EventTable,
			Columns: []string{incidenteventcontributingfactor.EventColumn},
			Bidi:    false,
		},
		"IncidentEventContributingFactor",
		"IncidentEvent",
	)
	graph.MustAddE(
		"event",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incidenteventevidence.EventTable,
			Columns: []string{incidenteventevidence.EventColumn},
			Bidi:    false,
		},
		"IncidentEventEvidence",
		"IncidentEvent",
	)
	graph.MustAddE(
		"event",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   incidenteventsystemcomponent.EventTable,
			Columns: []string{incidenteventsystemcomponent.EventColumn},
			Bidi:    true,
		},
		"IncidentEventSystemComponent",
		"IncidentEventSystemComponent",
	)
	graph.MustAddE(
		"system_component",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidenteventsystemcomponent.SystemComponentTable,
			Columns: []string{incidenteventsystemcomponent.SystemComponentColumn},
			Bidi:    false,
		},
		"IncidentEventSystemComponent",
		"SystemComponent",
	)
	graph.MustAddE(
		"options",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incidentfield.OptionsTable,
			Columns: []string{incidentfield.OptionsColumn},
			Bidi:    false,
		},
		"IncidentField",
		"IncidentFieldOption",
	)
	graph.MustAddE(
		"debrief_questions",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   incidentfield.DebriefQuestionsTable,
			Columns: incidentfield.DebriefQuestionsPrimaryKey,
			Bidi:    false,
		},
		"IncidentField",
		"IncidentDebriefQuestion",
	)
	graph.MustAddE(
		"incident_field",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incidentfieldoption.IncidentFieldTable,
			Columns: []string{incidentfieldoption.IncidentFieldColumn},
			Bidi:    false,
		},
		"IncidentFieldOption",
		"IncidentField",
	)
	graph.MustAddE(
		"incidents",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   incidentfieldoption.IncidentsTable,
			Columns: incidentfieldoption.IncidentsPrimaryKey,
			Bidi:    false,
		},
		"IncidentFieldOption",
		"Incident",
	)
	graph.MustAddE(
		"incident",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentlink.IncidentTable,
			Columns: []string{incidentlink.IncidentColumn},
			Bidi:    false,
		},
		"IncidentLink",
		"Incident",
	)
	graph.MustAddE(
		"linked_incident",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentlink.LinkedIncidentTable,
			Columns: []string{incidentlink.LinkedIncidentColumn},
			Bidi:    false,
		},
		"IncidentLink",
		"Incident",
	)
	graph.MustAddE(
		"incident",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incidentmilestone.IncidentTable,
			Columns: []string{incidentmilestone.IncidentColumn},
			Bidi:    false,
		},
		"IncidentMilestone",
		"Incident",
	)
	graph.MustAddE(
		"assignments",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   incidentrole.AssignmentsTable,
			Columns: []string{incidentrole.AssignmentsColumn},
			Bidi:    false,
		},
		"IncidentRole",
		"IncidentRoleAssignment",
	)
	graph.MustAddE(
		"debrief_questions",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   incidentrole.DebriefQuestionsTable,
			Columns: incidentrole.DebriefQuestionsPrimaryKey,
			Bidi:    false,
		},
		"IncidentRole",
		"IncidentDebriefQuestion",
	)
	graph.MustAddE(
		"role",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentroleassignment.RoleTable,
			Columns: []string{incidentroleassignment.RoleColumn},
			Bidi:    false,
		},
		"IncidentRoleAssignment",
		"IncidentRole",
	)
	graph.MustAddE(
		"incident",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentroleassignment.IncidentTable,
			Columns: []string{incidentroleassignment.IncidentColumn},
			Bidi:    false,
		},
		"IncidentRoleAssignment",
		"Incident",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentroleassignment.UserTable,
			Columns: []string{incidentroleassignment.UserColumn},
			Bidi:    false,
		},
		"IncidentRoleAssignment",
		"User",
	)
	graph.MustAddE(
		"incidents",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   incidentseverity.IncidentsTable,
			Columns: []string{incidentseverity.IncidentsColumn},
			Bidi:    false,
		},
		"IncidentSeverity",
		"Incident",
	)
	graph.MustAddE(
		"debrief_questions",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   incidentseverity.DebriefQuestionsTable,
			Columns: incidentseverity.DebriefQuestionsPrimaryKey,
			Bidi:    false,
		},
		"IncidentSeverity",
		"IncidentDebriefQuestion",
	)
	graph.MustAddE(
		"incidents",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   incidenttag.IncidentsTable,
			Columns: incidenttag.IncidentsPrimaryKey,
			Bidi:    false,
		},
		"IncidentTag",
		"Incident",
	)
	graph.MustAddE(
		"debrief_questions",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   incidenttag.DebriefQuestionsTable,
			Columns: incidenttag.DebriefQuestionsPrimaryKey,
			Bidi:    false,
		},
		"IncidentTag",
		"IncidentDebriefQuestion",
	)
	graph.MustAddE(
		"incident",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentteamassignment.IncidentTable,
			Columns: []string{incidentteamassignment.IncidentColumn},
			Bidi:    false,
		},
		"IncidentTeamAssignment",
		"Incident",
	)
	graph.MustAddE(
		"team",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentteamassignment.TeamTable,
			Columns: []string{incidentteamassignment.TeamColumn},
			Bidi:    false,
		},
		"IncidentTeamAssignment",
		"Team",
	)
	graph.MustAddE(
		"incidents",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   incidenttype.IncidentsTable,
			Columns: []string{incidenttype.IncidentsColumn},
			Bidi:    false,
		},
		"IncidentType",
		"Incident",
	)
	graph.MustAddE(
		"debrief_questions",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   incidenttype.DebriefQuestionsTable,
			Columns: incidenttype.DebriefQuestionsPrimaryKey,
			Bidi:    false,
		},
		"IncidentType",
		"IncidentDebriefQuestion",
	)
	graph.MustAddE(
		"sessions",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   meetingschedule.SessionsTable,
			Columns: []string{meetingschedule.SessionsColumn},
			Bidi:    false,
		},
		"MeetingSchedule",
		"MeetingSession",
	)
	graph.MustAddE(
		"owning_team",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   meetingschedule.OwningTeamTable,
			Columns: meetingschedule.OwningTeamPrimaryKey,
			Bidi:    false,
		},
		"MeetingSchedule",
		"Team",
	)
	graph.MustAddE(
		"incidents",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   meetingsession.IncidentsTable,
			Columns: meetingsession.IncidentsPrimaryKey,
			Bidi:    false,
		},
		"MeetingSession",
		"Incident",
	)
	graph.MustAddE(
		"event",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallannotation.EventTable,
			Columns: []string{oncallannotation.EventColumn},
			Bidi:    false,
		},
		"OncallAnnotation",
		"OncallEvent",
	)
	graph.MustAddE(
		"roster",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallannotation.RosterTable,
			Columns: []string{oncallannotation.RosterColumn},
			Bidi:    false,
		},
		"OncallAnnotation",
		"OncallRoster",
	)
	graph.MustAddE(
		"creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallannotation.CreatorTable,
			Columns: []string{oncallannotation.CreatorColumn},
			Bidi:    false,
		},
		"OncallAnnotation",
		"User",
	)
	graph.MustAddE(
		"alert_feedback",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oncallannotation.AlertFeedbackTable,
			Columns: []string{oncallannotation.AlertFeedbackColumn},
			Bidi:    false,
		},
		"OncallAnnotation",
		"OncallAnnotationAlertFeedback",
	)
	graph.MustAddE(
		"handovers",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   oncallannotation.HandoversTable,
			Columns: oncallannotation.HandoversPrimaryKey,
			Bidi:    false,
		},
		"OncallAnnotation",
		"OncallUserShiftHandover",
	)
	graph.MustAddE(
		"annotation",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   oncallannotationalertfeedback.AnnotationTable,
			Columns: []string{oncallannotationalertfeedback.AnnotationColumn},
			Bidi:    false,
		},
		"OncallAnnotationAlertFeedback",
		"OncallAnnotation",
	)
	graph.MustAddE(
		"roster",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallevent.RosterTable,
			Columns: []string{oncallevent.RosterColumn},
			Bidi:    false,
		},
		"OncallEvent",
		"OncallRoster",
	)
	graph.MustAddE(
		"alert",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallevent.AlertTable,
			Columns: []string{oncallevent.AlertColumn},
			Bidi:    false,
		},
		"OncallEvent",
		"Alert",
	)
	graph.MustAddE(
		"annotations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   oncallevent.AnnotationsTable,
			Columns: []string{oncallevent.AnnotationsColumn},
			Bidi:    false,
		},
		"OncallEvent",
		"OncallAnnotation",
	)
	graph.MustAddE(
		"roster",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oncallhandovertemplate.RosterTable,
			Columns: []string{oncallhandovertemplate.RosterColumn},
			Bidi:    false,
		},
		"OncallHandoverTemplate",
		"OncallRoster",
	)
	graph.MustAddE(
		"schedules",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oncallroster.SchedulesTable,
			Columns: []string{oncallroster.SchedulesColumn},
			Bidi:    false,
		},
		"OncallRoster",
		"OncallSchedule",
	)
	graph.MustAddE(
		"handover_template",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oncallroster.HandoverTemplateTable,
			Columns: []string{oncallroster.HandoverTemplateColumn},
			Bidi:    false,
		},
		"OncallRoster",
		"OncallHandoverTemplate",
	)
	graph.MustAddE(
		"events",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   oncallroster.EventsTable,
			Columns: []string{oncallroster.EventsColumn},
			Bidi:    false,
		},
		"OncallRoster",
		"OncallEvent",
	)
	graph.MustAddE(
		"annotations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   oncallroster.AnnotationsTable,
			Columns: []string{oncallroster.AnnotationsColumn},
			Bidi:    false,
		},
		"OncallRoster",
		"OncallAnnotation",
	)
	graph.MustAddE(
		"teams",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   oncallroster.TeamsTable,
			Columns: oncallroster.TeamsPrimaryKey,
			Bidi:    false,
		},
		"OncallRoster",
		"Team",
	)
	graph.MustAddE(
		"shifts",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   oncallroster.ShiftsTable,
			Columns: []string{oncallroster.ShiftsColumn},
			Bidi:    false,
		},
		"OncallRoster",
		"OncallUserShift",
	)
	graph.MustAddE(
		"user_watchers",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   oncallroster.UserWatchersTable,
			Columns: oncallroster.UserWatchersPrimaryKey,
			Bidi:    false,
		},
		"OncallRoster",
		"User",
	)
	graph.MustAddE(
		"metrics",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   oncallroster.MetricsTable,
			Columns: []string{oncallroster.MetricsColumn},
			Bidi:    false,
		},
		"OncallRoster",
		"OncallRosterMetrics",
	)
	graph.MustAddE(
		"roster",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallrostermetrics.RosterTable,
			Columns: []string{oncallrostermetrics.RosterColumn},
			Bidi:    false,
		},
		"OncallRosterMetrics",
		"OncallRoster",
	)
	graph.MustAddE(
		"participants",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oncallschedule.ParticipantsTable,
			Columns: []string{oncallschedule.ParticipantsColumn},
			Bidi:    false,
		},
		"OncallSchedule",
		"OncallScheduleParticipant",
	)
	graph.MustAddE(
		"roster",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oncallschedule.RosterTable,
			Columns: []string{oncallschedule.RosterColumn},
			Bidi:    false,
		},
		"OncallSchedule",
		"OncallRoster",
	)
	graph.MustAddE(
		"schedule",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oncallscheduleparticipant.ScheduleTable,
			Columns: []string{oncallscheduleparticipant.ScheduleColumn},
			Bidi:    false,
		},
		"OncallScheduleParticipant",
		"OncallSchedule",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallscheduleparticipant.UserTable,
			Columns: []string{oncallscheduleparticipant.UserColumn},
			Bidi:    false,
		},
		"OncallScheduleParticipant",
		"User",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallusershift.UserTable,
			Columns: []string{oncallusershift.UserColumn},
			Bidi:    false,
		},
		"OncallUserShift",
		"User",
	)
	graph.MustAddE(
		"roster",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallusershift.RosterTable,
			Columns: []string{oncallusershift.RosterColumn},
			Bidi:    false,
		},
		"OncallUserShift",
		"OncallRoster",
	)
	graph.MustAddE(
		"primary_shift",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oncallusershift.PrimaryShiftTable,
			Columns: []string{oncallusershift.PrimaryShiftColumn},
			Bidi:    true,
		},
		"OncallUserShift",
		"OncallUserShift",
	)
	graph.MustAddE(
		"handover",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oncallusershift.HandoverTable,
			Columns: []string{oncallusershift.HandoverColumn},
			Bidi:    false,
		},
		"OncallUserShift",
		"OncallUserShiftHandover",
	)
	graph.MustAddE(
		"metrics",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oncallusershift.MetricsTable,
			Columns: []string{oncallusershift.MetricsColumn},
			Bidi:    false,
		},
		"OncallUserShift",
		"OncallUserShiftMetrics",
	)
	graph.MustAddE(
		"shift",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   oncallusershifthandover.ShiftTable,
			Columns: []string{oncallusershifthandover.ShiftColumn},
			Bidi:    false,
		},
		"OncallUserShiftHandover",
		"OncallUserShift",
	)
	graph.MustAddE(
		"pinned_annotations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oncallusershifthandover.PinnedAnnotationsTable,
			Columns: oncallusershifthandover.PinnedAnnotationsPrimaryKey,
			Bidi:    false,
		},
		"OncallUserShiftHandover",
		"OncallAnnotation",
	)
	graph.MustAddE(
		"shift",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   oncallusershiftmetrics.ShiftTable,
			Columns: []string{oncallusershiftmetrics.ShiftColumn},
			Bidi:    false,
		},
		"OncallUserShiftMetrics",
		"OncallUserShift",
	)
	graph.MustAddE(
		"alerts",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playbook.AlertsTable,
			Columns: playbook.AlertsPrimaryKey,
			Bidi:    false,
		},
		"Playbook",
		"Alert",
	)
	graph.MustAddE(
		"incident",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospective.IncidentTable,
			Columns: []string{retrospective.IncidentColumn},
			Bidi:    false,
		},
		"Retrospective",
		"Incident",
	)
	graph.MustAddE(
		"discussions",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   retrospective.DiscussionsTable,
			Columns: []string{retrospective.DiscussionsColumn},
			Bidi:    false,
		},
		"Retrospective",
		"RetrospectiveDiscussion",
	)
	graph.MustAddE(
		"system_analysis",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   retrospective.SystemAnalysisTable,
			Columns: []string{retrospective.SystemAnalysisColumn},
			Bidi:    false,
		},
		"Retrospective",
		"SystemAnalysis",
	)
	graph.MustAddE(
		"retrospective",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospectivediscussion.RetrospectiveTable,
			Columns: []string{retrospectivediscussion.RetrospectiveColumn},
			Bidi:    false,
		},
		"RetrospectiveDiscussion",
		"Retrospective",
	)
	graph.MustAddE(
		"replies",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   retrospectivediscussion.RepliesTable,
			Columns: []string{retrospectivediscussion.RepliesColumn},
			Bidi:    false,
		},
		"RetrospectiveDiscussion",
		"RetrospectiveDiscussionReply",
	)
	graph.MustAddE(
		"review",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   retrospectivediscussion.ReviewTable,
			Columns: []string{retrospectivediscussion.ReviewColumn},
			Bidi:    false,
		},
		"RetrospectiveDiscussion",
		"RetrospectiveReview",
	)
	graph.MustAddE(
		"discussion",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospectivediscussionreply.DiscussionTable,
			Columns: []string{retrospectivediscussionreply.DiscussionColumn},
			Bidi:    false,
		},
		"RetrospectiveDiscussionReply",
		"RetrospectiveDiscussion",
	)
	graph.MustAddE(
		"parent_reply",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   retrospectivediscussionreply.ParentReplyTable,
			Columns: []string{retrospectivediscussionreply.ParentReplyColumn},
			Bidi:    false,
		},
		"RetrospectiveDiscussionReply",
		"RetrospectiveDiscussionReply",
	)
	graph.MustAddE(
		"replies",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   retrospectivediscussionreply.RepliesTable,
			Columns: []string{retrospectivediscussionreply.RepliesColumn},
			Bidi:    false,
		},
		"RetrospectiveDiscussionReply",
		"RetrospectiveDiscussionReply",
	)
	graph.MustAddE(
		"retrospective",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospectivereview.RetrospectiveTable,
			Columns: []string{retrospectivereview.RetrospectiveColumn},
			Bidi:    false,
		},
		"RetrospectiveReview",
		"Retrospective",
	)
	graph.MustAddE(
		"requester",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospectivereview.RequesterTable,
			Columns: []string{retrospectivereview.RequesterColumn},
			Bidi:    false,
		},
		"RetrospectiveReview",
		"User",
	)
	graph.MustAddE(
		"reviewer",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospectivereview.ReviewerTable,
			Columns: []string{retrospectivereview.ReviewerColumn},
			Bidi:    false,
		},
		"RetrospectiveReview",
		"User",
	)
	graph.MustAddE(
		"discussion",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospectivereview.DiscussionTable,
			Columns: []string{retrospectivereview.DiscussionColumn},
			Bidi:    false,
		},
		"RetrospectiveReview",
		"RetrospectiveDiscussion",
	)
	graph.MustAddE(
		"retrospective",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   systemanalysis.RetrospectiveTable,
			Columns: []string{systemanalysis.RetrospectiveColumn},
			Bidi:    false,
		},
		"SystemAnalysis",
		"Retrospective",
	)
	graph.MustAddE(
		"components",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   systemanalysis.ComponentsTable,
			Columns: systemanalysis.ComponentsPrimaryKey,
			Bidi:    false,
		},
		"SystemAnalysis",
		"SystemComponent",
	)
	graph.MustAddE(
		"relationships",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemanalysis.RelationshipsTable,
			Columns: []string{systemanalysis.RelationshipsColumn},
			Bidi:    false,
		},
		"SystemAnalysis",
		"SystemAnalysisRelationship",
	)
	graph.MustAddE(
		"analysis_components",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemanalysis.AnalysisComponentsTable,
			Columns: []string{systemanalysis.AnalysisComponentsColumn},
			Bidi:    false,
		},
		"SystemAnalysis",
		"SystemAnalysisComponent",
	)
	graph.MustAddE(
		"analysis",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemanalysiscomponent.AnalysisTable,
			Columns: []string{systemanalysiscomponent.AnalysisColumn},
			Bidi:    false,
		},
		"SystemAnalysisComponent",
		"SystemAnalysis",
	)
	graph.MustAddE(
		"component",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemanalysiscomponent.ComponentTable,
			Columns: []string{systemanalysiscomponent.ComponentColumn},
			Bidi:    false,
		},
		"SystemAnalysisComponent",
		"SystemComponent",
	)
	graph.MustAddE(
		"system_analysis",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemanalysisrelationship.SystemAnalysisTable,
			Columns: []string{systemanalysisrelationship.SystemAnalysisColumn},
			Bidi:    false,
		},
		"SystemAnalysisRelationship",
		"SystemAnalysis",
	)
	graph.MustAddE(
		"component_relationship",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemanalysisrelationship.ComponentRelationshipTable,
			Columns: []string{systemanalysisrelationship.ComponentRelationshipColumn},
			Bidi:    false,
		},
		"SystemAnalysisRelationship",
		"SystemComponentRelationship",
	)
	graph.MustAddE(
		"controls",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemanalysisrelationship.ControlsTable,
			Columns: systemanalysisrelationship.ControlsPrimaryKey,
			Bidi:    false,
		},
		"SystemAnalysisRelationship",
		"SystemComponentControl",
	)
	graph.MustAddE(
		"signals",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemanalysisrelationship.SignalsTable,
			Columns: systemanalysisrelationship.SignalsPrimaryKey,
			Bidi:    false,
		},
		"SystemAnalysisRelationship",
		"SystemComponentSignal",
	)
	graph.MustAddE(
		"control_actions",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemanalysisrelationship.ControlActionsTable,
			Columns: []string{systemanalysisrelationship.ControlActionsColumn},
			Bidi:    false,
		},
		"SystemAnalysisRelationship",
		"SystemRelationshipControlAction",
	)
	graph.MustAddE(
		"feedback_signals",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemanalysisrelationship.FeedbackSignalsTable,
			Columns: []string{systemanalysisrelationship.FeedbackSignalsColumn},
			Bidi:    false,
		},
		"SystemAnalysisRelationship",
		"SystemRelationshipFeedbackSignal",
	)
	graph.MustAddE(
		"kind",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemcomponent.KindTable,
			Columns: []string{systemcomponent.KindColumn},
			Bidi:    false,
		},
		"SystemComponent",
		"SystemComponentKind",
	)
	graph.MustAddE(
		"related",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemcomponent.RelatedTable,
			Columns: systemcomponent.RelatedPrimaryKey,
			Bidi:    true,
		},
		"SystemComponent",
		"SystemComponent",
	)
	graph.MustAddE(
		"system_analyses",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemcomponent.SystemAnalysesTable,
			Columns: systemcomponent.SystemAnalysesPrimaryKey,
			Bidi:    false,
		},
		"SystemComponent",
		"SystemAnalysis",
	)
	graph.MustAddE(
		"events",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   systemcomponent.EventsTable,
			Columns: systemcomponent.EventsPrimaryKey,
			Bidi:    false,
		},
		"SystemComponent",
		"IncidentEvent",
	)
	graph.MustAddE(
		"constraints",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.ConstraintsTable,
			Columns: []string{systemcomponent.ConstraintsColumn},
			Bidi:    false,
		},
		"SystemComponent",
		"SystemComponentConstraint",
	)
	graph.MustAddE(
		"controls",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.ControlsTable,
			Columns: []string{systemcomponent.ControlsColumn},
			Bidi:    false,
		},
		"SystemComponent",
		"SystemComponentControl",
	)
	graph.MustAddE(
		"signals",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.SignalsTable,
			Columns: []string{systemcomponent.SignalsColumn},
			Bidi:    false,
		},
		"SystemComponent",
		"SystemComponentSignal",
	)
	graph.MustAddE(
		"hazards",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   systemcomponent.HazardsTable,
			Columns: systemcomponent.HazardsPrimaryKey,
			Bidi:    false,
		},
		"SystemComponent",
		"SystemHazard",
	)
	graph.MustAddE(
		"component_relationships",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.ComponentRelationshipsTable,
			Columns: []string{systemcomponent.ComponentRelationshipsColumn},
			Bidi:    false,
		},
		"SystemComponent",
		"SystemComponentRelationship",
	)
	graph.MustAddE(
		"system_analysis_components",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.SystemAnalysisComponentsTable,
			Columns: []string{systemcomponent.SystemAnalysisComponentsColumn},
			Bidi:    false,
		},
		"SystemComponent",
		"SystemAnalysisComponent",
	)
	graph.MustAddE(
		"event_components",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.EventComponentsTable,
			Columns: []string{systemcomponent.EventComponentsColumn},
			Bidi:    false,
		},
		"SystemComponent",
		"IncidentEventSystemComponent",
	)
	graph.MustAddE(
		"component",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemcomponentconstraint.ComponentTable,
			Columns: []string{systemcomponentconstraint.ComponentColumn},
			Bidi:    false,
		},
		"SystemComponentConstraint",
		"SystemComponent",
	)
	graph.MustAddE(
		"hazards",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   systemcomponentconstraint.HazardsTable,
			Columns: systemcomponentconstraint.HazardsPrimaryKey,
			Bidi:    false,
		},
		"SystemComponentConstraint",
		"SystemHazard",
	)
	graph.MustAddE(
		"component",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemcomponentcontrol.ComponentTable,
			Columns: []string{systemcomponentcontrol.ComponentColumn},
			Bidi:    false,
		},
		"SystemComponentControl",
		"SystemComponent",
	)
	graph.MustAddE(
		"relationships",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   systemcomponentcontrol.RelationshipsTable,
			Columns: systemcomponentcontrol.RelationshipsPrimaryKey,
			Bidi:    false,
		},
		"SystemComponentControl",
		"SystemAnalysisRelationship",
	)
	graph.MustAddE(
		"control_actions",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponentcontrol.ControlActionsTable,
			Columns: []string{systemcomponentcontrol.ControlActionsColumn},
			Bidi:    false,
		},
		"SystemComponentControl",
		"SystemRelationshipControlAction",
	)
	graph.MustAddE(
		"components",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponentkind.ComponentsTable,
			Columns: []string{systemcomponentkind.ComponentsColumn},
			Bidi:    false,
		},
		"SystemComponentKind",
		"SystemComponent",
	)
	graph.MustAddE(
		"source",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemcomponentrelationship.SourceTable,
			Columns: []string{systemcomponentrelationship.SourceColumn},
			Bidi:    false,
		},
		"SystemComponentRelationship",
		"SystemComponent",
	)
	graph.MustAddE(
		"target",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemcomponentrelationship.TargetTable,
			Columns: []string{systemcomponentrelationship.TargetColumn},
			Bidi:    false,
		},
		"SystemComponentRelationship",
		"SystemComponent",
	)
	graph.MustAddE(
		"system_analyses",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponentrelationship.SystemAnalysesTable,
			Columns: []string{systemcomponentrelationship.SystemAnalysesColumn},
			Bidi:    false,
		},
		"SystemComponentRelationship",
		"SystemAnalysisRelationship",
	)
	graph.MustAddE(
		"hazards",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   systemcomponentrelationship.HazardsTable,
			Columns: systemcomponentrelationship.HazardsPrimaryKey,
			Bidi:    false,
		},
		"SystemComponentRelationship",
		"SystemHazard",
	)
	graph.MustAddE(
		"component",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemcomponentsignal.ComponentTable,
			Columns: []string{systemcomponentsignal.ComponentColumn},
			Bidi:    false,
		},
		"SystemComponentSignal",
		"SystemComponent",
	)
	graph.MustAddE(
		"relationships",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   systemcomponentsignal.RelationshipsTable,
			Columns: systemcomponentsignal.RelationshipsPrimaryKey,
			Bidi:    false,
		},
		"SystemComponentSignal",
		"SystemAnalysisRelationship",
	)
	graph.MustAddE(
		"feedback_signals",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponentsignal.FeedbackSignalsTable,
			Columns: []string{systemcomponentsignal.FeedbackSignalsColumn},
			Bidi:    false,
		},
		"SystemComponentSignal",
		"SystemRelationshipFeedbackSignal",
	)
	graph.MustAddE(
		"components",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemhazard.ComponentsTable,
			Columns: systemhazard.ComponentsPrimaryKey,
			Bidi:    false,
		},
		"SystemHazard",
		"SystemComponent",
	)
	graph.MustAddE(
		"constraints",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemhazard.ConstraintsTable,
			Columns: systemhazard.ConstraintsPrimaryKey,
			Bidi:    false,
		},
		"SystemHazard",
		"SystemComponentConstraint",
	)
	graph.MustAddE(
		"relationships",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemhazard.RelationshipsTable,
			Columns: systemhazard.RelationshipsPrimaryKey,
			Bidi:    false,
		},
		"SystemHazard",
		"SystemComponentRelationship",
	)
	graph.MustAddE(
		"relationship",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemrelationshipcontrolaction.RelationshipTable,
			Columns: []string{systemrelationshipcontrolaction.RelationshipColumn},
			Bidi:    false,
		},
		"SystemRelationshipControlAction",
		"SystemAnalysisRelationship",
	)
	graph.MustAddE(
		"control",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemrelationshipcontrolaction.ControlTable,
			Columns: []string{systemrelationshipcontrolaction.ControlColumn},
			Bidi:    false,
		},
		"SystemRelationshipControlAction",
		"SystemComponentControl",
	)
	graph.MustAddE(
		"relationship",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemrelationshipfeedbacksignal.RelationshipTable,
			Columns: []string{systemrelationshipfeedbacksignal.RelationshipColumn},
			Bidi:    false,
		},
		"SystemRelationshipFeedbackSignal",
		"SystemAnalysisRelationship",
	)
	graph.MustAddE(
		"signal",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemrelationshipfeedbacksignal.SignalTable,
			Columns: []string{systemrelationshipfeedbacksignal.SignalColumn},
			Bidi:    false,
		},
		"SystemRelationshipFeedbackSignal",
		"SystemComponentSignal",
	)
	graph.MustAddE(
		"tickets",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   task.TicketsTable,
			Columns: task.TicketsPrimaryKey,
			Bidi:    false,
		},
		"Task",
		"Ticket",
	)
	graph.MustAddE(
		"incident",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.IncidentTable,
			Columns: []string{task.IncidentColumn},
			Bidi:    false,
		},
		"Task",
		"Incident",
	)
	graph.MustAddE(
		"assignee",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.AssigneeTable,
			Columns: []string{task.AssigneeColumn},
			Bidi:    false,
		},
		"Task",
		"User",
	)
	graph.MustAddE(
		"creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.CreatorTable,
			Columns: []string{task.CreatorColumn},
			Bidi:    false,
		},
		"Task",
		"User",
	)
	graph.MustAddE(
		"users",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.UsersTable,
			Columns: team.UsersPrimaryKey,
			Bidi:    false,
		},
		"Team",
		"User",
	)
	graph.MustAddE(
		"oncall_rosters",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.OncallRostersTable,
			Columns: team.OncallRostersPrimaryKey,
			Bidi:    false,
		},
		"Team",
		"OncallRoster",
	)
	graph.MustAddE(
		"incident_assignments",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   team.IncidentAssignmentsTable,
			Columns: []string{team.IncidentAssignmentsColumn},
			Bidi:    false,
		},
		"Team",
		"IncidentTeamAssignment",
	)
	graph.MustAddE(
		"scheduled_meetings",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   team.ScheduledMeetingsTable,
			Columns: team.ScheduledMeetingsPrimaryKey,
			Bidi:    false,
		},
		"Team",
		"MeetingSchedule",
	)
	graph.MustAddE(
		"tasks",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ticket.TasksTable,
			Columns: ticket.TasksPrimaryKey,
			Bidi:    false,
		},
		"Ticket",
		"Task",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.TenantTable,
			Columns: []string{user.TenantColumn},
			Bidi:    false,
		},
		"User",
		"Tenant",
	)
	graph.MustAddE(
		"teams",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.TeamsTable,
			Columns: user.TeamsPrimaryKey,
			Bidi:    false,
		},
		"User",
		"Team",
	)
	graph.MustAddE(
		"watched_oncall_rosters",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.WatchedOncallRostersTable,
			Columns: user.WatchedOncallRostersPrimaryKey,
			Bidi:    false,
		},
		"User",
		"OncallRoster",
	)
	graph.MustAddE(
		"oncall_schedules",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.OncallSchedulesTable,
			Columns: []string{user.OncallSchedulesColumn},
			Bidi:    false,
		},
		"User",
		"OncallScheduleParticipant",
	)
	graph.MustAddE(
		"oncall_shifts",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.OncallShiftsTable,
			Columns: []string{user.OncallShiftsColumn},
			Bidi:    false,
		},
		"User",
		"OncallUserShift",
	)
	graph.MustAddE(
		"oncall_annotations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.OncallAnnotationsTable,
			Columns: []string{user.OncallAnnotationsColumn},
			Bidi:    false,
		},
		"User",
		"OncallAnnotation",
	)
	graph.MustAddE(
		"incident_role_assignments",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.IncidentRoleAssignmentsTable,
			Columns: []string{user.IncidentRoleAssignmentsColumn},
			Bidi:    false,
		},
		"User",
		"IncidentRoleAssignment",
	)
	graph.MustAddE(
		"incident_debriefs",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.IncidentDebriefsTable,
			Columns: []string{user.IncidentDebriefsColumn},
			Bidi:    false,
		},
		"User",
		"IncidentDebrief",
	)
	graph.MustAddE(
		"assigned_tasks",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssignedTasksTable,
			Columns: []string{user.AssignedTasksColumn},
			Bidi:    false,
		},
		"User",
		"Task",
	)
	graph.MustAddE(
		"created_tasks",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedTasksTable,
			Columns: []string{user.CreatedTasksColumn},
			Bidi:    false,
		},
		"User",
		"Task",
	)
	graph.MustAddE(
		"retrospective_review_requests",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.RetrospectiveReviewRequestsTable,
			Columns: []string{user.RetrospectiveReviewRequestsColumn},
			Bidi:    false,
		},
		"User",
		"RetrospectiveReview",
	)
	graph.MustAddE(
		"retrospective_review_responses",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.RetrospectiveReviewResponsesTable,
			Columns: []string{user.RetrospectiveReviewResponsesColumn},
			Bidi:    false,
		},
		"User",
		"RetrospectiveReview",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (aq *AlertQuery) addPredicate(pred func(s *sql.Selector)) {
	aq.predicates = append(aq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AlertQuery builder.
func (aq *AlertQuery) Filter() *AlertFilter {
	return &AlertFilter{config: aq.config, predicateAdder: aq}
}

// addPredicate implements the predicateAdder interface.
func (m *AlertMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AlertMutation builder.
func (m *AlertMutation) Filter() *AlertFilter {
	return &AlertFilter{config: m.config, predicateAdder: m}
}

// AlertFilter provides a generic filtering capability at runtime for AlertQuery.
type AlertFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AlertFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *AlertFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(alert.FieldID))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *AlertFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(alert.FieldTitle))
}

// WhereProviderID applies the entql string predicate on the provider_id field.
func (f *AlertFilter) WhereProviderID(p entql.StringP) {
	f.Where(p.Field(alert.FieldProviderID))
}

// WhereHasMetrics applies a predicate to check if query has an edge metrics.
func (f *AlertFilter) WhereHasMetrics() {
	f.Where(entql.HasEdge("metrics"))
}

// WhereHasMetricsWith applies a predicate to check if query has an edge metrics with a given conditions (other predicates).
func (f *AlertFilter) WhereHasMetricsWith(preds ...predicate.AlertMetrics) {
	f.Where(entql.HasEdgeWith("metrics", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPlaybooks applies a predicate to check if query has an edge playbooks.
func (f *AlertFilter) WhereHasPlaybooks() {
	f.Where(entql.HasEdge("playbooks"))
}

// WhereHasPlaybooksWith applies a predicate to check if query has an edge playbooks with a given conditions (other predicates).
func (f *AlertFilter) WhereHasPlaybooksWith(preds ...predicate.Playbook) {
	f.Where(entql.HasEdgeWith("playbooks", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasInstances applies a predicate to check if query has an edge instances.
func (f *AlertFilter) WhereHasInstances() {
	f.Where(entql.HasEdge("instances"))
}

// WhereHasInstancesWith applies a predicate to check if query has an edge instances with a given conditions (other predicates).
func (f *AlertFilter) WhereHasInstancesWith(preds ...predicate.OncallEvent) {
	f.Where(entql.HasEdgeWith("instances", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (amq *AlertMetricsQuery) addPredicate(pred func(s *sql.Selector)) {
	amq.predicates = append(amq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AlertMetricsQuery builder.
func (amq *AlertMetricsQuery) Filter() *AlertMetricsFilter {
	return &AlertMetricsFilter{config: amq.config, predicateAdder: amq}
}

// addPredicate implements the predicateAdder interface.
func (m *AlertMetricsMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AlertMetricsMutation builder.
func (m *AlertMetricsMutation) Filter() *AlertMetricsFilter {
	return &AlertMetricsFilter{config: m.config, predicateAdder: m}
}

// AlertMetricsFilter provides a generic filtering capability at runtime for AlertMetricsQuery.
type AlertMetricsFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AlertMetricsFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *AlertMetricsFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(alertmetrics.FieldID))
}

// WhereAlertID applies the entql [16]byte predicate on the alert_id field.
func (f *AlertMetricsFilter) WhereAlertID(p entql.ValueP) {
	f.Where(p.Field(alertmetrics.FieldAlertID))
}

// WhereHasAlert applies a predicate to check if query has an edge alert.
func (f *AlertMetricsFilter) WhereHasAlert() {
	f.Where(entql.HasEdge("alert"))
}

// WhereHasAlertWith applies a predicate to check if query has an edge alert with a given conditions (other predicates).
func (f *AlertMetricsFilter) WhereHasAlertWith(preds ...predicate.Alert) {
	f.Where(entql.HasEdgeWith("alert", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (eq *EnvironmentQuery) addPredicate(pred func(s *sql.Selector)) {
	eq.predicates = append(eq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EnvironmentQuery builder.
func (eq *EnvironmentQuery) Filter() *EnvironmentFilter {
	return &EnvironmentFilter{config: eq.config, predicateAdder: eq}
}

// addPredicate implements the predicateAdder interface.
func (m *EnvironmentMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EnvironmentMutation builder.
func (m *EnvironmentMutation) Filter() *EnvironmentFilter {
	return &EnvironmentFilter{config: m.config, predicateAdder: m}
}

// EnvironmentFilter provides a generic filtering capability at runtime for EnvironmentQuery.
type EnvironmentFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EnvironmentFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *EnvironmentFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(environment.FieldID))
}

// WhereArchiveTime applies the entql time.Time predicate on the archive_time field.
func (f *EnvironmentFilter) WhereArchiveTime(p entql.TimeP) {
	f.Where(p.Field(environment.FieldArchiveTime))
}

// WhereName applies the entql string predicate on the name field.
func (f *EnvironmentFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(environment.FieldName))
}

// WhereHasIncidents applies a predicate to check if query has an edge incidents.
func (f *EnvironmentFilter) WhereHasIncidents() {
	f.Where(entql.HasEdge("incidents"))
}

// WhereHasIncidentsWith applies a predicate to check if query has an edge incidents with a given conditions (other predicates).
func (f *EnvironmentFilter) WhereHasIncidentsWith(preds ...predicate.Incident) {
	f.Where(entql.HasEdgeWith("incidents", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (fq *FunctionalityQuery) addPredicate(pred func(s *sql.Selector)) {
	fq.predicates = append(fq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the FunctionalityQuery builder.
func (fq *FunctionalityQuery) Filter() *FunctionalityFilter {
	return &FunctionalityFilter{config: fq.config, predicateAdder: fq}
}

// addPredicate implements the predicateAdder interface.
func (m *FunctionalityMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the FunctionalityMutation builder.
func (m *FunctionalityMutation) Filter() *FunctionalityFilter {
	return &FunctionalityFilter{config: m.config, predicateAdder: m}
}

// FunctionalityFilter provides a generic filtering capability at runtime for FunctionalityQuery.
type FunctionalityFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *FunctionalityFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *FunctionalityFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(functionality.FieldID))
}

// WhereName applies the entql string predicate on the name field.
func (f *FunctionalityFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(functionality.FieldName))
}

// addPredicate implements the predicateAdder interface.
func (iq *IncidentQuery) addPredicate(pred func(s *sql.Selector)) {
	iq.predicates = append(iq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the IncidentQuery builder.
func (iq *IncidentQuery) Filter() *IncidentFilter {
	return &IncidentFilter{config: iq.config, predicateAdder: iq}
}

// addPredicate implements the predicateAdder interface.
func (m *IncidentMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the IncidentMutation builder.
func (m *IncidentMutation) Filter() *IncidentFilter {
	return &IncidentFilter{config: m.config, predicateAdder: m}
}

// IncidentFilter provides a generic filtering capability at runtime for IncidentQuery.
type IncidentFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *IncidentFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *IncidentFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(incident.FieldID))
}

// WhereSlug applies the entql string predicate on the slug field.
func (f *IncidentFilter) WhereSlug(p entql.StringP) {
	f.Where(p.Field(incident.FieldSlug))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *IncidentFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(incident.FieldTitle))
}

// WherePrivate applies the entql bool predicate on the private field.
func (f *IncidentFilter) WherePrivate(p entql.BoolP) {
	f.Where(p.Field(incident.FieldPrivate))
}

// WhereSummary applies the entql string predicate on the summary field.
func (f *IncidentFilter) WhereSummary(p entql.StringP) {
	f.Where(p.Field(incident.FieldSummary))
}

// WhereOpenedAt applies the entql time.Time predicate on the opened_at field.
func (f *IncidentFilter) WhereOpenedAt(p entql.TimeP) {
	f.Where(p.Field(incident.FieldOpenedAt))
}

// WhereModifiedAt applies the entql time.Time predicate on the modified_at field.
func (f *IncidentFilter) WhereModifiedAt(p entql.TimeP) {
	f.Where(p.Field(incident.FieldModifiedAt))
}

// WhereClosedAt applies the entql time.Time predicate on the closed_at field.
func (f *IncidentFilter) WhereClosedAt(p entql.TimeP) {
	f.Where(p.Field(incident.FieldClosedAt))
}

// WhereProviderID applies the entql string predicate on the provider_id field.
func (f *IncidentFilter) WhereProviderID(p entql.StringP) {
	f.Where(p.Field(incident.FieldProviderID))
}

// WhereChatChannelID applies the entql string predicate on the chat_channel_id field.
func (f *IncidentFilter) WhereChatChannelID(p entql.StringP) {
	f.Where(p.Field(incident.FieldChatChannelID))
}

// WhereSeverityID applies the entql [16]byte predicate on the severity_id field.
func (f *IncidentFilter) WhereSeverityID(p entql.ValueP) {
	f.Where(p.Field(incident.FieldSeverityID))
}

// WhereTypeID applies the entql [16]byte predicate on the type_id field.
func (f *IncidentFilter) WhereTypeID(p entql.ValueP) {
	f.Where(p.Field(incident.FieldTypeID))
}

// WhereHasEnvironments applies a predicate to check if query has an edge environments.
func (f *IncidentFilter) WhereHasEnvironments() {
	f.Where(entql.HasEdge("environments"))
}

// WhereHasEnvironmentsWith applies a predicate to check if query has an edge environments with a given conditions (other predicates).
func (f *IncidentFilter) WhereHasEnvironmentsWith(preds ...predicate.Environment) {
	f.Where(entql.HasEdgeWith("environments", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSeverity applies a predicate to check if query has an edge severity.
func (f *IncidentFilter) WhereHasSeverity() {
	f.Where(entql.HasEdge("severity"))
}

// WhereHasSeverityWith applies a predicate to check if query has an edge severity with a given conditions (other predicates).
func (f *IncidentFilter) WhereHasSeverityWith(preds ...predicate.IncidentSeverity) {
	f.Where(entql.HasEdgeWith("severity", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasType applies a predicate to check if query has an edge type.
func (f *IncidentFilter) WhereHasType() {
	f.Where(entql.HasEdge("type"))
}

// WhereHasTypeWith applies a predicate to check if query has an edge type with a given conditions (other predicates).
func (f *IncidentFilter) WhereHasTypeWith(preds ...predicate.IncidentType) {
	f.Where(entql.HasEdgeWith("type", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTeamAssignments applies a predicate to check if query has an edge team_assignments.
func (f *IncidentFilter) WhereHasTeamAssignments() {
	f.Where(entql.HasEdge("team_assignments"))
}

// WhereHasTeamAssignmentsWith applies a predicate to check if query has an edge team_assignments with a given conditions (other predicates).
func (f *IncidentFilter) WhereHasTeamAssignmentsWith(preds ...predicate.IncidentTeamAssignment) {
	f.Where(entql.HasEdgeWith("team_assignments", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRoleAssignments applies a predicate to check if query has an edge role_assignments.
func (f *IncidentFilter) WhereHasRoleAssignments() {
	f.Where(entql.HasEdge("role_assignments"))
}

// WhereHasRoleAssignmentsWith applies a predicate to check if query has an edge role_assignments with a given conditions (other predicates).
func (f *IncidentFilter) WhereHasRoleAssignmentsWith(preds ...predicate.IncidentRoleAssignment) {
	f.Where(entql.HasEdgeWith("role_assignments", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMilestones applies a predicate to check if query has an edge milestones.
func (f *IncidentFilter) WhereHasMilestones() {
	f.Where(entql.HasEdge("milestones"))
}

// WhereHasMilestonesWith applies a predicate to check if query has an edge milestones with a given conditions (other predicates).
func (f *IncidentFilter) WhereHasMilestonesWith(preds ...predicate.IncidentMilestone) {
	f.Where(entql.HasEdgeWith("milestones", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEvents applies a predicate to check if query has an edge events.
func (f *IncidentFilter) WhereHasEvents() {
	f.Where(entql.HasEdge("events"))
}

// WhereHasEventsWith applies a predicate to check if query has an edge events with a given conditions (other predicates).
func (f *IncidentFilter) WhereHasEventsWith(preds ...predicate.IncidentEvent) {
	f.Where(entql.HasEdgeWith("events", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRetrospective applies a predicate to check if query has an edge retrospective.
func (f *IncidentFilter) WhereHasRetrospective() {
	f.Where(entql.HasEdge("retrospective"))
}

// WhereHasRetrospectiveWith applies a predicate to check if query has an edge retrospective with a given conditions (other predicates).
func (f *IncidentFilter) WhereHasRetrospectiveWith(preds ...predicate.Retrospective) {
	f.Where(entql.HasEdgeWith("retrospective", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasLinkedIncidents applies a predicate to check if query has an edge linked_incidents.
func (f *IncidentFilter) WhereHasLinkedIncidents() {
	f.Where(entql.HasEdge("linked_incidents"))
}

// WhereHasLinkedIncidentsWith applies a predicate to check if query has an edge linked_incidents with a given conditions (other predicates).
func (f *IncidentFilter) WhereHasLinkedIncidentsWith(preds ...predicate.Incident) {
	f.Where(entql.HasEdgeWith("linked_incidents", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFieldSelections applies a predicate to check if query has an edge field_selections.
func (f *IncidentFilter) WhereHasFieldSelections() {
	f.Where(entql.HasEdge("field_selections"))
}

// WhereHasFieldSelectionsWith applies a predicate to check if query has an edge field_selections with a given conditions (other predicates).
func (f *IncidentFilter) WhereHasFieldSelectionsWith(preds ...predicate.IncidentFieldOption) {
	f.Where(entql.HasEdgeWith("field_selections", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTasks applies a predicate to check if query has an edge tasks.
func (f *IncidentFilter) WhereHasTasks() {
	f.Where(entql.HasEdge("tasks"))
}

// WhereHasTasksWith applies a predicate to check if query has an edge tasks with a given conditions (other predicates).
func (f *IncidentFilter) WhereHasTasksWith(preds ...predicate.Task) {
	f.Where(entql.HasEdgeWith("tasks", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTagAssignments applies a predicate to check if query has an edge tag_assignments.
func (f *IncidentFilter) WhereHasTagAssignments() {
	f.Where(entql.HasEdge("tag_assignments"))
}

// WhereHasTagAssignmentsWith applies a predicate to check if query has an edge tag_assignments with a given conditions (other predicates).
func (f *IncidentFilter) WhereHasTagAssignmentsWith(preds ...predicate.IncidentTag) {
	f.Where(entql.HasEdgeWith("tag_assignments", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDebriefs applies a predicate to check if query has an edge debriefs.
func (f *IncidentFilter) WhereHasDebriefs() {
	f.Where(entql.HasEdge("debriefs"))
}

// WhereHasDebriefsWith applies a predicate to check if query has an edge debriefs with a given conditions (other predicates).
func (f *IncidentFilter) WhereHasDebriefsWith(preds ...predicate.IncidentDebrief) {
	f.Where(entql.HasEdgeWith("debriefs", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasReviewSessions applies a predicate to check if query has an edge review_sessions.
func (f *IncidentFilter) WhereHasReviewSessions() {
	f.Where(entql.HasEdge("review_sessions"))
}

// WhereHasReviewSessionsWith applies a predicate to check if query has an edge review_sessions with a given conditions (other predicates).
func (f *IncidentFilter) WhereHasReviewSessionsWith(preds ...predicate.MeetingSession) {
	f.Where(entql.HasEdgeWith("review_sessions", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasIncidentLinks applies a predicate to check if query has an edge incident_links.
func (f *IncidentFilter) WhereHasIncidentLinks() {
	f.Where(entql.HasEdge("incident_links"))
}

// WhereHasIncidentLinksWith applies a predicate to check if query has an edge incident_links with a given conditions (other predicates).
func (f *IncidentFilter) WhereHasIncidentLinksWith(preds ...predicate.IncidentLink) {
	f.Where(entql.HasEdgeWith("incident_links", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (idq *IncidentDebriefQuery) addPredicate(pred func(s *sql.Selector)) {
	idq.predicates = append(idq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the IncidentDebriefQuery builder.
func (idq *IncidentDebriefQuery) Filter() *IncidentDebriefFilter {
	return &IncidentDebriefFilter{config: idq.config, predicateAdder: idq}
}

// addPredicate implements the predicateAdder interface.
func (m *IncidentDebriefMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the IncidentDebriefMutation builder.
func (m *IncidentDebriefMutation) Filter() *IncidentDebriefFilter {
	return &IncidentDebriefFilter{config: m.config, predicateAdder: m}
}

// IncidentDebriefFilter provides a generic filtering capability at runtime for IncidentDebriefQuery.
type IncidentDebriefFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *IncidentDebriefFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *IncidentDebriefFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(incidentdebrief.FieldID))
}

// WhereIncidentID applies the entql [16]byte predicate on the incident_id field.
func (f *IncidentDebriefFilter) WhereIncidentID(p entql.ValueP) {
	f.Where(p.Field(incidentdebrief.FieldIncidentID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *IncidentDebriefFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(incidentdebrief.FieldUserID))
}

// WhereRequired applies the entql bool predicate on the required field.
func (f *IncidentDebriefFilter) WhereRequired(p entql.BoolP) {
	f.Where(p.Field(incidentdebrief.FieldRequired))
}

// WhereStarted applies the entql bool predicate on the started field.
func (f *IncidentDebriefFilter) WhereStarted(p entql.BoolP) {
	f.Where(p.Field(incidentdebrief.FieldStarted))
}

// WhereHasIncident applies a predicate to check if query has an edge incident.
func (f *IncidentDebriefFilter) WhereHasIncident() {
	f.Where(entql.HasEdge("incident"))
}

// WhereHasIncidentWith applies a predicate to check if query has an edge incident with a given conditions (other predicates).
func (f *IncidentDebriefFilter) WhereHasIncidentWith(preds ...predicate.Incident) {
	f.Where(entql.HasEdgeWith("incident", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *IncidentDebriefFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *IncidentDebriefFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMessages applies a predicate to check if query has an edge messages.
func (f *IncidentDebriefFilter) WhereHasMessages() {
	f.Where(entql.HasEdge("messages"))
}

// WhereHasMessagesWith applies a predicate to check if query has an edge messages with a given conditions (other predicates).
func (f *IncidentDebriefFilter) WhereHasMessagesWith(preds ...predicate.IncidentDebriefMessage) {
	f.Where(entql.HasEdgeWith("messages", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSuggestions applies a predicate to check if query has an edge suggestions.
func (f *IncidentDebriefFilter) WhereHasSuggestions() {
	f.Where(entql.HasEdge("suggestions"))
}

// WhereHasSuggestionsWith applies a predicate to check if query has an edge suggestions with a given conditions (other predicates).
func (f *IncidentDebriefFilter) WhereHasSuggestionsWith(preds ...predicate.IncidentDebriefSuggestion) {
	f.Where(entql.HasEdgeWith("suggestions", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (idmq *IncidentDebriefMessageQuery) addPredicate(pred func(s *sql.Selector)) {
	idmq.predicates = append(idmq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the IncidentDebriefMessageQuery builder.
func (idmq *IncidentDebriefMessageQuery) Filter() *IncidentDebriefMessageFilter {
	return &IncidentDebriefMessageFilter{config: idmq.config, predicateAdder: idmq}
}

// addPredicate implements the predicateAdder interface.
func (m *IncidentDebriefMessageMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the IncidentDebriefMessageMutation builder.
func (m *IncidentDebriefMessageMutation) Filter() *IncidentDebriefMessageFilter {
	return &IncidentDebriefMessageFilter{config: m.config, predicateAdder: m}
}

// IncidentDebriefMessageFilter provides a generic filtering capability at runtime for IncidentDebriefMessageQuery.
type IncidentDebriefMessageFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *IncidentDebriefMessageFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[6].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *IncidentDebriefMessageFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(incidentdebriefmessage.FieldID))
}

// WhereDebriefID applies the entql [16]byte predicate on the debrief_id field.
func (f *IncidentDebriefMessageFilter) WhereDebriefID(p entql.ValueP) {
	f.Where(p.Field(incidentdebriefmessage.FieldDebriefID))
}

// WhereQuestionID applies the entql [16]byte predicate on the question_id field.
func (f *IncidentDebriefMessageFilter) WhereQuestionID(p entql.ValueP) {
	f.Where(p.Field(incidentdebriefmessage.FieldQuestionID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *IncidentDebriefMessageFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(incidentdebriefmessage.FieldCreatedAt))
}

// WhereType applies the entql string predicate on the type field.
func (f *IncidentDebriefMessageFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(incidentdebriefmessage.FieldType))
}

// WhereRequestedTool applies the entql string predicate on the requested_tool field.
func (f *IncidentDebriefMessageFilter) WhereRequestedTool(p entql.StringP) {
	f.Where(p.Field(incidentdebriefmessage.FieldRequestedTool))
}

// WhereBody applies the entql string predicate on the body field.
func (f *IncidentDebriefMessageFilter) WhereBody(p entql.StringP) {
	f.Where(p.Field(incidentdebriefmessage.FieldBody))
}

// WhereHasDebrief applies a predicate to check if query has an edge debrief.
func (f *IncidentDebriefMessageFilter) WhereHasDebrief() {
	f.Where(entql.HasEdge("debrief"))
}

// WhereHasDebriefWith applies a predicate to check if query has an edge debrief with a given conditions (other predicates).
func (f *IncidentDebriefMessageFilter) WhereHasDebriefWith(preds ...predicate.IncidentDebrief) {
	f.Where(entql.HasEdgeWith("debrief", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFromQuestion applies a predicate to check if query has an edge from_question.
func (f *IncidentDebriefMessageFilter) WhereHasFromQuestion() {
	f.Where(entql.HasEdge("from_question"))
}

// WhereHasFromQuestionWith applies a predicate to check if query has an edge from_question with a given conditions (other predicates).
func (f *IncidentDebriefMessageFilter) WhereHasFromQuestionWith(preds ...predicate.IncidentDebriefQuestion) {
	f.Where(entql.HasEdgeWith("from_question", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (idqq *IncidentDebriefQuestionQuery) addPredicate(pred func(s *sql.Selector)) {
	idqq.predicates = append(idqq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the IncidentDebriefQuestionQuery builder.
func (idqq *IncidentDebriefQuestionQuery) Filter() *IncidentDebriefQuestionFilter {
	return &IncidentDebriefQuestionFilter{config: idqq.config, predicateAdder: idqq}
}

// addPredicate implements the predicateAdder interface.
func (m *IncidentDebriefQuestionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the IncidentDebriefQuestionMutation builder.
func (m *IncidentDebriefQuestionMutation) Filter() *IncidentDebriefQuestionFilter {
	return &IncidentDebriefQuestionFilter{config: m.config, predicateAdder: m}
}

// IncidentDebriefQuestionFilter provides a generic filtering capability at runtime for IncidentDebriefQuestionQuery.
type IncidentDebriefQuestionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *IncidentDebriefQuestionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[7].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *IncidentDebriefQuestionFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(incidentdebriefquestion.FieldID))
}

// WhereContent applies the entql string predicate on the content field.
func (f *IncidentDebriefQuestionFilter) WhereContent(p entql.StringP) {
	f.Where(p.Field(incidentdebriefquestion.FieldContent))
}

// WhereHasMessages applies a predicate to check if query has an edge messages.
func (f *IncidentDebriefQuestionFilter) WhereHasMessages() {
	f.Where(entql.HasEdge("messages"))
}

// WhereHasMessagesWith applies a predicate to check if query has an edge messages with a given conditions (other predicates).
func (f *IncidentDebriefQuestionFilter) WhereHasMessagesWith(preds ...predicate.IncidentDebriefMessage) {
	f.Where(entql.HasEdgeWith("messages", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasIncidentFields applies a predicate to check if query has an edge incident_fields.
func (f *IncidentDebriefQuestionFilter) WhereHasIncidentFields() {
	f.Where(entql.HasEdge("incident_fields"))
}

// WhereHasIncidentFieldsWith applies a predicate to check if query has an edge incident_fields with a given conditions (other predicates).
func (f *IncidentDebriefQuestionFilter) WhereHasIncidentFieldsWith(preds ...predicate.IncidentField) {
	f.Where(entql.HasEdgeWith("incident_fields", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasIncidentRoles applies a predicate to check if query has an edge incident_roles.
func (f *IncidentDebriefQuestionFilter) WhereHasIncidentRoles() {
	f.Where(entql.HasEdge("incident_roles"))
}

// WhereHasIncidentRolesWith applies a predicate to check if query has an edge incident_roles with a given conditions (other predicates).
func (f *IncidentDebriefQuestionFilter) WhereHasIncidentRolesWith(preds ...predicate.IncidentRole) {
	f.Where(entql.HasEdgeWith("incident_roles", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasIncidentSeverities applies a predicate to check if query has an edge incident_severities.
func (f *IncidentDebriefQuestionFilter) WhereHasIncidentSeverities() {
	f.Where(entql.HasEdge("incident_severities"))
}

// WhereHasIncidentSeveritiesWith applies a predicate to check if query has an edge incident_severities with a given conditions (other predicates).
func (f *IncidentDebriefQuestionFilter) WhereHasIncidentSeveritiesWith(preds ...predicate.IncidentSeverity) {
	f.Where(entql.HasEdgeWith("incident_severities", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasIncidentTags applies a predicate to check if query has an edge incident_tags.
func (f *IncidentDebriefQuestionFilter) WhereHasIncidentTags() {
	f.Where(entql.HasEdge("incident_tags"))
}

// WhereHasIncidentTagsWith applies a predicate to check if query has an edge incident_tags with a given conditions (other predicates).
func (f *IncidentDebriefQuestionFilter) WhereHasIncidentTagsWith(preds ...predicate.IncidentTag) {
	f.Where(entql.HasEdgeWith("incident_tags", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasIncidentTypes applies a predicate to check if query has an edge incident_types.
func (f *IncidentDebriefQuestionFilter) WhereHasIncidentTypes() {
	f.Where(entql.HasEdge("incident_types"))
}

// WhereHasIncidentTypesWith applies a predicate to check if query has an edge incident_types with a given conditions (other predicates).
func (f *IncidentDebriefQuestionFilter) WhereHasIncidentTypesWith(preds ...predicate.IncidentType) {
	f.Where(entql.HasEdgeWith("incident_types", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (idsq *IncidentDebriefSuggestionQuery) addPredicate(pred func(s *sql.Selector)) {
	idsq.predicates = append(idsq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the IncidentDebriefSuggestionQuery builder.
func (idsq *IncidentDebriefSuggestionQuery) Filter() *IncidentDebriefSuggestionFilter {
	return &IncidentDebriefSuggestionFilter{config: idsq.config, predicateAdder: idsq}
}

// addPredicate implements the predicateAdder interface.
func (m *IncidentDebriefSuggestionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the IncidentDebriefSuggestionMutation builder.
func (m *IncidentDebriefSuggestionMutation) Filter() *IncidentDebriefSuggestionFilter {
	return &IncidentDebriefSuggestionFilter{config: m.config, predicateAdder: m}
}

// IncidentDebriefSuggestionFilter provides a generic filtering capability at runtime for IncidentDebriefSuggestionQuery.
type IncidentDebriefSuggestionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *IncidentDebriefSuggestionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[8].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *IncidentDebriefSuggestionFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(incidentdebriefsuggestion.FieldID))
}

// WhereContent applies the entql string predicate on the content field.
func (f *IncidentDebriefSuggestionFilter) WhereContent(p entql.StringP) {
	f.Where(p.Field(incidentdebriefsuggestion.FieldContent))
}

// WhereHasDebrief applies a predicate to check if query has an edge debrief.
func (f *IncidentDebriefSuggestionFilter) WhereHasDebrief() {
	f.Where(entql.HasEdge("debrief"))
}

// WhereHasDebriefWith applies a predicate to check if query has an edge debrief with a given conditions (other predicates).
func (f *IncidentDebriefSuggestionFilter) WhereHasDebriefWith(preds ...predicate.IncidentDebrief) {
	f.Where(entql.HasEdgeWith("debrief", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ieq *IncidentEventQuery) addPredicate(pred func(s *sql.Selector)) {
	ieq.predicates = append(ieq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the IncidentEventQuery builder.
func (ieq *IncidentEventQuery) Filter() *IncidentEventFilter {
	return &IncidentEventFilter{config: ieq.config, predicateAdder: ieq}
}

// addPredicate implements the predicateAdder interface.
func (m *IncidentEventMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the IncidentEventMutation builder.
func (m *IncidentEventMutation) Filter() *IncidentEventFilter {
	return &IncidentEventFilter{config: m.config, predicateAdder: m}
}

// IncidentEventFilter provides a generic filtering capability at runtime for IncidentEventQuery.
type IncidentEventFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *IncidentEventFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[9].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *IncidentEventFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(incidentevent.FieldID))
}

// WhereIncidentID applies the entql [16]byte predicate on the incident_id field.
func (f *IncidentEventFilter) WhereIncidentID(p entql.ValueP) {
	f.Where(p.Field(incidentevent.FieldIncidentID))
}

// WhereTimestamp applies the entql time.Time predicate on the timestamp field.
func (f *IncidentEventFilter) WhereTimestamp(p entql.TimeP) {
	f.Where(p.Field(incidentevent.FieldTimestamp))
}

// WhereKind applies the entql string predicate on the kind field.
func (f *IncidentEventFilter) WhereKind(p entql.StringP) {
	f.Where(p.Field(incidentevent.FieldKind))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *IncidentEventFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(incidentevent.FieldTitle))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *IncidentEventFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(incidentevent.FieldDescription))
}

// WhereIsKey applies the entql bool predicate on the is_key field.
func (f *IncidentEventFilter) WhereIsKey(p entql.BoolP) {
	f.Where(p.Field(incidentevent.FieldIsKey))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *IncidentEventFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(incidentevent.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *IncidentEventFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(incidentevent.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql [16]byte predicate on the created_by field.
func (f *IncidentEventFilter) WhereCreatedBy(p entql.ValueP) {
	f.Where(p.Field(incidentevent.FieldCreatedBy))
}

// WhereSequence applies the entql int predicate on the sequence field.
func (f *IncidentEventFilter) WhereSequence(p entql.IntP) {
	f.Where(p.Field(incidentevent.FieldSequence))
}

// WhereIsDraft applies the entql bool predicate on the is_draft field.
func (f *IncidentEventFilter) WhereIsDraft(p entql.BoolP) {
	f.Where(p.Field(incidentevent.FieldIsDraft))
}

// WhereHasIncident applies a predicate to check if query has an edge incident.
func (f *IncidentEventFilter) WhereHasIncident() {
	f.Where(entql.HasEdge("incident"))
}

// WhereHasIncidentWith applies a predicate to check if query has an edge incident with a given conditions (other predicates).
func (f *IncidentEventFilter) WhereHasIncidentWith(preds ...predicate.Incident) {
	f.Where(entql.HasEdgeWith("incident", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasContext applies a predicate to check if query has an edge context.
func (f *IncidentEventFilter) WhereHasContext() {
	f.Where(entql.HasEdge("context"))
}

// WhereHasContextWith applies a predicate to check if query has an edge context with a given conditions (other predicates).
func (f *IncidentEventFilter) WhereHasContextWith(preds ...predicate.IncidentEventContext) {
	f.Where(entql.HasEdgeWith("context", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFactors applies a predicate to check if query has an edge factors.
func (f *IncidentEventFilter) WhereHasFactors() {
	f.Where(entql.HasEdge("factors"))
}

// WhereHasFactorsWith applies a predicate to check if query has an edge factors with a given conditions (other predicates).
func (f *IncidentEventFilter) WhereHasFactorsWith(preds ...predicate.IncidentEventContributingFactor) {
	f.Where(entql.HasEdgeWith("factors", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEvidence applies a predicate to check if query has an edge evidence.
func (f *IncidentEventFilter) WhereHasEvidence() {
	f.Where(entql.HasEdge("evidence"))
}

// WhereHasEvidenceWith applies a predicate to check if query has an edge evidence with a given conditions (other predicates).
func (f *IncidentEventFilter) WhereHasEvidenceWith(preds ...predicate.IncidentEventEvidence) {
	f.Where(entql.HasEdgeWith("evidence", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSystemComponents applies a predicate to check if query has an edge system_components.
func (f *IncidentEventFilter) WhereHasSystemComponents() {
	f.Where(entql.HasEdge("system_components"))
}

// WhereHasSystemComponentsWith applies a predicate to check if query has an edge system_components with a given conditions (other predicates).
func (f *IncidentEventFilter) WhereHasSystemComponentsWith(preds ...predicate.SystemComponent) {
	f.Where(entql.HasEdgeWith("system_components", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEventComponents applies a predicate to check if query has an edge event_components.
func (f *IncidentEventFilter) WhereHasEventComponents() {
	f.Where(entql.HasEdge("event_components"))
}

// WhereHasEventComponentsWith applies a predicate to check if query has an edge event_components with a given conditions (other predicates).
func (f *IncidentEventFilter) WhereHasEventComponentsWith(preds ...predicate.IncidentEventSystemComponent) {
	f.Where(entql.HasEdgeWith("event_components", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (iecq *IncidentEventContextQuery) addPredicate(pred func(s *sql.Selector)) {
	iecq.predicates = append(iecq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the IncidentEventContextQuery builder.
func (iecq *IncidentEventContextQuery) Filter() *IncidentEventContextFilter {
	return &IncidentEventContextFilter{config: iecq.config, predicateAdder: iecq}
}

// addPredicate implements the predicateAdder interface.
func (m *IncidentEventContextMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the IncidentEventContextMutation builder.
func (m *IncidentEventContextMutation) Filter() *IncidentEventContextFilter {
	return &IncidentEventContextFilter{config: m.config, predicateAdder: m}
}

// IncidentEventContextFilter provides a generic filtering capability at runtime for IncidentEventContextQuery.
type IncidentEventContextFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *IncidentEventContextFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[10].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *IncidentEventContextFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(incidenteventcontext.FieldID))
}

// WhereSystemState applies the entql string predicate on the system_state field.
func (f *IncidentEventContextFilter) WhereSystemState(p entql.StringP) {
	f.Where(p.Field(incidenteventcontext.FieldSystemState))
}

// WhereDecisionOptions applies the entql json.RawMessage predicate on the decision_options field.
func (f *IncidentEventContextFilter) WhereDecisionOptions(p entql.BytesP) {
	f.Where(p.Field(incidenteventcontext.FieldDecisionOptions))
}

// WhereDecisionRationale applies the entql string predicate on the decision_rationale field.
func (f *IncidentEventContextFilter) WhereDecisionRationale(p entql.StringP) {
	f.Where(p.Field(incidenteventcontext.FieldDecisionRationale))
}

// WhereInvolvedPersonnel applies the entql json.RawMessage predicate on the involved_personnel field.
func (f *IncidentEventContextFilter) WhereInvolvedPersonnel(p entql.BytesP) {
	f.Where(p.Field(incidenteventcontext.FieldInvolvedPersonnel))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *IncidentEventContextFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(incidenteventcontext.FieldCreatedAt))
}

// WhereHasEvent applies a predicate to check if query has an edge event.
func (f *IncidentEventContextFilter) WhereHasEvent() {
	f.Where(entql.HasEdge("event"))
}

// WhereHasEventWith applies a predicate to check if query has an edge event with a given conditions (other predicates).
func (f *IncidentEventContextFilter) WhereHasEventWith(preds ...predicate.IncidentEvent) {
	f.Where(entql.HasEdgeWith("event", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (iecfq *IncidentEventContributingFactorQuery) addPredicate(pred func(s *sql.Selector)) {
	iecfq.predicates = append(iecfq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the IncidentEventContributingFactorQuery builder.
func (iecfq *IncidentEventContributingFactorQuery) Filter() *IncidentEventContributingFactorFilter {
	return &IncidentEventContributingFactorFilter{config: iecfq.config, predicateAdder: iecfq}
}

// addPredicate implements the predicateAdder interface.
func (m *IncidentEventContributingFactorMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the IncidentEventContributingFactorMutation builder.
func (m *IncidentEventContributingFactorMutation) Filter() *IncidentEventContributingFactorFilter {
	return &IncidentEventContributingFactorFilter{config: m.config, predicateAdder: m}
}

// IncidentEventContributingFactorFilter provides a generic filtering capability at runtime for IncidentEventContributingFactorQuery.
type IncidentEventContributingFactorFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *IncidentEventContributingFactorFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[11].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *IncidentEventContributingFactorFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(incidenteventcontributingfactor.FieldID))
}

// WhereFactorType applies the entql string predicate on the factor_type field.
func (f *IncidentEventContributingFactorFilter) WhereFactorType(p entql.StringP) {
	f.Where(p.Field(incidenteventcontributingfactor.FieldFactorType))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *IncidentEventContributingFactorFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(incidenteventcontributingfactor.FieldDescription))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *IncidentEventContributingFactorFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(incidenteventcontributingfactor.FieldCreatedAt))
}

// WhereHasEvent applies a predicate to check if query has an edge event.
func (f *IncidentEventContributingFactorFilter) WhereHasEvent() {
	f.Where(entql.HasEdge("event"))
}

// WhereHasEventWith applies a predicate to check if query has an edge event with a given conditions (other predicates).
func (f *IncidentEventContributingFactorFilter) WhereHasEventWith(preds ...predicate.IncidentEvent) {
	f.Where(entql.HasEdgeWith("event", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ieeq *IncidentEventEvidenceQuery) addPredicate(pred func(s *sql.Selector)) {
	ieeq.predicates = append(ieeq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the IncidentEventEvidenceQuery builder.
func (ieeq *IncidentEventEvidenceQuery) Filter() *IncidentEventEvidenceFilter {
	return &IncidentEventEvidenceFilter{config: ieeq.config, predicateAdder: ieeq}
}

// addPredicate implements the predicateAdder interface.
func (m *IncidentEventEvidenceMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the IncidentEventEvidenceMutation builder.
func (m *IncidentEventEvidenceMutation) Filter() *IncidentEventEvidenceFilter {
	return &IncidentEventEvidenceFilter{config: m.config, predicateAdder: m}
}

// IncidentEventEvidenceFilter provides a generic filtering capability at runtime for IncidentEventEvidenceQuery.
type IncidentEventEvidenceFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *IncidentEventEvidenceFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[12].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *IncidentEventEvidenceFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(incidenteventevidence.FieldID))
}

// WhereEvidenceType applies the entql string predicate on the evidence_type field.
func (f *IncidentEventEvidenceFilter) WhereEvidenceType(p entql.StringP) {
	f.Where(p.Field(incidenteventevidence.FieldEvidenceType))
}

// WhereURL applies the entql string predicate on the url field.
func (f *IncidentEventEvidenceFilter) WhereURL(p entql.StringP) {
	f.Where(p.Field(incidenteventevidence.FieldURL))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *IncidentEventEvidenceFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(incidenteventevidence.FieldTitle))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *IncidentEventEvidenceFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(incidenteventevidence.FieldDescription))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *IncidentEventEvidenceFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(incidenteventevidence.FieldCreatedAt))
}

// WhereHasEvent applies a predicate to check if query has an edge event.
func (f *IncidentEventEvidenceFilter) WhereHasEvent() {
	f.Where(entql.HasEdge("event"))
}

// WhereHasEventWith applies a predicate to check if query has an edge event with a given conditions (other predicates).
func (f *IncidentEventEvidenceFilter) WhereHasEventWith(preds ...predicate.IncidentEvent) {
	f.Where(entql.HasEdgeWith("event", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (iescq *IncidentEventSystemComponentQuery) addPredicate(pred func(s *sql.Selector)) {
	iescq.predicates = append(iescq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the IncidentEventSystemComponentQuery builder.
func (iescq *IncidentEventSystemComponentQuery) Filter() *IncidentEventSystemComponentFilter {
	return &IncidentEventSystemComponentFilter{config: iescq.config, predicateAdder: iescq}
}

// addPredicate implements the predicateAdder interface.
func (m *IncidentEventSystemComponentMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the IncidentEventSystemComponentMutation builder.
func (m *IncidentEventSystemComponentMutation) Filter() *IncidentEventSystemComponentFilter {
	return &IncidentEventSystemComponentFilter{config: m.config, predicateAdder: m}
}

// IncidentEventSystemComponentFilter provides a generic filtering capability at runtime for IncidentEventSystemComponentQuery.
type IncidentEventSystemComponentFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *IncidentEventSystemComponentFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[13].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *IncidentEventSystemComponentFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(incidenteventsystemcomponent.FieldID))
}

// WhereIncidentEventID applies the entql [16]byte predicate on the incident_event_id field.
func (f *IncidentEventSystemComponentFilter) WhereIncidentEventID(p entql.ValueP) {
	f.Where(p.Field(incidenteventsystemcomponent.FieldIncidentEventID))
}

// WhereSystemComponentID applies the entql [16]byte predicate on the system_component_id field.
func (f *IncidentEventSystemComponentFilter) WhereSystemComponentID(p entql.ValueP) {
	f.Where(p.Field(incidenteventsystemcomponent.FieldSystemComponentID))
}

// WhereRelationship applies the entql string predicate on the relationship field.
func (f *IncidentEventSystemComponentFilter) WhereRelationship(p entql.StringP) {
	f.Where(p.Field(incidenteventsystemcomponent.FieldRelationship))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *IncidentEventSystemComponentFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(incidenteventsystemcomponent.FieldCreatedAt))
}

// WhereHasEvent applies a predicate to check if query has an edge event.
func (f *IncidentEventSystemComponentFilter) WhereHasEvent() {
	f.Where(entql.HasEdge("event"))
}

// WhereHasEventWith applies a predicate to check if query has an edge event with a given conditions (other predicates).
func (f *IncidentEventSystemComponentFilter) WhereHasEventWith(preds ...predicate.IncidentEventSystemComponent) {
	f.Where(entql.HasEdgeWith("event", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSystemComponent applies a predicate to check if query has an edge system_component.
func (f *IncidentEventSystemComponentFilter) WhereHasSystemComponent() {
	f.Where(entql.HasEdge("system_component"))
}

// WhereHasSystemComponentWith applies a predicate to check if query has an edge system_component with a given conditions (other predicates).
func (f *IncidentEventSystemComponentFilter) WhereHasSystemComponentWith(preds ...predicate.SystemComponent) {
	f.Where(entql.HasEdgeWith("system_component", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ifq *IncidentFieldQuery) addPredicate(pred func(s *sql.Selector)) {
	ifq.predicates = append(ifq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the IncidentFieldQuery builder.
func (ifq *IncidentFieldQuery) Filter() *IncidentFieldFilter {
	return &IncidentFieldFilter{config: ifq.config, predicateAdder: ifq}
}

// addPredicate implements the predicateAdder interface.
func (m *IncidentFieldMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the IncidentFieldMutation builder.
func (m *IncidentFieldMutation) Filter() *IncidentFieldFilter {
	return &IncidentFieldFilter{config: m.config, predicateAdder: m}
}

// IncidentFieldFilter provides a generic filtering capability at runtime for IncidentFieldQuery.
type IncidentFieldFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *IncidentFieldFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[14].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *IncidentFieldFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(incidentfield.FieldID))
}

// WhereArchiveTime applies the entql time.Time predicate on the archive_time field.
func (f *IncidentFieldFilter) WhereArchiveTime(p entql.TimeP) {
	f.Where(p.Field(incidentfield.FieldArchiveTime))
}

// WhereName applies the entql string predicate on the name field.
func (f *IncidentFieldFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(incidentfield.FieldName))
}

// WhereHasOptions applies a predicate to check if query has an edge options.
func (f *IncidentFieldFilter) WhereHasOptions() {
	f.Where(entql.HasEdge("options"))
}

// WhereHasOptionsWith applies a predicate to check if query has an edge options with a given conditions (other predicates).
func (f *IncidentFieldFilter) WhereHasOptionsWith(preds ...predicate.IncidentFieldOption) {
	f.Where(entql.HasEdgeWith("options", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDebriefQuestions applies a predicate to check if query has an edge debrief_questions.
func (f *IncidentFieldFilter) WhereHasDebriefQuestions() {
	f.Where(entql.HasEdge("debrief_questions"))
}

// WhereHasDebriefQuestionsWith applies a predicate to check if query has an edge debrief_questions with a given conditions (other predicates).
func (f *IncidentFieldFilter) WhereHasDebriefQuestionsWith(preds ...predicate.IncidentDebriefQuestion) {
	f.Where(entql.HasEdgeWith("debrief_questions", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ifoq *IncidentFieldOptionQuery) addPredicate(pred func(s *sql.Selector)) {
	ifoq.predicates = append(ifoq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the IncidentFieldOptionQuery builder.
func (ifoq *IncidentFieldOptionQuery) Filter() *IncidentFieldOptionFilter {
	return &IncidentFieldOptionFilter{config: ifoq.config, predicateAdder: ifoq}
}

// addPredicate implements the predicateAdder interface.
func (m *IncidentFieldOptionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the IncidentFieldOptionMutation builder.
func (m *IncidentFieldOptionMutation) Filter() *IncidentFieldOptionFilter {
	return &IncidentFieldOptionFilter{config: m.config, predicateAdder: m}
}

// IncidentFieldOptionFilter provides a generic filtering capability at runtime for IncidentFieldOptionQuery.
type IncidentFieldOptionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *IncidentFieldOptionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[15].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *IncidentFieldOptionFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(incidentfieldoption.FieldID))
}

// WhereArchiveTime applies the entql time.Time predicate on the archive_time field.
func (f *IncidentFieldOptionFilter) WhereArchiveTime(p entql.TimeP) {
	f.Where(p.Field(incidentfieldoption.FieldArchiveTime))
}

// WhereIncidentFieldID applies the entql [16]byte predicate on the incident_field_id field.
func (f *IncidentFieldOptionFilter) WhereIncidentFieldID(p entql.ValueP) {
	f.Where(p.Field(incidentfieldoption.FieldIncidentFieldID))
}

// WhereType applies the entql string predicate on the type field.
func (f *IncidentFieldOptionFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(incidentfieldoption.FieldType))
}

// WhereValue applies the entql string predicate on the value field.
func (f *IncidentFieldOptionFilter) WhereValue(p entql.StringP) {
	f.Where(p.Field(incidentfieldoption.FieldValue))
}

// WhereHasIncidentField applies a predicate to check if query has an edge incident_field.
func (f *IncidentFieldOptionFilter) WhereHasIncidentField() {
	f.Where(entql.HasEdge("incident_field"))
}

// WhereHasIncidentFieldWith applies a predicate to check if query has an edge incident_field with a given conditions (other predicates).
func (f *IncidentFieldOptionFilter) WhereHasIncidentFieldWith(preds ...predicate.IncidentField) {
	f.Where(entql.HasEdgeWith("incident_field", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasIncidents applies a predicate to check if query has an edge incidents.
func (f *IncidentFieldOptionFilter) WhereHasIncidents() {
	f.Where(entql.HasEdge("incidents"))
}

// WhereHasIncidentsWith applies a predicate to check if query has an edge incidents with a given conditions (other predicates).
func (f *IncidentFieldOptionFilter) WhereHasIncidentsWith(preds ...predicate.Incident) {
	f.Where(entql.HasEdgeWith("incidents", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ilq *IncidentLinkQuery) addPredicate(pred func(s *sql.Selector)) {
	ilq.predicates = append(ilq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the IncidentLinkQuery builder.
func (ilq *IncidentLinkQuery) Filter() *IncidentLinkFilter {
	return &IncidentLinkFilter{config: ilq.config, predicateAdder: ilq}
}

// addPredicate implements the predicateAdder interface.
func (m *IncidentLinkMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the IncidentLinkMutation builder.
func (m *IncidentLinkMutation) Filter() *IncidentLinkFilter {
	return &IncidentLinkFilter{config: m.config, predicateAdder: m}
}

// IncidentLinkFilter provides a generic filtering capability at runtime for IncidentLinkQuery.
type IncidentLinkFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *IncidentLinkFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[16].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *IncidentLinkFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(incidentlink.FieldID))
}

// WhereIncidentID applies the entql [16]byte predicate on the incident_id field.
func (f *IncidentLinkFilter) WhereIncidentID(p entql.ValueP) {
	f.Where(p.Field(incidentlink.FieldIncidentID))
}

// WhereLinkedIncidentID applies the entql [16]byte predicate on the linked_incident_id field.
func (f *IncidentLinkFilter) WhereLinkedIncidentID(p entql.ValueP) {
	f.Where(p.Field(incidentlink.FieldLinkedIncidentID))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *IncidentLinkFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(incidentlink.FieldDescription))
}

// WhereLinkType applies the entql string predicate on the link_type field.
func (f *IncidentLinkFilter) WhereLinkType(p entql.StringP) {
	f.Where(p.Field(incidentlink.FieldLinkType))
}

// WhereHasIncident applies a predicate to check if query has an edge incident.
func (f *IncidentLinkFilter) WhereHasIncident() {
	f.Where(entql.HasEdge("incident"))
}

// WhereHasIncidentWith applies a predicate to check if query has an edge incident with a given conditions (other predicates).
func (f *IncidentLinkFilter) WhereHasIncidentWith(preds ...predicate.Incident) {
	f.Where(entql.HasEdgeWith("incident", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasLinkedIncident applies a predicate to check if query has an edge linked_incident.
func (f *IncidentLinkFilter) WhereHasLinkedIncident() {
	f.Where(entql.HasEdge("linked_incident"))
}

// WhereHasLinkedIncidentWith applies a predicate to check if query has an edge linked_incident with a given conditions (other predicates).
func (f *IncidentLinkFilter) WhereHasLinkedIncidentWith(preds ...predicate.Incident) {
	f.Where(entql.HasEdgeWith("linked_incident", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (imq *IncidentMilestoneQuery) addPredicate(pred func(s *sql.Selector)) {
	imq.predicates = append(imq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the IncidentMilestoneQuery builder.
func (imq *IncidentMilestoneQuery) Filter() *IncidentMilestoneFilter {
	return &IncidentMilestoneFilter{config: imq.config, predicateAdder: imq}
}

// addPredicate implements the predicateAdder interface.
func (m *IncidentMilestoneMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the IncidentMilestoneMutation builder.
func (m *IncidentMilestoneMutation) Filter() *IncidentMilestoneFilter {
	return &IncidentMilestoneFilter{config: m.config, predicateAdder: m}
}

// IncidentMilestoneFilter provides a generic filtering capability at runtime for IncidentMilestoneQuery.
type IncidentMilestoneFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *IncidentMilestoneFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[17].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *IncidentMilestoneFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(incidentmilestone.FieldID))
}

// WhereIncidentID applies the entql [16]byte predicate on the incident_id field.
func (f *IncidentMilestoneFilter) WhereIncidentID(p entql.ValueP) {
	f.Where(p.Field(incidentmilestone.FieldIncidentID))
}

// WhereKind applies the entql string predicate on the kind field.
func (f *IncidentMilestoneFilter) WhereKind(p entql.StringP) {
	f.Where(p.Field(incidentmilestone.FieldKind))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *IncidentMilestoneFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(incidentmilestone.FieldDescription))
}

// WhereTime applies the entql time.Time predicate on the time field.
func (f *IncidentMilestoneFilter) WhereTime(p entql.TimeP) {
	f.Where(p.Field(incidentmilestone.FieldTime))
}

// WhereHasIncident applies a predicate to check if query has an edge incident.
func (f *IncidentMilestoneFilter) WhereHasIncident() {
	f.Where(entql.HasEdge("incident"))
}

// WhereHasIncidentWith applies a predicate to check if query has an edge incident with a given conditions (other predicates).
func (f *IncidentMilestoneFilter) WhereHasIncidentWith(preds ...predicate.Incident) {
	f.Where(entql.HasEdgeWith("incident", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (irq *IncidentRoleQuery) addPredicate(pred func(s *sql.Selector)) {
	irq.predicates = append(irq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the IncidentRoleQuery builder.
func (irq *IncidentRoleQuery) Filter() *IncidentRoleFilter {
	return &IncidentRoleFilter{config: irq.config, predicateAdder: irq}
}

// addPredicate implements the predicateAdder interface.
func (m *IncidentRoleMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the IncidentRoleMutation builder.
func (m *IncidentRoleMutation) Filter() *IncidentRoleFilter {
	return &IncidentRoleFilter{config: m.config, predicateAdder: m}
}

// IncidentRoleFilter provides a generic filtering capability at runtime for IncidentRoleQuery.
type IncidentRoleFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *IncidentRoleFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[18].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *IncidentRoleFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(incidentrole.FieldID))
}

// WhereArchiveTime applies the entql time.Time predicate on the archive_time field.
func (f *IncidentRoleFilter) WhereArchiveTime(p entql.TimeP) {
	f.Where(p.Field(incidentrole.FieldArchiveTime))
}

// WhereName applies the entql string predicate on the name field.
func (f *IncidentRoleFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(incidentrole.FieldName))
}

// WhereProviderID applies the entql string predicate on the provider_id field.
func (f *IncidentRoleFilter) WhereProviderID(p entql.StringP) {
	f.Where(p.Field(incidentrole.FieldProviderID))
}

// WhereRequired applies the entql bool predicate on the required field.
func (f *IncidentRoleFilter) WhereRequired(p entql.BoolP) {
	f.Where(p.Field(incidentrole.FieldRequired))
}

// WhereHasAssignments applies a predicate to check if query has an edge assignments.
func (f *IncidentRoleFilter) WhereHasAssignments() {
	f.Where(entql.HasEdge("assignments"))
}

// WhereHasAssignmentsWith applies a predicate to check if query has an edge assignments with a given conditions (other predicates).
func (f *IncidentRoleFilter) WhereHasAssignmentsWith(preds ...predicate.IncidentRoleAssignment) {
	f.Where(entql.HasEdgeWith("assignments", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDebriefQuestions applies a predicate to check if query has an edge debrief_questions.
func (f *IncidentRoleFilter) WhereHasDebriefQuestions() {
	f.Where(entql.HasEdge("debrief_questions"))
}

// WhereHasDebriefQuestionsWith applies a predicate to check if query has an edge debrief_questions with a given conditions (other predicates).
func (f *IncidentRoleFilter) WhereHasDebriefQuestionsWith(preds ...predicate.IncidentDebriefQuestion) {
	f.Where(entql.HasEdgeWith("debrief_questions", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (iraq *IncidentRoleAssignmentQuery) addPredicate(pred func(s *sql.Selector)) {
	iraq.predicates = append(iraq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the IncidentRoleAssignmentQuery builder.
func (iraq *IncidentRoleAssignmentQuery) Filter() *IncidentRoleAssignmentFilter {
	return &IncidentRoleAssignmentFilter{config: iraq.config, predicateAdder: iraq}
}

// addPredicate implements the predicateAdder interface.
func (m *IncidentRoleAssignmentMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the IncidentRoleAssignmentMutation builder.
func (m *IncidentRoleAssignmentMutation) Filter() *IncidentRoleAssignmentFilter {
	return &IncidentRoleAssignmentFilter{config: m.config, predicateAdder: m}
}

// IncidentRoleAssignmentFilter provides a generic filtering capability at runtime for IncidentRoleAssignmentQuery.
type IncidentRoleAssignmentFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *IncidentRoleAssignmentFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[19].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *IncidentRoleAssignmentFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(incidentroleassignment.FieldID))
}

// WhereRoleID applies the entql [16]byte predicate on the role_id field.
func (f *IncidentRoleAssignmentFilter) WhereRoleID(p entql.ValueP) {
	f.Where(p.Field(incidentroleassignment.FieldRoleID))
}

// WhereIncidentID applies the entql [16]byte predicate on the incident_id field.
func (f *IncidentRoleAssignmentFilter) WhereIncidentID(p entql.ValueP) {
	f.Where(p.Field(incidentroleassignment.FieldIncidentID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *IncidentRoleAssignmentFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(incidentroleassignment.FieldUserID))
}

// WhereHasRole applies a predicate to check if query has an edge role.
func (f *IncidentRoleAssignmentFilter) WhereHasRole() {
	f.Where(entql.HasEdge("role"))
}

// WhereHasRoleWith applies a predicate to check if query has an edge role with a given conditions (other predicates).
func (f *IncidentRoleAssignmentFilter) WhereHasRoleWith(preds ...predicate.IncidentRole) {
	f.Where(entql.HasEdgeWith("role", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasIncident applies a predicate to check if query has an edge incident.
func (f *IncidentRoleAssignmentFilter) WhereHasIncident() {
	f.Where(entql.HasEdge("incident"))
}

// WhereHasIncidentWith applies a predicate to check if query has an edge incident with a given conditions (other predicates).
func (f *IncidentRoleAssignmentFilter) WhereHasIncidentWith(preds ...predicate.Incident) {
	f.Where(entql.HasEdgeWith("incident", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *IncidentRoleAssignmentFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *IncidentRoleAssignmentFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (isq *IncidentSeverityQuery) addPredicate(pred func(s *sql.Selector)) {
	isq.predicates = append(isq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the IncidentSeverityQuery builder.
func (isq *IncidentSeverityQuery) Filter() *IncidentSeverityFilter {
	return &IncidentSeverityFilter{config: isq.config, predicateAdder: isq}
}

// addPredicate implements the predicateAdder interface.
func (m *IncidentSeverityMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the IncidentSeverityMutation builder.
func (m *IncidentSeverityMutation) Filter() *IncidentSeverityFilter {
	return &IncidentSeverityFilter{config: m.config, predicateAdder: m}
}

// IncidentSeverityFilter provides a generic filtering capability at runtime for IncidentSeverityQuery.
type IncidentSeverityFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *IncidentSeverityFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[20].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *IncidentSeverityFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(incidentseverity.FieldID))
}

// WhereArchiveTime applies the entql time.Time predicate on the archive_time field.
func (f *IncidentSeverityFilter) WhereArchiveTime(p entql.TimeP) {
	f.Where(p.Field(incidentseverity.FieldArchiveTime))
}

// WhereProviderID applies the entql string predicate on the provider_id field.
func (f *IncidentSeverityFilter) WhereProviderID(p entql.StringP) {
	f.Where(p.Field(incidentseverity.FieldProviderID))
}

// WhereName applies the entql string predicate on the name field.
func (f *IncidentSeverityFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(incidentseverity.FieldName))
}

// WhereRank applies the entql int predicate on the rank field.
func (f *IncidentSeverityFilter) WhereRank(p entql.IntP) {
	f.Where(p.Field(incidentseverity.FieldRank))
}

// WhereColor applies the entql string predicate on the color field.
func (f *IncidentSeverityFilter) WhereColor(p entql.StringP) {
	f.Where(p.Field(incidentseverity.FieldColor))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *IncidentSeverityFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(incidentseverity.FieldDescription))
}

// WhereHasIncidents applies a predicate to check if query has an edge incidents.
func (f *IncidentSeverityFilter) WhereHasIncidents() {
	f.Where(entql.HasEdge("incidents"))
}

// WhereHasIncidentsWith applies a predicate to check if query has an edge incidents with a given conditions (other predicates).
func (f *IncidentSeverityFilter) WhereHasIncidentsWith(preds ...predicate.Incident) {
	f.Where(entql.HasEdgeWith("incidents", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDebriefQuestions applies a predicate to check if query has an edge debrief_questions.
func (f *IncidentSeverityFilter) WhereHasDebriefQuestions() {
	f.Where(entql.HasEdge("debrief_questions"))
}

// WhereHasDebriefQuestionsWith applies a predicate to check if query has an edge debrief_questions with a given conditions (other predicates).
func (f *IncidentSeverityFilter) WhereHasDebriefQuestionsWith(preds ...predicate.IncidentDebriefQuestion) {
	f.Where(entql.HasEdgeWith("debrief_questions", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (itq *IncidentTagQuery) addPredicate(pred func(s *sql.Selector)) {
	itq.predicates = append(itq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the IncidentTagQuery builder.
func (itq *IncidentTagQuery) Filter() *IncidentTagFilter {
	return &IncidentTagFilter{config: itq.config, predicateAdder: itq}
}

// addPredicate implements the predicateAdder interface.
func (m *IncidentTagMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the IncidentTagMutation builder.
func (m *IncidentTagMutation) Filter() *IncidentTagFilter {
	return &IncidentTagFilter{config: m.config, predicateAdder: m}
}

// IncidentTagFilter provides a generic filtering capability at runtime for IncidentTagQuery.
type IncidentTagFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *IncidentTagFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[21].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *IncidentTagFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(incidenttag.FieldID))
}

// WhereArchiveTime applies the entql time.Time predicate on the archive_time field.
func (f *IncidentTagFilter) WhereArchiveTime(p entql.TimeP) {
	f.Where(p.Field(incidenttag.FieldArchiveTime))
}

// WhereKey applies the entql string predicate on the key field.
func (f *IncidentTagFilter) WhereKey(p entql.StringP) {
	f.Where(p.Field(incidenttag.FieldKey))
}

// WhereValue applies the entql string predicate on the value field.
func (f *IncidentTagFilter) WhereValue(p entql.StringP) {
	f.Where(p.Field(incidenttag.FieldValue))
}

// WhereHasIncidents applies a predicate to check if query has an edge incidents.
func (f *IncidentTagFilter) WhereHasIncidents() {
	f.Where(entql.HasEdge("incidents"))
}

// WhereHasIncidentsWith applies a predicate to check if query has an edge incidents with a given conditions (other predicates).
func (f *IncidentTagFilter) WhereHasIncidentsWith(preds ...predicate.Incident) {
	f.Where(entql.HasEdgeWith("incidents", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDebriefQuestions applies a predicate to check if query has an edge debrief_questions.
func (f *IncidentTagFilter) WhereHasDebriefQuestions() {
	f.Where(entql.HasEdge("debrief_questions"))
}

// WhereHasDebriefQuestionsWith applies a predicate to check if query has an edge debrief_questions with a given conditions (other predicates).
func (f *IncidentTagFilter) WhereHasDebriefQuestionsWith(preds ...predicate.IncidentDebriefQuestion) {
	f.Where(entql.HasEdgeWith("debrief_questions", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (itaq *IncidentTeamAssignmentQuery) addPredicate(pred func(s *sql.Selector)) {
	itaq.predicates = append(itaq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the IncidentTeamAssignmentQuery builder.
func (itaq *IncidentTeamAssignmentQuery) Filter() *IncidentTeamAssignmentFilter {
	return &IncidentTeamAssignmentFilter{config: itaq.config, predicateAdder: itaq}
}

// addPredicate implements the predicateAdder interface.
func (m *IncidentTeamAssignmentMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the IncidentTeamAssignmentMutation builder.
func (m *IncidentTeamAssignmentMutation) Filter() *IncidentTeamAssignmentFilter {
	return &IncidentTeamAssignmentFilter{config: m.config, predicateAdder: m}
}

// IncidentTeamAssignmentFilter provides a generic filtering capability at runtime for IncidentTeamAssignmentQuery.
type IncidentTeamAssignmentFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *IncidentTeamAssignmentFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[22].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *IncidentTeamAssignmentFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(incidentteamassignment.FieldID))
}

// WhereIncidentID applies the entql [16]byte predicate on the incident_id field.
func (f *IncidentTeamAssignmentFilter) WhereIncidentID(p entql.ValueP) {
	f.Where(p.Field(incidentteamassignment.FieldIncidentID))
}

// WhereTeamID applies the entql [16]byte predicate on the team_id field.
func (f *IncidentTeamAssignmentFilter) WhereTeamID(p entql.ValueP) {
	f.Where(p.Field(incidentteamassignment.FieldTeamID))
}

// WhereHasIncident applies a predicate to check if query has an edge incident.
func (f *IncidentTeamAssignmentFilter) WhereHasIncident() {
	f.Where(entql.HasEdge("incident"))
}

// WhereHasIncidentWith applies a predicate to check if query has an edge incident with a given conditions (other predicates).
func (f *IncidentTeamAssignmentFilter) WhereHasIncidentWith(preds ...predicate.Incident) {
	f.Where(entql.HasEdgeWith("incident", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTeam applies a predicate to check if query has an edge team.
func (f *IncidentTeamAssignmentFilter) WhereHasTeam() {
	f.Where(entql.HasEdge("team"))
}

// WhereHasTeamWith applies a predicate to check if query has an edge team with a given conditions (other predicates).
func (f *IncidentTeamAssignmentFilter) WhereHasTeamWith(preds ...predicate.Team) {
	f.Where(entql.HasEdgeWith("team", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (itq *IncidentTypeQuery) addPredicate(pred func(s *sql.Selector)) {
	itq.predicates = append(itq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the IncidentTypeQuery builder.
func (itq *IncidentTypeQuery) Filter() *IncidentTypeFilter {
	return &IncidentTypeFilter{config: itq.config, predicateAdder: itq}
}

// addPredicate implements the predicateAdder interface.
func (m *IncidentTypeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the IncidentTypeMutation builder.
func (m *IncidentTypeMutation) Filter() *IncidentTypeFilter {
	return &IncidentTypeFilter{config: m.config, predicateAdder: m}
}

// IncidentTypeFilter provides a generic filtering capability at runtime for IncidentTypeQuery.
type IncidentTypeFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *IncidentTypeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[23].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *IncidentTypeFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(incidenttype.FieldID))
}

// WhereArchiveTime applies the entql time.Time predicate on the archive_time field.
func (f *IncidentTypeFilter) WhereArchiveTime(p entql.TimeP) {
	f.Where(p.Field(incidenttype.FieldArchiveTime))
}

// WhereName applies the entql string predicate on the name field.
func (f *IncidentTypeFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(incidenttype.FieldName))
}

// WhereHasIncidents applies a predicate to check if query has an edge incidents.
func (f *IncidentTypeFilter) WhereHasIncidents() {
	f.Where(entql.HasEdge("incidents"))
}

// WhereHasIncidentsWith applies a predicate to check if query has an edge incidents with a given conditions (other predicates).
func (f *IncidentTypeFilter) WhereHasIncidentsWith(preds ...predicate.Incident) {
	f.Where(entql.HasEdgeWith("incidents", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDebriefQuestions applies a predicate to check if query has an edge debrief_questions.
func (f *IncidentTypeFilter) WhereHasDebriefQuestions() {
	f.Where(entql.HasEdge("debrief_questions"))
}

// WhereHasDebriefQuestionsWith applies a predicate to check if query has an edge debrief_questions with a given conditions (other predicates).
func (f *IncidentTypeFilter) WhereHasDebriefQuestionsWith(preds ...predicate.IncidentDebriefQuestion) {
	f.Where(entql.HasEdgeWith("debrief_questions", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (msq *MeetingScheduleQuery) addPredicate(pred func(s *sql.Selector)) {
	msq.predicates = append(msq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the MeetingScheduleQuery builder.
func (msq *MeetingScheduleQuery) Filter() *MeetingScheduleFilter {
	return &MeetingScheduleFilter{config: msq.config, predicateAdder: msq}
}

// addPredicate implements the predicateAdder interface.
func (m *MeetingScheduleMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the MeetingScheduleMutation builder.
func (m *MeetingScheduleMutation) Filter() *MeetingScheduleFilter {
	return &MeetingScheduleFilter{config: m.config, predicateAdder: m}
}

// MeetingScheduleFilter provides a generic filtering capability at runtime for MeetingScheduleQuery.
type MeetingScheduleFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *MeetingScheduleFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[24].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *MeetingScheduleFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(meetingschedule.FieldID))
}

// WhereArchiveTime applies the entql time.Time predicate on the archive_time field.
func (f *MeetingScheduleFilter) WhereArchiveTime(p entql.TimeP) {
	f.Where(p.Field(meetingschedule.FieldArchiveTime))
}

// WhereName applies the entql string predicate on the name field.
func (f *MeetingScheduleFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(meetingschedule.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *MeetingScheduleFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(meetingschedule.FieldDescription))
}

// WhereBeginMinute applies the entql int predicate on the begin_minute field.
func (f *MeetingScheduleFilter) WhereBeginMinute(p entql.IntP) {
	f.Where(p.Field(meetingschedule.FieldBeginMinute))
}

// WhereDurationMinutes applies the entql int predicate on the duration_minutes field.
func (f *MeetingScheduleFilter) WhereDurationMinutes(p entql.IntP) {
	f.Where(p.Field(meetingschedule.FieldDurationMinutes))
}

// WhereStartDate applies the entql time.Time predicate on the start_date field.
func (f *MeetingScheduleFilter) WhereStartDate(p entql.TimeP) {
	f.Where(p.Field(meetingschedule.FieldStartDate))
}

// WhereRepeats applies the entql string predicate on the repeats field.
func (f *MeetingScheduleFilter) WhereRepeats(p entql.StringP) {
	f.Where(p.Field(meetingschedule.FieldRepeats))
}

// WhereRepetitionStep applies the entql int predicate on the repetition_step field.
func (f *MeetingScheduleFilter) WhereRepetitionStep(p entql.IntP) {
	f.Where(p.Field(meetingschedule.FieldRepetitionStep))
}

// WhereWeekDays applies the entql json.RawMessage predicate on the week_days field.
func (f *MeetingScheduleFilter) WhereWeekDays(p entql.BytesP) {
	f.Where(p.Field(meetingschedule.FieldWeekDays))
}

// WhereMonthlyOn applies the entql string predicate on the monthly_on field.
func (f *MeetingScheduleFilter) WhereMonthlyOn(p entql.StringP) {
	f.Where(p.Field(meetingschedule.FieldMonthlyOn))
}

// WhereUntilDate applies the entql time.Time predicate on the until_date field.
func (f *MeetingScheduleFilter) WhereUntilDate(p entql.TimeP) {
	f.Where(p.Field(meetingschedule.FieldUntilDate))
}

// WhereNumRepetitions applies the entql int predicate on the num_repetitions field.
func (f *MeetingScheduleFilter) WhereNumRepetitions(p entql.IntP) {
	f.Where(p.Field(meetingschedule.FieldNumRepetitions))
}

// WhereHasSessions applies a predicate to check if query has an edge sessions.
func (f *MeetingScheduleFilter) WhereHasSessions() {
	f.Where(entql.HasEdge("sessions"))
}

// WhereHasSessionsWith applies a predicate to check if query has an edge sessions with a given conditions (other predicates).
func (f *MeetingScheduleFilter) WhereHasSessionsWith(preds ...predicate.MeetingSession) {
	f.Where(entql.HasEdgeWith("sessions", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOwningTeam applies a predicate to check if query has an edge owning_team.
func (f *MeetingScheduleFilter) WhereHasOwningTeam() {
	f.Where(entql.HasEdge("owning_team"))
}

// WhereHasOwningTeamWith applies a predicate to check if query has an edge owning_team with a given conditions (other predicates).
func (f *MeetingScheduleFilter) WhereHasOwningTeamWith(preds ...predicate.Team) {
	f.Where(entql.HasEdgeWith("owning_team", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (msq *MeetingSessionQuery) addPredicate(pred func(s *sql.Selector)) {
	msq.predicates = append(msq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the MeetingSessionQuery builder.
func (msq *MeetingSessionQuery) Filter() *MeetingSessionFilter {
	return &MeetingSessionFilter{config: msq.config, predicateAdder: msq}
}

// addPredicate implements the predicateAdder interface.
func (m *MeetingSessionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the MeetingSessionMutation builder.
func (m *MeetingSessionMutation) Filter() *MeetingSessionFilter {
	return &MeetingSessionFilter{config: m.config, predicateAdder: m}
}

// MeetingSessionFilter provides a generic filtering capability at runtime for MeetingSessionQuery.
type MeetingSessionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *MeetingSessionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[25].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *MeetingSessionFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(meetingsession.FieldID))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *MeetingSessionFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(meetingsession.FieldTitle))
}

// WhereStartedAt applies the entql time.Time predicate on the started_at field.
func (f *MeetingSessionFilter) WhereStartedAt(p entql.TimeP) {
	f.Where(p.Field(meetingsession.FieldStartedAt))
}

// WhereEndedAt applies the entql time.Time predicate on the ended_at field.
func (f *MeetingSessionFilter) WhereEndedAt(p entql.TimeP) {
	f.Where(p.Field(meetingsession.FieldEndedAt))
}

// WhereDocumentName applies the entql string predicate on the document_name field.
func (f *MeetingSessionFilter) WhereDocumentName(p entql.StringP) {
	f.Where(p.Field(meetingsession.FieldDocumentName))
}

// WhereHasIncidents applies a predicate to check if query has an edge incidents.
func (f *MeetingSessionFilter) WhereHasIncidents() {
	f.Where(entql.HasEdge("incidents"))
}

// WhereHasIncidentsWith applies a predicate to check if query has an edge incidents with a given conditions (other predicates).
func (f *MeetingSessionFilter) WhereHasIncidentsWith(preds ...predicate.Incident) {
	f.Where(entql.HasEdgeWith("incidents", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (oaq *OncallAnnotationQuery) addPredicate(pred func(s *sql.Selector)) {
	oaq.predicates = append(oaq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OncallAnnotationQuery builder.
func (oaq *OncallAnnotationQuery) Filter() *OncallAnnotationFilter {
	return &OncallAnnotationFilter{config: oaq.config, predicateAdder: oaq}
}

// addPredicate implements the predicateAdder interface.
func (m *OncallAnnotationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OncallAnnotationMutation builder.
func (m *OncallAnnotationMutation) Filter() *OncallAnnotationFilter {
	return &OncallAnnotationFilter{config: m.config, predicateAdder: m}
}

// OncallAnnotationFilter provides a generic filtering capability at runtime for OncallAnnotationQuery.
type OncallAnnotationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OncallAnnotationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[26].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *OncallAnnotationFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(oncallannotation.FieldID))
}

// WhereEventID applies the entql [16]byte predicate on the event_id field.
func (f *OncallAnnotationFilter) WhereEventID(p entql.ValueP) {
	f.Where(p.Field(oncallannotation.FieldEventID))
}

// WhereRosterID applies the entql [16]byte predicate on the roster_id field.
func (f *OncallAnnotationFilter) WhereRosterID(p entql.ValueP) {
	f.Where(p.Field(oncallannotation.FieldRosterID))
}

// WhereCreatorID applies the entql [16]byte predicate on the creator_id field.
func (f *OncallAnnotationFilter) WhereCreatorID(p entql.ValueP) {
	f.Where(p.Field(oncallannotation.FieldCreatorID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OncallAnnotationFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(oncallannotation.FieldCreatedAt))
}

// WhereMinutesOccupied applies the entql int predicate on the minutes_occupied field.
func (f *OncallAnnotationFilter) WhereMinutesOccupied(p entql.IntP) {
	f.Where(p.Field(oncallannotation.FieldMinutesOccupied))
}

// WhereNotes applies the entql string predicate on the notes field.
func (f *OncallAnnotationFilter) WhereNotes(p entql.StringP) {
	f.Where(p.Field(oncallannotation.FieldNotes))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *OncallAnnotationFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(oncallannotation.FieldTags))
}

// WhereHasEvent applies a predicate to check if query has an edge event.
func (f *OncallAnnotationFilter) WhereHasEvent() {
	f.Where(entql.HasEdge("event"))
}

// WhereHasEventWith applies a predicate to check if query has an edge event with a given conditions (other predicates).
func (f *OncallAnnotationFilter) WhereHasEventWith(preds ...predicate.OncallEvent) {
	f.Where(entql.HasEdgeWith("event", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRoster applies a predicate to check if query has an edge roster.
func (f *OncallAnnotationFilter) WhereHasRoster() {
	f.Where(entql.HasEdge("roster"))
}

// WhereHasRosterWith applies a predicate to check if query has an edge roster with a given conditions (other predicates).
func (f *OncallAnnotationFilter) WhereHasRosterWith(preds ...predicate.OncallRoster) {
	f.Where(entql.HasEdgeWith("roster", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCreator applies a predicate to check if query has an edge creator.
func (f *OncallAnnotationFilter) WhereHasCreator() {
	f.Where(entql.HasEdge("creator"))
}

// WhereHasCreatorWith applies a predicate to check if query has an edge creator with a given conditions (other predicates).
func (f *OncallAnnotationFilter) WhereHasCreatorWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAlertFeedback applies a predicate to check if query has an edge alert_feedback.
func (f *OncallAnnotationFilter) WhereHasAlertFeedback() {
	f.Where(entql.HasEdge("alert_feedback"))
}

// WhereHasAlertFeedbackWith applies a predicate to check if query has an edge alert_feedback with a given conditions (other predicates).
func (f *OncallAnnotationFilter) WhereHasAlertFeedbackWith(preds ...predicate.OncallAnnotationAlertFeedback) {
	f.Where(entql.HasEdgeWith("alert_feedback", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasHandovers applies a predicate to check if query has an edge handovers.
func (f *OncallAnnotationFilter) WhereHasHandovers() {
	f.Where(entql.HasEdge("handovers"))
}

// WhereHasHandoversWith applies a predicate to check if query has an edge handovers with a given conditions (other predicates).
func (f *OncallAnnotationFilter) WhereHasHandoversWith(preds ...predicate.OncallUserShiftHandover) {
	f.Where(entql.HasEdgeWith("handovers", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (oaafq *OncallAnnotationAlertFeedbackQuery) addPredicate(pred func(s *sql.Selector)) {
	oaafq.predicates = append(oaafq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OncallAnnotationAlertFeedbackQuery builder.
func (oaafq *OncallAnnotationAlertFeedbackQuery) Filter() *OncallAnnotationAlertFeedbackFilter {
	return &OncallAnnotationAlertFeedbackFilter{config: oaafq.config, predicateAdder: oaafq}
}

// addPredicate implements the predicateAdder interface.
func (m *OncallAnnotationAlertFeedbackMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OncallAnnotationAlertFeedbackMutation builder.
func (m *OncallAnnotationAlertFeedbackMutation) Filter() *OncallAnnotationAlertFeedbackFilter {
	return &OncallAnnotationAlertFeedbackFilter{config: m.config, predicateAdder: m}
}

// OncallAnnotationAlertFeedbackFilter provides a generic filtering capability at runtime for OncallAnnotationAlertFeedbackQuery.
type OncallAnnotationAlertFeedbackFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OncallAnnotationAlertFeedbackFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[27].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *OncallAnnotationAlertFeedbackFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(oncallannotationalertfeedback.FieldID))
}

// WhereAnnotationID applies the entql [16]byte predicate on the annotation_id field.
func (f *OncallAnnotationAlertFeedbackFilter) WhereAnnotationID(p entql.ValueP) {
	f.Where(p.Field(oncallannotationalertfeedback.FieldAnnotationID))
}

// WhereActionable applies the entql bool predicate on the actionable field.
func (f *OncallAnnotationAlertFeedbackFilter) WhereActionable(p entql.BoolP) {
	f.Where(p.Field(oncallannotationalertfeedback.FieldActionable))
}

// WhereAccurate applies the entql string predicate on the accurate field.
func (f *OncallAnnotationAlertFeedbackFilter) WhereAccurate(p entql.StringP) {
	f.Where(p.Field(oncallannotationalertfeedback.FieldAccurate))
}

// WhereDocumentationAvailable applies the entql string predicate on the documentation_available field.
func (f *OncallAnnotationAlertFeedbackFilter) WhereDocumentationAvailable(p entql.StringP) {
	f.Where(p.Field(oncallannotationalertfeedback.FieldDocumentationAvailable))
}

// WhereHasAnnotation applies a predicate to check if query has an edge annotation.
func (f *OncallAnnotationAlertFeedbackFilter) WhereHasAnnotation() {
	f.Where(entql.HasEdge("annotation"))
}

// WhereHasAnnotationWith applies a predicate to check if query has an edge annotation with a given conditions (other predicates).
func (f *OncallAnnotationAlertFeedbackFilter) WhereHasAnnotationWith(preds ...predicate.OncallAnnotation) {
	f.Where(entql.HasEdgeWith("annotation", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (oeq *OncallEventQuery) addPredicate(pred func(s *sql.Selector)) {
	oeq.predicates = append(oeq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OncallEventQuery builder.
func (oeq *OncallEventQuery) Filter() *OncallEventFilter {
	return &OncallEventFilter{config: oeq.config, predicateAdder: oeq}
}

// addPredicate implements the predicateAdder interface.
func (m *OncallEventMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OncallEventMutation builder.
func (m *OncallEventMutation) Filter() *OncallEventFilter {
	return &OncallEventFilter{config: m.config, predicateAdder: m}
}

// OncallEventFilter provides a generic filtering capability at runtime for OncallEventQuery.
type OncallEventFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OncallEventFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[28].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *OncallEventFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(oncallevent.FieldID))
}

// WhereProviderID applies the entql string predicate on the provider_id field.
func (f *OncallEventFilter) WhereProviderID(p entql.StringP) {
	f.Where(p.Field(oncallevent.FieldProviderID))
}

// WhereRosterID applies the entql [16]byte predicate on the roster_id field.
func (f *OncallEventFilter) WhereRosterID(p entql.ValueP) {
	f.Where(p.Field(oncallevent.FieldRosterID))
}

// WhereAlertID applies the entql [16]byte predicate on the alert_id field.
func (f *OncallEventFilter) WhereAlertID(p entql.ValueP) {
	f.Where(p.Field(oncallevent.FieldAlertID))
}

// WhereTimestamp applies the entql time.Time predicate on the timestamp field.
func (f *OncallEventFilter) WhereTimestamp(p entql.TimeP) {
	f.Where(p.Field(oncallevent.FieldTimestamp))
}

// WhereKind applies the entql string predicate on the kind field.
func (f *OncallEventFilter) WhereKind(p entql.StringP) {
	f.Where(p.Field(oncallevent.FieldKind))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *OncallEventFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(oncallevent.FieldTitle))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *OncallEventFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(oncallevent.FieldDescription))
}

// WhereSource applies the entql string predicate on the source field.
func (f *OncallEventFilter) WhereSource(p entql.StringP) {
	f.Where(p.Field(oncallevent.FieldSource))
}

// WhereHasRoster applies a predicate to check if query has an edge roster.
func (f *OncallEventFilter) WhereHasRoster() {
	f.Where(entql.HasEdge("roster"))
}

// WhereHasRosterWith applies a predicate to check if query has an edge roster with a given conditions (other predicates).
func (f *OncallEventFilter) WhereHasRosterWith(preds ...predicate.OncallRoster) {
	f.Where(entql.HasEdgeWith("roster", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAlert applies a predicate to check if query has an edge alert.
func (f *OncallEventFilter) WhereHasAlert() {
	f.Where(entql.HasEdge("alert"))
}

// WhereHasAlertWith applies a predicate to check if query has an edge alert with a given conditions (other predicates).
func (f *OncallEventFilter) WhereHasAlertWith(preds ...predicate.Alert) {
	f.Where(entql.HasEdgeWith("alert", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAnnotations applies a predicate to check if query has an edge annotations.
func (f *OncallEventFilter) WhereHasAnnotations() {
	f.Where(entql.HasEdge("annotations"))
}

// WhereHasAnnotationsWith applies a predicate to check if query has an edge annotations with a given conditions (other predicates).
func (f *OncallEventFilter) WhereHasAnnotationsWith(preds ...predicate.OncallAnnotation) {
	f.Where(entql.HasEdgeWith("annotations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ohtq *OncallHandoverTemplateQuery) addPredicate(pred func(s *sql.Selector)) {
	ohtq.predicates = append(ohtq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OncallHandoverTemplateQuery builder.
func (ohtq *OncallHandoverTemplateQuery) Filter() *OncallHandoverTemplateFilter {
	return &OncallHandoverTemplateFilter{config: ohtq.config, predicateAdder: ohtq}
}

// addPredicate implements the predicateAdder interface.
func (m *OncallHandoverTemplateMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OncallHandoverTemplateMutation builder.
func (m *OncallHandoverTemplateMutation) Filter() *OncallHandoverTemplateFilter {
	return &OncallHandoverTemplateFilter{config: m.config, predicateAdder: m}
}

// OncallHandoverTemplateFilter provides a generic filtering capability at runtime for OncallHandoverTemplateQuery.
type OncallHandoverTemplateFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OncallHandoverTemplateFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[29].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *OncallHandoverTemplateFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(oncallhandovertemplate.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OncallHandoverTemplateFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(oncallhandovertemplate.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OncallHandoverTemplateFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(oncallhandovertemplate.FieldUpdatedAt))
}

// WhereContents applies the entql []byte predicate on the contents field.
func (f *OncallHandoverTemplateFilter) WhereContents(p entql.BytesP) {
	f.Where(p.Field(oncallhandovertemplate.FieldContents))
}

// WhereIsDefault applies the entql bool predicate on the is_default field.
func (f *OncallHandoverTemplateFilter) WhereIsDefault(p entql.BoolP) {
	f.Where(p.Field(oncallhandovertemplate.FieldIsDefault))
}

// WhereHasRoster applies a predicate to check if query has an edge roster.
func (f *OncallHandoverTemplateFilter) WhereHasRoster() {
	f.Where(entql.HasEdge("roster"))
}

// WhereHasRosterWith applies a predicate to check if query has an edge roster with a given conditions (other predicates).
func (f *OncallHandoverTemplateFilter) WhereHasRosterWith(preds ...predicate.OncallRoster) {
	f.Where(entql.HasEdgeWith("roster", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (orq *OncallRosterQuery) addPredicate(pred func(s *sql.Selector)) {
	orq.predicates = append(orq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OncallRosterQuery builder.
func (orq *OncallRosterQuery) Filter() *OncallRosterFilter {
	return &OncallRosterFilter{config: orq.config, predicateAdder: orq}
}

// addPredicate implements the predicateAdder interface.
func (m *OncallRosterMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OncallRosterMutation builder.
func (m *OncallRosterMutation) Filter() *OncallRosterFilter {
	return &OncallRosterFilter{config: m.config, predicateAdder: m}
}

// OncallRosterFilter provides a generic filtering capability at runtime for OncallRosterQuery.
type OncallRosterFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OncallRosterFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[30].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *OncallRosterFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(oncallroster.FieldID))
}

// WhereArchiveTime applies the entql time.Time predicate on the archive_time field.
func (f *OncallRosterFilter) WhereArchiveTime(p entql.TimeP) {
	f.Where(p.Field(oncallroster.FieldArchiveTime))
}

// WhereName applies the entql string predicate on the name field.
func (f *OncallRosterFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(oncallroster.FieldName))
}

// WhereSlug applies the entql string predicate on the slug field.
func (f *OncallRosterFilter) WhereSlug(p entql.StringP) {
	f.Where(p.Field(oncallroster.FieldSlug))
}

// WhereProviderID applies the entql string predicate on the provider_id field.
func (f *OncallRosterFilter) WhereProviderID(p entql.StringP) {
	f.Where(p.Field(oncallroster.FieldProviderID))
}

// WhereTimezone applies the entql string predicate on the timezone field.
func (f *OncallRosterFilter) WhereTimezone(p entql.StringP) {
	f.Where(p.Field(oncallroster.FieldTimezone))
}

// WhereChatHandle applies the entql string predicate on the chat_handle field.
func (f *OncallRosterFilter) WhereChatHandle(p entql.StringP) {
	f.Where(p.Field(oncallroster.FieldChatHandle))
}

// WhereChatChannelID applies the entql string predicate on the chat_channel_id field.
func (f *OncallRosterFilter) WhereChatChannelID(p entql.StringP) {
	f.Where(p.Field(oncallroster.FieldChatChannelID))
}

// WhereHandoverTemplateID applies the entql [16]byte predicate on the handover_template_id field.
func (f *OncallRosterFilter) WhereHandoverTemplateID(p entql.ValueP) {
	f.Where(p.Field(oncallroster.FieldHandoverTemplateID))
}

// WhereHasSchedules applies a predicate to check if query has an edge schedules.
func (f *OncallRosterFilter) WhereHasSchedules() {
	f.Where(entql.HasEdge("schedules"))
}

// WhereHasSchedulesWith applies a predicate to check if query has an edge schedules with a given conditions (other predicates).
func (f *OncallRosterFilter) WhereHasSchedulesWith(preds ...predicate.OncallSchedule) {
	f.Where(entql.HasEdgeWith("schedules", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasHandoverTemplate applies a predicate to check if query has an edge handover_template.
func (f *OncallRosterFilter) WhereHasHandoverTemplate() {
	f.Where(entql.HasEdge("handover_template"))
}

// WhereHasHandoverTemplateWith applies a predicate to check if query has an edge handover_template with a given conditions (other predicates).
func (f *OncallRosterFilter) WhereHasHandoverTemplateWith(preds ...predicate.OncallHandoverTemplate) {
	f.Where(entql.HasEdgeWith("handover_template", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEvents applies a predicate to check if query has an edge events.
func (f *OncallRosterFilter) WhereHasEvents() {
	f.Where(entql.HasEdge("events"))
}

// WhereHasEventsWith applies a predicate to check if query has an edge events with a given conditions (other predicates).
func (f *OncallRosterFilter) WhereHasEventsWith(preds ...predicate.OncallEvent) {
	f.Where(entql.HasEdgeWith("events", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAnnotations applies a predicate to check if query has an edge annotations.
func (f *OncallRosterFilter) WhereHasAnnotations() {
	f.Where(entql.HasEdge("annotations"))
}

// WhereHasAnnotationsWith applies a predicate to check if query has an edge annotations with a given conditions (other predicates).
func (f *OncallRosterFilter) WhereHasAnnotationsWith(preds ...predicate.OncallAnnotation) {
	f.Where(entql.HasEdgeWith("annotations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTeams applies a predicate to check if query has an edge teams.
func (f *OncallRosterFilter) WhereHasTeams() {
	f.Where(entql.HasEdge("teams"))
}

// WhereHasTeamsWith applies a predicate to check if query has an edge teams with a given conditions (other predicates).
func (f *OncallRosterFilter) WhereHasTeamsWith(preds ...predicate.Team) {
	f.Where(entql.HasEdgeWith("teams", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasShifts applies a predicate to check if query has an edge shifts.
func (f *OncallRosterFilter) WhereHasShifts() {
	f.Where(entql.HasEdge("shifts"))
}

// WhereHasShiftsWith applies a predicate to check if query has an edge shifts with a given conditions (other predicates).
func (f *OncallRosterFilter) WhereHasShiftsWith(preds ...predicate.OncallUserShift) {
	f.Where(entql.HasEdgeWith("shifts", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUserWatchers applies a predicate to check if query has an edge user_watchers.
func (f *OncallRosterFilter) WhereHasUserWatchers() {
	f.Where(entql.HasEdge("user_watchers"))
}

// WhereHasUserWatchersWith applies a predicate to check if query has an edge user_watchers with a given conditions (other predicates).
func (f *OncallRosterFilter) WhereHasUserWatchersWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user_watchers", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMetrics applies a predicate to check if query has an edge metrics.
func (f *OncallRosterFilter) WhereHasMetrics() {
	f.Where(entql.HasEdge("metrics"))
}

// WhereHasMetricsWith applies a predicate to check if query has an edge metrics with a given conditions (other predicates).
func (f *OncallRosterFilter) WhereHasMetricsWith(preds ...predicate.OncallRosterMetrics) {
	f.Where(entql.HasEdgeWith("metrics", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ormq *OncallRosterMetricsQuery) addPredicate(pred func(s *sql.Selector)) {
	ormq.predicates = append(ormq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OncallRosterMetricsQuery builder.
func (ormq *OncallRosterMetricsQuery) Filter() *OncallRosterMetricsFilter {
	return &OncallRosterMetricsFilter{config: ormq.config, predicateAdder: ormq}
}

// addPredicate implements the predicateAdder interface.
func (m *OncallRosterMetricsMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OncallRosterMetricsMutation builder.
func (m *OncallRosterMetricsMutation) Filter() *OncallRosterMetricsFilter {
	return &OncallRosterMetricsFilter{config: m.config, predicateAdder: m}
}

// OncallRosterMetricsFilter provides a generic filtering capability at runtime for OncallRosterMetricsQuery.
type OncallRosterMetricsFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OncallRosterMetricsFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[31].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *OncallRosterMetricsFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(oncallrostermetrics.FieldID))
}

// WhereRosterID applies the entql [16]byte predicate on the roster_id field.
func (f *OncallRosterMetricsFilter) WhereRosterID(p entql.ValueP) {
	f.Where(p.Field(oncallrostermetrics.FieldRosterID))
}

// WhereHasRoster applies a predicate to check if query has an edge roster.
func (f *OncallRosterMetricsFilter) WhereHasRoster() {
	f.Where(entql.HasEdge("roster"))
}

// WhereHasRosterWith applies a predicate to check if query has an edge roster with a given conditions (other predicates).
func (f *OncallRosterMetricsFilter) WhereHasRosterWith(preds ...predicate.OncallRoster) {
	f.Where(entql.HasEdgeWith("roster", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (osq *OncallScheduleQuery) addPredicate(pred func(s *sql.Selector)) {
	osq.predicates = append(osq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OncallScheduleQuery builder.
func (osq *OncallScheduleQuery) Filter() *OncallScheduleFilter {
	return &OncallScheduleFilter{config: osq.config, predicateAdder: osq}
}

// addPredicate implements the predicateAdder interface.
func (m *OncallScheduleMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OncallScheduleMutation builder.
func (m *OncallScheduleMutation) Filter() *OncallScheduleFilter {
	return &OncallScheduleFilter{config: m.config, predicateAdder: m}
}

// OncallScheduleFilter provides a generic filtering capability at runtime for OncallScheduleQuery.
type OncallScheduleFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OncallScheduleFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[32].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *OncallScheduleFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(oncallschedule.FieldID))
}

// WhereArchiveTime applies the entql time.Time predicate on the archive_time field.
func (f *OncallScheduleFilter) WhereArchiveTime(p entql.TimeP) {
	f.Where(p.Field(oncallschedule.FieldArchiveTime))
}

// WhereName applies the entql string predicate on the name field.
func (f *OncallScheduleFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(oncallschedule.FieldName))
}

// WhereRosterID applies the entql [16]byte predicate on the roster_id field.
func (f *OncallScheduleFilter) WhereRosterID(p entql.ValueP) {
	f.Where(p.Field(oncallschedule.FieldRosterID))
}

// WhereTimezone applies the entql string predicate on the timezone field.
func (f *OncallScheduleFilter) WhereTimezone(p entql.StringP) {
	f.Where(p.Field(oncallschedule.FieldTimezone))
}

// WhereProviderID applies the entql string predicate on the provider_id field.
func (f *OncallScheduleFilter) WhereProviderID(p entql.StringP) {
	f.Where(p.Field(oncallschedule.FieldProviderID))
}

// WhereHasParticipants applies a predicate to check if query has an edge participants.
func (f *OncallScheduleFilter) WhereHasParticipants() {
	f.Where(entql.HasEdge("participants"))
}

// WhereHasParticipantsWith applies a predicate to check if query has an edge participants with a given conditions (other predicates).
func (f *OncallScheduleFilter) WhereHasParticipantsWith(preds ...predicate.OncallScheduleParticipant) {
	f.Where(entql.HasEdgeWith("participants", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRoster applies a predicate to check if query has an edge roster.
func (f *OncallScheduleFilter) WhereHasRoster() {
	f.Where(entql.HasEdge("roster"))
}

// WhereHasRosterWith applies a predicate to check if query has an edge roster with a given conditions (other predicates).
func (f *OncallScheduleFilter) WhereHasRosterWith(preds ...predicate.OncallRoster) {
	f.Where(entql.HasEdgeWith("roster", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ospq *OncallScheduleParticipantQuery) addPredicate(pred func(s *sql.Selector)) {
	ospq.predicates = append(ospq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OncallScheduleParticipantQuery builder.
func (ospq *OncallScheduleParticipantQuery) Filter() *OncallScheduleParticipantFilter {
	return &OncallScheduleParticipantFilter{config: ospq.config, predicateAdder: ospq}
}

// addPredicate implements the predicateAdder interface.
func (m *OncallScheduleParticipantMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OncallScheduleParticipantMutation builder.
func (m *OncallScheduleParticipantMutation) Filter() *OncallScheduleParticipantFilter {
	return &OncallScheduleParticipantFilter{config: m.config, predicateAdder: m}
}

// OncallScheduleParticipantFilter provides a generic filtering capability at runtime for OncallScheduleParticipantQuery.
type OncallScheduleParticipantFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OncallScheduleParticipantFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[33].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *OncallScheduleParticipantFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(oncallscheduleparticipant.FieldID))
}

// WhereScheduleID applies the entql [16]byte predicate on the schedule_id field.
func (f *OncallScheduleParticipantFilter) WhereScheduleID(p entql.ValueP) {
	f.Where(p.Field(oncallscheduleparticipant.FieldScheduleID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *OncallScheduleParticipantFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(oncallscheduleparticipant.FieldUserID))
}

// WhereIndex applies the entql int predicate on the index field.
func (f *OncallScheduleParticipantFilter) WhereIndex(p entql.IntP) {
	f.Where(p.Field(oncallscheduleparticipant.FieldIndex))
}

// WhereHasSchedule applies a predicate to check if query has an edge schedule.
func (f *OncallScheduleParticipantFilter) WhereHasSchedule() {
	f.Where(entql.HasEdge("schedule"))
}

// WhereHasScheduleWith applies a predicate to check if query has an edge schedule with a given conditions (other predicates).
func (f *OncallScheduleParticipantFilter) WhereHasScheduleWith(preds ...predicate.OncallSchedule) {
	f.Where(entql.HasEdgeWith("schedule", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *OncallScheduleParticipantFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *OncallScheduleParticipantFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ousq *OncallUserShiftQuery) addPredicate(pred func(s *sql.Selector)) {
	ousq.predicates = append(ousq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OncallUserShiftQuery builder.
func (ousq *OncallUserShiftQuery) Filter() *OncallUserShiftFilter {
	return &OncallUserShiftFilter{config: ousq.config, predicateAdder: ousq}
}

// addPredicate implements the predicateAdder interface.
func (m *OncallUserShiftMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OncallUserShiftMutation builder.
func (m *OncallUserShiftMutation) Filter() *OncallUserShiftFilter {
	return &OncallUserShiftFilter{config: m.config, predicateAdder: m}
}

// OncallUserShiftFilter provides a generic filtering capability at runtime for OncallUserShiftQuery.
type OncallUserShiftFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OncallUserShiftFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[34].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *OncallUserShiftFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(oncallusershift.FieldID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *OncallUserShiftFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(oncallusershift.FieldUserID))
}

// WhereRosterID applies the entql [16]byte predicate on the roster_id field.
func (f *OncallUserShiftFilter) WhereRosterID(p entql.ValueP) {
	f.Where(p.Field(oncallusershift.FieldRosterID))
}

// WhereProviderID applies the entql string predicate on the provider_id field.
func (f *OncallUserShiftFilter) WhereProviderID(p entql.StringP) {
	f.Where(p.Field(oncallusershift.FieldProviderID))
}

// WhereRole applies the entql string predicate on the role field.
func (f *OncallUserShiftFilter) WhereRole(p entql.StringP) {
	f.Where(p.Field(oncallusershift.FieldRole))
}

// WherePrimaryShiftID applies the entql [16]byte predicate on the primary_shift_id field.
func (f *OncallUserShiftFilter) WherePrimaryShiftID(p entql.ValueP) {
	f.Where(p.Field(oncallusershift.FieldPrimaryShiftID))
}

// WhereStartAt applies the entql time.Time predicate on the start_at field.
func (f *OncallUserShiftFilter) WhereStartAt(p entql.TimeP) {
	f.Where(p.Field(oncallusershift.FieldStartAt))
}

// WhereEndAt applies the entql time.Time predicate on the end_at field.
func (f *OncallUserShiftFilter) WhereEndAt(p entql.TimeP) {
	f.Where(p.Field(oncallusershift.FieldEndAt))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *OncallUserShiftFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *OncallUserShiftFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRoster applies a predicate to check if query has an edge roster.
func (f *OncallUserShiftFilter) WhereHasRoster() {
	f.Where(entql.HasEdge("roster"))
}

// WhereHasRosterWith applies a predicate to check if query has an edge roster with a given conditions (other predicates).
func (f *OncallUserShiftFilter) WhereHasRosterWith(preds ...predicate.OncallRoster) {
	f.Where(entql.HasEdgeWith("roster", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPrimaryShift applies a predicate to check if query has an edge primary_shift.
func (f *OncallUserShiftFilter) WhereHasPrimaryShift() {
	f.Where(entql.HasEdge("primary_shift"))
}

// WhereHasPrimaryShiftWith applies a predicate to check if query has an edge primary_shift with a given conditions (other predicates).
func (f *OncallUserShiftFilter) WhereHasPrimaryShiftWith(preds ...predicate.OncallUserShift) {
	f.Where(entql.HasEdgeWith("primary_shift", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasHandover applies a predicate to check if query has an edge handover.
func (f *OncallUserShiftFilter) WhereHasHandover() {
	f.Where(entql.HasEdge("handover"))
}

// WhereHasHandoverWith applies a predicate to check if query has an edge handover with a given conditions (other predicates).
func (f *OncallUserShiftFilter) WhereHasHandoverWith(preds ...predicate.OncallUserShiftHandover) {
	f.Where(entql.HasEdgeWith("handover", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMetrics applies a predicate to check if query has an edge metrics.
func (f *OncallUserShiftFilter) WhereHasMetrics() {
	f.Where(entql.HasEdge("metrics"))
}

// WhereHasMetricsWith applies a predicate to check if query has an edge metrics with a given conditions (other predicates).
func (f *OncallUserShiftFilter) WhereHasMetricsWith(preds ...predicate.OncallUserShiftMetrics) {
	f.Where(entql.HasEdgeWith("metrics", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (oushq *OncallUserShiftHandoverQuery) addPredicate(pred func(s *sql.Selector)) {
	oushq.predicates = append(oushq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OncallUserShiftHandoverQuery builder.
func (oushq *OncallUserShiftHandoverQuery) Filter() *OncallUserShiftHandoverFilter {
	return &OncallUserShiftHandoverFilter{config: oushq.config, predicateAdder: oushq}
}

// addPredicate implements the predicateAdder interface.
func (m *OncallUserShiftHandoverMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OncallUserShiftHandoverMutation builder.
func (m *OncallUserShiftHandoverMutation) Filter() *OncallUserShiftHandoverFilter {
	return &OncallUserShiftHandoverFilter{config: m.config, predicateAdder: m}
}

// OncallUserShiftHandoverFilter provides a generic filtering capability at runtime for OncallUserShiftHandoverQuery.
type OncallUserShiftHandoverFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OncallUserShiftHandoverFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[35].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *OncallUserShiftHandoverFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(oncallusershifthandover.FieldID))
}

// WhereShiftID applies the entql [16]byte predicate on the shift_id field.
func (f *OncallUserShiftHandoverFilter) WhereShiftID(p entql.ValueP) {
	f.Where(p.Field(oncallusershifthandover.FieldShiftID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OncallUserShiftHandoverFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(oncallusershifthandover.FieldCreatedAt))
}

// WhereReminderSent applies the entql bool predicate on the reminder_sent field.
func (f *OncallUserShiftHandoverFilter) WhereReminderSent(p entql.BoolP) {
	f.Where(p.Field(oncallusershifthandover.FieldReminderSent))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OncallUserShiftHandoverFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(oncallusershifthandover.FieldUpdatedAt))
}

// WhereSentAt applies the entql time.Time predicate on the sent_at field.
func (f *OncallUserShiftHandoverFilter) WhereSentAt(p entql.TimeP) {
	f.Where(p.Field(oncallusershifthandover.FieldSentAt))
}

// WhereContents applies the entql []byte predicate on the contents field.
func (f *OncallUserShiftHandoverFilter) WhereContents(p entql.BytesP) {
	f.Where(p.Field(oncallusershifthandover.FieldContents))
}

// WhereHasShift applies a predicate to check if query has an edge shift.
func (f *OncallUserShiftHandoverFilter) WhereHasShift() {
	f.Where(entql.HasEdge("shift"))
}

// WhereHasShiftWith applies a predicate to check if query has an edge shift with a given conditions (other predicates).
func (f *OncallUserShiftHandoverFilter) WhereHasShiftWith(preds ...predicate.OncallUserShift) {
	f.Where(entql.HasEdgeWith("shift", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPinnedAnnotations applies a predicate to check if query has an edge pinned_annotations.
func (f *OncallUserShiftHandoverFilter) WhereHasPinnedAnnotations() {
	f.Where(entql.HasEdge("pinned_annotations"))
}

// WhereHasPinnedAnnotationsWith applies a predicate to check if query has an edge pinned_annotations with a given conditions (other predicates).
func (f *OncallUserShiftHandoverFilter) WhereHasPinnedAnnotationsWith(preds ...predicate.OncallAnnotation) {
	f.Where(entql.HasEdgeWith("pinned_annotations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ousmq *OncallUserShiftMetricsQuery) addPredicate(pred func(s *sql.Selector)) {
	ousmq.predicates = append(ousmq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OncallUserShiftMetricsQuery builder.
func (ousmq *OncallUserShiftMetricsQuery) Filter() *OncallUserShiftMetricsFilter {
	return &OncallUserShiftMetricsFilter{config: ousmq.config, predicateAdder: ousmq}
}

// addPredicate implements the predicateAdder interface.
func (m *OncallUserShiftMetricsMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OncallUserShiftMetricsMutation builder.
func (m *OncallUserShiftMetricsMutation) Filter() *OncallUserShiftMetricsFilter {
	return &OncallUserShiftMetricsFilter{config: m.config, predicateAdder: m}
}

// OncallUserShiftMetricsFilter provides a generic filtering capability at runtime for OncallUserShiftMetricsQuery.
type OncallUserShiftMetricsFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OncallUserShiftMetricsFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[36].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *OncallUserShiftMetricsFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(oncallusershiftmetrics.FieldID))
}

// WhereShiftID applies the entql [16]byte predicate on the shift_id field.
func (f *OncallUserShiftMetricsFilter) WhereShiftID(p entql.ValueP) {
	f.Where(p.Field(oncallusershiftmetrics.FieldShiftID))
}

// WhereHasShift applies a predicate to check if query has an edge shift.
func (f *OncallUserShiftMetricsFilter) WhereHasShift() {
	f.Where(entql.HasEdge("shift"))
}

// WhereHasShiftWith applies a predicate to check if query has an edge shift with a given conditions (other predicates).
func (f *OncallUserShiftMetricsFilter) WhereHasShiftWith(preds ...predicate.OncallUserShift) {
	f.Where(entql.HasEdgeWith("shift", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (pq *PlaybookQuery) addPredicate(pred func(s *sql.Selector)) {
	pq.predicates = append(pq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PlaybookQuery builder.
func (pq *PlaybookQuery) Filter() *PlaybookFilter {
	return &PlaybookFilter{config: pq.config, predicateAdder: pq}
}

// addPredicate implements the predicateAdder interface.
func (m *PlaybookMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PlaybookMutation builder.
func (m *PlaybookMutation) Filter() *PlaybookFilter {
	return &PlaybookFilter{config: m.config, predicateAdder: m}
}

// PlaybookFilter provides a generic filtering capability at runtime for PlaybookQuery.
type PlaybookFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PlaybookFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[37].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *PlaybookFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(playbook.FieldID))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *PlaybookFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(playbook.FieldTitle))
}

// WhereProviderID applies the entql string predicate on the provider_id field.
func (f *PlaybookFilter) WhereProviderID(p entql.StringP) {
	f.Where(p.Field(playbook.FieldProviderID))
}

// WhereContent applies the entql []byte predicate on the content field.
func (f *PlaybookFilter) WhereContent(p entql.BytesP) {
	f.Where(p.Field(playbook.FieldContent))
}

// WhereHasAlerts applies a predicate to check if query has an edge alerts.
func (f *PlaybookFilter) WhereHasAlerts() {
	f.Where(entql.HasEdge("alerts"))
}

// WhereHasAlertsWith applies a predicate to check if query has an edge alerts with a given conditions (other predicates).
func (f *PlaybookFilter) WhereHasAlertsWith(preds ...predicate.Alert) {
	f.Where(entql.HasEdgeWith("alerts", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (pcq *ProviderConfigQuery) addPredicate(pred func(s *sql.Selector)) {
	pcq.predicates = append(pcq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ProviderConfigQuery builder.
func (pcq *ProviderConfigQuery) Filter() *ProviderConfigFilter {
	return &ProviderConfigFilter{config: pcq.config, predicateAdder: pcq}
}

// addPredicate implements the predicateAdder interface.
func (m *ProviderConfigMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ProviderConfigMutation builder.
func (m *ProviderConfigMutation) Filter() *ProviderConfigFilter {
	return &ProviderConfigFilter{config: m.config, predicateAdder: m}
}

// ProviderConfigFilter provides a generic filtering capability at runtime for ProviderConfigQuery.
type ProviderConfigFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ProviderConfigFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[38].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *ProviderConfigFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(providerconfig.FieldID))
}

// WhereProviderType applies the entql string predicate on the provider_type field.
func (f *ProviderConfigFilter) WhereProviderType(p entql.StringP) {
	f.Where(p.Field(providerconfig.FieldProviderType))
}

// WhereProviderName applies the entql string predicate on the provider_name field.
func (f *ProviderConfigFilter) WhereProviderName(p entql.StringP) {
	f.Where(p.Field(providerconfig.FieldProviderName))
}

// WhereProviderConfig applies the entql []byte predicate on the provider_config field.
func (f *ProviderConfigFilter) WhereProviderConfig(p entql.BytesP) {
	f.Where(p.Field(providerconfig.FieldProviderConfig))
}

// WhereEnabled applies the entql bool predicate on the enabled field.
func (f *ProviderConfigFilter) WhereEnabled(p entql.BoolP) {
	f.Where(p.Field(providerconfig.FieldEnabled))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ProviderConfigFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(providerconfig.FieldUpdatedAt))
}

// addPredicate implements the predicateAdder interface.
func (pshq *ProviderSyncHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	pshq.predicates = append(pshq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ProviderSyncHistoryQuery builder.
func (pshq *ProviderSyncHistoryQuery) Filter() *ProviderSyncHistoryFilter {
	return &ProviderSyncHistoryFilter{config: pshq.config, predicateAdder: pshq}
}

// addPredicate implements the predicateAdder interface.
func (m *ProviderSyncHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ProviderSyncHistoryMutation builder.
func (m *ProviderSyncHistoryMutation) Filter() *ProviderSyncHistoryFilter {
	return &ProviderSyncHistoryFilter{config: m.config, predicateAdder: m}
}

// ProviderSyncHistoryFilter provides a generic filtering capability at runtime for ProviderSyncHistoryQuery.
type ProviderSyncHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ProviderSyncHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[39].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *ProviderSyncHistoryFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(providersynchistory.FieldID))
}

// WhereDataType applies the entql string predicate on the data_type field.
func (f *ProviderSyncHistoryFilter) WhereDataType(p entql.StringP) {
	f.Where(p.Field(providersynchistory.FieldDataType))
}

// WhereStartedAt applies the entql time.Time predicate on the started_at field.
func (f *ProviderSyncHistoryFilter) WhereStartedAt(p entql.TimeP) {
	f.Where(p.Field(providersynchistory.FieldStartedAt))
}

// WhereFinishedAt applies the entql time.Time predicate on the finished_at field.
func (f *ProviderSyncHistoryFilter) WhereFinishedAt(p entql.TimeP) {
	f.Where(p.Field(providersynchistory.FieldFinishedAt))
}

// WhereNumMutations applies the entql int predicate on the num_mutations field.
func (f *ProviderSyncHistoryFilter) WhereNumMutations(p entql.IntP) {
	f.Where(p.Field(providersynchistory.FieldNumMutations))
}

// addPredicate implements the predicateAdder interface.
func (rq *RetrospectiveQuery) addPredicate(pred func(s *sql.Selector)) {
	rq.predicates = append(rq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RetrospectiveQuery builder.
func (rq *RetrospectiveQuery) Filter() *RetrospectiveFilter {
	return &RetrospectiveFilter{config: rq.config, predicateAdder: rq}
}

// addPredicate implements the predicateAdder interface.
func (m *RetrospectiveMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RetrospectiveMutation builder.
func (m *RetrospectiveMutation) Filter() *RetrospectiveFilter {
	return &RetrospectiveFilter{config: m.config, predicateAdder: m}
}

// RetrospectiveFilter provides a generic filtering capability at runtime for RetrospectiveQuery.
type RetrospectiveFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RetrospectiveFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[40].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *RetrospectiveFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(retrospective.FieldID))
}

// WhereIncidentID applies the entql [16]byte predicate on the incident_id field.
func (f *RetrospectiveFilter) WhereIncidentID(p entql.ValueP) {
	f.Where(p.Field(retrospective.FieldIncidentID))
}

// WhereSystemAnalysisID applies the entql [16]byte predicate on the system_analysis_id field.
func (f *RetrospectiveFilter) WhereSystemAnalysisID(p entql.ValueP) {
	f.Where(p.Field(retrospective.FieldSystemAnalysisID))
}

// WhereDocumentName applies the entql string predicate on the document_name field.
func (f *RetrospectiveFilter) WhereDocumentName(p entql.StringP) {
	f.Where(p.Field(retrospective.FieldDocumentName))
}

// WhereType applies the entql string predicate on the type field.
func (f *RetrospectiveFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(retrospective.FieldType))
}

// WhereState applies the entql string predicate on the state field.
func (f *RetrospectiveFilter) WhereState(p entql.StringP) {
	f.Where(p.Field(retrospective.FieldState))
}

// WhereHasIncident applies a predicate to check if query has an edge incident.
func (f *RetrospectiveFilter) WhereHasIncident() {
	f.Where(entql.HasEdge("incident"))
}

// WhereHasIncidentWith applies a predicate to check if query has an edge incident with a given conditions (other predicates).
func (f *RetrospectiveFilter) WhereHasIncidentWith(preds ...predicate.Incident) {
	f.Where(entql.HasEdgeWith("incident", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDiscussions applies a predicate to check if query has an edge discussions.
func (f *RetrospectiveFilter) WhereHasDiscussions() {
	f.Where(entql.HasEdge("discussions"))
}

// WhereHasDiscussionsWith applies a predicate to check if query has an edge discussions with a given conditions (other predicates).
func (f *RetrospectiveFilter) WhereHasDiscussionsWith(preds ...predicate.RetrospectiveDiscussion) {
	f.Where(entql.HasEdgeWith("discussions", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSystemAnalysis applies a predicate to check if query has an edge system_analysis.
func (f *RetrospectiveFilter) WhereHasSystemAnalysis() {
	f.Where(entql.HasEdge("system_analysis"))
}

// WhereHasSystemAnalysisWith applies a predicate to check if query has an edge system_analysis with a given conditions (other predicates).
func (f *RetrospectiveFilter) WhereHasSystemAnalysisWith(preds ...predicate.SystemAnalysis) {
	f.Where(entql.HasEdgeWith("system_analysis", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (rdq *RetrospectiveDiscussionQuery) addPredicate(pred func(s *sql.Selector)) {
	rdq.predicates = append(rdq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RetrospectiveDiscussionQuery builder.
func (rdq *RetrospectiveDiscussionQuery) Filter() *RetrospectiveDiscussionFilter {
	return &RetrospectiveDiscussionFilter{config: rdq.config, predicateAdder: rdq}
}

// addPredicate implements the predicateAdder interface.
func (m *RetrospectiveDiscussionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RetrospectiveDiscussionMutation builder.
func (m *RetrospectiveDiscussionMutation) Filter() *RetrospectiveDiscussionFilter {
	return &RetrospectiveDiscussionFilter{config: m.config, predicateAdder: m}
}

// RetrospectiveDiscussionFilter provides a generic filtering capability at runtime for RetrospectiveDiscussionQuery.
type RetrospectiveDiscussionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RetrospectiveDiscussionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[41].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *RetrospectiveDiscussionFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(retrospectivediscussion.FieldID))
}

// WhereRetrospectiveID applies the entql [16]byte predicate on the retrospective_id field.
func (f *RetrospectiveDiscussionFilter) WhereRetrospectiveID(p entql.ValueP) {
	f.Where(p.Field(retrospectivediscussion.FieldRetrospectiveID))
}

// WhereContent applies the entql []byte predicate on the content field.
func (f *RetrospectiveDiscussionFilter) WhereContent(p entql.BytesP) {
	f.Where(p.Field(retrospectivediscussion.FieldContent))
}

// WhereHasRetrospective applies a predicate to check if query has an edge retrospective.
func (f *RetrospectiveDiscussionFilter) WhereHasRetrospective() {
	f.Where(entql.HasEdge("retrospective"))
}

// WhereHasRetrospectiveWith applies a predicate to check if query has an edge retrospective with a given conditions (other predicates).
func (f *RetrospectiveDiscussionFilter) WhereHasRetrospectiveWith(preds ...predicate.Retrospective) {
	f.Where(entql.HasEdgeWith("retrospective", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasReplies applies a predicate to check if query has an edge replies.
func (f *RetrospectiveDiscussionFilter) WhereHasReplies() {
	f.Where(entql.HasEdge("replies"))
}

// WhereHasRepliesWith applies a predicate to check if query has an edge replies with a given conditions (other predicates).
func (f *RetrospectiveDiscussionFilter) WhereHasRepliesWith(preds ...predicate.RetrospectiveDiscussionReply) {
	f.Where(entql.HasEdgeWith("replies", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasReview applies a predicate to check if query has an edge review.
func (f *RetrospectiveDiscussionFilter) WhereHasReview() {
	f.Where(entql.HasEdge("review"))
}

// WhereHasReviewWith applies a predicate to check if query has an edge review with a given conditions (other predicates).
func (f *RetrospectiveDiscussionFilter) WhereHasReviewWith(preds ...predicate.RetrospectiveReview) {
	f.Where(entql.HasEdgeWith("review", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (rdrq *RetrospectiveDiscussionReplyQuery) addPredicate(pred func(s *sql.Selector)) {
	rdrq.predicates = append(rdrq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RetrospectiveDiscussionReplyQuery builder.
func (rdrq *RetrospectiveDiscussionReplyQuery) Filter() *RetrospectiveDiscussionReplyFilter {
	return &RetrospectiveDiscussionReplyFilter{config: rdrq.config, predicateAdder: rdrq}
}

// addPredicate implements the predicateAdder interface.
func (m *RetrospectiveDiscussionReplyMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RetrospectiveDiscussionReplyMutation builder.
func (m *RetrospectiveDiscussionReplyMutation) Filter() *RetrospectiveDiscussionReplyFilter {
	return &RetrospectiveDiscussionReplyFilter{config: m.config, predicateAdder: m}
}

// RetrospectiveDiscussionReplyFilter provides a generic filtering capability at runtime for RetrospectiveDiscussionReplyQuery.
type RetrospectiveDiscussionReplyFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RetrospectiveDiscussionReplyFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[42].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *RetrospectiveDiscussionReplyFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(retrospectivediscussionreply.FieldID))
}

// WhereContent applies the entql []byte predicate on the content field.
func (f *RetrospectiveDiscussionReplyFilter) WhereContent(p entql.BytesP) {
	f.Where(p.Field(retrospectivediscussionreply.FieldContent))
}

// WhereHasDiscussion applies a predicate to check if query has an edge discussion.
func (f *RetrospectiveDiscussionReplyFilter) WhereHasDiscussion() {
	f.Where(entql.HasEdge("discussion"))
}

// WhereHasDiscussionWith applies a predicate to check if query has an edge discussion with a given conditions (other predicates).
func (f *RetrospectiveDiscussionReplyFilter) WhereHasDiscussionWith(preds ...predicate.RetrospectiveDiscussion) {
	f.Where(entql.HasEdgeWith("discussion", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasParentReply applies a predicate to check if query has an edge parent_reply.
func (f *RetrospectiveDiscussionReplyFilter) WhereHasParentReply() {
	f.Where(entql.HasEdge("parent_reply"))
}

// WhereHasParentReplyWith applies a predicate to check if query has an edge parent_reply with a given conditions (other predicates).
func (f *RetrospectiveDiscussionReplyFilter) WhereHasParentReplyWith(preds ...predicate.RetrospectiveDiscussionReply) {
	f.Where(entql.HasEdgeWith("parent_reply", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasReplies applies a predicate to check if query has an edge replies.
func (f *RetrospectiveDiscussionReplyFilter) WhereHasReplies() {
	f.Where(entql.HasEdge("replies"))
}

// WhereHasRepliesWith applies a predicate to check if query has an edge replies with a given conditions (other predicates).
func (f *RetrospectiveDiscussionReplyFilter) WhereHasRepliesWith(preds ...predicate.RetrospectiveDiscussionReply) {
	f.Where(entql.HasEdgeWith("replies", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (rrq *RetrospectiveReviewQuery) addPredicate(pred func(s *sql.Selector)) {
	rrq.predicates = append(rrq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RetrospectiveReviewQuery builder.
func (rrq *RetrospectiveReviewQuery) Filter() *RetrospectiveReviewFilter {
	return &RetrospectiveReviewFilter{config: rrq.config, predicateAdder: rrq}
}

// addPredicate implements the predicateAdder interface.
func (m *RetrospectiveReviewMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RetrospectiveReviewMutation builder.
func (m *RetrospectiveReviewMutation) Filter() *RetrospectiveReviewFilter {
	return &RetrospectiveReviewFilter{config: m.config, predicateAdder: m}
}

// RetrospectiveReviewFilter provides a generic filtering capability at runtime for RetrospectiveReviewQuery.
type RetrospectiveReviewFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RetrospectiveReviewFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[43].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *RetrospectiveReviewFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(retrospectivereview.FieldID))
}

// WhereRetrospectiveID applies the entql [16]byte predicate on the retrospective_id field.
func (f *RetrospectiveReviewFilter) WhereRetrospectiveID(p entql.ValueP) {
	f.Where(p.Field(retrospectivereview.FieldRetrospectiveID))
}

// WhereRequesterID applies the entql [16]byte predicate on the requester_id field.
func (f *RetrospectiveReviewFilter) WhereRequesterID(p entql.ValueP) {
	f.Where(p.Field(retrospectivereview.FieldRequesterID))
}

// WhereReviewerID applies the entql [16]byte predicate on the reviewer_id field.
func (f *RetrospectiveReviewFilter) WhereReviewerID(p entql.ValueP) {
	f.Where(p.Field(retrospectivereview.FieldReviewerID))
}

// WhereState applies the entql string predicate on the state field.
func (f *RetrospectiveReviewFilter) WhereState(p entql.StringP) {
	f.Where(p.Field(retrospectivereview.FieldState))
}

// WhereHasRetrospective applies a predicate to check if query has an edge retrospective.
func (f *RetrospectiveReviewFilter) WhereHasRetrospective() {
	f.Where(entql.HasEdge("retrospective"))
}

// WhereHasRetrospectiveWith applies a predicate to check if query has an edge retrospective with a given conditions (other predicates).
func (f *RetrospectiveReviewFilter) WhereHasRetrospectiveWith(preds ...predicate.Retrospective) {
	f.Where(entql.HasEdgeWith("retrospective", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRequester applies a predicate to check if query has an edge requester.
func (f *RetrospectiveReviewFilter) WhereHasRequester() {
	f.Where(entql.HasEdge("requester"))
}

// WhereHasRequesterWith applies a predicate to check if query has an edge requester with a given conditions (other predicates).
func (f *RetrospectiveReviewFilter) WhereHasRequesterWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("requester", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasReviewer applies a predicate to check if query has an edge reviewer.
func (f *RetrospectiveReviewFilter) WhereHasReviewer() {
	f.Where(entql.HasEdge("reviewer"))
}

// WhereHasReviewerWith applies a predicate to check if query has an edge reviewer with a given conditions (other predicates).
func (f *RetrospectiveReviewFilter) WhereHasReviewerWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("reviewer", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDiscussion applies a predicate to check if query has an edge discussion.
func (f *RetrospectiveReviewFilter) WhereHasDiscussion() {
	f.Where(entql.HasEdge("discussion"))
}

// WhereHasDiscussionWith applies a predicate to check if query has an edge discussion with a given conditions (other predicates).
func (f *RetrospectiveReviewFilter) WhereHasDiscussionWith(preds ...predicate.RetrospectiveDiscussion) {
	f.Where(entql.HasEdgeWith("discussion", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (saq *SystemAnalysisQuery) addPredicate(pred func(s *sql.Selector)) {
	saq.predicates = append(saq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SystemAnalysisQuery builder.
func (saq *SystemAnalysisQuery) Filter() *SystemAnalysisFilter {
	return &SystemAnalysisFilter{config: saq.config, predicateAdder: saq}
}

// addPredicate implements the predicateAdder interface.
func (m *SystemAnalysisMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SystemAnalysisMutation builder.
func (m *SystemAnalysisMutation) Filter() *SystemAnalysisFilter {
	return &SystemAnalysisFilter{config: m.config, predicateAdder: m}
}

// SystemAnalysisFilter provides a generic filtering capability at runtime for SystemAnalysisQuery.
type SystemAnalysisFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SystemAnalysisFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[44].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *SystemAnalysisFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(systemanalysis.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *SystemAnalysisFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(systemanalysis.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *SystemAnalysisFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(systemanalysis.FieldUpdatedAt))
}

// WhereHasRetrospective applies a predicate to check if query has an edge retrospective.
func (f *SystemAnalysisFilter) WhereHasRetrospective() {
	f.Where(entql.HasEdge("retrospective"))
}

// WhereHasRetrospectiveWith applies a predicate to check if query has an edge retrospective with a given conditions (other predicates).
func (f *SystemAnalysisFilter) WhereHasRetrospectiveWith(preds ...predicate.Retrospective) {
	f.Where(entql.HasEdgeWith("retrospective", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasComponents applies a predicate to check if query has an edge components.
func (f *SystemAnalysisFilter) WhereHasComponents() {
	f.Where(entql.HasEdge("components"))
}

// WhereHasComponentsWith applies a predicate to check if query has an edge components with a given conditions (other predicates).
func (f *SystemAnalysisFilter) WhereHasComponentsWith(preds ...predicate.SystemComponent) {
	f.Where(entql.HasEdgeWith("components", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRelationships applies a predicate to check if query has an edge relationships.
func (f *SystemAnalysisFilter) WhereHasRelationships() {
	f.Where(entql.HasEdge("relationships"))
}

// WhereHasRelationshipsWith applies a predicate to check if query has an edge relationships with a given conditions (other predicates).
func (f *SystemAnalysisFilter) WhereHasRelationshipsWith(preds ...predicate.SystemAnalysisRelationship) {
	f.Where(entql.HasEdgeWith("relationships", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAnalysisComponents applies a predicate to check if query has an edge analysis_components.
func (f *SystemAnalysisFilter) WhereHasAnalysisComponents() {
	f.Where(entql.HasEdge("analysis_components"))
}

// WhereHasAnalysisComponentsWith applies a predicate to check if query has an edge analysis_components with a given conditions (other predicates).
func (f *SystemAnalysisFilter) WhereHasAnalysisComponentsWith(preds ...predicate.SystemAnalysisComponent) {
	f.Where(entql.HasEdgeWith("analysis_components", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (sacq *SystemAnalysisComponentQuery) addPredicate(pred func(s *sql.Selector)) {
	sacq.predicates = append(sacq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SystemAnalysisComponentQuery builder.
func (sacq *SystemAnalysisComponentQuery) Filter() *SystemAnalysisComponentFilter {
	return &SystemAnalysisComponentFilter{config: sacq.config, predicateAdder: sacq}
}

// addPredicate implements the predicateAdder interface.
func (m *SystemAnalysisComponentMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SystemAnalysisComponentMutation builder.
func (m *SystemAnalysisComponentMutation) Filter() *SystemAnalysisComponentFilter {
	return &SystemAnalysisComponentFilter{config: m.config, predicateAdder: m}
}

// SystemAnalysisComponentFilter provides a generic filtering capability at runtime for SystemAnalysisComponentQuery.
type SystemAnalysisComponentFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SystemAnalysisComponentFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[45].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *SystemAnalysisComponentFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(systemanalysiscomponent.FieldID))
}

// WhereAnalysisID applies the entql [16]byte predicate on the analysis_id field.
func (f *SystemAnalysisComponentFilter) WhereAnalysisID(p entql.ValueP) {
	f.Where(p.Field(systemanalysiscomponent.FieldAnalysisID))
}

// WhereComponentID applies the entql [16]byte predicate on the component_id field.
func (f *SystemAnalysisComponentFilter) WhereComponentID(p entql.ValueP) {
	f.Where(p.Field(systemanalysiscomponent.FieldComponentID))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *SystemAnalysisComponentFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(systemanalysiscomponent.FieldDescription))
}

// WherePosX applies the entql float64 predicate on the pos_x field.
func (f *SystemAnalysisComponentFilter) WherePosX(p entql.Float64P) {
	f.Where(p.Field(systemanalysiscomponent.FieldPosX))
}

// WherePosY applies the entql float64 predicate on the pos_y field.
func (f *SystemAnalysisComponentFilter) WherePosY(p entql.Float64P) {
	f.Where(p.Field(systemanalysiscomponent.FieldPosY))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *SystemAnalysisComponentFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(systemanalysiscomponent.FieldCreatedAt))
}

// WhereHasAnalysis applies a predicate to check if query has an edge analysis.
func (f *SystemAnalysisComponentFilter) WhereHasAnalysis() {
	f.Where(entql.HasEdge("analysis"))
}

// WhereHasAnalysisWith applies a predicate to check if query has an edge analysis with a given conditions (other predicates).
func (f *SystemAnalysisComponentFilter) WhereHasAnalysisWith(preds ...predicate.SystemAnalysis) {
	f.Where(entql.HasEdgeWith("analysis", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasComponent applies a predicate to check if query has an edge component.
func (f *SystemAnalysisComponentFilter) WhereHasComponent() {
	f.Where(entql.HasEdge("component"))
}

// WhereHasComponentWith applies a predicate to check if query has an edge component with a given conditions (other predicates).
func (f *SystemAnalysisComponentFilter) WhereHasComponentWith(preds ...predicate.SystemComponent) {
	f.Where(entql.HasEdgeWith("component", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (sarq *SystemAnalysisRelationshipQuery) addPredicate(pred func(s *sql.Selector)) {
	sarq.predicates = append(sarq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SystemAnalysisRelationshipQuery builder.
func (sarq *SystemAnalysisRelationshipQuery) Filter() *SystemAnalysisRelationshipFilter {
	return &SystemAnalysisRelationshipFilter{config: sarq.config, predicateAdder: sarq}
}

// addPredicate implements the predicateAdder interface.
func (m *SystemAnalysisRelationshipMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SystemAnalysisRelationshipMutation builder.
func (m *SystemAnalysisRelationshipMutation) Filter() *SystemAnalysisRelationshipFilter {
	return &SystemAnalysisRelationshipFilter{config: m.config, predicateAdder: m}
}

// SystemAnalysisRelationshipFilter provides a generic filtering capability at runtime for SystemAnalysisRelationshipQuery.
type SystemAnalysisRelationshipFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SystemAnalysisRelationshipFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[46].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *SystemAnalysisRelationshipFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(systemanalysisrelationship.FieldID))
}

// WhereAnalysisID applies the entql [16]byte predicate on the analysis_id field.
func (f *SystemAnalysisRelationshipFilter) WhereAnalysisID(p entql.ValueP) {
	f.Where(p.Field(systemanalysisrelationship.FieldAnalysisID))
}

// WhereComponentRelationshipID applies the entql [16]byte predicate on the component_relationship_id field.
func (f *SystemAnalysisRelationshipFilter) WhereComponentRelationshipID(p entql.ValueP) {
	f.Where(p.Field(systemanalysisrelationship.FieldComponentRelationshipID))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *SystemAnalysisRelationshipFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(systemanalysisrelationship.FieldDescription))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *SystemAnalysisRelationshipFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(systemanalysisrelationship.FieldCreatedAt))
}

// WhereHasSystemAnalysis applies a predicate to check if query has an edge system_analysis.
func (f *SystemAnalysisRelationshipFilter) WhereHasSystemAnalysis() {
	f.Where(entql.HasEdge("system_analysis"))
}

// WhereHasSystemAnalysisWith applies a predicate to check if query has an edge system_analysis with a given conditions (other predicates).
func (f *SystemAnalysisRelationshipFilter) WhereHasSystemAnalysisWith(preds ...predicate.SystemAnalysis) {
	f.Where(entql.HasEdgeWith("system_analysis", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasComponentRelationship applies a predicate to check if query has an edge component_relationship.
func (f *SystemAnalysisRelationshipFilter) WhereHasComponentRelationship() {
	f.Where(entql.HasEdge("component_relationship"))
}

// WhereHasComponentRelationshipWith applies a predicate to check if query has an edge component_relationship with a given conditions (other predicates).
func (f *SystemAnalysisRelationshipFilter) WhereHasComponentRelationshipWith(preds ...predicate.SystemComponentRelationship) {
	f.Where(entql.HasEdgeWith("component_relationship", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasControls applies a predicate to check if query has an edge controls.
func (f *SystemAnalysisRelationshipFilter) WhereHasControls() {
	f.Where(entql.HasEdge("controls"))
}

// WhereHasControlsWith applies a predicate to check if query has an edge controls with a given conditions (other predicates).
func (f *SystemAnalysisRelationshipFilter) WhereHasControlsWith(preds ...predicate.SystemComponentControl) {
	f.Where(entql.HasEdgeWith("controls", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSignals applies a predicate to check if query has an edge signals.
func (f *SystemAnalysisRelationshipFilter) WhereHasSignals() {
	f.Where(entql.HasEdge("signals"))
}

// WhereHasSignalsWith applies a predicate to check if query has an edge signals with a given conditions (other predicates).
func (f *SystemAnalysisRelationshipFilter) WhereHasSignalsWith(preds ...predicate.SystemComponentSignal) {
	f.Where(entql.HasEdgeWith("signals", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasControlActions applies a predicate to check if query has an edge control_actions.
func (f *SystemAnalysisRelationshipFilter) WhereHasControlActions() {
	f.Where(entql.HasEdge("control_actions"))
}

// WhereHasControlActionsWith applies a predicate to check if query has an edge control_actions with a given conditions (other predicates).
func (f *SystemAnalysisRelationshipFilter) WhereHasControlActionsWith(preds ...predicate.SystemRelationshipControlAction) {
	f.Where(entql.HasEdgeWith("control_actions", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFeedbackSignals applies a predicate to check if query has an edge feedback_signals.
func (f *SystemAnalysisRelationshipFilter) WhereHasFeedbackSignals() {
	f.Where(entql.HasEdge("feedback_signals"))
}

// WhereHasFeedbackSignalsWith applies a predicate to check if query has an edge feedback_signals with a given conditions (other predicates).
func (f *SystemAnalysisRelationshipFilter) WhereHasFeedbackSignalsWith(preds ...predicate.SystemRelationshipFeedbackSignal) {
	f.Where(entql.HasEdgeWith("feedback_signals", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (scq *SystemComponentQuery) addPredicate(pred func(s *sql.Selector)) {
	scq.predicates = append(scq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SystemComponentQuery builder.
func (scq *SystemComponentQuery) Filter() *SystemComponentFilter {
	return &SystemComponentFilter{config: scq.config, predicateAdder: scq}
}

// addPredicate implements the predicateAdder interface.
func (m *SystemComponentMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SystemComponentMutation builder.
func (m *SystemComponentMutation) Filter() *SystemComponentFilter {
	return &SystemComponentFilter{config: m.config, predicateAdder: m}
}

// SystemComponentFilter provides a generic filtering capability at runtime for SystemComponentQuery.
type SystemComponentFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SystemComponentFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[47].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *SystemComponentFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(systemcomponent.FieldID))
}

// WhereName applies the entql string predicate on the name field.
func (f *SystemComponentFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(systemcomponent.FieldName))
}

// WhereProviderID applies the entql string predicate on the provider_id field.
func (f *SystemComponentFilter) WhereProviderID(p entql.StringP) {
	f.Where(p.Field(systemcomponent.FieldProviderID))
}

// WhereKindID applies the entql [16]byte predicate on the kind_id field.
func (f *SystemComponentFilter) WhereKindID(p entql.ValueP) {
	f.Where(p.Field(systemcomponent.FieldKindID))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *SystemComponentFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(systemcomponent.FieldDescription))
}

// WhereProperties applies the entql json.RawMessage predicate on the properties field.
func (f *SystemComponentFilter) WhereProperties(p entql.BytesP) {
	f.Where(p.Field(systemcomponent.FieldProperties))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *SystemComponentFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(systemcomponent.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *SystemComponentFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(systemcomponent.FieldUpdatedAt))
}

// WhereHasKind applies a predicate to check if query has an edge kind.
func (f *SystemComponentFilter) WhereHasKind() {
	f.Where(entql.HasEdge("kind"))
}

// WhereHasKindWith applies a predicate to check if query has an edge kind with a given conditions (other predicates).
func (f *SystemComponentFilter) WhereHasKindWith(preds ...predicate.SystemComponentKind) {
	f.Where(entql.HasEdgeWith("kind", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRelated applies a predicate to check if query has an edge related.
func (f *SystemComponentFilter) WhereHasRelated() {
	f.Where(entql.HasEdge("related"))
}

// WhereHasRelatedWith applies a predicate to check if query has an edge related with a given conditions (other predicates).
func (f *SystemComponentFilter) WhereHasRelatedWith(preds ...predicate.SystemComponent) {
	f.Where(entql.HasEdgeWith("related", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSystemAnalyses applies a predicate to check if query has an edge system_analyses.
func (f *SystemComponentFilter) WhereHasSystemAnalyses() {
	f.Where(entql.HasEdge("system_analyses"))
}

// WhereHasSystemAnalysesWith applies a predicate to check if query has an edge system_analyses with a given conditions (other predicates).
func (f *SystemComponentFilter) WhereHasSystemAnalysesWith(preds ...predicate.SystemAnalysis) {
	f.Where(entql.HasEdgeWith("system_analyses", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEvents applies a predicate to check if query has an edge events.
func (f *SystemComponentFilter) WhereHasEvents() {
	f.Where(entql.HasEdge("events"))
}

// WhereHasEventsWith applies a predicate to check if query has an edge events with a given conditions (other predicates).
func (f *SystemComponentFilter) WhereHasEventsWith(preds ...predicate.IncidentEvent) {
	f.Where(entql.HasEdgeWith("events", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasConstraints applies a predicate to check if query has an edge constraints.
func (f *SystemComponentFilter) WhereHasConstraints() {
	f.Where(entql.HasEdge("constraints"))
}

// WhereHasConstraintsWith applies a predicate to check if query has an edge constraints with a given conditions (other predicates).
func (f *SystemComponentFilter) WhereHasConstraintsWith(preds ...predicate.SystemComponentConstraint) {
	f.Where(entql.HasEdgeWith("constraints", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasControls applies a predicate to check if query has an edge controls.
func (f *SystemComponentFilter) WhereHasControls() {
	f.Where(entql.HasEdge("controls"))
}

// WhereHasControlsWith applies a predicate to check if query has an edge controls with a given conditions (other predicates).
func (f *SystemComponentFilter) WhereHasControlsWith(preds ...predicate.SystemComponentControl) {
	f.Where(entql.HasEdgeWith("controls", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSignals applies a predicate to check if query has an edge signals.
func (f *SystemComponentFilter) WhereHasSignals() {
	f.Where(entql.HasEdge("signals"))
}

// WhereHasSignalsWith applies a predicate to check if query has an edge signals with a given conditions (other predicates).
func (f *SystemComponentFilter) WhereHasSignalsWith(preds ...predicate.SystemComponentSignal) {
	f.Where(entql.HasEdgeWith("signals", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasHazards applies a predicate to check if query has an edge hazards.
func (f *SystemComponentFilter) WhereHasHazards() {
	f.Where(entql.HasEdge("hazards"))
}

// WhereHasHazardsWith applies a predicate to check if query has an edge hazards with a given conditions (other predicates).
func (f *SystemComponentFilter) WhereHasHazardsWith(preds ...predicate.SystemHazard) {
	f.Where(entql.HasEdgeWith("hazards", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasComponentRelationships applies a predicate to check if query has an edge component_relationships.
func (f *SystemComponentFilter) WhereHasComponentRelationships() {
	f.Where(entql.HasEdge("component_relationships"))
}

// WhereHasComponentRelationshipsWith applies a predicate to check if query has an edge component_relationships with a given conditions (other predicates).
func (f *SystemComponentFilter) WhereHasComponentRelationshipsWith(preds ...predicate.SystemComponentRelationship) {
	f.Where(entql.HasEdgeWith("component_relationships", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSystemAnalysisComponents applies a predicate to check if query has an edge system_analysis_components.
func (f *SystemComponentFilter) WhereHasSystemAnalysisComponents() {
	f.Where(entql.HasEdge("system_analysis_components"))
}

// WhereHasSystemAnalysisComponentsWith applies a predicate to check if query has an edge system_analysis_components with a given conditions (other predicates).
func (f *SystemComponentFilter) WhereHasSystemAnalysisComponentsWith(preds ...predicate.SystemAnalysisComponent) {
	f.Where(entql.HasEdgeWith("system_analysis_components", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEventComponents applies a predicate to check if query has an edge event_components.
func (f *SystemComponentFilter) WhereHasEventComponents() {
	f.Where(entql.HasEdge("event_components"))
}

// WhereHasEventComponentsWith applies a predicate to check if query has an edge event_components with a given conditions (other predicates).
func (f *SystemComponentFilter) WhereHasEventComponentsWith(preds ...predicate.IncidentEventSystemComponent) {
	f.Where(entql.HasEdgeWith("event_components", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (sccq *SystemComponentConstraintQuery) addPredicate(pred func(s *sql.Selector)) {
	sccq.predicates = append(sccq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SystemComponentConstraintQuery builder.
func (sccq *SystemComponentConstraintQuery) Filter() *SystemComponentConstraintFilter {
	return &SystemComponentConstraintFilter{config: sccq.config, predicateAdder: sccq}
}

// addPredicate implements the predicateAdder interface.
func (m *SystemComponentConstraintMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SystemComponentConstraintMutation builder.
func (m *SystemComponentConstraintMutation) Filter() *SystemComponentConstraintFilter {
	return &SystemComponentConstraintFilter{config: m.config, predicateAdder: m}
}

// SystemComponentConstraintFilter provides a generic filtering capability at runtime for SystemComponentConstraintQuery.
type SystemComponentConstraintFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SystemComponentConstraintFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[48].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *SystemComponentConstraintFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(systemcomponentconstraint.FieldID))
}

// WhereComponentID applies the entql [16]byte predicate on the component_id field.
func (f *SystemComponentConstraintFilter) WhereComponentID(p entql.ValueP) {
	f.Where(p.Field(systemcomponentconstraint.FieldComponentID))
}

// WhereLabel applies the entql string predicate on the label field.
func (f *SystemComponentConstraintFilter) WhereLabel(p entql.StringP) {
	f.Where(p.Field(systemcomponentconstraint.FieldLabel))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *SystemComponentConstraintFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(systemcomponentconstraint.FieldDescription))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *SystemComponentConstraintFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(systemcomponentconstraint.FieldCreatedAt))
}

// WhereHasComponent applies a predicate to check if query has an edge component.
func (f *SystemComponentConstraintFilter) WhereHasComponent() {
	f.Where(entql.HasEdge("component"))
}

// WhereHasComponentWith applies a predicate to check if query has an edge component with a given conditions (other predicates).
func (f *SystemComponentConstraintFilter) WhereHasComponentWith(preds ...predicate.SystemComponent) {
	f.Where(entql.HasEdgeWith("component", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasHazards applies a predicate to check if query has an edge hazards.
func (f *SystemComponentConstraintFilter) WhereHasHazards() {
	f.Where(entql.HasEdge("hazards"))
}

// WhereHasHazardsWith applies a predicate to check if query has an edge hazards with a given conditions (other predicates).
func (f *SystemComponentConstraintFilter) WhereHasHazardsWith(preds ...predicate.SystemHazard) {
	f.Where(entql.HasEdgeWith("hazards", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (sccq *SystemComponentControlQuery) addPredicate(pred func(s *sql.Selector)) {
	sccq.predicates = append(sccq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SystemComponentControlQuery builder.
func (sccq *SystemComponentControlQuery) Filter() *SystemComponentControlFilter {
	return &SystemComponentControlFilter{config: sccq.config, predicateAdder: sccq}
}

// addPredicate implements the predicateAdder interface.
func (m *SystemComponentControlMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SystemComponentControlMutation builder.
func (m *SystemComponentControlMutation) Filter() *SystemComponentControlFilter {
	return &SystemComponentControlFilter{config: m.config, predicateAdder: m}
}

// SystemComponentControlFilter provides a generic filtering capability at runtime for SystemComponentControlQuery.
type SystemComponentControlFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SystemComponentControlFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[49].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *SystemComponentControlFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(systemcomponentcontrol.FieldID))
}

// WhereComponentID applies the entql [16]byte predicate on the component_id field.
func (f *SystemComponentControlFilter) WhereComponentID(p entql.ValueP) {
	f.Where(p.Field(systemcomponentcontrol.FieldComponentID))
}

// WhereLabel applies the entql string predicate on the label field.
func (f *SystemComponentControlFilter) WhereLabel(p entql.StringP) {
	f.Where(p.Field(systemcomponentcontrol.FieldLabel))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *SystemComponentControlFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(systemcomponentcontrol.FieldDescription))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *SystemComponentControlFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(systemcomponentcontrol.FieldCreatedAt))
}

// WhereHasComponent applies a predicate to check if query has an edge component.
func (f *SystemComponentControlFilter) WhereHasComponent() {
	f.Where(entql.HasEdge("component"))
}

// WhereHasComponentWith applies a predicate to check if query has an edge component with a given conditions (other predicates).
func (f *SystemComponentControlFilter) WhereHasComponentWith(preds ...predicate.SystemComponent) {
	f.Where(entql.HasEdgeWith("component", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRelationships applies a predicate to check if query has an edge relationships.
func (f *SystemComponentControlFilter) WhereHasRelationships() {
	f.Where(entql.HasEdge("relationships"))
}

// WhereHasRelationshipsWith applies a predicate to check if query has an edge relationships with a given conditions (other predicates).
func (f *SystemComponentControlFilter) WhereHasRelationshipsWith(preds ...predicate.SystemAnalysisRelationship) {
	f.Where(entql.HasEdgeWith("relationships", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasControlActions applies a predicate to check if query has an edge control_actions.
func (f *SystemComponentControlFilter) WhereHasControlActions() {
	f.Where(entql.HasEdge("control_actions"))
}

// WhereHasControlActionsWith applies a predicate to check if query has an edge control_actions with a given conditions (other predicates).
func (f *SystemComponentControlFilter) WhereHasControlActionsWith(preds ...predicate.SystemRelationshipControlAction) {
	f.Where(entql.HasEdgeWith("control_actions", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (sckq *SystemComponentKindQuery) addPredicate(pred func(s *sql.Selector)) {
	sckq.predicates = append(sckq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SystemComponentKindQuery builder.
func (sckq *SystemComponentKindQuery) Filter() *SystemComponentKindFilter {
	return &SystemComponentKindFilter{config: sckq.config, predicateAdder: sckq}
}

// addPredicate implements the predicateAdder interface.
func (m *SystemComponentKindMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SystemComponentKindMutation builder.
func (m *SystemComponentKindMutation) Filter() *SystemComponentKindFilter {
	return &SystemComponentKindFilter{config: m.config, predicateAdder: m}
}

// SystemComponentKindFilter provides a generic filtering capability at runtime for SystemComponentKindQuery.
type SystemComponentKindFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SystemComponentKindFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[50].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *SystemComponentKindFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(systemcomponentkind.FieldID))
}

// WhereProviderID applies the entql string predicate on the provider_id field.
func (f *SystemComponentKindFilter) WhereProviderID(p entql.StringP) {
	f.Where(p.Field(systemcomponentkind.FieldProviderID))
}

// WhereLabel applies the entql string predicate on the label field.
func (f *SystemComponentKindFilter) WhereLabel(p entql.StringP) {
	f.Where(p.Field(systemcomponentkind.FieldLabel))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *SystemComponentKindFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(systemcomponentkind.FieldDescription))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *SystemComponentKindFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(systemcomponentkind.FieldCreatedAt))
}

// WhereHasComponents applies a predicate to check if query has an edge components.
func (f *SystemComponentKindFilter) WhereHasComponents() {
	f.Where(entql.HasEdge("components"))
}

// WhereHasComponentsWith applies a predicate to check if query has an edge components with a given conditions (other predicates).
func (f *SystemComponentKindFilter) WhereHasComponentsWith(preds ...predicate.SystemComponent) {
	f.Where(entql.HasEdgeWith("components", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (scrq *SystemComponentRelationshipQuery) addPredicate(pred func(s *sql.Selector)) {
	scrq.predicates = append(scrq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SystemComponentRelationshipQuery builder.
func (scrq *SystemComponentRelationshipQuery) Filter() *SystemComponentRelationshipFilter {
	return &SystemComponentRelationshipFilter{config: scrq.config, predicateAdder: scrq}
}

// addPredicate implements the predicateAdder interface.
func (m *SystemComponentRelationshipMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SystemComponentRelationshipMutation builder.
func (m *SystemComponentRelationshipMutation) Filter() *SystemComponentRelationshipFilter {
	return &SystemComponentRelationshipFilter{config: m.config, predicateAdder: m}
}

// SystemComponentRelationshipFilter provides a generic filtering capability at runtime for SystemComponentRelationshipQuery.
type SystemComponentRelationshipFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SystemComponentRelationshipFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[51].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *SystemComponentRelationshipFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(systemcomponentrelationship.FieldID))
}

// WhereProviderID applies the entql string predicate on the provider_id field.
func (f *SystemComponentRelationshipFilter) WhereProviderID(p entql.StringP) {
	f.Where(p.Field(systemcomponentrelationship.FieldProviderID))
}

// WhereSourceID applies the entql [16]byte predicate on the source_id field.
func (f *SystemComponentRelationshipFilter) WhereSourceID(p entql.ValueP) {
	f.Where(p.Field(systemcomponentrelationship.FieldSourceID))
}

// WhereTargetID applies the entql [16]byte predicate on the target_id field.
func (f *SystemComponentRelationshipFilter) WhereTargetID(p entql.ValueP) {
	f.Where(p.Field(systemcomponentrelationship.FieldTargetID))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *SystemComponentRelationshipFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(systemcomponentrelationship.FieldDescription))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *SystemComponentRelationshipFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(systemcomponentrelationship.FieldCreatedAt))
}

// WhereHasSource applies a predicate to check if query has an edge source.
func (f *SystemComponentRelationshipFilter) WhereHasSource() {
	f.Where(entql.HasEdge("source"))
}

// WhereHasSourceWith applies a predicate to check if query has an edge source with a given conditions (other predicates).
func (f *SystemComponentRelationshipFilter) WhereHasSourceWith(preds ...predicate.SystemComponent) {
	f.Where(entql.HasEdgeWith("source", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTarget applies a predicate to check if query has an edge target.
func (f *SystemComponentRelationshipFilter) WhereHasTarget() {
	f.Where(entql.HasEdge("target"))
}

// WhereHasTargetWith applies a predicate to check if query has an edge target with a given conditions (other predicates).
func (f *SystemComponentRelationshipFilter) WhereHasTargetWith(preds ...predicate.SystemComponent) {
	f.Where(entql.HasEdgeWith("target", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSystemAnalyses applies a predicate to check if query has an edge system_analyses.
func (f *SystemComponentRelationshipFilter) WhereHasSystemAnalyses() {
	f.Where(entql.HasEdge("system_analyses"))
}

// WhereHasSystemAnalysesWith applies a predicate to check if query has an edge system_analyses with a given conditions (other predicates).
func (f *SystemComponentRelationshipFilter) WhereHasSystemAnalysesWith(preds ...predicate.SystemAnalysisRelationship) {
	f.Where(entql.HasEdgeWith("system_analyses", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasHazards applies a predicate to check if query has an edge hazards.
func (f *SystemComponentRelationshipFilter) WhereHasHazards() {
	f.Where(entql.HasEdge("hazards"))
}

// WhereHasHazardsWith applies a predicate to check if query has an edge hazards with a given conditions (other predicates).
func (f *SystemComponentRelationshipFilter) WhereHasHazardsWith(preds ...predicate.SystemHazard) {
	f.Where(entql.HasEdgeWith("hazards", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (scsq *SystemComponentSignalQuery) addPredicate(pred func(s *sql.Selector)) {
	scsq.predicates = append(scsq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SystemComponentSignalQuery builder.
func (scsq *SystemComponentSignalQuery) Filter() *SystemComponentSignalFilter {
	return &SystemComponentSignalFilter{config: scsq.config, predicateAdder: scsq}
}

// addPredicate implements the predicateAdder interface.
func (m *SystemComponentSignalMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SystemComponentSignalMutation builder.
func (m *SystemComponentSignalMutation) Filter() *SystemComponentSignalFilter {
	return &SystemComponentSignalFilter{config: m.config, predicateAdder: m}
}

// SystemComponentSignalFilter provides a generic filtering capability at runtime for SystemComponentSignalQuery.
type SystemComponentSignalFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SystemComponentSignalFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[52].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *SystemComponentSignalFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(systemcomponentsignal.FieldID))
}

// WhereComponentID applies the entql [16]byte predicate on the component_id field.
func (f *SystemComponentSignalFilter) WhereComponentID(p entql.ValueP) {
	f.Where(p.Field(systemcomponentsignal.FieldComponentID))
}

// WhereLabel applies the entql string predicate on the label field.
func (f *SystemComponentSignalFilter) WhereLabel(p entql.StringP) {
	f.Where(p.Field(systemcomponentsignal.FieldLabel))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *SystemComponentSignalFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(systemcomponentsignal.FieldDescription))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *SystemComponentSignalFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(systemcomponentsignal.FieldCreatedAt))
}

// WhereHasComponent applies a predicate to check if query has an edge component.
func (f *SystemComponentSignalFilter) WhereHasComponent() {
	f.Where(entql.HasEdge("component"))
}

// WhereHasComponentWith applies a predicate to check if query has an edge component with a given conditions (other predicates).
func (f *SystemComponentSignalFilter) WhereHasComponentWith(preds ...predicate.SystemComponent) {
	f.Where(entql.HasEdgeWith("component", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRelationships applies a predicate to check if query has an edge relationships.
func (f *SystemComponentSignalFilter) WhereHasRelationships() {
	f.Where(entql.HasEdge("relationships"))
}

// WhereHasRelationshipsWith applies a predicate to check if query has an edge relationships with a given conditions (other predicates).
func (f *SystemComponentSignalFilter) WhereHasRelationshipsWith(preds ...predicate.SystemAnalysisRelationship) {
	f.Where(entql.HasEdgeWith("relationships", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFeedbackSignals applies a predicate to check if query has an edge feedback_signals.
func (f *SystemComponentSignalFilter) WhereHasFeedbackSignals() {
	f.Where(entql.HasEdge("feedback_signals"))
}

// WhereHasFeedbackSignalsWith applies a predicate to check if query has an edge feedback_signals with a given conditions (other predicates).
func (f *SystemComponentSignalFilter) WhereHasFeedbackSignalsWith(preds ...predicate.SystemRelationshipFeedbackSignal) {
	f.Where(entql.HasEdgeWith("feedback_signals", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (shq *SystemHazardQuery) addPredicate(pred func(s *sql.Selector)) {
	shq.predicates = append(shq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SystemHazardQuery builder.
func (shq *SystemHazardQuery) Filter() *SystemHazardFilter {
	return &SystemHazardFilter{config: shq.config, predicateAdder: shq}
}

// addPredicate implements the predicateAdder interface.
func (m *SystemHazardMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SystemHazardMutation builder.
func (m *SystemHazardMutation) Filter() *SystemHazardFilter {
	return &SystemHazardFilter{config: m.config, predicateAdder: m}
}

// SystemHazardFilter provides a generic filtering capability at runtime for SystemHazardQuery.
type SystemHazardFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SystemHazardFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[53].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *SystemHazardFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(systemhazard.FieldID))
}

// WhereName applies the entql string predicate on the name field.
func (f *SystemHazardFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(systemhazard.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *SystemHazardFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(systemhazard.FieldDescription))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *SystemHazardFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(systemhazard.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *SystemHazardFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(systemhazard.FieldUpdatedAt))
}

// WhereHasComponents applies a predicate to check if query has an edge components.
func (f *SystemHazardFilter) WhereHasComponents() {
	f.Where(entql.HasEdge("components"))
}

// WhereHasComponentsWith applies a predicate to check if query has an edge components with a given conditions (other predicates).
func (f *SystemHazardFilter) WhereHasComponentsWith(preds ...predicate.SystemComponent) {
	f.Where(entql.HasEdgeWith("components", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasConstraints applies a predicate to check if query has an edge constraints.
func (f *SystemHazardFilter) WhereHasConstraints() {
	f.Where(entql.HasEdge("constraints"))
}

// WhereHasConstraintsWith applies a predicate to check if query has an edge constraints with a given conditions (other predicates).
func (f *SystemHazardFilter) WhereHasConstraintsWith(preds ...predicate.SystemComponentConstraint) {
	f.Where(entql.HasEdgeWith("constraints", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRelationships applies a predicate to check if query has an edge relationships.
func (f *SystemHazardFilter) WhereHasRelationships() {
	f.Where(entql.HasEdge("relationships"))
}

// WhereHasRelationshipsWith applies a predicate to check if query has an edge relationships with a given conditions (other predicates).
func (f *SystemHazardFilter) WhereHasRelationshipsWith(preds ...predicate.SystemComponentRelationship) {
	f.Where(entql.HasEdgeWith("relationships", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (srcaq *SystemRelationshipControlActionQuery) addPredicate(pred func(s *sql.Selector)) {
	srcaq.predicates = append(srcaq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SystemRelationshipControlActionQuery builder.
func (srcaq *SystemRelationshipControlActionQuery) Filter() *SystemRelationshipControlActionFilter {
	return &SystemRelationshipControlActionFilter{config: srcaq.config, predicateAdder: srcaq}
}

// addPredicate implements the predicateAdder interface.
func (m *SystemRelationshipControlActionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SystemRelationshipControlActionMutation builder.
func (m *SystemRelationshipControlActionMutation) Filter() *SystemRelationshipControlActionFilter {
	return &SystemRelationshipControlActionFilter{config: m.config, predicateAdder: m}
}

// SystemRelationshipControlActionFilter provides a generic filtering capability at runtime for SystemRelationshipControlActionQuery.
type SystemRelationshipControlActionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SystemRelationshipControlActionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[54].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *SystemRelationshipControlActionFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(systemrelationshipcontrolaction.FieldID))
}

// WhereRelationshipID applies the entql [16]byte predicate on the relationship_id field.
func (f *SystemRelationshipControlActionFilter) WhereRelationshipID(p entql.ValueP) {
	f.Where(p.Field(systemrelationshipcontrolaction.FieldRelationshipID))
}

// WhereControlID applies the entql [16]byte predicate on the control_id field.
func (f *SystemRelationshipControlActionFilter) WhereControlID(p entql.ValueP) {
	f.Where(p.Field(systemrelationshipcontrolaction.FieldControlID))
}

// WhereType applies the entql string predicate on the type field.
func (f *SystemRelationshipControlActionFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(systemrelationshipcontrolaction.FieldType))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *SystemRelationshipControlActionFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(systemrelationshipcontrolaction.FieldDescription))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *SystemRelationshipControlActionFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(systemrelationshipcontrolaction.FieldCreatedAt))
}

// WhereHasRelationship applies a predicate to check if query has an edge relationship.
func (f *SystemRelationshipControlActionFilter) WhereHasRelationship() {
	f.Where(entql.HasEdge("relationship"))
}

// WhereHasRelationshipWith applies a predicate to check if query has an edge relationship with a given conditions (other predicates).
func (f *SystemRelationshipControlActionFilter) WhereHasRelationshipWith(preds ...predicate.SystemAnalysisRelationship) {
	f.Where(entql.HasEdgeWith("relationship", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasControl applies a predicate to check if query has an edge control.
func (f *SystemRelationshipControlActionFilter) WhereHasControl() {
	f.Where(entql.HasEdge("control"))
}

// WhereHasControlWith applies a predicate to check if query has an edge control with a given conditions (other predicates).
func (f *SystemRelationshipControlActionFilter) WhereHasControlWith(preds ...predicate.SystemComponentControl) {
	f.Where(entql.HasEdgeWith("control", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (srfsq *SystemRelationshipFeedbackSignalQuery) addPredicate(pred func(s *sql.Selector)) {
	srfsq.predicates = append(srfsq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SystemRelationshipFeedbackSignalQuery builder.
func (srfsq *SystemRelationshipFeedbackSignalQuery) Filter() *SystemRelationshipFeedbackSignalFilter {
	return &SystemRelationshipFeedbackSignalFilter{config: srfsq.config, predicateAdder: srfsq}
}

// addPredicate implements the predicateAdder interface.
func (m *SystemRelationshipFeedbackSignalMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SystemRelationshipFeedbackSignalMutation builder.
func (m *SystemRelationshipFeedbackSignalMutation) Filter() *SystemRelationshipFeedbackSignalFilter {
	return &SystemRelationshipFeedbackSignalFilter{config: m.config, predicateAdder: m}
}

// SystemRelationshipFeedbackSignalFilter provides a generic filtering capability at runtime for SystemRelationshipFeedbackSignalQuery.
type SystemRelationshipFeedbackSignalFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SystemRelationshipFeedbackSignalFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[55].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *SystemRelationshipFeedbackSignalFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(systemrelationshipfeedbacksignal.FieldID))
}

// WhereRelationshipID applies the entql [16]byte predicate on the relationship_id field.
func (f *SystemRelationshipFeedbackSignalFilter) WhereRelationshipID(p entql.ValueP) {
	f.Where(p.Field(systemrelationshipfeedbacksignal.FieldRelationshipID))
}

// WhereSignalID applies the entql [16]byte predicate on the signal_id field.
func (f *SystemRelationshipFeedbackSignalFilter) WhereSignalID(p entql.ValueP) {
	f.Where(p.Field(systemrelationshipfeedbacksignal.FieldSignalID))
}

// WhereType applies the entql string predicate on the type field.
func (f *SystemRelationshipFeedbackSignalFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(systemrelationshipfeedbacksignal.FieldType))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *SystemRelationshipFeedbackSignalFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(systemrelationshipfeedbacksignal.FieldDescription))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *SystemRelationshipFeedbackSignalFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(systemrelationshipfeedbacksignal.FieldCreatedAt))
}

// WhereHasRelationship applies a predicate to check if query has an edge relationship.
func (f *SystemRelationshipFeedbackSignalFilter) WhereHasRelationship() {
	f.Where(entql.HasEdge("relationship"))
}

// WhereHasRelationshipWith applies a predicate to check if query has an edge relationship with a given conditions (other predicates).
func (f *SystemRelationshipFeedbackSignalFilter) WhereHasRelationshipWith(preds ...predicate.SystemAnalysisRelationship) {
	f.Where(entql.HasEdgeWith("relationship", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSignal applies a predicate to check if query has an edge signal.
func (f *SystemRelationshipFeedbackSignalFilter) WhereHasSignal() {
	f.Where(entql.HasEdge("signal"))
}

// WhereHasSignalWith applies a predicate to check if query has an edge signal with a given conditions (other predicates).
func (f *SystemRelationshipFeedbackSignalFilter) WhereHasSignalWith(preds ...predicate.SystemComponentSignal) {
	f.Where(entql.HasEdgeWith("signal", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (tq *TaskQuery) addPredicate(pred func(s *sql.Selector)) {
	tq.predicates = append(tq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TaskQuery builder.
func (tq *TaskQuery) Filter() *TaskFilter {
	return &TaskFilter{config: tq.config, predicateAdder: tq}
}

// addPredicate implements the predicateAdder interface.
func (m *TaskMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TaskMutation builder.
func (m *TaskMutation) Filter() *TaskFilter {
	return &TaskFilter{config: m.config, predicateAdder: m}
}

// TaskFilter provides a generic filtering capability at runtime for TaskQuery.
type TaskFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TaskFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[56].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *TaskFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(task.FieldID))
}

// WhereType applies the entql string predicate on the type field.
func (f *TaskFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(task.FieldType))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *TaskFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(task.FieldTitle))
}

// WhereIncidentID applies the entql [16]byte predicate on the incident_id field.
func (f *TaskFilter) WhereIncidentID(p entql.ValueP) {
	f.Where(p.Field(task.FieldIncidentID))
}

// WhereAssigneeID applies the entql [16]byte predicate on the assignee_id field.
func (f *TaskFilter) WhereAssigneeID(p entql.ValueP) {
	f.Where(p.Field(task.FieldAssigneeID))
}

// WhereCreatorID applies the entql [16]byte predicate on the creator_id field.
func (f *TaskFilter) WhereCreatorID(p entql.ValueP) {
	f.Where(p.Field(task.FieldCreatorID))
}

// WhereHasTickets applies a predicate to check if query has an edge tickets.
func (f *TaskFilter) WhereHasTickets() {
	f.Where(entql.HasEdge("tickets"))
}

// WhereHasTicketsWith applies a predicate to check if query has an edge tickets with a given conditions (other predicates).
func (f *TaskFilter) WhereHasTicketsWith(preds ...predicate.Ticket) {
	f.Where(entql.HasEdgeWith("tickets", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasIncident applies a predicate to check if query has an edge incident.
func (f *TaskFilter) WhereHasIncident() {
	f.Where(entql.HasEdge("incident"))
}

// WhereHasIncidentWith applies a predicate to check if query has an edge incident with a given conditions (other predicates).
func (f *TaskFilter) WhereHasIncidentWith(preds ...predicate.Incident) {
	f.Where(entql.HasEdgeWith("incident", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAssignee applies a predicate to check if query has an edge assignee.
func (f *TaskFilter) WhereHasAssignee() {
	f.Where(entql.HasEdge("assignee"))
}

// WhereHasAssigneeWith applies a predicate to check if query has an edge assignee with a given conditions (other predicates).
func (f *TaskFilter) WhereHasAssigneeWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("assignee", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCreator applies a predicate to check if query has an edge creator.
func (f *TaskFilter) WhereHasCreator() {
	f.Where(entql.HasEdge("creator"))
}

// WhereHasCreatorWith applies a predicate to check if query has an edge creator with a given conditions (other predicates).
func (f *TaskFilter) WhereHasCreatorWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (tq *TeamQuery) addPredicate(pred func(s *sql.Selector)) {
	tq.predicates = append(tq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TeamQuery builder.
func (tq *TeamQuery) Filter() *TeamFilter {
	return &TeamFilter{config: tq.config, predicateAdder: tq}
}

// addPredicate implements the predicateAdder interface.
func (m *TeamMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TeamMutation builder.
func (m *TeamMutation) Filter() *TeamFilter {
	return &TeamFilter{config: m.config, predicateAdder: m}
}

// TeamFilter provides a generic filtering capability at runtime for TeamQuery.
type TeamFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TeamFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[57].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *TeamFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(team.FieldID))
}

// WhereSlug applies the entql string predicate on the slug field.
func (f *TeamFilter) WhereSlug(p entql.StringP) {
	f.Where(p.Field(team.FieldSlug))
}

// WhereProviderID applies the entql string predicate on the provider_id field.
func (f *TeamFilter) WhereProviderID(p entql.StringP) {
	f.Where(p.Field(team.FieldProviderID))
}

// WhereName applies the entql string predicate on the name field.
func (f *TeamFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(team.FieldName))
}

// WhereChatChannelID applies the entql string predicate on the chat_channel_id field.
func (f *TeamFilter) WhereChatChannelID(p entql.StringP) {
	f.Where(p.Field(team.FieldChatChannelID))
}

// WhereTimezone applies the entql string predicate on the timezone field.
func (f *TeamFilter) WhereTimezone(p entql.StringP) {
	f.Where(p.Field(team.FieldTimezone))
}

// WhereHasUsers applies a predicate to check if query has an edge users.
func (f *TeamFilter) WhereHasUsers() {
	f.Where(entql.HasEdge("users"))
}

// WhereHasUsersWith applies a predicate to check if query has an edge users with a given conditions (other predicates).
func (f *TeamFilter) WhereHasUsersWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("users", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOncallRosters applies a predicate to check if query has an edge oncall_rosters.
func (f *TeamFilter) WhereHasOncallRosters() {
	f.Where(entql.HasEdge("oncall_rosters"))
}

// WhereHasOncallRostersWith applies a predicate to check if query has an edge oncall_rosters with a given conditions (other predicates).
func (f *TeamFilter) WhereHasOncallRostersWith(preds ...predicate.OncallRoster) {
	f.Where(entql.HasEdgeWith("oncall_rosters", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasIncidentAssignments applies a predicate to check if query has an edge incident_assignments.
func (f *TeamFilter) WhereHasIncidentAssignments() {
	f.Where(entql.HasEdge("incident_assignments"))
}

// WhereHasIncidentAssignmentsWith applies a predicate to check if query has an edge incident_assignments with a given conditions (other predicates).
func (f *TeamFilter) WhereHasIncidentAssignmentsWith(preds ...predicate.IncidentTeamAssignment) {
	f.Where(entql.HasEdgeWith("incident_assignments", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasScheduledMeetings applies a predicate to check if query has an edge scheduled_meetings.
func (f *TeamFilter) WhereHasScheduledMeetings() {
	f.Where(entql.HasEdge("scheduled_meetings"))
}

// WhereHasScheduledMeetingsWith applies a predicate to check if query has an edge scheduled_meetings with a given conditions (other predicates).
func (f *TeamFilter) WhereHasScheduledMeetingsWith(preds ...predicate.MeetingSchedule) {
	f.Where(entql.HasEdgeWith("scheduled_meetings", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (tq *TenantQuery) addPredicate(pred func(s *sql.Selector)) {
	tq.predicates = append(tq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TenantQuery builder.
func (tq *TenantQuery) Filter() *TenantFilter {
	return &TenantFilter{config: tq.config, predicateAdder: tq}
}

// addPredicate implements the predicateAdder interface.
func (m *TenantMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TenantMutation builder.
func (m *TenantMutation) Filter() *TenantFilter {
	return &TenantFilter{config: m.config, predicateAdder: m}
}

// TenantFilter provides a generic filtering capability at runtime for TenantQuery.
type TenantFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TenantFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[58].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *TenantFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(tenant.FieldID))
}

// WhereName applies the entql string predicate on the name field.
func (f *TenantFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(tenant.FieldName))
}

// WherePublicID applies the entql [16]byte predicate on the public_id field.
func (f *TenantFilter) WherePublicID(p entql.ValueP) {
	f.Where(p.Field(tenant.FieldPublicID))
}

// addPredicate implements the predicateAdder interface.
func (tq *TicketQuery) addPredicate(pred func(s *sql.Selector)) {
	tq.predicates = append(tq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TicketQuery builder.
func (tq *TicketQuery) Filter() *TicketFilter {
	return &TicketFilter{config: tq.config, predicateAdder: tq}
}

// addPredicate implements the predicateAdder interface.
func (m *TicketMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TicketMutation builder.
func (m *TicketMutation) Filter() *TicketFilter {
	return &TicketFilter{config: m.config, predicateAdder: m}
}

// TicketFilter provides a generic filtering capability at runtime for TicketQuery.
type TicketFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TicketFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[59].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *TicketFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(ticket.FieldID))
}

// WhereProviderID applies the entql string predicate on the provider_id field.
func (f *TicketFilter) WhereProviderID(p entql.StringP) {
	f.Where(p.Field(ticket.FieldProviderID))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *TicketFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(ticket.FieldTitle))
}

// WhereHasTasks applies a predicate to check if query has an edge tasks.
func (f *TicketFilter) WhereHasTasks() {
	f.Where(entql.HasEdge("tasks"))
}

// WhereHasTasksWith applies a predicate to check if query has an edge tasks with a given conditions (other predicates).
func (f *TicketFilter) WhereHasTasksWith(preds ...predicate.Task) {
	f.Where(entql.HasEdgeWith("tasks", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (uq *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	uq.predicates = append(uq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (uq *UserQuery) Filter() *UserFilter {
	return &UserFilter{config: uq.config, predicateAdder: uq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{config: m.config, predicateAdder: m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[60].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *UserFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(user.FieldID))
}

// WhereTenantID applies the entql int predicate on the tenant_id field.
func (f *UserFilter) WhereTenantID(p entql.IntP) {
	f.Where(p.Field(user.FieldTenantID))
}

// WhereName applies the entql string predicate on the name field.
func (f *UserFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(user.FieldName))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *UserFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(user.FieldEmail))
}

// WhereChatID applies the entql string predicate on the chat_id field.
func (f *UserFilter) WhereChatID(p entql.StringP) {
	f.Where(p.Field(user.FieldChatID))
}

// WhereTimezone applies the entql string predicate on the timezone field.
func (f *UserFilter) WhereTimezone(p entql.StringP) {
	f.Where(p.Field(user.FieldTimezone))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *UserFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *UserFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTeams applies a predicate to check if query has an edge teams.
func (f *UserFilter) WhereHasTeams() {
	f.Where(entql.HasEdge("teams"))
}

// WhereHasTeamsWith applies a predicate to check if query has an edge teams with a given conditions (other predicates).
func (f *UserFilter) WhereHasTeamsWith(preds ...predicate.Team) {
	f.Where(entql.HasEdgeWith("teams", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasWatchedOncallRosters applies a predicate to check if query has an edge watched_oncall_rosters.
func (f *UserFilter) WhereHasWatchedOncallRosters() {
	f.Where(entql.HasEdge("watched_oncall_rosters"))
}

// WhereHasWatchedOncallRostersWith applies a predicate to check if query has an edge watched_oncall_rosters with a given conditions (other predicates).
func (f *UserFilter) WhereHasWatchedOncallRostersWith(preds ...predicate.OncallRoster) {
	f.Where(entql.HasEdgeWith("watched_oncall_rosters", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOncallSchedules applies a predicate to check if query has an edge oncall_schedules.
func (f *UserFilter) WhereHasOncallSchedules() {
	f.Where(entql.HasEdge("oncall_schedules"))
}

// WhereHasOncallSchedulesWith applies a predicate to check if query has an edge oncall_schedules with a given conditions (other predicates).
func (f *UserFilter) WhereHasOncallSchedulesWith(preds ...predicate.OncallScheduleParticipant) {
	f.Where(entql.HasEdgeWith("oncall_schedules", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOncallShifts applies a predicate to check if query has an edge oncall_shifts.
func (f *UserFilter) WhereHasOncallShifts() {
	f.Where(entql.HasEdge("oncall_shifts"))
}

// WhereHasOncallShiftsWith applies a predicate to check if query has an edge oncall_shifts with a given conditions (other predicates).
func (f *UserFilter) WhereHasOncallShiftsWith(preds ...predicate.OncallUserShift) {
	f.Where(entql.HasEdgeWith("oncall_shifts", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOncallAnnotations applies a predicate to check if query has an edge oncall_annotations.
func (f *UserFilter) WhereHasOncallAnnotations() {
	f.Where(entql.HasEdge("oncall_annotations"))
}

// WhereHasOncallAnnotationsWith applies a predicate to check if query has an edge oncall_annotations with a given conditions (other predicates).
func (f *UserFilter) WhereHasOncallAnnotationsWith(preds ...predicate.OncallAnnotation) {
	f.Where(entql.HasEdgeWith("oncall_annotations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasIncidentRoleAssignments applies a predicate to check if query has an edge incident_role_assignments.
func (f *UserFilter) WhereHasIncidentRoleAssignments() {
	f.Where(entql.HasEdge("incident_role_assignments"))
}

// WhereHasIncidentRoleAssignmentsWith applies a predicate to check if query has an edge incident_role_assignments with a given conditions (other predicates).
func (f *UserFilter) WhereHasIncidentRoleAssignmentsWith(preds ...predicate.IncidentRoleAssignment) {
	f.Where(entql.HasEdgeWith("incident_role_assignments", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasIncidentDebriefs applies a predicate to check if query has an edge incident_debriefs.
func (f *UserFilter) WhereHasIncidentDebriefs() {
	f.Where(entql.HasEdge("incident_debriefs"))
}

// WhereHasIncidentDebriefsWith applies a predicate to check if query has an edge incident_debriefs with a given conditions (other predicates).
func (f *UserFilter) WhereHasIncidentDebriefsWith(preds ...predicate.IncidentDebrief) {
	f.Where(entql.HasEdgeWith("incident_debriefs", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAssignedTasks applies a predicate to check if query has an edge assigned_tasks.
func (f *UserFilter) WhereHasAssignedTasks() {
	f.Where(entql.HasEdge("assigned_tasks"))
}

// WhereHasAssignedTasksWith applies a predicate to check if query has an edge assigned_tasks with a given conditions (other predicates).
func (f *UserFilter) WhereHasAssignedTasksWith(preds ...predicate.Task) {
	f.Where(entql.HasEdgeWith("assigned_tasks", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCreatedTasks applies a predicate to check if query has an edge created_tasks.
func (f *UserFilter) WhereHasCreatedTasks() {
	f.Where(entql.HasEdge("created_tasks"))
}

// WhereHasCreatedTasksWith applies a predicate to check if query has an edge created_tasks with a given conditions (other predicates).
func (f *UserFilter) WhereHasCreatedTasksWith(preds ...predicate.Task) {
	f.Where(entql.HasEdgeWith("created_tasks", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRetrospectiveReviewRequests applies a predicate to check if query has an edge retrospective_review_requests.
func (f *UserFilter) WhereHasRetrospectiveReviewRequests() {
	f.Where(entql.HasEdge("retrospective_review_requests"))
}

// WhereHasRetrospectiveReviewRequestsWith applies a predicate to check if query has an edge retrospective_review_requests with a given conditions (other predicates).
func (f *UserFilter) WhereHasRetrospectiveReviewRequestsWith(preds ...predicate.RetrospectiveReview) {
	f.Where(entql.HasEdgeWith("retrospective_review_requests", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRetrospectiveReviewResponses applies a predicate to check if query has an edge retrospective_review_responses.
func (f *UserFilter) WhereHasRetrospectiveReviewResponses() {
	f.Where(entql.HasEdge("retrospective_review_responses"))
}

// WhereHasRetrospectiveReviewResponsesWith applies a predicate to check if query has an edge retrospective_review_responses with a given conditions (other predicates).
func (f *UserFilter) WhereHasRetrospectiveReviewResponsesWith(preds ...predicate.RetrospectiveReview) {
	f.Where(entql.HasEdgeWith("retrospective_review_responses", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
