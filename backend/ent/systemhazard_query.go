// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/systemcomponent"
	"github.com/rezible/rezible/ent/systemcomponentconstraint"
	"github.com/rezible/rezible/ent/systemcomponentrelationship"
	"github.com/rezible/rezible/ent/systemhazard"
)

// SystemHazardQuery is the builder for querying SystemHazard entities.
type SystemHazardQuery struct {
	config
	ctx               *QueryContext
	order             []systemhazard.OrderOption
	inters            []Interceptor
	predicates        []predicate.SystemHazard
	withComponents    *SystemComponentQuery
	withConstraints   *SystemComponentConstraintQuery
	withRelationships *SystemComponentRelationshipQuery
	modifiers         []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SystemHazardQuery builder.
func (shq *SystemHazardQuery) Where(ps ...predicate.SystemHazard) *SystemHazardQuery {
	shq.predicates = append(shq.predicates, ps...)
	return shq
}

// Limit the number of records to be returned by this query.
func (shq *SystemHazardQuery) Limit(limit int) *SystemHazardQuery {
	shq.ctx.Limit = &limit
	return shq
}

// Offset to start from.
func (shq *SystemHazardQuery) Offset(offset int) *SystemHazardQuery {
	shq.ctx.Offset = &offset
	return shq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (shq *SystemHazardQuery) Unique(unique bool) *SystemHazardQuery {
	shq.ctx.Unique = &unique
	return shq
}

// Order specifies how the records should be ordered.
func (shq *SystemHazardQuery) Order(o ...systemhazard.OrderOption) *SystemHazardQuery {
	shq.order = append(shq.order, o...)
	return shq
}

// QueryComponents chains the current query on the "components" edge.
func (shq *SystemHazardQuery) QueryComponents() *SystemComponentQuery {
	query := (&SystemComponentClient{config: shq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := shq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := shq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(systemhazard.Table, systemhazard.FieldID, selector),
			sqlgraph.To(systemcomponent.Table, systemcomponent.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, systemhazard.ComponentsTable, systemhazard.ComponentsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(shq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryConstraints chains the current query on the "constraints" edge.
func (shq *SystemHazardQuery) QueryConstraints() *SystemComponentConstraintQuery {
	query := (&SystemComponentConstraintClient{config: shq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := shq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := shq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(systemhazard.Table, systemhazard.FieldID, selector),
			sqlgraph.To(systemcomponentconstraint.Table, systemcomponentconstraint.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, systemhazard.ConstraintsTable, systemhazard.ConstraintsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(shq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRelationships chains the current query on the "relationships" edge.
func (shq *SystemHazardQuery) QueryRelationships() *SystemComponentRelationshipQuery {
	query := (&SystemComponentRelationshipClient{config: shq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := shq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := shq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(systemhazard.Table, systemhazard.FieldID, selector),
			sqlgraph.To(systemcomponentrelationship.Table, systemcomponentrelationship.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, systemhazard.RelationshipsTable, systemhazard.RelationshipsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(shq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SystemHazard entity from the query.
// Returns a *NotFoundError when no SystemHazard was found.
func (shq *SystemHazardQuery) First(ctx context.Context) (*SystemHazard, error) {
	nodes, err := shq.Limit(1).All(setContextOp(ctx, shq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{systemhazard.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (shq *SystemHazardQuery) FirstX(ctx context.Context) *SystemHazard {
	node, err := shq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SystemHazard ID from the query.
// Returns a *NotFoundError when no SystemHazard ID was found.
func (shq *SystemHazardQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = shq.Limit(1).IDs(setContextOp(ctx, shq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{systemhazard.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (shq *SystemHazardQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := shq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SystemHazard entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SystemHazard entity is found.
// Returns a *NotFoundError when no SystemHazard entities are found.
func (shq *SystemHazardQuery) Only(ctx context.Context) (*SystemHazard, error) {
	nodes, err := shq.Limit(2).All(setContextOp(ctx, shq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{systemhazard.Label}
	default:
		return nil, &NotSingularError{systemhazard.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (shq *SystemHazardQuery) OnlyX(ctx context.Context) *SystemHazard {
	node, err := shq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SystemHazard ID in the query.
// Returns a *NotSingularError when more than one SystemHazard ID is found.
// Returns a *NotFoundError when no entities are found.
func (shq *SystemHazardQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = shq.Limit(2).IDs(setContextOp(ctx, shq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{systemhazard.Label}
	default:
		err = &NotSingularError{systemhazard.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (shq *SystemHazardQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := shq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SystemHazards.
func (shq *SystemHazardQuery) All(ctx context.Context) ([]*SystemHazard, error) {
	ctx = setContextOp(ctx, shq.ctx, ent.OpQueryAll)
	if err := shq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SystemHazard, *SystemHazardQuery]()
	return withInterceptors[[]*SystemHazard](ctx, shq, qr, shq.inters)
}

// AllX is like All, but panics if an error occurs.
func (shq *SystemHazardQuery) AllX(ctx context.Context) []*SystemHazard {
	nodes, err := shq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SystemHazard IDs.
func (shq *SystemHazardQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if shq.ctx.Unique == nil && shq.path != nil {
		shq.Unique(true)
	}
	ctx = setContextOp(ctx, shq.ctx, ent.OpQueryIDs)
	if err = shq.Select(systemhazard.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (shq *SystemHazardQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := shq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (shq *SystemHazardQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, shq.ctx, ent.OpQueryCount)
	if err := shq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, shq, querierCount[*SystemHazardQuery](), shq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (shq *SystemHazardQuery) CountX(ctx context.Context) int {
	count, err := shq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (shq *SystemHazardQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, shq.ctx, ent.OpQueryExist)
	switch _, err := shq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (shq *SystemHazardQuery) ExistX(ctx context.Context) bool {
	exist, err := shq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SystemHazardQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (shq *SystemHazardQuery) Clone() *SystemHazardQuery {
	if shq == nil {
		return nil
	}
	return &SystemHazardQuery{
		config:            shq.config,
		ctx:               shq.ctx.Clone(),
		order:             append([]systemhazard.OrderOption{}, shq.order...),
		inters:            append([]Interceptor{}, shq.inters...),
		predicates:        append([]predicate.SystemHazard{}, shq.predicates...),
		withComponents:    shq.withComponents.Clone(),
		withConstraints:   shq.withConstraints.Clone(),
		withRelationships: shq.withRelationships.Clone(),
		// clone intermediate query.
		sql:       shq.sql.Clone(),
		path:      shq.path,
		modifiers: append([]func(*sql.Selector){}, shq.modifiers...),
	}
}

// WithComponents tells the query-builder to eager-load the nodes that are connected to
// the "components" edge. The optional arguments are used to configure the query builder of the edge.
func (shq *SystemHazardQuery) WithComponents(opts ...func(*SystemComponentQuery)) *SystemHazardQuery {
	query := (&SystemComponentClient{config: shq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	shq.withComponents = query
	return shq
}

// WithConstraints tells the query-builder to eager-load the nodes that are connected to
// the "constraints" edge. The optional arguments are used to configure the query builder of the edge.
func (shq *SystemHazardQuery) WithConstraints(opts ...func(*SystemComponentConstraintQuery)) *SystemHazardQuery {
	query := (&SystemComponentConstraintClient{config: shq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	shq.withConstraints = query
	return shq
}

// WithRelationships tells the query-builder to eager-load the nodes that are connected to
// the "relationships" edge. The optional arguments are used to configure the query builder of the edge.
func (shq *SystemHazardQuery) WithRelationships(opts ...func(*SystemComponentRelationshipQuery)) *SystemHazardQuery {
	query := (&SystemComponentRelationshipClient{config: shq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	shq.withRelationships = query
	return shq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SystemHazard.Query().
//		GroupBy(systemhazard.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (shq *SystemHazardQuery) GroupBy(field string, fields ...string) *SystemHazardGroupBy {
	shq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SystemHazardGroupBy{build: shq}
	grbuild.flds = &shq.ctx.Fields
	grbuild.label = systemhazard.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.SystemHazard.Query().
//		Select(systemhazard.FieldName).
//		Scan(ctx, &v)
func (shq *SystemHazardQuery) Select(fields ...string) *SystemHazardSelect {
	shq.ctx.Fields = append(shq.ctx.Fields, fields...)
	sbuild := &SystemHazardSelect{SystemHazardQuery: shq}
	sbuild.label = systemhazard.Label
	sbuild.flds, sbuild.scan = &shq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SystemHazardSelect configured with the given aggregations.
func (shq *SystemHazardQuery) Aggregate(fns ...AggregateFunc) *SystemHazardSelect {
	return shq.Select().Aggregate(fns...)
}

func (shq *SystemHazardQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range shq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, shq); err != nil {
				return err
			}
		}
	}
	for _, f := range shq.ctx.Fields {
		if !systemhazard.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if shq.path != nil {
		prev, err := shq.path(ctx)
		if err != nil {
			return err
		}
		shq.sql = prev
	}
	if systemhazard.Policy == nil {
		return errors.New("ent: uninitialized systemhazard.Policy (forgotten import ent/runtime?)")
	}
	if err := systemhazard.Policy.EvalQuery(ctx, shq); err != nil {
		return err
	}
	return nil
}

func (shq *SystemHazardQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SystemHazard, error) {
	var (
		nodes       = []*SystemHazard{}
		_spec       = shq.querySpec()
		loadedTypes = [3]bool{
			shq.withComponents != nil,
			shq.withConstraints != nil,
			shq.withRelationships != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SystemHazard).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SystemHazard{config: shq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(shq.modifiers) > 0 {
		_spec.Modifiers = shq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, shq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := shq.withComponents; query != nil {
		if err := shq.loadComponents(ctx, query, nodes,
			func(n *SystemHazard) { n.Edges.Components = []*SystemComponent{} },
			func(n *SystemHazard, e *SystemComponent) { n.Edges.Components = append(n.Edges.Components, e) }); err != nil {
			return nil, err
		}
	}
	if query := shq.withConstraints; query != nil {
		if err := shq.loadConstraints(ctx, query, nodes,
			func(n *SystemHazard) { n.Edges.Constraints = []*SystemComponentConstraint{} },
			func(n *SystemHazard, e *SystemComponentConstraint) {
				n.Edges.Constraints = append(n.Edges.Constraints, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := shq.withRelationships; query != nil {
		if err := shq.loadRelationships(ctx, query, nodes,
			func(n *SystemHazard) { n.Edges.Relationships = []*SystemComponentRelationship{} },
			func(n *SystemHazard, e *SystemComponentRelationship) {
				n.Edges.Relationships = append(n.Edges.Relationships, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (shq *SystemHazardQuery) loadComponents(ctx context.Context, query *SystemComponentQuery, nodes []*SystemHazard, init func(*SystemHazard), assign func(*SystemHazard, *SystemComponent)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*SystemHazard)
	nids := make(map[uuid.UUID]map[*SystemHazard]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(systemhazard.ComponentsTable)
		s.Join(joinT).On(s.C(systemcomponent.FieldID), joinT.C(systemhazard.ComponentsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(systemhazard.ComponentsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(systemhazard.ComponentsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*SystemHazard]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*SystemComponent](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "components" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (shq *SystemHazardQuery) loadConstraints(ctx context.Context, query *SystemComponentConstraintQuery, nodes []*SystemHazard, init func(*SystemHazard), assign func(*SystemHazard, *SystemComponentConstraint)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*SystemHazard)
	nids := make(map[uuid.UUID]map[*SystemHazard]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(systemhazard.ConstraintsTable)
		s.Join(joinT).On(s.C(systemcomponentconstraint.FieldID), joinT.C(systemhazard.ConstraintsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(systemhazard.ConstraintsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(systemhazard.ConstraintsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*SystemHazard]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*SystemComponentConstraint](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "constraints" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (shq *SystemHazardQuery) loadRelationships(ctx context.Context, query *SystemComponentRelationshipQuery, nodes []*SystemHazard, init func(*SystemHazard), assign func(*SystemHazard, *SystemComponentRelationship)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*SystemHazard)
	nids := make(map[uuid.UUID]map[*SystemHazard]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(systemhazard.RelationshipsTable)
		s.Join(joinT).On(s.C(systemcomponentrelationship.FieldID), joinT.C(systemhazard.RelationshipsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(systemhazard.RelationshipsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(systemhazard.RelationshipsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*SystemHazard]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*SystemComponentRelationship](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "relationships" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (shq *SystemHazardQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := shq.querySpec()
	if len(shq.modifiers) > 0 {
		_spec.Modifiers = shq.modifiers
	}
	_spec.Node.Columns = shq.ctx.Fields
	if len(shq.ctx.Fields) > 0 {
		_spec.Unique = shq.ctx.Unique != nil && *shq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, shq.driver, _spec)
}

func (shq *SystemHazardQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(systemhazard.Table, systemhazard.Columns, sqlgraph.NewFieldSpec(systemhazard.FieldID, field.TypeUUID))
	_spec.From = shq.sql
	if unique := shq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if shq.path != nil {
		_spec.Unique = true
	}
	if fields := shq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, systemhazard.FieldID)
		for i := range fields {
			if fields[i] != systemhazard.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := shq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := shq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := shq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := shq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (shq *SystemHazardQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(shq.driver.Dialect())
	t1 := builder.Table(systemhazard.Table)
	columns := shq.ctx.Fields
	if len(columns) == 0 {
		columns = systemhazard.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if shq.sql != nil {
		selector = shq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if shq.ctx.Unique != nil && *shq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range shq.modifiers {
		m(selector)
	}
	for _, p := range shq.predicates {
		p(selector)
	}
	for _, p := range shq.order {
		p(selector)
	}
	if offset := shq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := shq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (shq *SystemHazardQuery) Modify(modifiers ...func(s *sql.Selector)) *SystemHazardSelect {
	shq.modifiers = append(shq.modifiers, modifiers...)
	return shq.Select()
}

// SystemHazardGroupBy is the group-by builder for SystemHazard entities.
type SystemHazardGroupBy struct {
	selector
	build *SystemHazardQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (shgb *SystemHazardGroupBy) Aggregate(fns ...AggregateFunc) *SystemHazardGroupBy {
	shgb.fns = append(shgb.fns, fns...)
	return shgb
}

// Scan applies the selector query and scans the result into the given value.
func (shgb *SystemHazardGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, shgb.build.ctx, ent.OpQueryGroupBy)
	if err := shgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SystemHazardQuery, *SystemHazardGroupBy](ctx, shgb.build, shgb, shgb.build.inters, v)
}

func (shgb *SystemHazardGroupBy) sqlScan(ctx context.Context, root *SystemHazardQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(shgb.fns))
	for _, fn := range shgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*shgb.flds)+len(shgb.fns))
		for _, f := range *shgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*shgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := shgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SystemHazardSelect is the builder for selecting fields of SystemHazard entities.
type SystemHazardSelect struct {
	*SystemHazardQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (shs *SystemHazardSelect) Aggregate(fns ...AggregateFunc) *SystemHazardSelect {
	shs.fns = append(shs.fns, fns...)
	return shs
}

// Scan applies the selector query and scans the result into the given value.
func (shs *SystemHazardSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, shs.ctx, ent.OpQuerySelect)
	if err := shs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SystemHazardQuery, *SystemHazardSelect](ctx, shs.SystemHazardQuery, shs, shs.inters, v)
}

func (shs *SystemHazardSelect) sqlScan(ctx context.Context, root *SystemHazardQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(shs.fns))
	for _, fn := range shs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*shs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := shs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (shs *SystemHazardSelect) Modify(modifiers ...func(s *sql.Selector)) *SystemHazardSelect {
	shs.modifiers = append(shs.modifiers, modifiers...)
	return shs
}
