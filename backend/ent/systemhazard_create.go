// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/systemcomponent"
	"github.com/rezible/rezible/ent/systemcomponentconstraint"
	"github.com/rezible/rezible/ent/systemcomponentrelationship"
	"github.com/rezible/rezible/ent/systemhazard"
)

// SystemHazardCreate is the builder for creating a SystemHazard entity.
type SystemHazardCreate struct {
	config
	mutation *SystemHazardMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (shc *SystemHazardCreate) SetName(s string) *SystemHazardCreate {
	shc.mutation.SetName(s)
	return shc
}

// SetDescription sets the "description" field.
func (shc *SystemHazardCreate) SetDescription(s string) *SystemHazardCreate {
	shc.mutation.SetDescription(s)
	return shc
}

// SetCreatedAt sets the "created_at" field.
func (shc *SystemHazardCreate) SetCreatedAt(t time.Time) *SystemHazardCreate {
	shc.mutation.SetCreatedAt(t)
	return shc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (shc *SystemHazardCreate) SetNillableCreatedAt(t *time.Time) *SystemHazardCreate {
	if t != nil {
		shc.SetCreatedAt(*t)
	}
	return shc
}

// SetUpdatedAt sets the "updated_at" field.
func (shc *SystemHazardCreate) SetUpdatedAt(t time.Time) *SystemHazardCreate {
	shc.mutation.SetUpdatedAt(t)
	return shc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (shc *SystemHazardCreate) SetNillableUpdatedAt(t *time.Time) *SystemHazardCreate {
	if t != nil {
		shc.SetUpdatedAt(*t)
	}
	return shc
}

// SetID sets the "id" field.
func (shc *SystemHazardCreate) SetID(u uuid.UUID) *SystemHazardCreate {
	shc.mutation.SetID(u)
	return shc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (shc *SystemHazardCreate) SetNillableID(u *uuid.UUID) *SystemHazardCreate {
	if u != nil {
		shc.SetID(*u)
	}
	return shc
}

// AddComponentIDs adds the "components" edge to the SystemComponent entity by IDs.
func (shc *SystemHazardCreate) AddComponentIDs(ids ...uuid.UUID) *SystemHazardCreate {
	shc.mutation.AddComponentIDs(ids...)
	return shc
}

// AddComponents adds the "components" edges to the SystemComponent entity.
func (shc *SystemHazardCreate) AddComponents(s ...*SystemComponent) *SystemHazardCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return shc.AddComponentIDs(ids...)
}

// AddConstraintIDs adds the "constraints" edge to the SystemComponentConstraint entity by IDs.
func (shc *SystemHazardCreate) AddConstraintIDs(ids ...uuid.UUID) *SystemHazardCreate {
	shc.mutation.AddConstraintIDs(ids...)
	return shc
}

// AddConstraints adds the "constraints" edges to the SystemComponentConstraint entity.
func (shc *SystemHazardCreate) AddConstraints(s ...*SystemComponentConstraint) *SystemHazardCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return shc.AddConstraintIDs(ids...)
}

// AddRelationshipIDs adds the "relationships" edge to the SystemComponentRelationship entity by IDs.
func (shc *SystemHazardCreate) AddRelationshipIDs(ids ...uuid.UUID) *SystemHazardCreate {
	shc.mutation.AddRelationshipIDs(ids...)
	return shc
}

// AddRelationships adds the "relationships" edges to the SystemComponentRelationship entity.
func (shc *SystemHazardCreate) AddRelationships(s ...*SystemComponentRelationship) *SystemHazardCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return shc.AddRelationshipIDs(ids...)
}

// Mutation returns the SystemHazardMutation object of the builder.
func (shc *SystemHazardCreate) Mutation() *SystemHazardMutation {
	return shc.mutation
}

// Save creates the SystemHazard in the database.
func (shc *SystemHazardCreate) Save(ctx context.Context) (*SystemHazard, error) {
	if err := shc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, shc.sqlSave, shc.mutation, shc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (shc *SystemHazardCreate) SaveX(ctx context.Context) *SystemHazard {
	v, err := shc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (shc *SystemHazardCreate) Exec(ctx context.Context) error {
	_, err := shc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (shc *SystemHazardCreate) ExecX(ctx context.Context) {
	if err := shc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (shc *SystemHazardCreate) defaults() error {
	if _, ok := shc.mutation.CreatedAt(); !ok {
		if systemhazard.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized systemhazard.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := systemhazard.DefaultCreatedAt()
		shc.mutation.SetCreatedAt(v)
	}
	if _, ok := shc.mutation.UpdatedAt(); !ok {
		if systemhazard.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized systemhazard.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := systemhazard.DefaultUpdatedAt()
		shc.mutation.SetUpdatedAt(v)
	}
	if _, ok := shc.mutation.ID(); !ok {
		if systemhazard.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized systemhazard.DefaultID (forgotten import ent/runtime?)")
		}
		v := systemhazard.DefaultID()
		shc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (shc *SystemHazardCreate) check() error {
	if _, ok := shc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "SystemHazard.name"`)}
	}
	if v, ok := shc.mutation.Name(); ok {
		if err := systemhazard.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "SystemHazard.name": %w`, err)}
		}
	}
	if _, ok := shc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "SystemHazard.description"`)}
	}
	if _, ok := shc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SystemHazard.created_at"`)}
	}
	if _, ok := shc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SystemHazard.updated_at"`)}
	}
	return nil
}

func (shc *SystemHazardCreate) sqlSave(ctx context.Context) (*SystemHazard, error) {
	if err := shc.check(); err != nil {
		return nil, err
	}
	_node, _spec := shc.createSpec()
	if err := sqlgraph.CreateNode(ctx, shc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	shc.mutation.id = &_node.ID
	shc.mutation.done = true
	return _node, nil
}

func (shc *SystemHazardCreate) createSpec() (*SystemHazard, *sqlgraph.CreateSpec) {
	var (
		_node = &SystemHazard{config: shc.config}
		_spec = sqlgraph.NewCreateSpec(systemhazard.Table, sqlgraph.NewFieldSpec(systemhazard.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = shc.conflict
	if id, ok := shc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := shc.mutation.Name(); ok {
		_spec.SetField(systemhazard.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := shc.mutation.Description(); ok {
		_spec.SetField(systemhazard.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := shc.mutation.CreatedAt(); ok {
		_spec.SetField(systemhazard.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := shc.mutation.UpdatedAt(); ok {
		_spec.SetField(systemhazard.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := shc.mutation.ComponentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemhazard.ComponentsTable,
			Columns: systemhazard.ComponentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := shc.mutation.ConstraintsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemhazard.ConstraintsTable,
			Columns: systemhazard.ConstraintsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentconstraint.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := shc.mutation.RelationshipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemhazard.RelationshipsTable,
			Columns: systemhazard.RelationshipsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentrelationship.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SystemHazard.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SystemHazardUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (shc *SystemHazardCreate) OnConflict(opts ...sql.ConflictOption) *SystemHazardUpsertOne {
	shc.conflict = opts
	return &SystemHazardUpsertOne{
		create: shc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SystemHazard.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (shc *SystemHazardCreate) OnConflictColumns(columns ...string) *SystemHazardUpsertOne {
	shc.conflict = append(shc.conflict, sql.ConflictColumns(columns...))
	return &SystemHazardUpsertOne{
		create: shc,
	}
}

type (
	// SystemHazardUpsertOne is the builder for "upsert"-ing
	//  one SystemHazard node.
	SystemHazardUpsertOne struct {
		create *SystemHazardCreate
	}

	// SystemHazardUpsert is the "OnConflict" setter.
	SystemHazardUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *SystemHazardUpsert) SetName(v string) *SystemHazardUpsert {
	u.Set(systemhazard.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SystemHazardUpsert) UpdateName() *SystemHazardUpsert {
	u.SetExcluded(systemhazard.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *SystemHazardUpsert) SetDescription(v string) *SystemHazardUpsert {
	u.Set(systemhazard.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SystemHazardUpsert) UpdateDescription() *SystemHazardUpsert {
	u.SetExcluded(systemhazard.FieldDescription)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SystemHazardUpsert) SetCreatedAt(v time.Time) *SystemHazardUpsert {
	u.Set(systemhazard.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SystemHazardUpsert) UpdateCreatedAt() *SystemHazardUpsert {
	u.SetExcluded(systemhazard.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SystemHazardUpsert) SetUpdatedAt(v time.Time) *SystemHazardUpsert {
	u.Set(systemhazard.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SystemHazardUpsert) UpdateUpdatedAt() *SystemHazardUpsert {
	u.SetExcluded(systemhazard.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SystemHazard.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(systemhazard.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SystemHazardUpsertOne) UpdateNewValues() *SystemHazardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(systemhazard.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SystemHazard.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SystemHazardUpsertOne) Ignore() *SystemHazardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SystemHazardUpsertOne) DoNothing() *SystemHazardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SystemHazardCreate.OnConflict
// documentation for more info.
func (u *SystemHazardUpsertOne) Update(set func(*SystemHazardUpsert)) *SystemHazardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SystemHazardUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *SystemHazardUpsertOne) SetName(v string) *SystemHazardUpsertOne {
	return u.Update(func(s *SystemHazardUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SystemHazardUpsertOne) UpdateName() *SystemHazardUpsertOne {
	return u.Update(func(s *SystemHazardUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *SystemHazardUpsertOne) SetDescription(v string) *SystemHazardUpsertOne {
	return u.Update(func(s *SystemHazardUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SystemHazardUpsertOne) UpdateDescription() *SystemHazardUpsertOne {
	return u.Update(func(s *SystemHazardUpsert) {
		s.UpdateDescription()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SystemHazardUpsertOne) SetCreatedAt(v time.Time) *SystemHazardUpsertOne {
	return u.Update(func(s *SystemHazardUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SystemHazardUpsertOne) UpdateCreatedAt() *SystemHazardUpsertOne {
	return u.Update(func(s *SystemHazardUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SystemHazardUpsertOne) SetUpdatedAt(v time.Time) *SystemHazardUpsertOne {
	return u.Update(func(s *SystemHazardUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SystemHazardUpsertOne) UpdateUpdatedAt() *SystemHazardUpsertOne {
	return u.Update(func(s *SystemHazardUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *SystemHazardUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SystemHazardCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SystemHazardUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SystemHazardUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: SystemHazardUpsertOne.ID is not supported by MySQL driver. Use SystemHazardUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SystemHazardUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SystemHazardCreateBulk is the builder for creating many SystemHazard entities in bulk.
type SystemHazardCreateBulk struct {
	config
	err      error
	builders []*SystemHazardCreate
	conflict []sql.ConflictOption
}

// Save creates the SystemHazard entities in the database.
func (shcb *SystemHazardCreateBulk) Save(ctx context.Context) ([]*SystemHazard, error) {
	if shcb.err != nil {
		return nil, shcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(shcb.builders))
	nodes := make([]*SystemHazard, len(shcb.builders))
	mutators := make([]Mutator, len(shcb.builders))
	for i := range shcb.builders {
		func(i int, root context.Context) {
			builder := shcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SystemHazardMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, shcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = shcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, shcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, shcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (shcb *SystemHazardCreateBulk) SaveX(ctx context.Context) []*SystemHazard {
	v, err := shcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (shcb *SystemHazardCreateBulk) Exec(ctx context.Context) error {
	_, err := shcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (shcb *SystemHazardCreateBulk) ExecX(ctx context.Context) {
	if err := shcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SystemHazard.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SystemHazardUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (shcb *SystemHazardCreateBulk) OnConflict(opts ...sql.ConflictOption) *SystemHazardUpsertBulk {
	shcb.conflict = opts
	return &SystemHazardUpsertBulk{
		create: shcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SystemHazard.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (shcb *SystemHazardCreateBulk) OnConflictColumns(columns ...string) *SystemHazardUpsertBulk {
	shcb.conflict = append(shcb.conflict, sql.ConflictColumns(columns...))
	return &SystemHazardUpsertBulk{
		create: shcb,
	}
}

// SystemHazardUpsertBulk is the builder for "upsert"-ing
// a bulk of SystemHazard nodes.
type SystemHazardUpsertBulk struct {
	create *SystemHazardCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SystemHazard.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(systemhazard.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SystemHazardUpsertBulk) UpdateNewValues() *SystemHazardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(systemhazard.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SystemHazard.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SystemHazardUpsertBulk) Ignore() *SystemHazardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SystemHazardUpsertBulk) DoNothing() *SystemHazardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SystemHazardCreateBulk.OnConflict
// documentation for more info.
func (u *SystemHazardUpsertBulk) Update(set func(*SystemHazardUpsert)) *SystemHazardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SystemHazardUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *SystemHazardUpsertBulk) SetName(v string) *SystemHazardUpsertBulk {
	return u.Update(func(s *SystemHazardUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SystemHazardUpsertBulk) UpdateName() *SystemHazardUpsertBulk {
	return u.Update(func(s *SystemHazardUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *SystemHazardUpsertBulk) SetDescription(v string) *SystemHazardUpsertBulk {
	return u.Update(func(s *SystemHazardUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SystemHazardUpsertBulk) UpdateDescription() *SystemHazardUpsertBulk {
	return u.Update(func(s *SystemHazardUpsert) {
		s.UpdateDescription()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SystemHazardUpsertBulk) SetCreatedAt(v time.Time) *SystemHazardUpsertBulk {
	return u.Update(func(s *SystemHazardUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SystemHazardUpsertBulk) UpdateCreatedAt() *SystemHazardUpsertBulk {
	return u.Update(func(s *SystemHazardUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SystemHazardUpsertBulk) SetUpdatedAt(v time.Time) *SystemHazardUpsertBulk {
	return u.Update(func(s *SystemHazardUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SystemHazardUpsertBulk) UpdateUpdatedAt() *SystemHazardUpsertBulk {
	return u.Update(func(s *SystemHazardUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *SystemHazardUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SystemHazardCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SystemHazardCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SystemHazardUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
