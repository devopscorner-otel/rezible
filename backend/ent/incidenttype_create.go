// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/incident"
	"github.com/rezible/rezible/ent/incidentdebriefquestion"
	"github.com/rezible/rezible/ent/incidenttype"
	"github.com/rezible/rezible/ent/tenant"
)

// IncidentTypeCreate is the builder for creating a IncidentType entity.
type IncidentTypeCreate struct {
	config
	mutation *IncidentTypeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (itc *IncidentTypeCreate) SetTenantID(i int) *IncidentTypeCreate {
	itc.mutation.SetTenantID(i)
	return itc
}

// SetArchiveTime sets the "archive_time" field.
func (itc *IncidentTypeCreate) SetArchiveTime(t time.Time) *IncidentTypeCreate {
	itc.mutation.SetArchiveTime(t)
	return itc
}

// SetNillableArchiveTime sets the "archive_time" field if the given value is not nil.
func (itc *IncidentTypeCreate) SetNillableArchiveTime(t *time.Time) *IncidentTypeCreate {
	if t != nil {
		itc.SetArchiveTime(*t)
	}
	return itc
}

// SetName sets the "name" field.
func (itc *IncidentTypeCreate) SetName(s string) *IncidentTypeCreate {
	itc.mutation.SetName(s)
	return itc
}

// SetID sets the "id" field.
func (itc *IncidentTypeCreate) SetID(u uuid.UUID) *IncidentTypeCreate {
	itc.mutation.SetID(u)
	return itc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (itc *IncidentTypeCreate) SetNillableID(u *uuid.UUID) *IncidentTypeCreate {
	if u != nil {
		itc.SetID(*u)
	}
	return itc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (itc *IncidentTypeCreate) SetTenant(t *Tenant) *IncidentTypeCreate {
	return itc.SetTenantID(t.ID)
}

// AddIncidentIDs adds the "incidents" edge to the Incident entity by IDs.
func (itc *IncidentTypeCreate) AddIncidentIDs(ids ...uuid.UUID) *IncidentTypeCreate {
	itc.mutation.AddIncidentIDs(ids...)
	return itc
}

// AddIncidents adds the "incidents" edges to the Incident entity.
func (itc *IncidentTypeCreate) AddIncidents(i ...*Incident) *IncidentTypeCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return itc.AddIncidentIDs(ids...)
}

// AddDebriefQuestionIDs adds the "debrief_questions" edge to the IncidentDebriefQuestion entity by IDs.
func (itc *IncidentTypeCreate) AddDebriefQuestionIDs(ids ...uuid.UUID) *IncidentTypeCreate {
	itc.mutation.AddDebriefQuestionIDs(ids...)
	return itc
}

// AddDebriefQuestions adds the "debrief_questions" edges to the IncidentDebriefQuestion entity.
func (itc *IncidentTypeCreate) AddDebriefQuestions(i ...*IncidentDebriefQuestion) *IncidentTypeCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return itc.AddDebriefQuestionIDs(ids...)
}

// Mutation returns the IncidentTypeMutation object of the builder.
func (itc *IncidentTypeCreate) Mutation() *IncidentTypeMutation {
	return itc.mutation
}

// Save creates the IncidentType in the database.
func (itc *IncidentTypeCreate) Save(ctx context.Context) (*IncidentType, error) {
	if err := itc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, itc.sqlSave, itc.mutation, itc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (itc *IncidentTypeCreate) SaveX(ctx context.Context) *IncidentType {
	v, err := itc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (itc *IncidentTypeCreate) Exec(ctx context.Context) error {
	_, err := itc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (itc *IncidentTypeCreate) ExecX(ctx context.Context) {
	if err := itc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (itc *IncidentTypeCreate) defaults() error {
	if _, ok := itc.mutation.ID(); !ok {
		if incidenttype.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized incidenttype.DefaultID (forgotten import ent/runtime?)")
		}
		v := incidenttype.DefaultID()
		itc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (itc *IncidentTypeCreate) check() error {
	if _, ok := itc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "IncidentType.tenant_id"`)}
	}
	if _, ok := itc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "IncidentType.name"`)}
	}
	if len(itc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "IncidentType.tenant"`)}
	}
	return nil
}

func (itc *IncidentTypeCreate) sqlSave(ctx context.Context) (*IncidentType, error) {
	if err := itc.check(); err != nil {
		return nil, err
	}
	_node, _spec := itc.createSpec()
	if err := sqlgraph.CreateNode(ctx, itc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	itc.mutation.id = &_node.ID
	itc.mutation.done = true
	return _node, nil
}

func (itc *IncidentTypeCreate) createSpec() (*IncidentType, *sqlgraph.CreateSpec) {
	var (
		_node = &IncidentType{config: itc.config}
		_spec = sqlgraph.NewCreateSpec(incidenttype.Table, sqlgraph.NewFieldSpec(incidenttype.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = itc.conflict
	if id, ok := itc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := itc.mutation.ArchiveTime(); ok {
		_spec.SetField(incidenttype.FieldArchiveTime, field.TypeTime, value)
		_node.ArchiveTime = value
	}
	if value, ok := itc.mutation.Name(); ok {
		_spec.SetField(incidenttype.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := itc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidenttype.TenantTable,
			Columns: []string{incidenttype.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := itc.mutation.IncidentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   incidenttype.IncidentsTable,
			Columns: []string{incidenttype.IncidentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := itc.mutation.DebriefQuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   incidenttype.DebriefQuestionsTable,
			Columns: incidenttype.DebriefQuestionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentdebriefquestion.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IncidentType.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IncidentTypeUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (itc *IncidentTypeCreate) OnConflict(opts ...sql.ConflictOption) *IncidentTypeUpsertOne {
	itc.conflict = opts
	return &IncidentTypeUpsertOne{
		create: itc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IncidentType.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (itc *IncidentTypeCreate) OnConflictColumns(columns ...string) *IncidentTypeUpsertOne {
	itc.conflict = append(itc.conflict, sql.ConflictColumns(columns...))
	return &IncidentTypeUpsertOne{
		create: itc,
	}
}

type (
	// IncidentTypeUpsertOne is the builder for "upsert"-ing
	//  one IncidentType node.
	IncidentTypeUpsertOne struct {
		create *IncidentTypeCreate
	}

	// IncidentTypeUpsert is the "OnConflict" setter.
	IncidentTypeUpsert struct {
		*sql.UpdateSet
	}
)

// SetArchiveTime sets the "archive_time" field.
func (u *IncidentTypeUpsert) SetArchiveTime(v time.Time) *IncidentTypeUpsert {
	u.Set(incidenttype.FieldArchiveTime, v)
	return u
}

// UpdateArchiveTime sets the "archive_time" field to the value that was provided on create.
func (u *IncidentTypeUpsert) UpdateArchiveTime() *IncidentTypeUpsert {
	u.SetExcluded(incidenttype.FieldArchiveTime)
	return u
}

// ClearArchiveTime clears the value of the "archive_time" field.
func (u *IncidentTypeUpsert) ClearArchiveTime() *IncidentTypeUpsert {
	u.SetNull(incidenttype.FieldArchiveTime)
	return u
}

// SetName sets the "name" field.
func (u *IncidentTypeUpsert) SetName(v string) *IncidentTypeUpsert {
	u.Set(incidenttype.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *IncidentTypeUpsert) UpdateName() *IncidentTypeUpsert {
	u.SetExcluded(incidenttype.FieldName)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.IncidentType.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(incidenttype.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IncidentTypeUpsertOne) UpdateNewValues() *IncidentTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(incidenttype.FieldID)
		}
		if _, exists := u.create.mutation.TenantID(); exists {
			s.SetIgnore(incidenttype.FieldTenantID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IncidentType.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *IncidentTypeUpsertOne) Ignore() *IncidentTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IncidentTypeUpsertOne) DoNothing() *IncidentTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IncidentTypeCreate.OnConflict
// documentation for more info.
func (u *IncidentTypeUpsertOne) Update(set func(*IncidentTypeUpsert)) *IncidentTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IncidentTypeUpsert{UpdateSet: update})
	}))
	return u
}

// SetArchiveTime sets the "archive_time" field.
func (u *IncidentTypeUpsertOne) SetArchiveTime(v time.Time) *IncidentTypeUpsertOne {
	return u.Update(func(s *IncidentTypeUpsert) {
		s.SetArchiveTime(v)
	})
}

// UpdateArchiveTime sets the "archive_time" field to the value that was provided on create.
func (u *IncidentTypeUpsertOne) UpdateArchiveTime() *IncidentTypeUpsertOne {
	return u.Update(func(s *IncidentTypeUpsert) {
		s.UpdateArchiveTime()
	})
}

// ClearArchiveTime clears the value of the "archive_time" field.
func (u *IncidentTypeUpsertOne) ClearArchiveTime() *IncidentTypeUpsertOne {
	return u.Update(func(s *IncidentTypeUpsert) {
		s.ClearArchiveTime()
	})
}

// SetName sets the "name" field.
func (u *IncidentTypeUpsertOne) SetName(v string) *IncidentTypeUpsertOne {
	return u.Update(func(s *IncidentTypeUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *IncidentTypeUpsertOne) UpdateName() *IncidentTypeUpsertOne {
	return u.Update(func(s *IncidentTypeUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *IncidentTypeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IncidentTypeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IncidentTypeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *IncidentTypeUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: IncidentTypeUpsertOne.ID is not supported by MySQL driver. Use IncidentTypeUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *IncidentTypeUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// IncidentTypeCreateBulk is the builder for creating many IncidentType entities in bulk.
type IncidentTypeCreateBulk struct {
	config
	err      error
	builders []*IncidentTypeCreate
	conflict []sql.ConflictOption
}

// Save creates the IncidentType entities in the database.
func (itcb *IncidentTypeCreateBulk) Save(ctx context.Context) ([]*IncidentType, error) {
	if itcb.err != nil {
		return nil, itcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(itcb.builders))
	nodes := make([]*IncidentType, len(itcb.builders))
	mutators := make([]Mutator, len(itcb.builders))
	for i := range itcb.builders {
		func(i int, root context.Context) {
			builder := itcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IncidentTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, itcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = itcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, itcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, itcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (itcb *IncidentTypeCreateBulk) SaveX(ctx context.Context) []*IncidentType {
	v, err := itcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (itcb *IncidentTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := itcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (itcb *IncidentTypeCreateBulk) ExecX(ctx context.Context) {
	if err := itcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IncidentType.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IncidentTypeUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (itcb *IncidentTypeCreateBulk) OnConflict(opts ...sql.ConflictOption) *IncidentTypeUpsertBulk {
	itcb.conflict = opts
	return &IncidentTypeUpsertBulk{
		create: itcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IncidentType.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (itcb *IncidentTypeCreateBulk) OnConflictColumns(columns ...string) *IncidentTypeUpsertBulk {
	itcb.conflict = append(itcb.conflict, sql.ConflictColumns(columns...))
	return &IncidentTypeUpsertBulk{
		create: itcb,
	}
}

// IncidentTypeUpsertBulk is the builder for "upsert"-ing
// a bulk of IncidentType nodes.
type IncidentTypeUpsertBulk struct {
	create *IncidentTypeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.IncidentType.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(incidenttype.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IncidentTypeUpsertBulk) UpdateNewValues() *IncidentTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(incidenttype.FieldID)
			}
			if _, exists := b.mutation.TenantID(); exists {
				s.SetIgnore(incidenttype.FieldTenantID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IncidentType.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *IncidentTypeUpsertBulk) Ignore() *IncidentTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IncidentTypeUpsertBulk) DoNothing() *IncidentTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IncidentTypeCreateBulk.OnConflict
// documentation for more info.
func (u *IncidentTypeUpsertBulk) Update(set func(*IncidentTypeUpsert)) *IncidentTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IncidentTypeUpsert{UpdateSet: update})
	}))
	return u
}

// SetArchiveTime sets the "archive_time" field.
func (u *IncidentTypeUpsertBulk) SetArchiveTime(v time.Time) *IncidentTypeUpsertBulk {
	return u.Update(func(s *IncidentTypeUpsert) {
		s.SetArchiveTime(v)
	})
}

// UpdateArchiveTime sets the "archive_time" field to the value that was provided on create.
func (u *IncidentTypeUpsertBulk) UpdateArchiveTime() *IncidentTypeUpsertBulk {
	return u.Update(func(s *IncidentTypeUpsert) {
		s.UpdateArchiveTime()
	})
}

// ClearArchiveTime clears the value of the "archive_time" field.
func (u *IncidentTypeUpsertBulk) ClearArchiveTime() *IncidentTypeUpsertBulk {
	return u.Update(func(s *IncidentTypeUpsert) {
		s.ClearArchiveTime()
	})
}

// SetName sets the "name" field.
func (u *IncidentTypeUpsertBulk) SetName(v string) *IncidentTypeUpsertBulk {
	return u.Update(func(s *IncidentTypeUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *IncidentTypeUpsertBulk) UpdateName() *IncidentTypeUpsertBulk {
	return u.Update(func(s *IncidentTypeUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *IncidentTypeUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the IncidentTypeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IncidentTypeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IncidentTypeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
