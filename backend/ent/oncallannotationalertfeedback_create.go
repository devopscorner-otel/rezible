// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/oncallannotation"
	"github.com/rezible/rezible/ent/oncallannotationalertfeedback"
)

// OncallAnnotationAlertFeedbackCreate is the builder for creating a OncallAnnotationAlertFeedback entity.
type OncallAnnotationAlertFeedbackCreate struct {
	config
	mutation *OncallAnnotationAlertFeedbackMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAnnotationID sets the "annotation_id" field.
func (oaafc *OncallAnnotationAlertFeedbackCreate) SetAnnotationID(u uuid.UUID) *OncallAnnotationAlertFeedbackCreate {
	oaafc.mutation.SetAnnotationID(u)
	return oaafc
}

// SetActionable sets the "actionable" field.
func (oaafc *OncallAnnotationAlertFeedbackCreate) SetActionable(b bool) *OncallAnnotationAlertFeedbackCreate {
	oaafc.mutation.SetActionable(b)
	return oaafc
}

// SetAccurate sets the "accurate" field.
func (oaafc *OncallAnnotationAlertFeedbackCreate) SetAccurate(o oncallannotationalertfeedback.Accurate) *OncallAnnotationAlertFeedbackCreate {
	oaafc.mutation.SetAccurate(o)
	return oaafc
}

// SetDocumentationAvailable sets the "documentation_available" field.
func (oaafc *OncallAnnotationAlertFeedbackCreate) SetDocumentationAvailable(oa oncallannotationalertfeedback.DocumentationAvailable) *OncallAnnotationAlertFeedbackCreate {
	oaafc.mutation.SetDocumentationAvailable(oa)
	return oaafc
}

// SetID sets the "id" field.
func (oaafc *OncallAnnotationAlertFeedbackCreate) SetID(u uuid.UUID) *OncallAnnotationAlertFeedbackCreate {
	oaafc.mutation.SetID(u)
	return oaafc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (oaafc *OncallAnnotationAlertFeedbackCreate) SetNillableID(u *uuid.UUID) *OncallAnnotationAlertFeedbackCreate {
	if u != nil {
		oaafc.SetID(*u)
	}
	return oaafc
}

// SetAnnotation sets the "annotation" edge to the OncallAnnotation entity.
func (oaafc *OncallAnnotationAlertFeedbackCreate) SetAnnotation(o *OncallAnnotation) *OncallAnnotationAlertFeedbackCreate {
	return oaafc.SetAnnotationID(o.ID)
}

// Mutation returns the OncallAnnotationAlertFeedbackMutation object of the builder.
func (oaafc *OncallAnnotationAlertFeedbackCreate) Mutation() *OncallAnnotationAlertFeedbackMutation {
	return oaafc.mutation
}

// Save creates the OncallAnnotationAlertFeedback in the database.
func (oaafc *OncallAnnotationAlertFeedbackCreate) Save(ctx context.Context) (*OncallAnnotationAlertFeedback, error) {
	oaafc.defaults()
	return withHooks(ctx, oaafc.sqlSave, oaafc.mutation, oaafc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oaafc *OncallAnnotationAlertFeedbackCreate) SaveX(ctx context.Context) *OncallAnnotationAlertFeedback {
	v, err := oaafc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oaafc *OncallAnnotationAlertFeedbackCreate) Exec(ctx context.Context) error {
	_, err := oaafc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oaafc *OncallAnnotationAlertFeedbackCreate) ExecX(ctx context.Context) {
	if err := oaafc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oaafc *OncallAnnotationAlertFeedbackCreate) defaults() {
	if _, ok := oaafc.mutation.ID(); !ok {
		v := oncallannotationalertfeedback.DefaultID()
		oaafc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oaafc *OncallAnnotationAlertFeedbackCreate) check() error {
	if _, ok := oaafc.mutation.AnnotationID(); !ok {
		return &ValidationError{Name: "annotation_id", err: errors.New(`ent: missing required field "OncallAnnotationAlertFeedback.annotation_id"`)}
	}
	if _, ok := oaafc.mutation.Actionable(); !ok {
		return &ValidationError{Name: "actionable", err: errors.New(`ent: missing required field "OncallAnnotationAlertFeedback.actionable"`)}
	}
	if _, ok := oaafc.mutation.Accurate(); !ok {
		return &ValidationError{Name: "accurate", err: errors.New(`ent: missing required field "OncallAnnotationAlertFeedback.accurate"`)}
	}
	if v, ok := oaafc.mutation.Accurate(); ok {
		if err := oncallannotationalertfeedback.AccurateValidator(v); err != nil {
			return &ValidationError{Name: "accurate", err: fmt.Errorf(`ent: validator failed for field "OncallAnnotationAlertFeedback.accurate": %w`, err)}
		}
	}
	if _, ok := oaafc.mutation.DocumentationAvailable(); !ok {
		return &ValidationError{Name: "documentation_available", err: errors.New(`ent: missing required field "OncallAnnotationAlertFeedback.documentation_available"`)}
	}
	if v, ok := oaafc.mutation.DocumentationAvailable(); ok {
		if err := oncallannotationalertfeedback.DocumentationAvailableValidator(v); err != nil {
			return &ValidationError{Name: "documentation_available", err: fmt.Errorf(`ent: validator failed for field "OncallAnnotationAlertFeedback.documentation_available": %w`, err)}
		}
	}
	if len(oaafc.mutation.AnnotationIDs()) == 0 {
		return &ValidationError{Name: "annotation", err: errors.New(`ent: missing required edge "OncallAnnotationAlertFeedback.annotation"`)}
	}
	return nil
}

func (oaafc *OncallAnnotationAlertFeedbackCreate) sqlSave(ctx context.Context) (*OncallAnnotationAlertFeedback, error) {
	if err := oaafc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oaafc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oaafc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	oaafc.mutation.id = &_node.ID
	oaafc.mutation.done = true
	return _node, nil
}

func (oaafc *OncallAnnotationAlertFeedbackCreate) createSpec() (*OncallAnnotationAlertFeedback, *sqlgraph.CreateSpec) {
	var (
		_node = &OncallAnnotationAlertFeedback{config: oaafc.config}
		_spec = sqlgraph.NewCreateSpec(oncallannotationalertfeedback.Table, sqlgraph.NewFieldSpec(oncallannotationalertfeedback.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = oaafc.conflict
	if id, ok := oaafc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := oaafc.mutation.Actionable(); ok {
		_spec.SetField(oncallannotationalertfeedback.FieldActionable, field.TypeBool, value)
		_node.Actionable = value
	}
	if value, ok := oaafc.mutation.Accurate(); ok {
		_spec.SetField(oncallannotationalertfeedback.FieldAccurate, field.TypeEnum, value)
		_node.Accurate = value
	}
	if value, ok := oaafc.mutation.DocumentationAvailable(); ok {
		_spec.SetField(oncallannotationalertfeedback.FieldDocumentationAvailable, field.TypeEnum, value)
		_node.DocumentationAvailable = value
	}
	if nodes := oaafc.mutation.AnnotationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   oncallannotationalertfeedback.AnnotationTable,
			Columns: []string{oncallannotationalertfeedback.AnnotationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallannotation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AnnotationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OncallAnnotationAlertFeedback.Create().
//		SetAnnotationID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OncallAnnotationAlertFeedbackUpsert) {
//			SetAnnotationID(v+v).
//		}).
//		Exec(ctx)
func (oaafc *OncallAnnotationAlertFeedbackCreate) OnConflict(opts ...sql.ConflictOption) *OncallAnnotationAlertFeedbackUpsertOne {
	oaafc.conflict = opts
	return &OncallAnnotationAlertFeedbackUpsertOne{
		create: oaafc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OncallAnnotationAlertFeedback.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oaafc *OncallAnnotationAlertFeedbackCreate) OnConflictColumns(columns ...string) *OncallAnnotationAlertFeedbackUpsertOne {
	oaafc.conflict = append(oaafc.conflict, sql.ConflictColumns(columns...))
	return &OncallAnnotationAlertFeedbackUpsertOne{
		create: oaafc,
	}
}

type (
	// OncallAnnotationAlertFeedbackUpsertOne is the builder for "upsert"-ing
	//  one OncallAnnotationAlertFeedback node.
	OncallAnnotationAlertFeedbackUpsertOne struct {
		create *OncallAnnotationAlertFeedbackCreate
	}

	// OncallAnnotationAlertFeedbackUpsert is the "OnConflict" setter.
	OncallAnnotationAlertFeedbackUpsert struct {
		*sql.UpdateSet
	}
)

// SetAnnotationID sets the "annotation_id" field.
func (u *OncallAnnotationAlertFeedbackUpsert) SetAnnotationID(v uuid.UUID) *OncallAnnotationAlertFeedbackUpsert {
	u.Set(oncallannotationalertfeedback.FieldAnnotationID, v)
	return u
}

// UpdateAnnotationID sets the "annotation_id" field to the value that was provided on create.
func (u *OncallAnnotationAlertFeedbackUpsert) UpdateAnnotationID() *OncallAnnotationAlertFeedbackUpsert {
	u.SetExcluded(oncallannotationalertfeedback.FieldAnnotationID)
	return u
}

// SetActionable sets the "actionable" field.
func (u *OncallAnnotationAlertFeedbackUpsert) SetActionable(v bool) *OncallAnnotationAlertFeedbackUpsert {
	u.Set(oncallannotationalertfeedback.FieldActionable, v)
	return u
}

// UpdateActionable sets the "actionable" field to the value that was provided on create.
func (u *OncallAnnotationAlertFeedbackUpsert) UpdateActionable() *OncallAnnotationAlertFeedbackUpsert {
	u.SetExcluded(oncallannotationalertfeedback.FieldActionable)
	return u
}

// SetAccurate sets the "accurate" field.
func (u *OncallAnnotationAlertFeedbackUpsert) SetAccurate(v oncallannotationalertfeedback.Accurate) *OncallAnnotationAlertFeedbackUpsert {
	u.Set(oncallannotationalertfeedback.FieldAccurate, v)
	return u
}

// UpdateAccurate sets the "accurate" field to the value that was provided on create.
func (u *OncallAnnotationAlertFeedbackUpsert) UpdateAccurate() *OncallAnnotationAlertFeedbackUpsert {
	u.SetExcluded(oncallannotationalertfeedback.FieldAccurate)
	return u
}

// SetDocumentationAvailable sets the "documentation_available" field.
func (u *OncallAnnotationAlertFeedbackUpsert) SetDocumentationAvailable(v oncallannotationalertfeedback.DocumentationAvailable) *OncallAnnotationAlertFeedbackUpsert {
	u.Set(oncallannotationalertfeedback.FieldDocumentationAvailable, v)
	return u
}

// UpdateDocumentationAvailable sets the "documentation_available" field to the value that was provided on create.
func (u *OncallAnnotationAlertFeedbackUpsert) UpdateDocumentationAvailable() *OncallAnnotationAlertFeedbackUpsert {
	u.SetExcluded(oncallannotationalertfeedback.FieldDocumentationAvailable)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OncallAnnotationAlertFeedback.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oncallannotationalertfeedback.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OncallAnnotationAlertFeedbackUpsertOne) UpdateNewValues() *OncallAnnotationAlertFeedbackUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(oncallannotationalertfeedback.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OncallAnnotationAlertFeedback.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OncallAnnotationAlertFeedbackUpsertOne) Ignore() *OncallAnnotationAlertFeedbackUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OncallAnnotationAlertFeedbackUpsertOne) DoNothing() *OncallAnnotationAlertFeedbackUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OncallAnnotationAlertFeedbackCreate.OnConflict
// documentation for more info.
func (u *OncallAnnotationAlertFeedbackUpsertOne) Update(set func(*OncallAnnotationAlertFeedbackUpsert)) *OncallAnnotationAlertFeedbackUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OncallAnnotationAlertFeedbackUpsert{UpdateSet: update})
	}))
	return u
}

// SetAnnotationID sets the "annotation_id" field.
func (u *OncallAnnotationAlertFeedbackUpsertOne) SetAnnotationID(v uuid.UUID) *OncallAnnotationAlertFeedbackUpsertOne {
	return u.Update(func(s *OncallAnnotationAlertFeedbackUpsert) {
		s.SetAnnotationID(v)
	})
}

// UpdateAnnotationID sets the "annotation_id" field to the value that was provided on create.
func (u *OncallAnnotationAlertFeedbackUpsertOne) UpdateAnnotationID() *OncallAnnotationAlertFeedbackUpsertOne {
	return u.Update(func(s *OncallAnnotationAlertFeedbackUpsert) {
		s.UpdateAnnotationID()
	})
}

// SetActionable sets the "actionable" field.
func (u *OncallAnnotationAlertFeedbackUpsertOne) SetActionable(v bool) *OncallAnnotationAlertFeedbackUpsertOne {
	return u.Update(func(s *OncallAnnotationAlertFeedbackUpsert) {
		s.SetActionable(v)
	})
}

// UpdateActionable sets the "actionable" field to the value that was provided on create.
func (u *OncallAnnotationAlertFeedbackUpsertOne) UpdateActionable() *OncallAnnotationAlertFeedbackUpsertOne {
	return u.Update(func(s *OncallAnnotationAlertFeedbackUpsert) {
		s.UpdateActionable()
	})
}

// SetAccurate sets the "accurate" field.
func (u *OncallAnnotationAlertFeedbackUpsertOne) SetAccurate(v oncallannotationalertfeedback.Accurate) *OncallAnnotationAlertFeedbackUpsertOne {
	return u.Update(func(s *OncallAnnotationAlertFeedbackUpsert) {
		s.SetAccurate(v)
	})
}

// UpdateAccurate sets the "accurate" field to the value that was provided on create.
func (u *OncallAnnotationAlertFeedbackUpsertOne) UpdateAccurate() *OncallAnnotationAlertFeedbackUpsertOne {
	return u.Update(func(s *OncallAnnotationAlertFeedbackUpsert) {
		s.UpdateAccurate()
	})
}

// SetDocumentationAvailable sets the "documentation_available" field.
func (u *OncallAnnotationAlertFeedbackUpsertOne) SetDocumentationAvailable(v oncallannotationalertfeedback.DocumentationAvailable) *OncallAnnotationAlertFeedbackUpsertOne {
	return u.Update(func(s *OncallAnnotationAlertFeedbackUpsert) {
		s.SetDocumentationAvailable(v)
	})
}

// UpdateDocumentationAvailable sets the "documentation_available" field to the value that was provided on create.
func (u *OncallAnnotationAlertFeedbackUpsertOne) UpdateDocumentationAvailable() *OncallAnnotationAlertFeedbackUpsertOne {
	return u.Update(func(s *OncallAnnotationAlertFeedbackUpsert) {
		s.UpdateDocumentationAvailable()
	})
}

// Exec executes the query.
func (u *OncallAnnotationAlertFeedbackUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OncallAnnotationAlertFeedbackCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OncallAnnotationAlertFeedbackUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OncallAnnotationAlertFeedbackUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: OncallAnnotationAlertFeedbackUpsertOne.ID is not supported by MySQL driver. Use OncallAnnotationAlertFeedbackUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OncallAnnotationAlertFeedbackUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OncallAnnotationAlertFeedbackCreateBulk is the builder for creating many OncallAnnotationAlertFeedback entities in bulk.
type OncallAnnotationAlertFeedbackCreateBulk struct {
	config
	err      error
	builders []*OncallAnnotationAlertFeedbackCreate
	conflict []sql.ConflictOption
}

// Save creates the OncallAnnotationAlertFeedback entities in the database.
func (oaafcb *OncallAnnotationAlertFeedbackCreateBulk) Save(ctx context.Context) ([]*OncallAnnotationAlertFeedback, error) {
	if oaafcb.err != nil {
		return nil, oaafcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(oaafcb.builders))
	nodes := make([]*OncallAnnotationAlertFeedback, len(oaafcb.builders))
	mutators := make([]Mutator, len(oaafcb.builders))
	for i := range oaafcb.builders {
		func(i int, root context.Context) {
			builder := oaafcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OncallAnnotationAlertFeedbackMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oaafcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = oaafcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oaafcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oaafcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oaafcb *OncallAnnotationAlertFeedbackCreateBulk) SaveX(ctx context.Context) []*OncallAnnotationAlertFeedback {
	v, err := oaafcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oaafcb *OncallAnnotationAlertFeedbackCreateBulk) Exec(ctx context.Context) error {
	_, err := oaafcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oaafcb *OncallAnnotationAlertFeedbackCreateBulk) ExecX(ctx context.Context) {
	if err := oaafcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OncallAnnotationAlertFeedback.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OncallAnnotationAlertFeedbackUpsert) {
//			SetAnnotationID(v+v).
//		}).
//		Exec(ctx)
func (oaafcb *OncallAnnotationAlertFeedbackCreateBulk) OnConflict(opts ...sql.ConflictOption) *OncallAnnotationAlertFeedbackUpsertBulk {
	oaafcb.conflict = opts
	return &OncallAnnotationAlertFeedbackUpsertBulk{
		create: oaafcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OncallAnnotationAlertFeedback.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oaafcb *OncallAnnotationAlertFeedbackCreateBulk) OnConflictColumns(columns ...string) *OncallAnnotationAlertFeedbackUpsertBulk {
	oaafcb.conflict = append(oaafcb.conflict, sql.ConflictColumns(columns...))
	return &OncallAnnotationAlertFeedbackUpsertBulk{
		create: oaafcb,
	}
}

// OncallAnnotationAlertFeedbackUpsertBulk is the builder for "upsert"-ing
// a bulk of OncallAnnotationAlertFeedback nodes.
type OncallAnnotationAlertFeedbackUpsertBulk struct {
	create *OncallAnnotationAlertFeedbackCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OncallAnnotationAlertFeedback.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oncallannotationalertfeedback.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OncallAnnotationAlertFeedbackUpsertBulk) UpdateNewValues() *OncallAnnotationAlertFeedbackUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(oncallannotationalertfeedback.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OncallAnnotationAlertFeedback.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OncallAnnotationAlertFeedbackUpsertBulk) Ignore() *OncallAnnotationAlertFeedbackUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OncallAnnotationAlertFeedbackUpsertBulk) DoNothing() *OncallAnnotationAlertFeedbackUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OncallAnnotationAlertFeedbackCreateBulk.OnConflict
// documentation for more info.
func (u *OncallAnnotationAlertFeedbackUpsertBulk) Update(set func(*OncallAnnotationAlertFeedbackUpsert)) *OncallAnnotationAlertFeedbackUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OncallAnnotationAlertFeedbackUpsert{UpdateSet: update})
	}))
	return u
}

// SetAnnotationID sets the "annotation_id" field.
func (u *OncallAnnotationAlertFeedbackUpsertBulk) SetAnnotationID(v uuid.UUID) *OncallAnnotationAlertFeedbackUpsertBulk {
	return u.Update(func(s *OncallAnnotationAlertFeedbackUpsert) {
		s.SetAnnotationID(v)
	})
}

// UpdateAnnotationID sets the "annotation_id" field to the value that was provided on create.
func (u *OncallAnnotationAlertFeedbackUpsertBulk) UpdateAnnotationID() *OncallAnnotationAlertFeedbackUpsertBulk {
	return u.Update(func(s *OncallAnnotationAlertFeedbackUpsert) {
		s.UpdateAnnotationID()
	})
}

// SetActionable sets the "actionable" field.
func (u *OncallAnnotationAlertFeedbackUpsertBulk) SetActionable(v bool) *OncallAnnotationAlertFeedbackUpsertBulk {
	return u.Update(func(s *OncallAnnotationAlertFeedbackUpsert) {
		s.SetActionable(v)
	})
}

// UpdateActionable sets the "actionable" field to the value that was provided on create.
func (u *OncallAnnotationAlertFeedbackUpsertBulk) UpdateActionable() *OncallAnnotationAlertFeedbackUpsertBulk {
	return u.Update(func(s *OncallAnnotationAlertFeedbackUpsert) {
		s.UpdateActionable()
	})
}

// SetAccurate sets the "accurate" field.
func (u *OncallAnnotationAlertFeedbackUpsertBulk) SetAccurate(v oncallannotationalertfeedback.Accurate) *OncallAnnotationAlertFeedbackUpsertBulk {
	return u.Update(func(s *OncallAnnotationAlertFeedbackUpsert) {
		s.SetAccurate(v)
	})
}

// UpdateAccurate sets the "accurate" field to the value that was provided on create.
func (u *OncallAnnotationAlertFeedbackUpsertBulk) UpdateAccurate() *OncallAnnotationAlertFeedbackUpsertBulk {
	return u.Update(func(s *OncallAnnotationAlertFeedbackUpsert) {
		s.UpdateAccurate()
	})
}

// SetDocumentationAvailable sets the "documentation_available" field.
func (u *OncallAnnotationAlertFeedbackUpsertBulk) SetDocumentationAvailable(v oncallannotationalertfeedback.DocumentationAvailable) *OncallAnnotationAlertFeedbackUpsertBulk {
	return u.Update(func(s *OncallAnnotationAlertFeedbackUpsert) {
		s.SetDocumentationAvailable(v)
	})
}

// UpdateDocumentationAvailable sets the "documentation_available" field to the value that was provided on create.
func (u *OncallAnnotationAlertFeedbackUpsertBulk) UpdateDocumentationAvailable() *OncallAnnotationAlertFeedbackUpsertBulk {
	return u.Update(func(s *OncallAnnotationAlertFeedbackUpsert) {
		s.UpdateDocumentationAvailable()
	})
}

// Exec executes the query.
func (u *OncallAnnotationAlertFeedbackUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OncallAnnotationAlertFeedbackCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OncallAnnotationAlertFeedbackCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OncallAnnotationAlertFeedbackUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
