// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/twohundreds/rezible/ent/oncallusershift"
	"github.com/twohundreds/rezible/ent/oncallusershifthandover"
)

// OncallUserShiftHandoverCreate is the builder for creating a OncallUserShiftHandover entity.
type OncallUserShiftHandoverCreate struct {
	config
	mutation *OncallUserShiftHandoverMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetShiftID sets the "shift_id" field.
func (oushc *OncallUserShiftHandoverCreate) SetShiftID(u uuid.UUID) *OncallUserShiftHandoverCreate {
	oushc.mutation.SetShiftID(u)
	return oushc
}

// SetCreatedAt sets the "created_at" field.
func (oushc *OncallUserShiftHandoverCreate) SetCreatedAt(t time.Time) *OncallUserShiftHandoverCreate {
	oushc.mutation.SetCreatedAt(t)
	return oushc
}

// SetUpdatedAt sets the "updated_at" field.
func (oushc *OncallUserShiftHandoverCreate) SetUpdatedAt(t time.Time) *OncallUserShiftHandoverCreate {
	oushc.mutation.SetUpdatedAt(t)
	return oushc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oushc *OncallUserShiftHandoverCreate) SetNillableUpdatedAt(t *time.Time) *OncallUserShiftHandoverCreate {
	if t != nil {
		oushc.SetUpdatedAt(*t)
	}
	return oushc
}

// SetSentAt sets the "sent_at" field.
func (oushc *OncallUserShiftHandoverCreate) SetSentAt(t time.Time) *OncallUserShiftHandoverCreate {
	oushc.mutation.SetSentAt(t)
	return oushc
}

// SetNillableSentAt sets the "sent_at" field if the given value is not nil.
func (oushc *OncallUserShiftHandoverCreate) SetNillableSentAt(t *time.Time) *OncallUserShiftHandoverCreate {
	if t != nil {
		oushc.SetSentAt(*t)
	}
	return oushc
}

// SetContents sets the "contents" field.
func (oushc *OncallUserShiftHandoverCreate) SetContents(b []byte) *OncallUserShiftHandoverCreate {
	oushc.mutation.SetContents(b)
	return oushc
}

// SetID sets the "id" field.
func (oushc *OncallUserShiftHandoverCreate) SetID(u uuid.UUID) *OncallUserShiftHandoverCreate {
	oushc.mutation.SetID(u)
	return oushc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (oushc *OncallUserShiftHandoverCreate) SetNillableID(u *uuid.UUID) *OncallUserShiftHandoverCreate {
	if u != nil {
		oushc.SetID(*u)
	}
	return oushc
}

// SetShift sets the "shift" edge to the OncallUserShift entity.
func (oushc *OncallUserShiftHandoverCreate) SetShift(o *OncallUserShift) *OncallUserShiftHandoverCreate {
	return oushc.SetShiftID(o.ID)
}

// Mutation returns the OncallUserShiftHandoverMutation object of the builder.
func (oushc *OncallUserShiftHandoverCreate) Mutation() *OncallUserShiftHandoverMutation {
	return oushc.mutation
}

// Save creates the OncallUserShiftHandover in the database.
func (oushc *OncallUserShiftHandoverCreate) Save(ctx context.Context) (*OncallUserShiftHandover, error) {
	oushc.defaults()
	return withHooks(ctx, oushc.sqlSave, oushc.mutation, oushc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oushc *OncallUserShiftHandoverCreate) SaveX(ctx context.Context) *OncallUserShiftHandover {
	v, err := oushc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oushc *OncallUserShiftHandoverCreate) Exec(ctx context.Context) error {
	_, err := oushc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oushc *OncallUserShiftHandoverCreate) ExecX(ctx context.Context) {
	if err := oushc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oushc *OncallUserShiftHandoverCreate) defaults() {
	if _, ok := oushc.mutation.UpdatedAt(); !ok {
		v := oncallusershifthandover.DefaultUpdatedAt()
		oushc.mutation.SetUpdatedAt(v)
	}
	if _, ok := oushc.mutation.ID(); !ok {
		v := oncallusershifthandover.DefaultID()
		oushc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oushc *OncallUserShiftHandoverCreate) check() error {
	if _, ok := oushc.mutation.ShiftID(); !ok {
		return &ValidationError{Name: "shift_id", err: errors.New(`ent: missing required field "OncallUserShiftHandover.shift_id"`)}
	}
	if _, ok := oushc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OncallUserShiftHandover.created_at"`)}
	}
	if _, ok := oushc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "OncallUserShiftHandover.updated_at"`)}
	}
	if _, ok := oushc.mutation.Contents(); !ok {
		return &ValidationError{Name: "contents", err: errors.New(`ent: missing required field "OncallUserShiftHandover.contents"`)}
	}
	if len(oushc.mutation.ShiftIDs()) == 0 {
		return &ValidationError{Name: "shift", err: errors.New(`ent: missing required edge "OncallUserShiftHandover.shift"`)}
	}
	return nil
}

func (oushc *OncallUserShiftHandoverCreate) sqlSave(ctx context.Context) (*OncallUserShiftHandover, error) {
	if err := oushc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oushc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oushc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	oushc.mutation.id = &_node.ID
	oushc.mutation.done = true
	return _node, nil
}

func (oushc *OncallUserShiftHandoverCreate) createSpec() (*OncallUserShiftHandover, *sqlgraph.CreateSpec) {
	var (
		_node = &OncallUserShiftHandover{config: oushc.config}
		_spec = sqlgraph.NewCreateSpec(oncallusershifthandover.Table, sqlgraph.NewFieldSpec(oncallusershifthandover.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = oushc.conflict
	if id, ok := oushc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := oushc.mutation.CreatedAt(); ok {
		_spec.SetField(oncallusershifthandover.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := oushc.mutation.UpdatedAt(); ok {
		_spec.SetField(oncallusershifthandover.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := oushc.mutation.SentAt(); ok {
		_spec.SetField(oncallusershifthandover.FieldSentAt, field.TypeTime, value)
		_node.SentAt = value
	}
	if value, ok := oushc.mutation.Contents(); ok {
		_spec.SetField(oncallusershifthandover.FieldContents, field.TypeBytes, value)
		_node.Contents = value
	}
	if nodes := oushc.mutation.ShiftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   oncallusershifthandover.ShiftTable,
			Columns: []string{oncallusershifthandover.ShiftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallusershift.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ShiftID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OncallUserShiftHandover.Create().
//		SetShiftID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OncallUserShiftHandoverUpsert) {
//			SetShiftID(v+v).
//		}).
//		Exec(ctx)
func (oushc *OncallUserShiftHandoverCreate) OnConflict(opts ...sql.ConflictOption) *OncallUserShiftHandoverUpsertOne {
	oushc.conflict = opts
	return &OncallUserShiftHandoverUpsertOne{
		create: oushc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OncallUserShiftHandover.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oushc *OncallUserShiftHandoverCreate) OnConflictColumns(columns ...string) *OncallUserShiftHandoverUpsertOne {
	oushc.conflict = append(oushc.conflict, sql.ConflictColumns(columns...))
	return &OncallUserShiftHandoverUpsertOne{
		create: oushc,
	}
}

type (
	// OncallUserShiftHandoverUpsertOne is the builder for "upsert"-ing
	//  one OncallUserShiftHandover node.
	OncallUserShiftHandoverUpsertOne struct {
		create *OncallUserShiftHandoverCreate
	}

	// OncallUserShiftHandoverUpsert is the "OnConflict" setter.
	OncallUserShiftHandoverUpsert struct {
		*sql.UpdateSet
	}
)

// SetShiftID sets the "shift_id" field.
func (u *OncallUserShiftHandoverUpsert) SetShiftID(v uuid.UUID) *OncallUserShiftHandoverUpsert {
	u.Set(oncallusershifthandover.FieldShiftID, v)
	return u
}

// UpdateShiftID sets the "shift_id" field to the value that was provided on create.
func (u *OncallUserShiftHandoverUpsert) UpdateShiftID() *OncallUserShiftHandoverUpsert {
	u.SetExcluded(oncallusershifthandover.FieldShiftID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *OncallUserShiftHandoverUpsert) SetCreatedAt(v time.Time) *OncallUserShiftHandoverUpsert {
	u.Set(oncallusershifthandover.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OncallUserShiftHandoverUpsert) UpdateCreatedAt() *OncallUserShiftHandoverUpsert {
	u.SetExcluded(oncallusershifthandover.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OncallUserShiftHandoverUpsert) SetUpdatedAt(v time.Time) *OncallUserShiftHandoverUpsert {
	u.Set(oncallusershifthandover.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OncallUserShiftHandoverUpsert) UpdateUpdatedAt() *OncallUserShiftHandoverUpsert {
	u.SetExcluded(oncallusershifthandover.FieldUpdatedAt)
	return u
}

// SetSentAt sets the "sent_at" field.
func (u *OncallUserShiftHandoverUpsert) SetSentAt(v time.Time) *OncallUserShiftHandoverUpsert {
	u.Set(oncallusershifthandover.FieldSentAt, v)
	return u
}

// UpdateSentAt sets the "sent_at" field to the value that was provided on create.
func (u *OncallUserShiftHandoverUpsert) UpdateSentAt() *OncallUserShiftHandoverUpsert {
	u.SetExcluded(oncallusershifthandover.FieldSentAt)
	return u
}

// ClearSentAt clears the value of the "sent_at" field.
func (u *OncallUserShiftHandoverUpsert) ClearSentAt() *OncallUserShiftHandoverUpsert {
	u.SetNull(oncallusershifthandover.FieldSentAt)
	return u
}

// SetContents sets the "contents" field.
func (u *OncallUserShiftHandoverUpsert) SetContents(v []byte) *OncallUserShiftHandoverUpsert {
	u.Set(oncallusershifthandover.FieldContents, v)
	return u
}

// UpdateContents sets the "contents" field to the value that was provided on create.
func (u *OncallUserShiftHandoverUpsert) UpdateContents() *OncallUserShiftHandoverUpsert {
	u.SetExcluded(oncallusershifthandover.FieldContents)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OncallUserShiftHandover.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oncallusershifthandover.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OncallUserShiftHandoverUpsertOne) UpdateNewValues() *OncallUserShiftHandoverUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(oncallusershifthandover.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OncallUserShiftHandover.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OncallUserShiftHandoverUpsertOne) Ignore() *OncallUserShiftHandoverUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OncallUserShiftHandoverUpsertOne) DoNothing() *OncallUserShiftHandoverUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OncallUserShiftHandoverCreate.OnConflict
// documentation for more info.
func (u *OncallUserShiftHandoverUpsertOne) Update(set func(*OncallUserShiftHandoverUpsert)) *OncallUserShiftHandoverUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OncallUserShiftHandoverUpsert{UpdateSet: update})
	}))
	return u
}

// SetShiftID sets the "shift_id" field.
func (u *OncallUserShiftHandoverUpsertOne) SetShiftID(v uuid.UUID) *OncallUserShiftHandoverUpsertOne {
	return u.Update(func(s *OncallUserShiftHandoverUpsert) {
		s.SetShiftID(v)
	})
}

// UpdateShiftID sets the "shift_id" field to the value that was provided on create.
func (u *OncallUserShiftHandoverUpsertOne) UpdateShiftID() *OncallUserShiftHandoverUpsertOne {
	return u.Update(func(s *OncallUserShiftHandoverUpsert) {
		s.UpdateShiftID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *OncallUserShiftHandoverUpsertOne) SetCreatedAt(v time.Time) *OncallUserShiftHandoverUpsertOne {
	return u.Update(func(s *OncallUserShiftHandoverUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OncallUserShiftHandoverUpsertOne) UpdateCreatedAt() *OncallUserShiftHandoverUpsertOne {
	return u.Update(func(s *OncallUserShiftHandoverUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OncallUserShiftHandoverUpsertOne) SetUpdatedAt(v time.Time) *OncallUserShiftHandoverUpsertOne {
	return u.Update(func(s *OncallUserShiftHandoverUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OncallUserShiftHandoverUpsertOne) UpdateUpdatedAt() *OncallUserShiftHandoverUpsertOne {
	return u.Update(func(s *OncallUserShiftHandoverUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetSentAt sets the "sent_at" field.
func (u *OncallUserShiftHandoverUpsertOne) SetSentAt(v time.Time) *OncallUserShiftHandoverUpsertOne {
	return u.Update(func(s *OncallUserShiftHandoverUpsert) {
		s.SetSentAt(v)
	})
}

// UpdateSentAt sets the "sent_at" field to the value that was provided on create.
func (u *OncallUserShiftHandoverUpsertOne) UpdateSentAt() *OncallUserShiftHandoverUpsertOne {
	return u.Update(func(s *OncallUserShiftHandoverUpsert) {
		s.UpdateSentAt()
	})
}

// ClearSentAt clears the value of the "sent_at" field.
func (u *OncallUserShiftHandoverUpsertOne) ClearSentAt() *OncallUserShiftHandoverUpsertOne {
	return u.Update(func(s *OncallUserShiftHandoverUpsert) {
		s.ClearSentAt()
	})
}

// SetContents sets the "contents" field.
func (u *OncallUserShiftHandoverUpsertOne) SetContents(v []byte) *OncallUserShiftHandoverUpsertOne {
	return u.Update(func(s *OncallUserShiftHandoverUpsert) {
		s.SetContents(v)
	})
}

// UpdateContents sets the "contents" field to the value that was provided on create.
func (u *OncallUserShiftHandoverUpsertOne) UpdateContents() *OncallUserShiftHandoverUpsertOne {
	return u.Update(func(s *OncallUserShiftHandoverUpsert) {
		s.UpdateContents()
	})
}

// Exec executes the query.
func (u *OncallUserShiftHandoverUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OncallUserShiftHandoverCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OncallUserShiftHandoverUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OncallUserShiftHandoverUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: OncallUserShiftHandoverUpsertOne.ID is not supported by MySQL driver. Use OncallUserShiftHandoverUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OncallUserShiftHandoverUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OncallUserShiftHandoverCreateBulk is the builder for creating many OncallUserShiftHandover entities in bulk.
type OncallUserShiftHandoverCreateBulk struct {
	config
	err      error
	builders []*OncallUserShiftHandoverCreate
	conflict []sql.ConflictOption
}

// Save creates the OncallUserShiftHandover entities in the database.
func (oushcb *OncallUserShiftHandoverCreateBulk) Save(ctx context.Context) ([]*OncallUserShiftHandover, error) {
	if oushcb.err != nil {
		return nil, oushcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(oushcb.builders))
	nodes := make([]*OncallUserShiftHandover, len(oushcb.builders))
	mutators := make([]Mutator, len(oushcb.builders))
	for i := range oushcb.builders {
		func(i int, root context.Context) {
			builder := oushcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OncallUserShiftHandoverMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oushcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = oushcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oushcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oushcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oushcb *OncallUserShiftHandoverCreateBulk) SaveX(ctx context.Context) []*OncallUserShiftHandover {
	v, err := oushcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oushcb *OncallUserShiftHandoverCreateBulk) Exec(ctx context.Context) error {
	_, err := oushcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oushcb *OncallUserShiftHandoverCreateBulk) ExecX(ctx context.Context) {
	if err := oushcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OncallUserShiftHandover.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OncallUserShiftHandoverUpsert) {
//			SetShiftID(v+v).
//		}).
//		Exec(ctx)
func (oushcb *OncallUserShiftHandoverCreateBulk) OnConflict(opts ...sql.ConflictOption) *OncallUserShiftHandoverUpsertBulk {
	oushcb.conflict = opts
	return &OncallUserShiftHandoverUpsertBulk{
		create: oushcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OncallUserShiftHandover.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oushcb *OncallUserShiftHandoverCreateBulk) OnConflictColumns(columns ...string) *OncallUserShiftHandoverUpsertBulk {
	oushcb.conflict = append(oushcb.conflict, sql.ConflictColumns(columns...))
	return &OncallUserShiftHandoverUpsertBulk{
		create: oushcb,
	}
}

// OncallUserShiftHandoverUpsertBulk is the builder for "upsert"-ing
// a bulk of OncallUserShiftHandover nodes.
type OncallUserShiftHandoverUpsertBulk struct {
	create *OncallUserShiftHandoverCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OncallUserShiftHandover.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oncallusershifthandover.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OncallUserShiftHandoverUpsertBulk) UpdateNewValues() *OncallUserShiftHandoverUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(oncallusershifthandover.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OncallUserShiftHandover.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OncallUserShiftHandoverUpsertBulk) Ignore() *OncallUserShiftHandoverUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OncallUserShiftHandoverUpsertBulk) DoNothing() *OncallUserShiftHandoverUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OncallUserShiftHandoverCreateBulk.OnConflict
// documentation for more info.
func (u *OncallUserShiftHandoverUpsertBulk) Update(set func(*OncallUserShiftHandoverUpsert)) *OncallUserShiftHandoverUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OncallUserShiftHandoverUpsert{UpdateSet: update})
	}))
	return u
}

// SetShiftID sets the "shift_id" field.
func (u *OncallUserShiftHandoverUpsertBulk) SetShiftID(v uuid.UUID) *OncallUserShiftHandoverUpsertBulk {
	return u.Update(func(s *OncallUserShiftHandoverUpsert) {
		s.SetShiftID(v)
	})
}

// UpdateShiftID sets the "shift_id" field to the value that was provided on create.
func (u *OncallUserShiftHandoverUpsertBulk) UpdateShiftID() *OncallUserShiftHandoverUpsertBulk {
	return u.Update(func(s *OncallUserShiftHandoverUpsert) {
		s.UpdateShiftID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *OncallUserShiftHandoverUpsertBulk) SetCreatedAt(v time.Time) *OncallUserShiftHandoverUpsertBulk {
	return u.Update(func(s *OncallUserShiftHandoverUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OncallUserShiftHandoverUpsertBulk) UpdateCreatedAt() *OncallUserShiftHandoverUpsertBulk {
	return u.Update(func(s *OncallUserShiftHandoverUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OncallUserShiftHandoverUpsertBulk) SetUpdatedAt(v time.Time) *OncallUserShiftHandoverUpsertBulk {
	return u.Update(func(s *OncallUserShiftHandoverUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OncallUserShiftHandoverUpsertBulk) UpdateUpdatedAt() *OncallUserShiftHandoverUpsertBulk {
	return u.Update(func(s *OncallUserShiftHandoverUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetSentAt sets the "sent_at" field.
func (u *OncallUserShiftHandoverUpsertBulk) SetSentAt(v time.Time) *OncallUserShiftHandoverUpsertBulk {
	return u.Update(func(s *OncallUserShiftHandoverUpsert) {
		s.SetSentAt(v)
	})
}

// UpdateSentAt sets the "sent_at" field to the value that was provided on create.
func (u *OncallUserShiftHandoverUpsertBulk) UpdateSentAt() *OncallUserShiftHandoverUpsertBulk {
	return u.Update(func(s *OncallUserShiftHandoverUpsert) {
		s.UpdateSentAt()
	})
}

// ClearSentAt clears the value of the "sent_at" field.
func (u *OncallUserShiftHandoverUpsertBulk) ClearSentAt() *OncallUserShiftHandoverUpsertBulk {
	return u.Update(func(s *OncallUserShiftHandoverUpsert) {
		s.ClearSentAt()
	})
}

// SetContents sets the "contents" field.
func (u *OncallUserShiftHandoverUpsertBulk) SetContents(v []byte) *OncallUserShiftHandoverUpsertBulk {
	return u.Update(func(s *OncallUserShiftHandoverUpsert) {
		s.SetContents(v)
	})
}

// UpdateContents sets the "contents" field to the value that was provided on create.
func (u *OncallUserShiftHandoverUpsertBulk) UpdateContents() *OncallUserShiftHandoverUpsertBulk {
	return u.Update(func(s *OncallUserShiftHandoverUpsert) {
		s.UpdateContents()
	})
}

// Exec executes the query.
func (u *OncallUserShiftHandoverUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OncallUserShiftHandoverCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OncallUserShiftHandoverCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OncallUserShiftHandoverUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
