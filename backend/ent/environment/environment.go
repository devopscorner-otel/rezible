// Code generated by ent, DO NOT EDIT.

package environment

import (
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the environment type in the database.
	Label = "environment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldArchiveTime holds the string denoting the archive_time field in the database.
	FieldArchiveTime = "archive_time"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeIncidents holds the string denoting the incidents edge name in mutations.
	EdgeIncidents = "incidents"
	// Table holds the table name of the environment in the database.
	Table = "environments"
	// IncidentsTable is the table that holds the incidents relation/edge. The primary key declared below.
	IncidentsTable = "incident_environments"
	// IncidentsInverseTable is the table name for the Incident entity.
	// It exists in this package in order to avoid circular dependency with the "incident" package.
	IncidentsInverseTable = "incidents"
)

// Columns holds all SQL columns for environment fields.
var Columns = []string{
	FieldID,
	FieldArchiveTime,
	FieldName,
}

var (
	// IncidentsPrimaryKey and IncidentsColumn2 are the table columns denoting the
	// primary key for the incidents relation (M2M).
	IncidentsPrimaryKey = []string{"incident_id", "environment_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/twohundreds/rezible/ent/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Environment queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByArchiveTime orders the results by the archive_time field.
func ByArchiveTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArchiveTime, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByIncidentsCount orders the results by incidents count.
func ByIncidentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIncidentsStep(), opts...)
	}
}

// ByIncidents orders the results by incidents terms.
func ByIncidents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIncidentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newIncidentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IncidentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, IncidentsTable, IncidentsPrimaryKey...),
	)
}
