// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/incidentevent"
	"github.com/rezible/rezible/ent/incidenteventcontext"
	"github.com/rezible/rezible/ent/tenant"
)

// IncidentEventContextCreate is the builder for creating a IncidentEventContext entity.
type IncidentEventContextCreate struct {
	config
	mutation *IncidentEventContextMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (iecc *IncidentEventContextCreate) SetTenantID(i int) *IncidentEventContextCreate {
	iecc.mutation.SetTenantID(i)
	return iecc
}

// SetSystemState sets the "system_state" field.
func (iecc *IncidentEventContextCreate) SetSystemState(s string) *IncidentEventContextCreate {
	iecc.mutation.SetSystemState(s)
	return iecc
}

// SetNillableSystemState sets the "system_state" field if the given value is not nil.
func (iecc *IncidentEventContextCreate) SetNillableSystemState(s *string) *IncidentEventContextCreate {
	if s != nil {
		iecc.SetSystemState(*s)
	}
	return iecc
}

// SetDecisionOptions sets the "decision_options" field.
func (iecc *IncidentEventContextCreate) SetDecisionOptions(s []string) *IncidentEventContextCreate {
	iecc.mutation.SetDecisionOptions(s)
	return iecc
}

// SetDecisionRationale sets the "decision_rationale" field.
func (iecc *IncidentEventContextCreate) SetDecisionRationale(s string) *IncidentEventContextCreate {
	iecc.mutation.SetDecisionRationale(s)
	return iecc
}

// SetNillableDecisionRationale sets the "decision_rationale" field if the given value is not nil.
func (iecc *IncidentEventContextCreate) SetNillableDecisionRationale(s *string) *IncidentEventContextCreate {
	if s != nil {
		iecc.SetDecisionRationale(*s)
	}
	return iecc
}

// SetInvolvedPersonnel sets the "involved_personnel" field.
func (iecc *IncidentEventContextCreate) SetInvolvedPersonnel(s []string) *IncidentEventContextCreate {
	iecc.mutation.SetInvolvedPersonnel(s)
	return iecc
}

// SetCreatedAt sets the "created_at" field.
func (iecc *IncidentEventContextCreate) SetCreatedAt(t time.Time) *IncidentEventContextCreate {
	iecc.mutation.SetCreatedAt(t)
	return iecc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (iecc *IncidentEventContextCreate) SetNillableCreatedAt(t *time.Time) *IncidentEventContextCreate {
	if t != nil {
		iecc.SetCreatedAt(*t)
	}
	return iecc
}

// SetID sets the "id" field.
func (iecc *IncidentEventContextCreate) SetID(u uuid.UUID) *IncidentEventContextCreate {
	iecc.mutation.SetID(u)
	return iecc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (iecc *IncidentEventContextCreate) SetNillableID(u *uuid.UUID) *IncidentEventContextCreate {
	if u != nil {
		iecc.SetID(*u)
	}
	return iecc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (iecc *IncidentEventContextCreate) SetTenant(t *Tenant) *IncidentEventContextCreate {
	return iecc.SetTenantID(t.ID)
}

// SetEventID sets the "event" edge to the IncidentEvent entity by ID.
func (iecc *IncidentEventContextCreate) SetEventID(id uuid.UUID) *IncidentEventContextCreate {
	iecc.mutation.SetEventID(id)
	return iecc
}

// SetEvent sets the "event" edge to the IncidentEvent entity.
func (iecc *IncidentEventContextCreate) SetEvent(i *IncidentEvent) *IncidentEventContextCreate {
	return iecc.SetEventID(i.ID)
}

// Mutation returns the IncidentEventContextMutation object of the builder.
func (iecc *IncidentEventContextCreate) Mutation() *IncidentEventContextMutation {
	return iecc.mutation
}

// Save creates the IncidentEventContext in the database.
func (iecc *IncidentEventContextCreate) Save(ctx context.Context) (*IncidentEventContext, error) {
	if err := iecc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, iecc.sqlSave, iecc.mutation, iecc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (iecc *IncidentEventContextCreate) SaveX(ctx context.Context) *IncidentEventContext {
	v, err := iecc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iecc *IncidentEventContextCreate) Exec(ctx context.Context) error {
	_, err := iecc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iecc *IncidentEventContextCreate) ExecX(ctx context.Context) {
	if err := iecc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iecc *IncidentEventContextCreate) defaults() error {
	if _, ok := iecc.mutation.CreatedAt(); !ok {
		if incidenteventcontext.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized incidenteventcontext.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := incidenteventcontext.DefaultCreatedAt()
		iecc.mutation.SetCreatedAt(v)
	}
	if _, ok := iecc.mutation.ID(); !ok {
		if incidenteventcontext.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized incidenteventcontext.DefaultID (forgotten import ent/runtime?)")
		}
		v := incidenteventcontext.DefaultID()
		iecc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (iecc *IncidentEventContextCreate) check() error {
	if _, ok := iecc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "IncidentEventContext.tenant_id"`)}
	}
	if _, ok := iecc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "IncidentEventContext.created_at"`)}
	}
	if len(iecc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "IncidentEventContext.tenant"`)}
	}
	if len(iecc.mutation.EventIDs()) == 0 {
		return &ValidationError{Name: "event", err: errors.New(`ent: missing required edge "IncidentEventContext.event"`)}
	}
	return nil
}

func (iecc *IncidentEventContextCreate) sqlSave(ctx context.Context) (*IncidentEventContext, error) {
	if err := iecc.check(); err != nil {
		return nil, err
	}
	_node, _spec := iecc.createSpec()
	if err := sqlgraph.CreateNode(ctx, iecc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	iecc.mutation.id = &_node.ID
	iecc.mutation.done = true
	return _node, nil
}

func (iecc *IncidentEventContextCreate) createSpec() (*IncidentEventContext, *sqlgraph.CreateSpec) {
	var (
		_node = &IncidentEventContext{config: iecc.config}
		_spec = sqlgraph.NewCreateSpec(incidenteventcontext.Table, sqlgraph.NewFieldSpec(incidenteventcontext.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = iecc.conflict
	if id, ok := iecc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := iecc.mutation.SystemState(); ok {
		_spec.SetField(incidenteventcontext.FieldSystemState, field.TypeString, value)
		_node.SystemState = value
	}
	if value, ok := iecc.mutation.DecisionOptions(); ok {
		_spec.SetField(incidenteventcontext.FieldDecisionOptions, field.TypeJSON, value)
		_node.DecisionOptions = value
	}
	if value, ok := iecc.mutation.DecisionRationale(); ok {
		_spec.SetField(incidenteventcontext.FieldDecisionRationale, field.TypeString, value)
		_node.DecisionRationale = value
	}
	if value, ok := iecc.mutation.InvolvedPersonnel(); ok {
		_spec.SetField(incidenteventcontext.FieldInvolvedPersonnel, field.TypeJSON, value)
		_node.InvolvedPersonnel = value
	}
	if value, ok := iecc.mutation.CreatedAt(); ok {
		_spec.SetField(incidenteventcontext.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := iecc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidenteventcontext.TenantTable,
			Columns: []string{incidenteventcontext.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := iecc.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   incidenteventcontext.EventTable,
			Columns: []string{incidenteventcontext.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentevent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.incident_event_context = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IncidentEventContext.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IncidentEventContextUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (iecc *IncidentEventContextCreate) OnConflict(opts ...sql.ConflictOption) *IncidentEventContextUpsertOne {
	iecc.conflict = opts
	return &IncidentEventContextUpsertOne{
		create: iecc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IncidentEventContext.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (iecc *IncidentEventContextCreate) OnConflictColumns(columns ...string) *IncidentEventContextUpsertOne {
	iecc.conflict = append(iecc.conflict, sql.ConflictColumns(columns...))
	return &IncidentEventContextUpsertOne{
		create: iecc,
	}
}

type (
	// IncidentEventContextUpsertOne is the builder for "upsert"-ing
	//  one IncidentEventContext node.
	IncidentEventContextUpsertOne struct {
		create *IncidentEventContextCreate
	}

	// IncidentEventContextUpsert is the "OnConflict" setter.
	IncidentEventContextUpsert struct {
		*sql.UpdateSet
	}
)

// SetSystemState sets the "system_state" field.
func (u *IncidentEventContextUpsert) SetSystemState(v string) *IncidentEventContextUpsert {
	u.Set(incidenteventcontext.FieldSystemState, v)
	return u
}

// UpdateSystemState sets the "system_state" field to the value that was provided on create.
func (u *IncidentEventContextUpsert) UpdateSystemState() *IncidentEventContextUpsert {
	u.SetExcluded(incidenteventcontext.FieldSystemState)
	return u
}

// ClearSystemState clears the value of the "system_state" field.
func (u *IncidentEventContextUpsert) ClearSystemState() *IncidentEventContextUpsert {
	u.SetNull(incidenteventcontext.FieldSystemState)
	return u
}

// SetDecisionOptions sets the "decision_options" field.
func (u *IncidentEventContextUpsert) SetDecisionOptions(v []string) *IncidentEventContextUpsert {
	u.Set(incidenteventcontext.FieldDecisionOptions, v)
	return u
}

// UpdateDecisionOptions sets the "decision_options" field to the value that was provided on create.
func (u *IncidentEventContextUpsert) UpdateDecisionOptions() *IncidentEventContextUpsert {
	u.SetExcluded(incidenteventcontext.FieldDecisionOptions)
	return u
}

// ClearDecisionOptions clears the value of the "decision_options" field.
func (u *IncidentEventContextUpsert) ClearDecisionOptions() *IncidentEventContextUpsert {
	u.SetNull(incidenteventcontext.FieldDecisionOptions)
	return u
}

// SetDecisionRationale sets the "decision_rationale" field.
func (u *IncidentEventContextUpsert) SetDecisionRationale(v string) *IncidentEventContextUpsert {
	u.Set(incidenteventcontext.FieldDecisionRationale, v)
	return u
}

// UpdateDecisionRationale sets the "decision_rationale" field to the value that was provided on create.
func (u *IncidentEventContextUpsert) UpdateDecisionRationale() *IncidentEventContextUpsert {
	u.SetExcluded(incidenteventcontext.FieldDecisionRationale)
	return u
}

// ClearDecisionRationale clears the value of the "decision_rationale" field.
func (u *IncidentEventContextUpsert) ClearDecisionRationale() *IncidentEventContextUpsert {
	u.SetNull(incidenteventcontext.FieldDecisionRationale)
	return u
}

// SetInvolvedPersonnel sets the "involved_personnel" field.
func (u *IncidentEventContextUpsert) SetInvolvedPersonnel(v []string) *IncidentEventContextUpsert {
	u.Set(incidenteventcontext.FieldInvolvedPersonnel, v)
	return u
}

// UpdateInvolvedPersonnel sets the "involved_personnel" field to the value that was provided on create.
func (u *IncidentEventContextUpsert) UpdateInvolvedPersonnel() *IncidentEventContextUpsert {
	u.SetExcluded(incidenteventcontext.FieldInvolvedPersonnel)
	return u
}

// ClearInvolvedPersonnel clears the value of the "involved_personnel" field.
func (u *IncidentEventContextUpsert) ClearInvolvedPersonnel() *IncidentEventContextUpsert {
	u.SetNull(incidenteventcontext.FieldInvolvedPersonnel)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *IncidentEventContextUpsert) SetCreatedAt(v time.Time) *IncidentEventContextUpsert {
	u.Set(incidenteventcontext.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *IncidentEventContextUpsert) UpdateCreatedAt() *IncidentEventContextUpsert {
	u.SetExcluded(incidenteventcontext.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.IncidentEventContext.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(incidenteventcontext.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IncidentEventContextUpsertOne) UpdateNewValues() *IncidentEventContextUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(incidenteventcontext.FieldID)
		}
		if _, exists := u.create.mutation.TenantID(); exists {
			s.SetIgnore(incidenteventcontext.FieldTenantID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IncidentEventContext.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *IncidentEventContextUpsertOne) Ignore() *IncidentEventContextUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IncidentEventContextUpsertOne) DoNothing() *IncidentEventContextUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IncidentEventContextCreate.OnConflict
// documentation for more info.
func (u *IncidentEventContextUpsertOne) Update(set func(*IncidentEventContextUpsert)) *IncidentEventContextUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IncidentEventContextUpsert{UpdateSet: update})
	}))
	return u
}

// SetSystemState sets the "system_state" field.
func (u *IncidentEventContextUpsertOne) SetSystemState(v string) *IncidentEventContextUpsertOne {
	return u.Update(func(s *IncidentEventContextUpsert) {
		s.SetSystemState(v)
	})
}

// UpdateSystemState sets the "system_state" field to the value that was provided on create.
func (u *IncidentEventContextUpsertOne) UpdateSystemState() *IncidentEventContextUpsertOne {
	return u.Update(func(s *IncidentEventContextUpsert) {
		s.UpdateSystemState()
	})
}

// ClearSystemState clears the value of the "system_state" field.
func (u *IncidentEventContextUpsertOne) ClearSystemState() *IncidentEventContextUpsertOne {
	return u.Update(func(s *IncidentEventContextUpsert) {
		s.ClearSystemState()
	})
}

// SetDecisionOptions sets the "decision_options" field.
func (u *IncidentEventContextUpsertOne) SetDecisionOptions(v []string) *IncidentEventContextUpsertOne {
	return u.Update(func(s *IncidentEventContextUpsert) {
		s.SetDecisionOptions(v)
	})
}

// UpdateDecisionOptions sets the "decision_options" field to the value that was provided on create.
func (u *IncidentEventContextUpsertOne) UpdateDecisionOptions() *IncidentEventContextUpsertOne {
	return u.Update(func(s *IncidentEventContextUpsert) {
		s.UpdateDecisionOptions()
	})
}

// ClearDecisionOptions clears the value of the "decision_options" field.
func (u *IncidentEventContextUpsertOne) ClearDecisionOptions() *IncidentEventContextUpsertOne {
	return u.Update(func(s *IncidentEventContextUpsert) {
		s.ClearDecisionOptions()
	})
}

// SetDecisionRationale sets the "decision_rationale" field.
func (u *IncidentEventContextUpsertOne) SetDecisionRationale(v string) *IncidentEventContextUpsertOne {
	return u.Update(func(s *IncidentEventContextUpsert) {
		s.SetDecisionRationale(v)
	})
}

// UpdateDecisionRationale sets the "decision_rationale" field to the value that was provided on create.
func (u *IncidentEventContextUpsertOne) UpdateDecisionRationale() *IncidentEventContextUpsertOne {
	return u.Update(func(s *IncidentEventContextUpsert) {
		s.UpdateDecisionRationale()
	})
}

// ClearDecisionRationale clears the value of the "decision_rationale" field.
func (u *IncidentEventContextUpsertOne) ClearDecisionRationale() *IncidentEventContextUpsertOne {
	return u.Update(func(s *IncidentEventContextUpsert) {
		s.ClearDecisionRationale()
	})
}

// SetInvolvedPersonnel sets the "involved_personnel" field.
func (u *IncidentEventContextUpsertOne) SetInvolvedPersonnel(v []string) *IncidentEventContextUpsertOne {
	return u.Update(func(s *IncidentEventContextUpsert) {
		s.SetInvolvedPersonnel(v)
	})
}

// UpdateInvolvedPersonnel sets the "involved_personnel" field to the value that was provided on create.
func (u *IncidentEventContextUpsertOne) UpdateInvolvedPersonnel() *IncidentEventContextUpsertOne {
	return u.Update(func(s *IncidentEventContextUpsert) {
		s.UpdateInvolvedPersonnel()
	})
}

// ClearInvolvedPersonnel clears the value of the "involved_personnel" field.
func (u *IncidentEventContextUpsertOne) ClearInvolvedPersonnel() *IncidentEventContextUpsertOne {
	return u.Update(func(s *IncidentEventContextUpsert) {
		s.ClearInvolvedPersonnel()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *IncidentEventContextUpsertOne) SetCreatedAt(v time.Time) *IncidentEventContextUpsertOne {
	return u.Update(func(s *IncidentEventContextUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *IncidentEventContextUpsertOne) UpdateCreatedAt() *IncidentEventContextUpsertOne {
	return u.Update(func(s *IncidentEventContextUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *IncidentEventContextUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IncidentEventContextCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IncidentEventContextUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *IncidentEventContextUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: IncidentEventContextUpsertOne.ID is not supported by MySQL driver. Use IncidentEventContextUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *IncidentEventContextUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// IncidentEventContextCreateBulk is the builder for creating many IncidentEventContext entities in bulk.
type IncidentEventContextCreateBulk struct {
	config
	err      error
	builders []*IncidentEventContextCreate
	conflict []sql.ConflictOption
}

// Save creates the IncidentEventContext entities in the database.
func (ieccb *IncidentEventContextCreateBulk) Save(ctx context.Context) ([]*IncidentEventContext, error) {
	if ieccb.err != nil {
		return nil, ieccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ieccb.builders))
	nodes := make([]*IncidentEventContext, len(ieccb.builders))
	mutators := make([]Mutator, len(ieccb.builders))
	for i := range ieccb.builders {
		func(i int, root context.Context) {
			builder := ieccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IncidentEventContextMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ieccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ieccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ieccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ieccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ieccb *IncidentEventContextCreateBulk) SaveX(ctx context.Context) []*IncidentEventContext {
	v, err := ieccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ieccb *IncidentEventContextCreateBulk) Exec(ctx context.Context) error {
	_, err := ieccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ieccb *IncidentEventContextCreateBulk) ExecX(ctx context.Context) {
	if err := ieccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IncidentEventContext.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IncidentEventContextUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (ieccb *IncidentEventContextCreateBulk) OnConflict(opts ...sql.ConflictOption) *IncidentEventContextUpsertBulk {
	ieccb.conflict = opts
	return &IncidentEventContextUpsertBulk{
		create: ieccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IncidentEventContext.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ieccb *IncidentEventContextCreateBulk) OnConflictColumns(columns ...string) *IncidentEventContextUpsertBulk {
	ieccb.conflict = append(ieccb.conflict, sql.ConflictColumns(columns...))
	return &IncidentEventContextUpsertBulk{
		create: ieccb,
	}
}

// IncidentEventContextUpsertBulk is the builder for "upsert"-ing
// a bulk of IncidentEventContext nodes.
type IncidentEventContextUpsertBulk struct {
	create *IncidentEventContextCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.IncidentEventContext.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(incidenteventcontext.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IncidentEventContextUpsertBulk) UpdateNewValues() *IncidentEventContextUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(incidenteventcontext.FieldID)
			}
			if _, exists := b.mutation.TenantID(); exists {
				s.SetIgnore(incidenteventcontext.FieldTenantID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IncidentEventContext.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *IncidentEventContextUpsertBulk) Ignore() *IncidentEventContextUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IncidentEventContextUpsertBulk) DoNothing() *IncidentEventContextUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IncidentEventContextCreateBulk.OnConflict
// documentation for more info.
func (u *IncidentEventContextUpsertBulk) Update(set func(*IncidentEventContextUpsert)) *IncidentEventContextUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IncidentEventContextUpsert{UpdateSet: update})
	}))
	return u
}

// SetSystemState sets the "system_state" field.
func (u *IncidentEventContextUpsertBulk) SetSystemState(v string) *IncidentEventContextUpsertBulk {
	return u.Update(func(s *IncidentEventContextUpsert) {
		s.SetSystemState(v)
	})
}

// UpdateSystemState sets the "system_state" field to the value that was provided on create.
func (u *IncidentEventContextUpsertBulk) UpdateSystemState() *IncidentEventContextUpsertBulk {
	return u.Update(func(s *IncidentEventContextUpsert) {
		s.UpdateSystemState()
	})
}

// ClearSystemState clears the value of the "system_state" field.
func (u *IncidentEventContextUpsertBulk) ClearSystemState() *IncidentEventContextUpsertBulk {
	return u.Update(func(s *IncidentEventContextUpsert) {
		s.ClearSystemState()
	})
}

// SetDecisionOptions sets the "decision_options" field.
func (u *IncidentEventContextUpsertBulk) SetDecisionOptions(v []string) *IncidentEventContextUpsertBulk {
	return u.Update(func(s *IncidentEventContextUpsert) {
		s.SetDecisionOptions(v)
	})
}

// UpdateDecisionOptions sets the "decision_options" field to the value that was provided on create.
func (u *IncidentEventContextUpsertBulk) UpdateDecisionOptions() *IncidentEventContextUpsertBulk {
	return u.Update(func(s *IncidentEventContextUpsert) {
		s.UpdateDecisionOptions()
	})
}

// ClearDecisionOptions clears the value of the "decision_options" field.
func (u *IncidentEventContextUpsertBulk) ClearDecisionOptions() *IncidentEventContextUpsertBulk {
	return u.Update(func(s *IncidentEventContextUpsert) {
		s.ClearDecisionOptions()
	})
}

// SetDecisionRationale sets the "decision_rationale" field.
func (u *IncidentEventContextUpsertBulk) SetDecisionRationale(v string) *IncidentEventContextUpsertBulk {
	return u.Update(func(s *IncidentEventContextUpsert) {
		s.SetDecisionRationale(v)
	})
}

// UpdateDecisionRationale sets the "decision_rationale" field to the value that was provided on create.
func (u *IncidentEventContextUpsertBulk) UpdateDecisionRationale() *IncidentEventContextUpsertBulk {
	return u.Update(func(s *IncidentEventContextUpsert) {
		s.UpdateDecisionRationale()
	})
}

// ClearDecisionRationale clears the value of the "decision_rationale" field.
func (u *IncidentEventContextUpsertBulk) ClearDecisionRationale() *IncidentEventContextUpsertBulk {
	return u.Update(func(s *IncidentEventContextUpsert) {
		s.ClearDecisionRationale()
	})
}

// SetInvolvedPersonnel sets the "involved_personnel" field.
func (u *IncidentEventContextUpsertBulk) SetInvolvedPersonnel(v []string) *IncidentEventContextUpsertBulk {
	return u.Update(func(s *IncidentEventContextUpsert) {
		s.SetInvolvedPersonnel(v)
	})
}

// UpdateInvolvedPersonnel sets the "involved_personnel" field to the value that was provided on create.
func (u *IncidentEventContextUpsertBulk) UpdateInvolvedPersonnel() *IncidentEventContextUpsertBulk {
	return u.Update(func(s *IncidentEventContextUpsert) {
		s.UpdateInvolvedPersonnel()
	})
}

// ClearInvolvedPersonnel clears the value of the "involved_personnel" field.
func (u *IncidentEventContextUpsertBulk) ClearInvolvedPersonnel() *IncidentEventContextUpsertBulk {
	return u.Update(func(s *IncidentEventContextUpsert) {
		s.ClearInvolvedPersonnel()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *IncidentEventContextUpsertBulk) SetCreatedAt(v time.Time) *IncidentEventContextUpsertBulk {
	return u.Update(func(s *IncidentEventContextUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *IncidentEventContextUpsertBulk) UpdateCreatedAt() *IncidentEventContextUpsertBulk {
	return u.Update(func(s *IncidentEventContextUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *IncidentEventContextUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the IncidentEventContextCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IncidentEventContextCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IncidentEventContextUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
