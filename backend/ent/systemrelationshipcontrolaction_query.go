// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/systemcomponentcontrol"
	"github.com/rezible/rezible/ent/systemrelationship"
	"github.com/rezible/rezible/ent/systemrelationshipcontrolaction"
)

// SystemRelationshipControlActionQuery is the builder for querying SystemRelationshipControlAction entities.
type SystemRelationshipControlActionQuery struct {
	config
	ctx              *QueryContext
	order            []systemrelationshipcontrolaction.OrderOption
	inters           []Interceptor
	predicates       []predicate.SystemRelationshipControlAction
	withRelationship *SystemRelationshipQuery
	withControl      *SystemComponentControlQuery
	modifiers        []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SystemRelationshipControlActionQuery builder.
func (srcaq *SystemRelationshipControlActionQuery) Where(ps ...predicate.SystemRelationshipControlAction) *SystemRelationshipControlActionQuery {
	srcaq.predicates = append(srcaq.predicates, ps...)
	return srcaq
}

// Limit the number of records to be returned by this query.
func (srcaq *SystemRelationshipControlActionQuery) Limit(limit int) *SystemRelationshipControlActionQuery {
	srcaq.ctx.Limit = &limit
	return srcaq
}

// Offset to start from.
func (srcaq *SystemRelationshipControlActionQuery) Offset(offset int) *SystemRelationshipControlActionQuery {
	srcaq.ctx.Offset = &offset
	return srcaq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (srcaq *SystemRelationshipControlActionQuery) Unique(unique bool) *SystemRelationshipControlActionQuery {
	srcaq.ctx.Unique = &unique
	return srcaq
}

// Order specifies how the records should be ordered.
func (srcaq *SystemRelationshipControlActionQuery) Order(o ...systemrelationshipcontrolaction.OrderOption) *SystemRelationshipControlActionQuery {
	srcaq.order = append(srcaq.order, o...)
	return srcaq
}

// QueryRelationship chains the current query on the "relationship" edge.
func (srcaq *SystemRelationshipControlActionQuery) QueryRelationship() *SystemRelationshipQuery {
	query := (&SystemRelationshipClient{config: srcaq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := srcaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := srcaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(systemrelationshipcontrolaction.Table, systemrelationshipcontrolaction.FieldID, selector),
			sqlgraph.To(systemrelationship.Table, systemrelationship.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, systemrelationshipcontrolaction.RelationshipTable, systemrelationshipcontrolaction.RelationshipColumn),
		)
		fromU = sqlgraph.SetNeighbors(srcaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryControl chains the current query on the "control" edge.
func (srcaq *SystemRelationshipControlActionQuery) QueryControl() *SystemComponentControlQuery {
	query := (&SystemComponentControlClient{config: srcaq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := srcaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := srcaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(systemrelationshipcontrolaction.Table, systemrelationshipcontrolaction.FieldID, selector),
			sqlgraph.To(systemcomponentcontrol.Table, systemcomponentcontrol.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, systemrelationshipcontrolaction.ControlTable, systemrelationshipcontrolaction.ControlColumn),
		)
		fromU = sqlgraph.SetNeighbors(srcaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SystemRelationshipControlAction entity from the query.
// Returns a *NotFoundError when no SystemRelationshipControlAction was found.
func (srcaq *SystemRelationshipControlActionQuery) First(ctx context.Context) (*SystemRelationshipControlAction, error) {
	nodes, err := srcaq.Limit(1).All(setContextOp(ctx, srcaq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{systemrelationshipcontrolaction.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (srcaq *SystemRelationshipControlActionQuery) FirstX(ctx context.Context) *SystemRelationshipControlAction {
	node, err := srcaq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SystemRelationshipControlAction ID from the query.
// Returns a *NotFoundError when no SystemRelationshipControlAction ID was found.
func (srcaq *SystemRelationshipControlActionQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = srcaq.Limit(1).IDs(setContextOp(ctx, srcaq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{systemrelationshipcontrolaction.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (srcaq *SystemRelationshipControlActionQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := srcaq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SystemRelationshipControlAction entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SystemRelationshipControlAction entity is found.
// Returns a *NotFoundError when no SystemRelationshipControlAction entities are found.
func (srcaq *SystemRelationshipControlActionQuery) Only(ctx context.Context) (*SystemRelationshipControlAction, error) {
	nodes, err := srcaq.Limit(2).All(setContextOp(ctx, srcaq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{systemrelationshipcontrolaction.Label}
	default:
		return nil, &NotSingularError{systemrelationshipcontrolaction.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (srcaq *SystemRelationshipControlActionQuery) OnlyX(ctx context.Context) *SystemRelationshipControlAction {
	node, err := srcaq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SystemRelationshipControlAction ID in the query.
// Returns a *NotSingularError when more than one SystemRelationshipControlAction ID is found.
// Returns a *NotFoundError when no entities are found.
func (srcaq *SystemRelationshipControlActionQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = srcaq.Limit(2).IDs(setContextOp(ctx, srcaq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{systemrelationshipcontrolaction.Label}
	default:
		err = &NotSingularError{systemrelationshipcontrolaction.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (srcaq *SystemRelationshipControlActionQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := srcaq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SystemRelationshipControlActions.
func (srcaq *SystemRelationshipControlActionQuery) All(ctx context.Context) ([]*SystemRelationshipControlAction, error) {
	ctx = setContextOp(ctx, srcaq.ctx, ent.OpQueryAll)
	if err := srcaq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SystemRelationshipControlAction, *SystemRelationshipControlActionQuery]()
	return withInterceptors[[]*SystemRelationshipControlAction](ctx, srcaq, qr, srcaq.inters)
}

// AllX is like All, but panics if an error occurs.
func (srcaq *SystemRelationshipControlActionQuery) AllX(ctx context.Context) []*SystemRelationshipControlAction {
	nodes, err := srcaq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SystemRelationshipControlAction IDs.
func (srcaq *SystemRelationshipControlActionQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if srcaq.ctx.Unique == nil && srcaq.path != nil {
		srcaq.Unique(true)
	}
	ctx = setContextOp(ctx, srcaq.ctx, ent.OpQueryIDs)
	if err = srcaq.Select(systemrelationshipcontrolaction.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (srcaq *SystemRelationshipControlActionQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := srcaq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (srcaq *SystemRelationshipControlActionQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, srcaq.ctx, ent.OpQueryCount)
	if err := srcaq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, srcaq, querierCount[*SystemRelationshipControlActionQuery](), srcaq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (srcaq *SystemRelationshipControlActionQuery) CountX(ctx context.Context) int {
	count, err := srcaq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (srcaq *SystemRelationshipControlActionQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, srcaq.ctx, ent.OpQueryExist)
	switch _, err := srcaq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (srcaq *SystemRelationshipControlActionQuery) ExistX(ctx context.Context) bool {
	exist, err := srcaq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SystemRelationshipControlActionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (srcaq *SystemRelationshipControlActionQuery) Clone() *SystemRelationshipControlActionQuery {
	if srcaq == nil {
		return nil
	}
	return &SystemRelationshipControlActionQuery{
		config:           srcaq.config,
		ctx:              srcaq.ctx.Clone(),
		order:            append([]systemrelationshipcontrolaction.OrderOption{}, srcaq.order...),
		inters:           append([]Interceptor{}, srcaq.inters...),
		predicates:       append([]predicate.SystemRelationshipControlAction{}, srcaq.predicates...),
		withRelationship: srcaq.withRelationship.Clone(),
		withControl:      srcaq.withControl.Clone(),
		// clone intermediate query.
		sql:       srcaq.sql.Clone(),
		path:      srcaq.path,
		modifiers: append([]func(*sql.Selector){}, srcaq.modifiers...),
	}
}

// WithRelationship tells the query-builder to eager-load the nodes that are connected to
// the "relationship" edge. The optional arguments are used to configure the query builder of the edge.
func (srcaq *SystemRelationshipControlActionQuery) WithRelationship(opts ...func(*SystemRelationshipQuery)) *SystemRelationshipControlActionQuery {
	query := (&SystemRelationshipClient{config: srcaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	srcaq.withRelationship = query
	return srcaq
}

// WithControl tells the query-builder to eager-load the nodes that are connected to
// the "control" edge. The optional arguments are used to configure the query builder of the edge.
func (srcaq *SystemRelationshipControlActionQuery) WithControl(opts ...func(*SystemComponentControlQuery)) *SystemRelationshipControlActionQuery {
	query := (&SystemComponentControlClient{config: srcaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	srcaq.withControl = query
	return srcaq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		RelationshipID uuid.UUID `json:"relationship_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SystemRelationshipControlAction.Query().
//		GroupBy(systemrelationshipcontrolaction.FieldRelationshipID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (srcaq *SystemRelationshipControlActionQuery) GroupBy(field string, fields ...string) *SystemRelationshipControlActionGroupBy {
	srcaq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SystemRelationshipControlActionGroupBy{build: srcaq}
	grbuild.flds = &srcaq.ctx.Fields
	grbuild.label = systemrelationshipcontrolaction.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		RelationshipID uuid.UUID `json:"relationship_id,omitempty"`
//	}
//
//	client.SystemRelationshipControlAction.Query().
//		Select(systemrelationshipcontrolaction.FieldRelationshipID).
//		Scan(ctx, &v)
func (srcaq *SystemRelationshipControlActionQuery) Select(fields ...string) *SystemRelationshipControlActionSelect {
	srcaq.ctx.Fields = append(srcaq.ctx.Fields, fields...)
	sbuild := &SystemRelationshipControlActionSelect{SystemRelationshipControlActionQuery: srcaq}
	sbuild.label = systemrelationshipcontrolaction.Label
	sbuild.flds, sbuild.scan = &srcaq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SystemRelationshipControlActionSelect configured with the given aggregations.
func (srcaq *SystemRelationshipControlActionQuery) Aggregate(fns ...AggregateFunc) *SystemRelationshipControlActionSelect {
	return srcaq.Select().Aggregate(fns...)
}

func (srcaq *SystemRelationshipControlActionQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range srcaq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, srcaq); err != nil {
				return err
			}
		}
	}
	for _, f := range srcaq.ctx.Fields {
		if !systemrelationshipcontrolaction.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if srcaq.path != nil {
		prev, err := srcaq.path(ctx)
		if err != nil {
			return err
		}
		srcaq.sql = prev
	}
	return nil
}

func (srcaq *SystemRelationshipControlActionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SystemRelationshipControlAction, error) {
	var (
		nodes       = []*SystemRelationshipControlAction{}
		_spec       = srcaq.querySpec()
		loadedTypes = [2]bool{
			srcaq.withRelationship != nil,
			srcaq.withControl != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SystemRelationshipControlAction).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SystemRelationshipControlAction{config: srcaq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(srcaq.modifiers) > 0 {
		_spec.Modifiers = srcaq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, srcaq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := srcaq.withRelationship; query != nil {
		if err := srcaq.loadRelationship(ctx, query, nodes, nil,
			func(n *SystemRelationshipControlAction, e *SystemRelationship) { n.Edges.Relationship = e }); err != nil {
			return nil, err
		}
	}
	if query := srcaq.withControl; query != nil {
		if err := srcaq.loadControl(ctx, query, nodes, nil,
			func(n *SystemRelationshipControlAction, e *SystemComponentControl) { n.Edges.Control = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (srcaq *SystemRelationshipControlActionQuery) loadRelationship(ctx context.Context, query *SystemRelationshipQuery, nodes []*SystemRelationshipControlAction, init func(*SystemRelationshipControlAction), assign func(*SystemRelationshipControlAction, *SystemRelationship)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*SystemRelationshipControlAction)
	for i := range nodes {
		fk := nodes[i].RelationshipID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(systemrelationship.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "relationship_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (srcaq *SystemRelationshipControlActionQuery) loadControl(ctx context.Context, query *SystemComponentControlQuery, nodes []*SystemRelationshipControlAction, init func(*SystemRelationshipControlAction), assign func(*SystemRelationshipControlAction, *SystemComponentControl)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*SystemRelationshipControlAction)
	for i := range nodes {
		fk := nodes[i].ControlID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(systemcomponentcontrol.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "control_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (srcaq *SystemRelationshipControlActionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := srcaq.querySpec()
	if len(srcaq.modifiers) > 0 {
		_spec.Modifiers = srcaq.modifiers
	}
	_spec.Node.Columns = srcaq.ctx.Fields
	if len(srcaq.ctx.Fields) > 0 {
		_spec.Unique = srcaq.ctx.Unique != nil && *srcaq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, srcaq.driver, _spec)
}

func (srcaq *SystemRelationshipControlActionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(systemrelationshipcontrolaction.Table, systemrelationshipcontrolaction.Columns, sqlgraph.NewFieldSpec(systemrelationshipcontrolaction.FieldID, field.TypeUUID))
	_spec.From = srcaq.sql
	if unique := srcaq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if srcaq.path != nil {
		_spec.Unique = true
	}
	if fields := srcaq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, systemrelationshipcontrolaction.FieldID)
		for i := range fields {
			if fields[i] != systemrelationshipcontrolaction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if srcaq.withRelationship != nil {
			_spec.Node.AddColumnOnce(systemrelationshipcontrolaction.FieldRelationshipID)
		}
		if srcaq.withControl != nil {
			_spec.Node.AddColumnOnce(systemrelationshipcontrolaction.FieldControlID)
		}
	}
	if ps := srcaq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := srcaq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := srcaq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := srcaq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (srcaq *SystemRelationshipControlActionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(srcaq.driver.Dialect())
	t1 := builder.Table(systemrelationshipcontrolaction.Table)
	columns := srcaq.ctx.Fields
	if len(columns) == 0 {
		columns = systemrelationshipcontrolaction.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if srcaq.sql != nil {
		selector = srcaq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if srcaq.ctx.Unique != nil && *srcaq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range srcaq.modifiers {
		m(selector)
	}
	for _, p := range srcaq.predicates {
		p(selector)
	}
	for _, p := range srcaq.order {
		p(selector)
	}
	if offset := srcaq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := srcaq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (srcaq *SystemRelationshipControlActionQuery) Modify(modifiers ...func(s *sql.Selector)) *SystemRelationshipControlActionSelect {
	srcaq.modifiers = append(srcaq.modifiers, modifiers...)
	return srcaq.Select()
}

// SystemRelationshipControlActionGroupBy is the group-by builder for SystemRelationshipControlAction entities.
type SystemRelationshipControlActionGroupBy struct {
	selector
	build *SystemRelationshipControlActionQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (srcagb *SystemRelationshipControlActionGroupBy) Aggregate(fns ...AggregateFunc) *SystemRelationshipControlActionGroupBy {
	srcagb.fns = append(srcagb.fns, fns...)
	return srcagb
}

// Scan applies the selector query and scans the result into the given value.
func (srcagb *SystemRelationshipControlActionGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, srcagb.build.ctx, ent.OpQueryGroupBy)
	if err := srcagb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SystemRelationshipControlActionQuery, *SystemRelationshipControlActionGroupBy](ctx, srcagb.build, srcagb, srcagb.build.inters, v)
}

func (srcagb *SystemRelationshipControlActionGroupBy) sqlScan(ctx context.Context, root *SystemRelationshipControlActionQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(srcagb.fns))
	for _, fn := range srcagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*srcagb.flds)+len(srcagb.fns))
		for _, f := range *srcagb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*srcagb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := srcagb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SystemRelationshipControlActionSelect is the builder for selecting fields of SystemRelationshipControlAction entities.
type SystemRelationshipControlActionSelect struct {
	*SystemRelationshipControlActionQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (srcas *SystemRelationshipControlActionSelect) Aggregate(fns ...AggregateFunc) *SystemRelationshipControlActionSelect {
	srcas.fns = append(srcas.fns, fns...)
	return srcas
}

// Scan applies the selector query and scans the result into the given value.
func (srcas *SystemRelationshipControlActionSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, srcas.ctx, ent.OpQuerySelect)
	if err := srcas.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SystemRelationshipControlActionQuery, *SystemRelationshipControlActionSelect](ctx, srcas.SystemRelationshipControlActionQuery, srcas, srcas.inters, v)
}

func (srcas *SystemRelationshipControlActionSelect) sqlScan(ctx context.Context, root *SystemRelationshipControlActionQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(srcas.fns))
	for _, fn := range srcas.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*srcas.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := srcas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (srcas *SystemRelationshipControlActionSelect) Modify(modifiers ...func(s *sql.Selector)) *SystemRelationshipControlActionSelect {
	srcas.modifiers = append(srcas.modifiers, modifiers...)
	return srcas
}
