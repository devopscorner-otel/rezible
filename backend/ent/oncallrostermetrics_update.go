// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/oncallroster"
	"github.com/rezible/rezible/ent/oncallrostermetrics"
	"github.com/rezible/rezible/ent/predicate"
)

// OncallRosterMetricsUpdate is the builder for updating OncallRosterMetrics entities.
type OncallRosterMetricsUpdate struct {
	config
	hooks     []Hook
	mutation  *OncallRosterMetricsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OncallRosterMetricsUpdate builder.
func (ormu *OncallRosterMetricsUpdate) Where(ps ...predicate.OncallRosterMetrics) *OncallRosterMetricsUpdate {
	ormu.mutation.Where(ps...)
	return ormu
}

// SetRosterID sets the "roster_id" field.
func (ormu *OncallRosterMetricsUpdate) SetRosterID(u uuid.UUID) *OncallRosterMetricsUpdate {
	ormu.mutation.SetRosterID(u)
	return ormu
}

// SetNillableRosterID sets the "roster_id" field if the given value is not nil.
func (ormu *OncallRosterMetricsUpdate) SetNillableRosterID(u *uuid.UUID) *OncallRosterMetricsUpdate {
	if u != nil {
		ormu.SetRosterID(*u)
	}
	return ormu
}

// SetRoster sets the "roster" edge to the OncallRoster entity.
func (ormu *OncallRosterMetricsUpdate) SetRoster(o *OncallRoster) *OncallRosterMetricsUpdate {
	return ormu.SetRosterID(o.ID)
}

// Mutation returns the OncallRosterMetricsMutation object of the builder.
func (ormu *OncallRosterMetricsUpdate) Mutation() *OncallRosterMetricsMutation {
	return ormu.mutation
}

// ClearRoster clears the "roster" edge to the OncallRoster entity.
func (ormu *OncallRosterMetricsUpdate) ClearRoster() *OncallRosterMetricsUpdate {
	ormu.mutation.ClearRoster()
	return ormu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ormu *OncallRosterMetricsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ormu.sqlSave, ormu.mutation, ormu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ormu *OncallRosterMetricsUpdate) SaveX(ctx context.Context) int {
	affected, err := ormu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ormu *OncallRosterMetricsUpdate) Exec(ctx context.Context) error {
	_, err := ormu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ormu *OncallRosterMetricsUpdate) ExecX(ctx context.Context) {
	if err := ormu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ormu *OncallRosterMetricsUpdate) check() error {
	if ormu.mutation.TenantCleared() && len(ormu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallRosterMetrics.tenant"`)
	}
	if ormu.mutation.RosterCleared() && len(ormu.mutation.RosterIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallRosterMetrics.roster"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ormu *OncallRosterMetricsUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OncallRosterMetricsUpdate {
	ormu.modifiers = append(ormu.modifiers, modifiers...)
	return ormu
}

func (ormu *OncallRosterMetricsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ormu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(oncallrostermetrics.Table, oncallrostermetrics.Columns, sqlgraph.NewFieldSpec(oncallrostermetrics.FieldID, field.TypeUUID))
	if ps := ormu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ormu.mutation.RosterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallrostermetrics.RosterTable,
			Columns: []string{oncallrostermetrics.RosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ormu.mutation.RosterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallrostermetrics.RosterTable,
			Columns: []string{oncallrostermetrics.RosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ormu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ormu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oncallrostermetrics.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ormu.mutation.done = true
	return n, nil
}

// OncallRosterMetricsUpdateOne is the builder for updating a single OncallRosterMetrics entity.
type OncallRosterMetricsUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OncallRosterMetricsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetRosterID sets the "roster_id" field.
func (ormuo *OncallRosterMetricsUpdateOne) SetRosterID(u uuid.UUID) *OncallRosterMetricsUpdateOne {
	ormuo.mutation.SetRosterID(u)
	return ormuo
}

// SetNillableRosterID sets the "roster_id" field if the given value is not nil.
func (ormuo *OncallRosterMetricsUpdateOne) SetNillableRosterID(u *uuid.UUID) *OncallRosterMetricsUpdateOne {
	if u != nil {
		ormuo.SetRosterID(*u)
	}
	return ormuo
}

// SetRoster sets the "roster" edge to the OncallRoster entity.
func (ormuo *OncallRosterMetricsUpdateOne) SetRoster(o *OncallRoster) *OncallRosterMetricsUpdateOne {
	return ormuo.SetRosterID(o.ID)
}

// Mutation returns the OncallRosterMetricsMutation object of the builder.
func (ormuo *OncallRosterMetricsUpdateOne) Mutation() *OncallRosterMetricsMutation {
	return ormuo.mutation
}

// ClearRoster clears the "roster" edge to the OncallRoster entity.
func (ormuo *OncallRosterMetricsUpdateOne) ClearRoster() *OncallRosterMetricsUpdateOne {
	ormuo.mutation.ClearRoster()
	return ormuo
}

// Where appends a list predicates to the OncallRosterMetricsUpdate builder.
func (ormuo *OncallRosterMetricsUpdateOne) Where(ps ...predicate.OncallRosterMetrics) *OncallRosterMetricsUpdateOne {
	ormuo.mutation.Where(ps...)
	return ormuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ormuo *OncallRosterMetricsUpdateOne) Select(field string, fields ...string) *OncallRosterMetricsUpdateOne {
	ormuo.fields = append([]string{field}, fields...)
	return ormuo
}

// Save executes the query and returns the updated OncallRosterMetrics entity.
func (ormuo *OncallRosterMetricsUpdateOne) Save(ctx context.Context) (*OncallRosterMetrics, error) {
	return withHooks(ctx, ormuo.sqlSave, ormuo.mutation, ormuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ormuo *OncallRosterMetricsUpdateOne) SaveX(ctx context.Context) *OncallRosterMetrics {
	node, err := ormuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ormuo *OncallRosterMetricsUpdateOne) Exec(ctx context.Context) error {
	_, err := ormuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ormuo *OncallRosterMetricsUpdateOne) ExecX(ctx context.Context) {
	if err := ormuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ormuo *OncallRosterMetricsUpdateOne) check() error {
	if ormuo.mutation.TenantCleared() && len(ormuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallRosterMetrics.tenant"`)
	}
	if ormuo.mutation.RosterCleared() && len(ormuo.mutation.RosterIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallRosterMetrics.roster"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ormuo *OncallRosterMetricsUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OncallRosterMetricsUpdateOne {
	ormuo.modifiers = append(ormuo.modifiers, modifiers...)
	return ormuo
}

func (ormuo *OncallRosterMetricsUpdateOne) sqlSave(ctx context.Context) (_node *OncallRosterMetrics, err error) {
	if err := ormuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(oncallrostermetrics.Table, oncallrostermetrics.Columns, sqlgraph.NewFieldSpec(oncallrostermetrics.FieldID, field.TypeUUID))
	id, ok := ormuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OncallRosterMetrics.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ormuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oncallrostermetrics.FieldID)
		for _, f := range fields {
			if !oncallrostermetrics.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oncallrostermetrics.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ormuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ormuo.mutation.RosterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallrostermetrics.RosterTable,
			Columns: []string{oncallrostermetrics.RosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ormuo.mutation.RosterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallrostermetrics.RosterTable,
			Columns: []string{oncallrostermetrics.RosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ormuo.modifiers...)
	_node = &OncallRosterMetrics{config: ormuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ormuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oncallrostermetrics.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ormuo.mutation.done = true
	return _node, nil
}
