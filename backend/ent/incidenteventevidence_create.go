// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/incidentevent"
	"github.com/rezible/rezible/ent/incidenteventevidence"
	"github.com/rezible/rezible/ent/tenant"
)

// IncidentEventEvidenceCreate is the builder for creating a IncidentEventEvidence entity.
type IncidentEventEvidenceCreate struct {
	config
	mutation *IncidentEventEvidenceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (ieec *IncidentEventEvidenceCreate) SetTenantID(i int) *IncidentEventEvidenceCreate {
	ieec.mutation.SetTenantID(i)
	return ieec
}

// SetEvidenceType sets the "evidence_type" field.
func (ieec *IncidentEventEvidenceCreate) SetEvidenceType(it incidenteventevidence.EvidenceType) *IncidentEventEvidenceCreate {
	ieec.mutation.SetEvidenceType(it)
	return ieec
}

// SetURL sets the "url" field.
func (ieec *IncidentEventEvidenceCreate) SetURL(s string) *IncidentEventEvidenceCreate {
	ieec.mutation.SetURL(s)
	return ieec
}

// SetTitle sets the "title" field.
func (ieec *IncidentEventEvidenceCreate) SetTitle(s string) *IncidentEventEvidenceCreate {
	ieec.mutation.SetTitle(s)
	return ieec
}

// SetDescription sets the "description" field.
func (ieec *IncidentEventEvidenceCreate) SetDescription(s string) *IncidentEventEvidenceCreate {
	ieec.mutation.SetDescription(s)
	return ieec
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ieec *IncidentEventEvidenceCreate) SetNillableDescription(s *string) *IncidentEventEvidenceCreate {
	if s != nil {
		ieec.SetDescription(*s)
	}
	return ieec
}

// SetCreatedAt sets the "created_at" field.
func (ieec *IncidentEventEvidenceCreate) SetCreatedAt(t time.Time) *IncidentEventEvidenceCreate {
	ieec.mutation.SetCreatedAt(t)
	return ieec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ieec *IncidentEventEvidenceCreate) SetNillableCreatedAt(t *time.Time) *IncidentEventEvidenceCreate {
	if t != nil {
		ieec.SetCreatedAt(*t)
	}
	return ieec
}

// SetID sets the "id" field.
func (ieec *IncidentEventEvidenceCreate) SetID(u uuid.UUID) *IncidentEventEvidenceCreate {
	ieec.mutation.SetID(u)
	return ieec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ieec *IncidentEventEvidenceCreate) SetNillableID(u *uuid.UUID) *IncidentEventEvidenceCreate {
	if u != nil {
		ieec.SetID(*u)
	}
	return ieec
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (ieec *IncidentEventEvidenceCreate) SetTenant(t *Tenant) *IncidentEventEvidenceCreate {
	return ieec.SetTenantID(t.ID)
}

// SetEventID sets the "event" edge to the IncidentEvent entity by ID.
func (ieec *IncidentEventEvidenceCreate) SetEventID(id uuid.UUID) *IncidentEventEvidenceCreate {
	ieec.mutation.SetEventID(id)
	return ieec
}

// SetEvent sets the "event" edge to the IncidentEvent entity.
func (ieec *IncidentEventEvidenceCreate) SetEvent(i *IncidentEvent) *IncidentEventEvidenceCreate {
	return ieec.SetEventID(i.ID)
}

// Mutation returns the IncidentEventEvidenceMutation object of the builder.
func (ieec *IncidentEventEvidenceCreate) Mutation() *IncidentEventEvidenceMutation {
	return ieec.mutation
}

// Save creates the IncidentEventEvidence in the database.
func (ieec *IncidentEventEvidenceCreate) Save(ctx context.Context) (*IncidentEventEvidence, error) {
	if err := ieec.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ieec.sqlSave, ieec.mutation, ieec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ieec *IncidentEventEvidenceCreate) SaveX(ctx context.Context) *IncidentEventEvidence {
	v, err := ieec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ieec *IncidentEventEvidenceCreate) Exec(ctx context.Context) error {
	_, err := ieec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ieec *IncidentEventEvidenceCreate) ExecX(ctx context.Context) {
	if err := ieec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ieec *IncidentEventEvidenceCreate) defaults() error {
	if _, ok := ieec.mutation.CreatedAt(); !ok {
		if incidenteventevidence.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized incidenteventevidence.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := incidenteventevidence.DefaultCreatedAt()
		ieec.mutation.SetCreatedAt(v)
	}
	if _, ok := ieec.mutation.ID(); !ok {
		if incidenteventevidence.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized incidenteventevidence.DefaultID (forgotten import ent/runtime?)")
		}
		v := incidenteventevidence.DefaultID()
		ieec.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ieec *IncidentEventEvidenceCreate) check() error {
	if _, ok := ieec.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "IncidentEventEvidence.tenant_id"`)}
	}
	if _, ok := ieec.mutation.EvidenceType(); !ok {
		return &ValidationError{Name: "evidence_type", err: errors.New(`ent: missing required field "IncidentEventEvidence.evidence_type"`)}
	}
	if v, ok := ieec.mutation.EvidenceType(); ok {
		if err := incidenteventevidence.EvidenceTypeValidator(v); err != nil {
			return &ValidationError{Name: "evidence_type", err: fmt.Errorf(`ent: validator failed for field "IncidentEventEvidence.evidence_type": %w`, err)}
		}
	}
	if _, ok := ieec.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "IncidentEventEvidence.url"`)}
	}
	if v, ok := ieec.mutation.URL(); ok {
		if err := incidenteventevidence.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "IncidentEventEvidence.url": %w`, err)}
		}
	}
	if _, ok := ieec.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "IncidentEventEvidence.title"`)}
	}
	if v, ok := ieec.mutation.Title(); ok {
		if err := incidenteventevidence.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "IncidentEventEvidence.title": %w`, err)}
		}
	}
	if _, ok := ieec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "IncidentEventEvidence.created_at"`)}
	}
	if len(ieec.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "IncidentEventEvidence.tenant"`)}
	}
	if len(ieec.mutation.EventIDs()) == 0 {
		return &ValidationError{Name: "event", err: errors.New(`ent: missing required edge "IncidentEventEvidence.event"`)}
	}
	return nil
}

func (ieec *IncidentEventEvidenceCreate) sqlSave(ctx context.Context) (*IncidentEventEvidence, error) {
	if err := ieec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ieec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ieec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ieec.mutation.id = &_node.ID
	ieec.mutation.done = true
	return _node, nil
}

func (ieec *IncidentEventEvidenceCreate) createSpec() (*IncidentEventEvidence, *sqlgraph.CreateSpec) {
	var (
		_node = &IncidentEventEvidence{config: ieec.config}
		_spec = sqlgraph.NewCreateSpec(incidenteventevidence.Table, sqlgraph.NewFieldSpec(incidenteventevidence.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = ieec.conflict
	if id, ok := ieec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ieec.mutation.EvidenceType(); ok {
		_spec.SetField(incidenteventevidence.FieldEvidenceType, field.TypeEnum, value)
		_node.EvidenceType = value
	}
	if value, ok := ieec.mutation.URL(); ok {
		_spec.SetField(incidenteventevidence.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := ieec.mutation.Title(); ok {
		_spec.SetField(incidenteventevidence.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := ieec.mutation.Description(); ok {
		_spec.SetField(incidenteventevidence.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ieec.mutation.CreatedAt(); ok {
		_spec.SetField(incidenteventevidence.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := ieec.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidenteventevidence.TenantTable,
			Columns: []string{incidenteventevidence.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ieec.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incidenteventevidence.EventTable,
			Columns: []string{incidenteventevidence.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentevent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.incident_event_evidence = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IncidentEventEvidence.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IncidentEventEvidenceUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (ieec *IncidentEventEvidenceCreate) OnConflict(opts ...sql.ConflictOption) *IncidentEventEvidenceUpsertOne {
	ieec.conflict = opts
	return &IncidentEventEvidenceUpsertOne{
		create: ieec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IncidentEventEvidence.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ieec *IncidentEventEvidenceCreate) OnConflictColumns(columns ...string) *IncidentEventEvidenceUpsertOne {
	ieec.conflict = append(ieec.conflict, sql.ConflictColumns(columns...))
	return &IncidentEventEvidenceUpsertOne{
		create: ieec,
	}
}

type (
	// IncidentEventEvidenceUpsertOne is the builder for "upsert"-ing
	//  one IncidentEventEvidence node.
	IncidentEventEvidenceUpsertOne struct {
		create *IncidentEventEvidenceCreate
	}

	// IncidentEventEvidenceUpsert is the "OnConflict" setter.
	IncidentEventEvidenceUpsert struct {
		*sql.UpdateSet
	}
)

// SetEvidenceType sets the "evidence_type" field.
func (u *IncidentEventEvidenceUpsert) SetEvidenceType(v incidenteventevidence.EvidenceType) *IncidentEventEvidenceUpsert {
	u.Set(incidenteventevidence.FieldEvidenceType, v)
	return u
}

// UpdateEvidenceType sets the "evidence_type" field to the value that was provided on create.
func (u *IncidentEventEvidenceUpsert) UpdateEvidenceType() *IncidentEventEvidenceUpsert {
	u.SetExcluded(incidenteventevidence.FieldEvidenceType)
	return u
}

// SetURL sets the "url" field.
func (u *IncidentEventEvidenceUpsert) SetURL(v string) *IncidentEventEvidenceUpsert {
	u.Set(incidenteventevidence.FieldURL, v)
	return u
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *IncidentEventEvidenceUpsert) UpdateURL() *IncidentEventEvidenceUpsert {
	u.SetExcluded(incidenteventevidence.FieldURL)
	return u
}

// SetTitle sets the "title" field.
func (u *IncidentEventEvidenceUpsert) SetTitle(v string) *IncidentEventEvidenceUpsert {
	u.Set(incidenteventevidence.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *IncidentEventEvidenceUpsert) UpdateTitle() *IncidentEventEvidenceUpsert {
	u.SetExcluded(incidenteventevidence.FieldTitle)
	return u
}

// SetDescription sets the "description" field.
func (u *IncidentEventEvidenceUpsert) SetDescription(v string) *IncidentEventEvidenceUpsert {
	u.Set(incidenteventevidence.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *IncidentEventEvidenceUpsert) UpdateDescription() *IncidentEventEvidenceUpsert {
	u.SetExcluded(incidenteventevidence.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *IncidentEventEvidenceUpsert) ClearDescription() *IncidentEventEvidenceUpsert {
	u.SetNull(incidenteventevidence.FieldDescription)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *IncidentEventEvidenceUpsert) SetCreatedAt(v time.Time) *IncidentEventEvidenceUpsert {
	u.Set(incidenteventevidence.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *IncidentEventEvidenceUpsert) UpdateCreatedAt() *IncidentEventEvidenceUpsert {
	u.SetExcluded(incidenteventevidence.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.IncidentEventEvidence.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(incidenteventevidence.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IncidentEventEvidenceUpsertOne) UpdateNewValues() *IncidentEventEvidenceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(incidenteventevidence.FieldID)
		}
		if _, exists := u.create.mutation.TenantID(); exists {
			s.SetIgnore(incidenteventevidence.FieldTenantID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IncidentEventEvidence.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *IncidentEventEvidenceUpsertOne) Ignore() *IncidentEventEvidenceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IncidentEventEvidenceUpsertOne) DoNothing() *IncidentEventEvidenceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IncidentEventEvidenceCreate.OnConflict
// documentation for more info.
func (u *IncidentEventEvidenceUpsertOne) Update(set func(*IncidentEventEvidenceUpsert)) *IncidentEventEvidenceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IncidentEventEvidenceUpsert{UpdateSet: update})
	}))
	return u
}

// SetEvidenceType sets the "evidence_type" field.
func (u *IncidentEventEvidenceUpsertOne) SetEvidenceType(v incidenteventevidence.EvidenceType) *IncidentEventEvidenceUpsertOne {
	return u.Update(func(s *IncidentEventEvidenceUpsert) {
		s.SetEvidenceType(v)
	})
}

// UpdateEvidenceType sets the "evidence_type" field to the value that was provided on create.
func (u *IncidentEventEvidenceUpsertOne) UpdateEvidenceType() *IncidentEventEvidenceUpsertOne {
	return u.Update(func(s *IncidentEventEvidenceUpsert) {
		s.UpdateEvidenceType()
	})
}

// SetURL sets the "url" field.
func (u *IncidentEventEvidenceUpsertOne) SetURL(v string) *IncidentEventEvidenceUpsertOne {
	return u.Update(func(s *IncidentEventEvidenceUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *IncidentEventEvidenceUpsertOne) UpdateURL() *IncidentEventEvidenceUpsertOne {
	return u.Update(func(s *IncidentEventEvidenceUpsert) {
		s.UpdateURL()
	})
}

// SetTitle sets the "title" field.
func (u *IncidentEventEvidenceUpsertOne) SetTitle(v string) *IncidentEventEvidenceUpsertOne {
	return u.Update(func(s *IncidentEventEvidenceUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *IncidentEventEvidenceUpsertOne) UpdateTitle() *IncidentEventEvidenceUpsertOne {
	return u.Update(func(s *IncidentEventEvidenceUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *IncidentEventEvidenceUpsertOne) SetDescription(v string) *IncidentEventEvidenceUpsertOne {
	return u.Update(func(s *IncidentEventEvidenceUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *IncidentEventEvidenceUpsertOne) UpdateDescription() *IncidentEventEvidenceUpsertOne {
	return u.Update(func(s *IncidentEventEvidenceUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *IncidentEventEvidenceUpsertOne) ClearDescription() *IncidentEventEvidenceUpsertOne {
	return u.Update(func(s *IncidentEventEvidenceUpsert) {
		s.ClearDescription()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *IncidentEventEvidenceUpsertOne) SetCreatedAt(v time.Time) *IncidentEventEvidenceUpsertOne {
	return u.Update(func(s *IncidentEventEvidenceUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *IncidentEventEvidenceUpsertOne) UpdateCreatedAt() *IncidentEventEvidenceUpsertOne {
	return u.Update(func(s *IncidentEventEvidenceUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *IncidentEventEvidenceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IncidentEventEvidenceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IncidentEventEvidenceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *IncidentEventEvidenceUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: IncidentEventEvidenceUpsertOne.ID is not supported by MySQL driver. Use IncidentEventEvidenceUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *IncidentEventEvidenceUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// IncidentEventEvidenceCreateBulk is the builder for creating many IncidentEventEvidence entities in bulk.
type IncidentEventEvidenceCreateBulk struct {
	config
	err      error
	builders []*IncidentEventEvidenceCreate
	conflict []sql.ConflictOption
}

// Save creates the IncidentEventEvidence entities in the database.
func (ieecb *IncidentEventEvidenceCreateBulk) Save(ctx context.Context) ([]*IncidentEventEvidence, error) {
	if ieecb.err != nil {
		return nil, ieecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ieecb.builders))
	nodes := make([]*IncidentEventEvidence, len(ieecb.builders))
	mutators := make([]Mutator, len(ieecb.builders))
	for i := range ieecb.builders {
		func(i int, root context.Context) {
			builder := ieecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IncidentEventEvidenceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ieecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ieecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ieecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ieecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ieecb *IncidentEventEvidenceCreateBulk) SaveX(ctx context.Context) []*IncidentEventEvidence {
	v, err := ieecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ieecb *IncidentEventEvidenceCreateBulk) Exec(ctx context.Context) error {
	_, err := ieecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ieecb *IncidentEventEvidenceCreateBulk) ExecX(ctx context.Context) {
	if err := ieecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IncidentEventEvidence.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IncidentEventEvidenceUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (ieecb *IncidentEventEvidenceCreateBulk) OnConflict(opts ...sql.ConflictOption) *IncidentEventEvidenceUpsertBulk {
	ieecb.conflict = opts
	return &IncidentEventEvidenceUpsertBulk{
		create: ieecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IncidentEventEvidence.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ieecb *IncidentEventEvidenceCreateBulk) OnConflictColumns(columns ...string) *IncidentEventEvidenceUpsertBulk {
	ieecb.conflict = append(ieecb.conflict, sql.ConflictColumns(columns...))
	return &IncidentEventEvidenceUpsertBulk{
		create: ieecb,
	}
}

// IncidentEventEvidenceUpsertBulk is the builder for "upsert"-ing
// a bulk of IncidentEventEvidence nodes.
type IncidentEventEvidenceUpsertBulk struct {
	create *IncidentEventEvidenceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.IncidentEventEvidence.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(incidenteventevidence.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IncidentEventEvidenceUpsertBulk) UpdateNewValues() *IncidentEventEvidenceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(incidenteventevidence.FieldID)
			}
			if _, exists := b.mutation.TenantID(); exists {
				s.SetIgnore(incidenteventevidence.FieldTenantID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IncidentEventEvidence.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *IncidentEventEvidenceUpsertBulk) Ignore() *IncidentEventEvidenceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IncidentEventEvidenceUpsertBulk) DoNothing() *IncidentEventEvidenceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IncidentEventEvidenceCreateBulk.OnConflict
// documentation for more info.
func (u *IncidentEventEvidenceUpsertBulk) Update(set func(*IncidentEventEvidenceUpsert)) *IncidentEventEvidenceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IncidentEventEvidenceUpsert{UpdateSet: update})
	}))
	return u
}

// SetEvidenceType sets the "evidence_type" field.
func (u *IncidentEventEvidenceUpsertBulk) SetEvidenceType(v incidenteventevidence.EvidenceType) *IncidentEventEvidenceUpsertBulk {
	return u.Update(func(s *IncidentEventEvidenceUpsert) {
		s.SetEvidenceType(v)
	})
}

// UpdateEvidenceType sets the "evidence_type" field to the value that was provided on create.
func (u *IncidentEventEvidenceUpsertBulk) UpdateEvidenceType() *IncidentEventEvidenceUpsertBulk {
	return u.Update(func(s *IncidentEventEvidenceUpsert) {
		s.UpdateEvidenceType()
	})
}

// SetURL sets the "url" field.
func (u *IncidentEventEvidenceUpsertBulk) SetURL(v string) *IncidentEventEvidenceUpsertBulk {
	return u.Update(func(s *IncidentEventEvidenceUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *IncidentEventEvidenceUpsertBulk) UpdateURL() *IncidentEventEvidenceUpsertBulk {
	return u.Update(func(s *IncidentEventEvidenceUpsert) {
		s.UpdateURL()
	})
}

// SetTitle sets the "title" field.
func (u *IncidentEventEvidenceUpsertBulk) SetTitle(v string) *IncidentEventEvidenceUpsertBulk {
	return u.Update(func(s *IncidentEventEvidenceUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *IncidentEventEvidenceUpsertBulk) UpdateTitle() *IncidentEventEvidenceUpsertBulk {
	return u.Update(func(s *IncidentEventEvidenceUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *IncidentEventEvidenceUpsertBulk) SetDescription(v string) *IncidentEventEvidenceUpsertBulk {
	return u.Update(func(s *IncidentEventEvidenceUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *IncidentEventEvidenceUpsertBulk) UpdateDescription() *IncidentEventEvidenceUpsertBulk {
	return u.Update(func(s *IncidentEventEvidenceUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *IncidentEventEvidenceUpsertBulk) ClearDescription() *IncidentEventEvidenceUpsertBulk {
	return u.Update(func(s *IncidentEventEvidenceUpsert) {
		s.ClearDescription()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *IncidentEventEvidenceUpsertBulk) SetCreatedAt(v time.Time) *IncidentEventEvidenceUpsertBulk {
	return u.Update(func(s *IncidentEventEvidenceUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *IncidentEventEvidenceUpsertBulk) UpdateCreatedAt() *IncidentEventEvidenceUpsertBulk {
	return u.Update(func(s *IncidentEventEvidenceUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *IncidentEventEvidenceUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the IncidentEventEvidenceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IncidentEventEvidenceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IncidentEventEvidenceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
