// Code generated by ent, DO NOT EDIT.

package alert

import (
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the alert type in the database.
	Label = "alert"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldProviderID holds the string denoting the provider_id field in the database.
	FieldProviderID = "provider_id"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgePlaybooks holds the string denoting the playbooks edge name in mutations.
	EdgePlaybooks = "playbooks"
	// EdgeEvents holds the string denoting the events edge name in mutations.
	EdgeEvents = "events"
	// EdgeFeedback holds the string denoting the feedback edge name in mutations.
	EdgeFeedback = "feedback"
	// Table holds the table name of the alert in the database.
	Table = "alerts"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "alerts"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// PlaybooksTable is the table that holds the playbooks relation/edge. The primary key declared below.
	PlaybooksTable = "playbook_alerts"
	// PlaybooksInverseTable is the table name for the Playbook entity.
	// It exists in this package in order to avoid circular dependency with the "playbook" package.
	PlaybooksInverseTable = "playbooks"
	// EventsTable is the table that holds the events relation/edge.
	EventsTable = "oncall_events"
	// EventsInverseTable is the table name for the OncallEvent entity.
	// It exists in this package in order to avoid circular dependency with the "oncallevent" package.
	EventsInverseTable = "oncall_events"
	// EventsColumn is the table column denoting the events relation/edge.
	EventsColumn = "alert_id"
	// FeedbackTable is the table that holds the feedback relation/edge.
	FeedbackTable = "alert_feedbacks"
	// FeedbackInverseTable is the table name for the AlertFeedback entity.
	// It exists in this package in order to avoid circular dependency with the "alertfeedback" package.
	FeedbackInverseTable = "alert_feedbacks"
	// FeedbackColumn is the table column denoting the feedback relation/edge.
	FeedbackColumn = "alert_id"
)

// Columns holds all SQL columns for alert fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldTitle,
	FieldProviderID,
}

var (
	// PlaybooksPrimaryKey and PlaybooksColumn2 are the table columns denoting the
	// primary key for the playbooks relation (M2M).
	PlaybooksPrimaryKey = []string{"playbook_id", "alert_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/rezible/rezible/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Alert queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByProviderID orders the results by the provider_id field.
func ByProviderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProviderID, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByPlaybooksCount orders the results by playbooks count.
func ByPlaybooksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPlaybooksStep(), opts...)
	}
}

// ByPlaybooks orders the results by playbooks terms.
func ByPlaybooks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlaybooksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEventsCount orders the results by events count.
func ByEventsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEventsStep(), opts...)
	}
}

// ByEvents orders the results by events terms.
func ByEvents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFeedbackCount orders the results by feedback count.
func ByFeedbackCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFeedbackStep(), opts...)
	}
}

// ByFeedback orders the results by feedback terms.
func ByFeedback(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFeedbackStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newPlaybooksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlaybooksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, PlaybooksTable, PlaybooksPrimaryKey...),
	)
}
func newEventsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, EventsTable, EventsColumn),
	)
}
func newFeedbackStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FeedbackInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FeedbackTable, FeedbackColumn),
	)
}
