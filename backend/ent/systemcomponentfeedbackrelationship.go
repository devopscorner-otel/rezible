// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/systemcomponent"
	"github.com/rezible/rezible/ent/systemcomponentfeedbackrelationship"
)

// SystemComponentFeedbackRelationship is the model entity for the SystemComponentFeedbackRelationship schema.
type SystemComponentFeedbackRelationship struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// SourceID holds the value of the "source_id" field.
	SourceID uuid.UUID `json:"source_id,omitempty"`
	// TargetID holds the value of the "target_id" field.
	TargetID uuid.UUID `json:"target_id,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SystemComponentFeedbackRelationshipQuery when eager-loading is set.
	Edges        SystemComponentFeedbackRelationshipEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SystemComponentFeedbackRelationshipEdges holds the relations/edges for other nodes in the graph.
type SystemComponentFeedbackRelationshipEdges struct {
	// Source holds the value of the source edge.
	Source *SystemComponent `json:"source,omitempty"`
	// Target holds the value of the target edge.
	Target *SystemComponent `json:"target,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SourceOrErr returns the Source value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SystemComponentFeedbackRelationshipEdges) SourceOrErr() (*SystemComponent, error) {
	if e.Source != nil {
		return e.Source, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: systemcomponent.Label}
	}
	return nil, &NotLoadedError{edge: "source"}
}

// TargetOrErr returns the Target value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SystemComponentFeedbackRelationshipEdges) TargetOrErr() (*SystemComponent, error) {
	if e.Target != nil {
		return e.Target, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: systemcomponent.Label}
	}
	return nil, &NotLoadedError{edge: "target"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SystemComponentFeedbackRelationship) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case systemcomponentfeedbackrelationship.FieldType, systemcomponentfeedbackrelationship.FieldDescription:
			values[i] = new(sql.NullString)
		case systemcomponentfeedbackrelationship.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case systemcomponentfeedbackrelationship.FieldID, systemcomponentfeedbackrelationship.FieldSourceID, systemcomponentfeedbackrelationship.FieldTargetID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SystemComponentFeedbackRelationship fields.
func (scfr *SystemComponentFeedbackRelationship) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case systemcomponentfeedbackrelationship.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				scfr.ID = *value
			}
		case systemcomponentfeedbackrelationship.FieldSourceID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field source_id", values[i])
			} else if value != nil {
				scfr.SourceID = *value
			}
		case systemcomponentfeedbackrelationship.FieldTargetID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field target_id", values[i])
			} else if value != nil {
				scfr.TargetID = *value
			}
		case systemcomponentfeedbackrelationship.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				scfr.Type = value.String
			}
		case systemcomponentfeedbackrelationship.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				scfr.Description = value.String
			}
		case systemcomponentfeedbackrelationship.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				scfr.CreatedAt = value.Time
			}
		default:
			scfr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SystemComponentFeedbackRelationship.
// This includes values selected through modifiers, order, etc.
func (scfr *SystemComponentFeedbackRelationship) Value(name string) (ent.Value, error) {
	return scfr.selectValues.Get(name)
}

// QuerySource queries the "source" edge of the SystemComponentFeedbackRelationship entity.
func (scfr *SystemComponentFeedbackRelationship) QuerySource() *SystemComponentQuery {
	return NewSystemComponentFeedbackRelationshipClient(scfr.config).QuerySource(scfr)
}

// QueryTarget queries the "target" edge of the SystemComponentFeedbackRelationship entity.
func (scfr *SystemComponentFeedbackRelationship) QueryTarget() *SystemComponentQuery {
	return NewSystemComponentFeedbackRelationshipClient(scfr.config).QueryTarget(scfr)
}

// Update returns a builder for updating this SystemComponentFeedbackRelationship.
// Note that you need to call SystemComponentFeedbackRelationship.Unwrap() before calling this method if this SystemComponentFeedbackRelationship
// was returned from a transaction, and the transaction was committed or rolled back.
func (scfr *SystemComponentFeedbackRelationship) Update() *SystemComponentFeedbackRelationshipUpdateOne {
	return NewSystemComponentFeedbackRelationshipClient(scfr.config).UpdateOne(scfr)
}

// Unwrap unwraps the SystemComponentFeedbackRelationship entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (scfr *SystemComponentFeedbackRelationship) Unwrap() *SystemComponentFeedbackRelationship {
	_tx, ok := scfr.config.driver.(*txDriver)
	if !ok {
		panic("ent: SystemComponentFeedbackRelationship is not a transactional entity")
	}
	scfr.config.driver = _tx.drv
	return scfr
}

// String implements the fmt.Stringer.
func (scfr *SystemComponentFeedbackRelationship) String() string {
	var builder strings.Builder
	builder.WriteString("SystemComponentFeedbackRelationship(")
	builder.WriteString(fmt.Sprintf("id=%v, ", scfr.ID))
	builder.WriteString("source_id=")
	builder.WriteString(fmt.Sprintf("%v", scfr.SourceID))
	builder.WriteString(", ")
	builder.WriteString("target_id=")
	builder.WriteString(fmt.Sprintf("%v", scfr.TargetID))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(scfr.Type)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(scfr.Description)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(scfr.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SystemComponentFeedbackRelationships is a parsable slice of SystemComponentFeedbackRelationship.
type SystemComponentFeedbackRelationships []*SystemComponentFeedbackRelationship
