// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/systemcomponent"
	"github.com/rezible/rezible/ent/systemrelationship"
)

// SystemRelationship is the model entity for the SystemRelationship schema.
type SystemRelationship struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// SourceComponentID holds the value of the "source_component_id" field.
	SourceComponentID uuid.UUID `json:"source_component_id,omitempty"`
	// TargetComponentID holds the value of the "target_component_id" field.
	TargetComponentID uuid.UUID `json:"target_component_id,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SystemRelationshipQuery when eager-loading is set.
	Edges        SystemRelationshipEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SystemRelationshipEdges holds the relations/edges for other nodes in the graph.
type SystemRelationshipEdges struct {
	// SourceComponent holds the value of the source_component edge.
	SourceComponent *SystemComponent `json:"source_component,omitempty"`
	// TargetComponent holds the value of the target_component edge.
	TargetComponent *SystemComponent `json:"target_component,omitempty"`
	// Controls holds the value of the controls edge.
	Controls []*SystemComponentControl `json:"controls,omitempty"`
	// Signals holds the value of the signals edge.
	Signals []*SystemComponentSignal `json:"signals,omitempty"`
	// ControlActions holds the value of the control_actions edge.
	ControlActions []*SystemRelationshipControlAction `json:"control_actions,omitempty"`
	// Feedback holds the value of the feedback edge.
	Feedback []*SystemRelationshipFeedback `json:"feedback,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// SourceComponentOrErr returns the SourceComponent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SystemRelationshipEdges) SourceComponentOrErr() (*SystemComponent, error) {
	if e.SourceComponent != nil {
		return e.SourceComponent, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: systemcomponent.Label}
	}
	return nil, &NotLoadedError{edge: "source_component"}
}

// TargetComponentOrErr returns the TargetComponent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SystemRelationshipEdges) TargetComponentOrErr() (*SystemComponent, error) {
	if e.TargetComponent != nil {
		return e.TargetComponent, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: systemcomponent.Label}
	}
	return nil, &NotLoadedError{edge: "target_component"}
}

// ControlsOrErr returns the Controls value or an error if the edge
// was not loaded in eager-loading.
func (e SystemRelationshipEdges) ControlsOrErr() ([]*SystemComponentControl, error) {
	if e.loadedTypes[2] {
		return e.Controls, nil
	}
	return nil, &NotLoadedError{edge: "controls"}
}

// SignalsOrErr returns the Signals value or an error if the edge
// was not loaded in eager-loading.
func (e SystemRelationshipEdges) SignalsOrErr() ([]*SystemComponentSignal, error) {
	if e.loadedTypes[3] {
		return e.Signals, nil
	}
	return nil, &NotLoadedError{edge: "signals"}
}

// ControlActionsOrErr returns the ControlActions value or an error if the edge
// was not loaded in eager-loading.
func (e SystemRelationshipEdges) ControlActionsOrErr() ([]*SystemRelationshipControlAction, error) {
	if e.loadedTypes[4] {
		return e.ControlActions, nil
	}
	return nil, &NotLoadedError{edge: "control_actions"}
}

// FeedbackOrErr returns the Feedback value or an error if the edge
// was not loaded in eager-loading.
func (e SystemRelationshipEdges) FeedbackOrErr() ([]*SystemRelationshipFeedback, error) {
	if e.loadedTypes[5] {
		return e.Feedback, nil
	}
	return nil, &NotLoadedError{edge: "feedback"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SystemRelationship) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case systemrelationship.FieldDescription:
			values[i] = new(sql.NullString)
		case systemrelationship.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case systemrelationship.FieldID, systemrelationship.FieldSourceComponentID, systemrelationship.FieldTargetComponentID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SystemRelationship fields.
func (sr *SystemRelationship) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case systemrelationship.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				sr.ID = *value
			}
		case systemrelationship.FieldSourceComponentID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field source_component_id", values[i])
			} else if value != nil {
				sr.SourceComponentID = *value
			}
		case systemrelationship.FieldTargetComponentID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field target_component_id", values[i])
			} else if value != nil {
				sr.TargetComponentID = *value
			}
		case systemrelationship.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				sr.Description = value.String
			}
		case systemrelationship.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sr.CreatedAt = value.Time
			}
		default:
			sr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SystemRelationship.
// This includes values selected through modifiers, order, etc.
func (sr *SystemRelationship) Value(name string) (ent.Value, error) {
	return sr.selectValues.Get(name)
}

// QuerySourceComponent queries the "source_component" edge of the SystemRelationship entity.
func (sr *SystemRelationship) QuerySourceComponent() *SystemComponentQuery {
	return NewSystemRelationshipClient(sr.config).QuerySourceComponent(sr)
}

// QueryTargetComponent queries the "target_component" edge of the SystemRelationship entity.
func (sr *SystemRelationship) QueryTargetComponent() *SystemComponentQuery {
	return NewSystemRelationshipClient(sr.config).QueryTargetComponent(sr)
}

// QueryControls queries the "controls" edge of the SystemRelationship entity.
func (sr *SystemRelationship) QueryControls() *SystemComponentControlQuery {
	return NewSystemRelationshipClient(sr.config).QueryControls(sr)
}

// QuerySignals queries the "signals" edge of the SystemRelationship entity.
func (sr *SystemRelationship) QuerySignals() *SystemComponentSignalQuery {
	return NewSystemRelationshipClient(sr.config).QuerySignals(sr)
}

// QueryControlActions queries the "control_actions" edge of the SystemRelationship entity.
func (sr *SystemRelationship) QueryControlActions() *SystemRelationshipControlActionQuery {
	return NewSystemRelationshipClient(sr.config).QueryControlActions(sr)
}

// QueryFeedback queries the "feedback" edge of the SystemRelationship entity.
func (sr *SystemRelationship) QueryFeedback() *SystemRelationshipFeedbackQuery {
	return NewSystemRelationshipClient(sr.config).QueryFeedback(sr)
}

// Update returns a builder for updating this SystemRelationship.
// Note that you need to call SystemRelationship.Unwrap() before calling this method if this SystemRelationship
// was returned from a transaction, and the transaction was committed or rolled back.
func (sr *SystemRelationship) Update() *SystemRelationshipUpdateOne {
	return NewSystemRelationshipClient(sr.config).UpdateOne(sr)
}

// Unwrap unwraps the SystemRelationship entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sr *SystemRelationship) Unwrap() *SystemRelationship {
	_tx, ok := sr.config.driver.(*txDriver)
	if !ok {
		panic("ent: SystemRelationship is not a transactional entity")
	}
	sr.config.driver = _tx.drv
	return sr
}

// String implements the fmt.Stringer.
func (sr *SystemRelationship) String() string {
	var builder strings.Builder
	builder.WriteString("SystemRelationship(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sr.ID))
	builder.WriteString("source_component_id=")
	builder.WriteString(fmt.Sprintf("%v", sr.SourceComponentID))
	builder.WriteString(", ")
	builder.WriteString("target_component_id=")
	builder.WriteString(fmt.Sprintf("%v", sr.TargetComponentID))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(sr.Description)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sr.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SystemRelationships is a parsable slice of SystemRelationship.
type SystemRelationships []*SystemRelationship
