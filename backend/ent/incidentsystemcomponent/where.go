// Code generated by ent, DO NOT EDIT.

package incidentsystemcomponent

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.IncidentSystemComponent {
	return predicate.IncidentSystemComponent(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.IncidentSystemComponent {
	return predicate.IncidentSystemComponent(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.IncidentSystemComponent {
	return predicate.IncidentSystemComponent(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.IncidentSystemComponent {
	return predicate.IncidentSystemComponent(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.IncidentSystemComponent {
	return predicate.IncidentSystemComponent(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.IncidentSystemComponent {
	return predicate.IncidentSystemComponent(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.IncidentSystemComponent {
	return predicate.IncidentSystemComponent(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.IncidentSystemComponent {
	return predicate.IncidentSystemComponent(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.IncidentSystemComponent {
	return predicate.IncidentSystemComponent(sql.FieldLTE(FieldID, id))
}

// IncidentID applies equality check predicate on the "incident_id" field. It's identical to IncidentIDEQ.
func IncidentID(v uuid.UUID) predicate.IncidentSystemComponent {
	return predicate.IncidentSystemComponent(sql.FieldEQ(FieldIncidentID, v))
}

// SystemComponentID applies equality check predicate on the "system_component_id" field. It's identical to SystemComponentIDEQ.
func SystemComponentID(v uuid.UUID) predicate.IncidentSystemComponent {
	return predicate.IncidentSystemComponent(sql.FieldEQ(FieldSystemComponentID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.IncidentSystemComponent {
	return predicate.IncidentSystemComponent(sql.FieldEQ(FieldCreatedAt, v))
}

// IncidentIDEQ applies the EQ predicate on the "incident_id" field.
func IncidentIDEQ(v uuid.UUID) predicate.IncidentSystemComponent {
	return predicate.IncidentSystemComponent(sql.FieldEQ(FieldIncidentID, v))
}

// IncidentIDNEQ applies the NEQ predicate on the "incident_id" field.
func IncidentIDNEQ(v uuid.UUID) predicate.IncidentSystemComponent {
	return predicate.IncidentSystemComponent(sql.FieldNEQ(FieldIncidentID, v))
}

// IncidentIDIn applies the In predicate on the "incident_id" field.
func IncidentIDIn(vs ...uuid.UUID) predicate.IncidentSystemComponent {
	return predicate.IncidentSystemComponent(sql.FieldIn(FieldIncidentID, vs...))
}

// IncidentIDNotIn applies the NotIn predicate on the "incident_id" field.
func IncidentIDNotIn(vs ...uuid.UUID) predicate.IncidentSystemComponent {
	return predicate.IncidentSystemComponent(sql.FieldNotIn(FieldIncidentID, vs...))
}

// SystemComponentIDEQ applies the EQ predicate on the "system_component_id" field.
func SystemComponentIDEQ(v uuid.UUID) predicate.IncidentSystemComponent {
	return predicate.IncidentSystemComponent(sql.FieldEQ(FieldSystemComponentID, v))
}

// SystemComponentIDNEQ applies the NEQ predicate on the "system_component_id" field.
func SystemComponentIDNEQ(v uuid.UUID) predicate.IncidentSystemComponent {
	return predicate.IncidentSystemComponent(sql.FieldNEQ(FieldSystemComponentID, v))
}

// SystemComponentIDIn applies the In predicate on the "system_component_id" field.
func SystemComponentIDIn(vs ...uuid.UUID) predicate.IncidentSystemComponent {
	return predicate.IncidentSystemComponent(sql.FieldIn(FieldSystemComponentID, vs...))
}

// SystemComponentIDNotIn applies the NotIn predicate on the "system_component_id" field.
func SystemComponentIDNotIn(vs ...uuid.UUID) predicate.IncidentSystemComponent {
	return predicate.IncidentSystemComponent(sql.FieldNotIn(FieldSystemComponentID, vs...))
}

// RoleEQ applies the EQ predicate on the "role" field.
func RoleEQ(v Role) predicate.IncidentSystemComponent {
	return predicate.IncidentSystemComponent(sql.FieldEQ(FieldRole, v))
}

// RoleNEQ applies the NEQ predicate on the "role" field.
func RoleNEQ(v Role) predicate.IncidentSystemComponent {
	return predicate.IncidentSystemComponent(sql.FieldNEQ(FieldRole, v))
}

// RoleIn applies the In predicate on the "role" field.
func RoleIn(vs ...Role) predicate.IncidentSystemComponent {
	return predicate.IncidentSystemComponent(sql.FieldIn(FieldRole, vs...))
}

// RoleNotIn applies the NotIn predicate on the "role" field.
func RoleNotIn(vs ...Role) predicate.IncidentSystemComponent {
	return predicate.IncidentSystemComponent(sql.FieldNotIn(FieldRole, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.IncidentSystemComponent {
	return predicate.IncidentSystemComponent(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.IncidentSystemComponent {
	return predicate.IncidentSystemComponent(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.IncidentSystemComponent {
	return predicate.IncidentSystemComponent(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.IncidentSystemComponent {
	return predicate.IncidentSystemComponent(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.IncidentSystemComponent {
	return predicate.IncidentSystemComponent(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.IncidentSystemComponent {
	return predicate.IncidentSystemComponent(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.IncidentSystemComponent {
	return predicate.IncidentSystemComponent(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.IncidentSystemComponent {
	return predicate.IncidentSystemComponent(sql.FieldLTE(FieldCreatedAt, v))
}

// HasIncident applies the HasEdge predicate on the "incident" edge.
func HasIncident() predicate.IncidentSystemComponent {
	return predicate.IncidentSystemComponent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, IncidentTable, IncidentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIncidentWith applies the HasEdge predicate on the "incident" edge with a given conditions (other predicates).
func HasIncidentWith(preds ...predicate.Incident) predicate.IncidentSystemComponent {
	return predicate.IncidentSystemComponent(func(s *sql.Selector) {
		step := newIncidentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSystemComponent applies the HasEdge predicate on the "system_component" edge.
func HasSystemComponent() predicate.IncidentSystemComponent {
	return predicate.IncidentSystemComponent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SystemComponentTable, SystemComponentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSystemComponentWith applies the HasEdge predicate on the "system_component" edge with a given conditions (other predicates).
func HasSystemComponentWith(preds ...predicate.SystemComponent) predicate.IncidentSystemComponent {
	return predicate.IncidentSystemComponent(func(s *sql.Selector) {
		step := newSystemComponentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.IncidentSystemComponent) predicate.IncidentSystemComponent {
	return predicate.IncidentSystemComponent(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.IncidentSystemComponent) predicate.IncidentSystemComponent {
	return predicate.IncidentSystemComponent(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.IncidentSystemComponent) predicate.IncidentSystemComponent {
	return predicate.IncidentSystemComponent(sql.NotPredicates(p))
}
