// Code generated by ent, DO NOT EDIT.

package incidentsystemcomponent

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the incidentsystemcomponent type in the database.
	Label = "incident_system_component"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIncidentID holds the string denoting the incident_id field in the database.
	FieldIncidentID = "incident_id"
	// FieldSystemComponentID holds the string denoting the system_component_id field in the database.
	FieldSystemComponentID = "system_component_id"
	// FieldRole holds the string denoting the role field in the database.
	FieldRole = "role"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeIncident holds the string denoting the incident edge name in mutations.
	EdgeIncident = "incident"
	// EdgeSystemComponent holds the string denoting the system_component edge name in mutations.
	EdgeSystemComponent = "system_component"
	// Table holds the table name of the incidentsystemcomponent in the database.
	Table = "incident_system_components"
	// IncidentTable is the table that holds the incident relation/edge.
	IncidentTable = "incident_system_components"
	// IncidentInverseTable is the table name for the Incident entity.
	// It exists in this package in order to avoid circular dependency with the "incident" package.
	IncidentInverseTable = "incidents"
	// IncidentColumn is the table column denoting the incident relation/edge.
	IncidentColumn = "incident_id"
	// SystemComponentTable is the table that holds the system_component relation/edge.
	SystemComponentTable = "incident_system_components"
	// SystemComponentInverseTable is the table name for the SystemComponent entity.
	// It exists in this package in order to avoid circular dependency with the "systemcomponent" package.
	SystemComponentInverseTable = "system_components"
	// SystemComponentColumn is the table column denoting the system_component relation/edge.
	SystemComponentColumn = "system_component_id"
)

// Columns holds all SQL columns for incidentsystemcomponent fields.
var Columns = []string{
	FieldID,
	FieldIncidentID,
	FieldSystemComponentID,
	FieldRole,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Role defines the type for the "role" enum field.
type Role string

// Role values.
const (
	RolePrimary      Role = "primary"
	RoleContributing Role = "contributing"
	RoleAffected     Role = "affected"
	RoleMitigating   Role = "mitigating"
)

func (r Role) String() string {
	return string(r)
}

// RoleValidator is a validator for the "role" field enum values. It is called by the builders before save.
func RoleValidator(r Role) error {
	switch r {
	case RolePrimary, RoleContributing, RoleAffected, RoleMitigating:
		return nil
	default:
		return fmt.Errorf("incidentsystemcomponent: invalid enum value for role field: %q", r)
	}
}

// OrderOption defines the ordering options for the IncidentSystemComponent queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIncidentID orders the results by the incident_id field.
func ByIncidentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIncidentID, opts...).ToFunc()
}

// BySystemComponentID orders the results by the system_component_id field.
func BySystemComponentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSystemComponentID, opts...).ToFunc()
}

// ByRole orders the results by the role field.
func ByRole(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRole, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByIncidentField orders the results by incident field.
func ByIncidentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIncidentStep(), sql.OrderByField(field, opts...))
	}
}

// BySystemComponentField orders the results by system_component field.
func BySystemComponentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSystemComponentStep(), sql.OrderByField(field, opts...))
	}
}
func newIncidentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IncidentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, IncidentTable, IncidentColumn),
	)
}
func newSystemComponentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SystemComponentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SystemComponentTable, SystemComponentColumn),
	)
}
