// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/oncallhandovertemplate"
	"github.com/rezible/rezible/ent/oncallroster"
	"github.com/rezible/rezible/ent/predicate"
)

// OncallHandoverTemplateQuery is the builder for querying OncallHandoverTemplate entities.
type OncallHandoverTemplateQuery struct {
	config
	ctx        *QueryContext
	order      []oncallhandovertemplate.OrderOption
	inters     []Interceptor
	predicates []predicate.OncallHandoverTemplate
	withRoster *OncallRosterQuery
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OncallHandoverTemplateQuery builder.
func (ohtq *OncallHandoverTemplateQuery) Where(ps ...predicate.OncallHandoverTemplate) *OncallHandoverTemplateQuery {
	ohtq.predicates = append(ohtq.predicates, ps...)
	return ohtq
}

// Limit the number of records to be returned by this query.
func (ohtq *OncallHandoverTemplateQuery) Limit(limit int) *OncallHandoverTemplateQuery {
	ohtq.ctx.Limit = &limit
	return ohtq
}

// Offset to start from.
func (ohtq *OncallHandoverTemplateQuery) Offset(offset int) *OncallHandoverTemplateQuery {
	ohtq.ctx.Offset = &offset
	return ohtq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ohtq *OncallHandoverTemplateQuery) Unique(unique bool) *OncallHandoverTemplateQuery {
	ohtq.ctx.Unique = &unique
	return ohtq
}

// Order specifies how the records should be ordered.
func (ohtq *OncallHandoverTemplateQuery) Order(o ...oncallhandovertemplate.OrderOption) *OncallHandoverTemplateQuery {
	ohtq.order = append(ohtq.order, o...)
	return ohtq
}

// QueryRoster chains the current query on the "roster" edge.
func (ohtq *OncallHandoverTemplateQuery) QueryRoster() *OncallRosterQuery {
	query := (&OncallRosterClient{config: ohtq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ohtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ohtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(oncallhandovertemplate.Table, oncallhandovertemplate.FieldID, selector),
			sqlgraph.To(oncallroster.Table, oncallroster.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, oncallhandovertemplate.RosterTable, oncallhandovertemplate.RosterColumn),
		)
		fromU = sqlgraph.SetNeighbors(ohtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first OncallHandoverTemplate entity from the query.
// Returns a *NotFoundError when no OncallHandoverTemplate was found.
func (ohtq *OncallHandoverTemplateQuery) First(ctx context.Context) (*OncallHandoverTemplate, error) {
	nodes, err := ohtq.Limit(1).All(setContextOp(ctx, ohtq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{oncallhandovertemplate.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ohtq *OncallHandoverTemplateQuery) FirstX(ctx context.Context) *OncallHandoverTemplate {
	node, err := ohtq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first OncallHandoverTemplate ID from the query.
// Returns a *NotFoundError when no OncallHandoverTemplate ID was found.
func (ohtq *OncallHandoverTemplateQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = ohtq.Limit(1).IDs(setContextOp(ctx, ohtq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{oncallhandovertemplate.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ohtq *OncallHandoverTemplateQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := ohtq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single OncallHandoverTemplate entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one OncallHandoverTemplate entity is found.
// Returns a *NotFoundError when no OncallHandoverTemplate entities are found.
func (ohtq *OncallHandoverTemplateQuery) Only(ctx context.Context) (*OncallHandoverTemplate, error) {
	nodes, err := ohtq.Limit(2).All(setContextOp(ctx, ohtq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{oncallhandovertemplate.Label}
	default:
		return nil, &NotSingularError{oncallhandovertemplate.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ohtq *OncallHandoverTemplateQuery) OnlyX(ctx context.Context) *OncallHandoverTemplate {
	node, err := ohtq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only OncallHandoverTemplate ID in the query.
// Returns a *NotSingularError when more than one OncallHandoverTemplate ID is found.
// Returns a *NotFoundError when no entities are found.
func (ohtq *OncallHandoverTemplateQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = ohtq.Limit(2).IDs(setContextOp(ctx, ohtq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{oncallhandovertemplate.Label}
	default:
		err = &NotSingularError{oncallhandovertemplate.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ohtq *OncallHandoverTemplateQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := ohtq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OncallHandoverTemplates.
func (ohtq *OncallHandoverTemplateQuery) All(ctx context.Context) ([]*OncallHandoverTemplate, error) {
	ctx = setContextOp(ctx, ohtq.ctx, ent.OpQueryAll)
	if err := ohtq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*OncallHandoverTemplate, *OncallHandoverTemplateQuery]()
	return withInterceptors[[]*OncallHandoverTemplate](ctx, ohtq, qr, ohtq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ohtq *OncallHandoverTemplateQuery) AllX(ctx context.Context) []*OncallHandoverTemplate {
	nodes, err := ohtq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of OncallHandoverTemplate IDs.
func (ohtq *OncallHandoverTemplateQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if ohtq.ctx.Unique == nil && ohtq.path != nil {
		ohtq.Unique(true)
	}
	ctx = setContextOp(ctx, ohtq.ctx, ent.OpQueryIDs)
	if err = ohtq.Select(oncallhandovertemplate.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ohtq *OncallHandoverTemplateQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := ohtq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ohtq *OncallHandoverTemplateQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ohtq.ctx, ent.OpQueryCount)
	if err := ohtq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ohtq, querierCount[*OncallHandoverTemplateQuery](), ohtq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ohtq *OncallHandoverTemplateQuery) CountX(ctx context.Context) int {
	count, err := ohtq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ohtq *OncallHandoverTemplateQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ohtq.ctx, ent.OpQueryExist)
	switch _, err := ohtq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ohtq *OncallHandoverTemplateQuery) ExistX(ctx context.Context) bool {
	exist, err := ohtq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OncallHandoverTemplateQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ohtq *OncallHandoverTemplateQuery) Clone() *OncallHandoverTemplateQuery {
	if ohtq == nil {
		return nil
	}
	return &OncallHandoverTemplateQuery{
		config:     ohtq.config,
		ctx:        ohtq.ctx.Clone(),
		order:      append([]oncallhandovertemplate.OrderOption{}, ohtq.order...),
		inters:     append([]Interceptor{}, ohtq.inters...),
		predicates: append([]predicate.OncallHandoverTemplate{}, ohtq.predicates...),
		withRoster: ohtq.withRoster.Clone(),
		// clone intermediate query.
		sql:       ohtq.sql.Clone(),
		path:      ohtq.path,
		modifiers: append([]func(*sql.Selector){}, ohtq.modifiers...),
	}
}

// WithRoster tells the query-builder to eager-load the nodes that are connected to
// the "roster" edge. The optional arguments are used to configure the query builder of the edge.
func (ohtq *OncallHandoverTemplateQuery) WithRoster(opts ...func(*OncallRosterQuery)) *OncallHandoverTemplateQuery {
	query := (&OncallRosterClient{config: ohtq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ohtq.withRoster = query
	return ohtq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OncallHandoverTemplate.Query().
//		GroupBy(oncallhandovertemplate.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ohtq *OncallHandoverTemplateQuery) GroupBy(field string, fields ...string) *OncallHandoverTemplateGroupBy {
	ohtq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &OncallHandoverTemplateGroupBy{build: ohtq}
	grbuild.flds = &ohtq.ctx.Fields
	grbuild.label = oncallhandovertemplate.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.OncallHandoverTemplate.Query().
//		Select(oncallhandovertemplate.FieldCreatedAt).
//		Scan(ctx, &v)
func (ohtq *OncallHandoverTemplateQuery) Select(fields ...string) *OncallHandoverTemplateSelect {
	ohtq.ctx.Fields = append(ohtq.ctx.Fields, fields...)
	sbuild := &OncallHandoverTemplateSelect{OncallHandoverTemplateQuery: ohtq}
	sbuild.label = oncallhandovertemplate.Label
	sbuild.flds, sbuild.scan = &ohtq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a OncallHandoverTemplateSelect configured with the given aggregations.
func (ohtq *OncallHandoverTemplateQuery) Aggregate(fns ...AggregateFunc) *OncallHandoverTemplateSelect {
	return ohtq.Select().Aggregate(fns...)
}

func (ohtq *OncallHandoverTemplateQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ohtq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ohtq); err != nil {
				return err
			}
		}
	}
	for _, f := range ohtq.ctx.Fields {
		if !oncallhandovertemplate.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ohtq.path != nil {
		prev, err := ohtq.path(ctx)
		if err != nil {
			return err
		}
		ohtq.sql = prev
	}
	if oncallhandovertemplate.Policy == nil {
		return errors.New("ent: uninitialized oncallhandovertemplate.Policy (forgotten import ent/runtime?)")
	}
	if err := oncallhandovertemplate.Policy.EvalQuery(ctx, ohtq); err != nil {
		return err
	}
	return nil
}

func (ohtq *OncallHandoverTemplateQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*OncallHandoverTemplate, error) {
	var (
		nodes       = []*OncallHandoverTemplate{}
		_spec       = ohtq.querySpec()
		loadedTypes = [1]bool{
			ohtq.withRoster != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*OncallHandoverTemplate).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &OncallHandoverTemplate{config: ohtq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(ohtq.modifiers) > 0 {
		_spec.Modifiers = ohtq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ohtq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ohtq.withRoster; query != nil {
		if err := ohtq.loadRoster(ctx, query, nodes,
			func(n *OncallHandoverTemplate) { n.Edges.Roster = []*OncallRoster{} },
			func(n *OncallHandoverTemplate, e *OncallRoster) { n.Edges.Roster = append(n.Edges.Roster, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ohtq *OncallHandoverTemplateQuery) loadRoster(ctx context.Context, query *OncallRosterQuery, nodes []*OncallHandoverTemplate, init func(*OncallHandoverTemplate), assign func(*OncallHandoverTemplate, *OncallRoster)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*OncallHandoverTemplate)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(oncallroster.FieldHandoverTemplateID)
	}
	query.Where(predicate.OncallRoster(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(oncallhandovertemplate.RosterColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.HandoverTemplateID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "handover_template_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (ohtq *OncallHandoverTemplateQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ohtq.querySpec()
	if len(ohtq.modifiers) > 0 {
		_spec.Modifiers = ohtq.modifiers
	}
	_spec.Node.Columns = ohtq.ctx.Fields
	if len(ohtq.ctx.Fields) > 0 {
		_spec.Unique = ohtq.ctx.Unique != nil && *ohtq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ohtq.driver, _spec)
}

func (ohtq *OncallHandoverTemplateQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(oncallhandovertemplate.Table, oncallhandovertemplate.Columns, sqlgraph.NewFieldSpec(oncallhandovertemplate.FieldID, field.TypeUUID))
	_spec.From = ohtq.sql
	if unique := ohtq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ohtq.path != nil {
		_spec.Unique = true
	}
	if fields := ohtq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oncallhandovertemplate.FieldID)
		for i := range fields {
			if fields[i] != oncallhandovertemplate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ohtq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ohtq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ohtq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ohtq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ohtq *OncallHandoverTemplateQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ohtq.driver.Dialect())
	t1 := builder.Table(oncallhandovertemplate.Table)
	columns := ohtq.ctx.Fields
	if len(columns) == 0 {
		columns = oncallhandovertemplate.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ohtq.sql != nil {
		selector = ohtq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ohtq.ctx.Unique != nil && *ohtq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range ohtq.modifiers {
		m(selector)
	}
	for _, p := range ohtq.predicates {
		p(selector)
	}
	for _, p := range ohtq.order {
		p(selector)
	}
	if offset := ohtq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ohtq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ohtq *OncallHandoverTemplateQuery) Modify(modifiers ...func(s *sql.Selector)) *OncallHandoverTemplateSelect {
	ohtq.modifiers = append(ohtq.modifiers, modifiers...)
	return ohtq.Select()
}

// OncallHandoverTemplateGroupBy is the group-by builder for OncallHandoverTemplate entities.
type OncallHandoverTemplateGroupBy struct {
	selector
	build *OncallHandoverTemplateQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ohtgb *OncallHandoverTemplateGroupBy) Aggregate(fns ...AggregateFunc) *OncallHandoverTemplateGroupBy {
	ohtgb.fns = append(ohtgb.fns, fns...)
	return ohtgb
}

// Scan applies the selector query and scans the result into the given value.
func (ohtgb *OncallHandoverTemplateGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ohtgb.build.ctx, ent.OpQueryGroupBy)
	if err := ohtgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OncallHandoverTemplateQuery, *OncallHandoverTemplateGroupBy](ctx, ohtgb.build, ohtgb, ohtgb.build.inters, v)
}

func (ohtgb *OncallHandoverTemplateGroupBy) sqlScan(ctx context.Context, root *OncallHandoverTemplateQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ohtgb.fns))
	for _, fn := range ohtgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ohtgb.flds)+len(ohtgb.fns))
		for _, f := range *ohtgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ohtgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ohtgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// OncallHandoverTemplateSelect is the builder for selecting fields of OncallHandoverTemplate entities.
type OncallHandoverTemplateSelect struct {
	*OncallHandoverTemplateQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ohts *OncallHandoverTemplateSelect) Aggregate(fns ...AggregateFunc) *OncallHandoverTemplateSelect {
	ohts.fns = append(ohts.fns, fns...)
	return ohts
}

// Scan applies the selector query and scans the result into the given value.
func (ohts *OncallHandoverTemplateSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ohts.ctx, ent.OpQuerySelect)
	if err := ohts.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OncallHandoverTemplateQuery, *OncallHandoverTemplateSelect](ctx, ohts.OncallHandoverTemplateQuery, ohts, ohts.inters, v)
}

func (ohts *OncallHandoverTemplateSelect) sqlScan(ctx context.Context, root *OncallHandoverTemplateQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ohts.fns))
	for _, fn := range ohts.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ohts.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ohts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ohts *OncallHandoverTemplateSelect) Modify(modifiers ...func(s *sql.Selector)) *OncallHandoverTemplateSelect {
	ohts.modifiers = append(ohts.modifiers, modifiers...)
	return ohts
}
