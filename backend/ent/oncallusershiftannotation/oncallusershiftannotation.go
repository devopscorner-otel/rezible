// Code generated by ent, DO NOT EDIT.

package oncallusershiftannotation

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the oncallusershiftannotation type in the database.
	Label = "oncall_user_shift_annotation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldShiftID holds the string denoting the shift_id field in the database.
	FieldShiftID = "shift_id"
	// FieldEventID holds the string denoting the event_id field in the database.
	FieldEventID = "event_id"
	// FieldMinutesOccupied holds the string denoting the minutes_occupied field in the database.
	FieldMinutesOccupied = "minutes_occupied"
	// FieldNotes holds the string denoting the notes field in the database.
	FieldNotes = "notes"
	// FieldPinned holds the string denoting the pinned field in the database.
	FieldPinned = "pinned"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeShift holds the string denoting the shift edge name in mutations.
	EdgeShift = "shift"
	// Table holds the table name of the oncallusershiftannotation in the database.
	Table = "oncall_user_shift_annotations"
	// ShiftTable is the table that holds the shift relation/edge.
	ShiftTable = "oncall_user_shift_annotations"
	// ShiftInverseTable is the table name for the OncallUserShift entity.
	// It exists in this package in order to avoid circular dependency with the "oncallusershift" package.
	ShiftInverseTable = "oncall_user_shifts"
	// ShiftColumn is the table column denoting the shift relation/edge.
	ShiftColumn = "shift_id"
)

// Columns holds all SQL columns for oncallusershiftannotation fields.
var Columns = []string{
	FieldID,
	FieldShiftID,
	FieldEventID,
	FieldMinutesOccupied,
	FieldNotes,
	FieldPinned,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the OncallUserShiftAnnotation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByShiftID orders the results by the shift_id field.
func ByShiftID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShiftID, opts...).ToFunc()
}

// ByEventID orders the results by the event_id field.
func ByEventID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEventID, opts...).ToFunc()
}

// ByMinutesOccupied orders the results by the minutes_occupied field.
func ByMinutesOccupied(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinutesOccupied, opts...).ToFunc()
}

// ByNotes orders the results by the notes field.
func ByNotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotes, opts...).ToFunc()
}

// ByPinned orders the results by the pinned field.
func ByPinned(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPinned, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByShiftField orders the results by shift field.
func ByShiftField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newShiftStep(), sql.OrderByField(field, opts...))
	}
}
func newShiftStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ShiftInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ShiftTable, ShiftColumn),
	)
}
