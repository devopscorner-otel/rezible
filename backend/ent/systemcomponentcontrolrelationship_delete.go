// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/systemcomponentcontrolrelationship"
)

// SystemComponentControlRelationshipDelete is the builder for deleting a SystemComponentControlRelationship entity.
type SystemComponentControlRelationshipDelete struct {
	config
	hooks    []Hook
	mutation *SystemComponentControlRelationshipMutation
}

// Where appends a list predicates to the SystemComponentControlRelationshipDelete builder.
func (sccrd *SystemComponentControlRelationshipDelete) Where(ps ...predicate.SystemComponentControlRelationship) *SystemComponentControlRelationshipDelete {
	sccrd.mutation.Where(ps...)
	return sccrd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (sccrd *SystemComponentControlRelationshipDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, sccrd.sqlExec, sccrd.mutation, sccrd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (sccrd *SystemComponentControlRelationshipDelete) ExecX(ctx context.Context) int {
	n, err := sccrd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (sccrd *SystemComponentControlRelationshipDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(systemcomponentcontrolrelationship.Table, sqlgraph.NewFieldSpec(systemcomponentcontrolrelationship.FieldID, field.TypeUUID))
	if ps := sccrd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, sccrd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	sccrd.mutation.done = true
	return affected, err
}

// SystemComponentControlRelationshipDeleteOne is the builder for deleting a single SystemComponentControlRelationship entity.
type SystemComponentControlRelationshipDeleteOne struct {
	sccrd *SystemComponentControlRelationshipDelete
}

// Where appends a list predicates to the SystemComponentControlRelationshipDelete builder.
func (sccrdo *SystemComponentControlRelationshipDeleteOne) Where(ps ...predicate.SystemComponentControlRelationship) *SystemComponentControlRelationshipDeleteOne {
	sccrdo.sccrd.mutation.Where(ps...)
	return sccrdo
}

// Exec executes the deletion query.
func (sccrdo *SystemComponentControlRelationshipDeleteOne) Exec(ctx context.Context) error {
	n, err := sccrdo.sccrd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{systemcomponentcontrolrelationship.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (sccrdo *SystemComponentControlRelationshipDeleteOne) ExecX(ctx context.Context) {
	if err := sccrdo.Exec(ctx); err != nil {
		panic(err)
	}
}
