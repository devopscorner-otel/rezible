// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/oncallroster"
	"github.com/rezible/rezible/ent/oncallshift"
	"github.com/rezible/rezible/ent/oncallshifthandover"
	"github.com/rezible/rezible/ent/oncallshiftmetrics"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/tenant"
	"github.com/rezible/rezible/ent/user"
)

// OncallShiftQuery is the builder for querying OncallShift entities.
type OncallShiftQuery struct {
	config
	ctx              *QueryContext
	order            []oncallshift.OrderOption
	inters           []Interceptor
	predicates       []predicate.OncallShift
	withTenant       *TenantQuery
	withUser         *UserQuery
	withRoster       *OncallRosterQuery
	withPrimaryShift *OncallShiftQuery
	withHandover     *OncallShiftHandoverQuery
	withMetrics      *OncallShiftMetricsQuery
	modifiers        []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OncallShiftQuery builder.
func (osq *OncallShiftQuery) Where(ps ...predicate.OncallShift) *OncallShiftQuery {
	osq.predicates = append(osq.predicates, ps...)
	return osq
}

// Limit the number of records to be returned by this query.
func (osq *OncallShiftQuery) Limit(limit int) *OncallShiftQuery {
	osq.ctx.Limit = &limit
	return osq
}

// Offset to start from.
func (osq *OncallShiftQuery) Offset(offset int) *OncallShiftQuery {
	osq.ctx.Offset = &offset
	return osq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (osq *OncallShiftQuery) Unique(unique bool) *OncallShiftQuery {
	osq.ctx.Unique = &unique
	return osq
}

// Order specifies how the records should be ordered.
func (osq *OncallShiftQuery) Order(o ...oncallshift.OrderOption) *OncallShiftQuery {
	osq.order = append(osq.order, o...)
	return osq
}

// QueryTenant chains the current query on the "tenant" edge.
func (osq *OncallShiftQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: osq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := osq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := osq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(oncallshift.Table, oncallshift.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, oncallshift.TenantTable, oncallshift.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(osq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUser chains the current query on the "user" edge.
func (osq *OncallShiftQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: osq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := osq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := osq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(oncallshift.Table, oncallshift.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, oncallshift.UserTable, oncallshift.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(osq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRoster chains the current query on the "roster" edge.
func (osq *OncallShiftQuery) QueryRoster() *OncallRosterQuery {
	query := (&OncallRosterClient{config: osq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := osq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := osq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(oncallshift.Table, oncallshift.FieldID, selector),
			sqlgraph.To(oncallroster.Table, oncallroster.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, oncallshift.RosterTable, oncallshift.RosterColumn),
		)
		fromU = sqlgraph.SetNeighbors(osq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPrimaryShift chains the current query on the "primary_shift" edge.
func (osq *OncallShiftQuery) QueryPrimaryShift() *OncallShiftQuery {
	query := (&OncallShiftClient{config: osq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := osq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := osq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(oncallshift.Table, oncallshift.FieldID, selector),
			sqlgraph.To(oncallshift.Table, oncallshift.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, oncallshift.PrimaryShiftTable, oncallshift.PrimaryShiftColumn),
		)
		fromU = sqlgraph.SetNeighbors(osq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHandover chains the current query on the "handover" edge.
func (osq *OncallShiftQuery) QueryHandover() *OncallShiftHandoverQuery {
	query := (&OncallShiftHandoverClient{config: osq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := osq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := osq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(oncallshift.Table, oncallshift.FieldID, selector),
			sqlgraph.To(oncallshifthandover.Table, oncallshifthandover.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, oncallshift.HandoverTable, oncallshift.HandoverColumn),
		)
		fromU = sqlgraph.SetNeighbors(osq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMetrics chains the current query on the "metrics" edge.
func (osq *OncallShiftQuery) QueryMetrics() *OncallShiftMetricsQuery {
	query := (&OncallShiftMetricsClient{config: osq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := osq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := osq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(oncallshift.Table, oncallshift.FieldID, selector),
			sqlgraph.To(oncallshiftmetrics.Table, oncallshiftmetrics.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, oncallshift.MetricsTable, oncallshift.MetricsColumn),
		)
		fromU = sqlgraph.SetNeighbors(osq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first OncallShift entity from the query.
// Returns a *NotFoundError when no OncallShift was found.
func (osq *OncallShiftQuery) First(ctx context.Context) (*OncallShift, error) {
	nodes, err := osq.Limit(1).All(setContextOp(ctx, osq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{oncallshift.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (osq *OncallShiftQuery) FirstX(ctx context.Context) *OncallShift {
	node, err := osq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first OncallShift ID from the query.
// Returns a *NotFoundError when no OncallShift ID was found.
func (osq *OncallShiftQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = osq.Limit(1).IDs(setContextOp(ctx, osq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{oncallshift.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (osq *OncallShiftQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := osq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single OncallShift entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one OncallShift entity is found.
// Returns a *NotFoundError when no OncallShift entities are found.
func (osq *OncallShiftQuery) Only(ctx context.Context) (*OncallShift, error) {
	nodes, err := osq.Limit(2).All(setContextOp(ctx, osq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{oncallshift.Label}
	default:
		return nil, &NotSingularError{oncallshift.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (osq *OncallShiftQuery) OnlyX(ctx context.Context) *OncallShift {
	node, err := osq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only OncallShift ID in the query.
// Returns a *NotSingularError when more than one OncallShift ID is found.
// Returns a *NotFoundError when no entities are found.
func (osq *OncallShiftQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = osq.Limit(2).IDs(setContextOp(ctx, osq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{oncallshift.Label}
	default:
		err = &NotSingularError{oncallshift.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (osq *OncallShiftQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := osq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OncallShifts.
func (osq *OncallShiftQuery) All(ctx context.Context) ([]*OncallShift, error) {
	ctx = setContextOp(ctx, osq.ctx, ent.OpQueryAll)
	if err := osq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*OncallShift, *OncallShiftQuery]()
	return withInterceptors[[]*OncallShift](ctx, osq, qr, osq.inters)
}

// AllX is like All, but panics if an error occurs.
func (osq *OncallShiftQuery) AllX(ctx context.Context) []*OncallShift {
	nodes, err := osq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of OncallShift IDs.
func (osq *OncallShiftQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if osq.ctx.Unique == nil && osq.path != nil {
		osq.Unique(true)
	}
	ctx = setContextOp(ctx, osq.ctx, ent.OpQueryIDs)
	if err = osq.Select(oncallshift.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (osq *OncallShiftQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := osq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (osq *OncallShiftQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, osq.ctx, ent.OpQueryCount)
	if err := osq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, osq, querierCount[*OncallShiftQuery](), osq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (osq *OncallShiftQuery) CountX(ctx context.Context) int {
	count, err := osq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (osq *OncallShiftQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, osq.ctx, ent.OpQueryExist)
	switch _, err := osq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (osq *OncallShiftQuery) ExistX(ctx context.Context) bool {
	exist, err := osq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OncallShiftQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (osq *OncallShiftQuery) Clone() *OncallShiftQuery {
	if osq == nil {
		return nil
	}
	return &OncallShiftQuery{
		config:           osq.config,
		ctx:              osq.ctx.Clone(),
		order:            append([]oncallshift.OrderOption{}, osq.order...),
		inters:           append([]Interceptor{}, osq.inters...),
		predicates:       append([]predicate.OncallShift{}, osq.predicates...),
		withTenant:       osq.withTenant.Clone(),
		withUser:         osq.withUser.Clone(),
		withRoster:       osq.withRoster.Clone(),
		withPrimaryShift: osq.withPrimaryShift.Clone(),
		withHandover:     osq.withHandover.Clone(),
		withMetrics:      osq.withMetrics.Clone(),
		// clone intermediate query.
		sql:       osq.sql.Clone(),
		path:      osq.path,
		modifiers: append([]func(*sql.Selector){}, osq.modifiers...),
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (osq *OncallShiftQuery) WithTenant(opts ...func(*TenantQuery)) *OncallShiftQuery {
	query := (&TenantClient{config: osq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	osq.withTenant = query
	return osq
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (osq *OncallShiftQuery) WithUser(opts ...func(*UserQuery)) *OncallShiftQuery {
	query := (&UserClient{config: osq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	osq.withUser = query
	return osq
}

// WithRoster tells the query-builder to eager-load the nodes that are connected to
// the "roster" edge. The optional arguments are used to configure the query builder of the edge.
func (osq *OncallShiftQuery) WithRoster(opts ...func(*OncallRosterQuery)) *OncallShiftQuery {
	query := (&OncallRosterClient{config: osq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	osq.withRoster = query
	return osq
}

// WithPrimaryShift tells the query-builder to eager-load the nodes that are connected to
// the "primary_shift" edge. The optional arguments are used to configure the query builder of the edge.
func (osq *OncallShiftQuery) WithPrimaryShift(opts ...func(*OncallShiftQuery)) *OncallShiftQuery {
	query := (&OncallShiftClient{config: osq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	osq.withPrimaryShift = query
	return osq
}

// WithHandover tells the query-builder to eager-load the nodes that are connected to
// the "handover" edge. The optional arguments are used to configure the query builder of the edge.
func (osq *OncallShiftQuery) WithHandover(opts ...func(*OncallShiftHandoverQuery)) *OncallShiftQuery {
	query := (&OncallShiftHandoverClient{config: osq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	osq.withHandover = query
	return osq
}

// WithMetrics tells the query-builder to eager-load the nodes that are connected to
// the "metrics" edge. The optional arguments are used to configure the query builder of the edge.
func (osq *OncallShiftQuery) WithMetrics(opts ...func(*OncallShiftMetricsQuery)) *OncallShiftQuery {
	query := (&OncallShiftMetricsClient{config: osq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	osq.withMetrics = query
	return osq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID int `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OncallShift.Query().
//		GroupBy(oncallshift.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (osq *OncallShiftQuery) GroupBy(field string, fields ...string) *OncallShiftGroupBy {
	osq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &OncallShiftGroupBy{build: osq}
	grbuild.flds = &osq.ctx.Fields
	grbuild.label = oncallshift.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID int `json:"tenant_id,omitempty"`
//	}
//
//	client.OncallShift.Query().
//		Select(oncallshift.FieldTenantID).
//		Scan(ctx, &v)
func (osq *OncallShiftQuery) Select(fields ...string) *OncallShiftSelect {
	osq.ctx.Fields = append(osq.ctx.Fields, fields...)
	sbuild := &OncallShiftSelect{OncallShiftQuery: osq}
	sbuild.label = oncallshift.Label
	sbuild.flds, sbuild.scan = &osq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a OncallShiftSelect configured with the given aggregations.
func (osq *OncallShiftQuery) Aggregate(fns ...AggregateFunc) *OncallShiftSelect {
	return osq.Select().Aggregate(fns...)
}

func (osq *OncallShiftQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range osq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, osq); err != nil {
				return err
			}
		}
	}
	for _, f := range osq.ctx.Fields {
		if !oncallshift.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if osq.path != nil {
		prev, err := osq.path(ctx)
		if err != nil {
			return err
		}
		osq.sql = prev
	}
	if oncallshift.Policy == nil {
		return errors.New("ent: uninitialized oncallshift.Policy (forgotten import ent/runtime?)")
	}
	if err := oncallshift.Policy.EvalQuery(ctx, osq); err != nil {
		return err
	}
	return nil
}

func (osq *OncallShiftQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*OncallShift, error) {
	var (
		nodes       = []*OncallShift{}
		_spec       = osq.querySpec()
		loadedTypes = [6]bool{
			osq.withTenant != nil,
			osq.withUser != nil,
			osq.withRoster != nil,
			osq.withPrimaryShift != nil,
			osq.withHandover != nil,
			osq.withMetrics != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*OncallShift).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &OncallShift{config: osq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(osq.modifiers) > 0 {
		_spec.Modifiers = osq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, osq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := osq.withTenant; query != nil {
		if err := osq.loadTenant(ctx, query, nodes, nil,
			func(n *OncallShift, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := osq.withUser; query != nil {
		if err := osq.loadUser(ctx, query, nodes, nil,
			func(n *OncallShift, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := osq.withRoster; query != nil {
		if err := osq.loadRoster(ctx, query, nodes, nil,
			func(n *OncallShift, e *OncallRoster) { n.Edges.Roster = e }); err != nil {
			return nil, err
		}
	}
	if query := osq.withPrimaryShift; query != nil {
		if err := osq.loadPrimaryShift(ctx, query, nodes, nil,
			func(n *OncallShift, e *OncallShift) { n.Edges.PrimaryShift = e }); err != nil {
			return nil, err
		}
	}
	if query := osq.withHandover; query != nil {
		if err := osq.loadHandover(ctx, query, nodes, nil,
			func(n *OncallShift, e *OncallShiftHandover) { n.Edges.Handover = e }); err != nil {
			return nil, err
		}
	}
	if query := osq.withMetrics; query != nil {
		if err := osq.loadMetrics(ctx, query, nodes, nil,
			func(n *OncallShift, e *OncallShiftMetrics) { n.Edges.Metrics = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (osq *OncallShiftQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*OncallShift, init func(*OncallShift), assign func(*OncallShift, *Tenant)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*OncallShift)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (osq *OncallShiftQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*OncallShift, init func(*OncallShift), assign func(*OncallShift, *User)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*OncallShift)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (osq *OncallShiftQuery) loadRoster(ctx context.Context, query *OncallRosterQuery, nodes []*OncallShift, init func(*OncallShift), assign func(*OncallShift, *OncallRoster)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*OncallShift)
	for i := range nodes {
		fk := nodes[i].RosterID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(oncallroster.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "roster_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (osq *OncallShiftQuery) loadPrimaryShift(ctx context.Context, query *OncallShiftQuery, nodes []*OncallShift, init func(*OncallShift), assign func(*OncallShift, *OncallShift)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*OncallShift)
	for i := range nodes {
		fk := nodes[i].PrimaryShiftID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(oncallshift.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "primary_shift_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (osq *OncallShiftQuery) loadHandover(ctx context.Context, query *OncallShiftHandoverQuery, nodes []*OncallShift, init func(*OncallShift), assign func(*OncallShift, *OncallShiftHandover)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*OncallShift)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(oncallshifthandover.FieldShiftID)
	}
	query.Where(predicate.OncallShiftHandover(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(oncallshift.HandoverColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ShiftID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "shift_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (osq *OncallShiftQuery) loadMetrics(ctx context.Context, query *OncallShiftMetricsQuery, nodes []*OncallShift, init func(*OncallShift), assign func(*OncallShift, *OncallShiftMetrics)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*OncallShift)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(oncallshiftmetrics.FieldShiftID)
	}
	query.Where(predicate.OncallShiftMetrics(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(oncallshift.MetricsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ShiftID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "shift_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (osq *OncallShiftQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := osq.querySpec()
	if len(osq.modifiers) > 0 {
		_spec.Modifiers = osq.modifiers
	}
	_spec.Node.Columns = osq.ctx.Fields
	if len(osq.ctx.Fields) > 0 {
		_spec.Unique = osq.ctx.Unique != nil && *osq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, osq.driver, _spec)
}

func (osq *OncallShiftQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(oncallshift.Table, oncallshift.Columns, sqlgraph.NewFieldSpec(oncallshift.FieldID, field.TypeUUID))
	_spec.From = osq.sql
	if unique := osq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if osq.path != nil {
		_spec.Unique = true
	}
	if fields := osq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oncallshift.FieldID)
		for i := range fields {
			if fields[i] != oncallshift.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if osq.withTenant != nil {
			_spec.Node.AddColumnOnce(oncallshift.FieldTenantID)
		}
		if osq.withUser != nil {
			_spec.Node.AddColumnOnce(oncallshift.FieldUserID)
		}
		if osq.withRoster != nil {
			_spec.Node.AddColumnOnce(oncallshift.FieldRosterID)
		}
		if osq.withPrimaryShift != nil {
			_spec.Node.AddColumnOnce(oncallshift.FieldPrimaryShiftID)
		}
	}
	if ps := osq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := osq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := osq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := osq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (osq *OncallShiftQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(osq.driver.Dialect())
	t1 := builder.Table(oncallshift.Table)
	columns := osq.ctx.Fields
	if len(columns) == 0 {
		columns = oncallshift.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if osq.sql != nil {
		selector = osq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if osq.ctx.Unique != nil && *osq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range osq.modifiers {
		m(selector)
	}
	for _, p := range osq.predicates {
		p(selector)
	}
	for _, p := range osq.order {
		p(selector)
	}
	if offset := osq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := osq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (osq *OncallShiftQuery) Modify(modifiers ...func(s *sql.Selector)) *OncallShiftSelect {
	osq.modifiers = append(osq.modifiers, modifiers...)
	return osq.Select()
}

// OncallShiftGroupBy is the group-by builder for OncallShift entities.
type OncallShiftGroupBy struct {
	selector
	build *OncallShiftQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (osgb *OncallShiftGroupBy) Aggregate(fns ...AggregateFunc) *OncallShiftGroupBy {
	osgb.fns = append(osgb.fns, fns...)
	return osgb
}

// Scan applies the selector query and scans the result into the given value.
func (osgb *OncallShiftGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, osgb.build.ctx, ent.OpQueryGroupBy)
	if err := osgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OncallShiftQuery, *OncallShiftGroupBy](ctx, osgb.build, osgb, osgb.build.inters, v)
}

func (osgb *OncallShiftGroupBy) sqlScan(ctx context.Context, root *OncallShiftQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(osgb.fns))
	for _, fn := range osgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*osgb.flds)+len(osgb.fns))
		for _, f := range *osgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*osgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := osgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// OncallShiftSelect is the builder for selecting fields of OncallShift entities.
type OncallShiftSelect struct {
	*OncallShiftQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (oss *OncallShiftSelect) Aggregate(fns ...AggregateFunc) *OncallShiftSelect {
	oss.fns = append(oss.fns, fns...)
	return oss
}

// Scan applies the selector query and scans the result into the given value.
func (oss *OncallShiftSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, oss.ctx, ent.OpQuerySelect)
	if err := oss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OncallShiftQuery, *OncallShiftSelect](ctx, oss.OncallShiftQuery, oss, oss.inters, v)
}

func (oss *OncallShiftSelect) sqlScan(ctx context.Context, root *OncallShiftQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(oss.fns))
	for _, fn := range oss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*oss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := oss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (oss *OncallShiftSelect) Modify(modifiers ...func(s *sql.Selector)) *OncallShiftSelect {
	oss.modifiers = append(oss.modifiers, modifiers...)
	return oss
}
