// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/systemcomponent"
)

// SystemComponent is the model entity for the SystemComponent schema.
type SystemComponent struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Type holds the value of the "type" field.
	Type systemcomponent.Type `json:"type,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Properties holds the value of the "properties" field.
	Properties map[string]interface{} `json:"properties,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SystemComponentQuery when eager-loading is set.
	Edges                     SystemComponentEdges `json:"edges"`
	system_component_children *uuid.UUID
	selectValues              sql.SelectValues
}

// SystemComponentEdges holds the relations/edges for other nodes in the graph.
type SystemComponentEdges struct {
	// Parent holds the value of the parent edge.
	Parent *SystemComponent `json:"parent,omitempty"`
	// Children holds the value of the children edge.
	Children []*SystemComponent `json:"children,omitempty"`
	// Controls holds the value of the controls edge.
	Controls []*SystemComponent `json:"controls,omitempty"`
	// FeedbackTo holds the value of the feedback_to edge.
	FeedbackTo []*SystemComponent `json:"feedback_to,omitempty"`
	// Incidents holds the value of the incidents edge.
	Incidents []*Incident `json:"incidents,omitempty"`
	// Events holds the value of the events edge.
	Events []*IncidentEvent `json:"events,omitempty"`
	// ControlRelationships holds the value of the control_relationships edge.
	ControlRelationships []*SystemComponentControlRelationship `json:"control_relationships,omitempty"`
	// FeedbackRelationships holds the value of the feedback_relationships edge.
	FeedbackRelationships []*SystemComponentFeedbackRelationship `json:"feedback_relationships,omitempty"`
	// IncidentSystemComponents holds the value of the incident_system_components edge.
	IncidentSystemComponents []*IncidentSystemComponent `json:"incident_system_components,omitempty"`
	// EventComponents holds the value of the event_components edge.
	EventComponents []*IncidentEventSystemComponent `json:"event_components,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [10]bool
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SystemComponentEdges) ParentOrErr() (*SystemComponent, error) {
	if e.Parent != nil {
		return e.Parent, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: systemcomponent.Label}
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e SystemComponentEdges) ChildrenOrErr() ([]*SystemComponent, error) {
	if e.loadedTypes[1] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// ControlsOrErr returns the Controls value or an error if the edge
// was not loaded in eager-loading.
func (e SystemComponentEdges) ControlsOrErr() ([]*SystemComponent, error) {
	if e.loadedTypes[2] {
		return e.Controls, nil
	}
	return nil, &NotLoadedError{edge: "controls"}
}

// FeedbackToOrErr returns the FeedbackTo value or an error if the edge
// was not loaded in eager-loading.
func (e SystemComponentEdges) FeedbackToOrErr() ([]*SystemComponent, error) {
	if e.loadedTypes[3] {
		return e.FeedbackTo, nil
	}
	return nil, &NotLoadedError{edge: "feedback_to"}
}

// IncidentsOrErr returns the Incidents value or an error if the edge
// was not loaded in eager-loading.
func (e SystemComponentEdges) IncidentsOrErr() ([]*Incident, error) {
	if e.loadedTypes[4] {
		return e.Incidents, nil
	}
	return nil, &NotLoadedError{edge: "incidents"}
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e SystemComponentEdges) EventsOrErr() ([]*IncidentEvent, error) {
	if e.loadedTypes[5] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// ControlRelationshipsOrErr returns the ControlRelationships value or an error if the edge
// was not loaded in eager-loading.
func (e SystemComponentEdges) ControlRelationshipsOrErr() ([]*SystemComponentControlRelationship, error) {
	if e.loadedTypes[6] {
		return e.ControlRelationships, nil
	}
	return nil, &NotLoadedError{edge: "control_relationships"}
}

// FeedbackRelationshipsOrErr returns the FeedbackRelationships value or an error if the edge
// was not loaded in eager-loading.
func (e SystemComponentEdges) FeedbackRelationshipsOrErr() ([]*SystemComponentFeedbackRelationship, error) {
	if e.loadedTypes[7] {
		return e.FeedbackRelationships, nil
	}
	return nil, &NotLoadedError{edge: "feedback_relationships"}
}

// IncidentSystemComponentsOrErr returns the IncidentSystemComponents value or an error if the edge
// was not loaded in eager-loading.
func (e SystemComponentEdges) IncidentSystemComponentsOrErr() ([]*IncidentSystemComponent, error) {
	if e.loadedTypes[8] {
		return e.IncidentSystemComponents, nil
	}
	return nil, &NotLoadedError{edge: "incident_system_components"}
}

// EventComponentsOrErr returns the EventComponents value or an error if the edge
// was not loaded in eager-loading.
func (e SystemComponentEdges) EventComponentsOrErr() ([]*IncidentEventSystemComponent, error) {
	if e.loadedTypes[9] {
		return e.EventComponents, nil
	}
	return nil, &NotLoadedError{edge: "event_components"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SystemComponent) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case systemcomponent.FieldProperties:
			values[i] = new([]byte)
		case systemcomponent.FieldName, systemcomponent.FieldType, systemcomponent.FieldDescription:
			values[i] = new(sql.NullString)
		case systemcomponent.FieldCreatedAt, systemcomponent.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case systemcomponent.FieldID:
			values[i] = new(uuid.UUID)
		case systemcomponent.ForeignKeys[0]: // system_component_children
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SystemComponent fields.
func (sc *SystemComponent) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case systemcomponent.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				sc.ID = *value
			}
		case systemcomponent.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				sc.Name = value.String
			}
		case systemcomponent.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				sc.Type = systemcomponent.Type(value.String)
			}
		case systemcomponent.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				sc.Description = value.String
			}
		case systemcomponent.FieldProperties:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field properties", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sc.Properties); err != nil {
					return fmt.Errorf("unmarshal field properties: %w", err)
				}
			}
		case systemcomponent.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sc.CreatedAt = value.Time
			}
		case systemcomponent.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sc.UpdatedAt = value.Time
			}
		case systemcomponent.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field system_component_children", values[i])
			} else if value.Valid {
				sc.system_component_children = new(uuid.UUID)
				*sc.system_component_children = *value.S.(*uuid.UUID)
			}
		default:
			sc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SystemComponent.
// This includes values selected through modifiers, order, etc.
func (sc *SystemComponent) Value(name string) (ent.Value, error) {
	return sc.selectValues.Get(name)
}

// QueryParent queries the "parent" edge of the SystemComponent entity.
func (sc *SystemComponent) QueryParent() *SystemComponentQuery {
	return NewSystemComponentClient(sc.config).QueryParent(sc)
}

// QueryChildren queries the "children" edge of the SystemComponent entity.
func (sc *SystemComponent) QueryChildren() *SystemComponentQuery {
	return NewSystemComponentClient(sc.config).QueryChildren(sc)
}

// QueryControls queries the "controls" edge of the SystemComponent entity.
func (sc *SystemComponent) QueryControls() *SystemComponentQuery {
	return NewSystemComponentClient(sc.config).QueryControls(sc)
}

// QueryFeedbackTo queries the "feedback_to" edge of the SystemComponent entity.
func (sc *SystemComponent) QueryFeedbackTo() *SystemComponentQuery {
	return NewSystemComponentClient(sc.config).QueryFeedbackTo(sc)
}

// QueryIncidents queries the "incidents" edge of the SystemComponent entity.
func (sc *SystemComponent) QueryIncidents() *IncidentQuery {
	return NewSystemComponentClient(sc.config).QueryIncidents(sc)
}

// QueryEvents queries the "events" edge of the SystemComponent entity.
func (sc *SystemComponent) QueryEvents() *IncidentEventQuery {
	return NewSystemComponentClient(sc.config).QueryEvents(sc)
}

// QueryControlRelationships queries the "control_relationships" edge of the SystemComponent entity.
func (sc *SystemComponent) QueryControlRelationships() *SystemComponentControlRelationshipQuery {
	return NewSystemComponentClient(sc.config).QueryControlRelationships(sc)
}

// QueryFeedbackRelationships queries the "feedback_relationships" edge of the SystemComponent entity.
func (sc *SystemComponent) QueryFeedbackRelationships() *SystemComponentFeedbackRelationshipQuery {
	return NewSystemComponentClient(sc.config).QueryFeedbackRelationships(sc)
}

// QueryIncidentSystemComponents queries the "incident_system_components" edge of the SystemComponent entity.
func (sc *SystemComponent) QueryIncidentSystemComponents() *IncidentSystemComponentQuery {
	return NewSystemComponentClient(sc.config).QueryIncidentSystemComponents(sc)
}

// QueryEventComponents queries the "event_components" edge of the SystemComponent entity.
func (sc *SystemComponent) QueryEventComponents() *IncidentEventSystemComponentQuery {
	return NewSystemComponentClient(sc.config).QueryEventComponents(sc)
}

// Update returns a builder for updating this SystemComponent.
// Note that you need to call SystemComponent.Unwrap() before calling this method if this SystemComponent
// was returned from a transaction, and the transaction was committed or rolled back.
func (sc *SystemComponent) Update() *SystemComponentUpdateOne {
	return NewSystemComponentClient(sc.config).UpdateOne(sc)
}

// Unwrap unwraps the SystemComponent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sc *SystemComponent) Unwrap() *SystemComponent {
	_tx, ok := sc.config.driver.(*txDriver)
	if !ok {
		panic("ent: SystemComponent is not a transactional entity")
	}
	sc.config.driver = _tx.drv
	return sc
}

// String implements the fmt.Stringer.
func (sc *SystemComponent) String() string {
	var builder strings.Builder
	builder.WriteString("SystemComponent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sc.ID))
	builder.WriteString("name=")
	builder.WriteString(sc.Name)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", sc.Type))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(sc.Description)
	builder.WriteString(", ")
	builder.WriteString("properties=")
	builder.WriteString(fmt.Sprintf("%v", sc.Properties))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sc.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SystemComponents is a parsable slice of SystemComponent.
type SystemComponents []*SystemComponent
