// Code generated by ent, DO NOT EDIT.

package systemcomponentfeedbackrelationship

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldLTE(FieldID, id))
}

// SourceID applies equality check predicate on the "source_id" field. It's identical to SourceIDEQ.
func SourceID(v uuid.UUID) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldEQ(FieldSourceID, v))
}

// TargetID applies equality check predicate on the "target_id" field. It's identical to TargetIDEQ.
func TargetID(v uuid.UUID) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldEQ(FieldTargetID, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldEQ(FieldType, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldEQ(FieldDescription, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldEQ(FieldCreatedAt, v))
}

// SourceIDEQ applies the EQ predicate on the "source_id" field.
func SourceIDEQ(v uuid.UUID) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldEQ(FieldSourceID, v))
}

// SourceIDNEQ applies the NEQ predicate on the "source_id" field.
func SourceIDNEQ(v uuid.UUID) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldNEQ(FieldSourceID, v))
}

// SourceIDIn applies the In predicate on the "source_id" field.
func SourceIDIn(vs ...uuid.UUID) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldIn(FieldSourceID, vs...))
}

// SourceIDNotIn applies the NotIn predicate on the "source_id" field.
func SourceIDNotIn(vs ...uuid.UUID) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldNotIn(FieldSourceID, vs...))
}

// TargetIDEQ applies the EQ predicate on the "target_id" field.
func TargetIDEQ(v uuid.UUID) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldEQ(FieldTargetID, v))
}

// TargetIDNEQ applies the NEQ predicate on the "target_id" field.
func TargetIDNEQ(v uuid.UUID) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldNEQ(FieldTargetID, v))
}

// TargetIDIn applies the In predicate on the "target_id" field.
func TargetIDIn(vs ...uuid.UUID) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldIn(FieldTargetID, vs...))
}

// TargetIDNotIn applies the NotIn predicate on the "target_id" field.
func TargetIDNotIn(vs ...uuid.UUID) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldNotIn(FieldTargetID, vs...))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldContainsFold(FieldType, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldContainsFold(FieldDescription, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.FieldLTE(FieldCreatedAt, v))
}

// HasSource applies the HasEdge predicate on the "source" edge.
func HasSource() predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SourceTable, SourceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSourceWith applies the HasEdge predicate on the "source" edge with a given conditions (other predicates).
func HasSourceWith(preds ...predicate.SystemComponent) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(func(s *sql.Selector) {
		step := newSourceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTarget applies the HasEdge predicate on the "target" edge.
func HasTarget() predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TargetTable, TargetColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTargetWith applies the HasEdge predicate on the "target" edge with a given conditions (other predicates).
func HasTargetWith(preds ...predicate.SystemComponent) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(func(s *sql.Selector) {
		step := newTargetStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SystemComponentFeedbackRelationship) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SystemComponentFeedbackRelationship) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SystemComponentFeedbackRelationship) predicate.SystemComponentFeedbackRelationship {
	return predicate.SystemComponentFeedbackRelationship(sql.NotPredicates(p))
}
