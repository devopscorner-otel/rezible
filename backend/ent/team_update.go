// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/incidentteamassignment"
	"github.com/rezible/rezible/ent/meetingschedule"
	"github.com/rezible/rezible/ent/oncallroster"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/team"
	"github.com/rezible/rezible/ent/user"
)

// TeamUpdate is the builder for updating Team entities.
type TeamUpdate struct {
	config
	hooks     []Hook
	mutation  *TeamMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TeamUpdate builder.
func (tu *TeamUpdate) Where(ps ...predicate.Team) *TeamUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetSlug sets the "slug" field.
func (tu *TeamUpdate) SetSlug(s string) *TeamUpdate {
	tu.mutation.SetSlug(s)
	return tu
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (tu *TeamUpdate) SetNillableSlug(s *string) *TeamUpdate {
	if s != nil {
		tu.SetSlug(*s)
	}
	return tu
}

// SetProviderID sets the "provider_id" field.
func (tu *TeamUpdate) SetProviderID(s string) *TeamUpdate {
	tu.mutation.SetProviderID(s)
	return tu
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (tu *TeamUpdate) SetNillableProviderID(s *string) *TeamUpdate {
	if s != nil {
		tu.SetProviderID(*s)
	}
	return tu
}

// ClearProviderID clears the value of the "provider_id" field.
func (tu *TeamUpdate) ClearProviderID() *TeamUpdate {
	tu.mutation.ClearProviderID()
	return tu
}

// SetName sets the "name" field.
func (tu *TeamUpdate) SetName(s string) *TeamUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tu *TeamUpdate) SetNillableName(s *string) *TeamUpdate {
	if s != nil {
		tu.SetName(*s)
	}
	return tu
}

// SetChatChannelID sets the "chat_channel_id" field.
func (tu *TeamUpdate) SetChatChannelID(s string) *TeamUpdate {
	tu.mutation.SetChatChannelID(s)
	return tu
}

// SetNillableChatChannelID sets the "chat_channel_id" field if the given value is not nil.
func (tu *TeamUpdate) SetNillableChatChannelID(s *string) *TeamUpdate {
	if s != nil {
		tu.SetChatChannelID(*s)
	}
	return tu
}

// ClearChatChannelID clears the value of the "chat_channel_id" field.
func (tu *TeamUpdate) ClearChatChannelID() *TeamUpdate {
	tu.mutation.ClearChatChannelID()
	return tu
}

// SetTimezone sets the "timezone" field.
func (tu *TeamUpdate) SetTimezone(s string) *TeamUpdate {
	tu.mutation.SetTimezone(s)
	return tu
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (tu *TeamUpdate) SetNillableTimezone(s *string) *TeamUpdate {
	if s != nil {
		tu.SetTimezone(*s)
	}
	return tu
}

// ClearTimezone clears the value of the "timezone" field.
func (tu *TeamUpdate) ClearTimezone() *TeamUpdate {
	tu.mutation.ClearTimezone()
	return tu
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (tu *TeamUpdate) AddUserIDs(ids ...uuid.UUID) *TeamUpdate {
	tu.mutation.AddUserIDs(ids...)
	return tu
}

// AddUsers adds the "users" edges to the User entity.
func (tu *TeamUpdate) AddUsers(u ...*User) *TeamUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tu.AddUserIDs(ids...)
}

// AddOncallRosterIDs adds the "oncall_rosters" edge to the OncallRoster entity by IDs.
func (tu *TeamUpdate) AddOncallRosterIDs(ids ...uuid.UUID) *TeamUpdate {
	tu.mutation.AddOncallRosterIDs(ids...)
	return tu
}

// AddOncallRosters adds the "oncall_rosters" edges to the OncallRoster entity.
func (tu *TeamUpdate) AddOncallRosters(o ...*OncallRoster) *TeamUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return tu.AddOncallRosterIDs(ids...)
}

// AddIncidentAssignmentIDs adds the "incident_assignments" edge to the IncidentTeamAssignment entity by IDs.
func (tu *TeamUpdate) AddIncidentAssignmentIDs(ids ...int) *TeamUpdate {
	tu.mutation.AddIncidentAssignmentIDs(ids...)
	return tu
}

// AddIncidentAssignments adds the "incident_assignments" edges to the IncidentTeamAssignment entity.
func (tu *TeamUpdate) AddIncidentAssignments(i ...*IncidentTeamAssignment) *TeamUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return tu.AddIncidentAssignmentIDs(ids...)
}

// AddScheduledMeetingIDs adds the "scheduled_meetings" edge to the MeetingSchedule entity by IDs.
func (tu *TeamUpdate) AddScheduledMeetingIDs(ids ...uuid.UUID) *TeamUpdate {
	tu.mutation.AddScheduledMeetingIDs(ids...)
	return tu
}

// AddScheduledMeetings adds the "scheduled_meetings" edges to the MeetingSchedule entity.
func (tu *TeamUpdate) AddScheduledMeetings(m ...*MeetingSchedule) *TeamUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tu.AddScheduledMeetingIDs(ids...)
}

// Mutation returns the TeamMutation object of the builder.
func (tu *TeamUpdate) Mutation() *TeamMutation {
	return tu.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (tu *TeamUpdate) ClearUsers() *TeamUpdate {
	tu.mutation.ClearUsers()
	return tu
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (tu *TeamUpdate) RemoveUserIDs(ids ...uuid.UUID) *TeamUpdate {
	tu.mutation.RemoveUserIDs(ids...)
	return tu
}

// RemoveUsers removes "users" edges to User entities.
func (tu *TeamUpdate) RemoveUsers(u ...*User) *TeamUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tu.RemoveUserIDs(ids...)
}

// ClearOncallRosters clears all "oncall_rosters" edges to the OncallRoster entity.
func (tu *TeamUpdate) ClearOncallRosters() *TeamUpdate {
	tu.mutation.ClearOncallRosters()
	return tu
}

// RemoveOncallRosterIDs removes the "oncall_rosters" edge to OncallRoster entities by IDs.
func (tu *TeamUpdate) RemoveOncallRosterIDs(ids ...uuid.UUID) *TeamUpdate {
	tu.mutation.RemoveOncallRosterIDs(ids...)
	return tu
}

// RemoveOncallRosters removes "oncall_rosters" edges to OncallRoster entities.
func (tu *TeamUpdate) RemoveOncallRosters(o ...*OncallRoster) *TeamUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return tu.RemoveOncallRosterIDs(ids...)
}

// ClearIncidentAssignments clears all "incident_assignments" edges to the IncidentTeamAssignment entity.
func (tu *TeamUpdate) ClearIncidentAssignments() *TeamUpdate {
	tu.mutation.ClearIncidentAssignments()
	return tu
}

// RemoveIncidentAssignmentIDs removes the "incident_assignments" edge to IncidentTeamAssignment entities by IDs.
func (tu *TeamUpdate) RemoveIncidentAssignmentIDs(ids ...int) *TeamUpdate {
	tu.mutation.RemoveIncidentAssignmentIDs(ids...)
	return tu
}

// RemoveIncidentAssignments removes "incident_assignments" edges to IncidentTeamAssignment entities.
func (tu *TeamUpdate) RemoveIncidentAssignments(i ...*IncidentTeamAssignment) *TeamUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return tu.RemoveIncidentAssignmentIDs(ids...)
}

// ClearScheduledMeetings clears all "scheduled_meetings" edges to the MeetingSchedule entity.
func (tu *TeamUpdate) ClearScheduledMeetings() *TeamUpdate {
	tu.mutation.ClearScheduledMeetings()
	return tu
}

// RemoveScheduledMeetingIDs removes the "scheduled_meetings" edge to MeetingSchedule entities by IDs.
func (tu *TeamUpdate) RemoveScheduledMeetingIDs(ids ...uuid.UUID) *TeamUpdate {
	tu.mutation.RemoveScheduledMeetingIDs(ids...)
	return tu
}

// RemoveScheduledMeetings removes "scheduled_meetings" edges to MeetingSchedule entities.
func (tu *TeamUpdate) RemoveScheduledMeetings(m ...*MeetingSchedule) *TeamUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tu.RemoveScheduledMeetingIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TeamUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TeamUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TeamUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TeamUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tu *TeamUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TeamUpdate {
	tu.modifiers = append(tu.modifiers, modifiers...)
	return tu
}

func (tu *TeamUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(team.Table, team.Columns, sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Slug(); ok {
		_spec.SetField(team.FieldSlug, field.TypeString, value)
	}
	if value, ok := tu.mutation.ProviderID(); ok {
		_spec.SetField(team.FieldProviderID, field.TypeString, value)
	}
	if tu.mutation.ProviderIDCleared() {
		_spec.ClearField(team.FieldProviderID, field.TypeString)
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(team.FieldName, field.TypeString, value)
	}
	if value, ok := tu.mutation.ChatChannelID(); ok {
		_spec.SetField(team.FieldChatChannelID, field.TypeString, value)
	}
	if tu.mutation.ChatChannelIDCleared() {
		_spec.ClearField(team.FieldChatChannelID, field.TypeString)
	}
	if value, ok := tu.mutation.Timezone(); ok {
		_spec.SetField(team.FieldTimezone, field.TypeString, value)
	}
	if tu.mutation.TimezoneCleared() {
		_spec.ClearField(team.FieldTimezone, field.TypeString)
	}
	if tu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.UsersTable,
			Columns: team.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !tu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.UsersTable,
			Columns: team.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.UsersTable,
			Columns: team.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.OncallRostersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.OncallRostersTable,
			Columns: team.OncallRostersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedOncallRostersIDs(); len(nodes) > 0 && !tu.mutation.OncallRostersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.OncallRostersTable,
			Columns: team.OncallRostersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.OncallRostersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.OncallRostersTable,
			Columns: team.OncallRostersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.IncidentAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   team.IncidentAssignmentsTable,
			Columns: []string{team.IncidentAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentteamassignment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedIncidentAssignmentsIDs(); len(nodes) > 0 && !tu.mutation.IncidentAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   team.IncidentAssignmentsTable,
			Columns: []string{team.IncidentAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentteamassignment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.IncidentAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   team.IncidentAssignmentsTable,
			Columns: []string{team.IncidentAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentteamassignment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ScheduledMeetingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   team.ScheduledMeetingsTable,
			Columns: team.ScheduledMeetingsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(meetingschedule.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedScheduledMeetingsIDs(); len(nodes) > 0 && !tu.mutation.ScheduledMeetingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   team.ScheduledMeetingsTable,
			Columns: team.ScheduledMeetingsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(meetingschedule.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ScheduledMeetingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   team.ScheduledMeetingsTable,
			Columns: team.ScheduledMeetingsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(meetingschedule.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{team.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TeamUpdateOne is the builder for updating a single Team entity.
type TeamUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TeamMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetSlug sets the "slug" field.
func (tuo *TeamUpdateOne) SetSlug(s string) *TeamUpdateOne {
	tuo.mutation.SetSlug(s)
	return tuo
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (tuo *TeamUpdateOne) SetNillableSlug(s *string) *TeamUpdateOne {
	if s != nil {
		tuo.SetSlug(*s)
	}
	return tuo
}

// SetProviderID sets the "provider_id" field.
func (tuo *TeamUpdateOne) SetProviderID(s string) *TeamUpdateOne {
	tuo.mutation.SetProviderID(s)
	return tuo
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (tuo *TeamUpdateOne) SetNillableProviderID(s *string) *TeamUpdateOne {
	if s != nil {
		tuo.SetProviderID(*s)
	}
	return tuo
}

// ClearProviderID clears the value of the "provider_id" field.
func (tuo *TeamUpdateOne) ClearProviderID() *TeamUpdateOne {
	tuo.mutation.ClearProviderID()
	return tuo
}

// SetName sets the "name" field.
func (tuo *TeamUpdateOne) SetName(s string) *TeamUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tuo *TeamUpdateOne) SetNillableName(s *string) *TeamUpdateOne {
	if s != nil {
		tuo.SetName(*s)
	}
	return tuo
}

// SetChatChannelID sets the "chat_channel_id" field.
func (tuo *TeamUpdateOne) SetChatChannelID(s string) *TeamUpdateOne {
	tuo.mutation.SetChatChannelID(s)
	return tuo
}

// SetNillableChatChannelID sets the "chat_channel_id" field if the given value is not nil.
func (tuo *TeamUpdateOne) SetNillableChatChannelID(s *string) *TeamUpdateOne {
	if s != nil {
		tuo.SetChatChannelID(*s)
	}
	return tuo
}

// ClearChatChannelID clears the value of the "chat_channel_id" field.
func (tuo *TeamUpdateOne) ClearChatChannelID() *TeamUpdateOne {
	tuo.mutation.ClearChatChannelID()
	return tuo
}

// SetTimezone sets the "timezone" field.
func (tuo *TeamUpdateOne) SetTimezone(s string) *TeamUpdateOne {
	tuo.mutation.SetTimezone(s)
	return tuo
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (tuo *TeamUpdateOne) SetNillableTimezone(s *string) *TeamUpdateOne {
	if s != nil {
		tuo.SetTimezone(*s)
	}
	return tuo
}

// ClearTimezone clears the value of the "timezone" field.
func (tuo *TeamUpdateOne) ClearTimezone() *TeamUpdateOne {
	tuo.mutation.ClearTimezone()
	return tuo
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (tuo *TeamUpdateOne) AddUserIDs(ids ...uuid.UUID) *TeamUpdateOne {
	tuo.mutation.AddUserIDs(ids...)
	return tuo
}

// AddUsers adds the "users" edges to the User entity.
func (tuo *TeamUpdateOne) AddUsers(u ...*User) *TeamUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tuo.AddUserIDs(ids...)
}

// AddOncallRosterIDs adds the "oncall_rosters" edge to the OncallRoster entity by IDs.
func (tuo *TeamUpdateOne) AddOncallRosterIDs(ids ...uuid.UUID) *TeamUpdateOne {
	tuo.mutation.AddOncallRosterIDs(ids...)
	return tuo
}

// AddOncallRosters adds the "oncall_rosters" edges to the OncallRoster entity.
func (tuo *TeamUpdateOne) AddOncallRosters(o ...*OncallRoster) *TeamUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return tuo.AddOncallRosterIDs(ids...)
}

// AddIncidentAssignmentIDs adds the "incident_assignments" edge to the IncidentTeamAssignment entity by IDs.
func (tuo *TeamUpdateOne) AddIncidentAssignmentIDs(ids ...int) *TeamUpdateOne {
	tuo.mutation.AddIncidentAssignmentIDs(ids...)
	return tuo
}

// AddIncidentAssignments adds the "incident_assignments" edges to the IncidentTeamAssignment entity.
func (tuo *TeamUpdateOne) AddIncidentAssignments(i ...*IncidentTeamAssignment) *TeamUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return tuo.AddIncidentAssignmentIDs(ids...)
}

// AddScheduledMeetingIDs adds the "scheduled_meetings" edge to the MeetingSchedule entity by IDs.
func (tuo *TeamUpdateOne) AddScheduledMeetingIDs(ids ...uuid.UUID) *TeamUpdateOne {
	tuo.mutation.AddScheduledMeetingIDs(ids...)
	return tuo
}

// AddScheduledMeetings adds the "scheduled_meetings" edges to the MeetingSchedule entity.
func (tuo *TeamUpdateOne) AddScheduledMeetings(m ...*MeetingSchedule) *TeamUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tuo.AddScheduledMeetingIDs(ids...)
}

// Mutation returns the TeamMutation object of the builder.
func (tuo *TeamUpdateOne) Mutation() *TeamMutation {
	return tuo.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (tuo *TeamUpdateOne) ClearUsers() *TeamUpdateOne {
	tuo.mutation.ClearUsers()
	return tuo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (tuo *TeamUpdateOne) RemoveUserIDs(ids ...uuid.UUID) *TeamUpdateOne {
	tuo.mutation.RemoveUserIDs(ids...)
	return tuo
}

// RemoveUsers removes "users" edges to User entities.
func (tuo *TeamUpdateOne) RemoveUsers(u ...*User) *TeamUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tuo.RemoveUserIDs(ids...)
}

// ClearOncallRosters clears all "oncall_rosters" edges to the OncallRoster entity.
func (tuo *TeamUpdateOne) ClearOncallRosters() *TeamUpdateOne {
	tuo.mutation.ClearOncallRosters()
	return tuo
}

// RemoveOncallRosterIDs removes the "oncall_rosters" edge to OncallRoster entities by IDs.
func (tuo *TeamUpdateOne) RemoveOncallRosterIDs(ids ...uuid.UUID) *TeamUpdateOne {
	tuo.mutation.RemoveOncallRosterIDs(ids...)
	return tuo
}

// RemoveOncallRosters removes "oncall_rosters" edges to OncallRoster entities.
func (tuo *TeamUpdateOne) RemoveOncallRosters(o ...*OncallRoster) *TeamUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return tuo.RemoveOncallRosterIDs(ids...)
}

// ClearIncidentAssignments clears all "incident_assignments" edges to the IncidentTeamAssignment entity.
func (tuo *TeamUpdateOne) ClearIncidentAssignments() *TeamUpdateOne {
	tuo.mutation.ClearIncidentAssignments()
	return tuo
}

// RemoveIncidentAssignmentIDs removes the "incident_assignments" edge to IncidentTeamAssignment entities by IDs.
func (tuo *TeamUpdateOne) RemoveIncidentAssignmentIDs(ids ...int) *TeamUpdateOne {
	tuo.mutation.RemoveIncidentAssignmentIDs(ids...)
	return tuo
}

// RemoveIncidentAssignments removes "incident_assignments" edges to IncidentTeamAssignment entities.
func (tuo *TeamUpdateOne) RemoveIncidentAssignments(i ...*IncidentTeamAssignment) *TeamUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return tuo.RemoveIncidentAssignmentIDs(ids...)
}

// ClearScheduledMeetings clears all "scheduled_meetings" edges to the MeetingSchedule entity.
func (tuo *TeamUpdateOne) ClearScheduledMeetings() *TeamUpdateOne {
	tuo.mutation.ClearScheduledMeetings()
	return tuo
}

// RemoveScheduledMeetingIDs removes the "scheduled_meetings" edge to MeetingSchedule entities by IDs.
func (tuo *TeamUpdateOne) RemoveScheduledMeetingIDs(ids ...uuid.UUID) *TeamUpdateOne {
	tuo.mutation.RemoveScheduledMeetingIDs(ids...)
	return tuo
}

// RemoveScheduledMeetings removes "scheduled_meetings" edges to MeetingSchedule entities.
func (tuo *TeamUpdateOne) RemoveScheduledMeetings(m ...*MeetingSchedule) *TeamUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tuo.RemoveScheduledMeetingIDs(ids...)
}

// Where appends a list predicates to the TeamUpdate builder.
func (tuo *TeamUpdateOne) Where(ps ...predicate.Team) *TeamUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TeamUpdateOne) Select(field string, fields ...string) *TeamUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Team entity.
func (tuo *TeamUpdateOne) Save(ctx context.Context) (*Team, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TeamUpdateOne) SaveX(ctx context.Context) *Team {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TeamUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TeamUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tuo *TeamUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TeamUpdateOne {
	tuo.modifiers = append(tuo.modifiers, modifiers...)
	return tuo
}

func (tuo *TeamUpdateOne) sqlSave(ctx context.Context) (_node *Team, err error) {
	_spec := sqlgraph.NewUpdateSpec(team.Table, team.Columns, sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Team.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, team.FieldID)
		for _, f := range fields {
			if !team.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != team.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Slug(); ok {
		_spec.SetField(team.FieldSlug, field.TypeString, value)
	}
	if value, ok := tuo.mutation.ProviderID(); ok {
		_spec.SetField(team.FieldProviderID, field.TypeString, value)
	}
	if tuo.mutation.ProviderIDCleared() {
		_spec.ClearField(team.FieldProviderID, field.TypeString)
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(team.FieldName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.ChatChannelID(); ok {
		_spec.SetField(team.FieldChatChannelID, field.TypeString, value)
	}
	if tuo.mutation.ChatChannelIDCleared() {
		_spec.ClearField(team.FieldChatChannelID, field.TypeString)
	}
	if value, ok := tuo.mutation.Timezone(); ok {
		_spec.SetField(team.FieldTimezone, field.TypeString, value)
	}
	if tuo.mutation.TimezoneCleared() {
		_spec.ClearField(team.FieldTimezone, field.TypeString)
	}
	if tuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.UsersTable,
			Columns: team.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !tuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.UsersTable,
			Columns: team.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.UsersTable,
			Columns: team.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.OncallRostersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.OncallRostersTable,
			Columns: team.OncallRostersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedOncallRostersIDs(); len(nodes) > 0 && !tuo.mutation.OncallRostersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.OncallRostersTable,
			Columns: team.OncallRostersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.OncallRostersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.OncallRostersTable,
			Columns: team.OncallRostersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.IncidentAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   team.IncidentAssignmentsTable,
			Columns: []string{team.IncidentAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentteamassignment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedIncidentAssignmentsIDs(); len(nodes) > 0 && !tuo.mutation.IncidentAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   team.IncidentAssignmentsTable,
			Columns: []string{team.IncidentAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentteamassignment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.IncidentAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   team.IncidentAssignmentsTable,
			Columns: []string{team.IncidentAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentteamassignment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ScheduledMeetingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   team.ScheduledMeetingsTable,
			Columns: team.ScheduledMeetingsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(meetingschedule.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedScheduledMeetingsIDs(); len(nodes) > 0 && !tuo.mutation.ScheduledMeetingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   team.ScheduledMeetingsTable,
			Columns: team.ScheduledMeetingsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(meetingschedule.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ScheduledMeetingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   team.ScheduledMeetingsTable,
			Columns: team.ScheduledMeetingsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(meetingschedule.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tuo.modifiers...)
	_node = &Team{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{team.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
