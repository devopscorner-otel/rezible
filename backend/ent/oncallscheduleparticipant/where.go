// Code generated by ent, DO NOT EDIT.

package oncallscheduleparticipant

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.OncallScheduleParticipant {
	return predicate.OncallScheduleParticipant(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.OncallScheduleParticipant {
	return predicate.OncallScheduleParticipant(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.OncallScheduleParticipant {
	return predicate.OncallScheduleParticipant(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.OncallScheduleParticipant {
	return predicate.OncallScheduleParticipant(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.OncallScheduleParticipant {
	return predicate.OncallScheduleParticipant(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.OncallScheduleParticipant {
	return predicate.OncallScheduleParticipant(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.OncallScheduleParticipant {
	return predicate.OncallScheduleParticipant(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.OncallScheduleParticipant {
	return predicate.OncallScheduleParticipant(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.OncallScheduleParticipant {
	return predicate.OncallScheduleParticipant(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v int) predicate.OncallScheduleParticipant {
	return predicate.OncallScheduleParticipant(sql.FieldEQ(FieldTenantID, v))
}

// ScheduleID applies equality check predicate on the "schedule_id" field. It's identical to ScheduleIDEQ.
func ScheduleID(v uuid.UUID) predicate.OncallScheduleParticipant {
	return predicate.OncallScheduleParticipant(sql.FieldEQ(FieldScheduleID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.OncallScheduleParticipant {
	return predicate.OncallScheduleParticipant(sql.FieldEQ(FieldUserID, v))
}

// Index applies equality check predicate on the "index" field. It's identical to IndexEQ.
func Index(v int) predicate.OncallScheduleParticipant {
	return predicate.OncallScheduleParticipant(sql.FieldEQ(FieldIndex, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v int) predicate.OncallScheduleParticipant {
	return predicate.OncallScheduleParticipant(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v int) predicate.OncallScheduleParticipant {
	return predicate.OncallScheduleParticipant(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...int) predicate.OncallScheduleParticipant {
	return predicate.OncallScheduleParticipant(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...int) predicate.OncallScheduleParticipant {
	return predicate.OncallScheduleParticipant(sql.FieldNotIn(FieldTenantID, vs...))
}

// ScheduleIDEQ applies the EQ predicate on the "schedule_id" field.
func ScheduleIDEQ(v uuid.UUID) predicate.OncallScheduleParticipant {
	return predicate.OncallScheduleParticipant(sql.FieldEQ(FieldScheduleID, v))
}

// ScheduleIDNEQ applies the NEQ predicate on the "schedule_id" field.
func ScheduleIDNEQ(v uuid.UUID) predicate.OncallScheduleParticipant {
	return predicate.OncallScheduleParticipant(sql.FieldNEQ(FieldScheduleID, v))
}

// ScheduleIDIn applies the In predicate on the "schedule_id" field.
func ScheduleIDIn(vs ...uuid.UUID) predicate.OncallScheduleParticipant {
	return predicate.OncallScheduleParticipant(sql.FieldIn(FieldScheduleID, vs...))
}

// ScheduleIDNotIn applies the NotIn predicate on the "schedule_id" field.
func ScheduleIDNotIn(vs ...uuid.UUID) predicate.OncallScheduleParticipant {
	return predicate.OncallScheduleParticipant(sql.FieldNotIn(FieldScheduleID, vs...))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.OncallScheduleParticipant {
	return predicate.OncallScheduleParticipant(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.OncallScheduleParticipant {
	return predicate.OncallScheduleParticipant(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.OncallScheduleParticipant {
	return predicate.OncallScheduleParticipant(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.OncallScheduleParticipant {
	return predicate.OncallScheduleParticipant(sql.FieldNotIn(FieldUserID, vs...))
}

// IndexEQ applies the EQ predicate on the "index" field.
func IndexEQ(v int) predicate.OncallScheduleParticipant {
	return predicate.OncallScheduleParticipant(sql.FieldEQ(FieldIndex, v))
}

// IndexNEQ applies the NEQ predicate on the "index" field.
func IndexNEQ(v int) predicate.OncallScheduleParticipant {
	return predicate.OncallScheduleParticipant(sql.FieldNEQ(FieldIndex, v))
}

// IndexIn applies the In predicate on the "index" field.
func IndexIn(vs ...int) predicate.OncallScheduleParticipant {
	return predicate.OncallScheduleParticipant(sql.FieldIn(FieldIndex, vs...))
}

// IndexNotIn applies the NotIn predicate on the "index" field.
func IndexNotIn(vs ...int) predicate.OncallScheduleParticipant {
	return predicate.OncallScheduleParticipant(sql.FieldNotIn(FieldIndex, vs...))
}

// IndexGT applies the GT predicate on the "index" field.
func IndexGT(v int) predicate.OncallScheduleParticipant {
	return predicate.OncallScheduleParticipant(sql.FieldGT(FieldIndex, v))
}

// IndexGTE applies the GTE predicate on the "index" field.
func IndexGTE(v int) predicate.OncallScheduleParticipant {
	return predicate.OncallScheduleParticipant(sql.FieldGTE(FieldIndex, v))
}

// IndexLT applies the LT predicate on the "index" field.
func IndexLT(v int) predicate.OncallScheduleParticipant {
	return predicate.OncallScheduleParticipant(sql.FieldLT(FieldIndex, v))
}

// IndexLTE applies the LTE predicate on the "index" field.
func IndexLTE(v int) predicate.OncallScheduleParticipant {
	return predicate.OncallScheduleParticipant(sql.FieldLTE(FieldIndex, v))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.OncallScheduleParticipant {
	return predicate.OncallScheduleParticipant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.OncallScheduleParticipant {
	return predicate.OncallScheduleParticipant(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSchedule applies the HasEdge predicate on the "schedule" edge.
func HasSchedule() predicate.OncallScheduleParticipant {
	return predicate.OncallScheduleParticipant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ScheduleTable, ScheduleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasScheduleWith applies the HasEdge predicate on the "schedule" edge with a given conditions (other predicates).
func HasScheduleWith(preds ...predicate.OncallSchedule) predicate.OncallScheduleParticipant {
	return predicate.OncallScheduleParticipant(func(s *sql.Selector) {
		step := newScheduleStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.OncallScheduleParticipant {
	return predicate.OncallScheduleParticipant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.OncallScheduleParticipant {
	return predicate.OncallScheduleParticipant(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OncallScheduleParticipant) predicate.OncallScheduleParticipant {
	return predicate.OncallScheduleParticipant(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OncallScheduleParticipant) predicate.OncallScheduleParticipant {
	return predicate.OncallScheduleParticipant(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OncallScheduleParticipant) predicate.OncallScheduleParticipant {
	return predicate.OncallScheduleParticipant(sql.NotPredicates(p))
}
