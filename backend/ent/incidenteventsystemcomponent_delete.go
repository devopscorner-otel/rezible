// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rezible/rezible/ent/incidenteventsystemcomponent"
	"github.com/rezible/rezible/ent/predicate"
)

// IncidentEventSystemComponentDelete is the builder for deleting a IncidentEventSystemComponent entity.
type IncidentEventSystemComponentDelete struct {
	config
	hooks    []Hook
	mutation *IncidentEventSystemComponentMutation
}

// Where appends a list predicates to the IncidentEventSystemComponentDelete builder.
func (iescd *IncidentEventSystemComponentDelete) Where(ps ...predicate.IncidentEventSystemComponent) *IncidentEventSystemComponentDelete {
	iescd.mutation.Where(ps...)
	return iescd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (iescd *IncidentEventSystemComponentDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, iescd.sqlExec, iescd.mutation, iescd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (iescd *IncidentEventSystemComponentDelete) ExecX(ctx context.Context) int {
	n, err := iescd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (iescd *IncidentEventSystemComponentDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(incidenteventsystemcomponent.Table, sqlgraph.NewFieldSpec(incidenteventsystemcomponent.FieldID, field.TypeUUID))
	if ps := iescd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, iescd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	iescd.mutation.done = true
	return affected, err
}

// IncidentEventSystemComponentDeleteOne is the builder for deleting a single IncidentEventSystemComponent entity.
type IncidentEventSystemComponentDeleteOne struct {
	iescd *IncidentEventSystemComponentDelete
}

// Where appends a list predicates to the IncidentEventSystemComponentDelete builder.
func (iescdo *IncidentEventSystemComponentDeleteOne) Where(ps ...predicate.IncidentEventSystemComponent) *IncidentEventSystemComponentDeleteOne {
	iescdo.iescd.mutation.Where(ps...)
	return iescdo
}

// Exec executes the deletion query.
func (iescdo *IncidentEventSystemComponentDeleteOne) Exec(ctx context.Context) error {
	n, err := iescdo.iescd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{incidenteventsystemcomponent.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (iescdo *IncidentEventSystemComponentDeleteOne) ExecX(ctx context.Context) {
	if err := iescdo.Exec(ctx); err != nil {
		panic(err)
	}
}
