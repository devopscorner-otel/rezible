// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/oncallschedule"
	"github.com/rezible/rezible/ent/oncallscheduleparticipant"
	"github.com/rezible/rezible/ent/user"
)

// OncallScheduleParticipantCreate is the builder for creating a OncallScheduleParticipant entity.
type OncallScheduleParticipantCreate struct {
	config
	mutation *OncallScheduleParticipantMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetScheduleID sets the "schedule_id" field.
func (ospc *OncallScheduleParticipantCreate) SetScheduleID(u uuid.UUID) *OncallScheduleParticipantCreate {
	ospc.mutation.SetScheduleID(u)
	return ospc
}

// SetUserID sets the "user_id" field.
func (ospc *OncallScheduleParticipantCreate) SetUserID(u uuid.UUID) *OncallScheduleParticipantCreate {
	ospc.mutation.SetUserID(u)
	return ospc
}

// SetIndex sets the "index" field.
func (ospc *OncallScheduleParticipantCreate) SetIndex(i int) *OncallScheduleParticipantCreate {
	ospc.mutation.SetIndex(i)
	return ospc
}

// SetID sets the "id" field.
func (ospc *OncallScheduleParticipantCreate) SetID(u uuid.UUID) *OncallScheduleParticipantCreate {
	ospc.mutation.SetID(u)
	return ospc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ospc *OncallScheduleParticipantCreate) SetNillableID(u *uuid.UUID) *OncallScheduleParticipantCreate {
	if u != nil {
		ospc.SetID(*u)
	}
	return ospc
}

// SetSchedule sets the "schedule" edge to the OncallSchedule entity.
func (ospc *OncallScheduleParticipantCreate) SetSchedule(o *OncallSchedule) *OncallScheduleParticipantCreate {
	return ospc.SetScheduleID(o.ID)
}

// SetUser sets the "user" edge to the User entity.
func (ospc *OncallScheduleParticipantCreate) SetUser(u *User) *OncallScheduleParticipantCreate {
	return ospc.SetUserID(u.ID)
}

// Mutation returns the OncallScheduleParticipantMutation object of the builder.
func (ospc *OncallScheduleParticipantCreate) Mutation() *OncallScheduleParticipantMutation {
	return ospc.mutation
}

// Save creates the OncallScheduleParticipant in the database.
func (ospc *OncallScheduleParticipantCreate) Save(ctx context.Context) (*OncallScheduleParticipant, error) {
	if err := ospc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ospc.sqlSave, ospc.mutation, ospc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ospc *OncallScheduleParticipantCreate) SaveX(ctx context.Context) *OncallScheduleParticipant {
	v, err := ospc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ospc *OncallScheduleParticipantCreate) Exec(ctx context.Context) error {
	_, err := ospc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ospc *OncallScheduleParticipantCreate) ExecX(ctx context.Context) {
	if err := ospc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ospc *OncallScheduleParticipantCreate) defaults() error {
	if _, ok := ospc.mutation.ID(); !ok {
		if oncallscheduleparticipant.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized oncallscheduleparticipant.DefaultID (forgotten import ent/runtime?)")
		}
		v := oncallscheduleparticipant.DefaultID()
		ospc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ospc *OncallScheduleParticipantCreate) check() error {
	if _, ok := ospc.mutation.ScheduleID(); !ok {
		return &ValidationError{Name: "schedule_id", err: errors.New(`ent: missing required field "OncallScheduleParticipant.schedule_id"`)}
	}
	if _, ok := ospc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "OncallScheduleParticipant.user_id"`)}
	}
	if _, ok := ospc.mutation.Index(); !ok {
		return &ValidationError{Name: "index", err: errors.New(`ent: missing required field "OncallScheduleParticipant.index"`)}
	}
	if len(ospc.mutation.ScheduleIDs()) == 0 {
		return &ValidationError{Name: "schedule", err: errors.New(`ent: missing required edge "OncallScheduleParticipant.schedule"`)}
	}
	if len(ospc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "OncallScheduleParticipant.user"`)}
	}
	return nil
}

func (ospc *OncallScheduleParticipantCreate) sqlSave(ctx context.Context) (*OncallScheduleParticipant, error) {
	if err := ospc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ospc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ospc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ospc.mutation.id = &_node.ID
	ospc.mutation.done = true
	return _node, nil
}

func (ospc *OncallScheduleParticipantCreate) createSpec() (*OncallScheduleParticipant, *sqlgraph.CreateSpec) {
	var (
		_node = &OncallScheduleParticipant{config: ospc.config}
		_spec = sqlgraph.NewCreateSpec(oncallscheduleparticipant.Table, sqlgraph.NewFieldSpec(oncallscheduleparticipant.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = ospc.conflict
	if id, ok := ospc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ospc.mutation.Index(); ok {
		_spec.SetField(oncallscheduleparticipant.FieldIndex, field.TypeInt, value)
		_node.Index = value
	}
	if nodes := ospc.mutation.ScheduleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oncallscheduleparticipant.ScheduleTable,
			Columns: []string{oncallscheduleparticipant.ScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallschedule.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ScheduleID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ospc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallscheduleparticipant.UserTable,
			Columns: []string{oncallscheduleparticipant.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OncallScheduleParticipant.Create().
//		SetScheduleID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OncallScheduleParticipantUpsert) {
//			SetScheduleID(v+v).
//		}).
//		Exec(ctx)
func (ospc *OncallScheduleParticipantCreate) OnConflict(opts ...sql.ConflictOption) *OncallScheduleParticipantUpsertOne {
	ospc.conflict = opts
	return &OncallScheduleParticipantUpsertOne{
		create: ospc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OncallScheduleParticipant.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ospc *OncallScheduleParticipantCreate) OnConflictColumns(columns ...string) *OncallScheduleParticipantUpsertOne {
	ospc.conflict = append(ospc.conflict, sql.ConflictColumns(columns...))
	return &OncallScheduleParticipantUpsertOne{
		create: ospc,
	}
}

type (
	// OncallScheduleParticipantUpsertOne is the builder for "upsert"-ing
	//  one OncallScheduleParticipant node.
	OncallScheduleParticipantUpsertOne struct {
		create *OncallScheduleParticipantCreate
	}

	// OncallScheduleParticipantUpsert is the "OnConflict" setter.
	OncallScheduleParticipantUpsert struct {
		*sql.UpdateSet
	}
)

// SetScheduleID sets the "schedule_id" field.
func (u *OncallScheduleParticipantUpsert) SetScheduleID(v uuid.UUID) *OncallScheduleParticipantUpsert {
	u.Set(oncallscheduleparticipant.FieldScheduleID, v)
	return u
}

// UpdateScheduleID sets the "schedule_id" field to the value that was provided on create.
func (u *OncallScheduleParticipantUpsert) UpdateScheduleID() *OncallScheduleParticipantUpsert {
	u.SetExcluded(oncallscheduleparticipant.FieldScheduleID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *OncallScheduleParticipantUpsert) SetUserID(v uuid.UUID) *OncallScheduleParticipantUpsert {
	u.Set(oncallscheduleparticipant.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *OncallScheduleParticipantUpsert) UpdateUserID() *OncallScheduleParticipantUpsert {
	u.SetExcluded(oncallscheduleparticipant.FieldUserID)
	return u
}

// SetIndex sets the "index" field.
func (u *OncallScheduleParticipantUpsert) SetIndex(v int) *OncallScheduleParticipantUpsert {
	u.Set(oncallscheduleparticipant.FieldIndex, v)
	return u
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *OncallScheduleParticipantUpsert) UpdateIndex() *OncallScheduleParticipantUpsert {
	u.SetExcluded(oncallscheduleparticipant.FieldIndex)
	return u
}

// AddIndex adds v to the "index" field.
func (u *OncallScheduleParticipantUpsert) AddIndex(v int) *OncallScheduleParticipantUpsert {
	u.Add(oncallscheduleparticipant.FieldIndex, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OncallScheduleParticipant.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oncallscheduleparticipant.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OncallScheduleParticipantUpsertOne) UpdateNewValues() *OncallScheduleParticipantUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(oncallscheduleparticipant.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OncallScheduleParticipant.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OncallScheduleParticipantUpsertOne) Ignore() *OncallScheduleParticipantUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OncallScheduleParticipantUpsertOne) DoNothing() *OncallScheduleParticipantUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OncallScheduleParticipantCreate.OnConflict
// documentation for more info.
func (u *OncallScheduleParticipantUpsertOne) Update(set func(*OncallScheduleParticipantUpsert)) *OncallScheduleParticipantUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OncallScheduleParticipantUpsert{UpdateSet: update})
	}))
	return u
}

// SetScheduleID sets the "schedule_id" field.
func (u *OncallScheduleParticipantUpsertOne) SetScheduleID(v uuid.UUID) *OncallScheduleParticipantUpsertOne {
	return u.Update(func(s *OncallScheduleParticipantUpsert) {
		s.SetScheduleID(v)
	})
}

// UpdateScheduleID sets the "schedule_id" field to the value that was provided on create.
func (u *OncallScheduleParticipantUpsertOne) UpdateScheduleID() *OncallScheduleParticipantUpsertOne {
	return u.Update(func(s *OncallScheduleParticipantUpsert) {
		s.UpdateScheduleID()
	})
}

// SetUserID sets the "user_id" field.
func (u *OncallScheduleParticipantUpsertOne) SetUserID(v uuid.UUID) *OncallScheduleParticipantUpsertOne {
	return u.Update(func(s *OncallScheduleParticipantUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *OncallScheduleParticipantUpsertOne) UpdateUserID() *OncallScheduleParticipantUpsertOne {
	return u.Update(func(s *OncallScheduleParticipantUpsert) {
		s.UpdateUserID()
	})
}

// SetIndex sets the "index" field.
func (u *OncallScheduleParticipantUpsertOne) SetIndex(v int) *OncallScheduleParticipantUpsertOne {
	return u.Update(func(s *OncallScheduleParticipantUpsert) {
		s.SetIndex(v)
	})
}

// AddIndex adds v to the "index" field.
func (u *OncallScheduleParticipantUpsertOne) AddIndex(v int) *OncallScheduleParticipantUpsertOne {
	return u.Update(func(s *OncallScheduleParticipantUpsert) {
		s.AddIndex(v)
	})
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *OncallScheduleParticipantUpsertOne) UpdateIndex() *OncallScheduleParticipantUpsertOne {
	return u.Update(func(s *OncallScheduleParticipantUpsert) {
		s.UpdateIndex()
	})
}

// Exec executes the query.
func (u *OncallScheduleParticipantUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OncallScheduleParticipantCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OncallScheduleParticipantUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OncallScheduleParticipantUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: OncallScheduleParticipantUpsertOne.ID is not supported by MySQL driver. Use OncallScheduleParticipantUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OncallScheduleParticipantUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OncallScheduleParticipantCreateBulk is the builder for creating many OncallScheduleParticipant entities in bulk.
type OncallScheduleParticipantCreateBulk struct {
	config
	err      error
	builders []*OncallScheduleParticipantCreate
	conflict []sql.ConflictOption
}

// Save creates the OncallScheduleParticipant entities in the database.
func (ospcb *OncallScheduleParticipantCreateBulk) Save(ctx context.Context) ([]*OncallScheduleParticipant, error) {
	if ospcb.err != nil {
		return nil, ospcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ospcb.builders))
	nodes := make([]*OncallScheduleParticipant, len(ospcb.builders))
	mutators := make([]Mutator, len(ospcb.builders))
	for i := range ospcb.builders {
		func(i int, root context.Context) {
			builder := ospcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OncallScheduleParticipantMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ospcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ospcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ospcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ospcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ospcb *OncallScheduleParticipantCreateBulk) SaveX(ctx context.Context) []*OncallScheduleParticipant {
	v, err := ospcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ospcb *OncallScheduleParticipantCreateBulk) Exec(ctx context.Context) error {
	_, err := ospcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ospcb *OncallScheduleParticipantCreateBulk) ExecX(ctx context.Context) {
	if err := ospcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OncallScheduleParticipant.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OncallScheduleParticipantUpsert) {
//			SetScheduleID(v+v).
//		}).
//		Exec(ctx)
func (ospcb *OncallScheduleParticipantCreateBulk) OnConflict(opts ...sql.ConflictOption) *OncallScheduleParticipantUpsertBulk {
	ospcb.conflict = opts
	return &OncallScheduleParticipantUpsertBulk{
		create: ospcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OncallScheduleParticipant.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ospcb *OncallScheduleParticipantCreateBulk) OnConflictColumns(columns ...string) *OncallScheduleParticipantUpsertBulk {
	ospcb.conflict = append(ospcb.conflict, sql.ConflictColumns(columns...))
	return &OncallScheduleParticipantUpsertBulk{
		create: ospcb,
	}
}

// OncallScheduleParticipantUpsertBulk is the builder for "upsert"-ing
// a bulk of OncallScheduleParticipant nodes.
type OncallScheduleParticipantUpsertBulk struct {
	create *OncallScheduleParticipantCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OncallScheduleParticipant.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oncallscheduleparticipant.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OncallScheduleParticipantUpsertBulk) UpdateNewValues() *OncallScheduleParticipantUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(oncallscheduleparticipant.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OncallScheduleParticipant.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OncallScheduleParticipantUpsertBulk) Ignore() *OncallScheduleParticipantUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OncallScheduleParticipantUpsertBulk) DoNothing() *OncallScheduleParticipantUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OncallScheduleParticipantCreateBulk.OnConflict
// documentation for more info.
func (u *OncallScheduleParticipantUpsertBulk) Update(set func(*OncallScheduleParticipantUpsert)) *OncallScheduleParticipantUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OncallScheduleParticipantUpsert{UpdateSet: update})
	}))
	return u
}

// SetScheduleID sets the "schedule_id" field.
func (u *OncallScheduleParticipantUpsertBulk) SetScheduleID(v uuid.UUID) *OncallScheduleParticipantUpsertBulk {
	return u.Update(func(s *OncallScheduleParticipantUpsert) {
		s.SetScheduleID(v)
	})
}

// UpdateScheduleID sets the "schedule_id" field to the value that was provided on create.
func (u *OncallScheduleParticipantUpsertBulk) UpdateScheduleID() *OncallScheduleParticipantUpsertBulk {
	return u.Update(func(s *OncallScheduleParticipantUpsert) {
		s.UpdateScheduleID()
	})
}

// SetUserID sets the "user_id" field.
func (u *OncallScheduleParticipantUpsertBulk) SetUserID(v uuid.UUID) *OncallScheduleParticipantUpsertBulk {
	return u.Update(func(s *OncallScheduleParticipantUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *OncallScheduleParticipantUpsertBulk) UpdateUserID() *OncallScheduleParticipantUpsertBulk {
	return u.Update(func(s *OncallScheduleParticipantUpsert) {
		s.UpdateUserID()
	})
}

// SetIndex sets the "index" field.
func (u *OncallScheduleParticipantUpsertBulk) SetIndex(v int) *OncallScheduleParticipantUpsertBulk {
	return u.Update(func(s *OncallScheduleParticipantUpsert) {
		s.SetIndex(v)
	})
}

// AddIndex adds v to the "index" field.
func (u *OncallScheduleParticipantUpsertBulk) AddIndex(v int) *OncallScheduleParticipantUpsertBulk {
	return u.Update(func(s *OncallScheduleParticipantUpsert) {
		s.AddIndex(v)
	})
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *OncallScheduleParticipantUpsertBulk) UpdateIndex() *OncallScheduleParticipantUpsertBulk {
	return u.Update(func(s *OncallScheduleParticipantUpsert) {
		s.UpdateIndex()
	})
}

// Exec executes the query.
func (u *OncallScheduleParticipantUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OncallScheduleParticipantCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OncallScheduleParticipantCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OncallScheduleParticipantUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
