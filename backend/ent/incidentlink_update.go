// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/incident"
	"github.com/rezible/rezible/ent/incidentlink"
	"github.com/rezible/rezible/ent/predicate"
)

// IncidentLinkUpdate is the builder for updating IncidentLink entities.
type IncidentLinkUpdate struct {
	config
	hooks     []Hook
	mutation  *IncidentLinkMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the IncidentLinkUpdate builder.
func (ilu *IncidentLinkUpdate) Where(ps ...predicate.IncidentLink) *IncidentLinkUpdate {
	ilu.mutation.Where(ps...)
	return ilu
}

// SetIncidentID sets the "incident_id" field.
func (ilu *IncidentLinkUpdate) SetIncidentID(u uuid.UUID) *IncidentLinkUpdate {
	ilu.mutation.SetIncidentID(u)
	return ilu
}

// SetNillableIncidentID sets the "incident_id" field if the given value is not nil.
func (ilu *IncidentLinkUpdate) SetNillableIncidentID(u *uuid.UUID) *IncidentLinkUpdate {
	if u != nil {
		ilu.SetIncidentID(*u)
	}
	return ilu
}

// SetLinkedIncidentID sets the "linked_incident_id" field.
func (ilu *IncidentLinkUpdate) SetLinkedIncidentID(u uuid.UUID) *IncidentLinkUpdate {
	ilu.mutation.SetLinkedIncidentID(u)
	return ilu
}

// SetNillableLinkedIncidentID sets the "linked_incident_id" field if the given value is not nil.
func (ilu *IncidentLinkUpdate) SetNillableLinkedIncidentID(u *uuid.UUID) *IncidentLinkUpdate {
	if u != nil {
		ilu.SetLinkedIncidentID(*u)
	}
	return ilu
}

// SetDescription sets the "description" field.
func (ilu *IncidentLinkUpdate) SetDescription(s string) *IncidentLinkUpdate {
	ilu.mutation.SetDescription(s)
	return ilu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ilu *IncidentLinkUpdate) SetNillableDescription(s *string) *IncidentLinkUpdate {
	if s != nil {
		ilu.SetDescription(*s)
	}
	return ilu
}

// ClearDescription clears the value of the "description" field.
func (ilu *IncidentLinkUpdate) ClearDescription() *IncidentLinkUpdate {
	ilu.mutation.ClearDescription()
	return ilu
}

// SetLinkType sets the "link_type" field.
func (ilu *IncidentLinkUpdate) SetLinkType(it incidentlink.LinkType) *IncidentLinkUpdate {
	ilu.mutation.SetLinkType(it)
	return ilu
}

// SetNillableLinkType sets the "link_type" field if the given value is not nil.
func (ilu *IncidentLinkUpdate) SetNillableLinkType(it *incidentlink.LinkType) *IncidentLinkUpdate {
	if it != nil {
		ilu.SetLinkType(*it)
	}
	return ilu
}

// SetIncident sets the "incident" edge to the Incident entity.
func (ilu *IncidentLinkUpdate) SetIncident(i *Incident) *IncidentLinkUpdate {
	return ilu.SetIncidentID(i.ID)
}

// SetLinkedIncident sets the "linked_incident" edge to the Incident entity.
func (ilu *IncidentLinkUpdate) SetLinkedIncident(i *Incident) *IncidentLinkUpdate {
	return ilu.SetLinkedIncidentID(i.ID)
}

// Mutation returns the IncidentLinkMutation object of the builder.
func (ilu *IncidentLinkUpdate) Mutation() *IncidentLinkMutation {
	return ilu.mutation
}

// ClearIncident clears the "incident" edge to the Incident entity.
func (ilu *IncidentLinkUpdate) ClearIncident() *IncidentLinkUpdate {
	ilu.mutation.ClearIncident()
	return ilu
}

// ClearLinkedIncident clears the "linked_incident" edge to the Incident entity.
func (ilu *IncidentLinkUpdate) ClearLinkedIncident() *IncidentLinkUpdate {
	ilu.mutation.ClearLinkedIncident()
	return ilu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ilu *IncidentLinkUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ilu.sqlSave, ilu.mutation, ilu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ilu *IncidentLinkUpdate) SaveX(ctx context.Context) int {
	affected, err := ilu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ilu *IncidentLinkUpdate) Exec(ctx context.Context) error {
	_, err := ilu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ilu *IncidentLinkUpdate) ExecX(ctx context.Context) {
	if err := ilu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ilu *IncidentLinkUpdate) check() error {
	if v, ok := ilu.mutation.LinkType(); ok {
		if err := incidentlink.LinkTypeValidator(v); err != nil {
			return &ValidationError{Name: "link_type", err: fmt.Errorf(`ent: validator failed for field "IncidentLink.link_type": %w`, err)}
		}
	}
	if ilu.mutation.IncidentCleared() && len(ilu.mutation.IncidentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IncidentLink.incident"`)
	}
	if ilu.mutation.LinkedIncidentCleared() && len(ilu.mutation.LinkedIncidentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IncidentLink.linked_incident"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ilu *IncidentLinkUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *IncidentLinkUpdate {
	ilu.modifiers = append(ilu.modifiers, modifiers...)
	return ilu
}

func (ilu *IncidentLinkUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ilu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(incidentlink.Table, incidentlink.Columns, sqlgraph.NewFieldSpec(incidentlink.FieldID, field.TypeInt))
	if ps := ilu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ilu.mutation.Description(); ok {
		_spec.SetField(incidentlink.FieldDescription, field.TypeString, value)
	}
	if ilu.mutation.DescriptionCleared() {
		_spec.ClearField(incidentlink.FieldDescription, field.TypeString)
	}
	if value, ok := ilu.mutation.LinkType(); ok {
		_spec.SetField(incidentlink.FieldLinkType, field.TypeEnum, value)
	}
	if ilu.mutation.IncidentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentlink.IncidentTable,
			Columns: []string{incidentlink.IncidentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ilu.mutation.IncidentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentlink.IncidentTable,
			Columns: []string{incidentlink.IncidentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ilu.mutation.LinkedIncidentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentlink.LinkedIncidentTable,
			Columns: []string{incidentlink.LinkedIncidentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ilu.mutation.LinkedIncidentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentlink.LinkedIncidentTable,
			Columns: []string{incidentlink.LinkedIncidentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ilu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ilu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{incidentlink.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ilu.mutation.done = true
	return n, nil
}

// IncidentLinkUpdateOne is the builder for updating a single IncidentLink entity.
type IncidentLinkUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *IncidentLinkMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetIncidentID sets the "incident_id" field.
func (iluo *IncidentLinkUpdateOne) SetIncidentID(u uuid.UUID) *IncidentLinkUpdateOne {
	iluo.mutation.SetIncidentID(u)
	return iluo
}

// SetNillableIncidentID sets the "incident_id" field if the given value is not nil.
func (iluo *IncidentLinkUpdateOne) SetNillableIncidentID(u *uuid.UUID) *IncidentLinkUpdateOne {
	if u != nil {
		iluo.SetIncidentID(*u)
	}
	return iluo
}

// SetLinkedIncidentID sets the "linked_incident_id" field.
func (iluo *IncidentLinkUpdateOne) SetLinkedIncidentID(u uuid.UUID) *IncidentLinkUpdateOne {
	iluo.mutation.SetLinkedIncidentID(u)
	return iluo
}

// SetNillableLinkedIncidentID sets the "linked_incident_id" field if the given value is not nil.
func (iluo *IncidentLinkUpdateOne) SetNillableLinkedIncidentID(u *uuid.UUID) *IncidentLinkUpdateOne {
	if u != nil {
		iluo.SetLinkedIncidentID(*u)
	}
	return iluo
}

// SetDescription sets the "description" field.
func (iluo *IncidentLinkUpdateOne) SetDescription(s string) *IncidentLinkUpdateOne {
	iluo.mutation.SetDescription(s)
	return iluo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (iluo *IncidentLinkUpdateOne) SetNillableDescription(s *string) *IncidentLinkUpdateOne {
	if s != nil {
		iluo.SetDescription(*s)
	}
	return iluo
}

// ClearDescription clears the value of the "description" field.
func (iluo *IncidentLinkUpdateOne) ClearDescription() *IncidentLinkUpdateOne {
	iluo.mutation.ClearDescription()
	return iluo
}

// SetLinkType sets the "link_type" field.
func (iluo *IncidentLinkUpdateOne) SetLinkType(it incidentlink.LinkType) *IncidentLinkUpdateOne {
	iluo.mutation.SetLinkType(it)
	return iluo
}

// SetNillableLinkType sets the "link_type" field if the given value is not nil.
func (iluo *IncidentLinkUpdateOne) SetNillableLinkType(it *incidentlink.LinkType) *IncidentLinkUpdateOne {
	if it != nil {
		iluo.SetLinkType(*it)
	}
	return iluo
}

// SetIncident sets the "incident" edge to the Incident entity.
func (iluo *IncidentLinkUpdateOne) SetIncident(i *Incident) *IncidentLinkUpdateOne {
	return iluo.SetIncidentID(i.ID)
}

// SetLinkedIncident sets the "linked_incident" edge to the Incident entity.
func (iluo *IncidentLinkUpdateOne) SetLinkedIncident(i *Incident) *IncidentLinkUpdateOne {
	return iluo.SetLinkedIncidentID(i.ID)
}

// Mutation returns the IncidentLinkMutation object of the builder.
func (iluo *IncidentLinkUpdateOne) Mutation() *IncidentLinkMutation {
	return iluo.mutation
}

// ClearIncident clears the "incident" edge to the Incident entity.
func (iluo *IncidentLinkUpdateOne) ClearIncident() *IncidentLinkUpdateOne {
	iluo.mutation.ClearIncident()
	return iluo
}

// ClearLinkedIncident clears the "linked_incident" edge to the Incident entity.
func (iluo *IncidentLinkUpdateOne) ClearLinkedIncident() *IncidentLinkUpdateOne {
	iluo.mutation.ClearLinkedIncident()
	return iluo
}

// Where appends a list predicates to the IncidentLinkUpdate builder.
func (iluo *IncidentLinkUpdateOne) Where(ps ...predicate.IncidentLink) *IncidentLinkUpdateOne {
	iluo.mutation.Where(ps...)
	return iluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iluo *IncidentLinkUpdateOne) Select(field string, fields ...string) *IncidentLinkUpdateOne {
	iluo.fields = append([]string{field}, fields...)
	return iluo
}

// Save executes the query and returns the updated IncidentLink entity.
func (iluo *IncidentLinkUpdateOne) Save(ctx context.Context) (*IncidentLink, error) {
	return withHooks(ctx, iluo.sqlSave, iluo.mutation, iluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iluo *IncidentLinkUpdateOne) SaveX(ctx context.Context) *IncidentLink {
	node, err := iluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iluo *IncidentLinkUpdateOne) Exec(ctx context.Context) error {
	_, err := iluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iluo *IncidentLinkUpdateOne) ExecX(ctx context.Context) {
	if err := iluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iluo *IncidentLinkUpdateOne) check() error {
	if v, ok := iluo.mutation.LinkType(); ok {
		if err := incidentlink.LinkTypeValidator(v); err != nil {
			return &ValidationError{Name: "link_type", err: fmt.Errorf(`ent: validator failed for field "IncidentLink.link_type": %w`, err)}
		}
	}
	if iluo.mutation.IncidentCleared() && len(iluo.mutation.IncidentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IncidentLink.incident"`)
	}
	if iluo.mutation.LinkedIncidentCleared() && len(iluo.mutation.LinkedIncidentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IncidentLink.linked_incident"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (iluo *IncidentLinkUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *IncidentLinkUpdateOne {
	iluo.modifiers = append(iluo.modifiers, modifiers...)
	return iluo
}

func (iluo *IncidentLinkUpdateOne) sqlSave(ctx context.Context) (_node *IncidentLink, err error) {
	if err := iluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(incidentlink.Table, incidentlink.Columns, sqlgraph.NewFieldSpec(incidentlink.FieldID, field.TypeInt))
	id, ok := iluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "IncidentLink.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, incidentlink.FieldID)
		for _, f := range fields {
			if !incidentlink.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != incidentlink.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iluo.mutation.Description(); ok {
		_spec.SetField(incidentlink.FieldDescription, field.TypeString, value)
	}
	if iluo.mutation.DescriptionCleared() {
		_spec.ClearField(incidentlink.FieldDescription, field.TypeString)
	}
	if value, ok := iluo.mutation.LinkType(); ok {
		_spec.SetField(incidentlink.FieldLinkType, field.TypeEnum, value)
	}
	if iluo.mutation.IncidentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentlink.IncidentTable,
			Columns: []string{incidentlink.IncidentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iluo.mutation.IncidentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentlink.IncidentTable,
			Columns: []string{incidentlink.IncidentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iluo.mutation.LinkedIncidentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentlink.LinkedIncidentTable,
			Columns: []string{incidentlink.LinkedIncidentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iluo.mutation.LinkedIncidentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentlink.LinkedIncidentTable,
			Columns: []string{incidentlink.LinkedIncidentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(iluo.modifiers...)
	_node = &IncidentLink{config: iluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{incidentlink.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iluo.mutation.done = true
	return _node, nil
}
