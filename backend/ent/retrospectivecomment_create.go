// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/retrospective"
	"github.com/rezible/rezible/ent/retrospectivecomment"
	"github.com/rezible/rezible/ent/retrospectivereview"
	"github.com/rezible/rezible/ent/tenant"
	"github.com/rezible/rezible/ent/user"
)

// RetrospectiveCommentCreate is the builder for creating a RetrospectiveComment entity.
type RetrospectiveCommentCreate struct {
	config
	mutation *RetrospectiveCommentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (rcc *RetrospectiveCommentCreate) SetTenantID(i int) *RetrospectiveCommentCreate {
	rcc.mutation.SetTenantID(i)
	return rcc
}

// SetRetrospectiveID sets the "retrospective_id" field.
func (rcc *RetrospectiveCommentCreate) SetRetrospectiveID(u uuid.UUID) *RetrospectiveCommentCreate {
	rcc.mutation.SetRetrospectiveID(u)
	return rcc
}

// SetUserID sets the "user_id" field.
func (rcc *RetrospectiveCommentCreate) SetUserID(u uuid.UUID) *RetrospectiveCommentCreate {
	rcc.mutation.SetUserID(u)
	return rcc
}

// SetRetrospectiveReviewID sets the "retrospective_review_id" field.
func (rcc *RetrospectiveCommentCreate) SetRetrospectiveReviewID(u uuid.UUID) *RetrospectiveCommentCreate {
	rcc.mutation.SetRetrospectiveReviewID(u)
	return rcc
}

// SetNillableRetrospectiveReviewID sets the "retrospective_review_id" field if the given value is not nil.
func (rcc *RetrospectiveCommentCreate) SetNillableRetrospectiveReviewID(u *uuid.UUID) *RetrospectiveCommentCreate {
	if u != nil {
		rcc.SetRetrospectiveReviewID(*u)
	}
	return rcc
}

// SetParentReplyID sets the "parent_reply_id" field.
func (rcc *RetrospectiveCommentCreate) SetParentReplyID(u uuid.UUID) *RetrospectiveCommentCreate {
	rcc.mutation.SetParentReplyID(u)
	return rcc
}

// SetNillableParentReplyID sets the "parent_reply_id" field if the given value is not nil.
func (rcc *RetrospectiveCommentCreate) SetNillableParentReplyID(u *uuid.UUID) *RetrospectiveCommentCreate {
	if u != nil {
		rcc.SetParentReplyID(*u)
	}
	return rcc
}

// SetContent sets the "content" field.
func (rcc *RetrospectiveCommentCreate) SetContent(b []byte) *RetrospectiveCommentCreate {
	rcc.mutation.SetContent(b)
	return rcc
}

// SetID sets the "id" field.
func (rcc *RetrospectiveCommentCreate) SetID(u uuid.UUID) *RetrospectiveCommentCreate {
	rcc.mutation.SetID(u)
	return rcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rcc *RetrospectiveCommentCreate) SetNillableID(u *uuid.UUID) *RetrospectiveCommentCreate {
	if u != nil {
		rcc.SetID(*u)
	}
	return rcc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (rcc *RetrospectiveCommentCreate) SetTenant(t *Tenant) *RetrospectiveCommentCreate {
	return rcc.SetTenantID(t.ID)
}

// SetRetrospective sets the "retrospective" edge to the Retrospective entity.
func (rcc *RetrospectiveCommentCreate) SetRetrospective(r *Retrospective) *RetrospectiveCommentCreate {
	return rcc.SetRetrospectiveID(r.ID)
}

// SetUser sets the "user" edge to the User entity.
func (rcc *RetrospectiveCommentCreate) SetUser(u *User) *RetrospectiveCommentCreate {
	return rcc.SetUserID(u.ID)
}

// SetReviewID sets the "review" edge to the RetrospectiveReview entity by ID.
func (rcc *RetrospectiveCommentCreate) SetReviewID(id uuid.UUID) *RetrospectiveCommentCreate {
	rcc.mutation.SetReviewID(id)
	return rcc
}

// SetNillableReviewID sets the "review" edge to the RetrospectiveReview entity by ID if the given value is not nil.
func (rcc *RetrospectiveCommentCreate) SetNillableReviewID(id *uuid.UUID) *RetrospectiveCommentCreate {
	if id != nil {
		rcc = rcc.SetReviewID(*id)
	}
	return rcc
}

// SetReview sets the "review" edge to the RetrospectiveReview entity.
func (rcc *RetrospectiveCommentCreate) SetReview(r *RetrospectiveReview) *RetrospectiveCommentCreate {
	return rcc.SetReviewID(r.ID)
}

// SetParentID sets the "parent" edge to the RetrospectiveComment entity by ID.
func (rcc *RetrospectiveCommentCreate) SetParentID(id uuid.UUID) *RetrospectiveCommentCreate {
	rcc.mutation.SetParentID(id)
	return rcc
}

// SetNillableParentID sets the "parent" edge to the RetrospectiveComment entity by ID if the given value is not nil.
func (rcc *RetrospectiveCommentCreate) SetNillableParentID(id *uuid.UUID) *RetrospectiveCommentCreate {
	if id != nil {
		rcc = rcc.SetParentID(*id)
	}
	return rcc
}

// SetParent sets the "parent" edge to the RetrospectiveComment entity.
func (rcc *RetrospectiveCommentCreate) SetParent(r *RetrospectiveComment) *RetrospectiveCommentCreate {
	return rcc.SetParentID(r.ID)
}

// AddReplyIDs adds the "replies" edge to the RetrospectiveComment entity by IDs.
func (rcc *RetrospectiveCommentCreate) AddReplyIDs(ids ...uuid.UUID) *RetrospectiveCommentCreate {
	rcc.mutation.AddReplyIDs(ids...)
	return rcc
}

// AddReplies adds the "replies" edges to the RetrospectiveComment entity.
func (rcc *RetrospectiveCommentCreate) AddReplies(r ...*RetrospectiveComment) *RetrospectiveCommentCreate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rcc.AddReplyIDs(ids...)
}

// Mutation returns the RetrospectiveCommentMutation object of the builder.
func (rcc *RetrospectiveCommentCreate) Mutation() *RetrospectiveCommentMutation {
	return rcc.mutation
}

// Save creates the RetrospectiveComment in the database.
func (rcc *RetrospectiveCommentCreate) Save(ctx context.Context) (*RetrospectiveComment, error) {
	if err := rcc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, rcc.sqlSave, rcc.mutation, rcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rcc *RetrospectiveCommentCreate) SaveX(ctx context.Context) *RetrospectiveComment {
	v, err := rcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcc *RetrospectiveCommentCreate) Exec(ctx context.Context) error {
	_, err := rcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcc *RetrospectiveCommentCreate) ExecX(ctx context.Context) {
	if err := rcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rcc *RetrospectiveCommentCreate) defaults() error {
	if _, ok := rcc.mutation.ID(); !ok {
		if retrospectivecomment.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized retrospectivecomment.DefaultID (forgotten import ent/runtime?)")
		}
		v := retrospectivecomment.DefaultID()
		rcc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rcc *RetrospectiveCommentCreate) check() error {
	if _, ok := rcc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "RetrospectiveComment.tenant_id"`)}
	}
	if _, ok := rcc.mutation.RetrospectiveID(); !ok {
		return &ValidationError{Name: "retrospective_id", err: errors.New(`ent: missing required field "RetrospectiveComment.retrospective_id"`)}
	}
	if _, ok := rcc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "RetrospectiveComment.user_id"`)}
	}
	if _, ok := rcc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "RetrospectiveComment.content"`)}
	}
	if len(rcc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "RetrospectiveComment.tenant"`)}
	}
	if len(rcc.mutation.RetrospectiveIDs()) == 0 {
		return &ValidationError{Name: "retrospective", err: errors.New(`ent: missing required edge "RetrospectiveComment.retrospective"`)}
	}
	if len(rcc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "RetrospectiveComment.user"`)}
	}
	return nil
}

func (rcc *RetrospectiveCommentCreate) sqlSave(ctx context.Context) (*RetrospectiveComment, error) {
	if err := rcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rcc.mutation.id = &_node.ID
	rcc.mutation.done = true
	return _node, nil
}

func (rcc *RetrospectiveCommentCreate) createSpec() (*RetrospectiveComment, *sqlgraph.CreateSpec) {
	var (
		_node = &RetrospectiveComment{config: rcc.config}
		_spec = sqlgraph.NewCreateSpec(retrospectivecomment.Table, sqlgraph.NewFieldSpec(retrospectivecomment.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = rcc.conflict
	if id, ok := rcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rcc.mutation.Content(); ok {
		_spec.SetField(retrospectivecomment.FieldContent, field.TypeBytes, value)
		_node.Content = value
	}
	if nodes := rcc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospectivecomment.TenantTable,
			Columns: []string{retrospectivecomment.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rcc.mutation.RetrospectiveIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospectivecomment.RetrospectiveTable,
			Columns: []string{retrospectivecomment.RetrospectiveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospective.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RetrospectiveID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rcc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospectivecomment.UserTable,
			Columns: []string{retrospectivecomment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rcc.mutation.ReviewIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospectivecomment.ReviewTable,
			Columns: []string{retrospectivecomment.ReviewColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivereview.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RetrospectiveReviewID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rcc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   retrospectivecomment.ParentTable,
			Columns: []string{retrospectivecomment.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivecomment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentReplyID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rcc.mutation.RepliesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   retrospectivecomment.RepliesTable,
			Columns: []string{retrospectivecomment.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivecomment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RetrospectiveComment.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RetrospectiveCommentUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (rcc *RetrospectiveCommentCreate) OnConflict(opts ...sql.ConflictOption) *RetrospectiveCommentUpsertOne {
	rcc.conflict = opts
	return &RetrospectiveCommentUpsertOne{
		create: rcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RetrospectiveComment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rcc *RetrospectiveCommentCreate) OnConflictColumns(columns ...string) *RetrospectiveCommentUpsertOne {
	rcc.conflict = append(rcc.conflict, sql.ConflictColumns(columns...))
	return &RetrospectiveCommentUpsertOne{
		create: rcc,
	}
}

type (
	// RetrospectiveCommentUpsertOne is the builder for "upsert"-ing
	//  one RetrospectiveComment node.
	RetrospectiveCommentUpsertOne struct {
		create *RetrospectiveCommentCreate
	}

	// RetrospectiveCommentUpsert is the "OnConflict" setter.
	RetrospectiveCommentUpsert struct {
		*sql.UpdateSet
	}
)

// SetRetrospectiveID sets the "retrospective_id" field.
func (u *RetrospectiveCommentUpsert) SetRetrospectiveID(v uuid.UUID) *RetrospectiveCommentUpsert {
	u.Set(retrospectivecomment.FieldRetrospectiveID, v)
	return u
}

// UpdateRetrospectiveID sets the "retrospective_id" field to the value that was provided on create.
func (u *RetrospectiveCommentUpsert) UpdateRetrospectiveID() *RetrospectiveCommentUpsert {
	u.SetExcluded(retrospectivecomment.FieldRetrospectiveID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *RetrospectiveCommentUpsert) SetUserID(v uuid.UUID) *RetrospectiveCommentUpsert {
	u.Set(retrospectivecomment.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *RetrospectiveCommentUpsert) UpdateUserID() *RetrospectiveCommentUpsert {
	u.SetExcluded(retrospectivecomment.FieldUserID)
	return u
}

// SetRetrospectiveReviewID sets the "retrospective_review_id" field.
func (u *RetrospectiveCommentUpsert) SetRetrospectiveReviewID(v uuid.UUID) *RetrospectiveCommentUpsert {
	u.Set(retrospectivecomment.FieldRetrospectiveReviewID, v)
	return u
}

// UpdateRetrospectiveReviewID sets the "retrospective_review_id" field to the value that was provided on create.
func (u *RetrospectiveCommentUpsert) UpdateRetrospectiveReviewID() *RetrospectiveCommentUpsert {
	u.SetExcluded(retrospectivecomment.FieldRetrospectiveReviewID)
	return u
}

// ClearRetrospectiveReviewID clears the value of the "retrospective_review_id" field.
func (u *RetrospectiveCommentUpsert) ClearRetrospectiveReviewID() *RetrospectiveCommentUpsert {
	u.SetNull(retrospectivecomment.FieldRetrospectiveReviewID)
	return u
}

// SetParentReplyID sets the "parent_reply_id" field.
func (u *RetrospectiveCommentUpsert) SetParentReplyID(v uuid.UUID) *RetrospectiveCommentUpsert {
	u.Set(retrospectivecomment.FieldParentReplyID, v)
	return u
}

// UpdateParentReplyID sets the "parent_reply_id" field to the value that was provided on create.
func (u *RetrospectiveCommentUpsert) UpdateParentReplyID() *RetrospectiveCommentUpsert {
	u.SetExcluded(retrospectivecomment.FieldParentReplyID)
	return u
}

// ClearParentReplyID clears the value of the "parent_reply_id" field.
func (u *RetrospectiveCommentUpsert) ClearParentReplyID() *RetrospectiveCommentUpsert {
	u.SetNull(retrospectivecomment.FieldParentReplyID)
	return u
}

// SetContent sets the "content" field.
func (u *RetrospectiveCommentUpsert) SetContent(v []byte) *RetrospectiveCommentUpsert {
	u.Set(retrospectivecomment.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *RetrospectiveCommentUpsert) UpdateContent() *RetrospectiveCommentUpsert {
	u.SetExcluded(retrospectivecomment.FieldContent)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.RetrospectiveComment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(retrospectivecomment.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RetrospectiveCommentUpsertOne) UpdateNewValues() *RetrospectiveCommentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(retrospectivecomment.FieldID)
		}
		if _, exists := u.create.mutation.TenantID(); exists {
			s.SetIgnore(retrospectivecomment.FieldTenantID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RetrospectiveComment.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RetrospectiveCommentUpsertOne) Ignore() *RetrospectiveCommentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RetrospectiveCommentUpsertOne) DoNothing() *RetrospectiveCommentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RetrospectiveCommentCreate.OnConflict
// documentation for more info.
func (u *RetrospectiveCommentUpsertOne) Update(set func(*RetrospectiveCommentUpsert)) *RetrospectiveCommentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RetrospectiveCommentUpsert{UpdateSet: update})
	}))
	return u
}

// SetRetrospectiveID sets the "retrospective_id" field.
func (u *RetrospectiveCommentUpsertOne) SetRetrospectiveID(v uuid.UUID) *RetrospectiveCommentUpsertOne {
	return u.Update(func(s *RetrospectiveCommentUpsert) {
		s.SetRetrospectiveID(v)
	})
}

// UpdateRetrospectiveID sets the "retrospective_id" field to the value that was provided on create.
func (u *RetrospectiveCommentUpsertOne) UpdateRetrospectiveID() *RetrospectiveCommentUpsertOne {
	return u.Update(func(s *RetrospectiveCommentUpsert) {
		s.UpdateRetrospectiveID()
	})
}

// SetUserID sets the "user_id" field.
func (u *RetrospectiveCommentUpsertOne) SetUserID(v uuid.UUID) *RetrospectiveCommentUpsertOne {
	return u.Update(func(s *RetrospectiveCommentUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *RetrospectiveCommentUpsertOne) UpdateUserID() *RetrospectiveCommentUpsertOne {
	return u.Update(func(s *RetrospectiveCommentUpsert) {
		s.UpdateUserID()
	})
}

// SetRetrospectiveReviewID sets the "retrospective_review_id" field.
func (u *RetrospectiveCommentUpsertOne) SetRetrospectiveReviewID(v uuid.UUID) *RetrospectiveCommentUpsertOne {
	return u.Update(func(s *RetrospectiveCommentUpsert) {
		s.SetRetrospectiveReviewID(v)
	})
}

// UpdateRetrospectiveReviewID sets the "retrospective_review_id" field to the value that was provided on create.
func (u *RetrospectiveCommentUpsertOne) UpdateRetrospectiveReviewID() *RetrospectiveCommentUpsertOne {
	return u.Update(func(s *RetrospectiveCommentUpsert) {
		s.UpdateRetrospectiveReviewID()
	})
}

// ClearRetrospectiveReviewID clears the value of the "retrospective_review_id" field.
func (u *RetrospectiveCommentUpsertOne) ClearRetrospectiveReviewID() *RetrospectiveCommentUpsertOne {
	return u.Update(func(s *RetrospectiveCommentUpsert) {
		s.ClearRetrospectiveReviewID()
	})
}

// SetParentReplyID sets the "parent_reply_id" field.
func (u *RetrospectiveCommentUpsertOne) SetParentReplyID(v uuid.UUID) *RetrospectiveCommentUpsertOne {
	return u.Update(func(s *RetrospectiveCommentUpsert) {
		s.SetParentReplyID(v)
	})
}

// UpdateParentReplyID sets the "parent_reply_id" field to the value that was provided on create.
func (u *RetrospectiveCommentUpsertOne) UpdateParentReplyID() *RetrospectiveCommentUpsertOne {
	return u.Update(func(s *RetrospectiveCommentUpsert) {
		s.UpdateParentReplyID()
	})
}

// ClearParentReplyID clears the value of the "parent_reply_id" field.
func (u *RetrospectiveCommentUpsertOne) ClearParentReplyID() *RetrospectiveCommentUpsertOne {
	return u.Update(func(s *RetrospectiveCommentUpsert) {
		s.ClearParentReplyID()
	})
}

// SetContent sets the "content" field.
func (u *RetrospectiveCommentUpsertOne) SetContent(v []byte) *RetrospectiveCommentUpsertOne {
	return u.Update(func(s *RetrospectiveCommentUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *RetrospectiveCommentUpsertOne) UpdateContent() *RetrospectiveCommentUpsertOne {
	return u.Update(func(s *RetrospectiveCommentUpsert) {
		s.UpdateContent()
	})
}

// Exec executes the query.
func (u *RetrospectiveCommentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RetrospectiveCommentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RetrospectiveCommentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RetrospectiveCommentUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: RetrospectiveCommentUpsertOne.ID is not supported by MySQL driver. Use RetrospectiveCommentUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RetrospectiveCommentUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RetrospectiveCommentCreateBulk is the builder for creating many RetrospectiveComment entities in bulk.
type RetrospectiveCommentCreateBulk struct {
	config
	err      error
	builders []*RetrospectiveCommentCreate
	conflict []sql.ConflictOption
}

// Save creates the RetrospectiveComment entities in the database.
func (rccb *RetrospectiveCommentCreateBulk) Save(ctx context.Context) ([]*RetrospectiveComment, error) {
	if rccb.err != nil {
		return nil, rccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rccb.builders))
	nodes := make([]*RetrospectiveComment, len(rccb.builders))
	mutators := make([]Mutator, len(rccb.builders))
	for i := range rccb.builders {
		func(i int, root context.Context) {
			builder := rccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RetrospectiveCommentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rccb *RetrospectiveCommentCreateBulk) SaveX(ctx context.Context) []*RetrospectiveComment {
	v, err := rccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rccb *RetrospectiveCommentCreateBulk) Exec(ctx context.Context) error {
	_, err := rccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rccb *RetrospectiveCommentCreateBulk) ExecX(ctx context.Context) {
	if err := rccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RetrospectiveComment.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RetrospectiveCommentUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (rccb *RetrospectiveCommentCreateBulk) OnConflict(opts ...sql.ConflictOption) *RetrospectiveCommentUpsertBulk {
	rccb.conflict = opts
	return &RetrospectiveCommentUpsertBulk{
		create: rccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RetrospectiveComment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rccb *RetrospectiveCommentCreateBulk) OnConflictColumns(columns ...string) *RetrospectiveCommentUpsertBulk {
	rccb.conflict = append(rccb.conflict, sql.ConflictColumns(columns...))
	return &RetrospectiveCommentUpsertBulk{
		create: rccb,
	}
}

// RetrospectiveCommentUpsertBulk is the builder for "upsert"-ing
// a bulk of RetrospectiveComment nodes.
type RetrospectiveCommentUpsertBulk struct {
	create *RetrospectiveCommentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.RetrospectiveComment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(retrospectivecomment.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RetrospectiveCommentUpsertBulk) UpdateNewValues() *RetrospectiveCommentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(retrospectivecomment.FieldID)
			}
			if _, exists := b.mutation.TenantID(); exists {
				s.SetIgnore(retrospectivecomment.FieldTenantID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RetrospectiveComment.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RetrospectiveCommentUpsertBulk) Ignore() *RetrospectiveCommentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RetrospectiveCommentUpsertBulk) DoNothing() *RetrospectiveCommentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RetrospectiveCommentCreateBulk.OnConflict
// documentation for more info.
func (u *RetrospectiveCommentUpsertBulk) Update(set func(*RetrospectiveCommentUpsert)) *RetrospectiveCommentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RetrospectiveCommentUpsert{UpdateSet: update})
	}))
	return u
}

// SetRetrospectiveID sets the "retrospective_id" field.
func (u *RetrospectiveCommentUpsertBulk) SetRetrospectiveID(v uuid.UUID) *RetrospectiveCommentUpsertBulk {
	return u.Update(func(s *RetrospectiveCommentUpsert) {
		s.SetRetrospectiveID(v)
	})
}

// UpdateRetrospectiveID sets the "retrospective_id" field to the value that was provided on create.
func (u *RetrospectiveCommentUpsertBulk) UpdateRetrospectiveID() *RetrospectiveCommentUpsertBulk {
	return u.Update(func(s *RetrospectiveCommentUpsert) {
		s.UpdateRetrospectiveID()
	})
}

// SetUserID sets the "user_id" field.
func (u *RetrospectiveCommentUpsertBulk) SetUserID(v uuid.UUID) *RetrospectiveCommentUpsertBulk {
	return u.Update(func(s *RetrospectiveCommentUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *RetrospectiveCommentUpsertBulk) UpdateUserID() *RetrospectiveCommentUpsertBulk {
	return u.Update(func(s *RetrospectiveCommentUpsert) {
		s.UpdateUserID()
	})
}

// SetRetrospectiveReviewID sets the "retrospective_review_id" field.
func (u *RetrospectiveCommentUpsertBulk) SetRetrospectiveReviewID(v uuid.UUID) *RetrospectiveCommentUpsertBulk {
	return u.Update(func(s *RetrospectiveCommentUpsert) {
		s.SetRetrospectiveReviewID(v)
	})
}

// UpdateRetrospectiveReviewID sets the "retrospective_review_id" field to the value that was provided on create.
func (u *RetrospectiveCommentUpsertBulk) UpdateRetrospectiveReviewID() *RetrospectiveCommentUpsertBulk {
	return u.Update(func(s *RetrospectiveCommentUpsert) {
		s.UpdateRetrospectiveReviewID()
	})
}

// ClearRetrospectiveReviewID clears the value of the "retrospective_review_id" field.
func (u *RetrospectiveCommentUpsertBulk) ClearRetrospectiveReviewID() *RetrospectiveCommentUpsertBulk {
	return u.Update(func(s *RetrospectiveCommentUpsert) {
		s.ClearRetrospectiveReviewID()
	})
}

// SetParentReplyID sets the "parent_reply_id" field.
func (u *RetrospectiveCommentUpsertBulk) SetParentReplyID(v uuid.UUID) *RetrospectiveCommentUpsertBulk {
	return u.Update(func(s *RetrospectiveCommentUpsert) {
		s.SetParentReplyID(v)
	})
}

// UpdateParentReplyID sets the "parent_reply_id" field to the value that was provided on create.
func (u *RetrospectiveCommentUpsertBulk) UpdateParentReplyID() *RetrospectiveCommentUpsertBulk {
	return u.Update(func(s *RetrospectiveCommentUpsert) {
		s.UpdateParentReplyID()
	})
}

// ClearParentReplyID clears the value of the "parent_reply_id" field.
func (u *RetrospectiveCommentUpsertBulk) ClearParentReplyID() *RetrospectiveCommentUpsertBulk {
	return u.Update(func(s *RetrospectiveCommentUpsert) {
		s.ClearParentReplyID()
	})
}

// SetContent sets the "content" field.
func (u *RetrospectiveCommentUpsertBulk) SetContent(v []byte) *RetrospectiveCommentUpsertBulk {
	return u.Update(func(s *RetrospectiveCommentUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *RetrospectiveCommentUpsertBulk) UpdateContent() *RetrospectiveCommentUpsertBulk {
	return u.Update(func(s *RetrospectiveCommentUpsert) {
		s.UpdateContent()
	})
}

// Exec executes the query.
func (u *RetrospectiveCommentUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RetrospectiveCommentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RetrospectiveCommentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RetrospectiveCommentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
