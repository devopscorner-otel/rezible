// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/twohundreds/rezible/ent/incidentdebrief"
	"github.com/twohundreds/rezible/ent/incidentdebriefsuggestion"
	"github.com/twohundreds/rezible/ent/predicate"
)

// IncidentDebriefSuggestionUpdate is the builder for updating IncidentDebriefSuggestion entities.
type IncidentDebriefSuggestionUpdate struct {
	config
	hooks     []Hook
	mutation  *IncidentDebriefSuggestionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the IncidentDebriefSuggestionUpdate builder.
func (idsu *IncidentDebriefSuggestionUpdate) Where(ps ...predicate.IncidentDebriefSuggestion) *IncidentDebriefSuggestionUpdate {
	idsu.mutation.Where(ps...)
	return idsu
}

// SetContent sets the "content" field.
func (idsu *IncidentDebriefSuggestionUpdate) SetContent(s string) *IncidentDebriefSuggestionUpdate {
	idsu.mutation.SetContent(s)
	return idsu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (idsu *IncidentDebriefSuggestionUpdate) SetNillableContent(s *string) *IncidentDebriefSuggestionUpdate {
	if s != nil {
		idsu.SetContent(*s)
	}
	return idsu
}

// SetDebriefID sets the "debrief" edge to the IncidentDebrief entity by ID.
func (idsu *IncidentDebriefSuggestionUpdate) SetDebriefID(id uuid.UUID) *IncidentDebriefSuggestionUpdate {
	idsu.mutation.SetDebriefID(id)
	return idsu
}

// SetDebrief sets the "debrief" edge to the IncidentDebrief entity.
func (idsu *IncidentDebriefSuggestionUpdate) SetDebrief(i *IncidentDebrief) *IncidentDebriefSuggestionUpdate {
	return idsu.SetDebriefID(i.ID)
}

// Mutation returns the IncidentDebriefSuggestionMutation object of the builder.
func (idsu *IncidentDebriefSuggestionUpdate) Mutation() *IncidentDebriefSuggestionMutation {
	return idsu.mutation
}

// ClearDebrief clears the "debrief" edge to the IncidentDebrief entity.
func (idsu *IncidentDebriefSuggestionUpdate) ClearDebrief() *IncidentDebriefSuggestionUpdate {
	idsu.mutation.ClearDebrief()
	return idsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (idsu *IncidentDebriefSuggestionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, idsu.sqlSave, idsu.mutation, idsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (idsu *IncidentDebriefSuggestionUpdate) SaveX(ctx context.Context) int {
	affected, err := idsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (idsu *IncidentDebriefSuggestionUpdate) Exec(ctx context.Context) error {
	_, err := idsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (idsu *IncidentDebriefSuggestionUpdate) ExecX(ctx context.Context) {
	if err := idsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (idsu *IncidentDebriefSuggestionUpdate) check() error {
	if idsu.mutation.DebriefCleared() && len(idsu.mutation.DebriefIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IncidentDebriefSuggestion.debrief"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (idsu *IncidentDebriefSuggestionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *IncidentDebriefSuggestionUpdate {
	idsu.modifiers = append(idsu.modifiers, modifiers...)
	return idsu
}

func (idsu *IncidentDebriefSuggestionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := idsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(incidentdebriefsuggestion.Table, incidentdebriefsuggestion.Columns, sqlgraph.NewFieldSpec(incidentdebriefsuggestion.FieldID, field.TypeUUID))
	if ps := idsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := idsu.mutation.Content(); ok {
		_spec.SetField(incidentdebriefsuggestion.FieldContent, field.TypeString, value)
	}
	if idsu.mutation.DebriefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incidentdebriefsuggestion.DebriefTable,
			Columns: []string{incidentdebriefsuggestion.DebriefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentdebrief.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := idsu.mutation.DebriefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incidentdebriefsuggestion.DebriefTable,
			Columns: []string{incidentdebriefsuggestion.DebriefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentdebrief.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(idsu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, idsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{incidentdebriefsuggestion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	idsu.mutation.done = true
	return n, nil
}

// IncidentDebriefSuggestionUpdateOne is the builder for updating a single IncidentDebriefSuggestion entity.
type IncidentDebriefSuggestionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *IncidentDebriefSuggestionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetContent sets the "content" field.
func (idsuo *IncidentDebriefSuggestionUpdateOne) SetContent(s string) *IncidentDebriefSuggestionUpdateOne {
	idsuo.mutation.SetContent(s)
	return idsuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (idsuo *IncidentDebriefSuggestionUpdateOne) SetNillableContent(s *string) *IncidentDebriefSuggestionUpdateOne {
	if s != nil {
		idsuo.SetContent(*s)
	}
	return idsuo
}

// SetDebriefID sets the "debrief" edge to the IncidentDebrief entity by ID.
func (idsuo *IncidentDebriefSuggestionUpdateOne) SetDebriefID(id uuid.UUID) *IncidentDebriefSuggestionUpdateOne {
	idsuo.mutation.SetDebriefID(id)
	return idsuo
}

// SetDebrief sets the "debrief" edge to the IncidentDebrief entity.
func (idsuo *IncidentDebriefSuggestionUpdateOne) SetDebrief(i *IncidentDebrief) *IncidentDebriefSuggestionUpdateOne {
	return idsuo.SetDebriefID(i.ID)
}

// Mutation returns the IncidentDebriefSuggestionMutation object of the builder.
func (idsuo *IncidentDebriefSuggestionUpdateOne) Mutation() *IncidentDebriefSuggestionMutation {
	return idsuo.mutation
}

// ClearDebrief clears the "debrief" edge to the IncidentDebrief entity.
func (idsuo *IncidentDebriefSuggestionUpdateOne) ClearDebrief() *IncidentDebriefSuggestionUpdateOne {
	idsuo.mutation.ClearDebrief()
	return idsuo
}

// Where appends a list predicates to the IncidentDebriefSuggestionUpdate builder.
func (idsuo *IncidentDebriefSuggestionUpdateOne) Where(ps ...predicate.IncidentDebriefSuggestion) *IncidentDebriefSuggestionUpdateOne {
	idsuo.mutation.Where(ps...)
	return idsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (idsuo *IncidentDebriefSuggestionUpdateOne) Select(field string, fields ...string) *IncidentDebriefSuggestionUpdateOne {
	idsuo.fields = append([]string{field}, fields...)
	return idsuo
}

// Save executes the query and returns the updated IncidentDebriefSuggestion entity.
func (idsuo *IncidentDebriefSuggestionUpdateOne) Save(ctx context.Context) (*IncidentDebriefSuggestion, error) {
	return withHooks(ctx, idsuo.sqlSave, idsuo.mutation, idsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (idsuo *IncidentDebriefSuggestionUpdateOne) SaveX(ctx context.Context) *IncidentDebriefSuggestion {
	node, err := idsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (idsuo *IncidentDebriefSuggestionUpdateOne) Exec(ctx context.Context) error {
	_, err := idsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (idsuo *IncidentDebriefSuggestionUpdateOne) ExecX(ctx context.Context) {
	if err := idsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (idsuo *IncidentDebriefSuggestionUpdateOne) check() error {
	if idsuo.mutation.DebriefCleared() && len(idsuo.mutation.DebriefIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IncidentDebriefSuggestion.debrief"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (idsuo *IncidentDebriefSuggestionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *IncidentDebriefSuggestionUpdateOne {
	idsuo.modifiers = append(idsuo.modifiers, modifiers...)
	return idsuo
}

func (idsuo *IncidentDebriefSuggestionUpdateOne) sqlSave(ctx context.Context) (_node *IncidentDebriefSuggestion, err error) {
	if err := idsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(incidentdebriefsuggestion.Table, incidentdebriefsuggestion.Columns, sqlgraph.NewFieldSpec(incidentdebriefsuggestion.FieldID, field.TypeUUID))
	id, ok := idsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "IncidentDebriefSuggestion.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := idsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, incidentdebriefsuggestion.FieldID)
		for _, f := range fields {
			if !incidentdebriefsuggestion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != incidentdebriefsuggestion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := idsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := idsuo.mutation.Content(); ok {
		_spec.SetField(incidentdebriefsuggestion.FieldContent, field.TypeString, value)
	}
	if idsuo.mutation.DebriefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incidentdebriefsuggestion.DebriefTable,
			Columns: []string{incidentdebriefsuggestion.DebriefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentdebrief.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := idsuo.mutation.DebriefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incidentdebriefsuggestion.DebriefTable,
			Columns: []string{incidentdebriefsuggestion.DebriefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentdebrief.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(idsuo.modifiers...)
	_node = &IncidentDebriefSuggestion{config: idsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, idsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{incidentdebriefsuggestion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	idsuo.mutation.done = true
	return _node, nil
}
