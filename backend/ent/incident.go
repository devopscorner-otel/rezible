// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/incident"
	"github.com/rezible/rezible/ent/incidentseverity"
	"github.com/rezible/rezible/ent/incidenttype"
)

// Incident is the model entity for the Incident schema.
type Incident struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Private holds the value of the "private" field.
	Private bool `json:"private,omitempty"`
	// Summary holds the value of the "summary" field.
	Summary string `json:"summary,omitempty"`
	// OpenedAt holds the value of the "opened_at" field.
	OpenedAt time.Time `json:"opened_at,omitempty"`
	// ModifiedAt holds the value of the "modified_at" field.
	ModifiedAt time.Time `json:"modified_at,omitempty"`
	// ClosedAt holds the value of the "closed_at" field.
	ClosedAt time.Time `json:"closed_at,omitempty"`
	// ProviderID holds the value of the "provider_id" field.
	ProviderID string `json:"provider_id,omitempty"`
	// ChatChannelID holds the value of the "chat_channel_id" field.
	ChatChannelID string `json:"chat_channel_id,omitempty"`
	// SeverityID holds the value of the "severity_id" field.
	SeverityID uuid.UUID `json:"severity_id,omitempty"`
	// TypeID holds the value of the "type_id" field.
	TypeID uuid.UUID `json:"type_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IncidentQuery when eager-loading is set.
	Edges        IncidentEdges `json:"edges"`
	selectValues sql.SelectValues
}

// IncidentEdges holds the relations/edges for other nodes in the graph.
type IncidentEdges struct {
	// Environments holds the value of the environments edge.
	Environments []*Environment `json:"environments,omitempty"`
	// Severity holds the value of the severity edge.
	Severity *IncidentSeverity `json:"severity,omitempty"`
	// Type holds the value of the type edge.
	Type *IncidentType `json:"type,omitempty"`
	// TeamAssignments holds the value of the team_assignments edge.
	TeamAssignments []*IncidentTeamAssignment `json:"team_assignments,omitempty"`
	// RoleAssignments holds the value of the role_assignments edge.
	RoleAssignments []*IncidentRoleAssignment `json:"role_assignments,omitempty"`
	// Milestones holds the value of the milestones edge.
	Milestones []*IncidentMilestone `json:"milestones,omitempty"`
	// Events holds the value of the events edge.
	Events []*IncidentEvent `json:"events,omitempty"`
	// Retrospective holds the value of the retrospective edge.
	Retrospective []*Retrospective `json:"retrospective,omitempty"`
	// LinkedIncidents holds the value of the linked_incidents edge.
	LinkedIncidents []*Incident `json:"linked_incidents,omitempty"`
	// FieldSelections holds the value of the field_selections edge.
	FieldSelections []*IncidentFieldOption `json:"field_selections,omitempty"`
	// Tasks holds the value of the tasks edge.
	Tasks []*Task `json:"tasks,omitempty"`
	// TagAssignments holds the value of the tag_assignments edge.
	TagAssignments []*IncidentTag `json:"tag_assignments,omitempty"`
	// Debriefs holds the value of the debriefs edge.
	Debriefs []*IncidentDebrief `json:"debriefs,omitempty"`
	// ReviewSessions holds the value of the review_sessions edge.
	ReviewSessions []*MeetingSession `json:"review_sessions,omitempty"`
	// IncidentLinks holds the value of the incident_links edge.
	IncidentLinks []*IncidentLink `json:"incident_links,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [15]bool
}

// EnvironmentsOrErr returns the Environments value or an error if the edge
// was not loaded in eager-loading.
func (e IncidentEdges) EnvironmentsOrErr() ([]*Environment, error) {
	if e.loadedTypes[0] {
		return e.Environments, nil
	}
	return nil, &NotLoadedError{edge: "environments"}
}

// SeverityOrErr returns the Severity value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IncidentEdges) SeverityOrErr() (*IncidentSeverity, error) {
	if e.Severity != nil {
		return e.Severity, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: incidentseverity.Label}
	}
	return nil, &NotLoadedError{edge: "severity"}
}

// TypeOrErr returns the Type value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IncidentEdges) TypeOrErr() (*IncidentType, error) {
	if e.Type != nil {
		return e.Type, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: incidenttype.Label}
	}
	return nil, &NotLoadedError{edge: "type"}
}

// TeamAssignmentsOrErr returns the TeamAssignments value or an error if the edge
// was not loaded in eager-loading.
func (e IncidentEdges) TeamAssignmentsOrErr() ([]*IncidentTeamAssignment, error) {
	if e.loadedTypes[3] {
		return e.TeamAssignments, nil
	}
	return nil, &NotLoadedError{edge: "team_assignments"}
}

// RoleAssignmentsOrErr returns the RoleAssignments value or an error if the edge
// was not loaded in eager-loading.
func (e IncidentEdges) RoleAssignmentsOrErr() ([]*IncidentRoleAssignment, error) {
	if e.loadedTypes[4] {
		return e.RoleAssignments, nil
	}
	return nil, &NotLoadedError{edge: "role_assignments"}
}

// MilestonesOrErr returns the Milestones value or an error if the edge
// was not loaded in eager-loading.
func (e IncidentEdges) MilestonesOrErr() ([]*IncidentMilestone, error) {
	if e.loadedTypes[5] {
		return e.Milestones, nil
	}
	return nil, &NotLoadedError{edge: "milestones"}
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e IncidentEdges) EventsOrErr() ([]*IncidentEvent, error) {
	if e.loadedTypes[6] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// RetrospectiveOrErr returns the Retrospective value or an error if the edge
// was not loaded in eager-loading.
func (e IncidentEdges) RetrospectiveOrErr() ([]*Retrospective, error) {
	if e.loadedTypes[7] {
		return e.Retrospective, nil
	}
	return nil, &NotLoadedError{edge: "retrospective"}
}

// LinkedIncidentsOrErr returns the LinkedIncidents value or an error if the edge
// was not loaded in eager-loading.
func (e IncidentEdges) LinkedIncidentsOrErr() ([]*Incident, error) {
	if e.loadedTypes[8] {
		return e.LinkedIncidents, nil
	}
	return nil, &NotLoadedError{edge: "linked_incidents"}
}

// FieldSelectionsOrErr returns the FieldSelections value or an error if the edge
// was not loaded in eager-loading.
func (e IncidentEdges) FieldSelectionsOrErr() ([]*IncidentFieldOption, error) {
	if e.loadedTypes[9] {
		return e.FieldSelections, nil
	}
	return nil, &NotLoadedError{edge: "field_selections"}
}

// TasksOrErr returns the Tasks value or an error if the edge
// was not loaded in eager-loading.
func (e IncidentEdges) TasksOrErr() ([]*Task, error) {
	if e.loadedTypes[10] {
		return e.Tasks, nil
	}
	return nil, &NotLoadedError{edge: "tasks"}
}

// TagAssignmentsOrErr returns the TagAssignments value or an error if the edge
// was not loaded in eager-loading.
func (e IncidentEdges) TagAssignmentsOrErr() ([]*IncidentTag, error) {
	if e.loadedTypes[11] {
		return e.TagAssignments, nil
	}
	return nil, &NotLoadedError{edge: "tag_assignments"}
}

// DebriefsOrErr returns the Debriefs value or an error if the edge
// was not loaded in eager-loading.
func (e IncidentEdges) DebriefsOrErr() ([]*IncidentDebrief, error) {
	if e.loadedTypes[12] {
		return e.Debriefs, nil
	}
	return nil, &NotLoadedError{edge: "debriefs"}
}

// ReviewSessionsOrErr returns the ReviewSessions value or an error if the edge
// was not loaded in eager-loading.
func (e IncidentEdges) ReviewSessionsOrErr() ([]*MeetingSession, error) {
	if e.loadedTypes[13] {
		return e.ReviewSessions, nil
	}
	return nil, &NotLoadedError{edge: "review_sessions"}
}

// IncidentLinksOrErr returns the IncidentLinks value or an error if the edge
// was not loaded in eager-loading.
func (e IncidentEdges) IncidentLinksOrErr() ([]*IncidentLink, error) {
	if e.loadedTypes[14] {
		return e.IncidentLinks, nil
	}
	return nil, &NotLoadedError{edge: "incident_links"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Incident) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case incident.FieldPrivate:
			values[i] = new(sql.NullBool)
		case incident.FieldSlug, incident.FieldTitle, incident.FieldSummary, incident.FieldProviderID, incident.FieldChatChannelID:
			values[i] = new(sql.NullString)
		case incident.FieldOpenedAt, incident.FieldModifiedAt, incident.FieldClosedAt:
			values[i] = new(sql.NullTime)
		case incident.FieldID, incident.FieldSeverityID, incident.FieldTypeID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Incident fields.
func (i *Incident) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case incident.FieldID:
			if value, ok := values[j].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[j])
			} else if value != nil {
				i.ID = *value
			}
		case incident.FieldSlug:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[j])
			} else if value.Valid {
				i.Slug = value.String
			}
		case incident.FieldTitle:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[j])
			} else if value.Valid {
				i.Title = value.String
			}
		case incident.FieldPrivate:
			if value, ok := values[j].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field private", values[j])
			} else if value.Valid {
				i.Private = value.Bool
			}
		case incident.FieldSummary:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field summary", values[j])
			} else if value.Valid {
				i.Summary = value.String
			}
		case incident.FieldOpenedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field opened_at", values[j])
			} else if value.Valid {
				i.OpenedAt = value.Time
			}
		case incident.FieldModifiedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field modified_at", values[j])
			} else if value.Valid {
				i.ModifiedAt = value.Time
			}
		case incident.FieldClosedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field closed_at", values[j])
			} else if value.Valid {
				i.ClosedAt = value.Time
			}
		case incident.FieldProviderID:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_id", values[j])
			} else if value.Valid {
				i.ProviderID = value.String
			}
		case incident.FieldChatChannelID:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field chat_channel_id", values[j])
			} else if value.Valid {
				i.ChatChannelID = value.String
			}
		case incident.FieldSeverityID:
			if value, ok := values[j].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field severity_id", values[j])
			} else if value != nil {
				i.SeverityID = *value
			}
		case incident.FieldTypeID:
			if value, ok := values[j].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field type_id", values[j])
			} else if value != nil {
				i.TypeID = *value
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Incident.
// This includes values selected through modifiers, order, etc.
func (i *Incident) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// QueryEnvironments queries the "environments" edge of the Incident entity.
func (i *Incident) QueryEnvironments() *EnvironmentQuery {
	return NewIncidentClient(i.config).QueryEnvironments(i)
}

// QuerySeverity queries the "severity" edge of the Incident entity.
func (i *Incident) QuerySeverity() *IncidentSeverityQuery {
	return NewIncidentClient(i.config).QuerySeverity(i)
}

// QueryType queries the "type" edge of the Incident entity.
func (i *Incident) QueryType() *IncidentTypeQuery {
	return NewIncidentClient(i.config).QueryType(i)
}

// QueryTeamAssignments queries the "team_assignments" edge of the Incident entity.
func (i *Incident) QueryTeamAssignments() *IncidentTeamAssignmentQuery {
	return NewIncidentClient(i.config).QueryTeamAssignments(i)
}

// QueryRoleAssignments queries the "role_assignments" edge of the Incident entity.
func (i *Incident) QueryRoleAssignments() *IncidentRoleAssignmentQuery {
	return NewIncidentClient(i.config).QueryRoleAssignments(i)
}

// QueryMilestones queries the "milestones" edge of the Incident entity.
func (i *Incident) QueryMilestones() *IncidentMilestoneQuery {
	return NewIncidentClient(i.config).QueryMilestones(i)
}

// QueryEvents queries the "events" edge of the Incident entity.
func (i *Incident) QueryEvents() *IncidentEventQuery {
	return NewIncidentClient(i.config).QueryEvents(i)
}

// QueryRetrospective queries the "retrospective" edge of the Incident entity.
func (i *Incident) QueryRetrospective() *RetrospectiveQuery {
	return NewIncidentClient(i.config).QueryRetrospective(i)
}

// QueryLinkedIncidents queries the "linked_incidents" edge of the Incident entity.
func (i *Incident) QueryLinkedIncidents() *IncidentQuery {
	return NewIncidentClient(i.config).QueryLinkedIncidents(i)
}

// QueryFieldSelections queries the "field_selections" edge of the Incident entity.
func (i *Incident) QueryFieldSelections() *IncidentFieldOptionQuery {
	return NewIncidentClient(i.config).QueryFieldSelections(i)
}

// QueryTasks queries the "tasks" edge of the Incident entity.
func (i *Incident) QueryTasks() *TaskQuery {
	return NewIncidentClient(i.config).QueryTasks(i)
}

// QueryTagAssignments queries the "tag_assignments" edge of the Incident entity.
func (i *Incident) QueryTagAssignments() *IncidentTagQuery {
	return NewIncidentClient(i.config).QueryTagAssignments(i)
}

// QueryDebriefs queries the "debriefs" edge of the Incident entity.
func (i *Incident) QueryDebriefs() *IncidentDebriefQuery {
	return NewIncidentClient(i.config).QueryDebriefs(i)
}

// QueryReviewSessions queries the "review_sessions" edge of the Incident entity.
func (i *Incident) QueryReviewSessions() *MeetingSessionQuery {
	return NewIncidentClient(i.config).QueryReviewSessions(i)
}

// QueryIncidentLinks queries the "incident_links" edge of the Incident entity.
func (i *Incident) QueryIncidentLinks() *IncidentLinkQuery {
	return NewIncidentClient(i.config).QueryIncidentLinks(i)
}

// Update returns a builder for updating this Incident.
// Note that you need to call Incident.Unwrap() before calling this method if this Incident
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Incident) Update() *IncidentUpdateOne {
	return NewIncidentClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Incident entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Incident) Unwrap() *Incident {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Incident is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Incident) String() string {
	var builder strings.Builder
	builder.WriteString("Incident(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("slug=")
	builder.WriteString(i.Slug)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(i.Title)
	builder.WriteString(", ")
	builder.WriteString("private=")
	builder.WriteString(fmt.Sprintf("%v", i.Private))
	builder.WriteString(", ")
	builder.WriteString("summary=")
	builder.WriteString(i.Summary)
	builder.WriteString(", ")
	builder.WriteString("opened_at=")
	builder.WriteString(i.OpenedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("modified_at=")
	builder.WriteString(i.ModifiedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("closed_at=")
	builder.WriteString(i.ClosedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("provider_id=")
	builder.WriteString(i.ProviderID)
	builder.WriteString(", ")
	builder.WriteString("chat_channel_id=")
	builder.WriteString(i.ChatChannelID)
	builder.WriteString(", ")
	builder.WriteString("severity_id=")
	builder.WriteString(fmt.Sprintf("%v", i.SeverityID))
	builder.WriteString(", ")
	builder.WriteString("type_id=")
	builder.WriteString(fmt.Sprintf("%v", i.TypeID))
	builder.WriteByte(')')
	return builder.String()
}

// Incidents is a parsable slice of Incident.
type Incidents []*Incident
