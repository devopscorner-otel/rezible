// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/twohundreds/rezible/ent/functionality"
	"github.com/twohundreds/rezible/ent/incident"
	"github.com/twohundreds/rezible/ent/incidentlink"
	"github.com/twohundreds/rezible/ent/incidentresourceimpact"
	"github.com/twohundreds/rezible/ent/predicate"
	"github.com/twohundreds/rezible/ent/service"
)

// IncidentResourceImpactQuery is the builder for querying IncidentResourceImpact entities.
type IncidentResourceImpactQuery struct {
	config
	ctx                    *QueryContext
	order                  []incidentresourceimpact.OrderOption
	inters                 []Interceptor
	predicates             []predicate.IncidentResourceImpact
	withIncident           *IncidentQuery
	withService            *ServiceQuery
	withFunctionality      *FunctionalityQuery
	withResultingIncidents *IncidentLinkQuery
	modifiers              []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the IncidentResourceImpactQuery builder.
func (iriq *IncidentResourceImpactQuery) Where(ps ...predicate.IncidentResourceImpact) *IncidentResourceImpactQuery {
	iriq.predicates = append(iriq.predicates, ps...)
	return iriq
}

// Limit the number of records to be returned by this query.
func (iriq *IncidentResourceImpactQuery) Limit(limit int) *IncidentResourceImpactQuery {
	iriq.ctx.Limit = &limit
	return iriq
}

// Offset to start from.
func (iriq *IncidentResourceImpactQuery) Offset(offset int) *IncidentResourceImpactQuery {
	iriq.ctx.Offset = &offset
	return iriq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (iriq *IncidentResourceImpactQuery) Unique(unique bool) *IncidentResourceImpactQuery {
	iriq.ctx.Unique = &unique
	return iriq
}

// Order specifies how the records should be ordered.
func (iriq *IncidentResourceImpactQuery) Order(o ...incidentresourceimpact.OrderOption) *IncidentResourceImpactQuery {
	iriq.order = append(iriq.order, o...)
	return iriq
}

// QueryIncident chains the current query on the "incident" edge.
func (iriq *IncidentResourceImpactQuery) QueryIncident() *IncidentQuery {
	query := (&IncidentClient{config: iriq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iriq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iriq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(incidentresourceimpact.Table, incidentresourceimpact.FieldID, selector),
			sqlgraph.To(incident.Table, incident.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, incidentresourceimpact.IncidentTable, incidentresourceimpact.IncidentColumn),
		)
		fromU = sqlgraph.SetNeighbors(iriq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryService chains the current query on the "service" edge.
func (iriq *IncidentResourceImpactQuery) QueryService() *ServiceQuery {
	query := (&ServiceClient{config: iriq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iriq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iriq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(incidentresourceimpact.Table, incidentresourceimpact.FieldID, selector),
			sqlgraph.To(service.Table, service.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, incidentresourceimpact.ServiceTable, incidentresourceimpact.ServiceColumn),
		)
		fromU = sqlgraph.SetNeighbors(iriq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFunctionality chains the current query on the "functionality" edge.
func (iriq *IncidentResourceImpactQuery) QueryFunctionality() *FunctionalityQuery {
	query := (&FunctionalityClient{config: iriq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iriq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iriq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(incidentresourceimpact.Table, incidentresourceimpact.FieldID, selector),
			sqlgraph.To(functionality.Table, functionality.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, incidentresourceimpact.FunctionalityTable, incidentresourceimpact.FunctionalityColumn),
		)
		fromU = sqlgraph.SetNeighbors(iriq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryResultingIncidents chains the current query on the "resulting_incidents" edge.
func (iriq *IncidentResourceImpactQuery) QueryResultingIncidents() *IncidentLinkQuery {
	query := (&IncidentLinkClient{config: iriq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iriq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iriq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(incidentresourceimpact.Table, incidentresourceimpact.FieldID, selector),
			sqlgraph.To(incidentlink.Table, incidentlink.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, incidentresourceimpact.ResultingIncidentsTable, incidentresourceimpact.ResultingIncidentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(iriq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first IncidentResourceImpact entity from the query.
// Returns a *NotFoundError when no IncidentResourceImpact was found.
func (iriq *IncidentResourceImpactQuery) First(ctx context.Context) (*IncidentResourceImpact, error) {
	nodes, err := iriq.Limit(1).All(setContextOp(ctx, iriq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{incidentresourceimpact.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (iriq *IncidentResourceImpactQuery) FirstX(ctx context.Context) *IncidentResourceImpact {
	node, err := iriq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first IncidentResourceImpact ID from the query.
// Returns a *NotFoundError when no IncidentResourceImpact ID was found.
func (iriq *IncidentResourceImpactQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = iriq.Limit(1).IDs(setContextOp(ctx, iriq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{incidentresourceimpact.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (iriq *IncidentResourceImpactQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := iriq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single IncidentResourceImpact entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one IncidentResourceImpact entity is found.
// Returns a *NotFoundError when no IncidentResourceImpact entities are found.
func (iriq *IncidentResourceImpactQuery) Only(ctx context.Context) (*IncidentResourceImpact, error) {
	nodes, err := iriq.Limit(2).All(setContextOp(ctx, iriq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{incidentresourceimpact.Label}
	default:
		return nil, &NotSingularError{incidentresourceimpact.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (iriq *IncidentResourceImpactQuery) OnlyX(ctx context.Context) *IncidentResourceImpact {
	node, err := iriq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only IncidentResourceImpact ID in the query.
// Returns a *NotSingularError when more than one IncidentResourceImpact ID is found.
// Returns a *NotFoundError when no entities are found.
func (iriq *IncidentResourceImpactQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = iriq.Limit(2).IDs(setContextOp(ctx, iriq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{incidentresourceimpact.Label}
	default:
		err = &NotSingularError{incidentresourceimpact.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (iriq *IncidentResourceImpactQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := iriq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of IncidentResourceImpacts.
func (iriq *IncidentResourceImpactQuery) All(ctx context.Context) ([]*IncidentResourceImpact, error) {
	ctx = setContextOp(ctx, iriq.ctx, ent.OpQueryAll)
	if err := iriq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*IncidentResourceImpact, *IncidentResourceImpactQuery]()
	return withInterceptors[[]*IncidentResourceImpact](ctx, iriq, qr, iriq.inters)
}

// AllX is like All, but panics if an error occurs.
func (iriq *IncidentResourceImpactQuery) AllX(ctx context.Context) []*IncidentResourceImpact {
	nodes, err := iriq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of IncidentResourceImpact IDs.
func (iriq *IncidentResourceImpactQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if iriq.ctx.Unique == nil && iriq.path != nil {
		iriq.Unique(true)
	}
	ctx = setContextOp(ctx, iriq.ctx, ent.OpQueryIDs)
	if err = iriq.Select(incidentresourceimpact.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (iriq *IncidentResourceImpactQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := iriq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (iriq *IncidentResourceImpactQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, iriq.ctx, ent.OpQueryCount)
	if err := iriq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, iriq, querierCount[*IncidentResourceImpactQuery](), iriq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (iriq *IncidentResourceImpactQuery) CountX(ctx context.Context) int {
	count, err := iriq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (iriq *IncidentResourceImpactQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, iriq.ctx, ent.OpQueryExist)
	switch _, err := iriq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (iriq *IncidentResourceImpactQuery) ExistX(ctx context.Context) bool {
	exist, err := iriq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the IncidentResourceImpactQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (iriq *IncidentResourceImpactQuery) Clone() *IncidentResourceImpactQuery {
	if iriq == nil {
		return nil
	}
	return &IncidentResourceImpactQuery{
		config:                 iriq.config,
		ctx:                    iriq.ctx.Clone(),
		order:                  append([]incidentresourceimpact.OrderOption{}, iriq.order...),
		inters:                 append([]Interceptor{}, iriq.inters...),
		predicates:             append([]predicate.IncidentResourceImpact{}, iriq.predicates...),
		withIncident:           iriq.withIncident.Clone(),
		withService:            iriq.withService.Clone(),
		withFunctionality:      iriq.withFunctionality.Clone(),
		withResultingIncidents: iriq.withResultingIncidents.Clone(),
		// clone intermediate query.
		sql:       iriq.sql.Clone(),
		path:      iriq.path,
		modifiers: append([]func(*sql.Selector){}, iriq.modifiers...),
	}
}

// WithIncident tells the query-builder to eager-load the nodes that are connected to
// the "incident" edge. The optional arguments are used to configure the query builder of the edge.
func (iriq *IncidentResourceImpactQuery) WithIncident(opts ...func(*IncidentQuery)) *IncidentResourceImpactQuery {
	query := (&IncidentClient{config: iriq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iriq.withIncident = query
	return iriq
}

// WithService tells the query-builder to eager-load the nodes that are connected to
// the "service" edge. The optional arguments are used to configure the query builder of the edge.
func (iriq *IncidentResourceImpactQuery) WithService(opts ...func(*ServiceQuery)) *IncidentResourceImpactQuery {
	query := (&ServiceClient{config: iriq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iriq.withService = query
	return iriq
}

// WithFunctionality tells the query-builder to eager-load the nodes that are connected to
// the "functionality" edge. The optional arguments are used to configure the query builder of the edge.
func (iriq *IncidentResourceImpactQuery) WithFunctionality(opts ...func(*FunctionalityQuery)) *IncidentResourceImpactQuery {
	query := (&FunctionalityClient{config: iriq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iriq.withFunctionality = query
	return iriq
}

// WithResultingIncidents tells the query-builder to eager-load the nodes that are connected to
// the "resulting_incidents" edge. The optional arguments are used to configure the query builder of the edge.
func (iriq *IncidentResourceImpactQuery) WithResultingIncidents(opts ...func(*IncidentLinkQuery)) *IncidentResourceImpactQuery {
	query := (&IncidentLinkClient{config: iriq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iriq.withResultingIncidents = query
	return iriq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		IncidentID uuid.UUID `json:"incident_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.IncidentResourceImpact.Query().
//		GroupBy(incidentresourceimpact.FieldIncidentID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (iriq *IncidentResourceImpactQuery) GroupBy(field string, fields ...string) *IncidentResourceImpactGroupBy {
	iriq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &IncidentResourceImpactGroupBy{build: iriq}
	grbuild.flds = &iriq.ctx.Fields
	grbuild.label = incidentresourceimpact.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		IncidentID uuid.UUID `json:"incident_id,omitempty"`
//	}
//
//	client.IncidentResourceImpact.Query().
//		Select(incidentresourceimpact.FieldIncidentID).
//		Scan(ctx, &v)
func (iriq *IncidentResourceImpactQuery) Select(fields ...string) *IncidentResourceImpactSelect {
	iriq.ctx.Fields = append(iriq.ctx.Fields, fields...)
	sbuild := &IncidentResourceImpactSelect{IncidentResourceImpactQuery: iriq}
	sbuild.label = incidentresourceimpact.Label
	sbuild.flds, sbuild.scan = &iriq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a IncidentResourceImpactSelect configured with the given aggregations.
func (iriq *IncidentResourceImpactQuery) Aggregate(fns ...AggregateFunc) *IncidentResourceImpactSelect {
	return iriq.Select().Aggregate(fns...)
}

func (iriq *IncidentResourceImpactQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range iriq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, iriq); err != nil {
				return err
			}
		}
	}
	for _, f := range iriq.ctx.Fields {
		if !incidentresourceimpact.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if iriq.path != nil {
		prev, err := iriq.path(ctx)
		if err != nil {
			return err
		}
		iriq.sql = prev
	}
	return nil
}

func (iriq *IncidentResourceImpactQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*IncidentResourceImpact, error) {
	var (
		nodes       = []*IncidentResourceImpact{}
		_spec       = iriq.querySpec()
		loadedTypes = [4]bool{
			iriq.withIncident != nil,
			iriq.withService != nil,
			iriq.withFunctionality != nil,
			iriq.withResultingIncidents != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*IncidentResourceImpact).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &IncidentResourceImpact{config: iriq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(iriq.modifiers) > 0 {
		_spec.Modifiers = iriq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, iriq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := iriq.withIncident; query != nil {
		if err := iriq.loadIncident(ctx, query, nodes, nil,
			func(n *IncidentResourceImpact, e *Incident) { n.Edges.Incident = e }); err != nil {
			return nil, err
		}
	}
	if query := iriq.withService; query != nil {
		if err := iriq.loadService(ctx, query, nodes, nil,
			func(n *IncidentResourceImpact, e *Service) { n.Edges.Service = e }); err != nil {
			return nil, err
		}
	}
	if query := iriq.withFunctionality; query != nil {
		if err := iriq.loadFunctionality(ctx, query, nodes, nil,
			func(n *IncidentResourceImpact, e *Functionality) { n.Edges.Functionality = e }); err != nil {
			return nil, err
		}
	}
	if query := iriq.withResultingIncidents; query != nil {
		if err := iriq.loadResultingIncidents(ctx, query, nodes,
			func(n *IncidentResourceImpact) { n.Edges.ResultingIncidents = []*IncidentLink{} },
			func(n *IncidentResourceImpact, e *IncidentLink) {
				n.Edges.ResultingIncidents = append(n.Edges.ResultingIncidents, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (iriq *IncidentResourceImpactQuery) loadIncident(ctx context.Context, query *IncidentQuery, nodes []*IncidentResourceImpact, init func(*IncidentResourceImpact), assign func(*IncidentResourceImpact, *Incident)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*IncidentResourceImpact)
	for i := range nodes {
		fk := nodes[i].IncidentID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(incident.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "incident_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (iriq *IncidentResourceImpactQuery) loadService(ctx context.Context, query *ServiceQuery, nodes []*IncidentResourceImpact, init func(*IncidentResourceImpact), assign func(*IncidentResourceImpact, *Service)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*IncidentResourceImpact)
	for i := range nodes {
		fk := nodes[i].ServiceID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(service.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "service_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (iriq *IncidentResourceImpactQuery) loadFunctionality(ctx context.Context, query *FunctionalityQuery, nodes []*IncidentResourceImpact, init func(*IncidentResourceImpact), assign func(*IncidentResourceImpact, *Functionality)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*IncidentResourceImpact)
	for i := range nodes {
		fk := nodes[i].FunctionalityID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(functionality.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "functionality_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (iriq *IncidentResourceImpactQuery) loadResultingIncidents(ctx context.Context, query *IncidentLinkQuery, nodes []*IncidentResourceImpact, init func(*IncidentResourceImpact), assign func(*IncidentResourceImpact, *IncidentLink)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*IncidentResourceImpact)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.IncidentLink(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(incidentresourceimpact.ResultingIncidentsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.incident_link_resource_impact
		if fk == nil {
			return fmt.Errorf(`foreign-key "incident_link_resource_impact" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "incident_link_resource_impact" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (iriq *IncidentResourceImpactQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := iriq.querySpec()
	if len(iriq.modifiers) > 0 {
		_spec.Modifiers = iriq.modifiers
	}
	_spec.Node.Columns = iriq.ctx.Fields
	if len(iriq.ctx.Fields) > 0 {
		_spec.Unique = iriq.ctx.Unique != nil && *iriq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, iriq.driver, _spec)
}

func (iriq *IncidentResourceImpactQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(incidentresourceimpact.Table, incidentresourceimpact.Columns, sqlgraph.NewFieldSpec(incidentresourceimpact.FieldID, field.TypeUUID))
	_spec.From = iriq.sql
	if unique := iriq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if iriq.path != nil {
		_spec.Unique = true
	}
	if fields := iriq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, incidentresourceimpact.FieldID)
		for i := range fields {
			if fields[i] != incidentresourceimpact.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if iriq.withIncident != nil {
			_spec.Node.AddColumnOnce(incidentresourceimpact.FieldIncidentID)
		}
		if iriq.withService != nil {
			_spec.Node.AddColumnOnce(incidentresourceimpact.FieldServiceID)
		}
		if iriq.withFunctionality != nil {
			_spec.Node.AddColumnOnce(incidentresourceimpact.FieldFunctionalityID)
		}
	}
	if ps := iriq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := iriq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := iriq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := iriq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (iriq *IncidentResourceImpactQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(iriq.driver.Dialect())
	t1 := builder.Table(incidentresourceimpact.Table)
	columns := iriq.ctx.Fields
	if len(columns) == 0 {
		columns = incidentresourceimpact.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if iriq.sql != nil {
		selector = iriq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if iriq.ctx.Unique != nil && *iriq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range iriq.modifiers {
		m(selector)
	}
	for _, p := range iriq.predicates {
		p(selector)
	}
	for _, p := range iriq.order {
		p(selector)
	}
	if offset := iriq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := iriq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (iriq *IncidentResourceImpactQuery) Modify(modifiers ...func(s *sql.Selector)) *IncidentResourceImpactSelect {
	iriq.modifiers = append(iriq.modifiers, modifiers...)
	return iriq.Select()
}

// IncidentResourceImpactGroupBy is the group-by builder for IncidentResourceImpact entities.
type IncidentResourceImpactGroupBy struct {
	selector
	build *IncidentResourceImpactQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (irigb *IncidentResourceImpactGroupBy) Aggregate(fns ...AggregateFunc) *IncidentResourceImpactGroupBy {
	irigb.fns = append(irigb.fns, fns...)
	return irigb
}

// Scan applies the selector query and scans the result into the given value.
func (irigb *IncidentResourceImpactGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, irigb.build.ctx, ent.OpQueryGroupBy)
	if err := irigb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*IncidentResourceImpactQuery, *IncidentResourceImpactGroupBy](ctx, irigb.build, irigb, irigb.build.inters, v)
}

func (irigb *IncidentResourceImpactGroupBy) sqlScan(ctx context.Context, root *IncidentResourceImpactQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(irigb.fns))
	for _, fn := range irigb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*irigb.flds)+len(irigb.fns))
		for _, f := range *irigb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*irigb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := irigb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// IncidentResourceImpactSelect is the builder for selecting fields of IncidentResourceImpact entities.
type IncidentResourceImpactSelect struct {
	*IncidentResourceImpactQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (iris *IncidentResourceImpactSelect) Aggregate(fns ...AggregateFunc) *IncidentResourceImpactSelect {
	iris.fns = append(iris.fns, fns...)
	return iris
}

// Scan applies the selector query and scans the result into the given value.
func (iris *IncidentResourceImpactSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, iris.ctx, ent.OpQuerySelect)
	if err := iris.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*IncidentResourceImpactQuery, *IncidentResourceImpactSelect](ctx, iris.IncidentResourceImpactQuery, iris, iris.inters, v)
}

func (iris *IncidentResourceImpactSelect) sqlScan(ctx context.Context, root *IncidentResourceImpactQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(iris.fns))
	for _, fn := range iris.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*iris.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := iris.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (iris *IncidentResourceImpactSelect) Modify(modifiers ...func(s *sql.Selector)) *IncidentResourceImpactSelect {
	iris.modifiers = append(iris.modifiers, modifiers...)
	return iris
}
