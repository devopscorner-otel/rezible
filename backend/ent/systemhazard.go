// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/systemhazard"
)

// SystemHazard is the model entity for the SystemHazard schema.
type SystemHazard struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SystemHazardQuery when eager-loading is set.
	Edges        SystemHazardEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SystemHazardEdges holds the relations/edges for other nodes in the graph.
type SystemHazardEdges struct {
	// Components holds the value of the components edge.
	Components []*SystemComponent `json:"components,omitempty"`
	// Constraints holds the value of the constraints edge.
	Constraints []*SystemComponentConstraint `json:"constraints,omitempty"`
	// Relationships holds the value of the relationships edge.
	Relationships []*SystemComponentRelationship `json:"relationships,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ComponentsOrErr returns the Components value or an error if the edge
// was not loaded in eager-loading.
func (e SystemHazardEdges) ComponentsOrErr() ([]*SystemComponent, error) {
	if e.loadedTypes[0] {
		return e.Components, nil
	}
	return nil, &NotLoadedError{edge: "components"}
}

// ConstraintsOrErr returns the Constraints value or an error if the edge
// was not loaded in eager-loading.
func (e SystemHazardEdges) ConstraintsOrErr() ([]*SystemComponentConstraint, error) {
	if e.loadedTypes[1] {
		return e.Constraints, nil
	}
	return nil, &NotLoadedError{edge: "constraints"}
}

// RelationshipsOrErr returns the Relationships value or an error if the edge
// was not loaded in eager-loading.
func (e SystemHazardEdges) RelationshipsOrErr() ([]*SystemComponentRelationship, error) {
	if e.loadedTypes[2] {
		return e.Relationships, nil
	}
	return nil, &NotLoadedError{edge: "relationships"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SystemHazard) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case systemhazard.FieldName, systemhazard.FieldDescription:
			values[i] = new(sql.NullString)
		case systemhazard.FieldCreatedAt, systemhazard.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case systemhazard.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SystemHazard fields.
func (sh *SystemHazard) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case systemhazard.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				sh.ID = *value
			}
		case systemhazard.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				sh.Name = value.String
			}
		case systemhazard.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				sh.Description = value.String
			}
		case systemhazard.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sh.CreatedAt = value.Time
			}
		case systemhazard.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sh.UpdatedAt = value.Time
			}
		default:
			sh.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SystemHazard.
// This includes values selected through modifiers, order, etc.
func (sh *SystemHazard) Value(name string) (ent.Value, error) {
	return sh.selectValues.Get(name)
}

// QueryComponents queries the "components" edge of the SystemHazard entity.
func (sh *SystemHazard) QueryComponents() *SystemComponentQuery {
	return NewSystemHazardClient(sh.config).QueryComponents(sh)
}

// QueryConstraints queries the "constraints" edge of the SystemHazard entity.
func (sh *SystemHazard) QueryConstraints() *SystemComponentConstraintQuery {
	return NewSystemHazardClient(sh.config).QueryConstraints(sh)
}

// QueryRelationships queries the "relationships" edge of the SystemHazard entity.
func (sh *SystemHazard) QueryRelationships() *SystemComponentRelationshipQuery {
	return NewSystemHazardClient(sh.config).QueryRelationships(sh)
}

// Update returns a builder for updating this SystemHazard.
// Note that you need to call SystemHazard.Unwrap() before calling this method if this SystemHazard
// was returned from a transaction, and the transaction was committed or rolled back.
func (sh *SystemHazard) Update() *SystemHazardUpdateOne {
	return NewSystemHazardClient(sh.config).UpdateOne(sh)
}

// Unwrap unwraps the SystemHazard entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sh *SystemHazard) Unwrap() *SystemHazard {
	_tx, ok := sh.config.driver.(*txDriver)
	if !ok {
		panic("ent: SystemHazard is not a transactional entity")
	}
	sh.config.driver = _tx.drv
	return sh
}

// String implements the fmt.Stringer.
func (sh *SystemHazard) String() string {
	var builder strings.Builder
	builder.WriteString("SystemHazard(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sh.ID))
	builder.WriteString("name=")
	builder.WriteString(sh.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(sh.Description)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sh.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sh.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SystemHazards is a parsable slice of SystemHazard.
type SystemHazards []*SystemHazard
