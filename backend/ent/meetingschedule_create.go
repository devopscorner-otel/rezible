// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/meetingschedule"
	"github.com/rezible/rezible/ent/meetingsession"
	"github.com/rezible/rezible/ent/team"
)

// MeetingScheduleCreate is the builder for creating a MeetingSchedule entity.
type MeetingScheduleCreate struct {
	config
	mutation *MeetingScheduleMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetArchiveTime sets the "archive_time" field.
func (msc *MeetingScheduleCreate) SetArchiveTime(t time.Time) *MeetingScheduleCreate {
	msc.mutation.SetArchiveTime(t)
	return msc
}

// SetNillableArchiveTime sets the "archive_time" field if the given value is not nil.
func (msc *MeetingScheduleCreate) SetNillableArchiveTime(t *time.Time) *MeetingScheduleCreate {
	if t != nil {
		msc.SetArchiveTime(*t)
	}
	return msc
}

// SetName sets the "name" field.
func (msc *MeetingScheduleCreate) SetName(s string) *MeetingScheduleCreate {
	msc.mutation.SetName(s)
	return msc
}

// SetDescription sets the "description" field.
func (msc *MeetingScheduleCreate) SetDescription(s string) *MeetingScheduleCreate {
	msc.mutation.SetDescription(s)
	return msc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (msc *MeetingScheduleCreate) SetNillableDescription(s *string) *MeetingScheduleCreate {
	if s != nil {
		msc.SetDescription(*s)
	}
	return msc
}

// SetBeginMinute sets the "begin_minute" field.
func (msc *MeetingScheduleCreate) SetBeginMinute(i int) *MeetingScheduleCreate {
	msc.mutation.SetBeginMinute(i)
	return msc
}

// SetDurationMinutes sets the "duration_minutes" field.
func (msc *MeetingScheduleCreate) SetDurationMinutes(i int) *MeetingScheduleCreate {
	msc.mutation.SetDurationMinutes(i)
	return msc
}

// SetStartDate sets the "start_date" field.
func (msc *MeetingScheduleCreate) SetStartDate(t time.Time) *MeetingScheduleCreate {
	msc.mutation.SetStartDate(t)
	return msc
}

// SetRepeats sets the "repeats" field.
func (msc *MeetingScheduleCreate) SetRepeats(m meetingschedule.Repeats) *MeetingScheduleCreate {
	msc.mutation.SetRepeats(m)
	return msc
}

// SetRepetitionStep sets the "repetition_step" field.
func (msc *MeetingScheduleCreate) SetRepetitionStep(i int) *MeetingScheduleCreate {
	msc.mutation.SetRepetitionStep(i)
	return msc
}

// SetNillableRepetitionStep sets the "repetition_step" field if the given value is not nil.
func (msc *MeetingScheduleCreate) SetNillableRepetitionStep(i *int) *MeetingScheduleCreate {
	if i != nil {
		msc.SetRepetitionStep(*i)
	}
	return msc
}

// SetWeekDays sets the "week_days" field.
func (msc *MeetingScheduleCreate) SetWeekDays(s []string) *MeetingScheduleCreate {
	msc.mutation.SetWeekDays(s)
	return msc
}

// SetMonthlyOn sets the "monthly_on" field.
func (msc *MeetingScheduleCreate) SetMonthlyOn(mo meetingschedule.MonthlyOn) *MeetingScheduleCreate {
	msc.mutation.SetMonthlyOn(mo)
	return msc
}

// SetNillableMonthlyOn sets the "monthly_on" field if the given value is not nil.
func (msc *MeetingScheduleCreate) SetNillableMonthlyOn(mo *meetingschedule.MonthlyOn) *MeetingScheduleCreate {
	if mo != nil {
		msc.SetMonthlyOn(*mo)
	}
	return msc
}

// SetUntilDate sets the "until_date" field.
func (msc *MeetingScheduleCreate) SetUntilDate(t time.Time) *MeetingScheduleCreate {
	msc.mutation.SetUntilDate(t)
	return msc
}

// SetNillableUntilDate sets the "until_date" field if the given value is not nil.
func (msc *MeetingScheduleCreate) SetNillableUntilDate(t *time.Time) *MeetingScheduleCreate {
	if t != nil {
		msc.SetUntilDate(*t)
	}
	return msc
}

// SetNumRepetitions sets the "num_repetitions" field.
func (msc *MeetingScheduleCreate) SetNumRepetitions(i int) *MeetingScheduleCreate {
	msc.mutation.SetNumRepetitions(i)
	return msc
}

// SetNillableNumRepetitions sets the "num_repetitions" field if the given value is not nil.
func (msc *MeetingScheduleCreate) SetNillableNumRepetitions(i *int) *MeetingScheduleCreate {
	if i != nil {
		msc.SetNumRepetitions(*i)
	}
	return msc
}

// SetID sets the "id" field.
func (msc *MeetingScheduleCreate) SetID(u uuid.UUID) *MeetingScheduleCreate {
	msc.mutation.SetID(u)
	return msc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (msc *MeetingScheduleCreate) SetNillableID(u *uuid.UUID) *MeetingScheduleCreate {
	if u != nil {
		msc.SetID(*u)
	}
	return msc
}

// AddSessionIDs adds the "sessions" edge to the MeetingSession entity by IDs.
func (msc *MeetingScheduleCreate) AddSessionIDs(ids ...uuid.UUID) *MeetingScheduleCreate {
	msc.mutation.AddSessionIDs(ids...)
	return msc
}

// AddSessions adds the "sessions" edges to the MeetingSession entity.
func (msc *MeetingScheduleCreate) AddSessions(m ...*MeetingSession) *MeetingScheduleCreate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return msc.AddSessionIDs(ids...)
}

// AddOwningTeamIDs adds the "owning_team" edge to the Team entity by IDs.
func (msc *MeetingScheduleCreate) AddOwningTeamIDs(ids ...uuid.UUID) *MeetingScheduleCreate {
	msc.mutation.AddOwningTeamIDs(ids...)
	return msc
}

// AddOwningTeam adds the "owning_team" edges to the Team entity.
func (msc *MeetingScheduleCreate) AddOwningTeam(t ...*Team) *MeetingScheduleCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return msc.AddOwningTeamIDs(ids...)
}

// Mutation returns the MeetingScheduleMutation object of the builder.
func (msc *MeetingScheduleCreate) Mutation() *MeetingScheduleMutation {
	return msc.mutation
}

// Save creates the MeetingSchedule in the database.
func (msc *MeetingScheduleCreate) Save(ctx context.Context) (*MeetingSchedule, error) {
	if err := msc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, msc.sqlSave, msc.mutation, msc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (msc *MeetingScheduleCreate) SaveX(ctx context.Context) *MeetingSchedule {
	v, err := msc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (msc *MeetingScheduleCreate) Exec(ctx context.Context) error {
	_, err := msc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msc *MeetingScheduleCreate) ExecX(ctx context.Context) {
	if err := msc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (msc *MeetingScheduleCreate) defaults() error {
	if _, ok := msc.mutation.RepetitionStep(); !ok {
		v := meetingschedule.DefaultRepetitionStep
		msc.mutation.SetRepetitionStep(v)
	}
	if _, ok := msc.mutation.ID(); !ok {
		if meetingschedule.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized meetingschedule.DefaultID (forgotten import ent/runtime?)")
		}
		v := meetingschedule.DefaultID()
		msc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (msc *MeetingScheduleCreate) check() error {
	if _, ok := msc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "MeetingSchedule.name"`)}
	}
	if _, ok := msc.mutation.BeginMinute(); !ok {
		return &ValidationError{Name: "begin_minute", err: errors.New(`ent: missing required field "MeetingSchedule.begin_minute"`)}
	}
	if _, ok := msc.mutation.DurationMinutes(); !ok {
		return &ValidationError{Name: "duration_minutes", err: errors.New(`ent: missing required field "MeetingSchedule.duration_minutes"`)}
	}
	if _, ok := msc.mutation.StartDate(); !ok {
		return &ValidationError{Name: "start_date", err: errors.New(`ent: missing required field "MeetingSchedule.start_date"`)}
	}
	if _, ok := msc.mutation.Repeats(); !ok {
		return &ValidationError{Name: "repeats", err: errors.New(`ent: missing required field "MeetingSchedule.repeats"`)}
	}
	if v, ok := msc.mutation.Repeats(); ok {
		if err := meetingschedule.RepeatsValidator(v); err != nil {
			return &ValidationError{Name: "repeats", err: fmt.Errorf(`ent: validator failed for field "MeetingSchedule.repeats": %w`, err)}
		}
	}
	if _, ok := msc.mutation.RepetitionStep(); !ok {
		return &ValidationError{Name: "repetition_step", err: errors.New(`ent: missing required field "MeetingSchedule.repetition_step"`)}
	}
	if v, ok := msc.mutation.WeekDays(); ok {
		if err := meetingschedule.WeekDaysValidator(v); err != nil {
			return &ValidationError{Name: "week_days", err: fmt.Errorf(`ent: validator failed for field "MeetingSchedule.week_days": %w`, err)}
		}
	}
	if v, ok := msc.mutation.MonthlyOn(); ok {
		if err := meetingschedule.MonthlyOnValidator(v); err != nil {
			return &ValidationError{Name: "monthly_on", err: fmt.Errorf(`ent: validator failed for field "MeetingSchedule.monthly_on": %w`, err)}
		}
	}
	return nil
}

func (msc *MeetingScheduleCreate) sqlSave(ctx context.Context) (*MeetingSchedule, error) {
	if err := msc.check(); err != nil {
		return nil, err
	}
	_node, _spec := msc.createSpec()
	if err := sqlgraph.CreateNode(ctx, msc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	msc.mutation.id = &_node.ID
	msc.mutation.done = true
	return _node, nil
}

func (msc *MeetingScheduleCreate) createSpec() (*MeetingSchedule, *sqlgraph.CreateSpec) {
	var (
		_node = &MeetingSchedule{config: msc.config}
		_spec = sqlgraph.NewCreateSpec(meetingschedule.Table, sqlgraph.NewFieldSpec(meetingschedule.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = msc.conflict
	if id, ok := msc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := msc.mutation.ArchiveTime(); ok {
		_spec.SetField(meetingschedule.FieldArchiveTime, field.TypeTime, value)
		_node.ArchiveTime = value
	}
	if value, ok := msc.mutation.Name(); ok {
		_spec.SetField(meetingschedule.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := msc.mutation.Description(); ok {
		_spec.SetField(meetingschedule.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := msc.mutation.BeginMinute(); ok {
		_spec.SetField(meetingschedule.FieldBeginMinute, field.TypeInt, value)
		_node.BeginMinute = value
	}
	if value, ok := msc.mutation.DurationMinutes(); ok {
		_spec.SetField(meetingschedule.FieldDurationMinutes, field.TypeInt, value)
		_node.DurationMinutes = value
	}
	if value, ok := msc.mutation.StartDate(); ok {
		_spec.SetField(meetingschedule.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if value, ok := msc.mutation.Repeats(); ok {
		_spec.SetField(meetingschedule.FieldRepeats, field.TypeEnum, value)
		_node.Repeats = value
	}
	if value, ok := msc.mutation.RepetitionStep(); ok {
		_spec.SetField(meetingschedule.FieldRepetitionStep, field.TypeInt, value)
		_node.RepetitionStep = value
	}
	if value, ok := msc.mutation.WeekDays(); ok {
		_spec.SetField(meetingschedule.FieldWeekDays, field.TypeJSON, value)
		_node.WeekDays = value
	}
	if value, ok := msc.mutation.MonthlyOn(); ok {
		_spec.SetField(meetingschedule.FieldMonthlyOn, field.TypeEnum, value)
		_node.MonthlyOn = value
	}
	if value, ok := msc.mutation.UntilDate(); ok {
		_spec.SetField(meetingschedule.FieldUntilDate, field.TypeTime, value)
		_node.UntilDate = value
	}
	if value, ok := msc.mutation.NumRepetitions(); ok {
		_spec.SetField(meetingschedule.FieldNumRepetitions, field.TypeInt, value)
		_node.NumRepetitions = value
	}
	if nodes := msc.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   meetingschedule.SessionsTable,
			Columns: []string{meetingschedule.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(meetingsession.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := msc.mutation.OwningTeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   meetingschedule.OwningTeamTable,
			Columns: meetingschedule.OwningTeamPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MeetingSchedule.Create().
//		SetArchiveTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MeetingScheduleUpsert) {
//			SetArchiveTime(v+v).
//		}).
//		Exec(ctx)
func (msc *MeetingScheduleCreate) OnConflict(opts ...sql.ConflictOption) *MeetingScheduleUpsertOne {
	msc.conflict = opts
	return &MeetingScheduleUpsertOne{
		create: msc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MeetingSchedule.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (msc *MeetingScheduleCreate) OnConflictColumns(columns ...string) *MeetingScheduleUpsertOne {
	msc.conflict = append(msc.conflict, sql.ConflictColumns(columns...))
	return &MeetingScheduleUpsertOne{
		create: msc,
	}
}

type (
	// MeetingScheduleUpsertOne is the builder for "upsert"-ing
	//  one MeetingSchedule node.
	MeetingScheduleUpsertOne struct {
		create *MeetingScheduleCreate
	}

	// MeetingScheduleUpsert is the "OnConflict" setter.
	MeetingScheduleUpsert struct {
		*sql.UpdateSet
	}
)

// SetArchiveTime sets the "archive_time" field.
func (u *MeetingScheduleUpsert) SetArchiveTime(v time.Time) *MeetingScheduleUpsert {
	u.Set(meetingschedule.FieldArchiveTime, v)
	return u
}

// UpdateArchiveTime sets the "archive_time" field to the value that was provided on create.
func (u *MeetingScheduleUpsert) UpdateArchiveTime() *MeetingScheduleUpsert {
	u.SetExcluded(meetingschedule.FieldArchiveTime)
	return u
}

// ClearArchiveTime clears the value of the "archive_time" field.
func (u *MeetingScheduleUpsert) ClearArchiveTime() *MeetingScheduleUpsert {
	u.SetNull(meetingschedule.FieldArchiveTime)
	return u
}

// SetName sets the "name" field.
func (u *MeetingScheduleUpsert) SetName(v string) *MeetingScheduleUpsert {
	u.Set(meetingschedule.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MeetingScheduleUpsert) UpdateName() *MeetingScheduleUpsert {
	u.SetExcluded(meetingschedule.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *MeetingScheduleUpsert) SetDescription(v string) *MeetingScheduleUpsert {
	u.Set(meetingschedule.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *MeetingScheduleUpsert) UpdateDescription() *MeetingScheduleUpsert {
	u.SetExcluded(meetingschedule.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *MeetingScheduleUpsert) ClearDescription() *MeetingScheduleUpsert {
	u.SetNull(meetingschedule.FieldDescription)
	return u
}

// SetBeginMinute sets the "begin_minute" field.
func (u *MeetingScheduleUpsert) SetBeginMinute(v int) *MeetingScheduleUpsert {
	u.Set(meetingschedule.FieldBeginMinute, v)
	return u
}

// UpdateBeginMinute sets the "begin_minute" field to the value that was provided on create.
func (u *MeetingScheduleUpsert) UpdateBeginMinute() *MeetingScheduleUpsert {
	u.SetExcluded(meetingschedule.FieldBeginMinute)
	return u
}

// AddBeginMinute adds v to the "begin_minute" field.
func (u *MeetingScheduleUpsert) AddBeginMinute(v int) *MeetingScheduleUpsert {
	u.Add(meetingschedule.FieldBeginMinute, v)
	return u
}

// SetDurationMinutes sets the "duration_minutes" field.
func (u *MeetingScheduleUpsert) SetDurationMinutes(v int) *MeetingScheduleUpsert {
	u.Set(meetingschedule.FieldDurationMinutes, v)
	return u
}

// UpdateDurationMinutes sets the "duration_minutes" field to the value that was provided on create.
func (u *MeetingScheduleUpsert) UpdateDurationMinutes() *MeetingScheduleUpsert {
	u.SetExcluded(meetingschedule.FieldDurationMinutes)
	return u
}

// AddDurationMinutes adds v to the "duration_minutes" field.
func (u *MeetingScheduleUpsert) AddDurationMinutes(v int) *MeetingScheduleUpsert {
	u.Add(meetingschedule.FieldDurationMinutes, v)
	return u
}

// SetStartDate sets the "start_date" field.
func (u *MeetingScheduleUpsert) SetStartDate(v time.Time) *MeetingScheduleUpsert {
	u.Set(meetingschedule.FieldStartDate, v)
	return u
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *MeetingScheduleUpsert) UpdateStartDate() *MeetingScheduleUpsert {
	u.SetExcluded(meetingschedule.FieldStartDate)
	return u
}

// SetRepeats sets the "repeats" field.
func (u *MeetingScheduleUpsert) SetRepeats(v meetingschedule.Repeats) *MeetingScheduleUpsert {
	u.Set(meetingschedule.FieldRepeats, v)
	return u
}

// UpdateRepeats sets the "repeats" field to the value that was provided on create.
func (u *MeetingScheduleUpsert) UpdateRepeats() *MeetingScheduleUpsert {
	u.SetExcluded(meetingschedule.FieldRepeats)
	return u
}

// SetRepetitionStep sets the "repetition_step" field.
func (u *MeetingScheduleUpsert) SetRepetitionStep(v int) *MeetingScheduleUpsert {
	u.Set(meetingschedule.FieldRepetitionStep, v)
	return u
}

// UpdateRepetitionStep sets the "repetition_step" field to the value that was provided on create.
func (u *MeetingScheduleUpsert) UpdateRepetitionStep() *MeetingScheduleUpsert {
	u.SetExcluded(meetingschedule.FieldRepetitionStep)
	return u
}

// AddRepetitionStep adds v to the "repetition_step" field.
func (u *MeetingScheduleUpsert) AddRepetitionStep(v int) *MeetingScheduleUpsert {
	u.Add(meetingschedule.FieldRepetitionStep, v)
	return u
}

// SetWeekDays sets the "week_days" field.
func (u *MeetingScheduleUpsert) SetWeekDays(v []string) *MeetingScheduleUpsert {
	u.Set(meetingschedule.FieldWeekDays, v)
	return u
}

// UpdateWeekDays sets the "week_days" field to the value that was provided on create.
func (u *MeetingScheduleUpsert) UpdateWeekDays() *MeetingScheduleUpsert {
	u.SetExcluded(meetingschedule.FieldWeekDays)
	return u
}

// ClearWeekDays clears the value of the "week_days" field.
func (u *MeetingScheduleUpsert) ClearWeekDays() *MeetingScheduleUpsert {
	u.SetNull(meetingschedule.FieldWeekDays)
	return u
}

// SetMonthlyOn sets the "monthly_on" field.
func (u *MeetingScheduleUpsert) SetMonthlyOn(v meetingschedule.MonthlyOn) *MeetingScheduleUpsert {
	u.Set(meetingschedule.FieldMonthlyOn, v)
	return u
}

// UpdateMonthlyOn sets the "monthly_on" field to the value that was provided on create.
func (u *MeetingScheduleUpsert) UpdateMonthlyOn() *MeetingScheduleUpsert {
	u.SetExcluded(meetingschedule.FieldMonthlyOn)
	return u
}

// ClearMonthlyOn clears the value of the "monthly_on" field.
func (u *MeetingScheduleUpsert) ClearMonthlyOn() *MeetingScheduleUpsert {
	u.SetNull(meetingschedule.FieldMonthlyOn)
	return u
}

// SetUntilDate sets the "until_date" field.
func (u *MeetingScheduleUpsert) SetUntilDate(v time.Time) *MeetingScheduleUpsert {
	u.Set(meetingschedule.FieldUntilDate, v)
	return u
}

// UpdateUntilDate sets the "until_date" field to the value that was provided on create.
func (u *MeetingScheduleUpsert) UpdateUntilDate() *MeetingScheduleUpsert {
	u.SetExcluded(meetingschedule.FieldUntilDate)
	return u
}

// ClearUntilDate clears the value of the "until_date" field.
func (u *MeetingScheduleUpsert) ClearUntilDate() *MeetingScheduleUpsert {
	u.SetNull(meetingschedule.FieldUntilDate)
	return u
}

// SetNumRepetitions sets the "num_repetitions" field.
func (u *MeetingScheduleUpsert) SetNumRepetitions(v int) *MeetingScheduleUpsert {
	u.Set(meetingschedule.FieldNumRepetitions, v)
	return u
}

// UpdateNumRepetitions sets the "num_repetitions" field to the value that was provided on create.
func (u *MeetingScheduleUpsert) UpdateNumRepetitions() *MeetingScheduleUpsert {
	u.SetExcluded(meetingschedule.FieldNumRepetitions)
	return u
}

// AddNumRepetitions adds v to the "num_repetitions" field.
func (u *MeetingScheduleUpsert) AddNumRepetitions(v int) *MeetingScheduleUpsert {
	u.Add(meetingschedule.FieldNumRepetitions, v)
	return u
}

// ClearNumRepetitions clears the value of the "num_repetitions" field.
func (u *MeetingScheduleUpsert) ClearNumRepetitions() *MeetingScheduleUpsert {
	u.SetNull(meetingschedule.FieldNumRepetitions)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.MeetingSchedule.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(meetingschedule.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MeetingScheduleUpsertOne) UpdateNewValues() *MeetingScheduleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(meetingschedule.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MeetingSchedule.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MeetingScheduleUpsertOne) Ignore() *MeetingScheduleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MeetingScheduleUpsertOne) DoNothing() *MeetingScheduleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MeetingScheduleCreate.OnConflict
// documentation for more info.
func (u *MeetingScheduleUpsertOne) Update(set func(*MeetingScheduleUpsert)) *MeetingScheduleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MeetingScheduleUpsert{UpdateSet: update})
	}))
	return u
}

// SetArchiveTime sets the "archive_time" field.
func (u *MeetingScheduleUpsertOne) SetArchiveTime(v time.Time) *MeetingScheduleUpsertOne {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.SetArchiveTime(v)
	})
}

// UpdateArchiveTime sets the "archive_time" field to the value that was provided on create.
func (u *MeetingScheduleUpsertOne) UpdateArchiveTime() *MeetingScheduleUpsertOne {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.UpdateArchiveTime()
	})
}

// ClearArchiveTime clears the value of the "archive_time" field.
func (u *MeetingScheduleUpsertOne) ClearArchiveTime() *MeetingScheduleUpsertOne {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.ClearArchiveTime()
	})
}

// SetName sets the "name" field.
func (u *MeetingScheduleUpsertOne) SetName(v string) *MeetingScheduleUpsertOne {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MeetingScheduleUpsertOne) UpdateName() *MeetingScheduleUpsertOne {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *MeetingScheduleUpsertOne) SetDescription(v string) *MeetingScheduleUpsertOne {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *MeetingScheduleUpsertOne) UpdateDescription() *MeetingScheduleUpsertOne {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *MeetingScheduleUpsertOne) ClearDescription() *MeetingScheduleUpsertOne {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.ClearDescription()
	})
}

// SetBeginMinute sets the "begin_minute" field.
func (u *MeetingScheduleUpsertOne) SetBeginMinute(v int) *MeetingScheduleUpsertOne {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.SetBeginMinute(v)
	})
}

// AddBeginMinute adds v to the "begin_minute" field.
func (u *MeetingScheduleUpsertOne) AddBeginMinute(v int) *MeetingScheduleUpsertOne {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.AddBeginMinute(v)
	})
}

// UpdateBeginMinute sets the "begin_minute" field to the value that was provided on create.
func (u *MeetingScheduleUpsertOne) UpdateBeginMinute() *MeetingScheduleUpsertOne {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.UpdateBeginMinute()
	})
}

// SetDurationMinutes sets the "duration_minutes" field.
func (u *MeetingScheduleUpsertOne) SetDurationMinutes(v int) *MeetingScheduleUpsertOne {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.SetDurationMinutes(v)
	})
}

// AddDurationMinutes adds v to the "duration_minutes" field.
func (u *MeetingScheduleUpsertOne) AddDurationMinutes(v int) *MeetingScheduleUpsertOne {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.AddDurationMinutes(v)
	})
}

// UpdateDurationMinutes sets the "duration_minutes" field to the value that was provided on create.
func (u *MeetingScheduleUpsertOne) UpdateDurationMinutes() *MeetingScheduleUpsertOne {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.UpdateDurationMinutes()
	})
}

// SetStartDate sets the "start_date" field.
func (u *MeetingScheduleUpsertOne) SetStartDate(v time.Time) *MeetingScheduleUpsertOne {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.SetStartDate(v)
	})
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *MeetingScheduleUpsertOne) UpdateStartDate() *MeetingScheduleUpsertOne {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.UpdateStartDate()
	})
}

// SetRepeats sets the "repeats" field.
func (u *MeetingScheduleUpsertOne) SetRepeats(v meetingschedule.Repeats) *MeetingScheduleUpsertOne {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.SetRepeats(v)
	})
}

// UpdateRepeats sets the "repeats" field to the value that was provided on create.
func (u *MeetingScheduleUpsertOne) UpdateRepeats() *MeetingScheduleUpsertOne {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.UpdateRepeats()
	})
}

// SetRepetitionStep sets the "repetition_step" field.
func (u *MeetingScheduleUpsertOne) SetRepetitionStep(v int) *MeetingScheduleUpsertOne {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.SetRepetitionStep(v)
	})
}

// AddRepetitionStep adds v to the "repetition_step" field.
func (u *MeetingScheduleUpsertOne) AddRepetitionStep(v int) *MeetingScheduleUpsertOne {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.AddRepetitionStep(v)
	})
}

// UpdateRepetitionStep sets the "repetition_step" field to the value that was provided on create.
func (u *MeetingScheduleUpsertOne) UpdateRepetitionStep() *MeetingScheduleUpsertOne {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.UpdateRepetitionStep()
	})
}

// SetWeekDays sets the "week_days" field.
func (u *MeetingScheduleUpsertOne) SetWeekDays(v []string) *MeetingScheduleUpsertOne {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.SetWeekDays(v)
	})
}

// UpdateWeekDays sets the "week_days" field to the value that was provided on create.
func (u *MeetingScheduleUpsertOne) UpdateWeekDays() *MeetingScheduleUpsertOne {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.UpdateWeekDays()
	})
}

// ClearWeekDays clears the value of the "week_days" field.
func (u *MeetingScheduleUpsertOne) ClearWeekDays() *MeetingScheduleUpsertOne {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.ClearWeekDays()
	})
}

// SetMonthlyOn sets the "monthly_on" field.
func (u *MeetingScheduleUpsertOne) SetMonthlyOn(v meetingschedule.MonthlyOn) *MeetingScheduleUpsertOne {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.SetMonthlyOn(v)
	})
}

// UpdateMonthlyOn sets the "monthly_on" field to the value that was provided on create.
func (u *MeetingScheduleUpsertOne) UpdateMonthlyOn() *MeetingScheduleUpsertOne {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.UpdateMonthlyOn()
	})
}

// ClearMonthlyOn clears the value of the "monthly_on" field.
func (u *MeetingScheduleUpsertOne) ClearMonthlyOn() *MeetingScheduleUpsertOne {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.ClearMonthlyOn()
	})
}

// SetUntilDate sets the "until_date" field.
func (u *MeetingScheduleUpsertOne) SetUntilDate(v time.Time) *MeetingScheduleUpsertOne {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.SetUntilDate(v)
	})
}

// UpdateUntilDate sets the "until_date" field to the value that was provided on create.
func (u *MeetingScheduleUpsertOne) UpdateUntilDate() *MeetingScheduleUpsertOne {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.UpdateUntilDate()
	})
}

// ClearUntilDate clears the value of the "until_date" field.
func (u *MeetingScheduleUpsertOne) ClearUntilDate() *MeetingScheduleUpsertOne {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.ClearUntilDate()
	})
}

// SetNumRepetitions sets the "num_repetitions" field.
func (u *MeetingScheduleUpsertOne) SetNumRepetitions(v int) *MeetingScheduleUpsertOne {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.SetNumRepetitions(v)
	})
}

// AddNumRepetitions adds v to the "num_repetitions" field.
func (u *MeetingScheduleUpsertOne) AddNumRepetitions(v int) *MeetingScheduleUpsertOne {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.AddNumRepetitions(v)
	})
}

// UpdateNumRepetitions sets the "num_repetitions" field to the value that was provided on create.
func (u *MeetingScheduleUpsertOne) UpdateNumRepetitions() *MeetingScheduleUpsertOne {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.UpdateNumRepetitions()
	})
}

// ClearNumRepetitions clears the value of the "num_repetitions" field.
func (u *MeetingScheduleUpsertOne) ClearNumRepetitions() *MeetingScheduleUpsertOne {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.ClearNumRepetitions()
	})
}

// Exec executes the query.
func (u *MeetingScheduleUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MeetingScheduleCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MeetingScheduleUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MeetingScheduleUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: MeetingScheduleUpsertOne.ID is not supported by MySQL driver. Use MeetingScheduleUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MeetingScheduleUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MeetingScheduleCreateBulk is the builder for creating many MeetingSchedule entities in bulk.
type MeetingScheduleCreateBulk struct {
	config
	err      error
	builders []*MeetingScheduleCreate
	conflict []sql.ConflictOption
}

// Save creates the MeetingSchedule entities in the database.
func (mscb *MeetingScheduleCreateBulk) Save(ctx context.Context) ([]*MeetingSchedule, error) {
	if mscb.err != nil {
		return nil, mscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mscb.builders))
	nodes := make([]*MeetingSchedule, len(mscb.builders))
	mutators := make([]Mutator, len(mscb.builders))
	for i := range mscb.builders {
		func(i int, root context.Context) {
			builder := mscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MeetingScheduleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mscb *MeetingScheduleCreateBulk) SaveX(ctx context.Context) []*MeetingSchedule {
	v, err := mscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mscb *MeetingScheduleCreateBulk) Exec(ctx context.Context) error {
	_, err := mscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mscb *MeetingScheduleCreateBulk) ExecX(ctx context.Context) {
	if err := mscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MeetingSchedule.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MeetingScheduleUpsert) {
//			SetArchiveTime(v+v).
//		}).
//		Exec(ctx)
func (mscb *MeetingScheduleCreateBulk) OnConflict(opts ...sql.ConflictOption) *MeetingScheduleUpsertBulk {
	mscb.conflict = opts
	return &MeetingScheduleUpsertBulk{
		create: mscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MeetingSchedule.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mscb *MeetingScheduleCreateBulk) OnConflictColumns(columns ...string) *MeetingScheduleUpsertBulk {
	mscb.conflict = append(mscb.conflict, sql.ConflictColumns(columns...))
	return &MeetingScheduleUpsertBulk{
		create: mscb,
	}
}

// MeetingScheduleUpsertBulk is the builder for "upsert"-ing
// a bulk of MeetingSchedule nodes.
type MeetingScheduleUpsertBulk struct {
	create *MeetingScheduleCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.MeetingSchedule.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(meetingschedule.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MeetingScheduleUpsertBulk) UpdateNewValues() *MeetingScheduleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(meetingschedule.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MeetingSchedule.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MeetingScheduleUpsertBulk) Ignore() *MeetingScheduleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MeetingScheduleUpsertBulk) DoNothing() *MeetingScheduleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MeetingScheduleCreateBulk.OnConflict
// documentation for more info.
func (u *MeetingScheduleUpsertBulk) Update(set func(*MeetingScheduleUpsert)) *MeetingScheduleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MeetingScheduleUpsert{UpdateSet: update})
	}))
	return u
}

// SetArchiveTime sets the "archive_time" field.
func (u *MeetingScheduleUpsertBulk) SetArchiveTime(v time.Time) *MeetingScheduleUpsertBulk {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.SetArchiveTime(v)
	})
}

// UpdateArchiveTime sets the "archive_time" field to the value that was provided on create.
func (u *MeetingScheduleUpsertBulk) UpdateArchiveTime() *MeetingScheduleUpsertBulk {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.UpdateArchiveTime()
	})
}

// ClearArchiveTime clears the value of the "archive_time" field.
func (u *MeetingScheduleUpsertBulk) ClearArchiveTime() *MeetingScheduleUpsertBulk {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.ClearArchiveTime()
	})
}

// SetName sets the "name" field.
func (u *MeetingScheduleUpsertBulk) SetName(v string) *MeetingScheduleUpsertBulk {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MeetingScheduleUpsertBulk) UpdateName() *MeetingScheduleUpsertBulk {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *MeetingScheduleUpsertBulk) SetDescription(v string) *MeetingScheduleUpsertBulk {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *MeetingScheduleUpsertBulk) UpdateDescription() *MeetingScheduleUpsertBulk {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *MeetingScheduleUpsertBulk) ClearDescription() *MeetingScheduleUpsertBulk {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.ClearDescription()
	})
}

// SetBeginMinute sets the "begin_minute" field.
func (u *MeetingScheduleUpsertBulk) SetBeginMinute(v int) *MeetingScheduleUpsertBulk {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.SetBeginMinute(v)
	})
}

// AddBeginMinute adds v to the "begin_minute" field.
func (u *MeetingScheduleUpsertBulk) AddBeginMinute(v int) *MeetingScheduleUpsertBulk {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.AddBeginMinute(v)
	})
}

// UpdateBeginMinute sets the "begin_minute" field to the value that was provided on create.
func (u *MeetingScheduleUpsertBulk) UpdateBeginMinute() *MeetingScheduleUpsertBulk {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.UpdateBeginMinute()
	})
}

// SetDurationMinutes sets the "duration_minutes" field.
func (u *MeetingScheduleUpsertBulk) SetDurationMinutes(v int) *MeetingScheduleUpsertBulk {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.SetDurationMinutes(v)
	})
}

// AddDurationMinutes adds v to the "duration_minutes" field.
func (u *MeetingScheduleUpsertBulk) AddDurationMinutes(v int) *MeetingScheduleUpsertBulk {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.AddDurationMinutes(v)
	})
}

// UpdateDurationMinutes sets the "duration_minutes" field to the value that was provided on create.
func (u *MeetingScheduleUpsertBulk) UpdateDurationMinutes() *MeetingScheduleUpsertBulk {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.UpdateDurationMinutes()
	})
}

// SetStartDate sets the "start_date" field.
func (u *MeetingScheduleUpsertBulk) SetStartDate(v time.Time) *MeetingScheduleUpsertBulk {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.SetStartDate(v)
	})
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *MeetingScheduleUpsertBulk) UpdateStartDate() *MeetingScheduleUpsertBulk {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.UpdateStartDate()
	})
}

// SetRepeats sets the "repeats" field.
func (u *MeetingScheduleUpsertBulk) SetRepeats(v meetingschedule.Repeats) *MeetingScheduleUpsertBulk {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.SetRepeats(v)
	})
}

// UpdateRepeats sets the "repeats" field to the value that was provided on create.
func (u *MeetingScheduleUpsertBulk) UpdateRepeats() *MeetingScheduleUpsertBulk {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.UpdateRepeats()
	})
}

// SetRepetitionStep sets the "repetition_step" field.
func (u *MeetingScheduleUpsertBulk) SetRepetitionStep(v int) *MeetingScheduleUpsertBulk {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.SetRepetitionStep(v)
	})
}

// AddRepetitionStep adds v to the "repetition_step" field.
func (u *MeetingScheduleUpsertBulk) AddRepetitionStep(v int) *MeetingScheduleUpsertBulk {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.AddRepetitionStep(v)
	})
}

// UpdateRepetitionStep sets the "repetition_step" field to the value that was provided on create.
func (u *MeetingScheduleUpsertBulk) UpdateRepetitionStep() *MeetingScheduleUpsertBulk {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.UpdateRepetitionStep()
	})
}

// SetWeekDays sets the "week_days" field.
func (u *MeetingScheduleUpsertBulk) SetWeekDays(v []string) *MeetingScheduleUpsertBulk {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.SetWeekDays(v)
	})
}

// UpdateWeekDays sets the "week_days" field to the value that was provided on create.
func (u *MeetingScheduleUpsertBulk) UpdateWeekDays() *MeetingScheduleUpsertBulk {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.UpdateWeekDays()
	})
}

// ClearWeekDays clears the value of the "week_days" field.
func (u *MeetingScheduleUpsertBulk) ClearWeekDays() *MeetingScheduleUpsertBulk {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.ClearWeekDays()
	})
}

// SetMonthlyOn sets the "monthly_on" field.
func (u *MeetingScheduleUpsertBulk) SetMonthlyOn(v meetingschedule.MonthlyOn) *MeetingScheduleUpsertBulk {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.SetMonthlyOn(v)
	})
}

// UpdateMonthlyOn sets the "monthly_on" field to the value that was provided on create.
func (u *MeetingScheduleUpsertBulk) UpdateMonthlyOn() *MeetingScheduleUpsertBulk {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.UpdateMonthlyOn()
	})
}

// ClearMonthlyOn clears the value of the "monthly_on" field.
func (u *MeetingScheduleUpsertBulk) ClearMonthlyOn() *MeetingScheduleUpsertBulk {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.ClearMonthlyOn()
	})
}

// SetUntilDate sets the "until_date" field.
func (u *MeetingScheduleUpsertBulk) SetUntilDate(v time.Time) *MeetingScheduleUpsertBulk {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.SetUntilDate(v)
	})
}

// UpdateUntilDate sets the "until_date" field to the value that was provided on create.
func (u *MeetingScheduleUpsertBulk) UpdateUntilDate() *MeetingScheduleUpsertBulk {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.UpdateUntilDate()
	})
}

// ClearUntilDate clears the value of the "until_date" field.
func (u *MeetingScheduleUpsertBulk) ClearUntilDate() *MeetingScheduleUpsertBulk {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.ClearUntilDate()
	})
}

// SetNumRepetitions sets the "num_repetitions" field.
func (u *MeetingScheduleUpsertBulk) SetNumRepetitions(v int) *MeetingScheduleUpsertBulk {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.SetNumRepetitions(v)
	})
}

// AddNumRepetitions adds v to the "num_repetitions" field.
func (u *MeetingScheduleUpsertBulk) AddNumRepetitions(v int) *MeetingScheduleUpsertBulk {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.AddNumRepetitions(v)
	})
}

// UpdateNumRepetitions sets the "num_repetitions" field to the value that was provided on create.
func (u *MeetingScheduleUpsertBulk) UpdateNumRepetitions() *MeetingScheduleUpsertBulk {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.UpdateNumRepetitions()
	})
}

// ClearNumRepetitions clears the value of the "num_repetitions" field.
func (u *MeetingScheduleUpsertBulk) ClearNumRepetitions() *MeetingScheduleUpsertBulk {
	return u.Update(func(s *MeetingScheduleUpsert) {
		s.ClearNumRepetitions()
	})
}

// Exec executes the query.
func (u *MeetingScheduleUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MeetingScheduleCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MeetingScheduleCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MeetingScheduleUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
