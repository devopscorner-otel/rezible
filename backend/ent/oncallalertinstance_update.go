// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/oncallalert"
	"github.com/rezible/rezible/ent/oncallalertinstance"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/user"
)

// OncallAlertInstanceUpdate is the builder for updating OncallAlertInstance entities.
type OncallAlertInstanceUpdate struct {
	config
	hooks     []Hook
	mutation  *OncallAlertInstanceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OncallAlertInstanceUpdate builder.
func (oaiu *OncallAlertInstanceUpdate) Where(ps ...predicate.OncallAlertInstance) *OncallAlertInstanceUpdate {
	oaiu.mutation.Where(ps...)
	return oaiu
}

// SetAlertID sets the "alert_id" field.
func (oaiu *OncallAlertInstanceUpdate) SetAlertID(u uuid.UUID) *OncallAlertInstanceUpdate {
	oaiu.mutation.SetAlertID(u)
	return oaiu
}

// SetNillableAlertID sets the "alert_id" field if the given value is not nil.
func (oaiu *OncallAlertInstanceUpdate) SetNillableAlertID(u *uuid.UUID) *OncallAlertInstanceUpdate {
	if u != nil {
		oaiu.SetAlertID(*u)
	}
	return oaiu
}

// SetCreatedAt sets the "created_at" field.
func (oaiu *OncallAlertInstanceUpdate) SetCreatedAt(t time.Time) *OncallAlertInstanceUpdate {
	oaiu.mutation.SetCreatedAt(t)
	return oaiu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oaiu *OncallAlertInstanceUpdate) SetNillableCreatedAt(t *time.Time) *OncallAlertInstanceUpdate {
	if t != nil {
		oaiu.SetCreatedAt(*t)
	}
	return oaiu
}

// SetAckedAt sets the "acked_at" field.
func (oaiu *OncallAlertInstanceUpdate) SetAckedAt(t time.Time) *OncallAlertInstanceUpdate {
	oaiu.mutation.SetAckedAt(t)
	return oaiu
}

// SetNillableAckedAt sets the "acked_at" field if the given value is not nil.
func (oaiu *OncallAlertInstanceUpdate) SetNillableAckedAt(t *time.Time) *OncallAlertInstanceUpdate {
	if t != nil {
		oaiu.SetAckedAt(*t)
	}
	return oaiu
}

// SetReceiverUserID sets the "receiver_user_id" field.
func (oaiu *OncallAlertInstanceUpdate) SetReceiverUserID(u uuid.UUID) *OncallAlertInstanceUpdate {
	oaiu.mutation.SetReceiverUserID(u)
	return oaiu
}

// SetNillableReceiverUserID sets the "receiver_user_id" field if the given value is not nil.
func (oaiu *OncallAlertInstanceUpdate) SetNillableReceiverUserID(u *uuid.UUID) *OncallAlertInstanceUpdate {
	if u != nil {
		oaiu.SetReceiverUserID(*u)
	}
	return oaiu
}

// SetAlert sets the "alert" edge to the OncallAlert entity.
func (oaiu *OncallAlertInstanceUpdate) SetAlert(o *OncallAlert) *OncallAlertInstanceUpdate {
	return oaiu.SetAlertID(o.ID)
}

// SetReceiverID sets the "receiver" edge to the User entity by ID.
func (oaiu *OncallAlertInstanceUpdate) SetReceiverID(id uuid.UUID) *OncallAlertInstanceUpdate {
	oaiu.mutation.SetReceiverID(id)
	return oaiu
}

// SetReceiver sets the "receiver" edge to the User entity.
func (oaiu *OncallAlertInstanceUpdate) SetReceiver(u *User) *OncallAlertInstanceUpdate {
	return oaiu.SetReceiverID(u.ID)
}

// Mutation returns the OncallAlertInstanceMutation object of the builder.
func (oaiu *OncallAlertInstanceUpdate) Mutation() *OncallAlertInstanceMutation {
	return oaiu.mutation
}

// ClearAlert clears the "alert" edge to the OncallAlert entity.
func (oaiu *OncallAlertInstanceUpdate) ClearAlert() *OncallAlertInstanceUpdate {
	oaiu.mutation.ClearAlert()
	return oaiu
}

// ClearReceiver clears the "receiver" edge to the User entity.
func (oaiu *OncallAlertInstanceUpdate) ClearReceiver() *OncallAlertInstanceUpdate {
	oaiu.mutation.ClearReceiver()
	return oaiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oaiu *OncallAlertInstanceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, oaiu.sqlSave, oaiu.mutation, oaiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oaiu *OncallAlertInstanceUpdate) SaveX(ctx context.Context) int {
	affected, err := oaiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oaiu *OncallAlertInstanceUpdate) Exec(ctx context.Context) error {
	_, err := oaiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oaiu *OncallAlertInstanceUpdate) ExecX(ctx context.Context) {
	if err := oaiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oaiu *OncallAlertInstanceUpdate) check() error {
	if oaiu.mutation.AlertCleared() && len(oaiu.mutation.AlertIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallAlertInstance.alert"`)
	}
	if oaiu.mutation.ReceiverCleared() && len(oaiu.mutation.ReceiverIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallAlertInstance.receiver"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (oaiu *OncallAlertInstanceUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OncallAlertInstanceUpdate {
	oaiu.modifiers = append(oaiu.modifiers, modifiers...)
	return oaiu
}

func (oaiu *OncallAlertInstanceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := oaiu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(oncallalertinstance.Table, oncallalertinstance.Columns, sqlgraph.NewFieldSpec(oncallalertinstance.FieldID, field.TypeUUID))
	if ps := oaiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oaiu.mutation.CreatedAt(); ok {
		_spec.SetField(oncallalertinstance.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := oaiu.mutation.AckedAt(); ok {
		_spec.SetField(oncallalertinstance.FieldAckedAt, field.TypeTime, value)
	}
	if oaiu.mutation.AlertCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oncallalertinstance.AlertTable,
			Columns: []string{oncallalertinstance.AlertColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallalert.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oaiu.mutation.AlertIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oncallalertinstance.AlertTable,
			Columns: []string{oncallalertinstance.AlertColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallalert.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oaiu.mutation.ReceiverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallalertinstance.ReceiverTable,
			Columns: []string{oncallalertinstance.ReceiverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oaiu.mutation.ReceiverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallalertinstance.ReceiverTable,
			Columns: []string{oncallalertinstance.ReceiverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(oaiu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, oaiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oncallalertinstance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	oaiu.mutation.done = true
	return n, nil
}

// OncallAlertInstanceUpdateOne is the builder for updating a single OncallAlertInstance entity.
type OncallAlertInstanceUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OncallAlertInstanceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetAlertID sets the "alert_id" field.
func (oaiuo *OncallAlertInstanceUpdateOne) SetAlertID(u uuid.UUID) *OncallAlertInstanceUpdateOne {
	oaiuo.mutation.SetAlertID(u)
	return oaiuo
}

// SetNillableAlertID sets the "alert_id" field if the given value is not nil.
func (oaiuo *OncallAlertInstanceUpdateOne) SetNillableAlertID(u *uuid.UUID) *OncallAlertInstanceUpdateOne {
	if u != nil {
		oaiuo.SetAlertID(*u)
	}
	return oaiuo
}

// SetCreatedAt sets the "created_at" field.
func (oaiuo *OncallAlertInstanceUpdateOne) SetCreatedAt(t time.Time) *OncallAlertInstanceUpdateOne {
	oaiuo.mutation.SetCreatedAt(t)
	return oaiuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oaiuo *OncallAlertInstanceUpdateOne) SetNillableCreatedAt(t *time.Time) *OncallAlertInstanceUpdateOne {
	if t != nil {
		oaiuo.SetCreatedAt(*t)
	}
	return oaiuo
}

// SetAckedAt sets the "acked_at" field.
func (oaiuo *OncallAlertInstanceUpdateOne) SetAckedAt(t time.Time) *OncallAlertInstanceUpdateOne {
	oaiuo.mutation.SetAckedAt(t)
	return oaiuo
}

// SetNillableAckedAt sets the "acked_at" field if the given value is not nil.
func (oaiuo *OncallAlertInstanceUpdateOne) SetNillableAckedAt(t *time.Time) *OncallAlertInstanceUpdateOne {
	if t != nil {
		oaiuo.SetAckedAt(*t)
	}
	return oaiuo
}

// SetReceiverUserID sets the "receiver_user_id" field.
func (oaiuo *OncallAlertInstanceUpdateOne) SetReceiverUserID(u uuid.UUID) *OncallAlertInstanceUpdateOne {
	oaiuo.mutation.SetReceiverUserID(u)
	return oaiuo
}

// SetNillableReceiverUserID sets the "receiver_user_id" field if the given value is not nil.
func (oaiuo *OncallAlertInstanceUpdateOne) SetNillableReceiverUserID(u *uuid.UUID) *OncallAlertInstanceUpdateOne {
	if u != nil {
		oaiuo.SetReceiverUserID(*u)
	}
	return oaiuo
}

// SetAlert sets the "alert" edge to the OncallAlert entity.
func (oaiuo *OncallAlertInstanceUpdateOne) SetAlert(o *OncallAlert) *OncallAlertInstanceUpdateOne {
	return oaiuo.SetAlertID(o.ID)
}

// SetReceiverID sets the "receiver" edge to the User entity by ID.
func (oaiuo *OncallAlertInstanceUpdateOne) SetReceiverID(id uuid.UUID) *OncallAlertInstanceUpdateOne {
	oaiuo.mutation.SetReceiverID(id)
	return oaiuo
}

// SetReceiver sets the "receiver" edge to the User entity.
func (oaiuo *OncallAlertInstanceUpdateOne) SetReceiver(u *User) *OncallAlertInstanceUpdateOne {
	return oaiuo.SetReceiverID(u.ID)
}

// Mutation returns the OncallAlertInstanceMutation object of the builder.
func (oaiuo *OncallAlertInstanceUpdateOne) Mutation() *OncallAlertInstanceMutation {
	return oaiuo.mutation
}

// ClearAlert clears the "alert" edge to the OncallAlert entity.
func (oaiuo *OncallAlertInstanceUpdateOne) ClearAlert() *OncallAlertInstanceUpdateOne {
	oaiuo.mutation.ClearAlert()
	return oaiuo
}

// ClearReceiver clears the "receiver" edge to the User entity.
func (oaiuo *OncallAlertInstanceUpdateOne) ClearReceiver() *OncallAlertInstanceUpdateOne {
	oaiuo.mutation.ClearReceiver()
	return oaiuo
}

// Where appends a list predicates to the OncallAlertInstanceUpdate builder.
func (oaiuo *OncallAlertInstanceUpdateOne) Where(ps ...predicate.OncallAlertInstance) *OncallAlertInstanceUpdateOne {
	oaiuo.mutation.Where(ps...)
	return oaiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oaiuo *OncallAlertInstanceUpdateOne) Select(field string, fields ...string) *OncallAlertInstanceUpdateOne {
	oaiuo.fields = append([]string{field}, fields...)
	return oaiuo
}

// Save executes the query and returns the updated OncallAlertInstance entity.
func (oaiuo *OncallAlertInstanceUpdateOne) Save(ctx context.Context) (*OncallAlertInstance, error) {
	return withHooks(ctx, oaiuo.sqlSave, oaiuo.mutation, oaiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oaiuo *OncallAlertInstanceUpdateOne) SaveX(ctx context.Context) *OncallAlertInstance {
	node, err := oaiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oaiuo *OncallAlertInstanceUpdateOne) Exec(ctx context.Context) error {
	_, err := oaiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oaiuo *OncallAlertInstanceUpdateOne) ExecX(ctx context.Context) {
	if err := oaiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oaiuo *OncallAlertInstanceUpdateOne) check() error {
	if oaiuo.mutation.AlertCleared() && len(oaiuo.mutation.AlertIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallAlertInstance.alert"`)
	}
	if oaiuo.mutation.ReceiverCleared() && len(oaiuo.mutation.ReceiverIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallAlertInstance.receiver"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (oaiuo *OncallAlertInstanceUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OncallAlertInstanceUpdateOne {
	oaiuo.modifiers = append(oaiuo.modifiers, modifiers...)
	return oaiuo
}

func (oaiuo *OncallAlertInstanceUpdateOne) sqlSave(ctx context.Context) (_node *OncallAlertInstance, err error) {
	if err := oaiuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(oncallalertinstance.Table, oncallalertinstance.Columns, sqlgraph.NewFieldSpec(oncallalertinstance.FieldID, field.TypeUUID))
	id, ok := oaiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OncallAlertInstance.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oaiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oncallalertinstance.FieldID)
		for _, f := range fields {
			if !oncallalertinstance.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oncallalertinstance.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oaiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oaiuo.mutation.CreatedAt(); ok {
		_spec.SetField(oncallalertinstance.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := oaiuo.mutation.AckedAt(); ok {
		_spec.SetField(oncallalertinstance.FieldAckedAt, field.TypeTime, value)
	}
	if oaiuo.mutation.AlertCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oncallalertinstance.AlertTable,
			Columns: []string{oncallalertinstance.AlertColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallalert.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oaiuo.mutation.AlertIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oncallalertinstance.AlertTable,
			Columns: []string{oncallalertinstance.AlertColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallalert.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oaiuo.mutation.ReceiverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallalertinstance.ReceiverTable,
			Columns: []string{oncallalertinstance.ReceiverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oaiuo.mutation.ReceiverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallalertinstance.ReceiverTable,
			Columns: []string{oncallalertinstance.ReceiverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(oaiuo.modifiers...)
	_node = &OncallAlertInstance{config: oaiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oaiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oncallalertinstance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oaiuo.mutation.done = true
	return _node, nil
}
