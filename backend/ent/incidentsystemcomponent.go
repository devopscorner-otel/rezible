// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/incident"
	"github.com/rezible/rezible/ent/incidentsystemcomponent"
	"github.com/rezible/rezible/ent/systemcomponent"
)

// IncidentSystemComponent is the model entity for the IncidentSystemComponent schema.
type IncidentSystemComponent struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// IncidentID holds the value of the "incident_id" field.
	IncidentID uuid.UUID `json:"incident_id,omitempty"`
	// SystemComponentID holds the value of the "system_component_id" field.
	SystemComponentID uuid.UUID `json:"system_component_id,omitempty"`
	// Role holds the value of the "role" field.
	Role incidentsystemcomponent.Role `json:"role,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IncidentSystemComponentQuery when eager-loading is set.
	Edges        IncidentSystemComponentEdges `json:"edges"`
	selectValues sql.SelectValues
}

// IncidentSystemComponentEdges holds the relations/edges for other nodes in the graph.
type IncidentSystemComponentEdges struct {
	// Incident holds the value of the incident edge.
	Incident *Incident `json:"incident,omitempty"`
	// SystemComponent holds the value of the system_component edge.
	SystemComponent *SystemComponent `json:"system_component,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// IncidentOrErr returns the Incident value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IncidentSystemComponentEdges) IncidentOrErr() (*Incident, error) {
	if e.Incident != nil {
		return e.Incident, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: incident.Label}
	}
	return nil, &NotLoadedError{edge: "incident"}
}

// SystemComponentOrErr returns the SystemComponent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IncidentSystemComponentEdges) SystemComponentOrErr() (*SystemComponent, error) {
	if e.SystemComponent != nil {
		return e.SystemComponent, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: systemcomponent.Label}
	}
	return nil, &NotLoadedError{edge: "system_component"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IncidentSystemComponent) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case incidentsystemcomponent.FieldRole:
			values[i] = new(sql.NullString)
		case incidentsystemcomponent.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case incidentsystemcomponent.FieldID, incidentsystemcomponent.FieldIncidentID, incidentsystemcomponent.FieldSystemComponentID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IncidentSystemComponent fields.
func (isc *IncidentSystemComponent) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case incidentsystemcomponent.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				isc.ID = *value
			}
		case incidentsystemcomponent.FieldIncidentID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field incident_id", values[i])
			} else if value != nil {
				isc.IncidentID = *value
			}
		case incidentsystemcomponent.FieldSystemComponentID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field system_component_id", values[i])
			} else if value != nil {
				isc.SystemComponentID = *value
			}
		case incidentsystemcomponent.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				isc.Role = incidentsystemcomponent.Role(value.String)
			}
		case incidentsystemcomponent.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				isc.CreatedAt = value.Time
			}
		default:
			isc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the IncidentSystemComponent.
// This includes values selected through modifiers, order, etc.
func (isc *IncidentSystemComponent) Value(name string) (ent.Value, error) {
	return isc.selectValues.Get(name)
}

// QueryIncident queries the "incident" edge of the IncidentSystemComponent entity.
func (isc *IncidentSystemComponent) QueryIncident() *IncidentQuery {
	return NewIncidentSystemComponentClient(isc.config).QueryIncident(isc)
}

// QuerySystemComponent queries the "system_component" edge of the IncidentSystemComponent entity.
func (isc *IncidentSystemComponent) QuerySystemComponent() *SystemComponentQuery {
	return NewIncidentSystemComponentClient(isc.config).QuerySystemComponent(isc)
}

// Update returns a builder for updating this IncidentSystemComponent.
// Note that you need to call IncidentSystemComponent.Unwrap() before calling this method if this IncidentSystemComponent
// was returned from a transaction, and the transaction was committed or rolled back.
func (isc *IncidentSystemComponent) Update() *IncidentSystemComponentUpdateOne {
	return NewIncidentSystemComponentClient(isc.config).UpdateOne(isc)
}

// Unwrap unwraps the IncidentSystemComponent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (isc *IncidentSystemComponent) Unwrap() *IncidentSystemComponent {
	_tx, ok := isc.config.driver.(*txDriver)
	if !ok {
		panic("ent: IncidentSystemComponent is not a transactional entity")
	}
	isc.config.driver = _tx.drv
	return isc
}

// String implements the fmt.Stringer.
func (isc *IncidentSystemComponent) String() string {
	var builder strings.Builder
	builder.WriteString("IncidentSystemComponent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", isc.ID))
	builder.WriteString("incident_id=")
	builder.WriteString(fmt.Sprintf("%v", isc.IncidentID))
	builder.WriteString(", ")
	builder.WriteString("system_component_id=")
	builder.WriteString(fmt.Sprintf("%v", isc.SystemComponentID))
	builder.WriteString(", ")
	builder.WriteString("role=")
	builder.WriteString(fmt.Sprintf("%v", isc.Role))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(isc.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// IncidentSystemComponents is a parsable slice of IncidentSystemComponent.
type IncidentSystemComponents []*IncidentSystemComponent
