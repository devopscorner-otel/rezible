// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/incidentdebrief"
	"github.com/rezible/rezible/ent/incidentdebriefmessage"
	"github.com/rezible/rezible/ent/incidentdebriefquestion"
	"github.com/rezible/rezible/ent/tenant"
)

// IncidentDebriefMessageCreate is the builder for creating a IncidentDebriefMessage entity.
type IncidentDebriefMessageCreate struct {
	config
	mutation *IncidentDebriefMessageMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (idmc *IncidentDebriefMessageCreate) SetTenantID(i int) *IncidentDebriefMessageCreate {
	idmc.mutation.SetTenantID(i)
	return idmc
}

// SetDebriefID sets the "debrief_id" field.
func (idmc *IncidentDebriefMessageCreate) SetDebriefID(u uuid.UUID) *IncidentDebriefMessageCreate {
	idmc.mutation.SetDebriefID(u)
	return idmc
}

// SetQuestionID sets the "question_id" field.
func (idmc *IncidentDebriefMessageCreate) SetQuestionID(u uuid.UUID) *IncidentDebriefMessageCreate {
	idmc.mutation.SetQuestionID(u)
	return idmc
}

// SetNillableQuestionID sets the "question_id" field if the given value is not nil.
func (idmc *IncidentDebriefMessageCreate) SetNillableQuestionID(u *uuid.UUID) *IncidentDebriefMessageCreate {
	if u != nil {
		idmc.SetQuestionID(*u)
	}
	return idmc
}

// SetCreatedAt sets the "created_at" field.
func (idmc *IncidentDebriefMessageCreate) SetCreatedAt(t time.Time) *IncidentDebriefMessageCreate {
	idmc.mutation.SetCreatedAt(t)
	return idmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (idmc *IncidentDebriefMessageCreate) SetNillableCreatedAt(t *time.Time) *IncidentDebriefMessageCreate {
	if t != nil {
		idmc.SetCreatedAt(*t)
	}
	return idmc
}

// SetType sets the "type" field.
func (idmc *IncidentDebriefMessageCreate) SetType(i incidentdebriefmessage.Type) *IncidentDebriefMessageCreate {
	idmc.mutation.SetType(i)
	return idmc
}

// SetRequestedTool sets the "requested_tool" field.
func (idmc *IncidentDebriefMessageCreate) SetRequestedTool(it incidentdebriefmessage.RequestedTool) *IncidentDebriefMessageCreate {
	idmc.mutation.SetRequestedTool(it)
	return idmc
}

// SetNillableRequestedTool sets the "requested_tool" field if the given value is not nil.
func (idmc *IncidentDebriefMessageCreate) SetNillableRequestedTool(it *incidentdebriefmessage.RequestedTool) *IncidentDebriefMessageCreate {
	if it != nil {
		idmc.SetRequestedTool(*it)
	}
	return idmc
}

// SetBody sets the "body" field.
func (idmc *IncidentDebriefMessageCreate) SetBody(s string) *IncidentDebriefMessageCreate {
	idmc.mutation.SetBody(s)
	return idmc
}

// SetID sets the "id" field.
func (idmc *IncidentDebriefMessageCreate) SetID(u uuid.UUID) *IncidentDebriefMessageCreate {
	idmc.mutation.SetID(u)
	return idmc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (idmc *IncidentDebriefMessageCreate) SetNillableID(u *uuid.UUID) *IncidentDebriefMessageCreate {
	if u != nil {
		idmc.SetID(*u)
	}
	return idmc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (idmc *IncidentDebriefMessageCreate) SetTenant(t *Tenant) *IncidentDebriefMessageCreate {
	return idmc.SetTenantID(t.ID)
}

// SetDebrief sets the "debrief" edge to the IncidentDebrief entity.
func (idmc *IncidentDebriefMessageCreate) SetDebrief(i *IncidentDebrief) *IncidentDebriefMessageCreate {
	return idmc.SetDebriefID(i.ID)
}

// SetFromQuestionID sets the "from_question" edge to the IncidentDebriefQuestion entity by ID.
func (idmc *IncidentDebriefMessageCreate) SetFromQuestionID(id uuid.UUID) *IncidentDebriefMessageCreate {
	idmc.mutation.SetFromQuestionID(id)
	return idmc
}

// SetNillableFromQuestionID sets the "from_question" edge to the IncidentDebriefQuestion entity by ID if the given value is not nil.
func (idmc *IncidentDebriefMessageCreate) SetNillableFromQuestionID(id *uuid.UUID) *IncidentDebriefMessageCreate {
	if id != nil {
		idmc = idmc.SetFromQuestionID(*id)
	}
	return idmc
}

// SetFromQuestion sets the "from_question" edge to the IncidentDebriefQuestion entity.
func (idmc *IncidentDebriefMessageCreate) SetFromQuestion(i *IncidentDebriefQuestion) *IncidentDebriefMessageCreate {
	return idmc.SetFromQuestionID(i.ID)
}

// Mutation returns the IncidentDebriefMessageMutation object of the builder.
func (idmc *IncidentDebriefMessageCreate) Mutation() *IncidentDebriefMessageMutation {
	return idmc.mutation
}

// Save creates the IncidentDebriefMessage in the database.
func (idmc *IncidentDebriefMessageCreate) Save(ctx context.Context) (*IncidentDebriefMessage, error) {
	if err := idmc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, idmc.sqlSave, idmc.mutation, idmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (idmc *IncidentDebriefMessageCreate) SaveX(ctx context.Context) *IncidentDebriefMessage {
	v, err := idmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (idmc *IncidentDebriefMessageCreate) Exec(ctx context.Context) error {
	_, err := idmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (idmc *IncidentDebriefMessageCreate) ExecX(ctx context.Context) {
	if err := idmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (idmc *IncidentDebriefMessageCreate) defaults() error {
	if _, ok := idmc.mutation.CreatedAt(); !ok {
		if incidentdebriefmessage.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized incidentdebriefmessage.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := incidentdebriefmessage.DefaultCreatedAt()
		idmc.mutation.SetCreatedAt(v)
	}
	if _, ok := idmc.mutation.ID(); !ok {
		if incidentdebriefmessage.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized incidentdebriefmessage.DefaultID (forgotten import ent/runtime?)")
		}
		v := incidentdebriefmessage.DefaultID()
		idmc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (idmc *IncidentDebriefMessageCreate) check() error {
	if _, ok := idmc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "IncidentDebriefMessage.tenant_id"`)}
	}
	if _, ok := idmc.mutation.DebriefID(); !ok {
		return &ValidationError{Name: "debrief_id", err: errors.New(`ent: missing required field "IncidentDebriefMessage.debrief_id"`)}
	}
	if _, ok := idmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "IncidentDebriefMessage.created_at"`)}
	}
	if _, ok := idmc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "IncidentDebriefMessage.type"`)}
	}
	if v, ok := idmc.mutation.GetType(); ok {
		if err := incidentdebriefmessage.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "IncidentDebriefMessage.type": %w`, err)}
		}
	}
	if v, ok := idmc.mutation.RequestedTool(); ok {
		if err := incidentdebriefmessage.RequestedToolValidator(v); err != nil {
			return &ValidationError{Name: "requested_tool", err: fmt.Errorf(`ent: validator failed for field "IncidentDebriefMessage.requested_tool": %w`, err)}
		}
	}
	if _, ok := idmc.mutation.Body(); !ok {
		return &ValidationError{Name: "body", err: errors.New(`ent: missing required field "IncidentDebriefMessage.body"`)}
	}
	if len(idmc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "IncidentDebriefMessage.tenant"`)}
	}
	if len(idmc.mutation.DebriefIDs()) == 0 {
		return &ValidationError{Name: "debrief", err: errors.New(`ent: missing required edge "IncidentDebriefMessage.debrief"`)}
	}
	return nil
}

func (idmc *IncidentDebriefMessageCreate) sqlSave(ctx context.Context) (*IncidentDebriefMessage, error) {
	if err := idmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := idmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, idmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	idmc.mutation.id = &_node.ID
	idmc.mutation.done = true
	return _node, nil
}

func (idmc *IncidentDebriefMessageCreate) createSpec() (*IncidentDebriefMessage, *sqlgraph.CreateSpec) {
	var (
		_node = &IncidentDebriefMessage{config: idmc.config}
		_spec = sqlgraph.NewCreateSpec(incidentdebriefmessage.Table, sqlgraph.NewFieldSpec(incidentdebriefmessage.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = idmc.conflict
	if id, ok := idmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := idmc.mutation.CreatedAt(); ok {
		_spec.SetField(incidentdebriefmessage.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := idmc.mutation.GetType(); ok {
		_spec.SetField(incidentdebriefmessage.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := idmc.mutation.RequestedTool(); ok {
		_spec.SetField(incidentdebriefmessage.FieldRequestedTool, field.TypeEnum, value)
		_node.RequestedTool = value
	}
	if value, ok := idmc.mutation.Body(); ok {
		_spec.SetField(incidentdebriefmessage.FieldBody, field.TypeString, value)
		_node.Body = value
	}
	if nodes := idmc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentdebriefmessage.TenantTable,
			Columns: []string{incidentdebriefmessage.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := idmc.mutation.DebriefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incidentdebriefmessage.DebriefTable,
			Columns: []string{incidentdebriefmessage.DebriefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentdebrief.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DebriefID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := idmc.mutation.FromQuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentdebriefmessage.FromQuestionTable,
			Columns: []string{incidentdebriefmessage.FromQuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentdebriefquestion.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.QuestionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IncidentDebriefMessage.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IncidentDebriefMessageUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (idmc *IncidentDebriefMessageCreate) OnConflict(opts ...sql.ConflictOption) *IncidentDebriefMessageUpsertOne {
	idmc.conflict = opts
	return &IncidentDebriefMessageUpsertOne{
		create: idmc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IncidentDebriefMessage.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (idmc *IncidentDebriefMessageCreate) OnConflictColumns(columns ...string) *IncidentDebriefMessageUpsertOne {
	idmc.conflict = append(idmc.conflict, sql.ConflictColumns(columns...))
	return &IncidentDebriefMessageUpsertOne{
		create: idmc,
	}
}

type (
	// IncidentDebriefMessageUpsertOne is the builder for "upsert"-ing
	//  one IncidentDebriefMessage node.
	IncidentDebriefMessageUpsertOne struct {
		create *IncidentDebriefMessageCreate
	}

	// IncidentDebriefMessageUpsert is the "OnConflict" setter.
	IncidentDebriefMessageUpsert struct {
		*sql.UpdateSet
	}
)

// SetDebriefID sets the "debrief_id" field.
func (u *IncidentDebriefMessageUpsert) SetDebriefID(v uuid.UUID) *IncidentDebriefMessageUpsert {
	u.Set(incidentdebriefmessage.FieldDebriefID, v)
	return u
}

// UpdateDebriefID sets the "debrief_id" field to the value that was provided on create.
func (u *IncidentDebriefMessageUpsert) UpdateDebriefID() *IncidentDebriefMessageUpsert {
	u.SetExcluded(incidentdebriefmessage.FieldDebriefID)
	return u
}

// SetQuestionID sets the "question_id" field.
func (u *IncidentDebriefMessageUpsert) SetQuestionID(v uuid.UUID) *IncidentDebriefMessageUpsert {
	u.Set(incidentdebriefmessage.FieldQuestionID, v)
	return u
}

// UpdateQuestionID sets the "question_id" field to the value that was provided on create.
func (u *IncidentDebriefMessageUpsert) UpdateQuestionID() *IncidentDebriefMessageUpsert {
	u.SetExcluded(incidentdebriefmessage.FieldQuestionID)
	return u
}

// ClearQuestionID clears the value of the "question_id" field.
func (u *IncidentDebriefMessageUpsert) ClearQuestionID() *IncidentDebriefMessageUpsert {
	u.SetNull(incidentdebriefmessage.FieldQuestionID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *IncidentDebriefMessageUpsert) SetCreatedAt(v time.Time) *IncidentDebriefMessageUpsert {
	u.Set(incidentdebriefmessage.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *IncidentDebriefMessageUpsert) UpdateCreatedAt() *IncidentDebriefMessageUpsert {
	u.SetExcluded(incidentdebriefmessage.FieldCreatedAt)
	return u
}

// SetType sets the "type" field.
func (u *IncidentDebriefMessageUpsert) SetType(v incidentdebriefmessage.Type) *IncidentDebriefMessageUpsert {
	u.Set(incidentdebriefmessage.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *IncidentDebriefMessageUpsert) UpdateType() *IncidentDebriefMessageUpsert {
	u.SetExcluded(incidentdebriefmessage.FieldType)
	return u
}

// SetRequestedTool sets the "requested_tool" field.
func (u *IncidentDebriefMessageUpsert) SetRequestedTool(v incidentdebriefmessage.RequestedTool) *IncidentDebriefMessageUpsert {
	u.Set(incidentdebriefmessage.FieldRequestedTool, v)
	return u
}

// UpdateRequestedTool sets the "requested_tool" field to the value that was provided on create.
func (u *IncidentDebriefMessageUpsert) UpdateRequestedTool() *IncidentDebriefMessageUpsert {
	u.SetExcluded(incidentdebriefmessage.FieldRequestedTool)
	return u
}

// ClearRequestedTool clears the value of the "requested_tool" field.
func (u *IncidentDebriefMessageUpsert) ClearRequestedTool() *IncidentDebriefMessageUpsert {
	u.SetNull(incidentdebriefmessage.FieldRequestedTool)
	return u
}

// SetBody sets the "body" field.
func (u *IncidentDebriefMessageUpsert) SetBody(v string) *IncidentDebriefMessageUpsert {
	u.Set(incidentdebriefmessage.FieldBody, v)
	return u
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *IncidentDebriefMessageUpsert) UpdateBody() *IncidentDebriefMessageUpsert {
	u.SetExcluded(incidentdebriefmessage.FieldBody)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.IncidentDebriefMessage.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(incidentdebriefmessage.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IncidentDebriefMessageUpsertOne) UpdateNewValues() *IncidentDebriefMessageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(incidentdebriefmessage.FieldID)
		}
		if _, exists := u.create.mutation.TenantID(); exists {
			s.SetIgnore(incidentdebriefmessage.FieldTenantID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IncidentDebriefMessage.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *IncidentDebriefMessageUpsertOne) Ignore() *IncidentDebriefMessageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IncidentDebriefMessageUpsertOne) DoNothing() *IncidentDebriefMessageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IncidentDebriefMessageCreate.OnConflict
// documentation for more info.
func (u *IncidentDebriefMessageUpsertOne) Update(set func(*IncidentDebriefMessageUpsert)) *IncidentDebriefMessageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IncidentDebriefMessageUpsert{UpdateSet: update})
	}))
	return u
}

// SetDebriefID sets the "debrief_id" field.
func (u *IncidentDebriefMessageUpsertOne) SetDebriefID(v uuid.UUID) *IncidentDebriefMessageUpsertOne {
	return u.Update(func(s *IncidentDebriefMessageUpsert) {
		s.SetDebriefID(v)
	})
}

// UpdateDebriefID sets the "debrief_id" field to the value that was provided on create.
func (u *IncidentDebriefMessageUpsertOne) UpdateDebriefID() *IncidentDebriefMessageUpsertOne {
	return u.Update(func(s *IncidentDebriefMessageUpsert) {
		s.UpdateDebriefID()
	})
}

// SetQuestionID sets the "question_id" field.
func (u *IncidentDebriefMessageUpsertOne) SetQuestionID(v uuid.UUID) *IncidentDebriefMessageUpsertOne {
	return u.Update(func(s *IncidentDebriefMessageUpsert) {
		s.SetQuestionID(v)
	})
}

// UpdateQuestionID sets the "question_id" field to the value that was provided on create.
func (u *IncidentDebriefMessageUpsertOne) UpdateQuestionID() *IncidentDebriefMessageUpsertOne {
	return u.Update(func(s *IncidentDebriefMessageUpsert) {
		s.UpdateQuestionID()
	})
}

// ClearQuestionID clears the value of the "question_id" field.
func (u *IncidentDebriefMessageUpsertOne) ClearQuestionID() *IncidentDebriefMessageUpsertOne {
	return u.Update(func(s *IncidentDebriefMessageUpsert) {
		s.ClearQuestionID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *IncidentDebriefMessageUpsertOne) SetCreatedAt(v time.Time) *IncidentDebriefMessageUpsertOne {
	return u.Update(func(s *IncidentDebriefMessageUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *IncidentDebriefMessageUpsertOne) UpdateCreatedAt() *IncidentDebriefMessageUpsertOne {
	return u.Update(func(s *IncidentDebriefMessageUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetType sets the "type" field.
func (u *IncidentDebriefMessageUpsertOne) SetType(v incidentdebriefmessage.Type) *IncidentDebriefMessageUpsertOne {
	return u.Update(func(s *IncidentDebriefMessageUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *IncidentDebriefMessageUpsertOne) UpdateType() *IncidentDebriefMessageUpsertOne {
	return u.Update(func(s *IncidentDebriefMessageUpsert) {
		s.UpdateType()
	})
}

// SetRequestedTool sets the "requested_tool" field.
func (u *IncidentDebriefMessageUpsertOne) SetRequestedTool(v incidentdebriefmessage.RequestedTool) *IncidentDebriefMessageUpsertOne {
	return u.Update(func(s *IncidentDebriefMessageUpsert) {
		s.SetRequestedTool(v)
	})
}

// UpdateRequestedTool sets the "requested_tool" field to the value that was provided on create.
func (u *IncidentDebriefMessageUpsertOne) UpdateRequestedTool() *IncidentDebriefMessageUpsertOne {
	return u.Update(func(s *IncidentDebriefMessageUpsert) {
		s.UpdateRequestedTool()
	})
}

// ClearRequestedTool clears the value of the "requested_tool" field.
func (u *IncidentDebriefMessageUpsertOne) ClearRequestedTool() *IncidentDebriefMessageUpsertOne {
	return u.Update(func(s *IncidentDebriefMessageUpsert) {
		s.ClearRequestedTool()
	})
}

// SetBody sets the "body" field.
func (u *IncidentDebriefMessageUpsertOne) SetBody(v string) *IncidentDebriefMessageUpsertOne {
	return u.Update(func(s *IncidentDebriefMessageUpsert) {
		s.SetBody(v)
	})
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *IncidentDebriefMessageUpsertOne) UpdateBody() *IncidentDebriefMessageUpsertOne {
	return u.Update(func(s *IncidentDebriefMessageUpsert) {
		s.UpdateBody()
	})
}

// Exec executes the query.
func (u *IncidentDebriefMessageUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IncidentDebriefMessageCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IncidentDebriefMessageUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *IncidentDebriefMessageUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: IncidentDebriefMessageUpsertOne.ID is not supported by MySQL driver. Use IncidentDebriefMessageUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *IncidentDebriefMessageUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// IncidentDebriefMessageCreateBulk is the builder for creating many IncidentDebriefMessage entities in bulk.
type IncidentDebriefMessageCreateBulk struct {
	config
	err      error
	builders []*IncidentDebriefMessageCreate
	conflict []sql.ConflictOption
}

// Save creates the IncidentDebriefMessage entities in the database.
func (idmcb *IncidentDebriefMessageCreateBulk) Save(ctx context.Context) ([]*IncidentDebriefMessage, error) {
	if idmcb.err != nil {
		return nil, idmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(idmcb.builders))
	nodes := make([]*IncidentDebriefMessage, len(idmcb.builders))
	mutators := make([]Mutator, len(idmcb.builders))
	for i := range idmcb.builders {
		func(i int, root context.Context) {
			builder := idmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IncidentDebriefMessageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, idmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = idmcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, idmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, idmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (idmcb *IncidentDebriefMessageCreateBulk) SaveX(ctx context.Context) []*IncidentDebriefMessage {
	v, err := idmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (idmcb *IncidentDebriefMessageCreateBulk) Exec(ctx context.Context) error {
	_, err := idmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (idmcb *IncidentDebriefMessageCreateBulk) ExecX(ctx context.Context) {
	if err := idmcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IncidentDebriefMessage.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IncidentDebriefMessageUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (idmcb *IncidentDebriefMessageCreateBulk) OnConflict(opts ...sql.ConflictOption) *IncidentDebriefMessageUpsertBulk {
	idmcb.conflict = opts
	return &IncidentDebriefMessageUpsertBulk{
		create: idmcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IncidentDebriefMessage.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (idmcb *IncidentDebriefMessageCreateBulk) OnConflictColumns(columns ...string) *IncidentDebriefMessageUpsertBulk {
	idmcb.conflict = append(idmcb.conflict, sql.ConflictColumns(columns...))
	return &IncidentDebriefMessageUpsertBulk{
		create: idmcb,
	}
}

// IncidentDebriefMessageUpsertBulk is the builder for "upsert"-ing
// a bulk of IncidentDebriefMessage nodes.
type IncidentDebriefMessageUpsertBulk struct {
	create *IncidentDebriefMessageCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.IncidentDebriefMessage.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(incidentdebriefmessage.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IncidentDebriefMessageUpsertBulk) UpdateNewValues() *IncidentDebriefMessageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(incidentdebriefmessage.FieldID)
			}
			if _, exists := b.mutation.TenantID(); exists {
				s.SetIgnore(incidentdebriefmessage.FieldTenantID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IncidentDebriefMessage.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *IncidentDebriefMessageUpsertBulk) Ignore() *IncidentDebriefMessageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IncidentDebriefMessageUpsertBulk) DoNothing() *IncidentDebriefMessageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IncidentDebriefMessageCreateBulk.OnConflict
// documentation for more info.
func (u *IncidentDebriefMessageUpsertBulk) Update(set func(*IncidentDebriefMessageUpsert)) *IncidentDebriefMessageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IncidentDebriefMessageUpsert{UpdateSet: update})
	}))
	return u
}

// SetDebriefID sets the "debrief_id" field.
func (u *IncidentDebriefMessageUpsertBulk) SetDebriefID(v uuid.UUID) *IncidentDebriefMessageUpsertBulk {
	return u.Update(func(s *IncidentDebriefMessageUpsert) {
		s.SetDebriefID(v)
	})
}

// UpdateDebriefID sets the "debrief_id" field to the value that was provided on create.
func (u *IncidentDebriefMessageUpsertBulk) UpdateDebriefID() *IncidentDebriefMessageUpsertBulk {
	return u.Update(func(s *IncidentDebriefMessageUpsert) {
		s.UpdateDebriefID()
	})
}

// SetQuestionID sets the "question_id" field.
func (u *IncidentDebriefMessageUpsertBulk) SetQuestionID(v uuid.UUID) *IncidentDebriefMessageUpsertBulk {
	return u.Update(func(s *IncidentDebriefMessageUpsert) {
		s.SetQuestionID(v)
	})
}

// UpdateQuestionID sets the "question_id" field to the value that was provided on create.
func (u *IncidentDebriefMessageUpsertBulk) UpdateQuestionID() *IncidentDebriefMessageUpsertBulk {
	return u.Update(func(s *IncidentDebriefMessageUpsert) {
		s.UpdateQuestionID()
	})
}

// ClearQuestionID clears the value of the "question_id" field.
func (u *IncidentDebriefMessageUpsertBulk) ClearQuestionID() *IncidentDebriefMessageUpsertBulk {
	return u.Update(func(s *IncidentDebriefMessageUpsert) {
		s.ClearQuestionID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *IncidentDebriefMessageUpsertBulk) SetCreatedAt(v time.Time) *IncidentDebriefMessageUpsertBulk {
	return u.Update(func(s *IncidentDebriefMessageUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *IncidentDebriefMessageUpsertBulk) UpdateCreatedAt() *IncidentDebriefMessageUpsertBulk {
	return u.Update(func(s *IncidentDebriefMessageUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetType sets the "type" field.
func (u *IncidentDebriefMessageUpsertBulk) SetType(v incidentdebriefmessage.Type) *IncidentDebriefMessageUpsertBulk {
	return u.Update(func(s *IncidentDebriefMessageUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *IncidentDebriefMessageUpsertBulk) UpdateType() *IncidentDebriefMessageUpsertBulk {
	return u.Update(func(s *IncidentDebriefMessageUpsert) {
		s.UpdateType()
	})
}

// SetRequestedTool sets the "requested_tool" field.
func (u *IncidentDebriefMessageUpsertBulk) SetRequestedTool(v incidentdebriefmessage.RequestedTool) *IncidentDebriefMessageUpsertBulk {
	return u.Update(func(s *IncidentDebriefMessageUpsert) {
		s.SetRequestedTool(v)
	})
}

// UpdateRequestedTool sets the "requested_tool" field to the value that was provided on create.
func (u *IncidentDebriefMessageUpsertBulk) UpdateRequestedTool() *IncidentDebriefMessageUpsertBulk {
	return u.Update(func(s *IncidentDebriefMessageUpsert) {
		s.UpdateRequestedTool()
	})
}

// ClearRequestedTool clears the value of the "requested_tool" field.
func (u *IncidentDebriefMessageUpsertBulk) ClearRequestedTool() *IncidentDebriefMessageUpsertBulk {
	return u.Update(func(s *IncidentDebriefMessageUpsert) {
		s.ClearRequestedTool()
	})
}

// SetBody sets the "body" field.
func (u *IncidentDebriefMessageUpsertBulk) SetBody(v string) *IncidentDebriefMessageUpsertBulk {
	return u.Update(func(s *IncidentDebriefMessageUpsert) {
		s.SetBody(v)
	})
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *IncidentDebriefMessageUpsertBulk) UpdateBody() *IncidentDebriefMessageUpsertBulk {
	return u.Update(func(s *IncidentDebriefMessageUpsert) {
		s.UpdateBody()
	})
}

// Exec executes the query.
func (u *IncidentDebriefMessageUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the IncidentDebriefMessageCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IncidentDebriefMessageCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IncidentDebriefMessageUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
