// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/systemanalysis"
	"github.com/rezible/rezible/ent/systemanalysisrelationship"
	"github.com/rezible/rezible/ent/systemcomponentcontrol"
	"github.com/rezible/rezible/ent/systemcomponentrelationship"
	"github.com/rezible/rezible/ent/systemcomponentsignal"
	"github.com/rezible/rezible/ent/systemrelationshipcontrolaction"
	"github.com/rezible/rezible/ent/systemrelationshipfeedbacksignal"
)

// SystemAnalysisRelationshipQuery is the builder for querying SystemAnalysisRelationship entities.
type SystemAnalysisRelationshipQuery struct {
	config
	ctx                       *QueryContext
	order                     []systemanalysisrelationship.OrderOption
	inters                    []Interceptor
	predicates                []predicate.SystemAnalysisRelationship
	withSystemAnalysis        *SystemAnalysisQuery
	withComponentRelationship *SystemComponentRelationshipQuery
	withControls              *SystemComponentControlQuery
	withSignals               *SystemComponentSignalQuery
	withControlActions        *SystemRelationshipControlActionQuery
	withFeedbackSignals       *SystemRelationshipFeedbackSignalQuery
	modifiers                 []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SystemAnalysisRelationshipQuery builder.
func (sarq *SystemAnalysisRelationshipQuery) Where(ps ...predicate.SystemAnalysisRelationship) *SystemAnalysisRelationshipQuery {
	sarq.predicates = append(sarq.predicates, ps...)
	return sarq
}

// Limit the number of records to be returned by this query.
func (sarq *SystemAnalysisRelationshipQuery) Limit(limit int) *SystemAnalysisRelationshipQuery {
	sarq.ctx.Limit = &limit
	return sarq
}

// Offset to start from.
func (sarq *SystemAnalysisRelationshipQuery) Offset(offset int) *SystemAnalysisRelationshipQuery {
	sarq.ctx.Offset = &offset
	return sarq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sarq *SystemAnalysisRelationshipQuery) Unique(unique bool) *SystemAnalysisRelationshipQuery {
	sarq.ctx.Unique = &unique
	return sarq
}

// Order specifies how the records should be ordered.
func (sarq *SystemAnalysisRelationshipQuery) Order(o ...systemanalysisrelationship.OrderOption) *SystemAnalysisRelationshipQuery {
	sarq.order = append(sarq.order, o...)
	return sarq
}

// QuerySystemAnalysis chains the current query on the "system_analysis" edge.
func (sarq *SystemAnalysisRelationshipQuery) QuerySystemAnalysis() *SystemAnalysisQuery {
	query := (&SystemAnalysisClient{config: sarq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sarq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sarq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(systemanalysisrelationship.Table, systemanalysisrelationship.FieldID, selector),
			sqlgraph.To(systemanalysis.Table, systemanalysis.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, systemanalysisrelationship.SystemAnalysisTable, systemanalysisrelationship.SystemAnalysisColumn),
		)
		fromU = sqlgraph.SetNeighbors(sarq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryComponentRelationship chains the current query on the "component_relationship" edge.
func (sarq *SystemAnalysisRelationshipQuery) QueryComponentRelationship() *SystemComponentRelationshipQuery {
	query := (&SystemComponentRelationshipClient{config: sarq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sarq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sarq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(systemanalysisrelationship.Table, systemanalysisrelationship.FieldID, selector),
			sqlgraph.To(systemcomponentrelationship.Table, systemcomponentrelationship.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, systemanalysisrelationship.ComponentRelationshipTable, systemanalysisrelationship.ComponentRelationshipColumn),
		)
		fromU = sqlgraph.SetNeighbors(sarq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryControls chains the current query on the "controls" edge.
func (sarq *SystemAnalysisRelationshipQuery) QueryControls() *SystemComponentControlQuery {
	query := (&SystemComponentControlClient{config: sarq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sarq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sarq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(systemanalysisrelationship.Table, systemanalysisrelationship.FieldID, selector),
			sqlgraph.To(systemcomponentcontrol.Table, systemcomponentcontrol.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, systemanalysisrelationship.ControlsTable, systemanalysisrelationship.ControlsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(sarq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySignals chains the current query on the "signals" edge.
func (sarq *SystemAnalysisRelationshipQuery) QuerySignals() *SystemComponentSignalQuery {
	query := (&SystemComponentSignalClient{config: sarq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sarq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sarq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(systemanalysisrelationship.Table, systemanalysisrelationship.FieldID, selector),
			sqlgraph.To(systemcomponentsignal.Table, systemcomponentsignal.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, systemanalysisrelationship.SignalsTable, systemanalysisrelationship.SignalsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(sarq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryControlActions chains the current query on the "control_actions" edge.
func (sarq *SystemAnalysisRelationshipQuery) QueryControlActions() *SystemRelationshipControlActionQuery {
	query := (&SystemRelationshipControlActionClient{config: sarq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sarq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sarq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(systemanalysisrelationship.Table, systemanalysisrelationship.FieldID, selector),
			sqlgraph.To(systemrelationshipcontrolaction.Table, systemrelationshipcontrolaction.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, systemanalysisrelationship.ControlActionsTable, systemanalysisrelationship.ControlActionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(sarq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFeedbackSignals chains the current query on the "feedback_signals" edge.
func (sarq *SystemAnalysisRelationshipQuery) QueryFeedbackSignals() *SystemRelationshipFeedbackSignalQuery {
	query := (&SystemRelationshipFeedbackSignalClient{config: sarq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sarq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sarq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(systemanalysisrelationship.Table, systemanalysisrelationship.FieldID, selector),
			sqlgraph.To(systemrelationshipfeedbacksignal.Table, systemrelationshipfeedbacksignal.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, systemanalysisrelationship.FeedbackSignalsTable, systemanalysisrelationship.FeedbackSignalsColumn),
		)
		fromU = sqlgraph.SetNeighbors(sarq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SystemAnalysisRelationship entity from the query.
// Returns a *NotFoundError when no SystemAnalysisRelationship was found.
func (sarq *SystemAnalysisRelationshipQuery) First(ctx context.Context) (*SystemAnalysisRelationship, error) {
	nodes, err := sarq.Limit(1).All(setContextOp(ctx, sarq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{systemanalysisrelationship.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sarq *SystemAnalysisRelationshipQuery) FirstX(ctx context.Context) *SystemAnalysisRelationship {
	node, err := sarq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SystemAnalysisRelationship ID from the query.
// Returns a *NotFoundError when no SystemAnalysisRelationship ID was found.
func (sarq *SystemAnalysisRelationshipQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = sarq.Limit(1).IDs(setContextOp(ctx, sarq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{systemanalysisrelationship.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sarq *SystemAnalysisRelationshipQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := sarq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SystemAnalysisRelationship entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SystemAnalysisRelationship entity is found.
// Returns a *NotFoundError when no SystemAnalysisRelationship entities are found.
func (sarq *SystemAnalysisRelationshipQuery) Only(ctx context.Context) (*SystemAnalysisRelationship, error) {
	nodes, err := sarq.Limit(2).All(setContextOp(ctx, sarq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{systemanalysisrelationship.Label}
	default:
		return nil, &NotSingularError{systemanalysisrelationship.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sarq *SystemAnalysisRelationshipQuery) OnlyX(ctx context.Context) *SystemAnalysisRelationship {
	node, err := sarq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SystemAnalysisRelationship ID in the query.
// Returns a *NotSingularError when more than one SystemAnalysisRelationship ID is found.
// Returns a *NotFoundError when no entities are found.
func (sarq *SystemAnalysisRelationshipQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = sarq.Limit(2).IDs(setContextOp(ctx, sarq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{systemanalysisrelationship.Label}
	default:
		err = &NotSingularError{systemanalysisrelationship.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sarq *SystemAnalysisRelationshipQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := sarq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SystemAnalysisRelationships.
func (sarq *SystemAnalysisRelationshipQuery) All(ctx context.Context) ([]*SystemAnalysisRelationship, error) {
	ctx = setContextOp(ctx, sarq.ctx, ent.OpQueryAll)
	if err := sarq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SystemAnalysisRelationship, *SystemAnalysisRelationshipQuery]()
	return withInterceptors[[]*SystemAnalysisRelationship](ctx, sarq, qr, sarq.inters)
}

// AllX is like All, but panics if an error occurs.
func (sarq *SystemAnalysisRelationshipQuery) AllX(ctx context.Context) []*SystemAnalysisRelationship {
	nodes, err := sarq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SystemAnalysisRelationship IDs.
func (sarq *SystemAnalysisRelationshipQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if sarq.ctx.Unique == nil && sarq.path != nil {
		sarq.Unique(true)
	}
	ctx = setContextOp(ctx, sarq.ctx, ent.OpQueryIDs)
	if err = sarq.Select(systemanalysisrelationship.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sarq *SystemAnalysisRelationshipQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := sarq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sarq *SystemAnalysisRelationshipQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, sarq.ctx, ent.OpQueryCount)
	if err := sarq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, sarq, querierCount[*SystemAnalysisRelationshipQuery](), sarq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (sarq *SystemAnalysisRelationshipQuery) CountX(ctx context.Context) int {
	count, err := sarq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sarq *SystemAnalysisRelationshipQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, sarq.ctx, ent.OpQueryExist)
	switch _, err := sarq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (sarq *SystemAnalysisRelationshipQuery) ExistX(ctx context.Context) bool {
	exist, err := sarq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SystemAnalysisRelationshipQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sarq *SystemAnalysisRelationshipQuery) Clone() *SystemAnalysisRelationshipQuery {
	if sarq == nil {
		return nil
	}
	return &SystemAnalysisRelationshipQuery{
		config:                    sarq.config,
		ctx:                       sarq.ctx.Clone(),
		order:                     append([]systemanalysisrelationship.OrderOption{}, sarq.order...),
		inters:                    append([]Interceptor{}, sarq.inters...),
		predicates:                append([]predicate.SystemAnalysisRelationship{}, sarq.predicates...),
		withSystemAnalysis:        sarq.withSystemAnalysis.Clone(),
		withComponentRelationship: sarq.withComponentRelationship.Clone(),
		withControls:              sarq.withControls.Clone(),
		withSignals:               sarq.withSignals.Clone(),
		withControlActions:        sarq.withControlActions.Clone(),
		withFeedbackSignals:       sarq.withFeedbackSignals.Clone(),
		// clone intermediate query.
		sql:       sarq.sql.Clone(),
		path:      sarq.path,
		modifiers: append([]func(*sql.Selector){}, sarq.modifiers...),
	}
}

// WithSystemAnalysis tells the query-builder to eager-load the nodes that are connected to
// the "system_analysis" edge. The optional arguments are used to configure the query builder of the edge.
func (sarq *SystemAnalysisRelationshipQuery) WithSystemAnalysis(opts ...func(*SystemAnalysisQuery)) *SystemAnalysisRelationshipQuery {
	query := (&SystemAnalysisClient{config: sarq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sarq.withSystemAnalysis = query
	return sarq
}

// WithComponentRelationship tells the query-builder to eager-load the nodes that are connected to
// the "component_relationship" edge. The optional arguments are used to configure the query builder of the edge.
func (sarq *SystemAnalysisRelationshipQuery) WithComponentRelationship(opts ...func(*SystemComponentRelationshipQuery)) *SystemAnalysisRelationshipQuery {
	query := (&SystemComponentRelationshipClient{config: sarq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sarq.withComponentRelationship = query
	return sarq
}

// WithControls tells the query-builder to eager-load the nodes that are connected to
// the "controls" edge. The optional arguments are used to configure the query builder of the edge.
func (sarq *SystemAnalysisRelationshipQuery) WithControls(opts ...func(*SystemComponentControlQuery)) *SystemAnalysisRelationshipQuery {
	query := (&SystemComponentControlClient{config: sarq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sarq.withControls = query
	return sarq
}

// WithSignals tells the query-builder to eager-load the nodes that are connected to
// the "signals" edge. The optional arguments are used to configure the query builder of the edge.
func (sarq *SystemAnalysisRelationshipQuery) WithSignals(opts ...func(*SystemComponentSignalQuery)) *SystemAnalysisRelationshipQuery {
	query := (&SystemComponentSignalClient{config: sarq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sarq.withSignals = query
	return sarq
}

// WithControlActions tells the query-builder to eager-load the nodes that are connected to
// the "control_actions" edge. The optional arguments are used to configure the query builder of the edge.
func (sarq *SystemAnalysisRelationshipQuery) WithControlActions(opts ...func(*SystemRelationshipControlActionQuery)) *SystemAnalysisRelationshipQuery {
	query := (&SystemRelationshipControlActionClient{config: sarq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sarq.withControlActions = query
	return sarq
}

// WithFeedbackSignals tells the query-builder to eager-load the nodes that are connected to
// the "feedback_signals" edge. The optional arguments are used to configure the query builder of the edge.
func (sarq *SystemAnalysisRelationshipQuery) WithFeedbackSignals(opts ...func(*SystemRelationshipFeedbackSignalQuery)) *SystemAnalysisRelationshipQuery {
	query := (&SystemRelationshipFeedbackSignalClient{config: sarq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sarq.withFeedbackSignals = query
	return sarq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		AnalysisID uuid.UUID `json:"analysis_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SystemAnalysisRelationship.Query().
//		GroupBy(systemanalysisrelationship.FieldAnalysisID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (sarq *SystemAnalysisRelationshipQuery) GroupBy(field string, fields ...string) *SystemAnalysisRelationshipGroupBy {
	sarq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SystemAnalysisRelationshipGroupBy{build: sarq}
	grbuild.flds = &sarq.ctx.Fields
	grbuild.label = systemanalysisrelationship.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		AnalysisID uuid.UUID `json:"analysis_id,omitempty"`
//	}
//
//	client.SystemAnalysisRelationship.Query().
//		Select(systemanalysisrelationship.FieldAnalysisID).
//		Scan(ctx, &v)
func (sarq *SystemAnalysisRelationshipQuery) Select(fields ...string) *SystemAnalysisRelationshipSelect {
	sarq.ctx.Fields = append(sarq.ctx.Fields, fields...)
	sbuild := &SystemAnalysisRelationshipSelect{SystemAnalysisRelationshipQuery: sarq}
	sbuild.label = systemanalysisrelationship.Label
	sbuild.flds, sbuild.scan = &sarq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SystemAnalysisRelationshipSelect configured with the given aggregations.
func (sarq *SystemAnalysisRelationshipQuery) Aggregate(fns ...AggregateFunc) *SystemAnalysisRelationshipSelect {
	return sarq.Select().Aggregate(fns...)
}

func (sarq *SystemAnalysisRelationshipQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range sarq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, sarq); err != nil {
				return err
			}
		}
	}
	for _, f := range sarq.ctx.Fields {
		if !systemanalysisrelationship.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if sarq.path != nil {
		prev, err := sarq.path(ctx)
		if err != nil {
			return err
		}
		sarq.sql = prev
	}
	if systemanalysisrelationship.Policy == nil {
		return errors.New("ent: uninitialized systemanalysisrelationship.Policy (forgotten import ent/runtime?)")
	}
	if err := systemanalysisrelationship.Policy.EvalQuery(ctx, sarq); err != nil {
		return err
	}
	return nil
}

func (sarq *SystemAnalysisRelationshipQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SystemAnalysisRelationship, error) {
	var (
		nodes       = []*SystemAnalysisRelationship{}
		_spec       = sarq.querySpec()
		loadedTypes = [6]bool{
			sarq.withSystemAnalysis != nil,
			sarq.withComponentRelationship != nil,
			sarq.withControls != nil,
			sarq.withSignals != nil,
			sarq.withControlActions != nil,
			sarq.withFeedbackSignals != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SystemAnalysisRelationship).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SystemAnalysisRelationship{config: sarq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(sarq.modifiers) > 0 {
		_spec.Modifiers = sarq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sarq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := sarq.withSystemAnalysis; query != nil {
		if err := sarq.loadSystemAnalysis(ctx, query, nodes, nil,
			func(n *SystemAnalysisRelationship, e *SystemAnalysis) { n.Edges.SystemAnalysis = e }); err != nil {
			return nil, err
		}
	}
	if query := sarq.withComponentRelationship; query != nil {
		if err := sarq.loadComponentRelationship(ctx, query, nodes, nil,
			func(n *SystemAnalysisRelationship, e *SystemComponentRelationship) { n.Edges.ComponentRelationship = e }); err != nil {
			return nil, err
		}
	}
	if query := sarq.withControls; query != nil {
		if err := sarq.loadControls(ctx, query, nodes,
			func(n *SystemAnalysisRelationship) { n.Edges.Controls = []*SystemComponentControl{} },
			func(n *SystemAnalysisRelationship, e *SystemComponentControl) {
				n.Edges.Controls = append(n.Edges.Controls, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := sarq.withSignals; query != nil {
		if err := sarq.loadSignals(ctx, query, nodes,
			func(n *SystemAnalysisRelationship) { n.Edges.Signals = []*SystemComponentSignal{} },
			func(n *SystemAnalysisRelationship, e *SystemComponentSignal) {
				n.Edges.Signals = append(n.Edges.Signals, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := sarq.withControlActions; query != nil {
		if err := sarq.loadControlActions(ctx, query, nodes,
			func(n *SystemAnalysisRelationship) { n.Edges.ControlActions = []*SystemRelationshipControlAction{} },
			func(n *SystemAnalysisRelationship, e *SystemRelationshipControlAction) {
				n.Edges.ControlActions = append(n.Edges.ControlActions, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := sarq.withFeedbackSignals; query != nil {
		if err := sarq.loadFeedbackSignals(ctx, query, nodes,
			func(n *SystemAnalysisRelationship) { n.Edges.FeedbackSignals = []*SystemRelationshipFeedbackSignal{} },
			func(n *SystemAnalysisRelationship, e *SystemRelationshipFeedbackSignal) {
				n.Edges.FeedbackSignals = append(n.Edges.FeedbackSignals, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (sarq *SystemAnalysisRelationshipQuery) loadSystemAnalysis(ctx context.Context, query *SystemAnalysisQuery, nodes []*SystemAnalysisRelationship, init func(*SystemAnalysisRelationship), assign func(*SystemAnalysisRelationship, *SystemAnalysis)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*SystemAnalysisRelationship)
	for i := range nodes {
		fk := nodes[i].AnalysisID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(systemanalysis.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "analysis_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sarq *SystemAnalysisRelationshipQuery) loadComponentRelationship(ctx context.Context, query *SystemComponentRelationshipQuery, nodes []*SystemAnalysisRelationship, init func(*SystemAnalysisRelationship), assign func(*SystemAnalysisRelationship, *SystemComponentRelationship)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*SystemAnalysisRelationship)
	for i := range nodes {
		fk := nodes[i].ComponentRelationshipID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(systemcomponentrelationship.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "component_relationship_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sarq *SystemAnalysisRelationshipQuery) loadControls(ctx context.Context, query *SystemComponentControlQuery, nodes []*SystemAnalysisRelationship, init func(*SystemAnalysisRelationship), assign func(*SystemAnalysisRelationship, *SystemComponentControl)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*SystemAnalysisRelationship)
	nids := make(map[uuid.UUID]map[*SystemAnalysisRelationship]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(systemanalysisrelationship.ControlsTable)
		s.Join(joinT).On(s.C(systemcomponentcontrol.FieldID), joinT.C(systemanalysisrelationship.ControlsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(systemanalysisrelationship.ControlsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(systemanalysisrelationship.ControlsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*SystemAnalysisRelationship]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*SystemComponentControl](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "controls" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (sarq *SystemAnalysisRelationshipQuery) loadSignals(ctx context.Context, query *SystemComponentSignalQuery, nodes []*SystemAnalysisRelationship, init func(*SystemAnalysisRelationship), assign func(*SystemAnalysisRelationship, *SystemComponentSignal)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*SystemAnalysisRelationship)
	nids := make(map[uuid.UUID]map[*SystemAnalysisRelationship]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(systemanalysisrelationship.SignalsTable)
		s.Join(joinT).On(s.C(systemcomponentsignal.FieldID), joinT.C(systemanalysisrelationship.SignalsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(systemanalysisrelationship.SignalsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(systemanalysisrelationship.SignalsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*SystemAnalysisRelationship]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*SystemComponentSignal](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "signals" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (sarq *SystemAnalysisRelationshipQuery) loadControlActions(ctx context.Context, query *SystemRelationshipControlActionQuery, nodes []*SystemAnalysisRelationship, init func(*SystemAnalysisRelationship), assign func(*SystemAnalysisRelationship, *SystemRelationshipControlAction)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*SystemAnalysisRelationship)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(systemrelationshipcontrolaction.FieldRelationshipID)
	}
	query.Where(predicate.SystemRelationshipControlAction(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(systemanalysisrelationship.ControlActionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.RelationshipID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "relationship_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (sarq *SystemAnalysisRelationshipQuery) loadFeedbackSignals(ctx context.Context, query *SystemRelationshipFeedbackSignalQuery, nodes []*SystemAnalysisRelationship, init func(*SystemAnalysisRelationship), assign func(*SystemAnalysisRelationship, *SystemRelationshipFeedbackSignal)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*SystemAnalysisRelationship)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(systemrelationshipfeedbacksignal.FieldRelationshipID)
	}
	query.Where(predicate.SystemRelationshipFeedbackSignal(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(systemanalysisrelationship.FeedbackSignalsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.RelationshipID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "relationship_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (sarq *SystemAnalysisRelationshipQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sarq.querySpec()
	if len(sarq.modifiers) > 0 {
		_spec.Modifiers = sarq.modifiers
	}
	_spec.Node.Columns = sarq.ctx.Fields
	if len(sarq.ctx.Fields) > 0 {
		_spec.Unique = sarq.ctx.Unique != nil && *sarq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, sarq.driver, _spec)
}

func (sarq *SystemAnalysisRelationshipQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(systemanalysisrelationship.Table, systemanalysisrelationship.Columns, sqlgraph.NewFieldSpec(systemanalysisrelationship.FieldID, field.TypeUUID))
	_spec.From = sarq.sql
	if unique := sarq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if sarq.path != nil {
		_spec.Unique = true
	}
	if fields := sarq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, systemanalysisrelationship.FieldID)
		for i := range fields {
			if fields[i] != systemanalysisrelationship.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if sarq.withSystemAnalysis != nil {
			_spec.Node.AddColumnOnce(systemanalysisrelationship.FieldAnalysisID)
		}
		if sarq.withComponentRelationship != nil {
			_spec.Node.AddColumnOnce(systemanalysisrelationship.FieldComponentRelationshipID)
		}
	}
	if ps := sarq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sarq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sarq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sarq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sarq *SystemAnalysisRelationshipQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sarq.driver.Dialect())
	t1 := builder.Table(systemanalysisrelationship.Table)
	columns := sarq.ctx.Fields
	if len(columns) == 0 {
		columns = systemanalysisrelationship.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sarq.sql != nil {
		selector = sarq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sarq.ctx.Unique != nil && *sarq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range sarq.modifiers {
		m(selector)
	}
	for _, p := range sarq.predicates {
		p(selector)
	}
	for _, p := range sarq.order {
		p(selector)
	}
	if offset := sarq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sarq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (sarq *SystemAnalysisRelationshipQuery) Modify(modifiers ...func(s *sql.Selector)) *SystemAnalysisRelationshipSelect {
	sarq.modifiers = append(sarq.modifiers, modifiers...)
	return sarq.Select()
}

// SystemAnalysisRelationshipGroupBy is the group-by builder for SystemAnalysisRelationship entities.
type SystemAnalysisRelationshipGroupBy struct {
	selector
	build *SystemAnalysisRelationshipQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sargb *SystemAnalysisRelationshipGroupBy) Aggregate(fns ...AggregateFunc) *SystemAnalysisRelationshipGroupBy {
	sargb.fns = append(sargb.fns, fns...)
	return sargb
}

// Scan applies the selector query and scans the result into the given value.
func (sargb *SystemAnalysisRelationshipGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sargb.build.ctx, ent.OpQueryGroupBy)
	if err := sargb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SystemAnalysisRelationshipQuery, *SystemAnalysisRelationshipGroupBy](ctx, sargb.build, sargb, sargb.build.inters, v)
}

func (sargb *SystemAnalysisRelationshipGroupBy) sqlScan(ctx context.Context, root *SystemAnalysisRelationshipQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(sargb.fns))
	for _, fn := range sargb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*sargb.flds)+len(sargb.fns))
		for _, f := range *sargb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*sargb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sargb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SystemAnalysisRelationshipSelect is the builder for selecting fields of SystemAnalysisRelationship entities.
type SystemAnalysisRelationshipSelect struct {
	*SystemAnalysisRelationshipQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (sars *SystemAnalysisRelationshipSelect) Aggregate(fns ...AggregateFunc) *SystemAnalysisRelationshipSelect {
	sars.fns = append(sars.fns, fns...)
	return sars
}

// Scan applies the selector query and scans the result into the given value.
func (sars *SystemAnalysisRelationshipSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sars.ctx, ent.OpQuerySelect)
	if err := sars.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SystemAnalysisRelationshipQuery, *SystemAnalysisRelationshipSelect](ctx, sars.SystemAnalysisRelationshipQuery, sars, sars.inters, v)
}

func (sars *SystemAnalysisRelationshipSelect) sqlScan(ctx context.Context, root *SystemAnalysisRelationshipQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(sars.fns))
	for _, fn := range sars.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*sars.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sars.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (sars *SystemAnalysisRelationshipSelect) Modify(modifiers ...func(s *sql.Selector)) *SystemAnalysisRelationshipSelect {
	sars.modifiers = append(sars.modifiers, modifiers...)
	return sars
}
