// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/oncallhandovertemplate"
	"github.com/rezible/rezible/ent/oncallroster"
	"github.com/rezible/rezible/ent/predicate"
)

// OncallHandoverTemplateUpdate is the builder for updating OncallHandoverTemplate entities.
type OncallHandoverTemplateUpdate struct {
	config
	hooks     []Hook
	mutation  *OncallHandoverTemplateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OncallHandoverTemplateUpdate builder.
func (ohtu *OncallHandoverTemplateUpdate) Where(ps ...predicate.OncallHandoverTemplate) *OncallHandoverTemplateUpdate {
	ohtu.mutation.Where(ps...)
	return ohtu
}

// SetCreatedAt sets the "created_at" field.
func (ohtu *OncallHandoverTemplateUpdate) SetCreatedAt(t time.Time) *OncallHandoverTemplateUpdate {
	ohtu.mutation.SetCreatedAt(t)
	return ohtu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ohtu *OncallHandoverTemplateUpdate) SetNillableCreatedAt(t *time.Time) *OncallHandoverTemplateUpdate {
	if t != nil {
		ohtu.SetCreatedAt(*t)
	}
	return ohtu
}

// SetUpdatedAt sets the "updated_at" field.
func (ohtu *OncallHandoverTemplateUpdate) SetUpdatedAt(t time.Time) *OncallHandoverTemplateUpdate {
	ohtu.mutation.SetUpdatedAt(t)
	return ohtu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ohtu *OncallHandoverTemplateUpdate) SetNillableUpdatedAt(t *time.Time) *OncallHandoverTemplateUpdate {
	if t != nil {
		ohtu.SetUpdatedAt(*t)
	}
	return ohtu
}

// SetContents sets the "contents" field.
func (ohtu *OncallHandoverTemplateUpdate) SetContents(b []byte) *OncallHandoverTemplateUpdate {
	ohtu.mutation.SetContents(b)
	return ohtu
}

// SetIsDefault sets the "is_default" field.
func (ohtu *OncallHandoverTemplateUpdate) SetIsDefault(b bool) *OncallHandoverTemplateUpdate {
	ohtu.mutation.SetIsDefault(b)
	return ohtu
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (ohtu *OncallHandoverTemplateUpdate) SetNillableIsDefault(b *bool) *OncallHandoverTemplateUpdate {
	if b != nil {
		ohtu.SetIsDefault(*b)
	}
	return ohtu
}

// AddRosterIDs adds the "roster" edge to the OncallRoster entity by IDs.
func (ohtu *OncallHandoverTemplateUpdate) AddRosterIDs(ids ...uuid.UUID) *OncallHandoverTemplateUpdate {
	ohtu.mutation.AddRosterIDs(ids...)
	return ohtu
}

// AddRoster adds the "roster" edges to the OncallRoster entity.
func (ohtu *OncallHandoverTemplateUpdate) AddRoster(o ...*OncallRoster) *OncallHandoverTemplateUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ohtu.AddRosterIDs(ids...)
}

// Mutation returns the OncallHandoverTemplateMutation object of the builder.
func (ohtu *OncallHandoverTemplateUpdate) Mutation() *OncallHandoverTemplateMutation {
	return ohtu.mutation
}

// ClearRoster clears all "roster" edges to the OncallRoster entity.
func (ohtu *OncallHandoverTemplateUpdate) ClearRoster() *OncallHandoverTemplateUpdate {
	ohtu.mutation.ClearRoster()
	return ohtu
}

// RemoveRosterIDs removes the "roster" edge to OncallRoster entities by IDs.
func (ohtu *OncallHandoverTemplateUpdate) RemoveRosterIDs(ids ...uuid.UUID) *OncallHandoverTemplateUpdate {
	ohtu.mutation.RemoveRosterIDs(ids...)
	return ohtu
}

// RemoveRoster removes "roster" edges to OncallRoster entities.
func (ohtu *OncallHandoverTemplateUpdate) RemoveRoster(o ...*OncallRoster) *OncallHandoverTemplateUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ohtu.RemoveRosterIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ohtu *OncallHandoverTemplateUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ohtu.sqlSave, ohtu.mutation, ohtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ohtu *OncallHandoverTemplateUpdate) SaveX(ctx context.Context) int {
	affected, err := ohtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ohtu *OncallHandoverTemplateUpdate) Exec(ctx context.Context) error {
	_, err := ohtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ohtu *OncallHandoverTemplateUpdate) ExecX(ctx context.Context) {
	if err := ohtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ohtu *OncallHandoverTemplateUpdate) check() error {
	if ohtu.mutation.TenantCleared() && len(ohtu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallHandoverTemplate.tenant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ohtu *OncallHandoverTemplateUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OncallHandoverTemplateUpdate {
	ohtu.modifiers = append(ohtu.modifiers, modifiers...)
	return ohtu
}

func (ohtu *OncallHandoverTemplateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ohtu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(oncallhandovertemplate.Table, oncallhandovertemplate.Columns, sqlgraph.NewFieldSpec(oncallhandovertemplate.FieldID, field.TypeUUID))
	if ps := ohtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ohtu.mutation.CreatedAt(); ok {
		_spec.SetField(oncallhandovertemplate.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ohtu.mutation.UpdatedAt(); ok {
		_spec.SetField(oncallhandovertemplate.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ohtu.mutation.Contents(); ok {
		_spec.SetField(oncallhandovertemplate.FieldContents, field.TypeBytes, value)
	}
	if value, ok := ohtu.mutation.IsDefault(); ok {
		_spec.SetField(oncallhandovertemplate.FieldIsDefault, field.TypeBool, value)
	}
	if ohtu.mutation.RosterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oncallhandovertemplate.RosterTable,
			Columns: []string{oncallhandovertemplate.RosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohtu.mutation.RemovedRosterIDs(); len(nodes) > 0 && !ohtu.mutation.RosterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oncallhandovertemplate.RosterTable,
			Columns: []string{oncallhandovertemplate.RosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohtu.mutation.RosterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oncallhandovertemplate.RosterTable,
			Columns: []string{oncallhandovertemplate.RosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ohtu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ohtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oncallhandovertemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ohtu.mutation.done = true
	return n, nil
}

// OncallHandoverTemplateUpdateOne is the builder for updating a single OncallHandoverTemplate entity.
type OncallHandoverTemplateUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OncallHandoverTemplateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (ohtuo *OncallHandoverTemplateUpdateOne) SetCreatedAt(t time.Time) *OncallHandoverTemplateUpdateOne {
	ohtuo.mutation.SetCreatedAt(t)
	return ohtuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ohtuo *OncallHandoverTemplateUpdateOne) SetNillableCreatedAt(t *time.Time) *OncallHandoverTemplateUpdateOne {
	if t != nil {
		ohtuo.SetCreatedAt(*t)
	}
	return ohtuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ohtuo *OncallHandoverTemplateUpdateOne) SetUpdatedAt(t time.Time) *OncallHandoverTemplateUpdateOne {
	ohtuo.mutation.SetUpdatedAt(t)
	return ohtuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ohtuo *OncallHandoverTemplateUpdateOne) SetNillableUpdatedAt(t *time.Time) *OncallHandoverTemplateUpdateOne {
	if t != nil {
		ohtuo.SetUpdatedAt(*t)
	}
	return ohtuo
}

// SetContents sets the "contents" field.
func (ohtuo *OncallHandoverTemplateUpdateOne) SetContents(b []byte) *OncallHandoverTemplateUpdateOne {
	ohtuo.mutation.SetContents(b)
	return ohtuo
}

// SetIsDefault sets the "is_default" field.
func (ohtuo *OncallHandoverTemplateUpdateOne) SetIsDefault(b bool) *OncallHandoverTemplateUpdateOne {
	ohtuo.mutation.SetIsDefault(b)
	return ohtuo
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (ohtuo *OncallHandoverTemplateUpdateOne) SetNillableIsDefault(b *bool) *OncallHandoverTemplateUpdateOne {
	if b != nil {
		ohtuo.SetIsDefault(*b)
	}
	return ohtuo
}

// AddRosterIDs adds the "roster" edge to the OncallRoster entity by IDs.
func (ohtuo *OncallHandoverTemplateUpdateOne) AddRosterIDs(ids ...uuid.UUID) *OncallHandoverTemplateUpdateOne {
	ohtuo.mutation.AddRosterIDs(ids...)
	return ohtuo
}

// AddRoster adds the "roster" edges to the OncallRoster entity.
func (ohtuo *OncallHandoverTemplateUpdateOne) AddRoster(o ...*OncallRoster) *OncallHandoverTemplateUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ohtuo.AddRosterIDs(ids...)
}

// Mutation returns the OncallHandoverTemplateMutation object of the builder.
func (ohtuo *OncallHandoverTemplateUpdateOne) Mutation() *OncallHandoverTemplateMutation {
	return ohtuo.mutation
}

// ClearRoster clears all "roster" edges to the OncallRoster entity.
func (ohtuo *OncallHandoverTemplateUpdateOne) ClearRoster() *OncallHandoverTemplateUpdateOne {
	ohtuo.mutation.ClearRoster()
	return ohtuo
}

// RemoveRosterIDs removes the "roster" edge to OncallRoster entities by IDs.
func (ohtuo *OncallHandoverTemplateUpdateOne) RemoveRosterIDs(ids ...uuid.UUID) *OncallHandoverTemplateUpdateOne {
	ohtuo.mutation.RemoveRosterIDs(ids...)
	return ohtuo
}

// RemoveRoster removes "roster" edges to OncallRoster entities.
func (ohtuo *OncallHandoverTemplateUpdateOne) RemoveRoster(o ...*OncallRoster) *OncallHandoverTemplateUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ohtuo.RemoveRosterIDs(ids...)
}

// Where appends a list predicates to the OncallHandoverTemplateUpdate builder.
func (ohtuo *OncallHandoverTemplateUpdateOne) Where(ps ...predicate.OncallHandoverTemplate) *OncallHandoverTemplateUpdateOne {
	ohtuo.mutation.Where(ps...)
	return ohtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ohtuo *OncallHandoverTemplateUpdateOne) Select(field string, fields ...string) *OncallHandoverTemplateUpdateOne {
	ohtuo.fields = append([]string{field}, fields...)
	return ohtuo
}

// Save executes the query and returns the updated OncallHandoverTemplate entity.
func (ohtuo *OncallHandoverTemplateUpdateOne) Save(ctx context.Context) (*OncallHandoverTemplate, error) {
	return withHooks(ctx, ohtuo.sqlSave, ohtuo.mutation, ohtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ohtuo *OncallHandoverTemplateUpdateOne) SaveX(ctx context.Context) *OncallHandoverTemplate {
	node, err := ohtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ohtuo *OncallHandoverTemplateUpdateOne) Exec(ctx context.Context) error {
	_, err := ohtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ohtuo *OncallHandoverTemplateUpdateOne) ExecX(ctx context.Context) {
	if err := ohtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ohtuo *OncallHandoverTemplateUpdateOne) check() error {
	if ohtuo.mutation.TenantCleared() && len(ohtuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallHandoverTemplate.tenant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ohtuo *OncallHandoverTemplateUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OncallHandoverTemplateUpdateOne {
	ohtuo.modifiers = append(ohtuo.modifiers, modifiers...)
	return ohtuo
}

func (ohtuo *OncallHandoverTemplateUpdateOne) sqlSave(ctx context.Context) (_node *OncallHandoverTemplate, err error) {
	if err := ohtuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(oncallhandovertemplate.Table, oncallhandovertemplate.Columns, sqlgraph.NewFieldSpec(oncallhandovertemplate.FieldID, field.TypeUUID))
	id, ok := ohtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OncallHandoverTemplate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ohtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oncallhandovertemplate.FieldID)
		for _, f := range fields {
			if !oncallhandovertemplate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oncallhandovertemplate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ohtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ohtuo.mutation.CreatedAt(); ok {
		_spec.SetField(oncallhandovertemplate.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ohtuo.mutation.UpdatedAt(); ok {
		_spec.SetField(oncallhandovertemplate.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ohtuo.mutation.Contents(); ok {
		_spec.SetField(oncallhandovertemplate.FieldContents, field.TypeBytes, value)
	}
	if value, ok := ohtuo.mutation.IsDefault(); ok {
		_spec.SetField(oncallhandovertemplate.FieldIsDefault, field.TypeBool, value)
	}
	if ohtuo.mutation.RosterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oncallhandovertemplate.RosterTable,
			Columns: []string{oncallhandovertemplate.RosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohtuo.mutation.RemovedRosterIDs(); len(nodes) > 0 && !ohtuo.mutation.RosterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oncallhandovertemplate.RosterTable,
			Columns: []string{oncallhandovertemplate.RosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohtuo.mutation.RosterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oncallhandovertemplate.RosterTable,
			Columns: []string{oncallhandovertemplate.RosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ohtuo.modifiers...)
	_node = &OncallHandoverTemplate{config: ohtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ohtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oncallhandovertemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ohtuo.mutation.done = true
	return _node, nil
}
