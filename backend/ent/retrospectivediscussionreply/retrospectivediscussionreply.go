// Code generated by ent, DO NOT EDIT.

package retrospectivediscussionreply

import (
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the retrospectivediscussionreply type in the database.
	Label = "retrospective_discussion_reply"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// EdgeDiscussion holds the string denoting the discussion edge name in mutations.
	EdgeDiscussion = "discussion"
	// EdgeParentReply holds the string denoting the parent_reply edge name in mutations.
	EdgeParentReply = "parent_reply"
	// EdgeReplies holds the string denoting the replies edge name in mutations.
	EdgeReplies = "replies"
	// Table holds the table name of the retrospectivediscussionreply in the database.
	Table = "retrospective_discussion_replies"
	// DiscussionTable is the table that holds the discussion relation/edge.
	DiscussionTable = "retrospective_discussion_replies"
	// DiscussionInverseTable is the table name for the RetrospectiveDiscussion entity.
	// It exists in this package in order to avoid circular dependency with the "retrospectivediscussion" package.
	DiscussionInverseTable = "retrospective_discussions"
	// DiscussionColumn is the table column denoting the discussion relation/edge.
	DiscussionColumn = "retrospective_discussion_reply_discussion"
	// ParentReplyTable is the table that holds the parent_reply relation/edge.
	ParentReplyTable = "retrospective_discussion_replies"
	// ParentReplyColumn is the table column denoting the parent_reply relation/edge.
	ParentReplyColumn = "retrospective_discussion_reply_replies"
	// RepliesTable is the table that holds the replies relation/edge.
	RepliesTable = "retrospective_discussion_replies"
	// RepliesColumn is the table column denoting the replies relation/edge.
	RepliesColumn = "retrospective_discussion_reply_replies"
)

// Columns holds all SQL columns for retrospectivediscussionreply fields.
var Columns = []string{
	FieldID,
	FieldContent,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "retrospective_discussion_replies"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"retrospective_discussion_reply_discussion",
	"retrospective_discussion_reply_replies",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/rezible/rezible/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the RetrospectiveDiscussionReply queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDiscussionField orders the results by discussion field.
func ByDiscussionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDiscussionStep(), sql.OrderByField(field, opts...))
	}
}

// ByParentReplyField orders the results by parent_reply field.
func ByParentReplyField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParentReplyStep(), sql.OrderByField(field, opts...))
	}
}

// ByRepliesCount orders the results by replies count.
func ByRepliesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRepliesStep(), opts...)
	}
}

// ByReplies orders the results by replies terms.
func ByReplies(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRepliesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newDiscussionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DiscussionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, DiscussionTable, DiscussionColumn),
	)
}
func newParentReplyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ParentReplyTable, ParentReplyColumn),
	)
}
func newRepliesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RepliesTable, RepliesColumn),
	)
}
