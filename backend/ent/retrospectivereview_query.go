// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/retrospective"
	"github.com/rezible/rezible/ent/retrospectivediscussion"
	"github.com/rezible/rezible/ent/retrospectivereview"
	"github.com/rezible/rezible/ent/user"
)

// RetrospectiveReviewQuery is the builder for querying RetrospectiveReview entities.
type RetrospectiveReviewQuery struct {
	config
	ctx               *QueryContext
	order             []retrospectivereview.OrderOption
	inters            []Interceptor
	predicates        []predicate.RetrospectiveReview
	withRetrospective *RetrospectiveQuery
	withRequester     *UserQuery
	withReviewer      *UserQuery
	withDiscussion    *RetrospectiveDiscussionQuery
	withFKs           bool
	modifiers         []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the RetrospectiveReviewQuery builder.
func (rrq *RetrospectiveReviewQuery) Where(ps ...predicate.RetrospectiveReview) *RetrospectiveReviewQuery {
	rrq.predicates = append(rrq.predicates, ps...)
	return rrq
}

// Limit the number of records to be returned by this query.
func (rrq *RetrospectiveReviewQuery) Limit(limit int) *RetrospectiveReviewQuery {
	rrq.ctx.Limit = &limit
	return rrq
}

// Offset to start from.
func (rrq *RetrospectiveReviewQuery) Offset(offset int) *RetrospectiveReviewQuery {
	rrq.ctx.Offset = &offset
	return rrq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (rrq *RetrospectiveReviewQuery) Unique(unique bool) *RetrospectiveReviewQuery {
	rrq.ctx.Unique = &unique
	return rrq
}

// Order specifies how the records should be ordered.
func (rrq *RetrospectiveReviewQuery) Order(o ...retrospectivereview.OrderOption) *RetrospectiveReviewQuery {
	rrq.order = append(rrq.order, o...)
	return rrq
}

// QueryRetrospective chains the current query on the "retrospective" edge.
func (rrq *RetrospectiveReviewQuery) QueryRetrospective() *RetrospectiveQuery {
	query := (&RetrospectiveClient{config: rrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(retrospectivereview.Table, retrospectivereview.FieldID, selector),
			sqlgraph.To(retrospective.Table, retrospective.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, retrospectivereview.RetrospectiveTable, retrospectivereview.RetrospectiveColumn),
		)
		fromU = sqlgraph.SetNeighbors(rrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRequester chains the current query on the "requester" edge.
func (rrq *RetrospectiveReviewQuery) QueryRequester() *UserQuery {
	query := (&UserClient{config: rrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(retrospectivereview.Table, retrospectivereview.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, retrospectivereview.RequesterTable, retrospectivereview.RequesterColumn),
		)
		fromU = sqlgraph.SetNeighbors(rrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReviewer chains the current query on the "reviewer" edge.
func (rrq *RetrospectiveReviewQuery) QueryReviewer() *UserQuery {
	query := (&UserClient{config: rrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(retrospectivereview.Table, retrospectivereview.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, retrospectivereview.ReviewerTable, retrospectivereview.ReviewerColumn),
		)
		fromU = sqlgraph.SetNeighbors(rrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDiscussion chains the current query on the "discussion" edge.
func (rrq *RetrospectiveReviewQuery) QueryDiscussion() *RetrospectiveDiscussionQuery {
	query := (&RetrospectiveDiscussionClient{config: rrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(retrospectivereview.Table, retrospectivereview.FieldID, selector),
			sqlgraph.To(retrospectivediscussion.Table, retrospectivediscussion.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, retrospectivereview.DiscussionTable, retrospectivereview.DiscussionColumn),
		)
		fromU = sqlgraph.SetNeighbors(rrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first RetrospectiveReview entity from the query.
// Returns a *NotFoundError when no RetrospectiveReview was found.
func (rrq *RetrospectiveReviewQuery) First(ctx context.Context) (*RetrospectiveReview, error) {
	nodes, err := rrq.Limit(1).All(setContextOp(ctx, rrq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{retrospectivereview.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rrq *RetrospectiveReviewQuery) FirstX(ctx context.Context) *RetrospectiveReview {
	node, err := rrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first RetrospectiveReview ID from the query.
// Returns a *NotFoundError when no RetrospectiveReview ID was found.
func (rrq *RetrospectiveReviewQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = rrq.Limit(1).IDs(setContextOp(ctx, rrq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{retrospectivereview.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rrq *RetrospectiveReviewQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := rrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single RetrospectiveReview entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one RetrospectiveReview entity is found.
// Returns a *NotFoundError when no RetrospectiveReview entities are found.
func (rrq *RetrospectiveReviewQuery) Only(ctx context.Context) (*RetrospectiveReview, error) {
	nodes, err := rrq.Limit(2).All(setContextOp(ctx, rrq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{retrospectivereview.Label}
	default:
		return nil, &NotSingularError{retrospectivereview.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rrq *RetrospectiveReviewQuery) OnlyX(ctx context.Context) *RetrospectiveReview {
	node, err := rrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only RetrospectiveReview ID in the query.
// Returns a *NotSingularError when more than one RetrospectiveReview ID is found.
// Returns a *NotFoundError when no entities are found.
func (rrq *RetrospectiveReviewQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = rrq.Limit(2).IDs(setContextOp(ctx, rrq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{retrospectivereview.Label}
	default:
		err = &NotSingularError{retrospectivereview.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rrq *RetrospectiveReviewQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := rrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of RetrospectiveReviews.
func (rrq *RetrospectiveReviewQuery) All(ctx context.Context) ([]*RetrospectiveReview, error) {
	ctx = setContextOp(ctx, rrq.ctx, ent.OpQueryAll)
	if err := rrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*RetrospectiveReview, *RetrospectiveReviewQuery]()
	return withInterceptors[[]*RetrospectiveReview](ctx, rrq, qr, rrq.inters)
}

// AllX is like All, but panics if an error occurs.
func (rrq *RetrospectiveReviewQuery) AllX(ctx context.Context) []*RetrospectiveReview {
	nodes, err := rrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of RetrospectiveReview IDs.
func (rrq *RetrospectiveReviewQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if rrq.ctx.Unique == nil && rrq.path != nil {
		rrq.Unique(true)
	}
	ctx = setContextOp(ctx, rrq.ctx, ent.OpQueryIDs)
	if err = rrq.Select(retrospectivereview.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rrq *RetrospectiveReviewQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := rrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rrq *RetrospectiveReviewQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, rrq.ctx, ent.OpQueryCount)
	if err := rrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, rrq, querierCount[*RetrospectiveReviewQuery](), rrq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (rrq *RetrospectiveReviewQuery) CountX(ctx context.Context) int {
	count, err := rrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rrq *RetrospectiveReviewQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, rrq.ctx, ent.OpQueryExist)
	switch _, err := rrq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (rrq *RetrospectiveReviewQuery) ExistX(ctx context.Context) bool {
	exist, err := rrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the RetrospectiveReviewQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rrq *RetrospectiveReviewQuery) Clone() *RetrospectiveReviewQuery {
	if rrq == nil {
		return nil
	}
	return &RetrospectiveReviewQuery{
		config:            rrq.config,
		ctx:               rrq.ctx.Clone(),
		order:             append([]retrospectivereview.OrderOption{}, rrq.order...),
		inters:            append([]Interceptor{}, rrq.inters...),
		predicates:        append([]predicate.RetrospectiveReview{}, rrq.predicates...),
		withRetrospective: rrq.withRetrospective.Clone(),
		withRequester:     rrq.withRequester.Clone(),
		withReviewer:      rrq.withReviewer.Clone(),
		withDiscussion:    rrq.withDiscussion.Clone(),
		// clone intermediate query.
		sql:       rrq.sql.Clone(),
		path:      rrq.path,
		modifiers: append([]func(*sql.Selector){}, rrq.modifiers...),
	}
}

// WithRetrospective tells the query-builder to eager-load the nodes that are connected to
// the "retrospective" edge. The optional arguments are used to configure the query builder of the edge.
func (rrq *RetrospectiveReviewQuery) WithRetrospective(opts ...func(*RetrospectiveQuery)) *RetrospectiveReviewQuery {
	query := (&RetrospectiveClient{config: rrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rrq.withRetrospective = query
	return rrq
}

// WithRequester tells the query-builder to eager-load the nodes that are connected to
// the "requester" edge. The optional arguments are used to configure the query builder of the edge.
func (rrq *RetrospectiveReviewQuery) WithRequester(opts ...func(*UserQuery)) *RetrospectiveReviewQuery {
	query := (&UserClient{config: rrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rrq.withRequester = query
	return rrq
}

// WithReviewer tells the query-builder to eager-load the nodes that are connected to
// the "reviewer" edge. The optional arguments are used to configure the query builder of the edge.
func (rrq *RetrospectiveReviewQuery) WithReviewer(opts ...func(*UserQuery)) *RetrospectiveReviewQuery {
	query := (&UserClient{config: rrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rrq.withReviewer = query
	return rrq
}

// WithDiscussion tells the query-builder to eager-load the nodes that are connected to
// the "discussion" edge. The optional arguments are used to configure the query builder of the edge.
func (rrq *RetrospectiveReviewQuery) WithDiscussion(opts ...func(*RetrospectiveDiscussionQuery)) *RetrospectiveReviewQuery {
	query := (&RetrospectiveDiscussionClient{config: rrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rrq.withDiscussion = query
	return rrq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		RetrospectiveID uuid.UUID `json:"retrospective_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.RetrospectiveReview.Query().
//		GroupBy(retrospectivereview.FieldRetrospectiveID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (rrq *RetrospectiveReviewQuery) GroupBy(field string, fields ...string) *RetrospectiveReviewGroupBy {
	rrq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &RetrospectiveReviewGroupBy{build: rrq}
	grbuild.flds = &rrq.ctx.Fields
	grbuild.label = retrospectivereview.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		RetrospectiveID uuid.UUID `json:"retrospective_id,omitempty"`
//	}
//
//	client.RetrospectiveReview.Query().
//		Select(retrospectivereview.FieldRetrospectiveID).
//		Scan(ctx, &v)
func (rrq *RetrospectiveReviewQuery) Select(fields ...string) *RetrospectiveReviewSelect {
	rrq.ctx.Fields = append(rrq.ctx.Fields, fields...)
	sbuild := &RetrospectiveReviewSelect{RetrospectiveReviewQuery: rrq}
	sbuild.label = retrospectivereview.Label
	sbuild.flds, sbuild.scan = &rrq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a RetrospectiveReviewSelect configured with the given aggregations.
func (rrq *RetrospectiveReviewQuery) Aggregate(fns ...AggregateFunc) *RetrospectiveReviewSelect {
	return rrq.Select().Aggregate(fns...)
}

func (rrq *RetrospectiveReviewQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range rrq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, rrq); err != nil {
				return err
			}
		}
	}
	for _, f := range rrq.ctx.Fields {
		if !retrospectivereview.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if rrq.path != nil {
		prev, err := rrq.path(ctx)
		if err != nil {
			return err
		}
		rrq.sql = prev
	}
	if retrospectivereview.Policy == nil {
		return errors.New("ent: uninitialized retrospectivereview.Policy (forgotten import ent/runtime?)")
	}
	if err := retrospectivereview.Policy.EvalQuery(ctx, rrq); err != nil {
		return err
	}
	return nil
}

func (rrq *RetrospectiveReviewQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*RetrospectiveReview, error) {
	var (
		nodes       = []*RetrospectiveReview{}
		withFKs     = rrq.withFKs
		_spec       = rrq.querySpec()
		loadedTypes = [4]bool{
			rrq.withRetrospective != nil,
			rrq.withRequester != nil,
			rrq.withReviewer != nil,
			rrq.withDiscussion != nil,
		}
	)
	if rrq.withDiscussion != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, retrospectivereview.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*RetrospectiveReview).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &RetrospectiveReview{config: rrq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(rrq.modifiers) > 0 {
		_spec.Modifiers = rrq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, rrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := rrq.withRetrospective; query != nil {
		if err := rrq.loadRetrospective(ctx, query, nodes, nil,
			func(n *RetrospectiveReview, e *Retrospective) { n.Edges.Retrospective = e }); err != nil {
			return nil, err
		}
	}
	if query := rrq.withRequester; query != nil {
		if err := rrq.loadRequester(ctx, query, nodes, nil,
			func(n *RetrospectiveReview, e *User) { n.Edges.Requester = e }); err != nil {
			return nil, err
		}
	}
	if query := rrq.withReviewer; query != nil {
		if err := rrq.loadReviewer(ctx, query, nodes, nil,
			func(n *RetrospectiveReview, e *User) { n.Edges.Reviewer = e }); err != nil {
			return nil, err
		}
	}
	if query := rrq.withDiscussion; query != nil {
		if err := rrq.loadDiscussion(ctx, query, nodes, nil,
			func(n *RetrospectiveReview, e *RetrospectiveDiscussion) { n.Edges.Discussion = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (rrq *RetrospectiveReviewQuery) loadRetrospective(ctx context.Context, query *RetrospectiveQuery, nodes []*RetrospectiveReview, init func(*RetrospectiveReview), assign func(*RetrospectiveReview, *Retrospective)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*RetrospectiveReview)
	for i := range nodes {
		fk := nodes[i].RetrospectiveID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(retrospective.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "retrospective_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rrq *RetrospectiveReviewQuery) loadRequester(ctx context.Context, query *UserQuery, nodes []*RetrospectiveReview, init func(*RetrospectiveReview), assign func(*RetrospectiveReview, *User)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*RetrospectiveReview)
	for i := range nodes {
		fk := nodes[i].RequesterID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "requester_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rrq *RetrospectiveReviewQuery) loadReviewer(ctx context.Context, query *UserQuery, nodes []*RetrospectiveReview, init func(*RetrospectiveReview), assign func(*RetrospectiveReview, *User)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*RetrospectiveReview)
	for i := range nodes {
		fk := nodes[i].ReviewerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "reviewer_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rrq *RetrospectiveReviewQuery) loadDiscussion(ctx context.Context, query *RetrospectiveDiscussionQuery, nodes []*RetrospectiveReview, init func(*RetrospectiveReview), assign func(*RetrospectiveReview, *RetrospectiveDiscussion)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*RetrospectiveReview)
	for i := range nodes {
		if nodes[i].retrospective_review_discussion == nil {
			continue
		}
		fk := *nodes[i].retrospective_review_discussion
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(retrospectivediscussion.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "retrospective_review_discussion" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (rrq *RetrospectiveReviewQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rrq.querySpec()
	if len(rrq.modifiers) > 0 {
		_spec.Modifiers = rrq.modifiers
	}
	_spec.Node.Columns = rrq.ctx.Fields
	if len(rrq.ctx.Fields) > 0 {
		_spec.Unique = rrq.ctx.Unique != nil && *rrq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, rrq.driver, _spec)
}

func (rrq *RetrospectiveReviewQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(retrospectivereview.Table, retrospectivereview.Columns, sqlgraph.NewFieldSpec(retrospectivereview.FieldID, field.TypeUUID))
	_spec.From = rrq.sql
	if unique := rrq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if rrq.path != nil {
		_spec.Unique = true
	}
	if fields := rrq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, retrospectivereview.FieldID)
		for i := range fields {
			if fields[i] != retrospectivereview.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if rrq.withRetrospective != nil {
			_spec.Node.AddColumnOnce(retrospectivereview.FieldRetrospectiveID)
		}
		if rrq.withRequester != nil {
			_spec.Node.AddColumnOnce(retrospectivereview.FieldRequesterID)
		}
		if rrq.withReviewer != nil {
			_spec.Node.AddColumnOnce(retrospectivereview.FieldReviewerID)
		}
	}
	if ps := rrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rrq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rrq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (rrq *RetrospectiveReviewQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(rrq.driver.Dialect())
	t1 := builder.Table(retrospectivereview.Table)
	columns := rrq.ctx.Fields
	if len(columns) == 0 {
		columns = retrospectivereview.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if rrq.sql != nil {
		selector = rrq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if rrq.ctx.Unique != nil && *rrq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range rrq.modifiers {
		m(selector)
	}
	for _, p := range rrq.predicates {
		p(selector)
	}
	for _, p := range rrq.order {
		p(selector)
	}
	if offset := rrq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rrq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (rrq *RetrospectiveReviewQuery) Modify(modifiers ...func(s *sql.Selector)) *RetrospectiveReviewSelect {
	rrq.modifiers = append(rrq.modifiers, modifiers...)
	return rrq.Select()
}

// RetrospectiveReviewGroupBy is the group-by builder for RetrospectiveReview entities.
type RetrospectiveReviewGroupBy struct {
	selector
	build *RetrospectiveReviewQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rrgb *RetrospectiveReviewGroupBy) Aggregate(fns ...AggregateFunc) *RetrospectiveReviewGroupBy {
	rrgb.fns = append(rrgb.fns, fns...)
	return rrgb
}

// Scan applies the selector query and scans the result into the given value.
func (rrgb *RetrospectiveReviewGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rrgb.build.ctx, ent.OpQueryGroupBy)
	if err := rrgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RetrospectiveReviewQuery, *RetrospectiveReviewGroupBy](ctx, rrgb.build, rrgb, rrgb.build.inters, v)
}

func (rrgb *RetrospectiveReviewGroupBy) sqlScan(ctx context.Context, root *RetrospectiveReviewQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(rrgb.fns))
	for _, fn := range rrgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*rrgb.flds)+len(rrgb.fns))
		for _, f := range *rrgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*rrgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rrgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// RetrospectiveReviewSelect is the builder for selecting fields of RetrospectiveReview entities.
type RetrospectiveReviewSelect struct {
	*RetrospectiveReviewQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (rrs *RetrospectiveReviewSelect) Aggregate(fns ...AggregateFunc) *RetrospectiveReviewSelect {
	rrs.fns = append(rrs.fns, fns...)
	return rrs
}

// Scan applies the selector query and scans the result into the given value.
func (rrs *RetrospectiveReviewSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rrs.ctx, ent.OpQuerySelect)
	if err := rrs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RetrospectiveReviewQuery, *RetrospectiveReviewSelect](ctx, rrs.RetrospectiveReviewQuery, rrs, rrs.inters, v)
}

func (rrs *RetrospectiveReviewSelect) sqlScan(ctx context.Context, root *RetrospectiveReviewQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(rrs.fns))
	for _, fn := range rrs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*rrs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (rrs *RetrospectiveReviewSelect) Modify(modifiers ...func(s *sql.Selector)) *RetrospectiveReviewSelect {
	rrs.modifiers = append(rrs.modifiers, modifiers...)
	return rrs
}
