// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/systemcomponentrelationshipcontrolaction"
)

// SystemComponentRelationshipControlActionDelete is the builder for deleting a SystemComponentRelationshipControlAction entity.
type SystemComponentRelationshipControlActionDelete struct {
	config
	hooks    []Hook
	mutation *SystemComponentRelationshipControlActionMutation
}

// Where appends a list predicates to the SystemComponentRelationshipControlActionDelete builder.
func (scrcad *SystemComponentRelationshipControlActionDelete) Where(ps ...predicate.SystemComponentRelationshipControlAction) *SystemComponentRelationshipControlActionDelete {
	scrcad.mutation.Where(ps...)
	return scrcad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (scrcad *SystemComponentRelationshipControlActionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, scrcad.sqlExec, scrcad.mutation, scrcad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (scrcad *SystemComponentRelationshipControlActionDelete) ExecX(ctx context.Context) int {
	n, err := scrcad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (scrcad *SystemComponentRelationshipControlActionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(systemcomponentrelationshipcontrolaction.Table, sqlgraph.NewFieldSpec(systemcomponentrelationshipcontrolaction.FieldID, field.TypeUUID))
	if ps := scrcad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, scrcad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	scrcad.mutation.done = true
	return affected, err
}

// SystemComponentRelationshipControlActionDeleteOne is the builder for deleting a single SystemComponentRelationshipControlAction entity.
type SystemComponentRelationshipControlActionDeleteOne struct {
	scrcad *SystemComponentRelationshipControlActionDelete
}

// Where appends a list predicates to the SystemComponentRelationshipControlActionDelete builder.
func (scrcado *SystemComponentRelationshipControlActionDeleteOne) Where(ps ...predicate.SystemComponentRelationshipControlAction) *SystemComponentRelationshipControlActionDeleteOne {
	scrcado.scrcad.mutation.Where(ps...)
	return scrcado
}

// Exec executes the deletion query.
func (scrcado *SystemComponentRelationshipControlActionDeleteOne) Exec(ctx context.Context) error {
	n, err := scrcado.scrcad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{systemcomponentrelationshipcontrolaction.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (scrcado *SystemComponentRelationshipControlActionDeleteOne) ExecX(ctx context.Context) {
	if err := scrcado.Exec(ctx); err != nil {
		panic(err)
	}
}
