// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/providersynchistory"
)

// ProviderSyncHistoryUpdate is the builder for updating ProviderSyncHistory entities.
type ProviderSyncHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *ProviderSyncHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ProviderSyncHistoryUpdate builder.
func (pshu *ProviderSyncHistoryUpdate) Where(ps ...predicate.ProviderSyncHistory) *ProviderSyncHistoryUpdate {
	pshu.mutation.Where(ps...)
	return pshu
}

// SetDataType sets the "data_type" field.
func (pshu *ProviderSyncHistoryUpdate) SetDataType(s string) *ProviderSyncHistoryUpdate {
	pshu.mutation.SetDataType(s)
	return pshu
}

// SetNillableDataType sets the "data_type" field if the given value is not nil.
func (pshu *ProviderSyncHistoryUpdate) SetNillableDataType(s *string) *ProviderSyncHistoryUpdate {
	if s != nil {
		pshu.SetDataType(*s)
	}
	return pshu
}

// SetStartedAt sets the "started_at" field.
func (pshu *ProviderSyncHistoryUpdate) SetStartedAt(t time.Time) *ProviderSyncHistoryUpdate {
	pshu.mutation.SetStartedAt(t)
	return pshu
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (pshu *ProviderSyncHistoryUpdate) SetNillableStartedAt(t *time.Time) *ProviderSyncHistoryUpdate {
	if t != nil {
		pshu.SetStartedAt(*t)
	}
	return pshu
}

// SetFinishedAt sets the "finished_at" field.
func (pshu *ProviderSyncHistoryUpdate) SetFinishedAt(t time.Time) *ProviderSyncHistoryUpdate {
	pshu.mutation.SetFinishedAt(t)
	return pshu
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (pshu *ProviderSyncHistoryUpdate) SetNillableFinishedAt(t *time.Time) *ProviderSyncHistoryUpdate {
	if t != nil {
		pshu.SetFinishedAt(*t)
	}
	return pshu
}

// SetNumMutations sets the "num_mutations" field.
func (pshu *ProviderSyncHistoryUpdate) SetNumMutations(i int) *ProviderSyncHistoryUpdate {
	pshu.mutation.ResetNumMutations()
	pshu.mutation.SetNumMutations(i)
	return pshu
}

// SetNillableNumMutations sets the "num_mutations" field if the given value is not nil.
func (pshu *ProviderSyncHistoryUpdate) SetNillableNumMutations(i *int) *ProviderSyncHistoryUpdate {
	if i != nil {
		pshu.SetNumMutations(*i)
	}
	return pshu
}

// AddNumMutations adds i to the "num_mutations" field.
func (pshu *ProviderSyncHistoryUpdate) AddNumMutations(i int) *ProviderSyncHistoryUpdate {
	pshu.mutation.AddNumMutations(i)
	return pshu
}

// Mutation returns the ProviderSyncHistoryMutation object of the builder.
func (pshu *ProviderSyncHistoryUpdate) Mutation() *ProviderSyncHistoryMutation {
	return pshu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pshu *ProviderSyncHistoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pshu.sqlSave, pshu.mutation, pshu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pshu *ProviderSyncHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := pshu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pshu *ProviderSyncHistoryUpdate) Exec(ctx context.Context) error {
	_, err := pshu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pshu *ProviderSyncHistoryUpdate) ExecX(ctx context.Context) {
	if err := pshu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pshu *ProviderSyncHistoryUpdate) check() error {
	if pshu.mutation.TenantCleared() && len(pshu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProviderSyncHistory.tenant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pshu *ProviderSyncHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProviderSyncHistoryUpdate {
	pshu.modifiers = append(pshu.modifiers, modifiers...)
	return pshu
}

func (pshu *ProviderSyncHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pshu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(providersynchistory.Table, providersynchistory.Columns, sqlgraph.NewFieldSpec(providersynchistory.FieldID, field.TypeUUID))
	if ps := pshu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pshu.mutation.DataType(); ok {
		_spec.SetField(providersynchistory.FieldDataType, field.TypeString, value)
	}
	if value, ok := pshu.mutation.StartedAt(); ok {
		_spec.SetField(providersynchistory.FieldStartedAt, field.TypeTime, value)
	}
	if value, ok := pshu.mutation.FinishedAt(); ok {
		_spec.SetField(providersynchistory.FieldFinishedAt, field.TypeTime, value)
	}
	if value, ok := pshu.mutation.NumMutations(); ok {
		_spec.SetField(providersynchistory.FieldNumMutations, field.TypeInt, value)
	}
	if value, ok := pshu.mutation.AddedNumMutations(); ok {
		_spec.AddField(providersynchistory.FieldNumMutations, field.TypeInt, value)
	}
	_spec.AddModifiers(pshu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pshu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{providersynchistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pshu.mutation.done = true
	return n, nil
}

// ProviderSyncHistoryUpdateOne is the builder for updating a single ProviderSyncHistory entity.
type ProviderSyncHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ProviderSyncHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDataType sets the "data_type" field.
func (pshuo *ProviderSyncHistoryUpdateOne) SetDataType(s string) *ProviderSyncHistoryUpdateOne {
	pshuo.mutation.SetDataType(s)
	return pshuo
}

// SetNillableDataType sets the "data_type" field if the given value is not nil.
func (pshuo *ProviderSyncHistoryUpdateOne) SetNillableDataType(s *string) *ProviderSyncHistoryUpdateOne {
	if s != nil {
		pshuo.SetDataType(*s)
	}
	return pshuo
}

// SetStartedAt sets the "started_at" field.
func (pshuo *ProviderSyncHistoryUpdateOne) SetStartedAt(t time.Time) *ProviderSyncHistoryUpdateOne {
	pshuo.mutation.SetStartedAt(t)
	return pshuo
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (pshuo *ProviderSyncHistoryUpdateOne) SetNillableStartedAt(t *time.Time) *ProviderSyncHistoryUpdateOne {
	if t != nil {
		pshuo.SetStartedAt(*t)
	}
	return pshuo
}

// SetFinishedAt sets the "finished_at" field.
func (pshuo *ProviderSyncHistoryUpdateOne) SetFinishedAt(t time.Time) *ProviderSyncHistoryUpdateOne {
	pshuo.mutation.SetFinishedAt(t)
	return pshuo
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (pshuo *ProviderSyncHistoryUpdateOne) SetNillableFinishedAt(t *time.Time) *ProviderSyncHistoryUpdateOne {
	if t != nil {
		pshuo.SetFinishedAt(*t)
	}
	return pshuo
}

// SetNumMutations sets the "num_mutations" field.
func (pshuo *ProviderSyncHistoryUpdateOne) SetNumMutations(i int) *ProviderSyncHistoryUpdateOne {
	pshuo.mutation.ResetNumMutations()
	pshuo.mutation.SetNumMutations(i)
	return pshuo
}

// SetNillableNumMutations sets the "num_mutations" field if the given value is not nil.
func (pshuo *ProviderSyncHistoryUpdateOne) SetNillableNumMutations(i *int) *ProviderSyncHistoryUpdateOne {
	if i != nil {
		pshuo.SetNumMutations(*i)
	}
	return pshuo
}

// AddNumMutations adds i to the "num_mutations" field.
func (pshuo *ProviderSyncHistoryUpdateOne) AddNumMutations(i int) *ProviderSyncHistoryUpdateOne {
	pshuo.mutation.AddNumMutations(i)
	return pshuo
}

// Mutation returns the ProviderSyncHistoryMutation object of the builder.
func (pshuo *ProviderSyncHistoryUpdateOne) Mutation() *ProviderSyncHistoryMutation {
	return pshuo.mutation
}

// Where appends a list predicates to the ProviderSyncHistoryUpdate builder.
func (pshuo *ProviderSyncHistoryUpdateOne) Where(ps ...predicate.ProviderSyncHistory) *ProviderSyncHistoryUpdateOne {
	pshuo.mutation.Where(ps...)
	return pshuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pshuo *ProviderSyncHistoryUpdateOne) Select(field string, fields ...string) *ProviderSyncHistoryUpdateOne {
	pshuo.fields = append([]string{field}, fields...)
	return pshuo
}

// Save executes the query and returns the updated ProviderSyncHistory entity.
func (pshuo *ProviderSyncHistoryUpdateOne) Save(ctx context.Context) (*ProviderSyncHistory, error) {
	return withHooks(ctx, pshuo.sqlSave, pshuo.mutation, pshuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pshuo *ProviderSyncHistoryUpdateOne) SaveX(ctx context.Context) *ProviderSyncHistory {
	node, err := pshuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pshuo *ProviderSyncHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := pshuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pshuo *ProviderSyncHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := pshuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pshuo *ProviderSyncHistoryUpdateOne) check() error {
	if pshuo.mutation.TenantCleared() && len(pshuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProviderSyncHistory.tenant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pshuo *ProviderSyncHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProviderSyncHistoryUpdateOne {
	pshuo.modifiers = append(pshuo.modifiers, modifiers...)
	return pshuo
}

func (pshuo *ProviderSyncHistoryUpdateOne) sqlSave(ctx context.Context) (_node *ProviderSyncHistory, err error) {
	if err := pshuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(providersynchistory.Table, providersynchistory.Columns, sqlgraph.NewFieldSpec(providersynchistory.FieldID, field.TypeUUID))
	id, ok := pshuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProviderSyncHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pshuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, providersynchistory.FieldID)
		for _, f := range fields {
			if !providersynchistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != providersynchistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pshuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pshuo.mutation.DataType(); ok {
		_spec.SetField(providersynchistory.FieldDataType, field.TypeString, value)
	}
	if value, ok := pshuo.mutation.StartedAt(); ok {
		_spec.SetField(providersynchistory.FieldStartedAt, field.TypeTime, value)
	}
	if value, ok := pshuo.mutation.FinishedAt(); ok {
		_spec.SetField(providersynchistory.FieldFinishedAt, field.TypeTime, value)
	}
	if value, ok := pshuo.mutation.NumMutations(); ok {
		_spec.SetField(providersynchistory.FieldNumMutations, field.TypeInt, value)
	}
	if value, ok := pshuo.mutation.AddedNumMutations(); ok {
		_spec.AddField(providersynchistory.FieldNumMutations, field.TypeInt, value)
	}
	_spec.AddModifiers(pshuo.modifiers...)
	_node = &ProviderSyncHistory{config: pshuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pshuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{providersynchistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pshuo.mutation.done = true
	return _node, nil
}
