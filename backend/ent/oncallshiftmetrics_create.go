// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/oncallshift"
	"github.com/rezible/rezible/ent/oncallshiftmetrics"
	"github.com/rezible/rezible/ent/tenant"
)

// OncallShiftMetricsCreate is the builder for creating a OncallShiftMetrics entity.
type OncallShiftMetricsCreate struct {
	config
	mutation *OncallShiftMetricsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (osmc *OncallShiftMetricsCreate) SetTenantID(i int) *OncallShiftMetricsCreate {
	osmc.mutation.SetTenantID(i)
	return osmc
}

// SetShiftID sets the "shift_id" field.
func (osmc *OncallShiftMetricsCreate) SetShiftID(u uuid.UUID) *OncallShiftMetricsCreate {
	osmc.mutation.SetShiftID(u)
	return osmc
}

// SetID sets the "id" field.
func (osmc *OncallShiftMetricsCreate) SetID(u uuid.UUID) *OncallShiftMetricsCreate {
	osmc.mutation.SetID(u)
	return osmc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (osmc *OncallShiftMetricsCreate) SetNillableID(u *uuid.UUID) *OncallShiftMetricsCreate {
	if u != nil {
		osmc.SetID(*u)
	}
	return osmc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (osmc *OncallShiftMetricsCreate) SetTenant(t *Tenant) *OncallShiftMetricsCreate {
	return osmc.SetTenantID(t.ID)
}

// SetShift sets the "shift" edge to the OncallShift entity.
func (osmc *OncallShiftMetricsCreate) SetShift(o *OncallShift) *OncallShiftMetricsCreate {
	return osmc.SetShiftID(o.ID)
}

// Mutation returns the OncallShiftMetricsMutation object of the builder.
func (osmc *OncallShiftMetricsCreate) Mutation() *OncallShiftMetricsMutation {
	return osmc.mutation
}

// Save creates the OncallShiftMetrics in the database.
func (osmc *OncallShiftMetricsCreate) Save(ctx context.Context) (*OncallShiftMetrics, error) {
	if err := osmc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, osmc.sqlSave, osmc.mutation, osmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (osmc *OncallShiftMetricsCreate) SaveX(ctx context.Context) *OncallShiftMetrics {
	v, err := osmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (osmc *OncallShiftMetricsCreate) Exec(ctx context.Context) error {
	_, err := osmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osmc *OncallShiftMetricsCreate) ExecX(ctx context.Context) {
	if err := osmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (osmc *OncallShiftMetricsCreate) defaults() error {
	if _, ok := osmc.mutation.ID(); !ok {
		if oncallshiftmetrics.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized oncallshiftmetrics.DefaultID (forgotten import ent/runtime?)")
		}
		v := oncallshiftmetrics.DefaultID()
		osmc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (osmc *OncallShiftMetricsCreate) check() error {
	if _, ok := osmc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "OncallShiftMetrics.tenant_id"`)}
	}
	if _, ok := osmc.mutation.ShiftID(); !ok {
		return &ValidationError{Name: "shift_id", err: errors.New(`ent: missing required field "OncallShiftMetrics.shift_id"`)}
	}
	if len(osmc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "OncallShiftMetrics.tenant"`)}
	}
	if len(osmc.mutation.ShiftIDs()) == 0 {
		return &ValidationError{Name: "shift", err: errors.New(`ent: missing required edge "OncallShiftMetrics.shift"`)}
	}
	return nil
}

func (osmc *OncallShiftMetricsCreate) sqlSave(ctx context.Context) (*OncallShiftMetrics, error) {
	if err := osmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := osmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, osmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	osmc.mutation.id = &_node.ID
	osmc.mutation.done = true
	return _node, nil
}

func (osmc *OncallShiftMetricsCreate) createSpec() (*OncallShiftMetrics, *sqlgraph.CreateSpec) {
	var (
		_node = &OncallShiftMetrics{config: osmc.config}
		_spec = sqlgraph.NewCreateSpec(oncallshiftmetrics.Table, sqlgraph.NewFieldSpec(oncallshiftmetrics.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = osmc.conflict
	if id, ok := osmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if nodes := osmc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallshiftmetrics.TenantTable,
			Columns: []string{oncallshiftmetrics.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := osmc.mutation.ShiftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   oncallshiftmetrics.ShiftTable,
			Columns: []string{oncallshiftmetrics.ShiftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallshift.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ShiftID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OncallShiftMetrics.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OncallShiftMetricsUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (osmc *OncallShiftMetricsCreate) OnConflict(opts ...sql.ConflictOption) *OncallShiftMetricsUpsertOne {
	osmc.conflict = opts
	return &OncallShiftMetricsUpsertOne{
		create: osmc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OncallShiftMetrics.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (osmc *OncallShiftMetricsCreate) OnConflictColumns(columns ...string) *OncallShiftMetricsUpsertOne {
	osmc.conflict = append(osmc.conflict, sql.ConflictColumns(columns...))
	return &OncallShiftMetricsUpsertOne{
		create: osmc,
	}
}

type (
	// OncallShiftMetricsUpsertOne is the builder for "upsert"-ing
	//  one OncallShiftMetrics node.
	OncallShiftMetricsUpsertOne struct {
		create *OncallShiftMetricsCreate
	}

	// OncallShiftMetricsUpsert is the "OnConflict" setter.
	OncallShiftMetricsUpsert struct {
		*sql.UpdateSet
	}
)

// SetShiftID sets the "shift_id" field.
func (u *OncallShiftMetricsUpsert) SetShiftID(v uuid.UUID) *OncallShiftMetricsUpsert {
	u.Set(oncallshiftmetrics.FieldShiftID, v)
	return u
}

// UpdateShiftID sets the "shift_id" field to the value that was provided on create.
func (u *OncallShiftMetricsUpsert) UpdateShiftID() *OncallShiftMetricsUpsert {
	u.SetExcluded(oncallshiftmetrics.FieldShiftID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OncallShiftMetrics.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oncallshiftmetrics.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OncallShiftMetricsUpsertOne) UpdateNewValues() *OncallShiftMetricsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(oncallshiftmetrics.FieldID)
		}
		if _, exists := u.create.mutation.TenantID(); exists {
			s.SetIgnore(oncallshiftmetrics.FieldTenantID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OncallShiftMetrics.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OncallShiftMetricsUpsertOne) Ignore() *OncallShiftMetricsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OncallShiftMetricsUpsertOne) DoNothing() *OncallShiftMetricsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OncallShiftMetricsCreate.OnConflict
// documentation for more info.
func (u *OncallShiftMetricsUpsertOne) Update(set func(*OncallShiftMetricsUpsert)) *OncallShiftMetricsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OncallShiftMetricsUpsert{UpdateSet: update})
	}))
	return u
}

// SetShiftID sets the "shift_id" field.
func (u *OncallShiftMetricsUpsertOne) SetShiftID(v uuid.UUID) *OncallShiftMetricsUpsertOne {
	return u.Update(func(s *OncallShiftMetricsUpsert) {
		s.SetShiftID(v)
	})
}

// UpdateShiftID sets the "shift_id" field to the value that was provided on create.
func (u *OncallShiftMetricsUpsertOne) UpdateShiftID() *OncallShiftMetricsUpsertOne {
	return u.Update(func(s *OncallShiftMetricsUpsert) {
		s.UpdateShiftID()
	})
}

// Exec executes the query.
func (u *OncallShiftMetricsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OncallShiftMetricsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OncallShiftMetricsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OncallShiftMetricsUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: OncallShiftMetricsUpsertOne.ID is not supported by MySQL driver. Use OncallShiftMetricsUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OncallShiftMetricsUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OncallShiftMetricsCreateBulk is the builder for creating many OncallShiftMetrics entities in bulk.
type OncallShiftMetricsCreateBulk struct {
	config
	err      error
	builders []*OncallShiftMetricsCreate
	conflict []sql.ConflictOption
}

// Save creates the OncallShiftMetrics entities in the database.
func (osmcb *OncallShiftMetricsCreateBulk) Save(ctx context.Context) ([]*OncallShiftMetrics, error) {
	if osmcb.err != nil {
		return nil, osmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(osmcb.builders))
	nodes := make([]*OncallShiftMetrics, len(osmcb.builders))
	mutators := make([]Mutator, len(osmcb.builders))
	for i := range osmcb.builders {
		func(i int, root context.Context) {
			builder := osmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OncallShiftMetricsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, osmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = osmcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, osmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, osmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (osmcb *OncallShiftMetricsCreateBulk) SaveX(ctx context.Context) []*OncallShiftMetrics {
	v, err := osmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (osmcb *OncallShiftMetricsCreateBulk) Exec(ctx context.Context) error {
	_, err := osmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osmcb *OncallShiftMetricsCreateBulk) ExecX(ctx context.Context) {
	if err := osmcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OncallShiftMetrics.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OncallShiftMetricsUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (osmcb *OncallShiftMetricsCreateBulk) OnConflict(opts ...sql.ConflictOption) *OncallShiftMetricsUpsertBulk {
	osmcb.conflict = opts
	return &OncallShiftMetricsUpsertBulk{
		create: osmcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OncallShiftMetrics.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (osmcb *OncallShiftMetricsCreateBulk) OnConflictColumns(columns ...string) *OncallShiftMetricsUpsertBulk {
	osmcb.conflict = append(osmcb.conflict, sql.ConflictColumns(columns...))
	return &OncallShiftMetricsUpsertBulk{
		create: osmcb,
	}
}

// OncallShiftMetricsUpsertBulk is the builder for "upsert"-ing
// a bulk of OncallShiftMetrics nodes.
type OncallShiftMetricsUpsertBulk struct {
	create *OncallShiftMetricsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OncallShiftMetrics.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oncallshiftmetrics.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OncallShiftMetricsUpsertBulk) UpdateNewValues() *OncallShiftMetricsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(oncallshiftmetrics.FieldID)
			}
			if _, exists := b.mutation.TenantID(); exists {
				s.SetIgnore(oncallshiftmetrics.FieldTenantID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OncallShiftMetrics.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OncallShiftMetricsUpsertBulk) Ignore() *OncallShiftMetricsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OncallShiftMetricsUpsertBulk) DoNothing() *OncallShiftMetricsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OncallShiftMetricsCreateBulk.OnConflict
// documentation for more info.
func (u *OncallShiftMetricsUpsertBulk) Update(set func(*OncallShiftMetricsUpsert)) *OncallShiftMetricsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OncallShiftMetricsUpsert{UpdateSet: update})
	}))
	return u
}

// SetShiftID sets the "shift_id" field.
func (u *OncallShiftMetricsUpsertBulk) SetShiftID(v uuid.UUID) *OncallShiftMetricsUpsertBulk {
	return u.Update(func(s *OncallShiftMetricsUpsert) {
		s.SetShiftID(v)
	})
}

// UpdateShiftID sets the "shift_id" field to the value that was provided on create.
func (u *OncallShiftMetricsUpsertBulk) UpdateShiftID() *OncallShiftMetricsUpsertBulk {
	return u.Update(func(s *OncallShiftMetricsUpsert) {
		s.UpdateShiftID()
	})
}

// Exec executes the query.
func (u *OncallShiftMetricsUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OncallShiftMetricsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OncallShiftMetricsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OncallShiftMetricsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
