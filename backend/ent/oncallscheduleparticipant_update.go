// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/twohundreds/rezible/ent/oncallschedule"
	"github.com/twohundreds/rezible/ent/oncallscheduleparticipant"
	"github.com/twohundreds/rezible/ent/predicate"
	"github.com/twohundreds/rezible/ent/user"
)

// OncallScheduleParticipantUpdate is the builder for updating OncallScheduleParticipant entities.
type OncallScheduleParticipantUpdate struct {
	config
	hooks     []Hook
	mutation  *OncallScheduleParticipantMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OncallScheduleParticipantUpdate builder.
func (ospu *OncallScheduleParticipantUpdate) Where(ps ...predicate.OncallScheduleParticipant) *OncallScheduleParticipantUpdate {
	ospu.mutation.Where(ps...)
	return ospu
}

// SetScheduleID sets the "schedule_id" field.
func (ospu *OncallScheduleParticipantUpdate) SetScheduleID(u uuid.UUID) *OncallScheduleParticipantUpdate {
	ospu.mutation.SetScheduleID(u)
	return ospu
}

// SetNillableScheduleID sets the "schedule_id" field if the given value is not nil.
func (ospu *OncallScheduleParticipantUpdate) SetNillableScheduleID(u *uuid.UUID) *OncallScheduleParticipantUpdate {
	if u != nil {
		ospu.SetScheduleID(*u)
	}
	return ospu
}

// SetUserID sets the "user_id" field.
func (ospu *OncallScheduleParticipantUpdate) SetUserID(u uuid.UUID) *OncallScheduleParticipantUpdate {
	ospu.mutation.SetUserID(u)
	return ospu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ospu *OncallScheduleParticipantUpdate) SetNillableUserID(u *uuid.UUID) *OncallScheduleParticipantUpdate {
	if u != nil {
		ospu.SetUserID(*u)
	}
	return ospu
}

// SetIndex sets the "index" field.
func (ospu *OncallScheduleParticipantUpdate) SetIndex(i int) *OncallScheduleParticipantUpdate {
	ospu.mutation.ResetIndex()
	ospu.mutation.SetIndex(i)
	return ospu
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (ospu *OncallScheduleParticipantUpdate) SetNillableIndex(i *int) *OncallScheduleParticipantUpdate {
	if i != nil {
		ospu.SetIndex(*i)
	}
	return ospu
}

// AddIndex adds i to the "index" field.
func (ospu *OncallScheduleParticipantUpdate) AddIndex(i int) *OncallScheduleParticipantUpdate {
	ospu.mutation.AddIndex(i)
	return ospu
}

// SetSchedule sets the "schedule" edge to the OncallSchedule entity.
func (ospu *OncallScheduleParticipantUpdate) SetSchedule(o *OncallSchedule) *OncallScheduleParticipantUpdate {
	return ospu.SetScheduleID(o.ID)
}

// SetUser sets the "user" edge to the User entity.
func (ospu *OncallScheduleParticipantUpdate) SetUser(u *User) *OncallScheduleParticipantUpdate {
	return ospu.SetUserID(u.ID)
}

// Mutation returns the OncallScheduleParticipantMutation object of the builder.
func (ospu *OncallScheduleParticipantUpdate) Mutation() *OncallScheduleParticipantMutation {
	return ospu.mutation
}

// ClearSchedule clears the "schedule" edge to the OncallSchedule entity.
func (ospu *OncallScheduleParticipantUpdate) ClearSchedule() *OncallScheduleParticipantUpdate {
	ospu.mutation.ClearSchedule()
	return ospu
}

// ClearUser clears the "user" edge to the User entity.
func (ospu *OncallScheduleParticipantUpdate) ClearUser() *OncallScheduleParticipantUpdate {
	ospu.mutation.ClearUser()
	return ospu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ospu *OncallScheduleParticipantUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ospu.sqlSave, ospu.mutation, ospu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ospu *OncallScheduleParticipantUpdate) SaveX(ctx context.Context) int {
	affected, err := ospu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ospu *OncallScheduleParticipantUpdate) Exec(ctx context.Context) error {
	_, err := ospu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ospu *OncallScheduleParticipantUpdate) ExecX(ctx context.Context) {
	if err := ospu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ospu *OncallScheduleParticipantUpdate) check() error {
	if ospu.mutation.ScheduleCleared() && len(ospu.mutation.ScheduleIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallScheduleParticipant.schedule"`)
	}
	if ospu.mutation.UserCleared() && len(ospu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallScheduleParticipant.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ospu *OncallScheduleParticipantUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OncallScheduleParticipantUpdate {
	ospu.modifiers = append(ospu.modifiers, modifiers...)
	return ospu
}

func (ospu *OncallScheduleParticipantUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ospu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(oncallscheduleparticipant.Table, oncallscheduleparticipant.Columns, sqlgraph.NewFieldSpec(oncallscheduleparticipant.FieldID, field.TypeUUID))
	if ps := ospu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ospu.mutation.Index(); ok {
		_spec.SetField(oncallscheduleparticipant.FieldIndex, field.TypeInt, value)
	}
	if value, ok := ospu.mutation.AddedIndex(); ok {
		_spec.AddField(oncallscheduleparticipant.FieldIndex, field.TypeInt, value)
	}
	if ospu.mutation.ScheduleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oncallscheduleparticipant.ScheduleTable,
			Columns: []string{oncallscheduleparticipant.ScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallschedule.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ospu.mutation.ScheduleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oncallscheduleparticipant.ScheduleTable,
			Columns: []string{oncallscheduleparticipant.ScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallschedule.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ospu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallscheduleparticipant.UserTable,
			Columns: []string{oncallscheduleparticipant.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ospu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallscheduleparticipant.UserTable,
			Columns: []string{oncallscheduleparticipant.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ospu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ospu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oncallscheduleparticipant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ospu.mutation.done = true
	return n, nil
}

// OncallScheduleParticipantUpdateOne is the builder for updating a single OncallScheduleParticipant entity.
type OncallScheduleParticipantUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OncallScheduleParticipantMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetScheduleID sets the "schedule_id" field.
func (ospuo *OncallScheduleParticipantUpdateOne) SetScheduleID(u uuid.UUID) *OncallScheduleParticipantUpdateOne {
	ospuo.mutation.SetScheduleID(u)
	return ospuo
}

// SetNillableScheduleID sets the "schedule_id" field if the given value is not nil.
func (ospuo *OncallScheduleParticipantUpdateOne) SetNillableScheduleID(u *uuid.UUID) *OncallScheduleParticipantUpdateOne {
	if u != nil {
		ospuo.SetScheduleID(*u)
	}
	return ospuo
}

// SetUserID sets the "user_id" field.
func (ospuo *OncallScheduleParticipantUpdateOne) SetUserID(u uuid.UUID) *OncallScheduleParticipantUpdateOne {
	ospuo.mutation.SetUserID(u)
	return ospuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ospuo *OncallScheduleParticipantUpdateOne) SetNillableUserID(u *uuid.UUID) *OncallScheduleParticipantUpdateOne {
	if u != nil {
		ospuo.SetUserID(*u)
	}
	return ospuo
}

// SetIndex sets the "index" field.
func (ospuo *OncallScheduleParticipantUpdateOne) SetIndex(i int) *OncallScheduleParticipantUpdateOne {
	ospuo.mutation.ResetIndex()
	ospuo.mutation.SetIndex(i)
	return ospuo
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (ospuo *OncallScheduleParticipantUpdateOne) SetNillableIndex(i *int) *OncallScheduleParticipantUpdateOne {
	if i != nil {
		ospuo.SetIndex(*i)
	}
	return ospuo
}

// AddIndex adds i to the "index" field.
func (ospuo *OncallScheduleParticipantUpdateOne) AddIndex(i int) *OncallScheduleParticipantUpdateOne {
	ospuo.mutation.AddIndex(i)
	return ospuo
}

// SetSchedule sets the "schedule" edge to the OncallSchedule entity.
func (ospuo *OncallScheduleParticipantUpdateOne) SetSchedule(o *OncallSchedule) *OncallScheduleParticipantUpdateOne {
	return ospuo.SetScheduleID(o.ID)
}

// SetUser sets the "user" edge to the User entity.
func (ospuo *OncallScheduleParticipantUpdateOne) SetUser(u *User) *OncallScheduleParticipantUpdateOne {
	return ospuo.SetUserID(u.ID)
}

// Mutation returns the OncallScheduleParticipantMutation object of the builder.
func (ospuo *OncallScheduleParticipantUpdateOne) Mutation() *OncallScheduleParticipantMutation {
	return ospuo.mutation
}

// ClearSchedule clears the "schedule" edge to the OncallSchedule entity.
func (ospuo *OncallScheduleParticipantUpdateOne) ClearSchedule() *OncallScheduleParticipantUpdateOne {
	ospuo.mutation.ClearSchedule()
	return ospuo
}

// ClearUser clears the "user" edge to the User entity.
func (ospuo *OncallScheduleParticipantUpdateOne) ClearUser() *OncallScheduleParticipantUpdateOne {
	ospuo.mutation.ClearUser()
	return ospuo
}

// Where appends a list predicates to the OncallScheduleParticipantUpdate builder.
func (ospuo *OncallScheduleParticipantUpdateOne) Where(ps ...predicate.OncallScheduleParticipant) *OncallScheduleParticipantUpdateOne {
	ospuo.mutation.Where(ps...)
	return ospuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ospuo *OncallScheduleParticipantUpdateOne) Select(field string, fields ...string) *OncallScheduleParticipantUpdateOne {
	ospuo.fields = append([]string{field}, fields...)
	return ospuo
}

// Save executes the query and returns the updated OncallScheduleParticipant entity.
func (ospuo *OncallScheduleParticipantUpdateOne) Save(ctx context.Context) (*OncallScheduleParticipant, error) {
	return withHooks(ctx, ospuo.sqlSave, ospuo.mutation, ospuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ospuo *OncallScheduleParticipantUpdateOne) SaveX(ctx context.Context) *OncallScheduleParticipant {
	node, err := ospuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ospuo *OncallScheduleParticipantUpdateOne) Exec(ctx context.Context) error {
	_, err := ospuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ospuo *OncallScheduleParticipantUpdateOne) ExecX(ctx context.Context) {
	if err := ospuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ospuo *OncallScheduleParticipantUpdateOne) check() error {
	if ospuo.mutation.ScheduleCleared() && len(ospuo.mutation.ScheduleIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallScheduleParticipant.schedule"`)
	}
	if ospuo.mutation.UserCleared() && len(ospuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallScheduleParticipant.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ospuo *OncallScheduleParticipantUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OncallScheduleParticipantUpdateOne {
	ospuo.modifiers = append(ospuo.modifiers, modifiers...)
	return ospuo
}

func (ospuo *OncallScheduleParticipantUpdateOne) sqlSave(ctx context.Context) (_node *OncallScheduleParticipant, err error) {
	if err := ospuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(oncallscheduleparticipant.Table, oncallscheduleparticipant.Columns, sqlgraph.NewFieldSpec(oncallscheduleparticipant.FieldID, field.TypeUUID))
	id, ok := ospuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OncallScheduleParticipant.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ospuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oncallscheduleparticipant.FieldID)
		for _, f := range fields {
			if !oncallscheduleparticipant.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oncallscheduleparticipant.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ospuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ospuo.mutation.Index(); ok {
		_spec.SetField(oncallscheduleparticipant.FieldIndex, field.TypeInt, value)
	}
	if value, ok := ospuo.mutation.AddedIndex(); ok {
		_spec.AddField(oncallscheduleparticipant.FieldIndex, field.TypeInt, value)
	}
	if ospuo.mutation.ScheduleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oncallscheduleparticipant.ScheduleTable,
			Columns: []string{oncallscheduleparticipant.ScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallschedule.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ospuo.mutation.ScheduleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oncallscheduleparticipant.ScheduleTable,
			Columns: []string{oncallscheduleparticipant.ScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallschedule.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ospuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallscheduleparticipant.UserTable,
			Columns: []string{oncallscheduleparticipant.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ospuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallscheduleparticipant.UserTable,
			Columns: []string{oncallscheduleparticipant.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ospuo.modifiers...)
	_node = &OncallScheduleParticipant{config: ospuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ospuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oncallscheduleparticipant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ospuo.mutation.done = true
	return _node, nil
}
