// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/twohundreds/rezible/ent/predicate"
	"github.com/twohundreds/rezible/ent/retrospectivediscussion"
	"github.com/twohundreds/rezible/ent/retrospectivediscussionreply"
)

// RetrospectiveDiscussionReplyQuery is the builder for querying RetrospectiveDiscussionReply entities.
type RetrospectiveDiscussionReplyQuery struct {
	config
	ctx             *QueryContext
	order           []retrospectivediscussionreply.OrderOption
	inters          []Interceptor
	predicates      []predicate.RetrospectiveDiscussionReply
	withDiscussion  *RetrospectiveDiscussionQuery
	withParentReply *RetrospectiveDiscussionReplyQuery
	withReplies     *RetrospectiveDiscussionReplyQuery
	withFKs         bool
	modifiers       []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the RetrospectiveDiscussionReplyQuery builder.
func (rdrq *RetrospectiveDiscussionReplyQuery) Where(ps ...predicate.RetrospectiveDiscussionReply) *RetrospectiveDiscussionReplyQuery {
	rdrq.predicates = append(rdrq.predicates, ps...)
	return rdrq
}

// Limit the number of records to be returned by this query.
func (rdrq *RetrospectiveDiscussionReplyQuery) Limit(limit int) *RetrospectiveDiscussionReplyQuery {
	rdrq.ctx.Limit = &limit
	return rdrq
}

// Offset to start from.
func (rdrq *RetrospectiveDiscussionReplyQuery) Offset(offset int) *RetrospectiveDiscussionReplyQuery {
	rdrq.ctx.Offset = &offset
	return rdrq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (rdrq *RetrospectiveDiscussionReplyQuery) Unique(unique bool) *RetrospectiveDiscussionReplyQuery {
	rdrq.ctx.Unique = &unique
	return rdrq
}

// Order specifies how the records should be ordered.
func (rdrq *RetrospectiveDiscussionReplyQuery) Order(o ...retrospectivediscussionreply.OrderOption) *RetrospectiveDiscussionReplyQuery {
	rdrq.order = append(rdrq.order, o...)
	return rdrq
}

// QueryDiscussion chains the current query on the "discussion" edge.
func (rdrq *RetrospectiveDiscussionReplyQuery) QueryDiscussion() *RetrospectiveDiscussionQuery {
	query := (&RetrospectiveDiscussionClient{config: rdrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rdrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rdrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(retrospectivediscussionreply.Table, retrospectivediscussionreply.FieldID, selector),
			sqlgraph.To(retrospectivediscussion.Table, retrospectivediscussion.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, retrospectivediscussionreply.DiscussionTable, retrospectivediscussionreply.DiscussionColumn),
		)
		fromU = sqlgraph.SetNeighbors(rdrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryParentReply chains the current query on the "parent_reply" edge.
func (rdrq *RetrospectiveDiscussionReplyQuery) QueryParentReply() *RetrospectiveDiscussionReplyQuery {
	query := (&RetrospectiveDiscussionReplyClient{config: rdrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rdrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rdrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(retrospectivediscussionreply.Table, retrospectivediscussionreply.FieldID, selector),
			sqlgraph.To(retrospectivediscussionreply.Table, retrospectivediscussionreply.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, retrospectivediscussionreply.ParentReplyTable, retrospectivediscussionreply.ParentReplyColumn),
		)
		fromU = sqlgraph.SetNeighbors(rdrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReplies chains the current query on the "replies" edge.
func (rdrq *RetrospectiveDiscussionReplyQuery) QueryReplies() *RetrospectiveDiscussionReplyQuery {
	query := (&RetrospectiveDiscussionReplyClient{config: rdrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rdrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rdrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(retrospectivediscussionreply.Table, retrospectivediscussionreply.FieldID, selector),
			sqlgraph.To(retrospectivediscussionreply.Table, retrospectivediscussionreply.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, retrospectivediscussionreply.RepliesTable, retrospectivediscussionreply.RepliesColumn),
		)
		fromU = sqlgraph.SetNeighbors(rdrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first RetrospectiveDiscussionReply entity from the query.
// Returns a *NotFoundError when no RetrospectiveDiscussionReply was found.
func (rdrq *RetrospectiveDiscussionReplyQuery) First(ctx context.Context) (*RetrospectiveDiscussionReply, error) {
	nodes, err := rdrq.Limit(1).All(setContextOp(ctx, rdrq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{retrospectivediscussionreply.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rdrq *RetrospectiveDiscussionReplyQuery) FirstX(ctx context.Context) *RetrospectiveDiscussionReply {
	node, err := rdrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first RetrospectiveDiscussionReply ID from the query.
// Returns a *NotFoundError when no RetrospectiveDiscussionReply ID was found.
func (rdrq *RetrospectiveDiscussionReplyQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = rdrq.Limit(1).IDs(setContextOp(ctx, rdrq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{retrospectivediscussionreply.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rdrq *RetrospectiveDiscussionReplyQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := rdrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single RetrospectiveDiscussionReply entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one RetrospectiveDiscussionReply entity is found.
// Returns a *NotFoundError when no RetrospectiveDiscussionReply entities are found.
func (rdrq *RetrospectiveDiscussionReplyQuery) Only(ctx context.Context) (*RetrospectiveDiscussionReply, error) {
	nodes, err := rdrq.Limit(2).All(setContextOp(ctx, rdrq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{retrospectivediscussionreply.Label}
	default:
		return nil, &NotSingularError{retrospectivediscussionreply.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rdrq *RetrospectiveDiscussionReplyQuery) OnlyX(ctx context.Context) *RetrospectiveDiscussionReply {
	node, err := rdrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only RetrospectiveDiscussionReply ID in the query.
// Returns a *NotSingularError when more than one RetrospectiveDiscussionReply ID is found.
// Returns a *NotFoundError when no entities are found.
func (rdrq *RetrospectiveDiscussionReplyQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = rdrq.Limit(2).IDs(setContextOp(ctx, rdrq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{retrospectivediscussionreply.Label}
	default:
		err = &NotSingularError{retrospectivediscussionreply.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rdrq *RetrospectiveDiscussionReplyQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := rdrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of RetrospectiveDiscussionReplies.
func (rdrq *RetrospectiveDiscussionReplyQuery) All(ctx context.Context) ([]*RetrospectiveDiscussionReply, error) {
	ctx = setContextOp(ctx, rdrq.ctx, ent.OpQueryAll)
	if err := rdrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*RetrospectiveDiscussionReply, *RetrospectiveDiscussionReplyQuery]()
	return withInterceptors[[]*RetrospectiveDiscussionReply](ctx, rdrq, qr, rdrq.inters)
}

// AllX is like All, but panics if an error occurs.
func (rdrq *RetrospectiveDiscussionReplyQuery) AllX(ctx context.Context) []*RetrospectiveDiscussionReply {
	nodes, err := rdrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of RetrospectiveDiscussionReply IDs.
func (rdrq *RetrospectiveDiscussionReplyQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if rdrq.ctx.Unique == nil && rdrq.path != nil {
		rdrq.Unique(true)
	}
	ctx = setContextOp(ctx, rdrq.ctx, ent.OpQueryIDs)
	if err = rdrq.Select(retrospectivediscussionreply.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rdrq *RetrospectiveDiscussionReplyQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := rdrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rdrq *RetrospectiveDiscussionReplyQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, rdrq.ctx, ent.OpQueryCount)
	if err := rdrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, rdrq, querierCount[*RetrospectiveDiscussionReplyQuery](), rdrq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (rdrq *RetrospectiveDiscussionReplyQuery) CountX(ctx context.Context) int {
	count, err := rdrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rdrq *RetrospectiveDiscussionReplyQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, rdrq.ctx, ent.OpQueryExist)
	switch _, err := rdrq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (rdrq *RetrospectiveDiscussionReplyQuery) ExistX(ctx context.Context) bool {
	exist, err := rdrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the RetrospectiveDiscussionReplyQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rdrq *RetrospectiveDiscussionReplyQuery) Clone() *RetrospectiveDiscussionReplyQuery {
	if rdrq == nil {
		return nil
	}
	return &RetrospectiveDiscussionReplyQuery{
		config:          rdrq.config,
		ctx:             rdrq.ctx.Clone(),
		order:           append([]retrospectivediscussionreply.OrderOption{}, rdrq.order...),
		inters:          append([]Interceptor{}, rdrq.inters...),
		predicates:      append([]predicate.RetrospectiveDiscussionReply{}, rdrq.predicates...),
		withDiscussion:  rdrq.withDiscussion.Clone(),
		withParentReply: rdrq.withParentReply.Clone(),
		withReplies:     rdrq.withReplies.Clone(),
		// clone intermediate query.
		sql:       rdrq.sql.Clone(),
		path:      rdrq.path,
		modifiers: append([]func(*sql.Selector){}, rdrq.modifiers...),
	}
}

// WithDiscussion tells the query-builder to eager-load the nodes that are connected to
// the "discussion" edge. The optional arguments are used to configure the query builder of the edge.
func (rdrq *RetrospectiveDiscussionReplyQuery) WithDiscussion(opts ...func(*RetrospectiveDiscussionQuery)) *RetrospectiveDiscussionReplyQuery {
	query := (&RetrospectiveDiscussionClient{config: rdrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rdrq.withDiscussion = query
	return rdrq
}

// WithParentReply tells the query-builder to eager-load the nodes that are connected to
// the "parent_reply" edge. The optional arguments are used to configure the query builder of the edge.
func (rdrq *RetrospectiveDiscussionReplyQuery) WithParentReply(opts ...func(*RetrospectiveDiscussionReplyQuery)) *RetrospectiveDiscussionReplyQuery {
	query := (&RetrospectiveDiscussionReplyClient{config: rdrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rdrq.withParentReply = query
	return rdrq
}

// WithReplies tells the query-builder to eager-load the nodes that are connected to
// the "replies" edge. The optional arguments are used to configure the query builder of the edge.
func (rdrq *RetrospectiveDiscussionReplyQuery) WithReplies(opts ...func(*RetrospectiveDiscussionReplyQuery)) *RetrospectiveDiscussionReplyQuery {
	query := (&RetrospectiveDiscussionReplyClient{config: rdrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rdrq.withReplies = query
	return rdrq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Content []byte `json:"content,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.RetrospectiveDiscussionReply.Query().
//		GroupBy(retrospectivediscussionreply.FieldContent).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (rdrq *RetrospectiveDiscussionReplyQuery) GroupBy(field string, fields ...string) *RetrospectiveDiscussionReplyGroupBy {
	rdrq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &RetrospectiveDiscussionReplyGroupBy{build: rdrq}
	grbuild.flds = &rdrq.ctx.Fields
	grbuild.label = retrospectivediscussionreply.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Content []byte `json:"content,omitempty"`
//	}
//
//	client.RetrospectiveDiscussionReply.Query().
//		Select(retrospectivediscussionreply.FieldContent).
//		Scan(ctx, &v)
func (rdrq *RetrospectiveDiscussionReplyQuery) Select(fields ...string) *RetrospectiveDiscussionReplySelect {
	rdrq.ctx.Fields = append(rdrq.ctx.Fields, fields...)
	sbuild := &RetrospectiveDiscussionReplySelect{RetrospectiveDiscussionReplyQuery: rdrq}
	sbuild.label = retrospectivediscussionreply.Label
	sbuild.flds, sbuild.scan = &rdrq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a RetrospectiveDiscussionReplySelect configured with the given aggregations.
func (rdrq *RetrospectiveDiscussionReplyQuery) Aggregate(fns ...AggregateFunc) *RetrospectiveDiscussionReplySelect {
	return rdrq.Select().Aggregate(fns...)
}

func (rdrq *RetrospectiveDiscussionReplyQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range rdrq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, rdrq); err != nil {
				return err
			}
		}
	}
	for _, f := range rdrq.ctx.Fields {
		if !retrospectivediscussionreply.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if rdrq.path != nil {
		prev, err := rdrq.path(ctx)
		if err != nil {
			return err
		}
		rdrq.sql = prev
	}
	return nil
}

func (rdrq *RetrospectiveDiscussionReplyQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*RetrospectiveDiscussionReply, error) {
	var (
		nodes       = []*RetrospectiveDiscussionReply{}
		withFKs     = rdrq.withFKs
		_spec       = rdrq.querySpec()
		loadedTypes = [3]bool{
			rdrq.withDiscussion != nil,
			rdrq.withParentReply != nil,
			rdrq.withReplies != nil,
		}
	)
	if rdrq.withDiscussion != nil || rdrq.withParentReply != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, retrospectivediscussionreply.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*RetrospectiveDiscussionReply).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &RetrospectiveDiscussionReply{config: rdrq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(rdrq.modifiers) > 0 {
		_spec.Modifiers = rdrq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, rdrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := rdrq.withDiscussion; query != nil {
		if err := rdrq.loadDiscussion(ctx, query, nodes, nil,
			func(n *RetrospectiveDiscussionReply, e *RetrospectiveDiscussion) { n.Edges.Discussion = e }); err != nil {
			return nil, err
		}
	}
	if query := rdrq.withParentReply; query != nil {
		if err := rdrq.loadParentReply(ctx, query, nodes, nil,
			func(n *RetrospectiveDiscussionReply, e *RetrospectiveDiscussionReply) { n.Edges.ParentReply = e }); err != nil {
			return nil, err
		}
	}
	if query := rdrq.withReplies; query != nil {
		if err := rdrq.loadReplies(ctx, query, nodes,
			func(n *RetrospectiveDiscussionReply) { n.Edges.Replies = []*RetrospectiveDiscussionReply{} },
			func(n *RetrospectiveDiscussionReply, e *RetrospectiveDiscussionReply) {
				n.Edges.Replies = append(n.Edges.Replies, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (rdrq *RetrospectiveDiscussionReplyQuery) loadDiscussion(ctx context.Context, query *RetrospectiveDiscussionQuery, nodes []*RetrospectiveDiscussionReply, init func(*RetrospectiveDiscussionReply), assign func(*RetrospectiveDiscussionReply, *RetrospectiveDiscussion)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*RetrospectiveDiscussionReply)
	for i := range nodes {
		if nodes[i].retrospective_discussion_reply_discussion == nil {
			continue
		}
		fk := *nodes[i].retrospective_discussion_reply_discussion
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(retrospectivediscussion.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "retrospective_discussion_reply_discussion" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rdrq *RetrospectiveDiscussionReplyQuery) loadParentReply(ctx context.Context, query *RetrospectiveDiscussionReplyQuery, nodes []*RetrospectiveDiscussionReply, init func(*RetrospectiveDiscussionReply), assign func(*RetrospectiveDiscussionReply, *RetrospectiveDiscussionReply)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*RetrospectiveDiscussionReply)
	for i := range nodes {
		if nodes[i].retrospective_discussion_reply_replies == nil {
			continue
		}
		fk := *nodes[i].retrospective_discussion_reply_replies
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(retrospectivediscussionreply.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "retrospective_discussion_reply_replies" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rdrq *RetrospectiveDiscussionReplyQuery) loadReplies(ctx context.Context, query *RetrospectiveDiscussionReplyQuery, nodes []*RetrospectiveDiscussionReply, init func(*RetrospectiveDiscussionReply), assign func(*RetrospectiveDiscussionReply, *RetrospectiveDiscussionReply)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*RetrospectiveDiscussionReply)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.RetrospectiveDiscussionReply(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(retrospectivediscussionreply.RepliesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.retrospective_discussion_reply_replies
		if fk == nil {
			return fmt.Errorf(`foreign-key "retrospective_discussion_reply_replies" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "retrospective_discussion_reply_replies" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (rdrq *RetrospectiveDiscussionReplyQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rdrq.querySpec()
	if len(rdrq.modifiers) > 0 {
		_spec.Modifiers = rdrq.modifiers
	}
	_spec.Node.Columns = rdrq.ctx.Fields
	if len(rdrq.ctx.Fields) > 0 {
		_spec.Unique = rdrq.ctx.Unique != nil && *rdrq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, rdrq.driver, _spec)
}

func (rdrq *RetrospectiveDiscussionReplyQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(retrospectivediscussionreply.Table, retrospectivediscussionreply.Columns, sqlgraph.NewFieldSpec(retrospectivediscussionreply.FieldID, field.TypeUUID))
	_spec.From = rdrq.sql
	if unique := rdrq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if rdrq.path != nil {
		_spec.Unique = true
	}
	if fields := rdrq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, retrospectivediscussionreply.FieldID)
		for i := range fields {
			if fields[i] != retrospectivediscussionreply.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := rdrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rdrq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rdrq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rdrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (rdrq *RetrospectiveDiscussionReplyQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(rdrq.driver.Dialect())
	t1 := builder.Table(retrospectivediscussionreply.Table)
	columns := rdrq.ctx.Fields
	if len(columns) == 0 {
		columns = retrospectivediscussionreply.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if rdrq.sql != nil {
		selector = rdrq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if rdrq.ctx.Unique != nil && *rdrq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range rdrq.modifiers {
		m(selector)
	}
	for _, p := range rdrq.predicates {
		p(selector)
	}
	for _, p := range rdrq.order {
		p(selector)
	}
	if offset := rdrq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rdrq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (rdrq *RetrospectiveDiscussionReplyQuery) Modify(modifiers ...func(s *sql.Selector)) *RetrospectiveDiscussionReplySelect {
	rdrq.modifiers = append(rdrq.modifiers, modifiers...)
	return rdrq.Select()
}

// RetrospectiveDiscussionReplyGroupBy is the group-by builder for RetrospectiveDiscussionReply entities.
type RetrospectiveDiscussionReplyGroupBy struct {
	selector
	build *RetrospectiveDiscussionReplyQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rdrgb *RetrospectiveDiscussionReplyGroupBy) Aggregate(fns ...AggregateFunc) *RetrospectiveDiscussionReplyGroupBy {
	rdrgb.fns = append(rdrgb.fns, fns...)
	return rdrgb
}

// Scan applies the selector query and scans the result into the given value.
func (rdrgb *RetrospectiveDiscussionReplyGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rdrgb.build.ctx, ent.OpQueryGroupBy)
	if err := rdrgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RetrospectiveDiscussionReplyQuery, *RetrospectiveDiscussionReplyGroupBy](ctx, rdrgb.build, rdrgb, rdrgb.build.inters, v)
}

func (rdrgb *RetrospectiveDiscussionReplyGroupBy) sqlScan(ctx context.Context, root *RetrospectiveDiscussionReplyQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(rdrgb.fns))
	for _, fn := range rdrgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*rdrgb.flds)+len(rdrgb.fns))
		for _, f := range *rdrgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*rdrgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rdrgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// RetrospectiveDiscussionReplySelect is the builder for selecting fields of RetrospectiveDiscussionReply entities.
type RetrospectiveDiscussionReplySelect struct {
	*RetrospectiveDiscussionReplyQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (rdrs *RetrospectiveDiscussionReplySelect) Aggregate(fns ...AggregateFunc) *RetrospectiveDiscussionReplySelect {
	rdrs.fns = append(rdrs.fns, fns...)
	return rdrs
}

// Scan applies the selector query and scans the result into the given value.
func (rdrs *RetrospectiveDiscussionReplySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rdrs.ctx, ent.OpQuerySelect)
	if err := rdrs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RetrospectiveDiscussionReplyQuery, *RetrospectiveDiscussionReplySelect](ctx, rdrs.RetrospectiveDiscussionReplyQuery, rdrs, rdrs.inters, v)
}

func (rdrs *RetrospectiveDiscussionReplySelect) sqlScan(ctx context.Context, root *RetrospectiveDiscussionReplyQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(rdrs.fns))
	for _, fn := range rdrs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*rdrs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rdrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (rdrs *RetrospectiveDiscussionReplySelect) Modify(modifiers ...func(s *sql.Selector)) *RetrospectiveDiscussionReplySelect {
	rdrs.modifiers = append(rdrs.modifiers, modifiers...)
	return rdrs
}
