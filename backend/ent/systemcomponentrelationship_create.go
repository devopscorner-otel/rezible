// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/systemcomponent"
	"github.com/rezible/rezible/ent/systemcomponentrelationship"
	"github.com/rezible/rezible/ent/systemcomponentrelationshipcontrolaction"
	"github.com/rezible/rezible/ent/systemcomponentrelationshipfeedback"
)

// SystemComponentRelationshipCreate is the builder for creating a SystemComponentRelationship entity.
type SystemComponentRelationshipCreate struct {
	config
	mutation *SystemComponentRelationshipMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSourceID sets the "source_id" field.
func (scrc *SystemComponentRelationshipCreate) SetSourceID(u uuid.UUID) *SystemComponentRelationshipCreate {
	scrc.mutation.SetSourceID(u)
	return scrc
}

// SetTargetID sets the "target_id" field.
func (scrc *SystemComponentRelationshipCreate) SetTargetID(u uuid.UUID) *SystemComponentRelationshipCreate {
	scrc.mutation.SetTargetID(u)
	return scrc
}

// SetDescription sets the "description" field.
func (scrc *SystemComponentRelationshipCreate) SetDescription(s string) *SystemComponentRelationshipCreate {
	scrc.mutation.SetDescription(s)
	return scrc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (scrc *SystemComponentRelationshipCreate) SetNillableDescription(s *string) *SystemComponentRelationshipCreate {
	if s != nil {
		scrc.SetDescription(*s)
	}
	return scrc
}

// SetCreatedAt sets the "created_at" field.
func (scrc *SystemComponentRelationshipCreate) SetCreatedAt(t time.Time) *SystemComponentRelationshipCreate {
	scrc.mutation.SetCreatedAt(t)
	return scrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (scrc *SystemComponentRelationshipCreate) SetNillableCreatedAt(t *time.Time) *SystemComponentRelationshipCreate {
	if t != nil {
		scrc.SetCreatedAt(*t)
	}
	return scrc
}

// SetID sets the "id" field.
func (scrc *SystemComponentRelationshipCreate) SetID(u uuid.UUID) *SystemComponentRelationshipCreate {
	scrc.mutation.SetID(u)
	return scrc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (scrc *SystemComponentRelationshipCreate) SetNillableID(u *uuid.UUID) *SystemComponentRelationshipCreate {
	if u != nil {
		scrc.SetID(*u)
	}
	return scrc
}

// SetSource sets the "source" edge to the SystemComponent entity.
func (scrc *SystemComponentRelationshipCreate) SetSource(s *SystemComponent) *SystemComponentRelationshipCreate {
	return scrc.SetSourceID(s.ID)
}

// SetTarget sets the "target" edge to the SystemComponent entity.
func (scrc *SystemComponentRelationshipCreate) SetTarget(s *SystemComponent) *SystemComponentRelationshipCreate {
	return scrc.SetTargetID(s.ID)
}

// AddControlActionIDs adds the "control_actions" edge to the SystemComponentRelationshipControlAction entity by IDs.
func (scrc *SystemComponentRelationshipCreate) AddControlActionIDs(ids ...uuid.UUID) *SystemComponentRelationshipCreate {
	scrc.mutation.AddControlActionIDs(ids...)
	return scrc
}

// AddControlActions adds the "control_actions" edges to the SystemComponentRelationshipControlAction entity.
func (scrc *SystemComponentRelationshipCreate) AddControlActions(s ...*SystemComponentRelationshipControlAction) *SystemComponentRelationshipCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scrc.AddControlActionIDs(ids...)
}

// AddFeedbackIDs adds the "feedback" edge to the SystemComponentRelationshipFeedback entity by IDs.
func (scrc *SystemComponentRelationshipCreate) AddFeedbackIDs(ids ...uuid.UUID) *SystemComponentRelationshipCreate {
	scrc.mutation.AddFeedbackIDs(ids...)
	return scrc
}

// AddFeedback adds the "feedback" edges to the SystemComponentRelationshipFeedback entity.
func (scrc *SystemComponentRelationshipCreate) AddFeedback(s ...*SystemComponentRelationshipFeedback) *SystemComponentRelationshipCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scrc.AddFeedbackIDs(ids...)
}

// Mutation returns the SystemComponentRelationshipMutation object of the builder.
func (scrc *SystemComponentRelationshipCreate) Mutation() *SystemComponentRelationshipMutation {
	return scrc.mutation
}

// Save creates the SystemComponentRelationship in the database.
func (scrc *SystemComponentRelationshipCreate) Save(ctx context.Context) (*SystemComponentRelationship, error) {
	scrc.defaults()
	return withHooks(ctx, scrc.sqlSave, scrc.mutation, scrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (scrc *SystemComponentRelationshipCreate) SaveX(ctx context.Context) *SystemComponentRelationship {
	v, err := scrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scrc *SystemComponentRelationshipCreate) Exec(ctx context.Context) error {
	_, err := scrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scrc *SystemComponentRelationshipCreate) ExecX(ctx context.Context) {
	if err := scrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scrc *SystemComponentRelationshipCreate) defaults() {
	if _, ok := scrc.mutation.CreatedAt(); !ok {
		v := systemcomponentrelationship.DefaultCreatedAt()
		scrc.mutation.SetCreatedAt(v)
	}
	if _, ok := scrc.mutation.ID(); !ok {
		v := systemcomponentrelationship.DefaultID()
		scrc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scrc *SystemComponentRelationshipCreate) check() error {
	if _, ok := scrc.mutation.SourceID(); !ok {
		return &ValidationError{Name: "source_id", err: errors.New(`ent: missing required field "SystemComponentRelationship.source_id"`)}
	}
	if _, ok := scrc.mutation.TargetID(); !ok {
		return &ValidationError{Name: "target_id", err: errors.New(`ent: missing required field "SystemComponentRelationship.target_id"`)}
	}
	if _, ok := scrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SystemComponentRelationship.created_at"`)}
	}
	if len(scrc.mutation.SourceIDs()) == 0 {
		return &ValidationError{Name: "source", err: errors.New(`ent: missing required edge "SystemComponentRelationship.source"`)}
	}
	if len(scrc.mutation.TargetIDs()) == 0 {
		return &ValidationError{Name: "target", err: errors.New(`ent: missing required edge "SystemComponentRelationship.target"`)}
	}
	return nil
}

func (scrc *SystemComponentRelationshipCreate) sqlSave(ctx context.Context) (*SystemComponentRelationship, error) {
	if err := scrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := scrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, scrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	scrc.mutation.id = &_node.ID
	scrc.mutation.done = true
	return _node, nil
}

func (scrc *SystemComponentRelationshipCreate) createSpec() (*SystemComponentRelationship, *sqlgraph.CreateSpec) {
	var (
		_node = &SystemComponentRelationship{config: scrc.config}
		_spec = sqlgraph.NewCreateSpec(systemcomponentrelationship.Table, sqlgraph.NewFieldSpec(systemcomponentrelationship.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = scrc.conflict
	if id, ok := scrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := scrc.mutation.Description(); ok {
		_spec.SetField(systemcomponentrelationship.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := scrc.mutation.CreatedAt(); ok {
		_spec.SetField(systemcomponentrelationship.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := scrc.mutation.SourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemcomponentrelationship.SourceTable,
			Columns: []string{systemcomponentrelationship.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SourceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := scrc.mutation.TargetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemcomponentrelationship.TargetTable,
			Columns: []string{systemcomponentrelationship.TargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TargetID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := scrc.mutation.ControlActionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   systemcomponentrelationship.ControlActionsTable,
			Columns: []string{systemcomponentrelationship.ControlActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentrelationshipcontrolaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := scrc.mutation.FeedbackIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   systemcomponentrelationship.FeedbackTable,
			Columns: []string{systemcomponentrelationship.FeedbackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentrelationshipfeedback.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SystemComponentRelationship.Create().
//		SetSourceID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SystemComponentRelationshipUpsert) {
//			SetSourceID(v+v).
//		}).
//		Exec(ctx)
func (scrc *SystemComponentRelationshipCreate) OnConflict(opts ...sql.ConflictOption) *SystemComponentRelationshipUpsertOne {
	scrc.conflict = opts
	return &SystemComponentRelationshipUpsertOne{
		create: scrc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SystemComponentRelationship.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scrc *SystemComponentRelationshipCreate) OnConflictColumns(columns ...string) *SystemComponentRelationshipUpsertOne {
	scrc.conflict = append(scrc.conflict, sql.ConflictColumns(columns...))
	return &SystemComponentRelationshipUpsertOne{
		create: scrc,
	}
}

type (
	// SystemComponentRelationshipUpsertOne is the builder for "upsert"-ing
	//  one SystemComponentRelationship node.
	SystemComponentRelationshipUpsertOne struct {
		create *SystemComponentRelationshipCreate
	}

	// SystemComponentRelationshipUpsert is the "OnConflict" setter.
	SystemComponentRelationshipUpsert struct {
		*sql.UpdateSet
	}
)

// SetSourceID sets the "source_id" field.
func (u *SystemComponentRelationshipUpsert) SetSourceID(v uuid.UUID) *SystemComponentRelationshipUpsert {
	u.Set(systemcomponentrelationship.FieldSourceID, v)
	return u
}

// UpdateSourceID sets the "source_id" field to the value that was provided on create.
func (u *SystemComponentRelationshipUpsert) UpdateSourceID() *SystemComponentRelationshipUpsert {
	u.SetExcluded(systemcomponentrelationship.FieldSourceID)
	return u
}

// SetTargetID sets the "target_id" field.
func (u *SystemComponentRelationshipUpsert) SetTargetID(v uuid.UUID) *SystemComponentRelationshipUpsert {
	u.Set(systemcomponentrelationship.FieldTargetID, v)
	return u
}

// UpdateTargetID sets the "target_id" field to the value that was provided on create.
func (u *SystemComponentRelationshipUpsert) UpdateTargetID() *SystemComponentRelationshipUpsert {
	u.SetExcluded(systemcomponentrelationship.FieldTargetID)
	return u
}

// SetDescription sets the "description" field.
func (u *SystemComponentRelationshipUpsert) SetDescription(v string) *SystemComponentRelationshipUpsert {
	u.Set(systemcomponentrelationship.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SystemComponentRelationshipUpsert) UpdateDescription() *SystemComponentRelationshipUpsert {
	u.SetExcluded(systemcomponentrelationship.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *SystemComponentRelationshipUpsert) ClearDescription() *SystemComponentRelationshipUpsert {
	u.SetNull(systemcomponentrelationship.FieldDescription)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SystemComponentRelationshipUpsert) SetCreatedAt(v time.Time) *SystemComponentRelationshipUpsert {
	u.Set(systemcomponentrelationship.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SystemComponentRelationshipUpsert) UpdateCreatedAt() *SystemComponentRelationshipUpsert {
	u.SetExcluded(systemcomponentrelationship.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SystemComponentRelationship.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(systemcomponentrelationship.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SystemComponentRelationshipUpsertOne) UpdateNewValues() *SystemComponentRelationshipUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(systemcomponentrelationship.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SystemComponentRelationship.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SystemComponentRelationshipUpsertOne) Ignore() *SystemComponentRelationshipUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SystemComponentRelationshipUpsertOne) DoNothing() *SystemComponentRelationshipUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SystemComponentRelationshipCreate.OnConflict
// documentation for more info.
func (u *SystemComponentRelationshipUpsertOne) Update(set func(*SystemComponentRelationshipUpsert)) *SystemComponentRelationshipUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SystemComponentRelationshipUpsert{UpdateSet: update})
	}))
	return u
}

// SetSourceID sets the "source_id" field.
func (u *SystemComponentRelationshipUpsertOne) SetSourceID(v uuid.UUID) *SystemComponentRelationshipUpsertOne {
	return u.Update(func(s *SystemComponentRelationshipUpsert) {
		s.SetSourceID(v)
	})
}

// UpdateSourceID sets the "source_id" field to the value that was provided on create.
func (u *SystemComponentRelationshipUpsertOne) UpdateSourceID() *SystemComponentRelationshipUpsertOne {
	return u.Update(func(s *SystemComponentRelationshipUpsert) {
		s.UpdateSourceID()
	})
}

// SetTargetID sets the "target_id" field.
func (u *SystemComponentRelationshipUpsertOne) SetTargetID(v uuid.UUID) *SystemComponentRelationshipUpsertOne {
	return u.Update(func(s *SystemComponentRelationshipUpsert) {
		s.SetTargetID(v)
	})
}

// UpdateTargetID sets the "target_id" field to the value that was provided on create.
func (u *SystemComponentRelationshipUpsertOne) UpdateTargetID() *SystemComponentRelationshipUpsertOne {
	return u.Update(func(s *SystemComponentRelationshipUpsert) {
		s.UpdateTargetID()
	})
}

// SetDescription sets the "description" field.
func (u *SystemComponentRelationshipUpsertOne) SetDescription(v string) *SystemComponentRelationshipUpsertOne {
	return u.Update(func(s *SystemComponentRelationshipUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SystemComponentRelationshipUpsertOne) UpdateDescription() *SystemComponentRelationshipUpsertOne {
	return u.Update(func(s *SystemComponentRelationshipUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *SystemComponentRelationshipUpsertOne) ClearDescription() *SystemComponentRelationshipUpsertOne {
	return u.Update(func(s *SystemComponentRelationshipUpsert) {
		s.ClearDescription()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SystemComponentRelationshipUpsertOne) SetCreatedAt(v time.Time) *SystemComponentRelationshipUpsertOne {
	return u.Update(func(s *SystemComponentRelationshipUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SystemComponentRelationshipUpsertOne) UpdateCreatedAt() *SystemComponentRelationshipUpsertOne {
	return u.Update(func(s *SystemComponentRelationshipUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *SystemComponentRelationshipUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SystemComponentRelationshipCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SystemComponentRelationshipUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SystemComponentRelationshipUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: SystemComponentRelationshipUpsertOne.ID is not supported by MySQL driver. Use SystemComponentRelationshipUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SystemComponentRelationshipUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SystemComponentRelationshipCreateBulk is the builder for creating many SystemComponentRelationship entities in bulk.
type SystemComponentRelationshipCreateBulk struct {
	config
	err      error
	builders []*SystemComponentRelationshipCreate
	conflict []sql.ConflictOption
}

// Save creates the SystemComponentRelationship entities in the database.
func (scrcb *SystemComponentRelationshipCreateBulk) Save(ctx context.Context) ([]*SystemComponentRelationship, error) {
	if scrcb.err != nil {
		return nil, scrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scrcb.builders))
	nodes := make([]*SystemComponentRelationship, len(scrcb.builders))
	mutators := make([]Mutator, len(scrcb.builders))
	for i := range scrcb.builders {
		func(i int, root context.Context) {
			builder := scrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SystemComponentRelationshipMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scrcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scrcb *SystemComponentRelationshipCreateBulk) SaveX(ctx context.Context) []*SystemComponentRelationship {
	v, err := scrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scrcb *SystemComponentRelationshipCreateBulk) Exec(ctx context.Context) error {
	_, err := scrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scrcb *SystemComponentRelationshipCreateBulk) ExecX(ctx context.Context) {
	if err := scrcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SystemComponentRelationship.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SystemComponentRelationshipUpsert) {
//			SetSourceID(v+v).
//		}).
//		Exec(ctx)
func (scrcb *SystemComponentRelationshipCreateBulk) OnConflict(opts ...sql.ConflictOption) *SystemComponentRelationshipUpsertBulk {
	scrcb.conflict = opts
	return &SystemComponentRelationshipUpsertBulk{
		create: scrcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SystemComponentRelationship.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scrcb *SystemComponentRelationshipCreateBulk) OnConflictColumns(columns ...string) *SystemComponentRelationshipUpsertBulk {
	scrcb.conflict = append(scrcb.conflict, sql.ConflictColumns(columns...))
	return &SystemComponentRelationshipUpsertBulk{
		create: scrcb,
	}
}

// SystemComponentRelationshipUpsertBulk is the builder for "upsert"-ing
// a bulk of SystemComponentRelationship nodes.
type SystemComponentRelationshipUpsertBulk struct {
	create *SystemComponentRelationshipCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SystemComponentRelationship.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(systemcomponentrelationship.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SystemComponentRelationshipUpsertBulk) UpdateNewValues() *SystemComponentRelationshipUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(systemcomponentrelationship.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SystemComponentRelationship.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SystemComponentRelationshipUpsertBulk) Ignore() *SystemComponentRelationshipUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SystemComponentRelationshipUpsertBulk) DoNothing() *SystemComponentRelationshipUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SystemComponentRelationshipCreateBulk.OnConflict
// documentation for more info.
func (u *SystemComponentRelationshipUpsertBulk) Update(set func(*SystemComponentRelationshipUpsert)) *SystemComponentRelationshipUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SystemComponentRelationshipUpsert{UpdateSet: update})
	}))
	return u
}

// SetSourceID sets the "source_id" field.
func (u *SystemComponentRelationshipUpsertBulk) SetSourceID(v uuid.UUID) *SystemComponentRelationshipUpsertBulk {
	return u.Update(func(s *SystemComponentRelationshipUpsert) {
		s.SetSourceID(v)
	})
}

// UpdateSourceID sets the "source_id" field to the value that was provided on create.
func (u *SystemComponentRelationshipUpsertBulk) UpdateSourceID() *SystemComponentRelationshipUpsertBulk {
	return u.Update(func(s *SystemComponentRelationshipUpsert) {
		s.UpdateSourceID()
	})
}

// SetTargetID sets the "target_id" field.
func (u *SystemComponentRelationshipUpsertBulk) SetTargetID(v uuid.UUID) *SystemComponentRelationshipUpsertBulk {
	return u.Update(func(s *SystemComponentRelationshipUpsert) {
		s.SetTargetID(v)
	})
}

// UpdateTargetID sets the "target_id" field to the value that was provided on create.
func (u *SystemComponentRelationshipUpsertBulk) UpdateTargetID() *SystemComponentRelationshipUpsertBulk {
	return u.Update(func(s *SystemComponentRelationshipUpsert) {
		s.UpdateTargetID()
	})
}

// SetDescription sets the "description" field.
func (u *SystemComponentRelationshipUpsertBulk) SetDescription(v string) *SystemComponentRelationshipUpsertBulk {
	return u.Update(func(s *SystemComponentRelationshipUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SystemComponentRelationshipUpsertBulk) UpdateDescription() *SystemComponentRelationshipUpsertBulk {
	return u.Update(func(s *SystemComponentRelationshipUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *SystemComponentRelationshipUpsertBulk) ClearDescription() *SystemComponentRelationshipUpsertBulk {
	return u.Update(func(s *SystemComponentRelationshipUpsert) {
		s.ClearDescription()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SystemComponentRelationshipUpsertBulk) SetCreatedAt(v time.Time) *SystemComponentRelationshipUpsertBulk {
	return u.Update(func(s *SystemComponentRelationshipUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SystemComponentRelationshipUpsertBulk) UpdateCreatedAt() *SystemComponentRelationshipUpsertBulk {
	return u.Update(func(s *SystemComponentRelationshipUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *SystemComponentRelationshipUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SystemComponentRelationshipCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SystemComponentRelationshipCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SystemComponentRelationshipUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
