// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/twohundreds/rezible/ent/incidentdebriefquestion"
	"github.com/twohundreds/rezible/ent/incidentfield"
	"github.com/twohundreds/rezible/ent/incidentfieldoption"
	"github.com/twohundreds/rezible/ent/predicate"
)

// IncidentFieldUpdate is the builder for updating IncidentField entities.
type IncidentFieldUpdate struct {
	config
	hooks     []Hook
	mutation  *IncidentFieldMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the IncidentFieldUpdate builder.
func (ifu *IncidentFieldUpdate) Where(ps ...predicate.IncidentField) *IncidentFieldUpdate {
	ifu.mutation.Where(ps...)
	return ifu
}

// SetArchiveTime sets the "archive_time" field.
func (ifu *IncidentFieldUpdate) SetArchiveTime(t time.Time) *IncidentFieldUpdate {
	ifu.mutation.SetArchiveTime(t)
	return ifu
}

// SetNillableArchiveTime sets the "archive_time" field if the given value is not nil.
func (ifu *IncidentFieldUpdate) SetNillableArchiveTime(t *time.Time) *IncidentFieldUpdate {
	if t != nil {
		ifu.SetArchiveTime(*t)
	}
	return ifu
}

// ClearArchiveTime clears the value of the "archive_time" field.
func (ifu *IncidentFieldUpdate) ClearArchiveTime() *IncidentFieldUpdate {
	ifu.mutation.ClearArchiveTime()
	return ifu
}

// SetName sets the "name" field.
func (ifu *IncidentFieldUpdate) SetName(s string) *IncidentFieldUpdate {
	ifu.mutation.SetName(s)
	return ifu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ifu *IncidentFieldUpdate) SetNillableName(s *string) *IncidentFieldUpdate {
	if s != nil {
		ifu.SetName(*s)
	}
	return ifu
}

// AddOptionIDs adds the "options" edge to the IncidentFieldOption entity by IDs.
func (ifu *IncidentFieldUpdate) AddOptionIDs(ids ...uuid.UUID) *IncidentFieldUpdate {
	ifu.mutation.AddOptionIDs(ids...)
	return ifu
}

// AddOptions adds the "options" edges to the IncidentFieldOption entity.
func (ifu *IncidentFieldUpdate) AddOptions(i ...*IncidentFieldOption) *IncidentFieldUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ifu.AddOptionIDs(ids...)
}

// AddDebriefQuestionIDs adds the "debrief_questions" edge to the IncidentDebriefQuestion entity by IDs.
func (ifu *IncidentFieldUpdate) AddDebriefQuestionIDs(ids ...uuid.UUID) *IncidentFieldUpdate {
	ifu.mutation.AddDebriefQuestionIDs(ids...)
	return ifu
}

// AddDebriefQuestions adds the "debrief_questions" edges to the IncidentDebriefQuestion entity.
func (ifu *IncidentFieldUpdate) AddDebriefQuestions(i ...*IncidentDebriefQuestion) *IncidentFieldUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ifu.AddDebriefQuestionIDs(ids...)
}

// Mutation returns the IncidentFieldMutation object of the builder.
func (ifu *IncidentFieldUpdate) Mutation() *IncidentFieldMutation {
	return ifu.mutation
}

// ClearOptions clears all "options" edges to the IncidentFieldOption entity.
func (ifu *IncidentFieldUpdate) ClearOptions() *IncidentFieldUpdate {
	ifu.mutation.ClearOptions()
	return ifu
}

// RemoveOptionIDs removes the "options" edge to IncidentFieldOption entities by IDs.
func (ifu *IncidentFieldUpdate) RemoveOptionIDs(ids ...uuid.UUID) *IncidentFieldUpdate {
	ifu.mutation.RemoveOptionIDs(ids...)
	return ifu
}

// RemoveOptions removes "options" edges to IncidentFieldOption entities.
func (ifu *IncidentFieldUpdate) RemoveOptions(i ...*IncidentFieldOption) *IncidentFieldUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ifu.RemoveOptionIDs(ids...)
}

// ClearDebriefQuestions clears all "debrief_questions" edges to the IncidentDebriefQuestion entity.
func (ifu *IncidentFieldUpdate) ClearDebriefQuestions() *IncidentFieldUpdate {
	ifu.mutation.ClearDebriefQuestions()
	return ifu
}

// RemoveDebriefQuestionIDs removes the "debrief_questions" edge to IncidentDebriefQuestion entities by IDs.
func (ifu *IncidentFieldUpdate) RemoveDebriefQuestionIDs(ids ...uuid.UUID) *IncidentFieldUpdate {
	ifu.mutation.RemoveDebriefQuestionIDs(ids...)
	return ifu
}

// RemoveDebriefQuestions removes "debrief_questions" edges to IncidentDebriefQuestion entities.
func (ifu *IncidentFieldUpdate) RemoveDebriefQuestions(i ...*IncidentDebriefQuestion) *IncidentFieldUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ifu.RemoveDebriefQuestionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ifu *IncidentFieldUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ifu.sqlSave, ifu.mutation, ifu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ifu *IncidentFieldUpdate) SaveX(ctx context.Context) int {
	affected, err := ifu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ifu *IncidentFieldUpdate) Exec(ctx context.Context) error {
	_, err := ifu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ifu *IncidentFieldUpdate) ExecX(ctx context.Context) {
	if err := ifu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ifu *IncidentFieldUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *IncidentFieldUpdate {
	ifu.modifiers = append(ifu.modifiers, modifiers...)
	return ifu
}

func (ifu *IncidentFieldUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(incidentfield.Table, incidentfield.Columns, sqlgraph.NewFieldSpec(incidentfield.FieldID, field.TypeUUID))
	if ps := ifu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ifu.mutation.ArchiveTime(); ok {
		_spec.SetField(incidentfield.FieldArchiveTime, field.TypeTime, value)
	}
	if ifu.mutation.ArchiveTimeCleared() {
		_spec.ClearField(incidentfield.FieldArchiveTime, field.TypeTime)
	}
	if value, ok := ifu.mutation.Name(); ok {
		_spec.SetField(incidentfield.FieldName, field.TypeString, value)
	}
	if ifu.mutation.OptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incidentfield.OptionsTable,
			Columns: []string{incidentfield.OptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentfieldoption.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ifu.mutation.RemovedOptionsIDs(); len(nodes) > 0 && !ifu.mutation.OptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incidentfield.OptionsTable,
			Columns: []string{incidentfield.OptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentfieldoption.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ifu.mutation.OptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incidentfield.OptionsTable,
			Columns: []string{incidentfield.OptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentfieldoption.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ifu.mutation.DebriefQuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   incidentfield.DebriefQuestionsTable,
			Columns: incidentfield.DebriefQuestionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentdebriefquestion.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ifu.mutation.RemovedDebriefQuestionsIDs(); len(nodes) > 0 && !ifu.mutation.DebriefQuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   incidentfield.DebriefQuestionsTable,
			Columns: incidentfield.DebriefQuestionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentdebriefquestion.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ifu.mutation.DebriefQuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   incidentfield.DebriefQuestionsTable,
			Columns: incidentfield.DebriefQuestionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentdebriefquestion.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ifu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ifu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{incidentfield.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ifu.mutation.done = true
	return n, nil
}

// IncidentFieldUpdateOne is the builder for updating a single IncidentField entity.
type IncidentFieldUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *IncidentFieldMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetArchiveTime sets the "archive_time" field.
func (ifuo *IncidentFieldUpdateOne) SetArchiveTime(t time.Time) *IncidentFieldUpdateOne {
	ifuo.mutation.SetArchiveTime(t)
	return ifuo
}

// SetNillableArchiveTime sets the "archive_time" field if the given value is not nil.
func (ifuo *IncidentFieldUpdateOne) SetNillableArchiveTime(t *time.Time) *IncidentFieldUpdateOne {
	if t != nil {
		ifuo.SetArchiveTime(*t)
	}
	return ifuo
}

// ClearArchiveTime clears the value of the "archive_time" field.
func (ifuo *IncidentFieldUpdateOne) ClearArchiveTime() *IncidentFieldUpdateOne {
	ifuo.mutation.ClearArchiveTime()
	return ifuo
}

// SetName sets the "name" field.
func (ifuo *IncidentFieldUpdateOne) SetName(s string) *IncidentFieldUpdateOne {
	ifuo.mutation.SetName(s)
	return ifuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ifuo *IncidentFieldUpdateOne) SetNillableName(s *string) *IncidentFieldUpdateOne {
	if s != nil {
		ifuo.SetName(*s)
	}
	return ifuo
}

// AddOptionIDs adds the "options" edge to the IncidentFieldOption entity by IDs.
func (ifuo *IncidentFieldUpdateOne) AddOptionIDs(ids ...uuid.UUID) *IncidentFieldUpdateOne {
	ifuo.mutation.AddOptionIDs(ids...)
	return ifuo
}

// AddOptions adds the "options" edges to the IncidentFieldOption entity.
func (ifuo *IncidentFieldUpdateOne) AddOptions(i ...*IncidentFieldOption) *IncidentFieldUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ifuo.AddOptionIDs(ids...)
}

// AddDebriefQuestionIDs adds the "debrief_questions" edge to the IncidentDebriefQuestion entity by IDs.
func (ifuo *IncidentFieldUpdateOne) AddDebriefQuestionIDs(ids ...uuid.UUID) *IncidentFieldUpdateOne {
	ifuo.mutation.AddDebriefQuestionIDs(ids...)
	return ifuo
}

// AddDebriefQuestions adds the "debrief_questions" edges to the IncidentDebriefQuestion entity.
func (ifuo *IncidentFieldUpdateOne) AddDebriefQuestions(i ...*IncidentDebriefQuestion) *IncidentFieldUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ifuo.AddDebriefQuestionIDs(ids...)
}

// Mutation returns the IncidentFieldMutation object of the builder.
func (ifuo *IncidentFieldUpdateOne) Mutation() *IncidentFieldMutation {
	return ifuo.mutation
}

// ClearOptions clears all "options" edges to the IncidentFieldOption entity.
func (ifuo *IncidentFieldUpdateOne) ClearOptions() *IncidentFieldUpdateOne {
	ifuo.mutation.ClearOptions()
	return ifuo
}

// RemoveOptionIDs removes the "options" edge to IncidentFieldOption entities by IDs.
func (ifuo *IncidentFieldUpdateOne) RemoveOptionIDs(ids ...uuid.UUID) *IncidentFieldUpdateOne {
	ifuo.mutation.RemoveOptionIDs(ids...)
	return ifuo
}

// RemoveOptions removes "options" edges to IncidentFieldOption entities.
func (ifuo *IncidentFieldUpdateOne) RemoveOptions(i ...*IncidentFieldOption) *IncidentFieldUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ifuo.RemoveOptionIDs(ids...)
}

// ClearDebriefQuestions clears all "debrief_questions" edges to the IncidentDebriefQuestion entity.
func (ifuo *IncidentFieldUpdateOne) ClearDebriefQuestions() *IncidentFieldUpdateOne {
	ifuo.mutation.ClearDebriefQuestions()
	return ifuo
}

// RemoveDebriefQuestionIDs removes the "debrief_questions" edge to IncidentDebriefQuestion entities by IDs.
func (ifuo *IncidentFieldUpdateOne) RemoveDebriefQuestionIDs(ids ...uuid.UUID) *IncidentFieldUpdateOne {
	ifuo.mutation.RemoveDebriefQuestionIDs(ids...)
	return ifuo
}

// RemoveDebriefQuestions removes "debrief_questions" edges to IncidentDebriefQuestion entities.
func (ifuo *IncidentFieldUpdateOne) RemoveDebriefQuestions(i ...*IncidentDebriefQuestion) *IncidentFieldUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ifuo.RemoveDebriefQuestionIDs(ids...)
}

// Where appends a list predicates to the IncidentFieldUpdate builder.
func (ifuo *IncidentFieldUpdateOne) Where(ps ...predicate.IncidentField) *IncidentFieldUpdateOne {
	ifuo.mutation.Where(ps...)
	return ifuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ifuo *IncidentFieldUpdateOne) Select(field string, fields ...string) *IncidentFieldUpdateOne {
	ifuo.fields = append([]string{field}, fields...)
	return ifuo
}

// Save executes the query and returns the updated IncidentField entity.
func (ifuo *IncidentFieldUpdateOne) Save(ctx context.Context) (*IncidentField, error) {
	return withHooks(ctx, ifuo.sqlSave, ifuo.mutation, ifuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ifuo *IncidentFieldUpdateOne) SaveX(ctx context.Context) *IncidentField {
	node, err := ifuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ifuo *IncidentFieldUpdateOne) Exec(ctx context.Context) error {
	_, err := ifuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ifuo *IncidentFieldUpdateOne) ExecX(ctx context.Context) {
	if err := ifuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ifuo *IncidentFieldUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *IncidentFieldUpdateOne {
	ifuo.modifiers = append(ifuo.modifiers, modifiers...)
	return ifuo
}

func (ifuo *IncidentFieldUpdateOne) sqlSave(ctx context.Context) (_node *IncidentField, err error) {
	_spec := sqlgraph.NewUpdateSpec(incidentfield.Table, incidentfield.Columns, sqlgraph.NewFieldSpec(incidentfield.FieldID, field.TypeUUID))
	id, ok := ifuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "IncidentField.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ifuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, incidentfield.FieldID)
		for _, f := range fields {
			if !incidentfield.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != incidentfield.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ifuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ifuo.mutation.ArchiveTime(); ok {
		_spec.SetField(incidentfield.FieldArchiveTime, field.TypeTime, value)
	}
	if ifuo.mutation.ArchiveTimeCleared() {
		_spec.ClearField(incidentfield.FieldArchiveTime, field.TypeTime)
	}
	if value, ok := ifuo.mutation.Name(); ok {
		_spec.SetField(incidentfield.FieldName, field.TypeString, value)
	}
	if ifuo.mutation.OptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incidentfield.OptionsTable,
			Columns: []string{incidentfield.OptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentfieldoption.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ifuo.mutation.RemovedOptionsIDs(); len(nodes) > 0 && !ifuo.mutation.OptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incidentfield.OptionsTable,
			Columns: []string{incidentfield.OptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentfieldoption.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ifuo.mutation.OptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incidentfield.OptionsTable,
			Columns: []string{incidentfield.OptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentfieldoption.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ifuo.mutation.DebriefQuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   incidentfield.DebriefQuestionsTable,
			Columns: incidentfield.DebriefQuestionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentdebriefquestion.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ifuo.mutation.RemovedDebriefQuestionsIDs(); len(nodes) > 0 && !ifuo.mutation.DebriefQuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   incidentfield.DebriefQuestionsTable,
			Columns: incidentfield.DebriefQuestionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentdebriefquestion.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ifuo.mutation.DebriefQuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   incidentfield.DebriefQuestionsTable,
			Columns: incidentfield.DebriefQuestionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentdebriefquestion.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ifuo.modifiers...)
	_node = &IncidentField{config: ifuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ifuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{incidentfield.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ifuo.mutation.done = true
	return _node, nil
}
