// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/systemcomponent"
	"github.com/rezible/rezible/ent/systemcomponentconstraint"
	"github.com/rezible/rezible/ent/systemhazard"
)

// SystemComponentConstraintCreate is the builder for creating a SystemComponentConstraint entity.
type SystemComponentConstraintCreate struct {
	config
	mutation *SystemComponentConstraintMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetComponentID sets the "component_id" field.
func (sccc *SystemComponentConstraintCreate) SetComponentID(u uuid.UUID) *SystemComponentConstraintCreate {
	sccc.mutation.SetComponentID(u)
	return sccc
}

// SetLabel sets the "label" field.
func (sccc *SystemComponentConstraintCreate) SetLabel(s string) *SystemComponentConstraintCreate {
	sccc.mutation.SetLabel(s)
	return sccc
}

// SetDescription sets the "description" field.
func (sccc *SystemComponentConstraintCreate) SetDescription(s string) *SystemComponentConstraintCreate {
	sccc.mutation.SetDescription(s)
	return sccc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sccc *SystemComponentConstraintCreate) SetNillableDescription(s *string) *SystemComponentConstraintCreate {
	if s != nil {
		sccc.SetDescription(*s)
	}
	return sccc
}

// SetCreatedAt sets the "created_at" field.
func (sccc *SystemComponentConstraintCreate) SetCreatedAt(t time.Time) *SystemComponentConstraintCreate {
	sccc.mutation.SetCreatedAt(t)
	return sccc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sccc *SystemComponentConstraintCreate) SetNillableCreatedAt(t *time.Time) *SystemComponentConstraintCreate {
	if t != nil {
		sccc.SetCreatedAt(*t)
	}
	return sccc
}

// SetID sets the "id" field.
func (sccc *SystemComponentConstraintCreate) SetID(u uuid.UUID) *SystemComponentConstraintCreate {
	sccc.mutation.SetID(u)
	return sccc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sccc *SystemComponentConstraintCreate) SetNillableID(u *uuid.UUID) *SystemComponentConstraintCreate {
	if u != nil {
		sccc.SetID(*u)
	}
	return sccc
}

// SetComponent sets the "component" edge to the SystemComponent entity.
func (sccc *SystemComponentConstraintCreate) SetComponent(s *SystemComponent) *SystemComponentConstraintCreate {
	return sccc.SetComponentID(s.ID)
}

// AddHazardIDs adds the "hazards" edge to the SystemHazard entity by IDs.
func (sccc *SystemComponentConstraintCreate) AddHazardIDs(ids ...uuid.UUID) *SystemComponentConstraintCreate {
	sccc.mutation.AddHazardIDs(ids...)
	return sccc
}

// AddHazards adds the "hazards" edges to the SystemHazard entity.
func (sccc *SystemComponentConstraintCreate) AddHazards(s ...*SystemHazard) *SystemComponentConstraintCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sccc.AddHazardIDs(ids...)
}

// Mutation returns the SystemComponentConstraintMutation object of the builder.
func (sccc *SystemComponentConstraintCreate) Mutation() *SystemComponentConstraintMutation {
	return sccc.mutation
}

// Save creates the SystemComponentConstraint in the database.
func (sccc *SystemComponentConstraintCreate) Save(ctx context.Context) (*SystemComponentConstraint, error) {
	if err := sccc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, sccc.sqlSave, sccc.mutation, sccc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sccc *SystemComponentConstraintCreate) SaveX(ctx context.Context) *SystemComponentConstraint {
	v, err := sccc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sccc *SystemComponentConstraintCreate) Exec(ctx context.Context) error {
	_, err := sccc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sccc *SystemComponentConstraintCreate) ExecX(ctx context.Context) {
	if err := sccc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sccc *SystemComponentConstraintCreate) defaults() error {
	if _, ok := sccc.mutation.CreatedAt(); !ok {
		if systemcomponentconstraint.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized systemcomponentconstraint.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := systemcomponentconstraint.DefaultCreatedAt()
		sccc.mutation.SetCreatedAt(v)
	}
	if _, ok := sccc.mutation.ID(); !ok {
		if systemcomponentconstraint.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized systemcomponentconstraint.DefaultID (forgotten import ent/runtime?)")
		}
		v := systemcomponentconstraint.DefaultID()
		sccc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sccc *SystemComponentConstraintCreate) check() error {
	if _, ok := sccc.mutation.ComponentID(); !ok {
		return &ValidationError{Name: "component_id", err: errors.New(`ent: missing required field "SystemComponentConstraint.component_id"`)}
	}
	if _, ok := sccc.mutation.Label(); !ok {
		return &ValidationError{Name: "label", err: errors.New(`ent: missing required field "SystemComponentConstraint.label"`)}
	}
	if _, ok := sccc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SystemComponentConstraint.created_at"`)}
	}
	if len(sccc.mutation.ComponentIDs()) == 0 {
		return &ValidationError{Name: "component", err: errors.New(`ent: missing required edge "SystemComponentConstraint.component"`)}
	}
	return nil
}

func (sccc *SystemComponentConstraintCreate) sqlSave(ctx context.Context) (*SystemComponentConstraint, error) {
	if err := sccc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sccc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sccc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	sccc.mutation.id = &_node.ID
	sccc.mutation.done = true
	return _node, nil
}

func (sccc *SystemComponentConstraintCreate) createSpec() (*SystemComponentConstraint, *sqlgraph.CreateSpec) {
	var (
		_node = &SystemComponentConstraint{config: sccc.config}
		_spec = sqlgraph.NewCreateSpec(systemcomponentconstraint.Table, sqlgraph.NewFieldSpec(systemcomponentconstraint.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = sccc.conflict
	if id, ok := sccc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sccc.mutation.Label(); ok {
		_spec.SetField(systemcomponentconstraint.FieldLabel, field.TypeString, value)
		_node.Label = value
	}
	if value, ok := sccc.mutation.Description(); ok {
		_spec.SetField(systemcomponentconstraint.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := sccc.mutation.CreatedAt(); ok {
		_spec.SetField(systemcomponentconstraint.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := sccc.mutation.ComponentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemcomponentconstraint.ComponentTable,
			Columns: []string{systemcomponentconstraint.ComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ComponentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sccc.mutation.HazardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   systemcomponentconstraint.HazardsTable,
			Columns: systemcomponentconstraint.HazardsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemhazard.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SystemComponentConstraint.Create().
//		SetComponentID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SystemComponentConstraintUpsert) {
//			SetComponentID(v+v).
//		}).
//		Exec(ctx)
func (sccc *SystemComponentConstraintCreate) OnConflict(opts ...sql.ConflictOption) *SystemComponentConstraintUpsertOne {
	sccc.conflict = opts
	return &SystemComponentConstraintUpsertOne{
		create: sccc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SystemComponentConstraint.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sccc *SystemComponentConstraintCreate) OnConflictColumns(columns ...string) *SystemComponentConstraintUpsertOne {
	sccc.conflict = append(sccc.conflict, sql.ConflictColumns(columns...))
	return &SystemComponentConstraintUpsertOne{
		create: sccc,
	}
}

type (
	// SystemComponentConstraintUpsertOne is the builder for "upsert"-ing
	//  one SystemComponentConstraint node.
	SystemComponentConstraintUpsertOne struct {
		create *SystemComponentConstraintCreate
	}

	// SystemComponentConstraintUpsert is the "OnConflict" setter.
	SystemComponentConstraintUpsert struct {
		*sql.UpdateSet
	}
)

// SetComponentID sets the "component_id" field.
func (u *SystemComponentConstraintUpsert) SetComponentID(v uuid.UUID) *SystemComponentConstraintUpsert {
	u.Set(systemcomponentconstraint.FieldComponentID, v)
	return u
}

// UpdateComponentID sets the "component_id" field to the value that was provided on create.
func (u *SystemComponentConstraintUpsert) UpdateComponentID() *SystemComponentConstraintUpsert {
	u.SetExcluded(systemcomponentconstraint.FieldComponentID)
	return u
}

// SetLabel sets the "label" field.
func (u *SystemComponentConstraintUpsert) SetLabel(v string) *SystemComponentConstraintUpsert {
	u.Set(systemcomponentconstraint.FieldLabel, v)
	return u
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *SystemComponentConstraintUpsert) UpdateLabel() *SystemComponentConstraintUpsert {
	u.SetExcluded(systemcomponentconstraint.FieldLabel)
	return u
}

// SetDescription sets the "description" field.
func (u *SystemComponentConstraintUpsert) SetDescription(v string) *SystemComponentConstraintUpsert {
	u.Set(systemcomponentconstraint.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SystemComponentConstraintUpsert) UpdateDescription() *SystemComponentConstraintUpsert {
	u.SetExcluded(systemcomponentconstraint.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *SystemComponentConstraintUpsert) ClearDescription() *SystemComponentConstraintUpsert {
	u.SetNull(systemcomponentconstraint.FieldDescription)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SystemComponentConstraintUpsert) SetCreatedAt(v time.Time) *SystemComponentConstraintUpsert {
	u.Set(systemcomponentconstraint.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SystemComponentConstraintUpsert) UpdateCreatedAt() *SystemComponentConstraintUpsert {
	u.SetExcluded(systemcomponentconstraint.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SystemComponentConstraint.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(systemcomponentconstraint.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SystemComponentConstraintUpsertOne) UpdateNewValues() *SystemComponentConstraintUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(systemcomponentconstraint.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SystemComponentConstraint.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SystemComponentConstraintUpsertOne) Ignore() *SystemComponentConstraintUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SystemComponentConstraintUpsertOne) DoNothing() *SystemComponentConstraintUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SystemComponentConstraintCreate.OnConflict
// documentation for more info.
func (u *SystemComponentConstraintUpsertOne) Update(set func(*SystemComponentConstraintUpsert)) *SystemComponentConstraintUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SystemComponentConstraintUpsert{UpdateSet: update})
	}))
	return u
}

// SetComponentID sets the "component_id" field.
func (u *SystemComponentConstraintUpsertOne) SetComponentID(v uuid.UUID) *SystemComponentConstraintUpsertOne {
	return u.Update(func(s *SystemComponentConstraintUpsert) {
		s.SetComponentID(v)
	})
}

// UpdateComponentID sets the "component_id" field to the value that was provided on create.
func (u *SystemComponentConstraintUpsertOne) UpdateComponentID() *SystemComponentConstraintUpsertOne {
	return u.Update(func(s *SystemComponentConstraintUpsert) {
		s.UpdateComponentID()
	})
}

// SetLabel sets the "label" field.
func (u *SystemComponentConstraintUpsertOne) SetLabel(v string) *SystemComponentConstraintUpsertOne {
	return u.Update(func(s *SystemComponentConstraintUpsert) {
		s.SetLabel(v)
	})
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *SystemComponentConstraintUpsertOne) UpdateLabel() *SystemComponentConstraintUpsertOne {
	return u.Update(func(s *SystemComponentConstraintUpsert) {
		s.UpdateLabel()
	})
}

// SetDescription sets the "description" field.
func (u *SystemComponentConstraintUpsertOne) SetDescription(v string) *SystemComponentConstraintUpsertOne {
	return u.Update(func(s *SystemComponentConstraintUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SystemComponentConstraintUpsertOne) UpdateDescription() *SystemComponentConstraintUpsertOne {
	return u.Update(func(s *SystemComponentConstraintUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *SystemComponentConstraintUpsertOne) ClearDescription() *SystemComponentConstraintUpsertOne {
	return u.Update(func(s *SystemComponentConstraintUpsert) {
		s.ClearDescription()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SystemComponentConstraintUpsertOne) SetCreatedAt(v time.Time) *SystemComponentConstraintUpsertOne {
	return u.Update(func(s *SystemComponentConstraintUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SystemComponentConstraintUpsertOne) UpdateCreatedAt() *SystemComponentConstraintUpsertOne {
	return u.Update(func(s *SystemComponentConstraintUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *SystemComponentConstraintUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SystemComponentConstraintCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SystemComponentConstraintUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SystemComponentConstraintUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: SystemComponentConstraintUpsertOne.ID is not supported by MySQL driver. Use SystemComponentConstraintUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SystemComponentConstraintUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SystemComponentConstraintCreateBulk is the builder for creating many SystemComponentConstraint entities in bulk.
type SystemComponentConstraintCreateBulk struct {
	config
	err      error
	builders []*SystemComponentConstraintCreate
	conflict []sql.ConflictOption
}

// Save creates the SystemComponentConstraint entities in the database.
func (scccb *SystemComponentConstraintCreateBulk) Save(ctx context.Context) ([]*SystemComponentConstraint, error) {
	if scccb.err != nil {
		return nil, scccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scccb.builders))
	nodes := make([]*SystemComponentConstraint, len(scccb.builders))
	mutators := make([]Mutator, len(scccb.builders))
	for i := range scccb.builders {
		func(i int, root context.Context) {
			builder := scccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SystemComponentConstraintMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scccb *SystemComponentConstraintCreateBulk) SaveX(ctx context.Context) []*SystemComponentConstraint {
	v, err := scccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scccb *SystemComponentConstraintCreateBulk) Exec(ctx context.Context) error {
	_, err := scccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scccb *SystemComponentConstraintCreateBulk) ExecX(ctx context.Context) {
	if err := scccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SystemComponentConstraint.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SystemComponentConstraintUpsert) {
//			SetComponentID(v+v).
//		}).
//		Exec(ctx)
func (scccb *SystemComponentConstraintCreateBulk) OnConflict(opts ...sql.ConflictOption) *SystemComponentConstraintUpsertBulk {
	scccb.conflict = opts
	return &SystemComponentConstraintUpsertBulk{
		create: scccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SystemComponentConstraint.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scccb *SystemComponentConstraintCreateBulk) OnConflictColumns(columns ...string) *SystemComponentConstraintUpsertBulk {
	scccb.conflict = append(scccb.conflict, sql.ConflictColumns(columns...))
	return &SystemComponentConstraintUpsertBulk{
		create: scccb,
	}
}

// SystemComponentConstraintUpsertBulk is the builder for "upsert"-ing
// a bulk of SystemComponentConstraint nodes.
type SystemComponentConstraintUpsertBulk struct {
	create *SystemComponentConstraintCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SystemComponentConstraint.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(systemcomponentconstraint.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SystemComponentConstraintUpsertBulk) UpdateNewValues() *SystemComponentConstraintUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(systemcomponentconstraint.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SystemComponentConstraint.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SystemComponentConstraintUpsertBulk) Ignore() *SystemComponentConstraintUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SystemComponentConstraintUpsertBulk) DoNothing() *SystemComponentConstraintUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SystemComponentConstraintCreateBulk.OnConflict
// documentation for more info.
func (u *SystemComponentConstraintUpsertBulk) Update(set func(*SystemComponentConstraintUpsert)) *SystemComponentConstraintUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SystemComponentConstraintUpsert{UpdateSet: update})
	}))
	return u
}

// SetComponentID sets the "component_id" field.
func (u *SystemComponentConstraintUpsertBulk) SetComponentID(v uuid.UUID) *SystemComponentConstraintUpsertBulk {
	return u.Update(func(s *SystemComponentConstraintUpsert) {
		s.SetComponentID(v)
	})
}

// UpdateComponentID sets the "component_id" field to the value that was provided on create.
func (u *SystemComponentConstraintUpsertBulk) UpdateComponentID() *SystemComponentConstraintUpsertBulk {
	return u.Update(func(s *SystemComponentConstraintUpsert) {
		s.UpdateComponentID()
	})
}

// SetLabel sets the "label" field.
func (u *SystemComponentConstraintUpsertBulk) SetLabel(v string) *SystemComponentConstraintUpsertBulk {
	return u.Update(func(s *SystemComponentConstraintUpsert) {
		s.SetLabel(v)
	})
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *SystemComponentConstraintUpsertBulk) UpdateLabel() *SystemComponentConstraintUpsertBulk {
	return u.Update(func(s *SystemComponentConstraintUpsert) {
		s.UpdateLabel()
	})
}

// SetDescription sets the "description" field.
func (u *SystemComponentConstraintUpsertBulk) SetDescription(v string) *SystemComponentConstraintUpsertBulk {
	return u.Update(func(s *SystemComponentConstraintUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SystemComponentConstraintUpsertBulk) UpdateDescription() *SystemComponentConstraintUpsertBulk {
	return u.Update(func(s *SystemComponentConstraintUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *SystemComponentConstraintUpsertBulk) ClearDescription() *SystemComponentConstraintUpsertBulk {
	return u.Update(func(s *SystemComponentConstraintUpsert) {
		s.ClearDescription()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SystemComponentConstraintUpsertBulk) SetCreatedAt(v time.Time) *SystemComponentConstraintUpsertBulk {
	return u.Update(func(s *SystemComponentConstraintUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SystemComponentConstraintUpsertBulk) UpdateCreatedAt() *SystemComponentConstraintUpsertBulk {
	return u.Update(func(s *SystemComponentConstraintUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *SystemComponentConstraintUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SystemComponentConstraintCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SystemComponentConstraintCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SystemComponentConstraintUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
