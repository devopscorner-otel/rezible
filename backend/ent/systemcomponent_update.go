// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/systemcomponent"
	"github.com/rezible/rezible/ent/systemcomponentcontrolrelationship"
	"github.com/rezible/rezible/ent/systemcomponentfeedbackrelationship"
)

// SystemComponentUpdate is the builder for updating SystemComponent entities.
type SystemComponentUpdate struct {
	config
	hooks     []Hook
	mutation  *SystemComponentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SystemComponentUpdate builder.
func (scu *SystemComponentUpdate) Where(ps ...predicate.SystemComponent) *SystemComponentUpdate {
	scu.mutation.Where(ps...)
	return scu
}

// SetName sets the "name" field.
func (scu *SystemComponentUpdate) SetName(s string) *SystemComponentUpdate {
	scu.mutation.SetName(s)
	return scu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (scu *SystemComponentUpdate) SetNillableName(s *string) *SystemComponentUpdate {
	if s != nil {
		scu.SetName(*s)
	}
	return scu
}

// SetType sets the "type" field.
func (scu *SystemComponentUpdate) SetType(s systemcomponent.Type) *SystemComponentUpdate {
	scu.mutation.SetType(s)
	return scu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (scu *SystemComponentUpdate) SetNillableType(s *systemcomponent.Type) *SystemComponentUpdate {
	if s != nil {
		scu.SetType(*s)
	}
	return scu
}

// SetDescription sets the "description" field.
func (scu *SystemComponentUpdate) SetDescription(s string) *SystemComponentUpdate {
	scu.mutation.SetDescription(s)
	return scu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (scu *SystemComponentUpdate) SetNillableDescription(s *string) *SystemComponentUpdate {
	if s != nil {
		scu.SetDescription(*s)
	}
	return scu
}

// ClearDescription clears the value of the "description" field.
func (scu *SystemComponentUpdate) ClearDescription() *SystemComponentUpdate {
	scu.mutation.ClearDescription()
	return scu
}

// SetProperties sets the "properties" field.
func (scu *SystemComponentUpdate) SetProperties(m map[string]interface{}) *SystemComponentUpdate {
	scu.mutation.SetProperties(m)
	return scu
}

// ClearProperties clears the value of the "properties" field.
func (scu *SystemComponentUpdate) ClearProperties() *SystemComponentUpdate {
	scu.mutation.ClearProperties()
	return scu
}

// SetCreatedAt sets the "created_at" field.
func (scu *SystemComponentUpdate) SetCreatedAt(t time.Time) *SystemComponentUpdate {
	scu.mutation.SetCreatedAt(t)
	return scu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (scu *SystemComponentUpdate) SetNillableCreatedAt(t *time.Time) *SystemComponentUpdate {
	if t != nil {
		scu.SetCreatedAt(*t)
	}
	return scu
}

// SetUpdatedAt sets the "updated_at" field.
func (scu *SystemComponentUpdate) SetUpdatedAt(t time.Time) *SystemComponentUpdate {
	scu.mutation.SetUpdatedAt(t)
	return scu
}

// SetParentID sets the "parent" edge to the SystemComponent entity by ID.
func (scu *SystemComponentUpdate) SetParentID(id uuid.UUID) *SystemComponentUpdate {
	scu.mutation.SetParentID(id)
	return scu
}

// SetNillableParentID sets the "parent" edge to the SystemComponent entity by ID if the given value is not nil.
func (scu *SystemComponentUpdate) SetNillableParentID(id *uuid.UUID) *SystemComponentUpdate {
	if id != nil {
		scu = scu.SetParentID(*id)
	}
	return scu
}

// SetParent sets the "parent" edge to the SystemComponent entity.
func (scu *SystemComponentUpdate) SetParent(s *SystemComponent) *SystemComponentUpdate {
	return scu.SetParentID(s.ID)
}

// AddChildIDs adds the "children" edge to the SystemComponent entity by IDs.
func (scu *SystemComponentUpdate) AddChildIDs(ids ...uuid.UUID) *SystemComponentUpdate {
	scu.mutation.AddChildIDs(ids...)
	return scu
}

// AddChildren adds the "children" edges to the SystemComponent entity.
func (scu *SystemComponentUpdate) AddChildren(s ...*SystemComponent) *SystemComponentUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scu.AddChildIDs(ids...)
}

// AddControlIDs adds the "controls" edge to the SystemComponent entity by IDs.
func (scu *SystemComponentUpdate) AddControlIDs(ids ...uuid.UUID) *SystemComponentUpdate {
	scu.mutation.AddControlIDs(ids...)
	return scu
}

// AddControls adds the "controls" edges to the SystemComponent entity.
func (scu *SystemComponentUpdate) AddControls(s ...*SystemComponent) *SystemComponentUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scu.AddControlIDs(ids...)
}

// AddFeedbackToIDs adds the "feedback_to" edge to the SystemComponent entity by IDs.
func (scu *SystemComponentUpdate) AddFeedbackToIDs(ids ...uuid.UUID) *SystemComponentUpdate {
	scu.mutation.AddFeedbackToIDs(ids...)
	return scu
}

// AddFeedbackTo adds the "feedback_to" edges to the SystemComponent entity.
func (scu *SystemComponentUpdate) AddFeedbackTo(s ...*SystemComponent) *SystemComponentUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scu.AddFeedbackToIDs(ids...)
}

// AddControlRelationshipIDs adds the "control_relationships" edge to the SystemComponentControlRelationship entity by IDs.
func (scu *SystemComponentUpdate) AddControlRelationshipIDs(ids ...uuid.UUID) *SystemComponentUpdate {
	scu.mutation.AddControlRelationshipIDs(ids...)
	return scu
}

// AddControlRelationships adds the "control_relationships" edges to the SystemComponentControlRelationship entity.
func (scu *SystemComponentUpdate) AddControlRelationships(s ...*SystemComponentControlRelationship) *SystemComponentUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scu.AddControlRelationshipIDs(ids...)
}

// AddFeedbackRelationshipIDs adds the "feedback_relationships" edge to the SystemComponentFeedbackRelationship entity by IDs.
func (scu *SystemComponentUpdate) AddFeedbackRelationshipIDs(ids ...uuid.UUID) *SystemComponentUpdate {
	scu.mutation.AddFeedbackRelationshipIDs(ids...)
	return scu
}

// AddFeedbackRelationships adds the "feedback_relationships" edges to the SystemComponentFeedbackRelationship entity.
func (scu *SystemComponentUpdate) AddFeedbackRelationships(s ...*SystemComponentFeedbackRelationship) *SystemComponentUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scu.AddFeedbackRelationshipIDs(ids...)
}

// Mutation returns the SystemComponentMutation object of the builder.
func (scu *SystemComponentUpdate) Mutation() *SystemComponentMutation {
	return scu.mutation
}

// ClearParent clears the "parent" edge to the SystemComponent entity.
func (scu *SystemComponentUpdate) ClearParent() *SystemComponentUpdate {
	scu.mutation.ClearParent()
	return scu
}

// ClearChildren clears all "children" edges to the SystemComponent entity.
func (scu *SystemComponentUpdate) ClearChildren() *SystemComponentUpdate {
	scu.mutation.ClearChildren()
	return scu
}

// RemoveChildIDs removes the "children" edge to SystemComponent entities by IDs.
func (scu *SystemComponentUpdate) RemoveChildIDs(ids ...uuid.UUID) *SystemComponentUpdate {
	scu.mutation.RemoveChildIDs(ids...)
	return scu
}

// RemoveChildren removes "children" edges to SystemComponent entities.
func (scu *SystemComponentUpdate) RemoveChildren(s ...*SystemComponent) *SystemComponentUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scu.RemoveChildIDs(ids...)
}

// ClearControls clears all "controls" edges to the SystemComponent entity.
func (scu *SystemComponentUpdate) ClearControls() *SystemComponentUpdate {
	scu.mutation.ClearControls()
	return scu
}

// RemoveControlIDs removes the "controls" edge to SystemComponent entities by IDs.
func (scu *SystemComponentUpdate) RemoveControlIDs(ids ...uuid.UUID) *SystemComponentUpdate {
	scu.mutation.RemoveControlIDs(ids...)
	return scu
}

// RemoveControls removes "controls" edges to SystemComponent entities.
func (scu *SystemComponentUpdate) RemoveControls(s ...*SystemComponent) *SystemComponentUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scu.RemoveControlIDs(ids...)
}

// ClearFeedbackTo clears all "feedback_to" edges to the SystemComponent entity.
func (scu *SystemComponentUpdate) ClearFeedbackTo() *SystemComponentUpdate {
	scu.mutation.ClearFeedbackTo()
	return scu
}

// RemoveFeedbackToIDs removes the "feedback_to" edge to SystemComponent entities by IDs.
func (scu *SystemComponentUpdate) RemoveFeedbackToIDs(ids ...uuid.UUID) *SystemComponentUpdate {
	scu.mutation.RemoveFeedbackToIDs(ids...)
	return scu
}

// RemoveFeedbackTo removes "feedback_to" edges to SystemComponent entities.
func (scu *SystemComponentUpdate) RemoveFeedbackTo(s ...*SystemComponent) *SystemComponentUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scu.RemoveFeedbackToIDs(ids...)
}

// ClearControlRelationships clears all "control_relationships" edges to the SystemComponentControlRelationship entity.
func (scu *SystemComponentUpdate) ClearControlRelationships() *SystemComponentUpdate {
	scu.mutation.ClearControlRelationships()
	return scu
}

// RemoveControlRelationshipIDs removes the "control_relationships" edge to SystemComponentControlRelationship entities by IDs.
func (scu *SystemComponentUpdate) RemoveControlRelationshipIDs(ids ...uuid.UUID) *SystemComponentUpdate {
	scu.mutation.RemoveControlRelationshipIDs(ids...)
	return scu
}

// RemoveControlRelationships removes "control_relationships" edges to SystemComponentControlRelationship entities.
func (scu *SystemComponentUpdate) RemoveControlRelationships(s ...*SystemComponentControlRelationship) *SystemComponentUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scu.RemoveControlRelationshipIDs(ids...)
}

// ClearFeedbackRelationships clears all "feedback_relationships" edges to the SystemComponentFeedbackRelationship entity.
func (scu *SystemComponentUpdate) ClearFeedbackRelationships() *SystemComponentUpdate {
	scu.mutation.ClearFeedbackRelationships()
	return scu
}

// RemoveFeedbackRelationshipIDs removes the "feedback_relationships" edge to SystemComponentFeedbackRelationship entities by IDs.
func (scu *SystemComponentUpdate) RemoveFeedbackRelationshipIDs(ids ...uuid.UUID) *SystemComponentUpdate {
	scu.mutation.RemoveFeedbackRelationshipIDs(ids...)
	return scu
}

// RemoveFeedbackRelationships removes "feedback_relationships" edges to SystemComponentFeedbackRelationship entities.
func (scu *SystemComponentUpdate) RemoveFeedbackRelationships(s ...*SystemComponentFeedbackRelationship) *SystemComponentUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scu.RemoveFeedbackRelationshipIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (scu *SystemComponentUpdate) Save(ctx context.Context) (int, error) {
	scu.defaults()
	return withHooks(ctx, scu.sqlSave, scu.mutation, scu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scu *SystemComponentUpdate) SaveX(ctx context.Context) int {
	affected, err := scu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (scu *SystemComponentUpdate) Exec(ctx context.Context) error {
	_, err := scu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scu *SystemComponentUpdate) ExecX(ctx context.Context) {
	if err := scu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scu *SystemComponentUpdate) defaults() {
	if _, ok := scu.mutation.UpdatedAt(); !ok {
		v := systemcomponent.UpdateDefaultUpdatedAt()
		scu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scu *SystemComponentUpdate) check() error {
	if v, ok := scu.mutation.Name(); ok {
		if err := systemcomponent.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "SystemComponent.name": %w`, err)}
		}
	}
	if v, ok := scu.mutation.GetType(); ok {
		if err := systemcomponent.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "SystemComponent.type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (scu *SystemComponentUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SystemComponentUpdate {
	scu.modifiers = append(scu.modifiers, modifiers...)
	return scu
}

func (scu *SystemComponentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := scu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(systemcomponent.Table, systemcomponent.Columns, sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID))
	if ps := scu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scu.mutation.Name(); ok {
		_spec.SetField(systemcomponent.FieldName, field.TypeString, value)
	}
	if value, ok := scu.mutation.GetType(); ok {
		_spec.SetField(systemcomponent.FieldType, field.TypeEnum, value)
	}
	if value, ok := scu.mutation.Description(); ok {
		_spec.SetField(systemcomponent.FieldDescription, field.TypeString, value)
	}
	if scu.mutation.DescriptionCleared() {
		_spec.ClearField(systemcomponent.FieldDescription, field.TypeString)
	}
	if value, ok := scu.mutation.Properties(); ok {
		_spec.SetField(systemcomponent.FieldProperties, field.TypeJSON, value)
	}
	if scu.mutation.PropertiesCleared() {
		_spec.ClearField(systemcomponent.FieldProperties, field.TypeJSON)
	}
	if value, ok := scu.mutation.CreatedAt(); ok {
		_spec.SetField(systemcomponent.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := scu.mutation.UpdatedAt(); ok {
		_spec.SetField(systemcomponent.FieldUpdatedAt, field.TypeTime, value)
	}
	if scu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   systemcomponent.ParentTable,
			Columns: []string{systemcomponent.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   systemcomponent.ParentTable,
			Columns: []string{systemcomponent.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   systemcomponent.ChildrenTable,
			Columns: []string{systemcomponent.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !scu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   systemcomponent.ChildrenTable,
			Columns: []string{systemcomponent.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   systemcomponent.ChildrenTable,
			Columns: []string{systemcomponent.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scu.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemcomponent.ControlsTable,
			Columns: systemcomponent.ControlsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		createE := &SystemComponentControlRelationshipCreate{config: scu.config, mutation: newSystemComponentControlRelationshipMutation(scu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.RemovedControlsIDs(); len(nodes) > 0 && !scu.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemcomponent.ControlsTable,
			Columns: systemcomponent.ControlsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SystemComponentControlRelationshipCreate{config: scu.config, mutation: newSystemComponentControlRelationshipMutation(scu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemcomponent.ControlsTable,
			Columns: systemcomponent.ControlsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SystemComponentControlRelationshipCreate{config: scu.config, mutation: newSystemComponentControlRelationshipMutation(scu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scu.mutation.FeedbackToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemcomponent.FeedbackToTable,
			Columns: systemcomponent.FeedbackToPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		createE := &SystemComponentFeedbackRelationshipCreate{config: scu.config, mutation: newSystemComponentFeedbackRelationshipMutation(scu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.RemovedFeedbackToIDs(); len(nodes) > 0 && !scu.mutation.FeedbackToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemcomponent.FeedbackToTable,
			Columns: systemcomponent.FeedbackToPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SystemComponentFeedbackRelationshipCreate{config: scu.config, mutation: newSystemComponentFeedbackRelationshipMutation(scu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.FeedbackToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemcomponent.FeedbackToTable,
			Columns: systemcomponent.FeedbackToPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SystemComponentFeedbackRelationshipCreate{config: scu.config, mutation: newSystemComponentFeedbackRelationshipMutation(scu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scu.mutation.ControlRelationshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.ControlRelationshipsTable,
			Columns: []string{systemcomponent.ControlRelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentcontrolrelationship.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.RemovedControlRelationshipsIDs(); len(nodes) > 0 && !scu.mutation.ControlRelationshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.ControlRelationshipsTable,
			Columns: []string{systemcomponent.ControlRelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentcontrolrelationship.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.ControlRelationshipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.ControlRelationshipsTable,
			Columns: []string{systemcomponent.ControlRelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentcontrolrelationship.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scu.mutation.FeedbackRelationshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.FeedbackRelationshipsTable,
			Columns: []string{systemcomponent.FeedbackRelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentfeedbackrelationship.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.RemovedFeedbackRelationshipsIDs(); len(nodes) > 0 && !scu.mutation.FeedbackRelationshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.FeedbackRelationshipsTable,
			Columns: []string{systemcomponent.FeedbackRelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentfeedbackrelationship.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.FeedbackRelationshipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.FeedbackRelationshipsTable,
			Columns: []string{systemcomponent.FeedbackRelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentfeedbackrelationship.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(scu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, scu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systemcomponent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	scu.mutation.done = true
	return n, nil
}

// SystemComponentUpdateOne is the builder for updating a single SystemComponent entity.
type SystemComponentUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SystemComponentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetName sets the "name" field.
func (scuo *SystemComponentUpdateOne) SetName(s string) *SystemComponentUpdateOne {
	scuo.mutation.SetName(s)
	return scuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (scuo *SystemComponentUpdateOne) SetNillableName(s *string) *SystemComponentUpdateOne {
	if s != nil {
		scuo.SetName(*s)
	}
	return scuo
}

// SetType sets the "type" field.
func (scuo *SystemComponentUpdateOne) SetType(s systemcomponent.Type) *SystemComponentUpdateOne {
	scuo.mutation.SetType(s)
	return scuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (scuo *SystemComponentUpdateOne) SetNillableType(s *systemcomponent.Type) *SystemComponentUpdateOne {
	if s != nil {
		scuo.SetType(*s)
	}
	return scuo
}

// SetDescription sets the "description" field.
func (scuo *SystemComponentUpdateOne) SetDescription(s string) *SystemComponentUpdateOne {
	scuo.mutation.SetDescription(s)
	return scuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (scuo *SystemComponentUpdateOne) SetNillableDescription(s *string) *SystemComponentUpdateOne {
	if s != nil {
		scuo.SetDescription(*s)
	}
	return scuo
}

// ClearDescription clears the value of the "description" field.
func (scuo *SystemComponentUpdateOne) ClearDescription() *SystemComponentUpdateOne {
	scuo.mutation.ClearDescription()
	return scuo
}

// SetProperties sets the "properties" field.
func (scuo *SystemComponentUpdateOne) SetProperties(m map[string]interface{}) *SystemComponentUpdateOne {
	scuo.mutation.SetProperties(m)
	return scuo
}

// ClearProperties clears the value of the "properties" field.
func (scuo *SystemComponentUpdateOne) ClearProperties() *SystemComponentUpdateOne {
	scuo.mutation.ClearProperties()
	return scuo
}

// SetCreatedAt sets the "created_at" field.
func (scuo *SystemComponentUpdateOne) SetCreatedAt(t time.Time) *SystemComponentUpdateOne {
	scuo.mutation.SetCreatedAt(t)
	return scuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (scuo *SystemComponentUpdateOne) SetNillableCreatedAt(t *time.Time) *SystemComponentUpdateOne {
	if t != nil {
		scuo.SetCreatedAt(*t)
	}
	return scuo
}

// SetUpdatedAt sets the "updated_at" field.
func (scuo *SystemComponentUpdateOne) SetUpdatedAt(t time.Time) *SystemComponentUpdateOne {
	scuo.mutation.SetUpdatedAt(t)
	return scuo
}

// SetParentID sets the "parent" edge to the SystemComponent entity by ID.
func (scuo *SystemComponentUpdateOne) SetParentID(id uuid.UUID) *SystemComponentUpdateOne {
	scuo.mutation.SetParentID(id)
	return scuo
}

// SetNillableParentID sets the "parent" edge to the SystemComponent entity by ID if the given value is not nil.
func (scuo *SystemComponentUpdateOne) SetNillableParentID(id *uuid.UUID) *SystemComponentUpdateOne {
	if id != nil {
		scuo = scuo.SetParentID(*id)
	}
	return scuo
}

// SetParent sets the "parent" edge to the SystemComponent entity.
func (scuo *SystemComponentUpdateOne) SetParent(s *SystemComponent) *SystemComponentUpdateOne {
	return scuo.SetParentID(s.ID)
}

// AddChildIDs adds the "children" edge to the SystemComponent entity by IDs.
func (scuo *SystemComponentUpdateOne) AddChildIDs(ids ...uuid.UUID) *SystemComponentUpdateOne {
	scuo.mutation.AddChildIDs(ids...)
	return scuo
}

// AddChildren adds the "children" edges to the SystemComponent entity.
func (scuo *SystemComponentUpdateOne) AddChildren(s ...*SystemComponent) *SystemComponentUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scuo.AddChildIDs(ids...)
}

// AddControlIDs adds the "controls" edge to the SystemComponent entity by IDs.
func (scuo *SystemComponentUpdateOne) AddControlIDs(ids ...uuid.UUID) *SystemComponentUpdateOne {
	scuo.mutation.AddControlIDs(ids...)
	return scuo
}

// AddControls adds the "controls" edges to the SystemComponent entity.
func (scuo *SystemComponentUpdateOne) AddControls(s ...*SystemComponent) *SystemComponentUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scuo.AddControlIDs(ids...)
}

// AddFeedbackToIDs adds the "feedback_to" edge to the SystemComponent entity by IDs.
func (scuo *SystemComponentUpdateOne) AddFeedbackToIDs(ids ...uuid.UUID) *SystemComponentUpdateOne {
	scuo.mutation.AddFeedbackToIDs(ids...)
	return scuo
}

// AddFeedbackTo adds the "feedback_to" edges to the SystemComponent entity.
func (scuo *SystemComponentUpdateOne) AddFeedbackTo(s ...*SystemComponent) *SystemComponentUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scuo.AddFeedbackToIDs(ids...)
}

// AddControlRelationshipIDs adds the "control_relationships" edge to the SystemComponentControlRelationship entity by IDs.
func (scuo *SystemComponentUpdateOne) AddControlRelationshipIDs(ids ...uuid.UUID) *SystemComponentUpdateOne {
	scuo.mutation.AddControlRelationshipIDs(ids...)
	return scuo
}

// AddControlRelationships adds the "control_relationships" edges to the SystemComponentControlRelationship entity.
func (scuo *SystemComponentUpdateOne) AddControlRelationships(s ...*SystemComponentControlRelationship) *SystemComponentUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scuo.AddControlRelationshipIDs(ids...)
}

// AddFeedbackRelationshipIDs adds the "feedback_relationships" edge to the SystemComponentFeedbackRelationship entity by IDs.
func (scuo *SystemComponentUpdateOne) AddFeedbackRelationshipIDs(ids ...uuid.UUID) *SystemComponentUpdateOne {
	scuo.mutation.AddFeedbackRelationshipIDs(ids...)
	return scuo
}

// AddFeedbackRelationships adds the "feedback_relationships" edges to the SystemComponentFeedbackRelationship entity.
func (scuo *SystemComponentUpdateOne) AddFeedbackRelationships(s ...*SystemComponentFeedbackRelationship) *SystemComponentUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scuo.AddFeedbackRelationshipIDs(ids...)
}

// Mutation returns the SystemComponentMutation object of the builder.
func (scuo *SystemComponentUpdateOne) Mutation() *SystemComponentMutation {
	return scuo.mutation
}

// ClearParent clears the "parent" edge to the SystemComponent entity.
func (scuo *SystemComponentUpdateOne) ClearParent() *SystemComponentUpdateOne {
	scuo.mutation.ClearParent()
	return scuo
}

// ClearChildren clears all "children" edges to the SystemComponent entity.
func (scuo *SystemComponentUpdateOne) ClearChildren() *SystemComponentUpdateOne {
	scuo.mutation.ClearChildren()
	return scuo
}

// RemoveChildIDs removes the "children" edge to SystemComponent entities by IDs.
func (scuo *SystemComponentUpdateOne) RemoveChildIDs(ids ...uuid.UUID) *SystemComponentUpdateOne {
	scuo.mutation.RemoveChildIDs(ids...)
	return scuo
}

// RemoveChildren removes "children" edges to SystemComponent entities.
func (scuo *SystemComponentUpdateOne) RemoveChildren(s ...*SystemComponent) *SystemComponentUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scuo.RemoveChildIDs(ids...)
}

// ClearControls clears all "controls" edges to the SystemComponent entity.
func (scuo *SystemComponentUpdateOne) ClearControls() *SystemComponentUpdateOne {
	scuo.mutation.ClearControls()
	return scuo
}

// RemoveControlIDs removes the "controls" edge to SystemComponent entities by IDs.
func (scuo *SystemComponentUpdateOne) RemoveControlIDs(ids ...uuid.UUID) *SystemComponentUpdateOne {
	scuo.mutation.RemoveControlIDs(ids...)
	return scuo
}

// RemoveControls removes "controls" edges to SystemComponent entities.
func (scuo *SystemComponentUpdateOne) RemoveControls(s ...*SystemComponent) *SystemComponentUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scuo.RemoveControlIDs(ids...)
}

// ClearFeedbackTo clears all "feedback_to" edges to the SystemComponent entity.
func (scuo *SystemComponentUpdateOne) ClearFeedbackTo() *SystemComponentUpdateOne {
	scuo.mutation.ClearFeedbackTo()
	return scuo
}

// RemoveFeedbackToIDs removes the "feedback_to" edge to SystemComponent entities by IDs.
func (scuo *SystemComponentUpdateOne) RemoveFeedbackToIDs(ids ...uuid.UUID) *SystemComponentUpdateOne {
	scuo.mutation.RemoveFeedbackToIDs(ids...)
	return scuo
}

// RemoveFeedbackTo removes "feedback_to" edges to SystemComponent entities.
func (scuo *SystemComponentUpdateOne) RemoveFeedbackTo(s ...*SystemComponent) *SystemComponentUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scuo.RemoveFeedbackToIDs(ids...)
}

// ClearControlRelationships clears all "control_relationships" edges to the SystemComponentControlRelationship entity.
func (scuo *SystemComponentUpdateOne) ClearControlRelationships() *SystemComponentUpdateOne {
	scuo.mutation.ClearControlRelationships()
	return scuo
}

// RemoveControlRelationshipIDs removes the "control_relationships" edge to SystemComponentControlRelationship entities by IDs.
func (scuo *SystemComponentUpdateOne) RemoveControlRelationshipIDs(ids ...uuid.UUID) *SystemComponentUpdateOne {
	scuo.mutation.RemoveControlRelationshipIDs(ids...)
	return scuo
}

// RemoveControlRelationships removes "control_relationships" edges to SystemComponentControlRelationship entities.
func (scuo *SystemComponentUpdateOne) RemoveControlRelationships(s ...*SystemComponentControlRelationship) *SystemComponentUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scuo.RemoveControlRelationshipIDs(ids...)
}

// ClearFeedbackRelationships clears all "feedback_relationships" edges to the SystemComponentFeedbackRelationship entity.
func (scuo *SystemComponentUpdateOne) ClearFeedbackRelationships() *SystemComponentUpdateOne {
	scuo.mutation.ClearFeedbackRelationships()
	return scuo
}

// RemoveFeedbackRelationshipIDs removes the "feedback_relationships" edge to SystemComponentFeedbackRelationship entities by IDs.
func (scuo *SystemComponentUpdateOne) RemoveFeedbackRelationshipIDs(ids ...uuid.UUID) *SystemComponentUpdateOne {
	scuo.mutation.RemoveFeedbackRelationshipIDs(ids...)
	return scuo
}

// RemoveFeedbackRelationships removes "feedback_relationships" edges to SystemComponentFeedbackRelationship entities.
func (scuo *SystemComponentUpdateOne) RemoveFeedbackRelationships(s ...*SystemComponentFeedbackRelationship) *SystemComponentUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scuo.RemoveFeedbackRelationshipIDs(ids...)
}

// Where appends a list predicates to the SystemComponentUpdate builder.
func (scuo *SystemComponentUpdateOne) Where(ps ...predicate.SystemComponent) *SystemComponentUpdateOne {
	scuo.mutation.Where(ps...)
	return scuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (scuo *SystemComponentUpdateOne) Select(field string, fields ...string) *SystemComponentUpdateOne {
	scuo.fields = append([]string{field}, fields...)
	return scuo
}

// Save executes the query and returns the updated SystemComponent entity.
func (scuo *SystemComponentUpdateOne) Save(ctx context.Context) (*SystemComponent, error) {
	scuo.defaults()
	return withHooks(ctx, scuo.sqlSave, scuo.mutation, scuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scuo *SystemComponentUpdateOne) SaveX(ctx context.Context) *SystemComponent {
	node, err := scuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (scuo *SystemComponentUpdateOne) Exec(ctx context.Context) error {
	_, err := scuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scuo *SystemComponentUpdateOne) ExecX(ctx context.Context) {
	if err := scuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scuo *SystemComponentUpdateOne) defaults() {
	if _, ok := scuo.mutation.UpdatedAt(); !ok {
		v := systemcomponent.UpdateDefaultUpdatedAt()
		scuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scuo *SystemComponentUpdateOne) check() error {
	if v, ok := scuo.mutation.Name(); ok {
		if err := systemcomponent.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "SystemComponent.name": %w`, err)}
		}
	}
	if v, ok := scuo.mutation.GetType(); ok {
		if err := systemcomponent.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "SystemComponent.type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (scuo *SystemComponentUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SystemComponentUpdateOne {
	scuo.modifiers = append(scuo.modifiers, modifiers...)
	return scuo
}

func (scuo *SystemComponentUpdateOne) sqlSave(ctx context.Context) (_node *SystemComponent, err error) {
	if err := scuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(systemcomponent.Table, systemcomponent.Columns, sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID))
	id, ok := scuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SystemComponent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := scuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, systemcomponent.FieldID)
		for _, f := range fields {
			if !systemcomponent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != systemcomponent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := scuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scuo.mutation.Name(); ok {
		_spec.SetField(systemcomponent.FieldName, field.TypeString, value)
	}
	if value, ok := scuo.mutation.GetType(); ok {
		_spec.SetField(systemcomponent.FieldType, field.TypeEnum, value)
	}
	if value, ok := scuo.mutation.Description(); ok {
		_spec.SetField(systemcomponent.FieldDescription, field.TypeString, value)
	}
	if scuo.mutation.DescriptionCleared() {
		_spec.ClearField(systemcomponent.FieldDescription, field.TypeString)
	}
	if value, ok := scuo.mutation.Properties(); ok {
		_spec.SetField(systemcomponent.FieldProperties, field.TypeJSON, value)
	}
	if scuo.mutation.PropertiesCleared() {
		_spec.ClearField(systemcomponent.FieldProperties, field.TypeJSON)
	}
	if value, ok := scuo.mutation.CreatedAt(); ok {
		_spec.SetField(systemcomponent.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := scuo.mutation.UpdatedAt(); ok {
		_spec.SetField(systemcomponent.FieldUpdatedAt, field.TypeTime, value)
	}
	if scuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   systemcomponent.ParentTable,
			Columns: []string{systemcomponent.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   systemcomponent.ParentTable,
			Columns: []string{systemcomponent.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   systemcomponent.ChildrenTable,
			Columns: []string{systemcomponent.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !scuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   systemcomponent.ChildrenTable,
			Columns: []string{systemcomponent.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   systemcomponent.ChildrenTable,
			Columns: []string{systemcomponent.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scuo.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemcomponent.ControlsTable,
			Columns: systemcomponent.ControlsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		createE := &SystemComponentControlRelationshipCreate{config: scuo.config, mutation: newSystemComponentControlRelationshipMutation(scuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.RemovedControlsIDs(); len(nodes) > 0 && !scuo.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemcomponent.ControlsTable,
			Columns: systemcomponent.ControlsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SystemComponentControlRelationshipCreate{config: scuo.config, mutation: newSystemComponentControlRelationshipMutation(scuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemcomponent.ControlsTable,
			Columns: systemcomponent.ControlsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SystemComponentControlRelationshipCreate{config: scuo.config, mutation: newSystemComponentControlRelationshipMutation(scuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scuo.mutation.FeedbackToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemcomponent.FeedbackToTable,
			Columns: systemcomponent.FeedbackToPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		createE := &SystemComponentFeedbackRelationshipCreate{config: scuo.config, mutation: newSystemComponentFeedbackRelationshipMutation(scuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.RemovedFeedbackToIDs(); len(nodes) > 0 && !scuo.mutation.FeedbackToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemcomponent.FeedbackToTable,
			Columns: systemcomponent.FeedbackToPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SystemComponentFeedbackRelationshipCreate{config: scuo.config, mutation: newSystemComponentFeedbackRelationshipMutation(scuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.FeedbackToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemcomponent.FeedbackToTable,
			Columns: systemcomponent.FeedbackToPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SystemComponentFeedbackRelationshipCreate{config: scuo.config, mutation: newSystemComponentFeedbackRelationshipMutation(scuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scuo.mutation.ControlRelationshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.ControlRelationshipsTable,
			Columns: []string{systemcomponent.ControlRelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentcontrolrelationship.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.RemovedControlRelationshipsIDs(); len(nodes) > 0 && !scuo.mutation.ControlRelationshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.ControlRelationshipsTable,
			Columns: []string{systemcomponent.ControlRelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentcontrolrelationship.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.ControlRelationshipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.ControlRelationshipsTable,
			Columns: []string{systemcomponent.ControlRelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentcontrolrelationship.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scuo.mutation.FeedbackRelationshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.FeedbackRelationshipsTable,
			Columns: []string{systemcomponent.FeedbackRelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentfeedbackrelationship.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.RemovedFeedbackRelationshipsIDs(); len(nodes) > 0 && !scuo.mutation.FeedbackRelationshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.FeedbackRelationshipsTable,
			Columns: []string{systemcomponent.FeedbackRelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentfeedbackrelationship.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.FeedbackRelationshipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.FeedbackRelationshipsTable,
			Columns: []string{systemcomponent.FeedbackRelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentfeedbackrelationship.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(scuo.modifiers...)
	_node = &SystemComponent{config: scuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, scuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systemcomponent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	scuo.mutation.done = true
	return _node, nil
}
