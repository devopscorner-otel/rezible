// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/incidentevent"
	"github.com/rezible/rezible/ent/incidenteventsystemcomponent"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/systemanalysis"
	"github.com/rezible/rezible/ent/systemanalysiscomponent"
	"github.com/rezible/rezible/ent/systemcomponent"
	"github.com/rezible/rezible/ent/systemcomponentconstraint"
	"github.com/rezible/rezible/ent/systemcomponentcontrol"
	"github.com/rezible/rezible/ent/systemcomponentkind"
	"github.com/rezible/rezible/ent/systemcomponentsignal"
	"github.com/rezible/rezible/ent/systemrelationship"
)

// SystemComponentUpdate is the builder for updating SystemComponent entities.
type SystemComponentUpdate struct {
	config
	hooks     []Hook
	mutation  *SystemComponentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SystemComponentUpdate builder.
func (scu *SystemComponentUpdate) Where(ps ...predicate.SystemComponent) *SystemComponentUpdate {
	scu.mutation.Where(ps...)
	return scu
}

// SetName sets the "name" field.
func (scu *SystemComponentUpdate) SetName(s string) *SystemComponentUpdate {
	scu.mutation.SetName(s)
	return scu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (scu *SystemComponentUpdate) SetNillableName(s *string) *SystemComponentUpdate {
	if s != nil {
		scu.SetName(*s)
	}
	return scu
}

// SetKindID sets the "kind_id" field.
func (scu *SystemComponentUpdate) SetKindID(u uuid.UUID) *SystemComponentUpdate {
	scu.mutation.SetKindID(u)
	return scu
}

// SetNillableKindID sets the "kind_id" field if the given value is not nil.
func (scu *SystemComponentUpdate) SetNillableKindID(u *uuid.UUID) *SystemComponentUpdate {
	if u != nil {
		scu.SetKindID(*u)
	}
	return scu
}

// SetDescription sets the "description" field.
func (scu *SystemComponentUpdate) SetDescription(s string) *SystemComponentUpdate {
	scu.mutation.SetDescription(s)
	return scu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (scu *SystemComponentUpdate) SetNillableDescription(s *string) *SystemComponentUpdate {
	if s != nil {
		scu.SetDescription(*s)
	}
	return scu
}

// ClearDescription clears the value of the "description" field.
func (scu *SystemComponentUpdate) ClearDescription() *SystemComponentUpdate {
	scu.mutation.ClearDescription()
	return scu
}

// SetProperties sets the "properties" field.
func (scu *SystemComponentUpdate) SetProperties(m map[string]interface{}) *SystemComponentUpdate {
	scu.mutation.SetProperties(m)
	return scu
}

// SetCreatedAt sets the "created_at" field.
func (scu *SystemComponentUpdate) SetCreatedAt(t time.Time) *SystemComponentUpdate {
	scu.mutation.SetCreatedAt(t)
	return scu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (scu *SystemComponentUpdate) SetNillableCreatedAt(t *time.Time) *SystemComponentUpdate {
	if t != nil {
		scu.SetCreatedAt(*t)
	}
	return scu
}

// SetUpdatedAt sets the "updated_at" field.
func (scu *SystemComponentUpdate) SetUpdatedAt(t time.Time) *SystemComponentUpdate {
	scu.mutation.SetUpdatedAt(t)
	return scu
}

// SetKind sets the "kind" edge to the SystemComponentKind entity.
func (scu *SystemComponentUpdate) SetKind(s *SystemComponentKind) *SystemComponentUpdate {
	return scu.SetKindID(s.ID)
}

// AddAnalysisIDs adds the "analyses" edge to the SystemAnalysis entity by IDs.
func (scu *SystemComponentUpdate) AddAnalysisIDs(ids ...uuid.UUID) *SystemComponentUpdate {
	scu.mutation.AddAnalysisIDs(ids...)
	return scu
}

// AddAnalyses adds the "analyses" edges to the SystemAnalysis entity.
func (scu *SystemComponentUpdate) AddAnalyses(s ...*SystemAnalysis) *SystemComponentUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scu.AddAnalysisIDs(ids...)
}

// AddRelatedIDs adds the "related" edge to the SystemComponent entity by IDs.
func (scu *SystemComponentUpdate) AddRelatedIDs(ids ...uuid.UUID) *SystemComponentUpdate {
	scu.mutation.AddRelatedIDs(ids...)
	return scu
}

// AddRelated adds the "related" edges to the SystemComponent entity.
func (scu *SystemComponentUpdate) AddRelated(s ...*SystemComponent) *SystemComponentUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scu.AddRelatedIDs(ids...)
}

// AddEventIDs adds the "events" edge to the IncidentEvent entity by IDs.
func (scu *SystemComponentUpdate) AddEventIDs(ids ...uuid.UUID) *SystemComponentUpdate {
	scu.mutation.AddEventIDs(ids...)
	return scu
}

// AddEvents adds the "events" edges to the IncidentEvent entity.
func (scu *SystemComponentUpdate) AddEvents(i ...*IncidentEvent) *SystemComponentUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return scu.AddEventIDs(ids...)
}

// AddConstraintIDs adds the "constraints" edge to the SystemComponentConstraint entity by IDs.
func (scu *SystemComponentUpdate) AddConstraintIDs(ids ...uuid.UUID) *SystemComponentUpdate {
	scu.mutation.AddConstraintIDs(ids...)
	return scu
}

// AddConstraints adds the "constraints" edges to the SystemComponentConstraint entity.
func (scu *SystemComponentUpdate) AddConstraints(s ...*SystemComponentConstraint) *SystemComponentUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scu.AddConstraintIDs(ids...)
}

// AddControlIDs adds the "controls" edge to the SystemComponentControl entity by IDs.
func (scu *SystemComponentUpdate) AddControlIDs(ids ...uuid.UUID) *SystemComponentUpdate {
	scu.mutation.AddControlIDs(ids...)
	return scu
}

// AddControls adds the "controls" edges to the SystemComponentControl entity.
func (scu *SystemComponentUpdate) AddControls(s ...*SystemComponentControl) *SystemComponentUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scu.AddControlIDs(ids...)
}

// AddSignalIDs adds the "signals" edge to the SystemComponentSignal entity by IDs.
func (scu *SystemComponentUpdate) AddSignalIDs(ids ...uuid.UUID) *SystemComponentUpdate {
	scu.mutation.AddSignalIDs(ids...)
	return scu
}

// AddSignals adds the "signals" edges to the SystemComponentSignal entity.
func (scu *SystemComponentUpdate) AddSignals(s ...*SystemComponentSignal) *SystemComponentUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scu.AddSignalIDs(ids...)
}

// AddAnalysisComponentIDs adds the "analysis_components" edge to the SystemAnalysisComponent entity by IDs.
func (scu *SystemComponentUpdate) AddAnalysisComponentIDs(ids ...uuid.UUID) *SystemComponentUpdate {
	scu.mutation.AddAnalysisComponentIDs(ids...)
	return scu
}

// AddAnalysisComponents adds the "analysis_components" edges to the SystemAnalysisComponent entity.
func (scu *SystemComponentUpdate) AddAnalysisComponents(s ...*SystemAnalysisComponent) *SystemComponentUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scu.AddAnalysisComponentIDs(ids...)
}

// AddRelationshipIDs adds the "relationships" edge to the SystemRelationship entity by IDs.
func (scu *SystemComponentUpdate) AddRelationshipIDs(ids ...uuid.UUID) *SystemComponentUpdate {
	scu.mutation.AddRelationshipIDs(ids...)
	return scu
}

// AddRelationships adds the "relationships" edges to the SystemRelationship entity.
func (scu *SystemComponentUpdate) AddRelationships(s ...*SystemRelationship) *SystemComponentUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scu.AddRelationshipIDs(ids...)
}

// AddEventComponentIDs adds the "event_components" edge to the IncidentEventSystemComponent entity by IDs.
func (scu *SystemComponentUpdate) AddEventComponentIDs(ids ...uuid.UUID) *SystemComponentUpdate {
	scu.mutation.AddEventComponentIDs(ids...)
	return scu
}

// AddEventComponents adds the "event_components" edges to the IncidentEventSystemComponent entity.
func (scu *SystemComponentUpdate) AddEventComponents(i ...*IncidentEventSystemComponent) *SystemComponentUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return scu.AddEventComponentIDs(ids...)
}

// Mutation returns the SystemComponentMutation object of the builder.
func (scu *SystemComponentUpdate) Mutation() *SystemComponentMutation {
	return scu.mutation
}

// ClearKind clears the "kind" edge to the SystemComponentKind entity.
func (scu *SystemComponentUpdate) ClearKind() *SystemComponentUpdate {
	scu.mutation.ClearKind()
	return scu
}

// ClearAnalyses clears all "analyses" edges to the SystemAnalysis entity.
func (scu *SystemComponentUpdate) ClearAnalyses() *SystemComponentUpdate {
	scu.mutation.ClearAnalyses()
	return scu
}

// RemoveAnalysisIDs removes the "analyses" edge to SystemAnalysis entities by IDs.
func (scu *SystemComponentUpdate) RemoveAnalysisIDs(ids ...uuid.UUID) *SystemComponentUpdate {
	scu.mutation.RemoveAnalysisIDs(ids...)
	return scu
}

// RemoveAnalyses removes "analyses" edges to SystemAnalysis entities.
func (scu *SystemComponentUpdate) RemoveAnalyses(s ...*SystemAnalysis) *SystemComponentUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scu.RemoveAnalysisIDs(ids...)
}

// ClearRelated clears all "related" edges to the SystemComponent entity.
func (scu *SystemComponentUpdate) ClearRelated() *SystemComponentUpdate {
	scu.mutation.ClearRelated()
	return scu
}

// RemoveRelatedIDs removes the "related" edge to SystemComponent entities by IDs.
func (scu *SystemComponentUpdate) RemoveRelatedIDs(ids ...uuid.UUID) *SystemComponentUpdate {
	scu.mutation.RemoveRelatedIDs(ids...)
	return scu
}

// RemoveRelated removes "related" edges to SystemComponent entities.
func (scu *SystemComponentUpdate) RemoveRelated(s ...*SystemComponent) *SystemComponentUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scu.RemoveRelatedIDs(ids...)
}

// ClearEvents clears all "events" edges to the IncidentEvent entity.
func (scu *SystemComponentUpdate) ClearEvents() *SystemComponentUpdate {
	scu.mutation.ClearEvents()
	return scu
}

// RemoveEventIDs removes the "events" edge to IncidentEvent entities by IDs.
func (scu *SystemComponentUpdate) RemoveEventIDs(ids ...uuid.UUID) *SystemComponentUpdate {
	scu.mutation.RemoveEventIDs(ids...)
	return scu
}

// RemoveEvents removes "events" edges to IncidentEvent entities.
func (scu *SystemComponentUpdate) RemoveEvents(i ...*IncidentEvent) *SystemComponentUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return scu.RemoveEventIDs(ids...)
}

// ClearConstraints clears all "constraints" edges to the SystemComponentConstraint entity.
func (scu *SystemComponentUpdate) ClearConstraints() *SystemComponentUpdate {
	scu.mutation.ClearConstraints()
	return scu
}

// RemoveConstraintIDs removes the "constraints" edge to SystemComponentConstraint entities by IDs.
func (scu *SystemComponentUpdate) RemoveConstraintIDs(ids ...uuid.UUID) *SystemComponentUpdate {
	scu.mutation.RemoveConstraintIDs(ids...)
	return scu
}

// RemoveConstraints removes "constraints" edges to SystemComponentConstraint entities.
func (scu *SystemComponentUpdate) RemoveConstraints(s ...*SystemComponentConstraint) *SystemComponentUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scu.RemoveConstraintIDs(ids...)
}

// ClearControls clears all "controls" edges to the SystemComponentControl entity.
func (scu *SystemComponentUpdate) ClearControls() *SystemComponentUpdate {
	scu.mutation.ClearControls()
	return scu
}

// RemoveControlIDs removes the "controls" edge to SystemComponentControl entities by IDs.
func (scu *SystemComponentUpdate) RemoveControlIDs(ids ...uuid.UUID) *SystemComponentUpdate {
	scu.mutation.RemoveControlIDs(ids...)
	return scu
}

// RemoveControls removes "controls" edges to SystemComponentControl entities.
func (scu *SystemComponentUpdate) RemoveControls(s ...*SystemComponentControl) *SystemComponentUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scu.RemoveControlIDs(ids...)
}

// ClearSignals clears all "signals" edges to the SystemComponentSignal entity.
func (scu *SystemComponentUpdate) ClearSignals() *SystemComponentUpdate {
	scu.mutation.ClearSignals()
	return scu
}

// RemoveSignalIDs removes the "signals" edge to SystemComponentSignal entities by IDs.
func (scu *SystemComponentUpdate) RemoveSignalIDs(ids ...uuid.UUID) *SystemComponentUpdate {
	scu.mutation.RemoveSignalIDs(ids...)
	return scu
}

// RemoveSignals removes "signals" edges to SystemComponentSignal entities.
func (scu *SystemComponentUpdate) RemoveSignals(s ...*SystemComponentSignal) *SystemComponentUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scu.RemoveSignalIDs(ids...)
}

// ClearAnalysisComponents clears all "analysis_components" edges to the SystemAnalysisComponent entity.
func (scu *SystemComponentUpdate) ClearAnalysisComponents() *SystemComponentUpdate {
	scu.mutation.ClearAnalysisComponents()
	return scu
}

// RemoveAnalysisComponentIDs removes the "analysis_components" edge to SystemAnalysisComponent entities by IDs.
func (scu *SystemComponentUpdate) RemoveAnalysisComponentIDs(ids ...uuid.UUID) *SystemComponentUpdate {
	scu.mutation.RemoveAnalysisComponentIDs(ids...)
	return scu
}

// RemoveAnalysisComponents removes "analysis_components" edges to SystemAnalysisComponent entities.
func (scu *SystemComponentUpdate) RemoveAnalysisComponents(s ...*SystemAnalysisComponent) *SystemComponentUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scu.RemoveAnalysisComponentIDs(ids...)
}

// ClearRelationships clears all "relationships" edges to the SystemRelationship entity.
func (scu *SystemComponentUpdate) ClearRelationships() *SystemComponentUpdate {
	scu.mutation.ClearRelationships()
	return scu
}

// RemoveRelationshipIDs removes the "relationships" edge to SystemRelationship entities by IDs.
func (scu *SystemComponentUpdate) RemoveRelationshipIDs(ids ...uuid.UUID) *SystemComponentUpdate {
	scu.mutation.RemoveRelationshipIDs(ids...)
	return scu
}

// RemoveRelationships removes "relationships" edges to SystemRelationship entities.
func (scu *SystemComponentUpdate) RemoveRelationships(s ...*SystemRelationship) *SystemComponentUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scu.RemoveRelationshipIDs(ids...)
}

// ClearEventComponents clears all "event_components" edges to the IncidentEventSystemComponent entity.
func (scu *SystemComponentUpdate) ClearEventComponents() *SystemComponentUpdate {
	scu.mutation.ClearEventComponents()
	return scu
}

// RemoveEventComponentIDs removes the "event_components" edge to IncidentEventSystemComponent entities by IDs.
func (scu *SystemComponentUpdate) RemoveEventComponentIDs(ids ...uuid.UUID) *SystemComponentUpdate {
	scu.mutation.RemoveEventComponentIDs(ids...)
	return scu
}

// RemoveEventComponents removes "event_components" edges to IncidentEventSystemComponent entities.
func (scu *SystemComponentUpdate) RemoveEventComponents(i ...*IncidentEventSystemComponent) *SystemComponentUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return scu.RemoveEventComponentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (scu *SystemComponentUpdate) Save(ctx context.Context) (int, error) {
	scu.defaults()
	return withHooks(ctx, scu.sqlSave, scu.mutation, scu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scu *SystemComponentUpdate) SaveX(ctx context.Context) int {
	affected, err := scu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (scu *SystemComponentUpdate) Exec(ctx context.Context) error {
	_, err := scu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scu *SystemComponentUpdate) ExecX(ctx context.Context) {
	if err := scu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scu *SystemComponentUpdate) defaults() {
	if _, ok := scu.mutation.UpdatedAt(); !ok {
		v := systemcomponent.UpdateDefaultUpdatedAt()
		scu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scu *SystemComponentUpdate) check() error {
	if v, ok := scu.mutation.Name(); ok {
		if err := systemcomponent.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "SystemComponent.name": %w`, err)}
		}
	}
	if scu.mutation.KindCleared() && len(scu.mutation.KindIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SystemComponent.kind"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (scu *SystemComponentUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SystemComponentUpdate {
	scu.modifiers = append(scu.modifiers, modifiers...)
	return scu
}

func (scu *SystemComponentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := scu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(systemcomponent.Table, systemcomponent.Columns, sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID))
	if ps := scu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scu.mutation.Name(); ok {
		_spec.SetField(systemcomponent.FieldName, field.TypeString, value)
	}
	if value, ok := scu.mutation.Description(); ok {
		_spec.SetField(systemcomponent.FieldDescription, field.TypeString, value)
	}
	if scu.mutation.DescriptionCleared() {
		_spec.ClearField(systemcomponent.FieldDescription, field.TypeString)
	}
	if value, ok := scu.mutation.Properties(); ok {
		_spec.SetField(systemcomponent.FieldProperties, field.TypeJSON, value)
	}
	if value, ok := scu.mutation.CreatedAt(); ok {
		_spec.SetField(systemcomponent.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := scu.mutation.UpdatedAt(); ok {
		_spec.SetField(systemcomponent.FieldUpdatedAt, field.TypeTime, value)
	}
	if scu.mutation.KindCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemcomponent.KindTable,
			Columns: []string{systemcomponent.KindColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentkind.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.KindIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemcomponent.KindTable,
			Columns: []string{systemcomponent.KindColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentkind.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scu.mutation.AnalysesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemcomponent.AnalysesTable,
			Columns: systemcomponent.AnalysesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemanalysis.FieldID, field.TypeUUID),
			},
		}
		createE := &SystemAnalysisComponentCreate{config: scu.config, mutation: newSystemAnalysisComponentMutation(scu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.RemovedAnalysesIDs(); len(nodes) > 0 && !scu.mutation.AnalysesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemcomponent.AnalysesTable,
			Columns: systemcomponent.AnalysesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemanalysis.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SystemAnalysisComponentCreate{config: scu.config, mutation: newSystemAnalysisComponentMutation(scu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.AnalysesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemcomponent.AnalysesTable,
			Columns: systemcomponent.AnalysesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemanalysis.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SystemAnalysisComponentCreate{config: scu.config, mutation: newSystemAnalysisComponentMutation(scu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scu.mutation.RelatedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemcomponent.RelatedTable,
			Columns: systemcomponent.RelatedPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		createE := &SystemRelationshipCreate{config: scu.config, mutation: newSystemRelationshipMutation(scu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.RemovedRelatedIDs(); len(nodes) > 0 && !scu.mutation.RelatedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemcomponent.RelatedTable,
			Columns: systemcomponent.RelatedPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SystemRelationshipCreate{config: scu.config, mutation: newSystemRelationshipMutation(scu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.RelatedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemcomponent.RelatedTable,
			Columns: systemcomponent.RelatedPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SystemRelationshipCreate{config: scu.config, mutation: newSystemRelationshipMutation(scu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   systemcomponent.EventsTable,
			Columns: systemcomponent.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentevent.FieldID, field.TypeUUID),
			},
		}
		createE := &IncidentEventSystemComponentCreate{config: scu.config, mutation: newIncidentEventSystemComponentMutation(scu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.RemovedEventsIDs(); len(nodes) > 0 && !scu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   systemcomponent.EventsTable,
			Columns: systemcomponent.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentevent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &IncidentEventSystemComponentCreate{config: scu.config, mutation: newIncidentEventSystemComponentMutation(scu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   systemcomponent.EventsTable,
			Columns: systemcomponent.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentevent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &IncidentEventSystemComponentCreate{config: scu.config, mutation: newIncidentEventSystemComponentMutation(scu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scu.mutation.ConstraintsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.ConstraintsTable,
			Columns: []string{systemcomponent.ConstraintsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentconstraint.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.RemovedConstraintsIDs(); len(nodes) > 0 && !scu.mutation.ConstraintsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.ConstraintsTable,
			Columns: []string{systemcomponent.ConstraintsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentconstraint.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.ConstraintsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.ConstraintsTable,
			Columns: []string{systemcomponent.ConstraintsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentconstraint.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scu.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.ControlsTable,
			Columns: []string{systemcomponent.ControlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentcontrol.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.RemovedControlsIDs(); len(nodes) > 0 && !scu.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.ControlsTable,
			Columns: []string{systemcomponent.ControlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentcontrol.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.ControlsTable,
			Columns: []string{systemcomponent.ControlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentcontrol.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scu.mutation.SignalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.SignalsTable,
			Columns: []string{systemcomponent.SignalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentsignal.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.RemovedSignalsIDs(); len(nodes) > 0 && !scu.mutation.SignalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.SignalsTable,
			Columns: []string{systemcomponent.SignalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentsignal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.SignalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.SignalsTable,
			Columns: []string{systemcomponent.SignalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentsignal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scu.mutation.AnalysisComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.AnalysisComponentsTable,
			Columns: []string{systemcomponent.AnalysisComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemanalysiscomponent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.RemovedAnalysisComponentsIDs(); len(nodes) > 0 && !scu.mutation.AnalysisComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.AnalysisComponentsTable,
			Columns: []string{systemcomponent.AnalysisComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemanalysiscomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.AnalysisComponentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.AnalysisComponentsTable,
			Columns: []string{systemcomponent.AnalysisComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemanalysiscomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scu.mutation.RelationshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.RelationshipsTable,
			Columns: []string{systemcomponent.RelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemrelationship.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.RemovedRelationshipsIDs(); len(nodes) > 0 && !scu.mutation.RelationshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.RelationshipsTable,
			Columns: []string{systemcomponent.RelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemrelationship.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.RelationshipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.RelationshipsTable,
			Columns: []string{systemcomponent.RelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemrelationship.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scu.mutation.EventComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.EventComponentsTable,
			Columns: []string{systemcomponent.EventComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidenteventsystemcomponent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.RemovedEventComponentsIDs(); len(nodes) > 0 && !scu.mutation.EventComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.EventComponentsTable,
			Columns: []string{systemcomponent.EventComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidenteventsystemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.EventComponentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.EventComponentsTable,
			Columns: []string{systemcomponent.EventComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidenteventsystemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(scu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, scu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systemcomponent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	scu.mutation.done = true
	return n, nil
}

// SystemComponentUpdateOne is the builder for updating a single SystemComponent entity.
type SystemComponentUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SystemComponentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetName sets the "name" field.
func (scuo *SystemComponentUpdateOne) SetName(s string) *SystemComponentUpdateOne {
	scuo.mutation.SetName(s)
	return scuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (scuo *SystemComponentUpdateOne) SetNillableName(s *string) *SystemComponentUpdateOne {
	if s != nil {
		scuo.SetName(*s)
	}
	return scuo
}

// SetKindID sets the "kind_id" field.
func (scuo *SystemComponentUpdateOne) SetKindID(u uuid.UUID) *SystemComponentUpdateOne {
	scuo.mutation.SetKindID(u)
	return scuo
}

// SetNillableKindID sets the "kind_id" field if the given value is not nil.
func (scuo *SystemComponentUpdateOne) SetNillableKindID(u *uuid.UUID) *SystemComponentUpdateOne {
	if u != nil {
		scuo.SetKindID(*u)
	}
	return scuo
}

// SetDescription sets the "description" field.
func (scuo *SystemComponentUpdateOne) SetDescription(s string) *SystemComponentUpdateOne {
	scuo.mutation.SetDescription(s)
	return scuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (scuo *SystemComponentUpdateOne) SetNillableDescription(s *string) *SystemComponentUpdateOne {
	if s != nil {
		scuo.SetDescription(*s)
	}
	return scuo
}

// ClearDescription clears the value of the "description" field.
func (scuo *SystemComponentUpdateOne) ClearDescription() *SystemComponentUpdateOne {
	scuo.mutation.ClearDescription()
	return scuo
}

// SetProperties sets the "properties" field.
func (scuo *SystemComponentUpdateOne) SetProperties(m map[string]interface{}) *SystemComponentUpdateOne {
	scuo.mutation.SetProperties(m)
	return scuo
}

// SetCreatedAt sets the "created_at" field.
func (scuo *SystemComponentUpdateOne) SetCreatedAt(t time.Time) *SystemComponentUpdateOne {
	scuo.mutation.SetCreatedAt(t)
	return scuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (scuo *SystemComponentUpdateOne) SetNillableCreatedAt(t *time.Time) *SystemComponentUpdateOne {
	if t != nil {
		scuo.SetCreatedAt(*t)
	}
	return scuo
}

// SetUpdatedAt sets the "updated_at" field.
func (scuo *SystemComponentUpdateOne) SetUpdatedAt(t time.Time) *SystemComponentUpdateOne {
	scuo.mutation.SetUpdatedAt(t)
	return scuo
}

// SetKind sets the "kind" edge to the SystemComponentKind entity.
func (scuo *SystemComponentUpdateOne) SetKind(s *SystemComponentKind) *SystemComponentUpdateOne {
	return scuo.SetKindID(s.ID)
}

// AddAnalysisIDs adds the "analyses" edge to the SystemAnalysis entity by IDs.
func (scuo *SystemComponentUpdateOne) AddAnalysisIDs(ids ...uuid.UUID) *SystemComponentUpdateOne {
	scuo.mutation.AddAnalysisIDs(ids...)
	return scuo
}

// AddAnalyses adds the "analyses" edges to the SystemAnalysis entity.
func (scuo *SystemComponentUpdateOne) AddAnalyses(s ...*SystemAnalysis) *SystemComponentUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scuo.AddAnalysisIDs(ids...)
}

// AddRelatedIDs adds the "related" edge to the SystemComponent entity by IDs.
func (scuo *SystemComponentUpdateOne) AddRelatedIDs(ids ...uuid.UUID) *SystemComponentUpdateOne {
	scuo.mutation.AddRelatedIDs(ids...)
	return scuo
}

// AddRelated adds the "related" edges to the SystemComponent entity.
func (scuo *SystemComponentUpdateOne) AddRelated(s ...*SystemComponent) *SystemComponentUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scuo.AddRelatedIDs(ids...)
}

// AddEventIDs adds the "events" edge to the IncidentEvent entity by IDs.
func (scuo *SystemComponentUpdateOne) AddEventIDs(ids ...uuid.UUID) *SystemComponentUpdateOne {
	scuo.mutation.AddEventIDs(ids...)
	return scuo
}

// AddEvents adds the "events" edges to the IncidentEvent entity.
func (scuo *SystemComponentUpdateOne) AddEvents(i ...*IncidentEvent) *SystemComponentUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return scuo.AddEventIDs(ids...)
}

// AddConstraintIDs adds the "constraints" edge to the SystemComponentConstraint entity by IDs.
func (scuo *SystemComponentUpdateOne) AddConstraintIDs(ids ...uuid.UUID) *SystemComponentUpdateOne {
	scuo.mutation.AddConstraintIDs(ids...)
	return scuo
}

// AddConstraints adds the "constraints" edges to the SystemComponentConstraint entity.
func (scuo *SystemComponentUpdateOne) AddConstraints(s ...*SystemComponentConstraint) *SystemComponentUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scuo.AddConstraintIDs(ids...)
}

// AddControlIDs adds the "controls" edge to the SystemComponentControl entity by IDs.
func (scuo *SystemComponentUpdateOne) AddControlIDs(ids ...uuid.UUID) *SystemComponentUpdateOne {
	scuo.mutation.AddControlIDs(ids...)
	return scuo
}

// AddControls adds the "controls" edges to the SystemComponentControl entity.
func (scuo *SystemComponentUpdateOne) AddControls(s ...*SystemComponentControl) *SystemComponentUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scuo.AddControlIDs(ids...)
}

// AddSignalIDs adds the "signals" edge to the SystemComponentSignal entity by IDs.
func (scuo *SystemComponentUpdateOne) AddSignalIDs(ids ...uuid.UUID) *SystemComponentUpdateOne {
	scuo.mutation.AddSignalIDs(ids...)
	return scuo
}

// AddSignals adds the "signals" edges to the SystemComponentSignal entity.
func (scuo *SystemComponentUpdateOne) AddSignals(s ...*SystemComponentSignal) *SystemComponentUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scuo.AddSignalIDs(ids...)
}

// AddAnalysisComponentIDs adds the "analysis_components" edge to the SystemAnalysisComponent entity by IDs.
func (scuo *SystemComponentUpdateOne) AddAnalysisComponentIDs(ids ...uuid.UUID) *SystemComponentUpdateOne {
	scuo.mutation.AddAnalysisComponentIDs(ids...)
	return scuo
}

// AddAnalysisComponents adds the "analysis_components" edges to the SystemAnalysisComponent entity.
func (scuo *SystemComponentUpdateOne) AddAnalysisComponents(s ...*SystemAnalysisComponent) *SystemComponentUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scuo.AddAnalysisComponentIDs(ids...)
}

// AddRelationshipIDs adds the "relationships" edge to the SystemRelationship entity by IDs.
func (scuo *SystemComponentUpdateOne) AddRelationshipIDs(ids ...uuid.UUID) *SystemComponentUpdateOne {
	scuo.mutation.AddRelationshipIDs(ids...)
	return scuo
}

// AddRelationships adds the "relationships" edges to the SystemRelationship entity.
func (scuo *SystemComponentUpdateOne) AddRelationships(s ...*SystemRelationship) *SystemComponentUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scuo.AddRelationshipIDs(ids...)
}

// AddEventComponentIDs adds the "event_components" edge to the IncidentEventSystemComponent entity by IDs.
func (scuo *SystemComponentUpdateOne) AddEventComponentIDs(ids ...uuid.UUID) *SystemComponentUpdateOne {
	scuo.mutation.AddEventComponentIDs(ids...)
	return scuo
}

// AddEventComponents adds the "event_components" edges to the IncidentEventSystemComponent entity.
func (scuo *SystemComponentUpdateOne) AddEventComponents(i ...*IncidentEventSystemComponent) *SystemComponentUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return scuo.AddEventComponentIDs(ids...)
}

// Mutation returns the SystemComponentMutation object of the builder.
func (scuo *SystemComponentUpdateOne) Mutation() *SystemComponentMutation {
	return scuo.mutation
}

// ClearKind clears the "kind" edge to the SystemComponentKind entity.
func (scuo *SystemComponentUpdateOne) ClearKind() *SystemComponentUpdateOne {
	scuo.mutation.ClearKind()
	return scuo
}

// ClearAnalyses clears all "analyses" edges to the SystemAnalysis entity.
func (scuo *SystemComponentUpdateOne) ClearAnalyses() *SystemComponentUpdateOne {
	scuo.mutation.ClearAnalyses()
	return scuo
}

// RemoveAnalysisIDs removes the "analyses" edge to SystemAnalysis entities by IDs.
func (scuo *SystemComponentUpdateOne) RemoveAnalysisIDs(ids ...uuid.UUID) *SystemComponentUpdateOne {
	scuo.mutation.RemoveAnalysisIDs(ids...)
	return scuo
}

// RemoveAnalyses removes "analyses" edges to SystemAnalysis entities.
func (scuo *SystemComponentUpdateOne) RemoveAnalyses(s ...*SystemAnalysis) *SystemComponentUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scuo.RemoveAnalysisIDs(ids...)
}

// ClearRelated clears all "related" edges to the SystemComponent entity.
func (scuo *SystemComponentUpdateOne) ClearRelated() *SystemComponentUpdateOne {
	scuo.mutation.ClearRelated()
	return scuo
}

// RemoveRelatedIDs removes the "related" edge to SystemComponent entities by IDs.
func (scuo *SystemComponentUpdateOne) RemoveRelatedIDs(ids ...uuid.UUID) *SystemComponentUpdateOne {
	scuo.mutation.RemoveRelatedIDs(ids...)
	return scuo
}

// RemoveRelated removes "related" edges to SystemComponent entities.
func (scuo *SystemComponentUpdateOne) RemoveRelated(s ...*SystemComponent) *SystemComponentUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scuo.RemoveRelatedIDs(ids...)
}

// ClearEvents clears all "events" edges to the IncidentEvent entity.
func (scuo *SystemComponentUpdateOne) ClearEvents() *SystemComponentUpdateOne {
	scuo.mutation.ClearEvents()
	return scuo
}

// RemoveEventIDs removes the "events" edge to IncidentEvent entities by IDs.
func (scuo *SystemComponentUpdateOne) RemoveEventIDs(ids ...uuid.UUID) *SystemComponentUpdateOne {
	scuo.mutation.RemoveEventIDs(ids...)
	return scuo
}

// RemoveEvents removes "events" edges to IncidentEvent entities.
func (scuo *SystemComponentUpdateOne) RemoveEvents(i ...*IncidentEvent) *SystemComponentUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return scuo.RemoveEventIDs(ids...)
}

// ClearConstraints clears all "constraints" edges to the SystemComponentConstraint entity.
func (scuo *SystemComponentUpdateOne) ClearConstraints() *SystemComponentUpdateOne {
	scuo.mutation.ClearConstraints()
	return scuo
}

// RemoveConstraintIDs removes the "constraints" edge to SystemComponentConstraint entities by IDs.
func (scuo *SystemComponentUpdateOne) RemoveConstraintIDs(ids ...uuid.UUID) *SystemComponentUpdateOne {
	scuo.mutation.RemoveConstraintIDs(ids...)
	return scuo
}

// RemoveConstraints removes "constraints" edges to SystemComponentConstraint entities.
func (scuo *SystemComponentUpdateOne) RemoveConstraints(s ...*SystemComponentConstraint) *SystemComponentUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scuo.RemoveConstraintIDs(ids...)
}

// ClearControls clears all "controls" edges to the SystemComponentControl entity.
func (scuo *SystemComponentUpdateOne) ClearControls() *SystemComponentUpdateOne {
	scuo.mutation.ClearControls()
	return scuo
}

// RemoveControlIDs removes the "controls" edge to SystemComponentControl entities by IDs.
func (scuo *SystemComponentUpdateOne) RemoveControlIDs(ids ...uuid.UUID) *SystemComponentUpdateOne {
	scuo.mutation.RemoveControlIDs(ids...)
	return scuo
}

// RemoveControls removes "controls" edges to SystemComponentControl entities.
func (scuo *SystemComponentUpdateOne) RemoveControls(s ...*SystemComponentControl) *SystemComponentUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scuo.RemoveControlIDs(ids...)
}

// ClearSignals clears all "signals" edges to the SystemComponentSignal entity.
func (scuo *SystemComponentUpdateOne) ClearSignals() *SystemComponentUpdateOne {
	scuo.mutation.ClearSignals()
	return scuo
}

// RemoveSignalIDs removes the "signals" edge to SystemComponentSignal entities by IDs.
func (scuo *SystemComponentUpdateOne) RemoveSignalIDs(ids ...uuid.UUID) *SystemComponentUpdateOne {
	scuo.mutation.RemoveSignalIDs(ids...)
	return scuo
}

// RemoveSignals removes "signals" edges to SystemComponentSignal entities.
func (scuo *SystemComponentUpdateOne) RemoveSignals(s ...*SystemComponentSignal) *SystemComponentUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scuo.RemoveSignalIDs(ids...)
}

// ClearAnalysisComponents clears all "analysis_components" edges to the SystemAnalysisComponent entity.
func (scuo *SystemComponentUpdateOne) ClearAnalysisComponents() *SystemComponentUpdateOne {
	scuo.mutation.ClearAnalysisComponents()
	return scuo
}

// RemoveAnalysisComponentIDs removes the "analysis_components" edge to SystemAnalysisComponent entities by IDs.
func (scuo *SystemComponentUpdateOne) RemoveAnalysisComponentIDs(ids ...uuid.UUID) *SystemComponentUpdateOne {
	scuo.mutation.RemoveAnalysisComponentIDs(ids...)
	return scuo
}

// RemoveAnalysisComponents removes "analysis_components" edges to SystemAnalysisComponent entities.
func (scuo *SystemComponentUpdateOne) RemoveAnalysisComponents(s ...*SystemAnalysisComponent) *SystemComponentUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scuo.RemoveAnalysisComponentIDs(ids...)
}

// ClearRelationships clears all "relationships" edges to the SystemRelationship entity.
func (scuo *SystemComponentUpdateOne) ClearRelationships() *SystemComponentUpdateOne {
	scuo.mutation.ClearRelationships()
	return scuo
}

// RemoveRelationshipIDs removes the "relationships" edge to SystemRelationship entities by IDs.
func (scuo *SystemComponentUpdateOne) RemoveRelationshipIDs(ids ...uuid.UUID) *SystemComponentUpdateOne {
	scuo.mutation.RemoveRelationshipIDs(ids...)
	return scuo
}

// RemoveRelationships removes "relationships" edges to SystemRelationship entities.
func (scuo *SystemComponentUpdateOne) RemoveRelationships(s ...*SystemRelationship) *SystemComponentUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scuo.RemoveRelationshipIDs(ids...)
}

// ClearEventComponents clears all "event_components" edges to the IncidentEventSystemComponent entity.
func (scuo *SystemComponentUpdateOne) ClearEventComponents() *SystemComponentUpdateOne {
	scuo.mutation.ClearEventComponents()
	return scuo
}

// RemoveEventComponentIDs removes the "event_components" edge to IncidentEventSystemComponent entities by IDs.
func (scuo *SystemComponentUpdateOne) RemoveEventComponentIDs(ids ...uuid.UUID) *SystemComponentUpdateOne {
	scuo.mutation.RemoveEventComponentIDs(ids...)
	return scuo
}

// RemoveEventComponents removes "event_components" edges to IncidentEventSystemComponent entities.
func (scuo *SystemComponentUpdateOne) RemoveEventComponents(i ...*IncidentEventSystemComponent) *SystemComponentUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return scuo.RemoveEventComponentIDs(ids...)
}

// Where appends a list predicates to the SystemComponentUpdate builder.
func (scuo *SystemComponentUpdateOne) Where(ps ...predicate.SystemComponent) *SystemComponentUpdateOne {
	scuo.mutation.Where(ps...)
	return scuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (scuo *SystemComponentUpdateOne) Select(field string, fields ...string) *SystemComponentUpdateOne {
	scuo.fields = append([]string{field}, fields...)
	return scuo
}

// Save executes the query and returns the updated SystemComponent entity.
func (scuo *SystemComponentUpdateOne) Save(ctx context.Context) (*SystemComponent, error) {
	scuo.defaults()
	return withHooks(ctx, scuo.sqlSave, scuo.mutation, scuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scuo *SystemComponentUpdateOne) SaveX(ctx context.Context) *SystemComponent {
	node, err := scuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (scuo *SystemComponentUpdateOne) Exec(ctx context.Context) error {
	_, err := scuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scuo *SystemComponentUpdateOne) ExecX(ctx context.Context) {
	if err := scuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scuo *SystemComponentUpdateOne) defaults() {
	if _, ok := scuo.mutation.UpdatedAt(); !ok {
		v := systemcomponent.UpdateDefaultUpdatedAt()
		scuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scuo *SystemComponentUpdateOne) check() error {
	if v, ok := scuo.mutation.Name(); ok {
		if err := systemcomponent.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "SystemComponent.name": %w`, err)}
		}
	}
	if scuo.mutation.KindCleared() && len(scuo.mutation.KindIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SystemComponent.kind"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (scuo *SystemComponentUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SystemComponentUpdateOne {
	scuo.modifiers = append(scuo.modifiers, modifiers...)
	return scuo
}

func (scuo *SystemComponentUpdateOne) sqlSave(ctx context.Context) (_node *SystemComponent, err error) {
	if err := scuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(systemcomponent.Table, systemcomponent.Columns, sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID))
	id, ok := scuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SystemComponent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := scuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, systemcomponent.FieldID)
		for _, f := range fields {
			if !systemcomponent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != systemcomponent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := scuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scuo.mutation.Name(); ok {
		_spec.SetField(systemcomponent.FieldName, field.TypeString, value)
	}
	if value, ok := scuo.mutation.Description(); ok {
		_spec.SetField(systemcomponent.FieldDescription, field.TypeString, value)
	}
	if scuo.mutation.DescriptionCleared() {
		_spec.ClearField(systemcomponent.FieldDescription, field.TypeString)
	}
	if value, ok := scuo.mutation.Properties(); ok {
		_spec.SetField(systemcomponent.FieldProperties, field.TypeJSON, value)
	}
	if value, ok := scuo.mutation.CreatedAt(); ok {
		_spec.SetField(systemcomponent.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := scuo.mutation.UpdatedAt(); ok {
		_spec.SetField(systemcomponent.FieldUpdatedAt, field.TypeTime, value)
	}
	if scuo.mutation.KindCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemcomponent.KindTable,
			Columns: []string{systemcomponent.KindColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentkind.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.KindIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemcomponent.KindTable,
			Columns: []string{systemcomponent.KindColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentkind.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scuo.mutation.AnalysesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemcomponent.AnalysesTable,
			Columns: systemcomponent.AnalysesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemanalysis.FieldID, field.TypeUUID),
			},
		}
		createE := &SystemAnalysisComponentCreate{config: scuo.config, mutation: newSystemAnalysisComponentMutation(scuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.RemovedAnalysesIDs(); len(nodes) > 0 && !scuo.mutation.AnalysesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemcomponent.AnalysesTable,
			Columns: systemcomponent.AnalysesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemanalysis.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SystemAnalysisComponentCreate{config: scuo.config, mutation: newSystemAnalysisComponentMutation(scuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.AnalysesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemcomponent.AnalysesTable,
			Columns: systemcomponent.AnalysesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemanalysis.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SystemAnalysisComponentCreate{config: scuo.config, mutation: newSystemAnalysisComponentMutation(scuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scuo.mutation.RelatedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemcomponent.RelatedTable,
			Columns: systemcomponent.RelatedPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		createE := &SystemRelationshipCreate{config: scuo.config, mutation: newSystemRelationshipMutation(scuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.RemovedRelatedIDs(); len(nodes) > 0 && !scuo.mutation.RelatedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemcomponent.RelatedTable,
			Columns: systemcomponent.RelatedPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SystemRelationshipCreate{config: scuo.config, mutation: newSystemRelationshipMutation(scuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.RelatedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systemcomponent.RelatedTable,
			Columns: systemcomponent.RelatedPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SystemRelationshipCreate{config: scuo.config, mutation: newSystemRelationshipMutation(scuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scuo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   systemcomponent.EventsTable,
			Columns: systemcomponent.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentevent.FieldID, field.TypeUUID),
			},
		}
		createE := &IncidentEventSystemComponentCreate{config: scuo.config, mutation: newIncidentEventSystemComponentMutation(scuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.RemovedEventsIDs(); len(nodes) > 0 && !scuo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   systemcomponent.EventsTable,
			Columns: systemcomponent.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentevent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &IncidentEventSystemComponentCreate{config: scuo.config, mutation: newIncidentEventSystemComponentMutation(scuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   systemcomponent.EventsTable,
			Columns: systemcomponent.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentevent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &IncidentEventSystemComponentCreate{config: scuo.config, mutation: newIncidentEventSystemComponentMutation(scuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scuo.mutation.ConstraintsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.ConstraintsTable,
			Columns: []string{systemcomponent.ConstraintsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentconstraint.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.RemovedConstraintsIDs(); len(nodes) > 0 && !scuo.mutation.ConstraintsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.ConstraintsTable,
			Columns: []string{systemcomponent.ConstraintsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentconstraint.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.ConstraintsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.ConstraintsTable,
			Columns: []string{systemcomponent.ConstraintsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentconstraint.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scuo.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.ControlsTable,
			Columns: []string{systemcomponent.ControlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentcontrol.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.RemovedControlsIDs(); len(nodes) > 0 && !scuo.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.ControlsTable,
			Columns: []string{systemcomponent.ControlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentcontrol.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.ControlsTable,
			Columns: []string{systemcomponent.ControlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentcontrol.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scuo.mutation.SignalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.SignalsTable,
			Columns: []string{systemcomponent.SignalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentsignal.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.RemovedSignalsIDs(); len(nodes) > 0 && !scuo.mutation.SignalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.SignalsTable,
			Columns: []string{systemcomponent.SignalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentsignal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.SignalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.SignalsTable,
			Columns: []string{systemcomponent.SignalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentsignal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scuo.mutation.AnalysisComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.AnalysisComponentsTable,
			Columns: []string{systemcomponent.AnalysisComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemanalysiscomponent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.RemovedAnalysisComponentsIDs(); len(nodes) > 0 && !scuo.mutation.AnalysisComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.AnalysisComponentsTable,
			Columns: []string{systemcomponent.AnalysisComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemanalysiscomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.AnalysisComponentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.AnalysisComponentsTable,
			Columns: []string{systemcomponent.AnalysisComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemanalysiscomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scuo.mutation.RelationshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.RelationshipsTable,
			Columns: []string{systemcomponent.RelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemrelationship.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.RemovedRelationshipsIDs(); len(nodes) > 0 && !scuo.mutation.RelationshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.RelationshipsTable,
			Columns: []string{systemcomponent.RelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemrelationship.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.RelationshipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.RelationshipsTable,
			Columns: []string{systemcomponent.RelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemrelationship.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scuo.mutation.EventComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.EventComponentsTable,
			Columns: []string{systemcomponent.EventComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidenteventsystemcomponent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.RemovedEventComponentsIDs(); len(nodes) > 0 && !scuo.mutation.EventComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.EventComponentsTable,
			Columns: []string{systemcomponent.EventComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidenteventsystemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.EventComponentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemcomponent.EventComponentsTable,
			Columns: []string{systemcomponent.EventComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidenteventsystemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(scuo.modifiers...)
	_node = &SystemComponent{config: scuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, scuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systemcomponent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	scuo.mutation.done = true
	return _node, nil
}
