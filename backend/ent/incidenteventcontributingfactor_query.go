// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/incidentevent"
	"github.com/rezible/rezible/ent/incidenteventcontributingfactor"
	"github.com/rezible/rezible/ent/predicate"
)

// IncidentEventContributingFactorQuery is the builder for querying IncidentEventContributingFactor entities.
type IncidentEventContributingFactorQuery struct {
	config
	ctx        *QueryContext
	order      []incidenteventcontributingfactor.OrderOption
	inters     []Interceptor
	predicates []predicate.IncidentEventContributingFactor
	withEvent  *IncidentEventQuery
	withFKs    bool
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the IncidentEventContributingFactorQuery builder.
func (iecfq *IncidentEventContributingFactorQuery) Where(ps ...predicate.IncidentEventContributingFactor) *IncidentEventContributingFactorQuery {
	iecfq.predicates = append(iecfq.predicates, ps...)
	return iecfq
}

// Limit the number of records to be returned by this query.
func (iecfq *IncidentEventContributingFactorQuery) Limit(limit int) *IncidentEventContributingFactorQuery {
	iecfq.ctx.Limit = &limit
	return iecfq
}

// Offset to start from.
func (iecfq *IncidentEventContributingFactorQuery) Offset(offset int) *IncidentEventContributingFactorQuery {
	iecfq.ctx.Offset = &offset
	return iecfq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (iecfq *IncidentEventContributingFactorQuery) Unique(unique bool) *IncidentEventContributingFactorQuery {
	iecfq.ctx.Unique = &unique
	return iecfq
}

// Order specifies how the records should be ordered.
func (iecfq *IncidentEventContributingFactorQuery) Order(o ...incidenteventcontributingfactor.OrderOption) *IncidentEventContributingFactorQuery {
	iecfq.order = append(iecfq.order, o...)
	return iecfq
}

// QueryEvent chains the current query on the "event" edge.
func (iecfq *IncidentEventContributingFactorQuery) QueryEvent() *IncidentEventQuery {
	query := (&IncidentEventClient{config: iecfq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iecfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iecfq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(incidenteventcontributingfactor.Table, incidenteventcontributingfactor.FieldID, selector),
			sqlgraph.To(incidentevent.Table, incidentevent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, incidenteventcontributingfactor.EventTable, incidenteventcontributingfactor.EventColumn),
		)
		fromU = sqlgraph.SetNeighbors(iecfq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first IncidentEventContributingFactor entity from the query.
// Returns a *NotFoundError when no IncidentEventContributingFactor was found.
func (iecfq *IncidentEventContributingFactorQuery) First(ctx context.Context) (*IncidentEventContributingFactor, error) {
	nodes, err := iecfq.Limit(1).All(setContextOp(ctx, iecfq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{incidenteventcontributingfactor.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (iecfq *IncidentEventContributingFactorQuery) FirstX(ctx context.Context) *IncidentEventContributingFactor {
	node, err := iecfq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first IncidentEventContributingFactor ID from the query.
// Returns a *NotFoundError when no IncidentEventContributingFactor ID was found.
func (iecfq *IncidentEventContributingFactorQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = iecfq.Limit(1).IDs(setContextOp(ctx, iecfq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{incidenteventcontributingfactor.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (iecfq *IncidentEventContributingFactorQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := iecfq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single IncidentEventContributingFactor entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one IncidentEventContributingFactor entity is found.
// Returns a *NotFoundError when no IncidentEventContributingFactor entities are found.
func (iecfq *IncidentEventContributingFactorQuery) Only(ctx context.Context) (*IncidentEventContributingFactor, error) {
	nodes, err := iecfq.Limit(2).All(setContextOp(ctx, iecfq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{incidenteventcontributingfactor.Label}
	default:
		return nil, &NotSingularError{incidenteventcontributingfactor.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (iecfq *IncidentEventContributingFactorQuery) OnlyX(ctx context.Context) *IncidentEventContributingFactor {
	node, err := iecfq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only IncidentEventContributingFactor ID in the query.
// Returns a *NotSingularError when more than one IncidentEventContributingFactor ID is found.
// Returns a *NotFoundError when no entities are found.
func (iecfq *IncidentEventContributingFactorQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = iecfq.Limit(2).IDs(setContextOp(ctx, iecfq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{incidenteventcontributingfactor.Label}
	default:
		err = &NotSingularError{incidenteventcontributingfactor.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (iecfq *IncidentEventContributingFactorQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := iecfq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of IncidentEventContributingFactors.
func (iecfq *IncidentEventContributingFactorQuery) All(ctx context.Context) ([]*IncidentEventContributingFactor, error) {
	ctx = setContextOp(ctx, iecfq.ctx, ent.OpQueryAll)
	if err := iecfq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*IncidentEventContributingFactor, *IncidentEventContributingFactorQuery]()
	return withInterceptors[[]*IncidentEventContributingFactor](ctx, iecfq, qr, iecfq.inters)
}

// AllX is like All, but panics if an error occurs.
func (iecfq *IncidentEventContributingFactorQuery) AllX(ctx context.Context) []*IncidentEventContributingFactor {
	nodes, err := iecfq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of IncidentEventContributingFactor IDs.
func (iecfq *IncidentEventContributingFactorQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if iecfq.ctx.Unique == nil && iecfq.path != nil {
		iecfq.Unique(true)
	}
	ctx = setContextOp(ctx, iecfq.ctx, ent.OpQueryIDs)
	if err = iecfq.Select(incidenteventcontributingfactor.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (iecfq *IncidentEventContributingFactorQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := iecfq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (iecfq *IncidentEventContributingFactorQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, iecfq.ctx, ent.OpQueryCount)
	if err := iecfq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, iecfq, querierCount[*IncidentEventContributingFactorQuery](), iecfq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (iecfq *IncidentEventContributingFactorQuery) CountX(ctx context.Context) int {
	count, err := iecfq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (iecfq *IncidentEventContributingFactorQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, iecfq.ctx, ent.OpQueryExist)
	switch _, err := iecfq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (iecfq *IncidentEventContributingFactorQuery) ExistX(ctx context.Context) bool {
	exist, err := iecfq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the IncidentEventContributingFactorQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (iecfq *IncidentEventContributingFactorQuery) Clone() *IncidentEventContributingFactorQuery {
	if iecfq == nil {
		return nil
	}
	return &IncidentEventContributingFactorQuery{
		config:     iecfq.config,
		ctx:        iecfq.ctx.Clone(),
		order:      append([]incidenteventcontributingfactor.OrderOption{}, iecfq.order...),
		inters:     append([]Interceptor{}, iecfq.inters...),
		predicates: append([]predicate.IncidentEventContributingFactor{}, iecfq.predicates...),
		withEvent:  iecfq.withEvent.Clone(),
		// clone intermediate query.
		sql:       iecfq.sql.Clone(),
		path:      iecfq.path,
		modifiers: append([]func(*sql.Selector){}, iecfq.modifiers...),
	}
}

// WithEvent tells the query-builder to eager-load the nodes that are connected to
// the "event" edge. The optional arguments are used to configure the query builder of the edge.
func (iecfq *IncidentEventContributingFactorQuery) WithEvent(opts ...func(*IncidentEventQuery)) *IncidentEventContributingFactorQuery {
	query := (&IncidentEventClient{config: iecfq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iecfq.withEvent = query
	return iecfq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		FactorType string `json:"factor_type,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.IncidentEventContributingFactor.Query().
//		GroupBy(incidenteventcontributingfactor.FieldFactorType).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (iecfq *IncidentEventContributingFactorQuery) GroupBy(field string, fields ...string) *IncidentEventContributingFactorGroupBy {
	iecfq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &IncidentEventContributingFactorGroupBy{build: iecfq}
	grbuild.flds = &iecfq.ctx.Fields
	grbuild.label = incidenteventcontributingfactor.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		FactorType string `json:"factor_type,omitempty"`
//	}
//
//	client.IncidentEventContributingFactor.Query().
//		Select(incidenteventcontributingfactor.FieldFactorType).
//		Scan(ctx, &v)
func (iecfq *IncidentEventContributingFactorQuery) Select(fields ...string) *IncidentEventContributingFactorSelect {
	iecfq.ctx.Fields = append(iecfq.ctx.Fields, fields...)
	sbuild := &IncidentEventContributingFactorSelect{IncidentEventContributingFactorQuery: iecfq}
	sbuild.label = incidenteventcontributingfactor.Label
	sbuild.flds, sbuild.scan = &iecfq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a IncidentEventContributingFactorSelect configured with the given aggregations.
func (iecfq *IncidentEventContributingFactorQuery) Aggregate(fns ...AggregateFunc) *IncidentEventContributingFactorSelect {
	return iecfq.Select().Aggregate(fns...)
}

func (iecfq *IncidentEventContributingFactorQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range iecfq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, iecfq); err != nil {
				return err
			}
		}
	}
	for _, f := range iecfq.ctx.Fields {
		if !incidenteventcontributingfactor.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if iecfq.path != nil {
		prev, err := iecfq.path(ctx)
		if err != nil {
			return err
		}
		iecfq.sql = prev
	}
	if incidenteventcontributingfactor.Policy == nil {
		return errors.New("ent: uninitialized incidenteventcontributingfactor.Policy (forgotten import ent/runtime?)")
	}
	if err := incidenteventcontributingfactor.Policy.EvalQuery(ctx, iecfq); err != nil {
		return err
	}
	return nil
}

func (iecfq *IncidentEventContributingFactorQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*IncidentEventContributingFactor, error) {
	var (
		nodes       = []*IncidentEventContributingFactor{}
		withFKs     = iecfq.withFKs
		_spec       = iecfq.querySpec()
		loadedTypes = [1]bool{
			iecfq.withEvent != nil,
		}
	)
	if iecfq.withEvent != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, incidenteventcontributingfactor.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*IncidentEventContributingFactor).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &IncidentEventContributingFactor{config: iecfq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(iecfq.modifiers) > 0 {
		_spec.Modifiers = iecfq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, iecfq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := iecfq.withEvent; query != nil {
		if err := iecfq.loadEvent(ctx, query, nodes, nil,
			func(n *IncidentEventContributingFactor, e *IncidentEvent) { n.Edges.Event = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (iecfq *IncidentEventContributingFactorQuery) loadEvent(ctx context.Context, query *IncidentEventQuery, nodes []*IncidentEventContributingFactor, init func(*IncidentEventContributingFactor), assign func(*IncidentEventContributingFactor, *IncidentEvent)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*IncidentEventContributingFactor)
	for i := range nodes {
		if nodes[i].incident_event_factors == nil {
			continue
		}
		fk := *nodes[i].incident_event_factors
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(incidentevent.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "incident_event_factors" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (iecfq *IncidentEventContributingFactorQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := iecfq.querySpec()
	if len(iecfq.modifiers) > 0 {
		_spec.Modifiers = iecfq.modifiers
	}
	_spec.Node.Columns = iecfq.ctx.Fields
	if len(iecfq.ctx.Fields) > 0 {
		_spec.Unique = iecfq.ctx.Unique != nil && *iecfq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, iecfq.driver, _spec)
}

func (iecfq *IncidentEventContributingFactorQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(incidenteventcontributingfactor.Table, incidenteventcontributingfactor.Columns, sqlgraph.NewFieldSpec(incidenteventcontributingfactor.FieldID, field.TypeUUID))
	_spec.From = iecfq.sql
	if unique := iecfq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if iecfq.path != nil {
		_spec.Unique = true
	}
	if fields := iecfq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, incidenteventcontributingfactor.FieldID)
		for i := range fields {
			if fields[i] != incidenteventcontributingfactor.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := iecfq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := iecfq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := iecfq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := iecfq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (iecfq *IncidentEventContributingFactorQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(iecfq.driver.Dialect())
	t1 := builder.Table(incidenteventcontributingfactor.Table)
	columns := iecfq.ctx.Fields
	if len(columns) == 0 {
		columns = incidenteventcontributingfactor.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if iecfq.sql != nil {
		selector = iecfq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if iecfq.ctx.Unique != nil && *iecfq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range iecfq.modifiers {
		m(selector)
	}
	for _, p := range iecfq.predicates {
		p(selector)
	}
	for _, p := range iecfq.order {
		p(selector)
	}
	if offset := iecfq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := iecfq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (iecfq *IncidentEventContributingFactorQuery) Modify(modifiers ...func(s *sql.Selector)) *IncidentEventContributingFactorSelect {
	iecfq.modifiers = append(iecfq.modifiers, modifiers...)
	return iecfq.Select()
}

// IncidentEventContributingFactorGroupBy is the group-by builder for IncidentEventContributingFactor entities.
type IncidentEventContributingFactorGroupBy struct {
	selector
	build *IncidentEventContributingFactorQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (iecfgb *IncidentEventContributingFactorGroupBy) Aggregate(fns ...AggregateFunc) *IncidentEventContributingFactorGroupBy {
	iecfgb.fns = append(iecfgb.fns, fns...)
	return iecfgb
}

// Scan applies the selector query and scans the result into the given value.
func (iecfgb *IncidentEventContributingFactorGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, iecfgb.build.ctx, ent.OpQueryGroupBy)
	if err := iecfgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*IncidentEventContributingFactorQuery, *IncidentEventContributingFactorGroupBy](ctx, iecfgb.build, iecfgb, iecfgb.build.inters, v)
}

func (iecfgb *IncidentEventContributingFactorGroupBy) sqlScan(ctx context.Context, root *IncidentEventContributingFactorQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(iecfgb.fns))
	for _, fn := range iecfgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*iecfgb.flds)+len(iecfgb.fns))
		for _, f := range *iecfgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*iecfgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := iecfgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// IncidentEventContributingFactorSelect is the builder for selecting fields of IncidentEventContributingFactor entities.
type IncidentEventContributingFactorSelect struct {
	*IncidentEventContributingFactorQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (iecfs *IncidentEventContributingFactorSelect) Aggregate(fns ...AggregateFunc) *IncidentEventContributingFactorSelect {
	iecfs.fns = append(iecfs.fns, fns...)
	return iecfs
}

// Scan applies the selector query and scans the result into the given value.
func (iecfs *IncidentEventContributingFactorSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, iecfs.ctx, ent.OpQuerySelect)
	if err := iecfs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*IncidentEventContributingFactorQuery, *IncidentEventContributingFactorSelect](ctx, iecfs.IncidentEventContributingFactorQuery, iecfs, iecfs.inters, v)
}

func (iecfs *IncidentEventContributingFactorSelect) sqlScan(ctx context.Context, root *IncidentEventContributingFactorQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(iecfs.fns))
	for _, fn := range iecfs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*iecfs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := iecfs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (iecfs *IncidentEventContributingFactorSelect) Modify(modifiers ...func(s *sql.Selector)) *IncidentEventContributingFactorSelect {
	iecfs.modifiers = append(iecfs.modifiers, modifiers...)
	return iecfs
}
