// Code generated by ent, DO NOT EDIT.

package oncallannotationalertfeedback

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the oncallannotationalertfeedback type in the database.
	Label = "oncall_annotation_alert_feedback"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAnnotationID holds the string denoting the annotation_id field in the database.
	FieldAnnotationID = "annotation_id"
	// FieldActionable holds the string denoting the actionable field in the database.
	FieldActionable = "actionable"
	// FieldDocumentationAvailable holds the string denoting the documentation_available field in the database.
	FieldDocumentationAvailable = "documentation_available"
	// FieldAccuracy holds the string denoting the accuracy field in the database.
	FieldAccuracy = "accuracy"
	// EdgeAnnotation holds the string denoting the annotation edge name in mutations.
	EdgeAnnotation = "annotation"
	// Table holds the table name of the oncallannotationalertfeedback in the database.
	Table = "oncall_annotation_alert_feedbacks"
	// AnnotationTable is the table that holds the annotation relation/edge.
	AnnotationTable = "oncall_annotation_alert_feedbacks"
	// AnnotationInverseTable is the table name for the OncallAnnotation entity.
	// It exists in this package in order to avoid circular dependency with the "oncallannotation" package.
	AnnotationInverseTable = "oncall_annotations"
	// AnnotationColumn is the table column denoting the annotation relation/edge.
	AnnotationColumn = "annotation_id"
)

// Columns holds all SQL columns for oncallannotationalertfeedback fields.
var Columns = []string{
	FieldID,
	FieldAnnotationID,
	FieldActionable,
	FieldDocumentationAvailable,
	FieldAccuracy,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Accuracy defines the type for the "accuracy" enum field.
type Accuracy string

// Accuracy values.
const (
	AccuracyYes     Accuracy = "yes"
	AccuracyNo      Accuracy = "no"
	AccuracyUnknown Accuracy = "unknown"
)

func (a Accuracy) String() string {
	return string(a)
}

// AccuracyValidator is a validator for the "accuracy" field enum values. It is called by the builders before save.
func AccuracyValidator(a Accuracy) error {
	switch a {
	case AccuracyYes, AccuracyNo, AccuracyUnknown:
		return nil
	default:
		return fmt.Errorf("oncallannotationalertfeedback: invalid enum value for accuracy field: %q", a)
	}
}

// OrderOption defines the ordering options for the OncallAnnotationAlertFeedback queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAnnotationID orders the results by the annotation_id field.
func ByAnnotationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAnnotationID, opts...).ToFunc()
}

// ByActionable orders the results by the actionable field.
func ByActionable(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActionable, opts...).ToFunc()
}

// ByDocumentationAvailable orders the results by the documentation_available field.
func ByDocumentationAvailable(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDocumentationAvailable, opts...).ToFunc()
}

// ByAccuracy orders the results by the accuracy field.
func ByAccuracy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccuracy, opts...).ToFunc()
}

// ByAnnotationField orders the results by annotation field.
func ByAnnotationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAnnotationStep(), sql.OrderByField(field, opts...))
	}
}
func newAnnotationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AnnotationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, AnnotationTable, AnnotationColumn),
	)
}
