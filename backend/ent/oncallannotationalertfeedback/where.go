// Code generated by ent, DO NOT EDIT.

package oncallannotationalertfeedback

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.OncallAnnotationAlertFeedback {
	return predicate.OncallAnnotationAlertFeedback(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.OncallAnnotationAlertFeedback {
	return predicate.OncallAnnotationAlertFeedback(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.OncallAnnotationAlertFeedback {
	return predicate.OncallAnnotationAlertFeedback(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.OncallAnnotationAlertFeedback {
	return predicate.OncallAnnotationAlertFeedback(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.OncallAnnotationAlertFeedback {
	return predicate.OncallAnnotationAlertFeedback(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.OncallAnnotationAlertFeedback {
	return predicate.OncallAnnotationAlertFeedback(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.OncallAnnotationAlertFeedback {
	return predicate.OncallAnnotationAlertFeedback(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.OncallAnnotationAlertFeedback {
	return predicate.OncallAnnotationAlertFeedback(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.OncallAnnotationAlertFeedback {
	return predicate.OncallAnnotationAlertFeedback(sql.FieldLTE(FieldID, id))
}

// AnnotationID applies equality check predicate on the "annotation_id" field. It's identical to AnnotationIDEQ.
func AnnotationID(v uuid.UUID) predicate.OncallAnnotationAlertFeedback {
	return predicate.OncallAnnotationAlertFeedback(sql.FieldEQ(FieldAnnotationID, v))
}

// Actionable applies equality check predicate on the "actionable" field. It's identical to ActionableEQ.
func Actionable(v bool) predicate.OncallAnnotationAlertFeedback {
	return predicate.OncallAnnotationAlertFeedback(sql.FieldEQ(FieldActionable, v))
}

// DocumentationAvailable applies equality check predicate on the "documentation_available" field. It's identical to DocumentationAvailableEQ.
func DocumentationAvailable(v bool) predicate.OncallAnnotationAlertFeedback {
	return predicate.OncallAnnotationAlertFeedback(sql.FieldEQ(FieldDocumentationAvailable, v))
}

// AnnotationIDEQ applies the EQ predicate on the "annotation_id" field.
func AnnotationIDEQ(v uuid.UUID) predicate.OncallAnnotationAlertFeedback {
	return predicate.OncallAnnotationAlertFeedback(sql.FieldEQ(FieldAnnotationID, v))
}

// AnnotationIDNEQ applies the NEQ predicate on the "annotation_id" field.
func AnnotationIDNEQ(v uuid.UUID) predicate.OncallAnnotationAlertFeedback {
	return predicate.OncallAnnotationAlertFeedback(sql.FieldNEQ(FieldAnnotationID, v))
}

// AnnotationIDIn applies the In predicate on the "annotation_id" field.
func AnnotationIDIn(vs ...uuid.UUID) predicate.OncallAnnotationAlertFeedback {
	return predicate.OncallAnnotationAlertFeedback(sql.FieldIn(FieldAnnotationID, vs...))
}

// AnnotationIDNotIn applies the NotIn predicate on the "annotation_id" field.
func AnnotationIDNotIn(vs ...uuid.UUID) predicate.OncallAnnotationAlertFeedback {
	return predicate.OncallAnnotationAlertFeedback(sql.FieldNotIn(FieldAnnotationID, vs...))
}

// ActionableEQ applies the EQ predicate on the "actionable" field.
func ActionableEQ(v bool) predicate.OncallAnnotationAlertFeedback {
	return predicate.OncallAnnotationAlertFeedback(sql.FieldEQ(FieldActionable, v))
}

// ActionableNEQ applies the NEQ predicate on the "actionable" field.
func ActionableNEQ(v bool) predicate.OncallAnnotationAlertFeedback {
	return predicate.OncallAnnotationAlertFeedback(sql.FieldNEQ(FieldActionable, v))
}

// DocumentationAvailableEQ applies the EQ predicate on the "documentation_available" field.
func DocumentationAvailableEQ(v bool) predicate.OncallAnnotationAlertFeedback {
	return predicate.OncallAnnotationAlertFeedback(sql.FieldEQ(FieldDocumentationAvailable, v))
}

// DocumentationAvailableNEQ applies the NEQ predicate on the "documentation_available" field.
func DocumentationAvailableNEQ(v bool) predicate.OncallAnnotationAlertFeedback {
	return predicate.OncallAnnotationAlertFeedback(sql.FieldNEQ(FieldDocumentationAvailable, v))
}

// AccuracyEQ applies the EQ predicate on the "accuracy" field.
func AccuracyEQ(v Accuracy) predicate.OncallAnnotationAlertFeedback {
	return predicate.OncallAnnotationAlertFeedback(sql.FieldEQ(FieldAccuracy, v))
}

// AccuracyNEQ applies the NEQ predicate on the "accuracy" field.
func AccuracyNEQ(v Accuracy) predicate.OncallAnnotationAlertFeedback {
	return predicate.OncallAnnotationAlertFeedback(sql.FieldNEQ(FieldAccuracy, v))
}

// AccuracyIn applies the In predicate on the "accuracy" field.
func AccuracyIn(vs ...Accuracy) predicate.OncallAnnotationAlertFeedback {
	return predicate.OncallAnnotationAlertFeedback(sql.FieldIn(FieldAccuracy, vs...))
}

// AccuracyNotIn applies the NotIn predicate on the "accuracy" field.
func AccuracyNotIn(vs ...Accuracy) predicate.OncallAnnotationAlertFeedback {
	return predicate.OncallAnnotationAlertFeedback(sql.FieldNotIn(FieldAccuracy, vs...))
}

// HasAnnotation applies the HasEdge predicate on the "annotation" edge.
func HasAnnotation() predicate.OncallAnnotationAlertFeedback {
	return predicate.OncallAnnotationAlertFeedback(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, AnnotationTable, AnnotationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAnnotationWith applies the HasEdge predicate on the "annotation" edge with a given conditions (other predicates).
func HasAnnotationWith(preds ...predicate.OncallAnnotation) predicate.OncallAnnotationAlertFeedback {
	return predicate.OncallAnnotationAlertFeedback(func(s *sql.Selector) {
		step := newAnnotationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OncallAnnotationAlertFeedback) predicate.OncallAnnotationAlertFeedback {
	return predicate.OncallAnnotationAlertFeedback(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OncallAnnotationAlertFeedback) predicate.OncallAnnotationAlertFeedback {
	return predicate.OncallAnnotationAlertFeedback(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OncallAnnotationAlertFeedback) predicate.OncallAnnotationAlertFeedback {
	return predicate.OncallAnnotationAlertFeedback(sql.NotPredicates(p))
}
