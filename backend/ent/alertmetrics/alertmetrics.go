// Code generated by ent, DO NOT EDIT.

package alertmetrics

import (
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the alertmetrics type in the database.
	Label = "alert_metrics"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAlertID holds the string denoting the alert_id field in the database.
	FieldAlertID = "alert_id"
	// EdgeAlert holds the string denoting the alert edge name in mutations.
	EdgeAlert = "alert"
	// Table holds the table name of the alertmetrics in the database.
	Table = "alert_metrics"
	// AlertTable is the table that holds the alert relation/edge.
	AlertTable = "alert_metrics"
	// AlertInverseTable is the table name for the Alert entity.
	// It exists in this package in order to avoid circular dependency with the "alert" package.
	AlertInverseTable = "alerts"
	// AlertColumn is the table column denoting the alert relation/edge.
	AlertColumn = "alert_id"
)

// Columns holds all SQL columns for alertmetrics fields.
var Columns = []string{
	FieldID,
	FieldAlertID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/rezible/rezible/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the AlertMetrics queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAlertID orders the results by the alert_id field.
func ByAlertID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAlertID, opts...).ToFunc()
}

// ByAlertField orders the results by alert field.
func ByAlertField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAlertStep(), sql.OrderByField(field, opts...))
	}
}
func newAlertStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AlertInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, AlertTable, AlertColumn),
	)
}
