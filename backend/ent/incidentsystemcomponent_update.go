// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/incident"
	"github.com/rezible/rezible/ent/incidentsystemcomponent"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/systemcomponent"
)

// IncidentSystemComponentUpdate is the builder for updating IncidentSystemComponent entities.
type IncidentSystemComponentUpdate struct {
	config
	hooks     []Hook
	mutation  *IncidentSystemComponentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the IncidentSystemComponentUpdate builder.
func (iscu *IncidentSystemComponentUpdate) Where(ps ...predicate.IncidentSystemComponent) *IncidentSystemComponentUpdate {
	iscu.mutation.Where(ps...)
	return iscu
}

// SetIncidentID sets the "incident_id" field.
func (iscu *IncidentSystemComponentUpdate) SetIncidentID(u uuid.UUID) *IncidentSystemComponentUpdate {
	iscu.mutation.SetIncidentID(u)
	return iscu
}

// SetNillableIncidentID sets the "incident_id" field if the given value is not nil.
func (iscu *IncidentSystemComponentUpdate) SetNillableIncidentID(u *uuid.UUID) *IncidentSystemComponentUpdate {
	if u != nil {
		iscu.SetIncidentID(*u)
	}
	return iscu
}

// SetSystemComponentID sets the "system_component_id" field.
func (iscu *IncidentSystemComponentUpdate) SetSystemComponentID(u uuid.UUID) *IncidentSystemComponentUpdate {
	iscu.mutation.SetSystemComponentID(u)
	return iscu
}

// SetNillableSystemComponentID sets the "system_component_id" field if the given value is not nil.
func (iscu *IncidentSystemComponentUpdate) SetNillableSystemComponentID(u *uuid.UUID) *IncidentSystemComponentUpdate {
	if u != nil {
		iscu.SetSystemComponentID(*u)
	}
	return iscu
}

// SetRole sets the "role" field.
func (iscu *IncidentSystemComponentUpdate) SetRole(i incidentsystemcomponent.Role) *IncidentSystemComponentUpdate {
	iscu.mutation.SetRole(i)
	return iscu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (iscu *IncidentSystemComponentUpdate) SetNillableRole(i *incidentsystemcomponent.Role) *IncidentSystemComponentUpdate {
	if i != nil {
		iscu.SetRole(*i)
	}
	return iscu
}

// SetCreatedAt sets the "created_at" field.
func (iscu *IncidentSystemComponentUpdate) SetCreatedAt(t time.Time) *IncidentSystemComponentUpdate {
	iscu.mutation.SetCreatedAt(t)
	return iscu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (iscu *IncidentSystemComponentUpdate) SetNillableCreatedAt(t *time.Time) *IncidentSystemComponentUpdate {
	if t != nil {
		iscu.SetCreatedAt(*t)
	}
	return iscu
}

// SetIncident sets the "incident" edge to the Incident entity.
func (iscu *IncidentSystemComponentUpdate) SetIncident(i *Incident) *IncidentSystemComponentUpdate {
	return iscu.SetIncidentID(i.ID)
}

// SetSystemComponent sets the "system_component" edge to the SystemComponent entity.
func (iscu *IncidentSystemComponentUpdate) SetSystemComponent(s *SystemComponent) *IncidentSystemComponentUpdate {
	return iscu.SetSystemComponentID(s.ID)
}

// Mutation returns the IncidentSystemComponentMutation object of the builder.
func (iscu *IncidentSystemComponentUpdate) Mutation() *IncidentSystemComponentMutation {
	return iscu.mutation
}

// ClearIncident clears the "incident" edge to the Incident entity.
func (iscu *IncidentSystemComponentUpdate) ClearIncident() *IncidentSystemComponentUpdate {
	iscu.mutation.ClearIncident()
	return iscu
}

// ClearSystemComponent clears the "system_component" edge to the SystemComponent entity.
func (iscu *IncidentSystemComponentUpdate) ClearSystemComponent() *IncidentSystemComponentUpdate {
	iscu.mutation.ClearSystemComponent()
	return iscu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iscu *IncidentSystemComponentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iscu.sqlSave, iscu.mutation, iscu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iscu *IncidentSystemComponentUpdate) SaveX(ctx context.Context) int {
	affected, err := iscu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iscu *IncidentSystemComponentUpdate) Exec(ctx context.Context) error {
	_, err := iscu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iscu *IncidentSystemComponentUpdate) ExecX(ctx context.Context) {
	if err := iscu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iscu *IncidentSystemComponentUpdate) check() error {
	if v, ok := iscu.mutation.Role(); ok {
		if err := incidentsystemcomponent.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "IncidentSystemComponent.role": %w`, err)}
		}
	}
	if iscu.mutation.IncidentCleared() && len(iscu.mutation.IncidentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IncidentSystemComponent.incident"`)
	}
	if iscu.mutation.SystemComponentCleared() && len(iscu.mutation.SystemComponentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IncidentSystemComponent.system_component"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (iscu *IncidentSystemComponentUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *IncidentSystemComponentUpdate {
	iscu.modifiers = append(iscu.modifiers, modifiers...)
	return iscu
}

func (iscu *IncidentSystemComponentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iscu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(incidentsystemcomponent.Table, incidentsystemcomponent.Columns, sqlgraph.NewFieldSpec(incidentsystemcomponent.FieldID, field.TypeUUID))
	if ps := iscu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iscu.mutation.Role(); ok {
		_spec.SetField(incidentsystemcomponent.FieldRole, field.TypeEnum, value)
	}
	if value, ok := iscu.mutation.CreatedAt(); ok {
		_spec.SetField(incidentsystemcomponent.FieldCreatedAt, field.TypeTime, value)
	}
	if iscu.mutation.IncidentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentsystemcomponent.IncidentTable,
			Columns: []string{incidentsystemcomponent.IncidentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iscu.mutation.IncidentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentsystemcomponent.IncidentTable,
			Columns: []string{incidentsystemcomponent.IncidentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iscu.mutation.SystemComponentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentsystemcomponent.SystemComponentTable,
			Columns: []string{incidentsystemcomponent.SystemComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iscu.mutation.SystemComponentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentsystemcomponent.SystemComponentTable,
			Columns: []string{incidentsystemcomponent.SystemComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(iscu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, iscu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{incidentsystemcomponent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iscu.mutation.done = true
	return n, nil
}

// IncidentSystemComponentUpdateOne is the builder for updating a single IncidentSystemComponent entity.
type IncidentSystemComponentUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *IncidentSystemComponentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetIncidentID sets the "incident_id" field.
func (iscuo *IncidentSystemComponentUpdateOne) SetIncidentID(u uuid.UUID) *IncidentSystemComponentUpdateOne {
	iscuo.mutation.SetIncidentID(u)
	return iscuo
}

// SetNillableIncidentID sets the "incident_id" field if the given value is not nil.
func (iscuo *IncidentSystemComponentUpdateOne) SetNillableIncidentID(u *uuid.UUID) *IncidentSystemComponentUpdateOne {
	if u != nil {
		iscuo.SetIncidentID(*u)
	}
	return iscuo
}

// SetSystemComponentID sets the "system_component_id" field.
func (iscuo *IncidentSystemComponentUpdateOne) SetSystemComponentID(u uuid.UUID) *IncidentSystemComponentUpdateOne {
	iscuo.mutation.SetSystemComponentID(u)
	return iscuo
}

// SetNillableSystemComponentID sets the "system_component_id" field if the given value is not nil.
func (iscuo *IncidentSystemComponentUpdateOne) SetNillableSystemComponentID(u *uuid.UUID) *IncidentSystemComponentUpdateOne {
	if u != nil {
		iscuo.SetSystemComponentID(*u)
	}
	return iscuo
}

// SetRole sets the "role" field.
func (iscuo *IncidentSystemComponentUpdateOne) SetRole(i incidentsystemcomponent.Role) *IncidentSystemComponentUpdateOne {
	iscuo.mutation.SetRole(i)
	return iscuo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (iscuo *IncidentSystemComponentUpdateOne) SetNillableRole(i *incidentsystemcomponent.Role) *IncidentSystemComponentUpdateOne {
	if i != nil {
		iscuo.SetRole(*i)
	}
	return iscuo
}

// SetCreatedAt sets the "created_at" field.
func (iscuo *IncidentSystemComponentUpdateOne) SetCreatedAt(t time.Time) *IncidentSystemComponentUpdateOne {
	iscuo.mutation.SetCreatedAt(t)
	return iscuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (iscuo *IncidentSystemComponentUpdateOne) SetNillableCreatedAt(t *time.Time) *IncidentSystemComponentUpdateOne {
	if t != nil {
		iscuo.SetCreatedAt(*t)
	}
	return iscuo
}

// SetIncident sets the "incident" edge to the Incident entity.
func (iscuo *IncidentSystemComponentUpdateOne) SetIncident(i *Incident) *IncidentSystemComponentUpdateOne {
	return iscuo.SetIncidentID(i.ID)
}

// SetSystemComponent sets the "system_component" edge to the SystemComponent entity.
func (iscuo *IncidentSystemComponentUpdateOne) SetSystemComponent(s *SystemComponent) *IncidentSystemComponentUpdateOne {
	return iscuo.SetSystemComponentID(s.ID)
}

// Mutation returns the IncidentSystemComponentMutation object of the builder.
func (iscuo *IncidentSystemComponentUpdateOne) Mutation() *IncidentSystemComponentMutation {
	return iscuo.mutation
}

// ClearIncident clears the "incident" edge to the Incident entity.
func (iscuo *IncidentSystemComponentUpdateOne) ClearIncident() *IncidentSystemComponentUpdateOne {
	iscuo.mutation.ClearIncident()
	return iscuo
}

// ClearSystemComponent clears the "system_component" edge to the SystemComponent entity.
func (iscuo *IncidentSystemComponentUpdateOne) ClearSystemComponent() *IncidentSystemComponentUpdateOne {
	iscuo.mutation.ClearSystemComponent()
	return iscuo
}

// Where appends a list predicates to the IncidentSystemComponentUpdate builder.
func (iscuo *IncidentSystemComponentUpdateOne) Where(ps ...predicate.IncidentSystemComponent) *IncidentSystemComponentUpdateOne {
	iscuo.mutation.Where(ps...)
	return iscuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iscuo *IncidentSystemComponentUpdateOne) Select(field string, fields ...string) *IncidentSystemComponentUpdateOne {
	iscuo.fields = append([]string{field}, fields...)
	return iscuo
}

// Save executes the query and returns the updated IncidentSystemComponent entity.
func (iscuo *IncidentSystemComponentUpdateOne) Save(ctx context.Context) (*IncidentSystemComponent, error) {
	return withHooks(ctx, iscuo.sqlSave, iscuo.mutation, iscuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iscuo *IncidentSystemComponentUpdateOne) SaveX(ctx context.Context) *IncidentSystemComponent {
	node, err := iscuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iscuo *IncidentSystemComponentUpdateOne) Exec(ctx context.Context) error {
	_, err := iscuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iscuo *IncidentSystemComponentUpdateOne) ExecX(ctx context.Context) {
	if err := iscuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iscuo *IncidentSystemComponentUpdateOne) check() error {
	if v, ok := iscuo.mutation.Role(); ok {
		if err := incidentsystemcomponent.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "IncidentSystemComponent.role": %w`, err)}
		}
	}
	if iscuo.mutation.IncidentCleared() && len(iscuo.mutation.IncidentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IncidentSystemComponent.incident"`)
	}
	if iscuo.mutation.SystemComponentCleared() && len(iscuo.mutation.SystemComponentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IncidentSystemComponent.system_component"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (iscuo *IncidentSystemComponentUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *IncidentSystemComponentUpdateOne {
	iscuo.modifiers = append(iscuo.modifiers, modifiers...)
	return iscuo
}

func (iscuo *IncidentSystemComponentUpdateOne) sqlSave(ctx context.Context) (_node *IncidentSystemComponent, err error) {
	if err := iscuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(incidentsystemcomponent.Table, incidentsystemcomponent.Columns, sqlgraph.NewFieldSpec(incidentsystemcomponent.FieldID, field.TypeUUID))
	id, ok := iscuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "IncidentSystemComponent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iscuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, incidentsystemcomponent.FieldID)
		for _, f := range fields {
			if !incidentsystemcomponent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != incidentsystemcomponent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iscuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iscuo.mutation.Role(); ok {
		_spec.SetField(incidentsystemcomponent.FieldRole, field.TypeEnum, value)
	}
	if value, ok := iscuo.mutation.CreatedAt(); ok {
		_spec.SetField(incidentsystemcomponent.FieldCreatedAt, field.TypeTime, value)
	}
	if iscuo.mutation.IncidentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentsystemcomponent.IncidentTable,
			Columns: []string{incidentsystemcomponent.IncidentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iscuo.mutation.IncidentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentsystemcomponent.IncidentTable,
			Columns: []string{incidentsystemcomponent.IncidentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iscuo.mutation.SystemComponentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentsystemcomponent.SystemComponentTable,
			Columns: []string{incidentsystemcomponent.SystemComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iscuo.mutation.SystemComponentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentsystemcomponent.SystemComponentTable,
			Columns: []string{incidentsystemcomponent.SystemComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(iscuo.modifiers...)
	_node = &IncidentSystemComponent{config: iscuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iscuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{incidentsystemcomponent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iscuo.mutation.done = true
	return _node, nil
}
