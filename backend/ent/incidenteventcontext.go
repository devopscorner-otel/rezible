// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/incidentevent"
	"github.com/rezible/rezible/ent/incidenteventcontext"
)

// IncidentEventContext is the model entity for the IncidentEventContext schema.
type IncidentEventContext struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// SystemState holds the value of the "system_state" field.
	SystemState string `json:"system_state,omitempty"`
	// DecisionOptions holds the value of the "decision_options" field.
	DecisionOptions []string `json:"decision_options,omitempty"`
	// DecisionRationale holds the value of the "decision_rationale" field.
	DecisionRationale string `json:"decision_rationale,omitempty"`
	// InvolvedPersonnel holds the value of the "involved_personnel" field.
	InvolvedPersonnel []string `json:"involved_personnel,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IncidentEventContextQuery when eager-loading is set.
	Edges                  IncidentEventContextEdges `json:"edges"`
	incident_event_context *uuid.UUID
	selectValues           sql.SelectValues
}

// IncidentEventContextEdges holds the relations/edges for other nodes in the graph.
type IncidentEventContextEdges struct {
	// Event holds the value of the event edge.
	Event *IncidentEvent `json:"event,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IncidentEventContextEdges) EventOrErr() (*IncidentEvent, error) {
	if e.Event != nil {
		return e.Event, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: incidentevent.Label}
	}
	return nil, &NotLoadedError{edge: "event"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IncidentEventContext) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case incidenteventcontext.FieldDecisionOptions, incidenteventcontext.FieldInvolvedPersonnel:
			values[i] = new([]byte)
		case incidenteventcontext.FieldSystemState, incidenteventcontext.FieldDecisionRationale:
			values[i] = new(sql.NullString)
		case incidenteventcontext.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case incidenteventcontext.FieldID:
			values[i] = new(uuid.UUID)
		case incidenteventcontext.ForeignKeys[0]: // incident_event_context
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IncidentEventContext fields.
func (iec *IncidentEventContext) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case incidenteventcontext.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				iec.ID = *value
			}
		case incidenteventcontext.FieldSystemState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field system_state", values[i])
			} else if value.Valid {
				iec.SystemState = value.String
			}
		case incidenteventcontext.FieldDecisionOptions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field decision_options", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &iec.DecisionOptions); err != nil {
					return fmt.Errorf("unmarshal field decision_options: %w", err)
				}
			}
		case incidenteventcontext.FieldDecisionRationale:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field decision_rationale", values[i])
			} else if value.Valid {
				iec.DecisionRationale = value.String
			}
		case incidenteventcontext.FieldInvolvedPersonnel:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field involved_personnel", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &iec.InvolvedPersonnel); err != nil {
					return fmt.Errorf("unmarshal field involved_personnel: %w", err)
				}
			}
		case incidenteventcontext.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				iec.CreatedAt = value.Time
			}
		case incidenteventcontext.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field incident_event_context", values[i])
			} else if value.Valid {
				iec.incident_event_context = new(uuid.UUID)
				*iec.incident_event_context = *value.S.(*uuid.UUID)
			}
		default:
			iec.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the IncidentEventContext.
// This includes values selected through modifiers, order, etc.
func (iec *IncidentEventContext) Value(name string) (ent.Value, error) {
	return iec.selectValues.Get(name)
}

// QueryEvent queries the "event" edge of the IncidentEventContext entity.
func (iec *IncidentEventContext) QueryEvent() *IncidentEventQuery {
	return NewIncidentEventContextClient(iec.config).QueryEvent(iec)
}

// Update returns a builder for updating this IncidentEventContext.
// Note that you need to call IncidentEventContext.Unwrap() before calling this method if this IncidentEventContext
// was returned from a transaction, and the transaction was committed or rolled back.
func (iec *IncidentEventContext) Update() *IncidentEventContextUpdateOne {
	return NewIncidentEventContextClient(iec.config).UpdateOne(iec)
}

// Unwrap unwraps the IncidentEventContext entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (iec *IncidentEventContext) Unwrap() *IncidentEventContext {
	_tx, ok := iec.config.driver.(*txDriver)
	if !ok {
		panic("ent: IncidentEventContext is not a transactional entity")
	}
	iec.config.driver = _tx.drv
	return iec
}

// String implements the fmt.Stringer.
func (iec *IncidentEventContext) String() string {
	var builder strings.Builder
	builder.WriteString("IncidentEventContext(")
	builder.WriteString(fmt.Sprintf("id=%v, ", iec.ID))
	builder.WriteString("system_state=")
	builder.WriteString(iec.SystemState)
	builder.WriteString(", ")
	builder.WriteString("decision_options=")
	builder.WriteString(fmt.Sprintf("%v", iec.DecisionOptions))
	builder.WriteString(", ")
	builder.WriteString("decision_rationale=")
	builder.WriteString(iec.DecisionRationale)
	builder.WriteString(", ")
	builder.WriteString("involved_personnel=")
	builder.WriteString(fmt.Sprintf("%v", iec.InvolvedPersonnel))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(iec.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// IncidentEventContexts is a parsable slice of IncidentEventContext.
type IncidentEventContexts []*IncidentEventContext
