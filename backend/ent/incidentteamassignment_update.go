// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/twohundreds/rezible/ent/incident"
	"github.com/twohundreds/rezible/ent/incidentteamassignment"
	"github.com/twohundreds/rezible/ent/predicate"
	"github.com/twohundreds/rezible/ent/team"
)

// IncidentTeamAssignmentUpdate is the builder for updating IncidentTeamAssignment entities.
type IncidentTeamAssignmentUpdate struct {
	config
	hooks     []Hook
	mutation  *IncidentTeamAssignmentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the IncidentTeamAssignmentUpdate builder.
func (itau *IncidentTeamAssignmentUpdate) Where(ps ...predicate.IncidentTeamAssignment) *IncidentTeamAssignmentUpdate {
	itau.mutation.Where(ps...)
	return itau
}

// SetIncidentID sets the "incident_id" field.
func (itau *IncidentTeamAssignmentUpdate) SetIncidentID(u uuid.UUID) *IncidentTeamAssignmentUpdate {
	itau.mutation.SetIncidentID(u)
	return itau
}

// SetNillableIncidentID sets the "incident_id" field if the given value is not nil.
func (itau *IncidentTeamAssignmentUpdate) SetNillableIncidentID(u *uuid.UUID) *IncidentTeamAssignmentUpdate {
	if u != nil {
		itau.SetIncidentID(*u)
	}
	return itau
}

// SetTeamID sets the "team_id" field.
func (itau *IncidentTeamAssignmentUpdate) SetTeamID(u uuid.UUID) *IncidentTeamAssignmentUpdate {
	itau.mutation.SetTeamID(u)
	return itau
}

// SetNillableTeamID sets the "team_id" field if the given value is not nil.
func (itau *IncidentTeamAssignmentUpdate) SetNillableTeamID(u *uuid.UUID) *IncidentTeamAssignmentUpdate {
	if u != nil {
		itau.SetTeamID(*u)
	}
	return itau
}

// SetIncident sets the "incident" edge to the Incident entity.
func (itau *IncidentTeamAssignmentUpdate) SetIncident(i *Incident) *IncidentTeamAssignmentUpdate {
	return itau.SetIncidentID(i.ID)
}

// SetTeam sets the "team" edge to the Team entity.
func (itau *IncidentTeamAssignmentUpdate) SetTeam(t *Team) *IncidentTeamAssignmentUpdate {
	return itau.SetTeamID(t.ID)
}

// Mutation returns the IncidentTeamAssignmentMutation object of the builder.
func (itau *IncidentTeamAssignmentUpdate) Mutation() *IncidentTeamAssignmentMutation {
	return itau.mutation
}

// ClearIncident clears the "incident" edge to the Incident entity.
func (itau *IncidentTeamAssignmentUpdate) ClearIncident() *IncidentTeamAssignmentUpdate {
	itau.mutation.ClearIncident()
	return itau
}

// ClearTeam clears the "team" edge to the Team entity.
func (itau *IncidentTeamAssignmentUpdate) ClearTeam() *IncidentTeamAssignmentUpdate {
	itau.mutation.ClearTeam()
	return itau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (itau *IncidentTeamAssignmentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, itau.sqlSave, itau.mutation, itau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (itau *IncidentTeamAssignmentUpdate) SaveX(ctx context.Context) int {
	affected, err := itau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (itau *IncidentTeamAssignmentUpdate) Exec(ctx context.Context) error {
	_, err := itau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (itau *IncidentTeamAssignmentUpdate) ExecX(ctx context.Context) {
	if err := itau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (itau *IncidentTeamAssignmentUpdate) check() error {
	if itau.mutation.IncidentCleared() && len(itau.mutation.IncidentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IncidentTeamAssignment.incident"`)
	}
	if itau.mutation.TeamCleared() && len(itau.mutation.TeamIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IncidentTeamAssignment.team"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (itau *IncidentTeamAssignmentUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *IncidentTeamAssignmentUpdate {
	itau.modifiers = append(itau.modifiers, modifiers...)
	return itau
}

func (itau *IncidentTeamAssignmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := itau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(incidentteamassignment.Table, incidentteamassignment.Columns, sqlgraph.NewFieldSpec(incidentteamassignment.FieldID, field.TypeInt))
	if ps := itau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if itau.mutation.IncidentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentteamassignment.IncidentTable,
			Columns: []string{incidentteamassignment.IncidentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := itau.mutation.IncidentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentteamassignment.IncidentTable,
			Columns: []string{incidentteamassignment.IncidentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if itau.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentteamassignment.TeamTable,
			Columns: []string{incidentteamassignment.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := itau.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentteamassignment.TeamTable,
			Columns: []string{incidentteamassignment.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(itau.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, itau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{incidentteamassignment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	itau.mutation.done = true
	return n, nil
}

// IncidentTeamAssignmentUpdateOne is the builder for updating a single IncidentTeamAssignment entity.
type IncidentTeamAssignmentUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *IncidentTeamAssignmentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetIncidentID sets the "incident_id" field.
func (itauo *IncidentTeamAssignmentUpdateOne) SetIncidentID(u uuid.UUID) *IncidentTeamAssignmentUpdateOne {
	itauo.mutation.SetIncidentID(u)
	return itauo
}

// SetNillableIncidentID sets the "incident_id" field if the given value is not nil.
func (itauo *IncidentTeamAssignmentUpdateOne) SetNillableIncidentID(u *uuid.UUID) *IncidentTeamAssignmentUpdateOne {
	if u != nil {
		itauo.SetIncidentID(*u)
	}
	return itauo
}

// SetTeamID sets the "team_id" field.
func (itauo *IncidentTeamAssignmentUpdateOne) SetTeamID(u uuid.UUID) *IncidentTeamAssignmentUpdateOne {
	itauo.mutation.SetTeamID(u)
	return itauo
}

// SetNillableTeamID sets the "team_id" field if the given value is not nil.
func (itauo *IncidentTeamAssignmentUpdateOne) SetNillableTeamID(u *uuid.UUID) *IncidentTeamAssignmentUpdateOne {
	if u != nil {
		itauo.SetTeamID(*u)
	}
	return itauo
}

// SetIncident sets the "incident" edge to the Incident entity.
func (itauo *IncidentTeamAssignmentUpdateOne) SetIncident(i *Incident) *IncidentTeamAssignmentUpdateOne {
	return itauo.SetIncidentID(i.ID)
}

// SetTeam sets the "team" edge to the Team entity.
func (itauo *IncidentTeamAssignmentUpdateOne) SetTeam(t *Team) *IncidentTeamAssignmentUpdateOne {
	return itauo.SetTeamID(t.ID)
}

// Mutation returns the IncidentTeamAssignmentMutation object of the builder.
func (itauo *IncidentTeamAssignmentUpdateOne) Mutation() *IncidentTeamAssignmentMutation {
	return itauo.mutation
}

// ClearIncident clears the "incident" edge to the Incident entity.
func (itauo *IncidentTeamAssignmentUpdateOne) ClearIncident() *IncidentTeamAssignmentUpdateOne {
	itauo.mutation.ClearIncident()
	return itauo
}

// ClearTeam clears the "team" edge to the Team entity.
func (itauo *IncidentTeamAssignmentUpdateOne) ClearTeam() *IncidentTeamAssignmentUpdateOne {
	itauo.mutation.ClearTeam()
	return itauo
}

// Where appends a list predicates to the IncidentTeamAssignmentUpdate builder.
func (itauo *IncidentTeamAssignmentUpdateOne) Where(ps ...predicate.IncidentTeamAssignment) *IncidentTeamAssignmentUpdateOne {
	itauo.mutation.Where(ps...)
	return itauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (itauo *IncidentTeamAssignmentUpdateOne) Select(field string, fields ...string) *IncidentTeamAssignmentUpdateOne {
	itauo.fields = append([]string{field}, fields...)
	return itauo
}

// Save executes the query and returns the updated IncidentTeamAssignment entity.
func (itauo *IncidentTeamAssignmentUpdateOne) Save(ctx context.Context) (*IncidentTeamAssignment, error) {
	return withHooks(ctx, itauo.sqlSave, itauo.mutation, itauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (itauo *IncidentTeamAssignmentUpdateOne) SaveX(ctx context.Context) *IncidentTeamAssignment {
	node, err := itauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (itauo *IncidentTeamAssignmentUpdateOne) Exec(ctx context.Context) error {
	_, err := itauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (itauo *IncidentTeamAssignmentUpdateOne) ExecX(ctx context.Context) {
	if err := itauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (itauo *IncidentTeamAssignmentUpdateOne) check() error {
	if itauo.mutation.IncidentCleared() && len(itauo.mutation.IncidentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IncidentTeamAssignment.incident"`)
	}
	if itauo.mutation.TeamCleared() && len(itauo.mutation.TeamIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IncidentTeamAssignment.team"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (itauo *IncidentTeamAssignmentUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *IncidentTeamAssignmentUpdateOne {
	itauo.modifiers = append(itauo.modifiers, modifiers...)
	return itauo
}

func (itauo *IncidentTeamAssignmentUpdateOne) sqlSave(ctx context.Context) (_node *IncidentTeamAssignment, err error) {
	if err := itauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(incidentteamassignment.Table, incidentteamassignment.Columns, sqlgraph.NewFieldSpec(incidentteamassignment.FieldID, field.TypeInt))
	id, ok := itauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "IncidentTeamAssignment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := itauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, incidentteamassignment.FieldID)
		for _, f := range fields {
			if !incidentteamassignment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != incidentteamassignment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := itauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if itauo.mutation.IncidentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentteamassignment.IncidentTable,
			Columns: []string{incidentteamassignment.IncidentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := itauo.mutation.IncidentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentteamassignment.IncidentTable,
			Columns: []string{incidentteamassignment.IncidentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if itauo.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentteamassignment.TeamTable,
			Columns: []string{incidentteamassignment.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := itauo.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentteamassignment.TeamTable,
			Columns: []string{incidentteamassignment.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(itauo.modifiers...)
	_node = &IncidentTeamAssignment{config: itauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, itauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{incidentteamassignment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	itauo.mutation.done = true
	return _node, nil
}
