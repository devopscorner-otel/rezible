// Code generated by ent, DO NOT EDIT.

package incidentlink

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the incidentlink type in the database.
	Label = "incident_link"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIncidentID holds the string denoting the incident_id field in the database.
	FieldIncidentID = "incident_id"
	// FieldLinkedIncidentID holds the string denoting the linked_incident_id field in the database.
	FieldLinkedIncidentID = "linked_incident_id"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldLinkType holds the string denoting the link_type field in the database.
	FieldLinkType = "link_type"
	// EdgeIncident holds the string denoting the incident edge name in mutations.
	EdgeIncident = "incident"
	// EdgeLinkedIncident holds the string denoting the linked_incident edge name in mutations.
	EdgeLinkedIncident = "linked_incident"
	// EdgeResourceImpact holds the string denoting the resource_impact edge name in mutations.
	EdgeResourceImpact = "resource_impact"
	// Table holds the table name of the incidentlink in the database.
	Table = "incident_links"
	// IncidentTable is the table that holds the incident relation/edge.
	IncidentTable = "incident_links"
	// IncidentInverseTable is the table name for the Incident entity.
	// It exists in this package in order to avoid circular dependency with the "incident" package.
	IncidentInverseTable = "incidents"
	// IncidentColumn is the table column denoting the incident relation/edge.
	IncidentColumn = "incident_id"
	// LinkedIncidentTable is the table that holds the linked_incident relation/edge.
	LinkedIncidentTable = "incident_links"
	// LinkedIncidentInverseTable is the table name for the Incident entity.
	// It exists in this package in order to avoid circular dependency with the "incident" package.
	LinkedIncidentInverseTable = "incidents"
	// LinkedIncidentColumn is the table column denoting the linked_incident relation/edge.
	LinkedIncidentColumn = "linked_incident_id"
	// ResourceImpactTable is the table that holds the resource_impact relation/edge.
	ResourceImpactTable = "incident_links"
	// ResourceImpactInverseTable is the table name for the IncidentResourceImpact entity.
	// It exists in this package in order to avoid circular dependency with the "incidentresourceimpact" package.
	ResourceImpactInverseTable = "incident_resource_impacts"
	// ResourceImpactColumn is the table column denoting the resource_impact relation/edge.
	ResourceImpactColumn = "incident_link_resource_impact"
)

// Columns holds all SQL columns for incidentlink fields.
var Columns = []string{
	FieldID,
	FieldIncidentID,
	FieldLinkedIncidentID,
	FieldDescription,
	FieldLinkType,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "incident_links"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"incident_link_resource_impact",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// LinkType defines the type for the "link_type" enum field.
type LinkType string

// LinkType values.
const (
	LinkTypeParent LinkType = "parent"
	LinkTypeChild  LinkType = "child"
	LinkTypeImpact LinkType = "impact"
)

func (lt LinkType) String() string {
	return string(lt)
}

// LinkTypeValidator is a validator for the "link_type" field enum values. It is called by the builders before save.
func LinkTypeValidator(lt LinkType) error {
	switch lt {
	case LinkTypeParent, LinkTypeChild, LinkTypeImpact:
		return nil
	default:
		return fmt.Errorf("incidentlink: invalid enum value for link_type field: %q", lt)
	}
}

// OrderOption defines the ordering options for the IncidentLink queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIncidentID orders the results by the incident_id field.
func ByIncidentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIncidentID, opts...).ToFunc()
}

// ByLinkedIncidentID orders the results by the linked_incident_id field.
func ByLinkedIncidentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLinkedIncidentID, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByLinkType orders the results by the link_type field.
func ByLinkType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLinkType, opts...).ToFunc()
}

// ByIncidentField orders the results by incident field.
func ByIncidentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIncidentStep(), sql.OrderByField(field, opts...))
	}
}

// ByLinkedIncidentField orders the results by linked_incident field.
func ByLinkedIncidentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLinkedIncidentStep(), sql.OrderByField(field, opts...))
	}
}

// ByResourceImpactField orders the results by resource_impact field.
func ByResourceImpactField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newResourceImpactStep(), sql.OrderByField(field, opts...))
	}
}
func newIncidentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IncidentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, IncidentTable, IncidentColumn),
	)
}
func newLinkedIncidentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LinkedIncidentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, LinkedIncidentTable, LinkedIncidentColumn),
	)
}
func newResourceImpactStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ResourceImpactInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ResourceImpactTable, ResourceImpactColumn),
	)
}
