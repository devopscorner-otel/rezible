// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/systemanalysis"
	"github.com/rezible/rezible/ent/systemanalysiscomponent"
	"github.com/rezible/rezible/ent/systemcomponent"
	"github.com/rezible/rezible/ent/tenant"
)

// SystemAnalysisComponentCreate is the builder for creating a SystemAnalysisComponent entity.
type SystemAnalysisComponentCreate struct {
	config
	mutation *SystemAnalysisComponentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (sacc *SystemAnalysisComponentCreate) SetTenantID(i int) *SystemAnalysisComponentCreate {
	sacc.mutation.SetTenantID(i)
	return sacc
}

// SetAnalysisID sets the "analysis_id" field.
func (sacc *SystemAnalysisComponentCreate) SetAnalysisID(u uuid.UUID) *SystemAnalysisComponentCreate {
	sacc.mutation.SetAnalysisID(u)
	return sacc
}

// SetComponentID sets the "component_id" field.
func (sacc *SystemAnalysisComponentCreate) SetComponentID(u uuid.UUID) *SystemAnalysisComponentCreate {
	sacc.mutation.SetComponentID(u)
	return sacc
}

// SetDescription sets the "description" field.
func (sacc *SystemAnalysisComponentCreate) SetDescription(s string) *SystemAnalysisComponentCreate {
	sacc.mutation.SetDescription(s)
	return sacc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sacc *SystemAnalysisComponentCreate) SetNillableDescription(s *string) *SystemAnalysisComponentCreate {
	if s != nil {
		sacc.SetDescription(*s)
	}
	return sacc
}

// SetPosX sets the "pos_x" field.
func (sacc *SystemAnalysisComponentCreate) SetPosX(f float64) *SystemAnalysisComponentCreate {
	sacc.mutation.SetPosX(f)
	return sacc
}

// SetNillablePosX sets the "pos_x" field if the given value is not nil.
func (sacc *SystemAnalysisComponentCreate) SetNillablePosX(f *float64) *SystemAnalysisComponentCreate {
	if f != nil {
		sacc.SetPosX(*f)
	}
	return sacc
}

// SetPosY sets the "pos_y" field.
func (sacc *SystemAnalysisComponentCreate) SetPosY(f float64) *SystemAnalysisComponentCreate {
	sacc.mutation.SetPosY(f)
	return sacc
}

// SetNillablePosY sets the "pos_y" field if the given value is not nil.
func (sacc *SystemAnalysisComponentCreate) SetNillablePosY(f *float64) *SystemAnalysisComponentCreate {
	if f != nil {
		sacc.SetPosY(*f)
	}
	return sacc
}

// SetCreatedAt sets the "created_at" field.
func (sacc *SystemAnalysisComponentCreate) SetCreatedAt(t time.Time) *SystemAnalysisComponentCreate {
	sacc.mutation.SetCreatedAt(t)
	return sacc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sacc *SystemAnalysisComponentCreate) SetNillableCreatedAt(t *time.Time) *SystemAnalysisComponentCreate {
	if t != nil {
		sacc.SetCreatedAt(*t)
	}
	return sacc
}

// SetID sets the "id" field.
func (sacc *SystemAnalysisComponentCreate) SetID(u uuid.UUID) *SystemAnalysisComponentCreate {
	sacc.mutation.SetID(u)
	return sacc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sacc *SystemAnalysisComponentCreate) SetNillableID(u *uuid.UUID) *SystemAnalysisComponentCreate {
	if u != nil {
		sacc.SetID(*u)
	}
	return sacc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (sacc *SystemAnalysisComponentCreate) SetTenant(t *Tenant) *SystemAnalysisComponentCreate {
	return sacc.SetTenantID(t.ID)
}

// SetAnalysis sets the "analysis" edge to the SystemAnalysis entity.
func (sacc *SystemAnalysisComponentCreate) SetAnalysis(s *SystemAnalysis) *SystemAnalysisComponentCreate {
	return sacc.SetAnalysisID(s.ID)
}

// SetComponent sets the "component" edge to the SystemComponent entity.
func (sacc *SystemAnalysisComponentCreate) SetComponent(s *SystemComponent) *SystemAnalysisComponentCreate {
	return sacc.SetComponentID(s.ID)
}

// Mutation returns the SystemAnalysisComponentMutation object of the builder.
func (sacc *SystemAnalysisComponentCreate) Mutation() *SystemAnalysisComponentMutation {
	return sacc.mutation
}

// Save creates the SystemAnalysisComponent in the database.
func (sacc *SystemAnalysisComponentCreate) Save(ctx context.Context) (*SystemAnalysisComponent, error) {
	if err := sacc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, sacc.sqlSave, sacc.mutation, sacc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sacc *SystemAnalysisComponentCreate) SaveX(ctx context.Context) *SystemAnalysisComponent {
	v, err := sacc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sacc *SystemAnalysisComponentCreate) Exec(ctx context.Context) error {
	_, err := sacc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sacc *SystemAnalysisComponentCreate) ExecX(ctx context.Context) {
	if err := sacc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sacc *SystemAnalysisComponentCreate) defaults() error {
	if _, ok := sacc.mutation.PosX(); !ok {
		v := systemanalysiscomponent.DefaultPosX
		sacc.mutation.SetPosX(v)
	}
	if _, ok := sacc.mutation.PosY(); !ok {
		v := systemanalysiscomponent.DefaultPosY
		sacc.mutation.SetPosY(v)
	}
	if _, ok := sacc.mutation.CreatedAt(); !ok {
		if systemanalysiscomponent.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized systemanalysiscomponent.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := systemanalysiscomponent.DefaultCreatedAt()
		sacc.mutation.SetCreatedAt(v)
	}
	if _, ok := sacc.mutation.ID(); !ok {
		if systemanalysiscomponent.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized systemanalysiscomponent.DefaultID (forgotten import ent/runtime?)")
		}
		v := systemanalysiscomponent.DefaultID()
		sacc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sacc *SystemAnalysisComponentCreate) check() error {
	if _, ok := sacc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "SystemAnalysisComponent.tenant_id"`)}
	}
	if _, ok := sacc.mutation.AnalysisID(); !ok {
		return &ValidationError{Name: "analysis_id", err: errors.New(`ent: missing required field "SystemAnalysisComponent.analysis_id"`)}
	}
	if _, ok := sacc.mutation.ComponentID(); !ok {
		return &ValidationError{Name: "component_id", err: errors.New(`ent: missing required field "SystemAnalysisComponent.component_id"`)}
	}
	if _, ok := sacc.mutation.PosX(); !ok {
		return &ValidationError{Name: "pos_x", err: errors.New(`ent: missing required field "SystemAnalysisComponent.pos_x"`)}
	}
	if _, ok := sacc.mutation.PosY(); !ok {
		return &ValidationError{Name: "pos_y", err: errors.New(`ent: missing required field "SystemAnalysisComponent.pos_y"`)}
	}
	if _, ok := sacc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SystemAnalysisComponent.created_at"`)}
	}
	if len(sacc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "SystemAnalysisComponent.tenant"`)}
	}
	if len(sacc.mutation.AnalysisIDs()) == 0 {
		return &ValidationError{Name: "analysis", err: errors.New(`ent: missing required edge "SystemAnalysisComponent.analysis"`)}
	}
	if len(sacc.mutation.ComponentIDs()) == 0 {
		return &ValidationError{Name: "component", err: errors.New(`ent: missing required edge "SystemAnalysisComponent.component"`)}
	}
	return nil
}

func (sacc *SystemAnalysisComponentCreate) sqlSave(ctx context.Context) (*SystemAnalysisComponent, error) {
	if err := sacc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sacc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sacc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	sacc.mutation.id = &_node.ID
	sacc.mutation.done = true
	return _node, nil
}

func (sacc *SystemAnalysisComponentCreate) createSpec() (*SystemAnalysisComponent, *sqlgraph.CreateSpec) {
	var (
		_node = &SystemAnalysisComponent{config: sacc.config}
		_spec = sqlgraph.NewCreateSpec(systemanalysiscomponent.Table, sqlgraph.NewFieldSpec(systemanalysiscomponent.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = sacc.conflict
	if id, ok := sacc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sacc.mutation.Description(); ok {
		_spec.SetField(systemanalysiscomponent.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := sacc.mutation.PosX(); ok {
		_spec.SetField(systemanalysiscomponent.FieldPosX, field.TypeFloat64, value)
		_node.PosX = value
	}
	if value, ok := sacc.mutation.PosY(); ok {
		_spec.SetField(systemanalysiscomponent.FieldPosY, field.TypeFloat64, value)
		_node.PosY = value
	}
	if value, ok := sacc.mutation.CreatedAt(); ok {
		_spec.SetField(systemanalysiscomponent.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := sacc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemanalysiscomponent.TenantTable,
			Columns: []string{systemanalysiscomponent.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sacc.mutation.AnalysisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemanalysiscomponent.AnalysisTable,
			Columns: []string{systemanalysiscomponent.AnalysisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemanalysis.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AnalysisID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sacc.mutation.ComponentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemanalysiscomponent.ComponentTable,
			Columns: []string{systemanalysiscomponent.ComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ComponentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SystemAnalysisComponent.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SystemAnalysisComponentUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (sacc *SystemAnalysisComponentCreate) OnConflict(opts ...sql.ConflictOption) *SystemAnalysisComponentUpsertOne {
	sacc.conflict = opts
	return &SystemAnalysisComponentUpsertOne{
		create: sacc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SystemAnalysisComponent.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sacc *SystemAnalysisComponentCreate) OnConflictColumns(columns ...string) *SystemAnalysisComponentUpsertOne {
	sacc.conflict = append(sacc.conflict, sql.ConflictColumns(columns...))
	return &SystemAnalysisComponentUpsertOne{
		create: sacc,
	}
}

type (
	// SystemAnalysisComponentUpsertOne is the builder for "upsert"-ing
	//  one SystemAnalysisComponent node.
	SystemAnalysisComponentUpsertOne struct {
		create *SystemAnalysisComponentCreate
	}

	// SystemAnalysisComponentUpsert is the "OnConflict" setter.
	SystemAnalysisComponentUpsert struct {
		*sql.UpdateSet
	}
)

// SetAnalysisID sets the "analysis_id" field.
func (u *SystemAnalysisComponentUpsert) SetAnalysisID(v uuid.UUID) *SystemAnalysisComponentUpsert {
	u.Set(systemanalysiscomponent.FieldAnalysisID, v)
	return u
}

// UpdateAnalysisID sets the "analysis_id" field to the value that was provided on create.
func (u *SystemAnalysisComponentUpsert) UpdateAnalysisID() *SystemAnalysisComponentUpsert {
	u.SetExcluded(systemanalysiscomponent.FieldAnalysisID)
	return u
}

// SetComponentID sets the "component_id" field.
func (u *SystemAnalysisComponentUpsert) SetComponentID(v uuid.UUID) *SystemAnalysisComponentUpsert {
	u.Set(systemanalysiscomponent.FieldComponentID, v)
	return u
}

// UpdateComponentID sets the "component_id" field to the value that was provided on create.
func (u *SystemAnalysisComponentUpsert) UpdateComponentID() *SystemAnalysisComponentUpsert {
	u.SetExcluded(systemanalysiscomponent.FieldComponentID)
	return u
}

// SetDescription sets the "description" field.
func (u *SystemAnalysisComponentUpsert) SetDescription(v string) *SystemAnalysisComponentUpsert {
	u.Set(systemanalysiscomponent.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SystemAnalysisComponentUpsert) UpdateDescription() *SystemAnalysisComponentUpsert {
	u.SetExcluded(systemanalysiscomponent.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *SystemAnalysisComponentUpsert) ClearDescription() *SystemAnalysisComponentUpsert {
	u.SetNull(systemanalysiscomponent.FieldDescription)
	return u
}

// SetPosX sets the "pos_x" field.
func (u *SystemAnalysisComponentUpsert) SetPosX(v float64) *SystemAnalysisComponentUpsert {
	u.Set(systemanalysiscomponent.FieldPosX, v)
	return u
}

// UpdatePosX sets the "pos_x" field to the value that was provided on create.
func (u *SystemAnalysisComponentUpsert) UpdatePosX() *SystemAnalysisComponentUpsert {
	u.SetExcluded(systemanalysiscomponent.FieldPosX)
	return u
}

// AddPosX adds v to the "pos_x" field.
func (u *SystemAnalysisComponentUpsert) AddPosX(v float64) *SystemAnalysisComponentUpsert {
	u.Add(systemanalysiscomponent.FieldPosX, v)
	return u
}

// SetPosY sets the "pos_y" field.
func (u *SystemAnalysisComponentUpsert) SetPosY(v float64) *SystemAnalysisComponentUpsert {
	u.Set(systemanalysiscomponent.FieldPosY, v)
	return u
}

// UpdatePosY sets the "pos_y" field to the value that was provided on create.
func (u *SystemAnalysisComponentUpsert) UpdatePosY() *SystemAnalysisComponentUpsert {
	u.SetExcluded(systemanalysiscomponent.FieldPosY)
	return u
}

// AddPosY adds v to the "pos_y" field.
func (u *SystemAnalysisComponentUpsert) AddPosY(v float64) *SystemAnalysisComponentUpsert {
	u.Add(systemanalysiscomponent.FieldPosY, v)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SystemAnalysisComponentUpsert) SetCreatedAt(v time.Time) *SystemAnalysisComponentUpsert {
	u.Set(systemanalysiscomponent.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SystemAnalysisComponentUpsert) UpdateCreatedAt() *SystemAnalysisComponentUpsert {
	u.SetExcluded(systemanalysiscomponent.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SystemAnalysisComponent.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(systemanalysiscomponent.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SystemAnalysisComponentUpsertOne) UpdateNewValues() *SystemAnalysisComponentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(systemanalysiscomponent.FieldID)
		}
		if _, exists := u.create.mutation.TenantID(); exists {
			s.SetIgnore(systemanalysiscomponent.FieldTenantID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SystemAnalysisComponent.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SystemAnalysisComponentUpsertOne) Ignore() *SystemAnalysisComponentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SystemAnalysisComponentUpsertOne) DoNothing() *SystemAnalysisComponentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SystemAnalysisComponentCreate.OnConflict
// documentation for more info.
func (u *SystemAnalysisComponentUpsertOne) Update(set func(*SystemAnalysisComponentUpsert)) *SystemAnalysisComponentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SystemAnalysisComponentUpsert{UpdateSet: update})
	}))
	return u
}

// SetAnalysisID sets the "analysis_id" field.
func (u *SystemAnalysisComponentUpsertOne) SetAnalysisID(v uuid.UUID) *SystemAnalysisComponentUpsertOne {
	return u.Update(func(s *SystemAnalysisComponentUpsert) {
		s.SetAnalysisID(v)
	})
}

// UpdateAnalysisID sets the "analysis_id" field to the value that was provided on create.
func (u *SystemAnalysisComponentUpsertOne) UpdateAnalysisID() *SystemAnalysisComponentUpsertOne {
	return u.Update(func(s *SystemAnalysisComponentUpsert) {
		s.UpdateAnalysisID()
	})
}

// SetComponentID sets the "component_id" field.
func (u *SystemAnalysisComponentUpsertOne) SetComponentID(v uuid.UUID) *SystemAnalysisComponentUpsertOne {
	return u.Update(func(s *SystemAnalysisComponentUpsert) {
		s.SetComponentID(v)
	})
}

// UpdateComponentID sets the "component_id" field to the value that was provided on create.
func (u *SystemAnalysisComponentUpsertOne) UpdateComponentID() *SystemAnalysisComponentUpsertOne {
	return u.Update(func(s *SystemAnalysisComponentUpsert) {
		s.UpdateComponentID()
	})
}

// SetDescription sets the "description" field.
func (u *SystemAnalysisComponentUpsertOne) SetDescription(v string) *SystemAnalysisComponentUpsertOne {
	return u.Update(func(s *SystemAnalysisComponentUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SystemAnalysisComponentUpsertOne) UpdateDescription() *SystemAnalysisComponentUpsertOne {
	return u.Update(func(s *SystemAnalysisComponentUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *SystemAnalysisComponentUpsertOne) ClearDescription() *SystemAnalysisComponentUpsertOne {
	return u.Update(func(s *SystemAnalysisComponentUpsert) {
		s.ClearDescription()
	})
}

// SetPosX sets the "pos_x" field.
func (u *SystemAnalysisComponentUpsertOne) SetPosX(v float64) *SystemAnalysisComponentUpsertOne {
	return u.Update(func(s *SystemAnalysisComponentUpsert) {
		s.SetPosX(v)
	})
}

// AddPosX adds v to the "pos_x" field.
func (u *SystemAnalysisComponentUpsertOne) AddPosX(v float64) *SystemAnalysisComponentUpsertOne {
	return u.Update(func(s *SystemAnalysisComponentUpsert) {
		s.AddPosX(v)
	})
}

// UpdatePosX sets the "pos_x" field to the value that was provided on create.
func (u *SystemAnalysisComponentUpsertOne) UpdatePosX() *SystemAnalysisComponentUpsertOne {
	return u.Update(func(s *SystemAnalysisComponentUpsert) {
		s.UpdatePosX()
	})
}

// SetPosY sets the "pos_y" field.
func (u *SystemAnalysisComponentUpsertOne) SetPosY(v float64) *SystemAnalysisComponentUpsertOne {
	return u.Update(func(s *SystemAnalysisComponentUpsert) {
		s.SetPosY(v)
	})
}

// AddPosY adds v to the "pos_y" field.
func (u *SystemAnalysisComponentUpsertOne) AddPosY(v float64) *SystemAnalysisComponentUpsertOne {
	return u.Update(func(s *SystemAnalysisComponentUpsert) {
		s.AddPosY(v)
	})
}

// UpdatePosY sets the "pos_y" field to the value that was provided on create.
func (u *SystemAnalysisComponentUpsertOne) UpdatePosY() *SystemAnalysisComponentUpsertOne {
	return u.Update(func(s *SystemAnalysisComponentUpsert) {
		s.UpdatePosY()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SystemAnalysisComponentUpsertOne) SetCreatedAt(v time.Time) *SystemAnalysisComponentUpsertOne {
	return u.Update(func(s *SystemAnalysisComponentUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SystemAnalysisComponentUpsertOne) UpdateCreatedAt() *SystemAnalysisComponentUpsertOne {
	return u.Update(func(s *SystemAnalysisComponentUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *SystemAnalysisComponentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SystemAnalysisComponentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SystemAnalysisComponentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SystemAnalysisComponentUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: SystemAnalysisComponentUpsertOne.ID is not supported by MySQL driver. Use SystemAnalysisComponentUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SystemAnalysisComponentUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SystemAnalysisComponentCreateBulk is the builder for creating many SystemAnalysisComponent entities in bulk.
type SystemAnalysisComponentCreateBulk struct {
	config
	err      error
	builders []*SystemAnalysisComponentCreate
	conflict []sql.ConflictOption
}

// Save creates the SystemAnalysisComponent entities in the database.
func (saccb *SystemAnalysisComponentCreateBulk) Save(ctx context.Context) ([]*SystemAnalysisComponent, error) {
	if saccb.err != nil {
		return nil, saccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(saccb.builders))
	nodes := make([]*SystemAnalysisComponent, len(saccb.builders))
	mutators := make([]Mutator, len(saccb.builders))
	for i := range saccb.builders {
		func(i int, root context.Context) {
			builder := saccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SystemAnalysisComponentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, saccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = saccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, saccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, saccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (saccb *SystemAnalysisComponentCreateBulk) SaveX(ctx context.Context) []*SystemAnalysisComponent {
	v, err := saccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (saccb *SystemAnalysisComponentCreateBulk) Exec(ctx context.Context) error {
	_, err := saccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (saccb *SystemAnalysisComponentCreateBulk) ExecX(ctx context.Context) {
	if err := saccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SystemAnalysisComponent.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SystemAnalysisComponentUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (saccb *SystemAnalysisComponentCreateBulk) OnConflict(opts ...sql.ConflictOption) *SystemAnalysisComponentUpsertBulk {
	saccb.conflict = opts
	return &SystemAnalysisComponentUpsertBulk{
		create: saccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SystemAnalysisComponent.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (saccb *SystemAnalysisComponentCreateBulk) OnConflictColumns(columns ...string) *SystemAnalysisComponentUpsertBulk {
	saccb.conflict = append(saccb.conflict, sql.ConflictColumns(columns...))
	return &SystemAnalysisComponentUpsertBulk{
		create: saccb,
	}
}

// SystemAnalysisComponentUpsertBulk is the builder for "upsert"-ing
// a bulk of SystemAnalysisComponent nodes.
type SystemAnalysisComponentUpsertBulk struct {
	create *SystemAnalysisComponentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SystemAnalysisComponent.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(systemanalysiscomponent.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SystemAnalysisComponentUpsertBulk) UpdateNewValues() *SystemAnalysisComponentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(systemanalysiscomponent.FieldID)
			}
			if _, exists := b.mutation.TenantID(); exists {
				s.SetIgnore(systemanalysiscomponent.FieldTenantID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SystemAnalysisComponent.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SystemAnalysisComponentUpsertBulk) Ignore() *SystemAnalysisComponentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SystemAnalysisComponentUpsertBulk) DoNothing() *SystemAnalysisComponentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SystemAnalysisComponentCreateBulk.OnConflict
// documentation for more info.
func (u *SystemAnalysisComponentUpsertBulk) Update(set func(*SystemAnalysisComponentUpsert)) *SystemAnalysisComponentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SystemAnalysisComponentUpsert{UpdateSet: update})
	}))
	return u
}

// SetAnalysisID sets the "analysis_id" field.
func (u *SystemAnalysisComponentUpsertBulk) SetAnalysisID(v uuid.UUID) *SystemAnalysisComponentUpsertBulk {
	return u.Update(func(s *SystemAnalysisComponentUpsert) {
		s.SetAnalysisID(v)
	})
}

// UpdateAnalysisID sets the "analysis_id" field to the value that was provided on create.
func (u *SystemAnalysisComponentUpsertBulk) UpdateAnalysisID() *SystemAnalysisComponentUpsertBulk {
	return u.Update(func(s *SystemAnalysisComponentUpsert) {
		s.UpdateAnalysisID()
	})
}

// SetComponentID sets the "component_id" field.
func (u *SystemAnalysisComponentUpsertBulk) SetComponentID(v uuid.UUID) *SystemAnalysisComponentUpsertBulk {
	return u.Update(func(s *SystemAnalysisComponentUpsert) {
		s.SetComponentID(v)
	})
}

// UpdateComponentID sets the "component_id" field to the value that was provided on create.
func (u *SystemAnalysisComponentUpsertBulk) UpdateComponentID() *SystemAnalysisComponentUpsertBulk {
	return u.Update(func(s *SystemAnalysisComponentUpsert) {
		s.UpdateComponentID()
	})
}

// SetDescription sets the "description" field.
func (u *SystemAnalysisComponentUpsertBulk) SetDescription(v string) *SystemAnalysisComponentUpsertBulk {
	return u.Update(func(s *SystemAnalysisComponentUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SystemAnalysisComponentUpsertBulk) UpdateDescription() *SystemAnalysisComponentUpsertBulk {
	return u.Update(func(s *SystemAnalysisComponentUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *SystemAnalysisComponentUpsertBulk) ClearDescription() *SystemAnalysisComponentUpsertBulk {
	return u.Update(func(s *SystemAnalysisComponentUpsert) {
		s.ClearDescription()
	})
}

// SetPosX sets the "pos_x" field.
func (u *SystemAnalysisComponentUpsertBulk) SetPosX(v float64) *SystemAnalysisComponentUpsertBulk {
	return u.Update(func(s *SystemAnalysisComponentUpsert) {
		s.SetPosX(v)
	})
}

// AddPosX adds v to the "pos_x" field.
func (u *SystemAnalysisComponentUpsertBulk) AddPosX(v float64) *SystemAnalysisComponentUpsertBulk {
	return u.Update(func(s *SystemAnalysisComponentUpsert) {
		s.AddPosX(v)
	})
}

// UpdatePosX sets the "pos_x" field to the value that was provided on create.
func (u *SystemAnalysisComponentUpsertBulk) UpdatePosX() *SystemAnalysisComponentUpsertBulk {
	return u.Update(func(s *SystemAnalysisComponentUpsert) {
		s.UpdatePosX()
	})
}

// SetPosY sets the "pos_y" field.
func (u *SystemAnalysisComponentUpsertBulk) SetPosY(v float64) *SystemAnalysisComponentUpsertBulk {
	return u.Update(func(s *SystemAnalysisComponentUpsert) {
		s.SetPosY(v)
	})
}

// AddPosY adds v to the "pos_y" field.
func (u *SystemAnalysisComponentUpsertBulk) AddPosY(v float64) *SystemAnalysisComponentUpsertBulk {
	return u.Update(func(s *SystemAnalysisComponentUpsert) {
		s.AddPosY(v)
	})
}

// UpdatePosY sets the "pos_y" field to the value that was provided on create.
func (u *SystemAnalysisComponentUpsertBulk) UpdatePosY() *SystemAnalysisComponentUpsertBulk {
	return u.Update(func(s *SystemAnalysisComponentUpsert) {
		s.UpdatePosY()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SystemAnalysisComponentUpsertBulk) SetCreatedAt(v time.Time) *SystemAnalysisComponentUpsertBulk {
	return u.Update(func(s *SystemAnalysisComponentUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SystemAnalysisComponentUpsertBulk) UpdateCreatedAt() *SystemAnalysisComponentUpsertBulk {
	return u.Update(func(s *SystemAnalysisComponentUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *SystemAnalysisComponentUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SystemAnalysisComponentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SystemAnalysisComponentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SystemAnalysisComponentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
