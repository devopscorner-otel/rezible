// Code generated by ent, DO NOT EDIT.

package incidentdebriefquestion

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/twohundreds/rezible/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.IncidentDebriefQuestion {
	return predicate.IncidentDebriefQuestion(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.IncidentDebriefQuestion {
	return predicate.IncidentDebriefQuestion(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.IncidentDebriefQuestion {
	return predicate.IncidentDebriefQuestion(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.IncidentDebriefQuestion {
	return predicate.IncidentDebriefQuestion(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.IncidentDebriefQuestion {
	return predicate.IncidentDebriefQuestion(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.IncidentDebriefQuestion {
	return predicate.IncidentDebriefQuestion(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.IncidentDebriefQuestion {
	return predicate.IncidentDebriefQuestion(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.IncidentDebriefQuestion {
	return predicate.IncidentDebriefQuestion(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.IncidentDebriefQuestion {
	return predicate.IncidentDebriefQuestion(sql.FieldLTE(FieldID, id))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.IncidentDebriefQuestion {
	return predicate.IncidentDebriefQuestion(sql.FieldEQ(FieldContent, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.IncidentDebriefQuestion {
	return predicate.IncidentDebriefQuestion(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.IncidentDebriefQuestion {
	return predicate.IncidentDebriefQuestion(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.IncidentDebriefQuestion {
	return predicate.IncidentDebriefQuestion(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.IncidentDebriefQuestion {
	return predicate.IncidentDebriefQuestion(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.IncidentDebriefQuestion {
	return predicate.IncidentDebriefQuestion(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.IncidentDebriefQuestion {
	return predicate.IncidentDebriefQuestion(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.IncidentDebriefQuestion {
	return predicate.IncidentDebriefQuestion(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.IncidentDebriefQuestion {
	return predicate.IncidentDebriefQuestion(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.IncidentDebriefQuestion {
	return predicate.IncidentDebriefQuestion(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.IncidentDebriefQuestion {
	return predicate.IncidentDebriefQuestion(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.IncidentDebriefQuestion {
	return predicate.IncidentDebriefQuestion(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.IncidentDebriefQuestion {
	return predicate.IncidentDebriefQuestion(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.IncidentDebriefQuestion {
	return predicate.IncidentDebriefQuestion(sql.FieldContainsFold(FieldContent, v))
}

// HasMessages applies the HasEdge predicate on the "messages" edge.
func HasMessages() predicate.IncidentDebriefQuestion {
	return predicate.IncidentDebriefQuestion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, MessagesTable, MessagesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMessagesWith applies the HasEdge predicate on the "messages" edge with a given conditions (other predicates).
func HasMessagesWith(preds ...predicate.IncidentDebriefMessage) predicate.IncidentDebriefQuestion {
	return predicate.IncidentDebriefQuestion(func(s *sql.Selector) {
		step := newMessagesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIncidentFields applies the HasEdge predicate on the "incident_fields" edge.
func HasIncidentFields() predicate.IncidentDebriefQuestion {
	return predicate.IncidentDebriefQuestion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, IncidentFieldsTable, IncidentFieldsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIncidentFieldsWith applies the HasEdge predicate on the "incident_fields" edge with a given conditions (other predicates).
func HasIncidentFieldsWith(preds ...predicate.IncidentField) predicate.IncidentDebriefQuestion {
	return predicate.IncidentDebriefQuestion(func(s *sql.Selector) {
		step := newIncidentFieldsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIncidentRoles applies the HasEdge predicate on the "incident_roles" edge.
func HasIncidentRoles() predicate.IncidentDebriefQuestion {
	return predicate.IncidentDebriefQuestion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, IncidentRolesTable, IncidentRolesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIncidentRolesWith applies the HasEdge predicate on the "incident_roles" edge with a given conditions (other predicates).
func HasIncidentRolesWith(preds ...predicate.IncidentRole) predicate.IncidentDebriefQuestion {
	return predicate.IncidentDebriefQuestion(func(s *sql.Selector) {
		step := newIncidentRolesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIncidentSeverities applies the HasEdge predicate on the "incident_severities" edge.
func HasIncidentSeverities() predicate.IncidentDebriefQuestion {
	return predicate.IncidentDebriefQuestion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, IncidentSeveritiesTable, IncidentSeveritiesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIncidentSeveritiesWith applies the HasEdge predicate on the "incident_severities" edge with a given conditions (other predicates).
func HasIncidentSeveritiesWith(preds ...predicate.IncidentSeverity) predicate.IncidentDebriefQuestion {
	return predicate.IncidentDebriefQuestion(func(s *sql.Selector) {
		step := newIncidentSeveritiesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIncidentTags applies the HasEdge predicate on the "incident_tags" edge.
func HasIncidentTags() predicate.IncidentDebriefQuestion {
	return predicate.IncidentDebriefQuestion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, IncidentTagsTable, IncidentTagsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIncidentTagsWith applies the HasEdge predicate on the "incident_tags" edge with a given conditions (other predicates).
func HasIncidentTagsWith(preds ...predicate.IncidentTag) predicate.IncidentDebriefQuestion {
	return predicate.IncidentDebriefQuestion(func(s *sql.Selector) {
		step := newIncidentTagsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIncidentTypes applies the HasEdge predicate on the "incident_types" edge.
func HasIncidentTypes() predicate.IncidentDebriefQuestion {
	return predicate.IncidentDebriefQuestion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, IncidentTypesTable, IncidentTypesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIncidentTypesWith applies the HasEdge predicate on the "incident_types" edge with a given conditions (other predicates).
func HasIncidentTypesWith(preds ...predicate.IncidentType) predicate.IncidentDebriefQuestion {
	return predicate.IncidentDebriefQuestion(func(s *sql.Selector) {
		step := newIncidentTypesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.IncidentDebriefQuestion) predicate.IncidentDebriefQuestion {
	return predicate.IncidentDebriefQuestion(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.IncidentDebriefQuestion) predicate.IncidentDebriefQuestion {
	return predicate.IncidentDebriefQuestion(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.IncidentDebriefQuestion) predicate.IncidentDebriefQuestion {
	return predicate.IncidentDebriefQuestion(sql.NotPredicates(p))
}
