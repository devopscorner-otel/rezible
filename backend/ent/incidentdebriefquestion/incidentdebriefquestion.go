// Code generated by ent, DO NOT EDIT.

package incidentdebriefquestion

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the incidentdebriefquestion type in the database.
	Label = "incident_debrief_question"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// EdgeMessages holds the string denoting the messages edge name in mutations.
	EdgeMessages = "messages"
	// EdgeIncidentFields holds the string denoting the incident_fields edge name in mutations.
	EdgeIncidentFields = "incident_fields"
	// EdgeIncidentRoles holds the string denoting the incident_roles edge name in mutations.
	EdgeIncidentRoles = "incident_roles"
	// EdgeIncidentSeverities holds the string denoting the incident_severities edge name in mutations.
	EdgeIncidentSeverities = "incident_severities"
	// EdgeIncidentTags holds the string denoting the incident_tags edge name in mutations.
	EdgeIncidentTags = "incident_tags"
	// EdgeIncidentTypes holds the string denoting the incident_types edge name in mutations.
	EdgeIncidentTypes = "incident_types"
	// Table holds the table name of the incidentdebriefquestion in the database.
	Table = "incident_debrief_questions"
	// MessagesTable is the table that holds the messages relation/edge.
	MessagesTable = "incident_debrief_messages"
	// MessagesInverseTable is the table name for the IncidentDebriefMessage entity.
	// It exists in this package in order to avoid circular dependency with the "incidentdebriefmessage" package.
	MessagesInverseTable = "incident_debrief_messages"
	// MessagesColumn is the table column denoting the messages relation/edge.
	MessagesColumn = "question_id"
	// IncidentFieldsTable is the table that holds the incident_fields relation/edge. The primary key declared below.
	IncidentFieldsTable = "incident_debrief_question_incident_fields"
	// IncidentFieldsInverseTable is the table name for the IncidentField entity.
	// It exists in this package in order to avoid circular dependency with the "incidentfield" package.
	IncidentFieldsInverseTable = "incident_fields"
	// IncidentRolesTable is the table that holds the incident_roles relation/edge. The primary key declared below.
	IncidentRolesTable = "incident_debrief_question_incident_roles"
	// IncidentRolesInverseTable is the table name for the IncidentRole entity.
	// It exists in this package in order to avoid circular dependency with the "incidentrole" package.
	IncidentRolesInverseTable = "incident_roles"
	// IncidentSeveritiesTable is the table that holds the incident_severities relation/edge. The primary key declared below.
	IncidentSeveritiesTable = "incident_debrief_question_incident_severities"
	// IncidentSeveritiesInverseTable is the table name for the IncidentSeverity entity.
	// It exists in this package in order to avoid circular dependency with the "incidentseverity" package.
	IncidentSeveritiesInverseTable = "incident_severities"
	// IncidentTagsTable is the table that holds the incident_tags relation/edge. The primary key declared below.
	IncidentTagsTable = "incident_debrief_question_incident_tags"
	// IncidentTagsInverseTable is the table name for the IncidentTag entity.
	// It exists in this package in order to avoid circular dependency with the "incidenttag" package.
	IncidentTagsInverseTable = "incident_tags"
	// IncidentTypesTable is the table that holds the incident_types relation/edge. The primary key declared below.
	IncidentTypesTable = "incident_debrief_question_incident_types"
	// IncidentTypesInverseTable is the table name for the IncidentType entity.
	// It exists in this package in order to avoid circular dependency with the "incidenttype" package.
	IncidentTypesInverseTable = "incident_types"
)

// Columns holds all SQL columns for incidentdebriefquestion fields.
var Columns = []string{
	FieldID,
	FieldContent,
}

var (
	// IncidentFieldsPrimaryKey and IncidentFieldsColumn2 are the table columns denoting the
	// primary key for the incident_fields relation (M2M).
	IncidentFieldsPrimaryKey = []string{"incident_debrief_question_id", "incident_field_id"}
	// IncidentRolesPrimaryKey and IncidentRolesColumn2 are the table columns denoting the
	// primary key for the incident_roles relation (M2M).
	IncidentRolesPrimaryKey = []string{"incident_debrief_question_id", "incident_role_id"}
	// IncidentSeveritiesPrimaryKey and IncidentSeveritiesColumn2 are the table columns denoting the
	// primary key for the incident_severities relation (M2M).
	IncidentSeveritiesPrimaryKey = []string{"incident_debrief_question_id", "incident_severity_id"}
	// IncidentTagsPrimaryKey and IncidentTagsColumn2 are the table columns denoting the
	// primary key for the incident_tags relation (M2M).
	IncidentTagsPrimaryKey = []string{"incident_debrief_question_id", "incident_tag_id"}
	// IncidentTypesPrimaryKey and IncidentTypesColumn2 are the table columns denoting the
	// primary key for the incident_types relation (M2M).
	IncidentTypesPrimaryKey = []string{"incident_debrief_question_id", "incident_type_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the IncidentDebriefQuestion queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByContent orders the results by the content field.
func ByContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContent, opts...).ToFunc()
}

// ByMessagesCount orders the results by messages count.
func ByMessagesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMessagesStep(), opts...)
	}
}

// ByMessages orders the results by messages terms.
func ByMessages(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMessagesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByIncidentFieldsCount orders the results by incident_fields count.
func ByIncidentFieldsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIncidentFieldsStep(), opts...)
	}
}

// ByIncidentFields orders the results by incident_fields terms.
func ByIncidentFields(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIncidentFieldsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByIncidentRolesCount orders the results by incident_roles count.
func ByIncidentRolesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIncidentRolesStep(), opts...)
	}
}

// ByIncidentRoles orders the results by incident_roles terms.
func ByIncidentRoles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIncidentRolesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByIncidentSeveritiesCount orders the results by incident_severities count.
func ByIncidentSeveritiesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIncidentSeveritiesStep(), opts...)
	}
}

// ByIncidentSeverities orders the results by incident_severities terms.
func ByIncidentSeverities(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIncidentSeveritiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByIncidentTagsCount orders the results by incident_tags count.
func ByIncidentTagsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIncidentTagsStep(), opts...)
	}
}

// ByIncidentTags orders the results by incident_tags terms.
func ByIncidentTags(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIncidentTagsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByIncidentTypesCount orders the results by incident_types count.
func ByIncidentTypesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIncidentTypesStep(), opts...)
	}
}

// ByIncidentTypes orders the results by incident_types terms.
func ByIncidentTypes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIncidentTypesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newMessagesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MessagesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, MessagesTable, MessagesColumn),
	)
}
func newIncidentFieldsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IncidentFieldsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, IncidentFieldsTable, IncidentFieldsPrimaryKey...),
	)
}
func newIncidentRolesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IncidentRolesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, IncidentRolesTable, IncidentRolesPrimaryKey...),
	)
}
func newIncidentSeveritiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IncidentSeveritiesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, IncidentSeveritiesTable, IncidentSeveritiesPrimaryKey...),
	)
}
func newIncidentTagsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IncidentTagsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, IncidentTagsTable, IncidentTagsPrimaryKey...),
	)
}
func newIncidentTypesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IncidentTypesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, IncidentTypesTable, IncidentTypesPrimaryKey...),
	)
}
