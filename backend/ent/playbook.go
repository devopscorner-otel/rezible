// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/playbook"
)

// Playbook is the model entity for the Playbook schema.
type Playbook struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// ProviderID holds the value of the "provider_id" field.
	ProviderID string `json:"provider_id,omitempty"`
	// Content holds the value of the "content" field.
	Content []byte `json:"content,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlaybookQuery when eager-loading is set.
	Edges        PlaybookEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PlaybookEdges holds the relations/edges for other nodes in the graph.
type PlaybookEdges struct {
	// Alerts holds the value of the alerts edge.
	Alerts []*Alert `json:"alerts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AlertsOrErr returns the Alerts value or an error if the edge
// was not loaded in eager-loading.
func (e PlaybookEdges) AlertsOrErr() ([]*Alert, error) {
	if e.loadedTypes[0] {
		return e.Alerts, nil
	}
	return nil, &NotLoadedError{edge: "alerts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Playbook) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case playbook.FieldContent:
			values[i] = new([]byte)
		case playbook.FieldTitle, playbook.FieldProviderID:
			values[i] = new(sql.NullString)
		case playbook.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Playbook fields.
func (pl *Playbook) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case playbook.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pl.ID = *value
			}
		case playbook.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				pl.Title = value.String
			}
		case playbook.FieldProviderID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_id", values[i])
			} else if value.Valid {
				pl.ProviderID = value.String
			}
		case playbook.FieldContent:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value != nil {
				pl.Content = *value
			}
		default:
			pl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Playbook.
// This includes values selected through modifiers, order, etc.
func (pl *Playbook) Value(name string) (ent.Value, error) {
	return pl.selectValues.Get(name)
}

// QueryAlerts queries the "alerts" edge of the Playbook entity.
func (pl *Playbook) QueryAlerts() *AlertQuery {
	return NewPlaybookClient(pl.config).QueryAlerts(pl)
}

// Update returns a builder for updating this Playbook.
// Note that you need to call Playbook.Unwrap() before calling this method if this Playbook
// was returned from a transaction, and the transaction was committed or rolled back.
func (pl *Playbook) Update() *PlaybookUpdateOne {
	return NewPlaybookClient(pl.config).UpdateOne(pl)
}

// Unwrap unwraps the Playbook entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pl *Playbook) Unwrap() *Playbook {
	_tx, ok := pl.config.driver.(*txDriver)
	if !ok {
		panic("ent: Playbook is not a transactional entity")
	}
	pl.config.driver = _tx.drv
	return pl
}

// String implements the fmt.Stringer.
func (pl *Playbook) String() string {
	var builder strings.Builder
	builder.WriteString("Playbook(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pl.ID))
	builder.WriteString("title=")
	builder.WriteString(pl.Title)
	builder.WriteString(", ")
	builder.WriteString("provider_id=")
	builder.WriteString(pl.ProviderID)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(fmt.Sprintf("%v", pl.Content))
	builder.WriteByte(')')
	return builder.String()
}

// Playbooks is a parsable slice of Playbook.
type Playbooks []*Playbook
