// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/twohundreds/rezible/ent/oncallhandovertemplate"
)

// OncallHandoverTemplate is the model entity for the OncallHandoverTemplate schema.
type OncallHandoverTemplate struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Contents holds the value of the "contents" field.
	Contents []byte `json:"contents,omitempty"`
	// IsDefault holds the value of the "is_default" field.
	IsDefault bool `json:"is_default,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OncallHandoverTemplateQuery when eager-loading is set.
	Edges        OncallHandoverTemplateEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OncallHandoverTemplateEdges holds the relations/edges for other nodes in the graph.
type OncallHandoverTemplateEdges struct {
	// Roster holds the value of the roster edge.
	Roster []*OncallRoster `json:"roster,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RosterOrErr returns the Roster value or an error if the edge
// was not loaded in eager-loading.
func (e OncallHandoverTemplateEdges) RosterOrErr() ([]*OncallRoster, error) {
	if e.loadedTypes[0] {
		return e.Roster, nil
	}
	return nil, &NotLoadedError{edge: "roster"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OncallHandoverTemplate) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case oncallhandovertemplate.FieldContents:
			values[i] = new([]byte)
		case oncallhandovertemplate.FieldIsDefault:
			values[i] = new(sql.NullBool)
		case oncallhandovertemplate.FieldCreatedAt, oncallhandovertemplate.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case oncallhandovertemplate.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OncallHandoverTemplate fields.
func (oht *OncallHandoverTemplate) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case oncallhandovertemplate.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				oht.ID = *value
			}
		case oncallhandovertemplate.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				oht.CreatedAt = value.Time
			}
		case oncallhandovertemplate.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				oht.UpdatedAt = value.Time
			}
		case oncallhandovertemplate.FieldContents:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field contents", values[i])
			} else if value != nil {
				oht.Contents = *value
			}
		case oncallhandovertemplate.FieldIsDefault:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_default", values[i])
			} else if value.Valid {
				oht.IsDefault = value.Bool
			}
		default:
			oht.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OncallHandoverTemplate.
// This includes values selected through modifiers, order, etc.
func (oht *OncallHandoverTemplate) Value(name string) (ent.Value, error) {
	return oht.selectValues.Get(name)
}

// QueryRoster queries the "roster" edge of the OncallHandoverTemplate entity.
func (oht *OncallHandoverTemplate) QueryRoster() *OncallRosterQuery {
	return NewOncallHandoverTemplateClient(oht.config).QueryRoster(oht)
}

// Update returns a builder for updating this OncallHandoverTemplate.
// Note that you need to call OncallHandoverTemplate.Unwrap() before calling this method if this OncallHandoverTemplate
// was returned from a transaction, and the transaction was committed or rolled back.
func (oht *OncallHandoverTemplate) Update() *OncallHandoverTemplateUpdateOne {
	return NewOncallHandoverTemplateClient(oht.config).UpdateOne(oht)
}

// Unwrap unwraps the OncallHandoverTemplate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (oht *OncallHandoverTemplate) Unwrap() *OncallHandoverTemplate {
	_tx, ok := oht.config.driver.(*txDriver)
	if !ok {
		panic("ent: OncallHandoverTemplate is not a transactional entity")
	}
	oht.config.driver = _tx.drv
	return oht
}

// String implements the fmt.Stringer.
func (oht *OncallHandoverTemplate) String() string {
	var builder strings.Builder
	builder.WriteString("OncallHandoverTemplate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", oht.ID))
	builder.WriteString("created_at=")
	builder.WriteString(oht.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(oht.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("contents=")
	builder.WriteString(fmt.Sprintf("%v", oht.Contents))
	builder.WriteString(", ")
	builder.WriteString("is_default=")
	builder.WriteString(fmt.Sprintf("%v", oht.IsDefault))
	builder.WriteByte(')')
	return builder.String()
}

// OncallHandoverTemplates is a parsable slice of OncallHandoverTemplate.
type OncallHandoverTemplates []*OncallHandoverTemplate
