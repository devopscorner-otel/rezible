// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/oncalleventannotation"
	"github.com/rezible/rezible/ent/oncallroster"
	"github.com/rezible/rezible/ent/oncallusershift"
	"github.com/rezible/rezible/ent/oncallusershiftcover"
	"github.com/rezible/rezible/ent/oncallusershifthandover"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/user"
)

// OncallUserShiftQuery is the builder for querying OncallUserShift entities.
type OncallUserShiftQuery struct {
	config
	ctx             *QueryContext
	order           []oncallusershift.OrderOption
	inters          []Interceptor
	predicates      []predicate.OncallUserShift
	withUser        *UserQuery
	withRoster      *OncallRosterQuery
	withCovers      *OncallUserShiftCoverQuery
	withAnnotations *OncallEventAnnotationQuery
	withHandover    *OncallUserShiftHandoverQuery
	modifiers       []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OncallUserShiftQuery builder.
func (ousq *OncallUserShiftQuery) Where(ps ...predicate.OncallUserShift) *OncallUserShiftQuery {
	ousq.predicates = append(ousq.predicates, ps...)
	return ousq
}

// Limit the number of records to be returned by this query.
func (ousq *OncallUserShiftQuery) Limit(limit int) *OncallUserShiftQuery {
	ousq.ctx.Limit = &limit
	return ousq
}

// Offset to start from.
func (ousq *OncallUserShiftQuery) Offset(offset int) *OncallUserShiftQuery {
	ousq.ctx.Offset = &offset
	return ousq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ousq *OncallUserShiftQuery) Unique(unique bool) *OncallUserShiftQuery {
	ousq.ctx.Unique = &unique
	return ousq
}

// Order specifies how the records should be ordered.
func (ousq *OncallUserShiftQuery) Order(o ...oncallusershift.OrderOption) *OncallUserShiftQuery {
	ousq.order = append(ousq.order, o...)
	return ousq
}

// QueryUser chains the current query on the "user" edge.
func (ousq *OncallUserShiftQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: ousq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ousq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ousq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(oncallusershift.Table, oncallusershift.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, oncallusershift.UserTable, oncallusershift.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(ousq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRoster chains the current query on the "roster" edge.
func (ousq *OncallUserShiftQuery) QueryRoster() *OncallRosterQuery {
	query := (&OncallRosterClient{config: ousq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ousq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ousq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(oncallusershift.Table, oncallusershift.FieldID, selector),
			sqlgraph.To(oncallroster.Table, oncallroster.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, oncallusershift.RosterTable, oncallusershift.RosterColumn),
		)
		fromU = sqlgraph.SetNeighbors(ousq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCovers chains the current query on the "covers" edge.
func (ousq *OncallUserShiftQuery) QueryCovers() *OncallUserShiftCoverQuery {
	query := (&OncallUserShiftCoverClient{config: ousq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ousq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ousq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(oncallusershift.Table, oncallusershift.FieldID, selector),
			sqlgraph.To(oncallusershiftcover.Table, oncallusershiftcover.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, oncallusershift.CoversTable, oncallusershift.CoversColumn),
		)
		fromU = sqlgraph.SetNeighbors(ousq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAnnotations chains the current query on the "annotations" edge.
func (ousq *OncallUserShiftQuery) QueryAnnotations() *OncallEventAnnotationQuery {
	query := (&OncallEventAnnotationClient{config: ousq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ousq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ousq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(oncallusershift.Table, oncallusershift.FieldID, selector),
			sqlgraph.To(oncalleventannotation.Table, oncalleventannotation.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, oncallusershift.AnnotationsTable, oncallusershift.AnnotationsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(ousq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHandover chains the current query on the "handover" edge.
func (ousq *OncallUserShiftQuery) QueryHandover() *OncallUserShiftHandoverQuery {
	query := (&OncallUserShiftHandoverClient{config: ousq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ousq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ousq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(oncallusershift.Table, oncallusershift.FieldID, selector),
			sqlgraph.To(oncallusershifthandover.Table, oncallusershifthandover.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, oncallusershift.HandoverTable, oncallusershift.HandoverColumn),
		)
		fromU = sqlgraph.SetNeighbors(ousq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first OncallUserShift entity from the query.
// Returns a *NotFoundError when no OncallUserShift was found.
func (ousq *OncallUserShiftQuery) First(ctx context.Context) (*OncallUserShift, error) {
	nodes, err := ousq.Limit(1).All(setContextOp(ctx, ousq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{oncallusershift.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ousq *OncallUserShiftQuery) FirstX(ctx context.Context) *OncallUserShift {
	node, err := ousq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first OncallUserShift ID from the query.
// Returns a *NotFoundError when no OncallUserShift ID was found.
func (ousq *OncallUserShiftQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = ousq.Limit(1).IDs(setContextOp(ctx, ousq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{oncallusershift.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ousq *OncallUserShiftQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := ousq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single OncallUserShift entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one OncallUserShift entity is found.
// Returns a *NotFoundError when no OncallUserShift entities are found.
func (ousq *OncallUserShiftQuery) Only(ctx context.Context) (*OncallUserShift, error) {
	nodes, err := ousq.Limit(2).All(setContextOp(ctx, ousq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{oncallusershift.Label}
	default:
		return nil, &NotSingularError{oncallusershift.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ousq *OncallUserShiftQuery) OnlyX(ctx context.Context) *OncallUserShift {
	node, err := ousq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only OncallUserShift ID in the query.
// Returns a *NotSingularError when more than one OncallUserShift ID is found.
// Returns a *NotFoundError when no entities are found.
func (ousq *OncallUserShiftQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = ousq.Limit(2).IDs(setContextOp(ctx, ousq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{oncallusershift.Label}
	default:
		err = &NotSingularError{oncallusershift.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ousq *OncallUserShiftQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := ousq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OncallUserShifts.
func (ousq *OncallUserShiftQuery) All(ctx context.Context) ([]*OncallUserShift, error) {
	ctx = setContextOp(ctx, ousq.ctx, ent.OpQueryAll)
	if err := ousq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*OncallUserShift, *OncallUserShiftQuery]()
	return withInterceptors[[]*OncallUserShift](ctx, ousq, qr, ousq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ousq *OncallUserShiftQuery) AllX(ctx context.Context) []*OncallUserShift {
	nodes, err := ousq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of OncallUserShift IDs.
func (ousq *OncallUserShiftQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if ousq.ctx.Unique == nil && ousq.path != nil {
		ousq.Unique(true)
	}
	ctx = setContextOp(ctx, ousq.ctx, ent.OpQueryIDs)
	if err = ousq.Select(oncallusershift.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ousq *OncallUserShiftQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := ousq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ousq *OncallUserShiftQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ousq.ctx, ent.OpQueryCount)
	if err := ousq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ousq, querierCount[*OncallUserShiftQuery](), ousq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ousq *OncallUserShiftQuery) CountX(ctx context.Context) int {
	count, err := ousq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ousq *OncallUserShiftQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ousq.ctx, ent.OpQueryExist)
	switch _, err := ousq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ousq *OncallUserShiftQuery) ExistX(ctx context.Context) bool {
	exist, err := ousq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OncallUserShiftQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ousq *OncallUserShiftQuery) Clone() *OncallUserShiftQuery {
	if ousq == nil {
		return nil
	}
	return &OncallUserShiftQuery{
		config:          ousq.config,
		ctx:             ousq.ctx.Clone(),
		order:           append([]oncallusershift.OrderOption{}, ousq.order...),
		inters:          append([]Interceptor{}, ousq.inters...),
		predicates:      append([]predicate.OncallUserShift{}, ousq.predicates...),
		withUser:        ousq.withUser.Clone(),
		withRoster:      ousq.withRoster.Clone(),
		withCovers:      ousq.withCovers.Clone(),
		withAnnotations: ousq.withAnnotations.Clone(),
		withHandover:    ousq.withHandover.Clone(),
		// clone intermediate query.
		sql:       ousq.sql.Clone(),
		path:      ousq.path,
		modifiers: append([]func(*sql.Selector){}, ousq.modifiers...),
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (ousq *OncallUserShiftQuery) WithUser(opts ...func(*UserQuery)) *OncallUserShiftQuery {
	query := (&UserClient{config: ousq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ousq.withUser = query
	return ousq
}

// WithRoster tells the query-builder to eager-load the nodes that are connected to
// the "roster" edge. The optional arguments are used to configure the query builder of the edge.
func (ousq *OncallUserShiftQuery) WithRoster(opts ...func(*OncallRosterQuery)) *OncallUserShiftQuery {
	query := (&OncallRosterClient{config: ousq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ousq.withRoster = query
	return ousq
}

// WithCovers tells the query-builder to eager-load the nodes that are connected to
// the "covers" edge. The optional arguments are used to configure the query builder of the edge.
func (ousq *OncallUserShiftQuery) WithCovers(opts ...func(*OncallUserShiftCoverQuery)) *OncallUserShiftQuery {
	query := (&OncallUserShiftCoverClient{config: ousq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ousq.withCovers = query
	return ousq
}

// WithAnnotations tells the query-builder to eager-load the nodes that are connected to
// the "annotations" edge. The optional arguments are used to configure the query builder of the edge.
func (ousq *OncallUserShiftQuery) WithAnnotations(opts ...func(*OncallEventAnnotationQuery)) *OncallUserShiftQuery {
	query := (&OncallEventAnnotationClient{config: ousq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ousq.withAnnotations = query
	return ousq
}

// WithHandover tells the query-builder to eager-load the nodes that are connected to
// the "handover" edge. The optional arguments are used to configure the query builder of the edge.
func (ousq *OncallUserShiftQuery) WithHandover(opts ...func(*OncallUserShiftHandoverQuery)) *OncallUserShiftQuery {
	query := (&OncallUserShiftHandoverClient{config: ousq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ousq.withHandover = query
	return ousq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UserID uuid.UUID `json:"user_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OncallUserShift.Query().
//		GroupBy(oncallusershift.FieldUserID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ousq *OncallUserShiftQuery) GroupBy(field string, fields ...string) *OncallUserShiftGroupBy {
	ousq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &OncallUserShiftGroupBy{build: ousq}
	grbuild.flds = &ousq.ctx.Fields
	grbuild.label = oncallusershift.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UserID uuid.UUID `json:"user_id,omitempty"`
//	}
//
//	client.OncallUserShift.Query().
//		Select(oncallusershift.FieldUserID).
//		Scan(ctx, &v)
func (ousq *OncallUserShiftQuery) Select(fields ...string) *OncallUserShiftSelect {
	ousq.ctx.Fields = append(ousq.ctx.Fields, fields...)
	sbuild := &OncallUserShiftSelect{OncallUserShiftQuery: ousq}
	sbuild.label = oncallusershift.Label
	sbuild.flds, sbuild.scan = &ousq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a OncallUserShiftSelect configured with the given aggregations.
func (ousq *OncallUserShiftQuery) Aggregate(fns ...AggregateFunc) *OncallUserShiftSelect {
	return ousq.Select().Aggregate(fns...)
}

func (ousq *OncallUserShiftQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ousq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ousq); err != nil {
				return err
			}
		}
	}
	for _, f := range ousq.ctx.Fields {
		if !oncallusershift.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ousq.path != nil {
		prev, err := ousq.path(ctx)
		if err != nil {
			return err
		}
		ousq.sql = prev
	}
	return nil
}

func (ousq *OncallUserShiftQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*OncallUserShift, error) {
	var (
		nodes       = []*OncallUserShift{}
		_spec       = ousq.querySpec()
		loadedTypes = [5]bool{
			ousq.withUser != nil,
			ousq.withRoster != nil,
			ousq.withCovers != nil,
			ousq.withAnnotations != nil,
			ousq.withHandover != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*OncallUserShift).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &OncallUserShift{config: ousq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(ousq.modifiers) > 0 {
		_spec.Modifiers = ousq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ousq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ousq.withUser; query != nil {
		if err := ousq.loadUser(ctx, query, nodes, nil,
			func(n *OncallUserShift, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := ousq.withRoster; query != nil {
		if err := ousq.loadRoster(ctx, query, nodes, nil,
			func(n *OncallUserShift, e *OncallRoster) { n.Edges.Roster = e }); err != nil {
			return nil, err
		}
	}
	if query := ousq.withCovers; query != nil {
		if err := ousq.loadCovers(ctx, query, nodes,
			func(n *OncallUserShift) { n.Edges.Covers = []*OncallUserShiftCover{} },
			func(n *OncallUserShift, e *OncallUserShiftCover) { n.Edges.Covers = append(n.Edges.Covers, e) }); err != nil {
			return nil, err
		}
	}
	if query := ousq.withAnnotations; query != nil {
		if err := ousq.loadAnnotations(ctx, query, nodes,
			func(n *OncallUserShift) { n.Edges.Annotations = []*OncallEventAnnotation{} },
			func(n *OncallUserShift, e *OncallEventAnnotation) {
				n.Edges.Annotations = append(n.Edges.Annotations, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := ousq.withHandover; query != nil {
		if err := ousq.loadHandover(ctx, query, nodes, nil,
			func(n *OncallUserShift, e *OncallUserShiftHandover) { n.Edges.Handover = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ousq *OncallUserShiftQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*OncallUserShift, init func(*OncallUserShift), assign func(*OncallUserShift, *User)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*OncallUserShift)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ousq *OncallUserShiftQuery) loadRoster(ctx context.Context, query *OncallRosterQuery, nodes []*OncallUserShift, init func(*OncallUserShift), assign func(*OncallUserShift, *OncallRoster)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*OncallUserShift)
	for i := range nodes {
		fk := nodes[i].RosterID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(oncallroster.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "roster_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ousq *OncallUserShiftQuery) loadCovers(ctx context.Context, query *OncallUserShiftCoverQuery, nodes []*OncallUserShift, init func(*OncallUserShift), assign func(*OncallUserShift, *OncallUserShiftCover)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*OncallUserShift)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(oncallusershiftcover.FieldShiftID)
	}
	query.Where(predicate.OncallUserShiftCover(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(oncallusershift.CoversColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ShiftID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "shift_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (ousq *OncallUserShiftQuery) loadAnnotations(ctx context.Context, query *OncallEventAnnotationQuery, nodes []*OncallUserShift, init func(*OncallUserShift), assign func(*OncallUserShift, *OncallEventAnnotation)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*OncallUserShift)
	nids := make(map[uuid.UUID]map[*OncallUserShift]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(oncallusershift.AnnotationsTable)
		s.Join(joinT).On(s.C(oncalleventannotation.FieldID), joinT.C(oncallusershift.AnnotationsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(oncallusershift.AnnotationsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(oncallusershift.AnnotationsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*OncallUserShift]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*OncallEventAnnotation](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "annotations" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (ousq *OncallUserShiftQuery) loadHandover(ctx context.Context, query *OncallUserShiftHandoverQuery, nodes []*OncallUserShift, init func(*OncallUserShift), assign func(*OncallUserShift, *OncallUserShiftHandover)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*OncallUserShift)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(oncallusershifthandover.FieldShiftID)
	}
	query.Where(predicate.OncallUserShiftHandover(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(oncallusershift.HandoverColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ShiftID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "shift_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (ousq *OncallUserShiftQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ousq.querySpec()
	if len(ousq.modifiers) > 0 {
		_spec.Modifiers = ousq.modifiers
	}
	_spec.Node.Columns = ousq.ctx.Fields
	if len(ousq.ctx.Fields) > 0 {
		_spec.Unique = ousq.ctx.Unique != nil && *ousq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ousq.driver, _spec)
}

func (ousq *OncallUserShiftQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(oncallusershift.Table, oncallusershift.Columns, sqlgraph.NewFieldSpec(oncallusershift.FieldID, field.TypeUUID))
	_spec.From = ousq.sql
	if unique := ousq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ousq.path != nil {
		_spec.Unique = true
	}
	if fields := ousq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oncallusershift.FieldID)
		for i := range fields {
			if fields[i] != oncallusershift.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if ousq.withUser != nil {
			_spec.Node.AddColumnOnce(oncallusershift.FieldUserID)
		}
		if ousq.withRoster != nil {
			_spec.Node.AddColumnOnce(oncallusershift.FieldRosterID)
		}
	}
	if ps := ousq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ousq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ousq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ousq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ousq *OncallUserShiftQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ousq.driver.Dialect())
	t1 := builder.Table(oncallusershift.Table)
	columns := ousq.ctx.Fields
	if len(columns) == 0 {
		columns = oncallusershift.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ousq.sql != nil {
		selector = ousq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ousq.ctx.Unique != nil && *ousq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range ousq.modifiers {
		m(selector)
	}
	for _, p := range ousq.predicates {
		p(selector)
	}
	for _, p := range ousq.order {
		p(selector)
	}
	if offset := ousq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ousq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ousq *OncallUserShiftQuery) Modify(modifiers ...func(s *sql.Selector)) *OncallUserShiftSelect {
	ousq.modifiers = append(ousq.modifiers, modifiers...)
	return ousq.Select()
}

// OncallUserShiftGroupBy is the group-by builder for OncallUserShift entities.
type OncallUserShiftGroupBy struct {
	selector
	build *OncallUserShiftQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ousgb *OncallUserShiftGroupBy) Aggregate(fns ...AggregateFunc) *OncallUserShiftGroupBy {
	ousgb.fns = append(ousgb.fns, fns...)
	return ousgb
}

// Scan applies the selector query and scans the result into the given value.
func (ousgb *OncallUserShiftGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ousgb.build.ctx, ent.OpQueryGroupBy)
	if err := ousgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OncallUserShiftQuery, *OncallUserShiftGroupBy](ctx, ousgb.build, ousgb, ousgb.build.inters, v)
}

func (ousgb *OncallUserShiftGroupBy) sqlScan(ctx context.Context, root *OncallUserShiftQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ousgb.fns))
	for _, fn := range ousgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ousgb.flds)+len(ousgb.fns))
		for _, f := range *ousgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ousgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ousgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// OncallUserShiftSelect is the builder for selecting fields of OncallUserShift entities.
type OncallUserShiftSelect struct {
	*OncallUserShiftQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ouss *OncallUserShiftSelect) Aggregate(fns ...AggregateFunc) *OncallUserShiftSelect {
	ouss.fns = append(ouss.fns, fns...)
	return ouss
}

// Scan applies the selector query and scans the result into the given value.
func (ouss *OncallUserShiftSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ouss.ctx, ent.OpQuerySelect)
	if err := ouss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OncallUserShiftQuery, *OncallUserShiftSelect](ctx, ouss.OncallUserShiftQuery, ouss, ouss.inters, v)
}

func (ouss *OncallUserShiftSelect) sqlScan(ctx context.Context, root *OncallUserShiftQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ouss.fns))
	for _, fn := range ouss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ouss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ouss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ouss *OncallUserShiftSelect) Modify(modifiers ...func(s *sql.Selector)) *OncallUserShiftSelect {
	ouss.modifiers = append(ouss.modifiers, modifiers...)
	return ouss
}
