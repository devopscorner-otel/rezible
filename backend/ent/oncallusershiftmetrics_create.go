// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/oncallusershift"
	"github.com/rezible/rezible/ent/oncallusershiftmetrics"
)

// OncallUserShiftMetricsCreate is the builder for creating a OncallUserShiftMetrics entity.
type OncallUserShiftMetricsCreate struct {
	config
	mutation *OncallUserShiftMetricsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetShiftID sets the "shift_id" field.
func (ousmc *OncallUserShiftMetricsCreate) SetShiftID(u uuid.UUID) *OncallUserShiftMetricsCreate {
	ousmc.mutation.SetShiftID(u)
	return ousmc
}

// SetID sets the "id" field.
func (ousmc *OncallUserShiftMetricsCreate) SetID(u uuid.UUID) *OncallUserShiftMetricsCreate {
	ousmc.mutation.SetID(u)
	return ousmc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ousmc *OncallUserShiftMetricsCreate) SetNillableID(u *uuid.UUID) *OncallUserShiftMetricsCreate {
	if u != nil {
		ousmc.SetID(*u)
	}
	return ousmc
}

// SetShift sets the "shift" edge to the OncallUserShift entity.
func (ousmc *OncallUserShiftMetricsCreate) SetShift(o *OncallUserShift) *OncallUserShiftMetricsCreate {
	return ousmc.SetShiftID(o.ID)
}

// Mutation returns the OncallUserShiftMetricsMutation object of the builder.
func (ousmc *OncallUserShiftMetricsCreate) Mutation() *OncallUserShiftMetricsMutation {
	return ousmc.mutation
}

// Save creates the OncallUserShiftMetrics in the database.
func (ousmc *OncallUserShiftMetricsCreate) Save(ctx context.Context) (*OncallUserShiftMetrics, error) {
	if err := ousmc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ousmc.sqlSave, ousmc.mutation, ousmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ousmc *OncallUserShiftMetricsCreate) SaveX(ctx context.Context) *OncallUserShiftMetrics {
	v, err := ousmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ousmc *OncallUserShiftMetricsCreate) Exec(ctx context.Context) error {
	_, err := ousmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ousmc *OncallUserShiftMetricsCreate) ExecX(ctx context.Context) {
	if err := ousmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ousmc *OncallUserShiftMetricsCreate) defaults() error {
	if _, ok := ousmc.mutation.ID(); !ok {
		if oncallusershiftmetrics.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized oncallusershiftmetrics.DefaultID (forgotten import ent/runtime?)")
		}
		v := oncallusershiftmetrics.DefaultID()
		ousmc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ousmc *OncallUserShiftMetricsCreate) check() error {
	if _, ok := ousmc.mutation.ShiftID(); !ok {
		return &ValidationError{Name: "shift_id", err: errors.New(`ent: missing required field "OncallUserShiftMetrics.shift_id"`)}
	}
	if len(ousmc.mutation.ShiftIDs()) == 0 {
		return &ValidationError{Name: "shift", err: errors.New(`ent: missing required edge "OncallUserShiftMetrics.shift"`)}
	}
	return nil
}

func (ousmc *OncallUserShiftMetricsCreate) sqlSave(ctx context.Context) (*OncallUserShiftMetrics, error) {
	if err := ousmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ousmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ousmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ousmc.mutation.id = &_node.ID
	ousmc.mutation.done = true
	return _node, nil
}

func (ousmc *OncallUserShiftMetricsCreate) createSpec() (*OncallUserShiftMetrics, *sqlgraph.CreateSpec) {
	var (
		_node = &OncallUserShiftMetrics{config: ousmc.config}
		_spec = sqlgraph.NewCreateSpec(oncallusershiftmetrics.Table, sqlgraph.NewFieldSpec(oncallusershiftmetrics.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = ousmc.conflict
	if id, ok := ousmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if nodes := ousmc.mutation.ShiftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   oncallusershiftmetrics.ShiftTable,
			Columns: []string{oncallusershiftmetrics.ShiftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallusershift.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ShiftID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OncallUserShiftMetrics.Create().
//		SetShiftID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OncallUserShiftMetricsUpsert) {
//			SetShiftID(v+v).
//		}).
//		Exec(ctx)
func (ousmc *OncallUserShiftMetricsCreate) OnConflict(opts ...sql.ConflictOption) *OncallUserShiftMetricsUpsertOne {
	ousmc.conflict = opts
	return &OncallUserShiftMetricsUpsertOne{
		create: ousmc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OncallUserShiftMetrics.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ousmc *OncallUserShiftMetricsCreate) OnConflictColumns(columns ...string) *OncallUserShiftMetricsUpsertOne {
	ousmc.conflict = append(ousmc.conflict, sql.ConflictColumns(columns...))
	return &OncallUserShiftMetricsUpsertOne{
		create: ousmc,
	}
}

type (
	// OncallUserShiftMetricsUpsertOne is the builder for "upsert"-ing
	//  one OncallUserShiftMetrics node.
	OncallUserShiftMetricsUpsertOne struct {
		create *OncallUserShiftMetricsCreate
	}

	// OncallUserShiftMetricsUpsert is the "OnConflict" setter.
	OncallUserShiftMetricsUpsert struct {
		*sql.UpdateSet
	}
)

// SetShiftID sets the "shift_id" field.
func (u *OncallUserShiftMetricsUpsert) SetShiftID(v uuid.UUID) *OncallUserShiftMetricsUpsert {
	u.Set(oncallusershiftmetrics.FieldShiftID, v)
	return u
}

// UpdateShiftID sets the "shift_id" field to the value that was provided on create.
func (u *OncallUserShiftMetricsUpsert) UpdateShiftID() *OncallUserShiftMetricsUpsert {
	u.SetExcluded(oncallusershiftmetrics.FieldShiftID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OncallUserShiftMetrics.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oncallusershiftmetrics.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OncallUserShiftMetricsUpsertOne) UpdateNewValues() *OncallUserShiftMetricsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(oncallusershiftmetrics.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OncallUserShiftMetrics.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OncallUserShiftMetricsUpsertOne) Ignore() *OncallUserShiftMetricsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OncallUserShiftMetricsUpsertOne) DoNothing() *OncallUserShiftMetricsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OncallUserShiftMetricsCreate.OnConflict
// documentation for more info.
func (u *OncallUserShiftMetricsUpsertOne) Update(set func(*OncallUserShiftMetricsUpsert)) *OncallUserShiftMetricsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OncallUserShiftMetricsUpsert{UpdateSet: update})
	}))
	return u
}

// SetShiftID sets the "shift_id" field.
func (u *OncallUserShiftMetricsUpsertOne) SetShiftID(v uuid.UUID) *OncallUserShiftMetricsUpsertOne {
	return u.Update(func(s *OncallUserShiftMetricsUpsert) {
		s.SetShiftID(v)
	})
}

// UpdateShiftID sets the "shift_id" field to the value that was provided on create.
func (u *OncallUserShiftMetricsUpsertOne) UpdateShiftID() *OncallUserShiftMetricsUpsertOne {
	return u.Update(func(s *OncallUserShiftMetricsUpsert) {
		s.UpdateShiftID()
	})
}

// Exec executes the query.
func (u *OncallUserShiftMetricsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OncallUserShiftMetricsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OncallUserShiftMetricsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OncallUserShiftMetricsUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: OncallUserShiftMetricsUpsertOne.ID is not supported by MySQL driver. Use OncallUserShiftMetricsUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OncallUserShiftMetricsUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OncallUserShiftMetricsCreateBulk is the builder for creating many OncallUserShiftMetrics entities in bulk.
type OncallUserShiftMetricsCreateBulk struct {
	config
	err      error
	builders []*OncallUserShiftMetricsCreate
	conflict []sql.ConflictOption
}

// Save creates the OncallUserShiftMetrics entities in the database.
func (ousmcb *OncallUserShiftMetricsCreateBulk) Save(ctx context.Context) ([]*OncallUserShiftMetrics, error) {
	if ousmcb.err != nil {
		return nil, ousmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ousmcb.builders))
	nodes := make([]*OncallUserShiftMetrics, len(ousmcb.builders))
	mutators := make([]Mutator, len(ousmcb.builders))
	for i := range ousmcb.builders {
		func(i int, root context.Context) {
			builder := ousmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OncallUserShiftMetricsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ousmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ousmcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ousmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ousmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ousmcb *OncallUserShiftMetricsCreateBulk) SaveX(ctx context.Context) []*OncallUserShiftMetrics {
	v, err := ousmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ousmcb *OncallUserShiftMetricsCreateBulk) Exec(ctx context.Context) error {
	_, err := ousmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ousmcb *OncallUserShiftMetricsCreateBulk) ExecX(ctx context.Context) {
	if err := ousmcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OncallUserShiftMetrics.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OncallUserShiftMetricsUpsert) {
//			SetShiftID(v+v).
//		}).
//		Exec(ctx)
func (ousmcb *OncallUserShiftMetricsCreateBulk) OnConflict(opts ...sql.ConflictOption) *OncallUserShiftMetricsUpsertBulk {
	ousmcb.conflict = opts
	return &OncallUserShiftMetricsUpsertBulk{
		create: ousmcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OncallUserShiftMetrics.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ousmcb *OncallUserShiftMetricsCreateBulk) OnConflictColumns(columns ...string) *OncallUserShiftMetricsUpsertBulk {
	ousmcb.conflict = append(ousmcb.conflict, sql.ConflictColumns(columns...))
	return &OncallUserShiftMetricsUpsertBulk{
		create: ousmcb,
	}
}

// OncallUserShiftMetricsUpsertBulk is the builder for "upsert"-ing
// a bulk of OncallUserShiftMetrics nodes.
type OncallUserShiftMetricsUpsertBulk struct {
	create *OncallUserShiftMetricsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OncallUserShiftMetrics.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oncallusershiftmetrics.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OncallUserShiftMetricsUpsertBulk) UpdateNewValues() *OncallUserShiftMetricsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(oncallusershiftmetrics.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OncallUserShiftMetrics.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OncallUserShiftMetricsUpsertBulk) Ignore() *OncallUserShiftMetricsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OncallUserShiftMetricsUpsertBulk) DoNothing() *OncallUserShiftMetricsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OncallUserShiftMetricsCreateBulk.OnConflict
// documentation for more info.
func (u *OncallUserShiftMetricsUpsertBulk) Update(set func(*OncallUserShiftMetricsUpsert)) *OncallUserShiftMetricsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OncallUserShiftMetricsUpsert{UpdateSet: update})
	}))
	return u
}

// SetShiftID sets the "shift_id" field.
func (u *OncallUserShiftMetricsUpsertBulk) SetShiftID(v uuid.UUID) *OncallUserShiftMetricsUpsertBulk {
	return u.Update(func(s *OncallUserShiftMetricsUpsert) {
		s.SetShiftID(v)
	})
}

// UpdateShiftID sets the "shift_id" field to the value that was provided on create.
func (u *OncallUserShiftMetricsUpsertBulk) UpdateShiftID() *OncallUserShiftMetricsUpsertBulk {
	return u.Update(func(s *OncallUserShiftMetricsUpsert) {
		s.UpdateShiftID()
	})
}

// Exec executes the query.
func (u *OncallUserShiftMetricsUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OncallUserShiftMetricsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OncallUserShiftMetricsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OncallUserShiftMetricsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
