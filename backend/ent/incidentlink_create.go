// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/incident"
	"github.com/rezible/rezible/ent/incidentlink"
	"github.com/rezible/rezible/ent/tenant"
)

// IncidentLinkCreate is the builder for creating a IncidentLink entity.
type IncidentLinkCreate struct {
	config
	mutation *IncidentLinkMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (ilc *IncidentLinkCreate) SetTenantID(i int) *IncidentLinkCreate {
	ilc.mutation.SetTenantID(i)
	return ilc
}

// SetIncidentID sets the "incident_id" field.
func (ilc *IncidentLinkCreate) SetIncidentID(u uuid.UUID) *IncidentLinkCreate {
	ilc.mutation.SetIncidentID(u)
	return ilc
}

// SetLinkedIncidentID sets the "linked_incident_id" field.
func (ilc *IncidentLinkCreate) SetLinkedIncidentID(u uuid.UUID) *IncidentLinkCreate {
	ilc.mutation.SetLinkedIncidentID(u)
	return ilc
}

// SetDescription sets the "description" field.
func (ilc *IncidentLinkCreate) SetDescription(s string) *IncidentLinkCreate {
	ilc.mutation.SetDescription(s)
	return ilc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ilc *IncidentLinkCreate) SetNillableDescription(s *string) *IncidentLinkCreate {
	if s != nil {
		ilc.SetDescription(*s)
	}
	return ilc
}

// SetLinkType sets the "link_type" field.
func (ilc *IncidentLinkCreate) SetLinkType(it incidentlink.LinkType) *IncidentLinkCreate {
	ilc.mutation.SetLinkType(it)
	return ilc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (ilc *IncidentLinkCreate) SetTenant(t *Tenant) *IncidentLinkCreate {
	return ilc.SetTenantID(t.ID)
}

// SetIncident sets the "incident" edge to the Incident entity.
func (ilc *IncidentLinkCreate) SetIncident(i *Incident) *IncidentLinkCreate {
	return ilc.SetIncidentID(i.ID)
}

// SetLinkedIncident sets the "linked_incident" edge to the Incident entity.
func (ilc *IncidentLinkCreate) SetLinkedIncident(i *Incident) *IncidentLinkCreate {
	return ilc.SetLinkedIncidentID(i.ID)
}

// Mutation returns the IncidentLinkMutation object of the builder.
func (ilc *IncidentLinkCreate) Mutation() *IncidentLinkMutation {
	return ilc.mutation
}

// Save creates the IncidentLink in the database.
func (ilc *IncidentLinkCreate) Save(ctx context.Context) (*IncidentLink, error) {
	return withHooks(ctx, ilc.sqlSave, ilc.mutation, ilc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ilc *IncidentLinkCreate) SaveX(ctx context.Context) *IncidentLink {
	v, err := ilc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ilc *IncidentLinkCreate) Exec(ctx context.Context) error {
	_, err := ilc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ilc *IncidentLinkCreate) ExecX(ctx context.Context) {
	if err := ilc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ilc *IncidentLinkCreate) check() error {
	if _, ok := ilc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "IncidentLink.tenant_id"`)}
	}
	if _, ok := ilc.mutation.IncidentID(); !ok {
		return &ValidationError{Name: "incident_id", err: errors.New(`ent: missing required field "IncidentLink.incident_id"`)}
	}
	if _, ok := ilc.mutation.LinkedIncidentID(); !ok {
		return &ValidationError{Name: "linked_incident_id", err: errors.New(`ent: missing required field "IncidentLink.linked_incident_id"`)}
	}
	if _, ok := ilc.mutation.LinkType(); !ok {
		return &ValidationError{Name: "link_type", err: errors.New(`ent: missing required field "IncidentLink.link_type"`)}
	}
	if v, ok := ilc.mutation.LinkType(); ok {
		if err := incidentlink.LinkTypeValidator(v); err != nil {
			return &ValidationError{Name: "link_type", err: fmt.Errorf(`ent: validator failed for field "IncidentLink.link_type": %w`, err)}
		}
	}
	if len(ilc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "IncidentLink.tenant"`)}
	}
	if len(ilc.mutation.IncidentIDs()) == 0 {
		return &ValidationError{Name: "incident", err: errors.New(`ent: missing required edge "IncidentLink.incident"`)}
	}
	if len(ilc.mutation.LinkedIncidentIDs()) == 0 {
		return &ValidationError{Name: "linked_incident", err: errors.New(`ent: missing required edge "IncidentLink.linked_incident"`)}
	}
	return nil
}

func (ilc *IncidentLinkCreate) sqlSave(ctx context.Context) (*IncidentLink, error) {
	if err := ilc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ilc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ilc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ilc.mutation.id = &_node.ID
	ilc.mutation.done = true
	return _node, nil
}

func (ilc *IncidentLinkCreate) createSpec() (*IncidentLink, *sqlgraph.CreateSpec) {
	var (
		_node = &IncidentLink{config: ilc.config}
		_spec = sqlgraph.NewCreateSpec(incidentlink.Table, sqlgraph.NewFieldSpec(incidentlink.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ilc.conflict
	if value, ok := ilc.mutation.Description(); ok {
		_spec.SetField(incidentlink.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ilc.mutation.LinkType(); ok {
		_spec.SetField(incidentlink.FieldLinkType, field.TypeEnum, value)
		_node.LinkType = value
	}
	if nodes := ilc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentlink.TenantTable,
			Columns: []string{incidentlink.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ilc.mutation.IncidentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentlink.IncidentTable,
			Columns: []string{incidentlink.IncidentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.IncidentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ilc.mutation.LinkedIncidentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   incidentlink.LinkedIncidentTable,
			Columns: []string{incidentlink.LinkedIncidentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LinkedIncidentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IncidentLink.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IncidentLinkUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (ilc *IncidentLinkCreate) OnConflict(opts ...sql.ConflictOption) *IncidentLinkUpsertOne {
	ilc.conflict = opts
	return &IncidentLinkUpsertOne{
		create: ilc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IncidentLink.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ilc *IncidentLinkCreate) OnConflictColumns(columns ...string) *IncidentLinkUpsertOne {
	ilc.conflict = append(ilc.conflict, sql.ConflictColumns(columns...))
	return &IncidentLinkUpsertOne{
		create: ilc,
	}
}

type (
	// IncidentLinkUpsertOne is the builder for "upsert"-ing
	//  one IncidentLink node.
	IncidentLinkUpsertOne struct {
		create *IncidentLinkCreate
	}

	// IncidentLinkUpsert is the "OnConflict" setter.
	IncidentLinkUpsert struct {
		*sql.UpdateSet
	}
)

// SetIncidentID sets the "incident_id" field.
func (u *IncidentLinkUpsert) SetIncidentID(v uuid.UUID) *IncidentLinkUpsert {
	u.Set(incidentlink.FieldIncidentID, v)
	return u
}

// UpdateIncidentID sets the "incident_id" field to the value that was provided on create.
func (u *IncidentLinkUpsert) UpdateIncidentID() *IncidentLinkUpsert {
	u.SetExcluded(incidentlink.FieldIncidentID)
	return u
}

// SetLinkedIncidentID sets the "linked_incident_id" field.
func (u *IncidentLinkUpsert) SetLinkedIncidentID(v uuid.UUID) *IncidentLinkUpsert {
	u.Set(incidentlink.FieldLinkedIncidentID, v)
	return u
}

// UpdateLinkedIncidentID sets the "linked_incident_id" field to the value that was provided on create.
func (u *IncidentLinkUpsert) UpdateLinkedIncidentID() *IncidentLinkUpsert {
	u.SetExcluded(incidentlink.FieldLinkedIncidentID)
	return u
}

// SetDescription sets the "description" field.
func (u *IncidentLinkUpsert) SetDescription(v string) *IncidentLinkUpsert {
	u.Set(incidentlink.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *IncidentLinkUpsert) UpdateDescription() *IncidentLinkUpsert {
	u.SetExcluded(incidentlink.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *IncidentLinkUpsert) ClearDescription() *IncidentLinkUpsert {
	u.SetNull(incidentlink.FieldDescription)
	return u
}

// SetLinkType sets the "link_type" field.
func (u *IncidentLinkUpsert) SetLinkType(v incidentlink.LinkType) *IncidentLinkUpsert {
	u.Set(incidentlink.FieldLinkType, v)
	return u
}

// UpdateLinkType sets the "link_type" field to the value that was provided on create.
func (u *IncidentLinkUpsert) UpdateLinkType() *IncidentLinkUpsert {
	u.SetExcluded(incidentlink.FieldLinkType)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.IncidentLink.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *IncidentLinkUpsertOne) UpdateNewValues() *IncidentLinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.TenantID(); exists {
			s.SetIgnore(incidentlink.FieldTenantID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IncidentLink.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *IncidentLinkUpsertOne) Ignore() *IncidentLinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IncidentLinkUpsertOne) DoNothing() *IncidentLinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IncidentLinkCreate.OnConflict
// documentation for more info.
func (u *IncidentLinkUpsertOne) Update(set func(*IncidentLinkUpsert)) *IncidentLinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IncidentLinkUpsert{UpdateSet: update})
	}))
	return u
}

// SetIncidentID sets the "incident_id" field.
func (u *IncidentLinkUpsertOne) SetIncidentID(v uuid.UUID) *IncidentLinkUpsertOne {
	return u.Update(func(s *IncidentLinkUpsert) {
		s.SetIncidentID(v)
	})
}

// UpdateIncidentID sets the "incident_id" field to the value that was provided on create.
func (u *IncidentLinkUpsertOne) UpdateIncidentID() *IncidentLinkUpsertOne {
	return u.Update(func(s *IncidentLinkUpsert) {
		s.UpdateIncidentID()
	})
}

// SetLinkedIncidentID sets the "linked_incident_id" field.
func (u *IncidentLinkUpsertOne) SetLinkedIncidentID(v uuid.UUID) *IncidentLinkUpsertOne {
	return u.Update(func(s *IncidentLinkUpsert) {
		s.SetLinkedIncidentID(v)
	})
}

// UpdateLinkedIncidentID sets the "linked_incident_id" field to the value that was provided on create.
func (u *IncidentLinkUpsertOne) UpdateLinkedIncidentID() *IncidentLinkUpsertOne {
	return u.Update(func(s *IncidentLinkUpsert) {
		s.UpdateLinkedIncidentID()
	})
}

// SetDescription sets the "description" field.
func (u *IncidentLinkUpsertOne) SetDescription(v string) *IncidentLinkUpsertOne {
	return u.Update(func(s *IncidentLinkUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *IncidentLinkUpsertOne) UpdateDescription() *IncidentLinkUpsertOne {
	return u.Update(func(s *IncidentLinkUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *IncidentLinkUpsertOne) ClearDescription() *IncidentLinkUpsertOne {
	return u.Update(func(s *IncidentLinkUpsert) {
		s.ClearDescription()
	})
}

// SetLinkType sets the "link_type" field.
func (u *IncidentLinkUpsertOne) SetLinkType(v incidentlink.LinkType) *IncidentLinkUpsertOne {
	return u.Update(func(s *IncidentLinkUpsert) {
		s.SetLinkType(v)
	})
}

// UpdateLinkType sets the "link_type" field to the value that was provided on create.
func (u *IncidentLinkUpsertOne) UpdateLinkType() *IncidentLinkUpsertOne {
	return u.Update(func(s *IncidentLinkUpsert) {
		s.UpdateLinkType()
	})
}

// Exec executes the query.
func (u *IncidentLinkUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IncidentLinkCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IncidentLinkUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *IncidentLinkUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *IncidentLinkUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// IncidentLinkCreateBulk is the builder for creating many IncidentLink entities in bulk.
type IncidentLinkCreateBulk struct {
	config
	err      error
	builders []*IncidentLinkCreate
	conflict []sql.ConflictOption
}

// Save creates the IncidentLink entities in the database.
func (ilcb *IncidentLinkCreateBulk) Save(ctx context.Context) ([]*IncidentLink, error) {
	if ilcb.err != nil {
		return nil, ilcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ilcb.builders))
	nodes := make([]*IncidentLink, len(ilcb.builders))
	mutators := make([]Mutator, len(ilcb.builders))
	for i := range ilcb.builders {
		func(i int, root context.Context) {
			builder := ilcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IncidentLinkMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ilcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ilcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ilcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ilcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ilcb *IncidentLinkCreateBulk) SaveX(ctx context.Context) []*IncidentLink {
	v, err := ilcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ilcb *IncidentLinkCreateBulk) Exec(ctx context.Context) error {
	_, err := ilcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ilcb *IncidentLinkCreateBulk) ExecX(ctx context.Context) {
	if err := ilcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IncidentLink.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IncidentLinkUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (ilcb *IncidentLinkCreateBulk) OnConflict(opts ...sql.ConflictOption) *IncidentLinkUpsertBulk {
	ilcb.conflict = opts
	return &IncidentLinkUpsertBulk{
		create: ilcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IncidentLink.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ilcb *IncidentLinkCreateBulk) OnConflictColumns(columns ...string) *IncidentLinkUpsertBulk {
	ilcb.conflict = append(ilcb.conflict, sql.ConflictColumns(columns...))
	return &IncidentLinkUpsertBulk{
		create: ilcb,
	}
}

// IncidentLinkUpsertBulk is the builder for "upsert"-ing
// a bulk of IncidentLink nodes.
type IncidentLinkUpsertBulk struct {
	create *IncidentLinkCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.IncidentLink.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *IncidentLinkUpsertBulk) UpdateNewValues() *IncidentLinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.TenantID(); exists {
				s.SetIgnore(incidentlink.FieldTenantID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IncidentLink.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *IncidentLinkUpsertBulk) Ignore() *IncidentLinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IncidentLinkUpsertBulk) DoNothing() *IncidentLinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IncidentLinkCreateBulk.OnConflict
// documentation for more info.
func (u *IncidentLinkUpsertBulk) Update(set func(*IncidentLinkUpsert)) *IncidentLinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IncidentLinkUpsert{UpdateSet: update})
	}))
	return u
}

// SetIncidentID sets the "incident_id" field.
func (u *IncidentLinkUpsertBulk) SetIncidentID(v uuid.UUID) *IncidentLinkUpsertBulk {
	return u.Update(func(s *IncidentLinkUpsert) {
		s.SetIncidentID(v)
	})
}

// UpdateIncidentID sets the "incident_id" field to the value that was provided on create.
func (u *IncidentLinkUpsertBulk) UpdateIncidentID() *IncidentLinkUpsertBulk {
	return u.Update(func(s *IncidentLinkUpsert) {
		s.UpdateIncidentID()
	})
}

// SetLinkedIncidentID sets the "linked_incident_id" field.
func (u *IncidentLinkUpsertBulk) SetLinkedIncidentID(v uuid.UUID) *IncidentLinkUpsertBulk {
	return u.Update(func(s *IncidentLinkUpsert) {
		s.SetLinkedIncidentID(v)
	})
}

// UpdateLinkedIncidentID sets the "linked_incident_id" field to the value that was provided on create.
func (u *IncidentLinkUpsertBulk) UpdateLinkedIncidentID() *IncidentLinkUpsertBulk {
	return u.Update(func(s *IncidentLinkUpsert) {
		s.UpdateLinkedIncidentID()
	})
}

// SetDescription sets the "description" field.
func (u *IncidentLinkUpsertBulk) SetDescription(v string) *IncidentLinkUpsertBulk {
	return u.Update(func(s *IncidentLinkUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *IncidentLinkUpsertBulk) UpdateDescription() *IncidentLinkUpsertBulk {
	return u.Update(func(s *IncidentLinkUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *IncidentLinkUpsertBulk) ClearDescription() *IncidentLinkUpsertBulk {
	return u.Update(func(s *IncidentLinkUpsert) {
		s.ClearDescription()
	})
}

// SetLinkType sets the "link_type" field.
func (u *IncidentLinkUpsertBulk) SetLinkType(v incidentlink.LinkType) *IncidentLinkUpsertBulk {
	return u.Update(func(s *IncidentLinkUpsert) {
		s.SetLinkType(v)
	})
}

// UpdateLinkType sets the "link_type" field to the value that was provided on create.
func (u *IncidentLinkUpsertBulk) UpdateLinkType() *IncidentLinkUpsertBulk {
	return u.Update(func(s *IncidentLinkUpsert) {
		s.UpdateLinkType()
	})
}

// Exec executes the query.
func (u *IncidentLinkUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the IncidentLinkCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IncidentLinkCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IncidentLinkUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
