// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/oncallalert"
	"github.com/rezible/rezible/ent/oncallalertinstance"
	"github.com/rezible/rezible/ent/user"
)

// OncallAlertInstanceCreate is the builder for creating a OncallAlertInstance entity.
type OncallAlertInstanceCreate struct {
	config
	mutation *OncallAlertInstanceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAlertID sets the "alert_id" field.
func (oaic *OncallAlertInstanceCreate) SetAlertID(u uuid.UUID) *OncallAlertInstanceCreate {
	oaic.mutation.SetAlertID(u)
	return oaic
}

// SetCreatedAt sets the "created_at" field.
func (oaic *OncallAlertInstanceCreate) SetCreatedAt(t time.Time) *OncallAlertInstanceCreate {
	oaic.mutation.SetCreatedAt(t)
	return oaic
}

// SetAckedAt sets the "acked_at" field.
func (oaic *OncallAlertInstanceCreate) SetAckedAt(t time.Time) *OncallAlertInstanceCreate {
	oaic.mutation.SetAckedAt(t)
	return oaic
}

// SetReceiverUserID sets the "receiver_user_id" field.
func (oaic *OncallAlertInstanceCreate) SetReceiverUserID(u uuid.UUID) *OncallAlertInstanceCreate {
	oaic.mutation.SetReceiverUserID(u)
	return oaic
}

// SetID sets the "id" field.
func (oaic *OncallAlertInstanceCreate) SetID(u uuid.UUID) *OncallAlertInstanceCreate {
	oaic.mutation.SetID(u)
	return oaic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (oaic *OncallAlertInstanceCreate) SetNillableID(u *uuid.UUID) *OncallAlertInstanceCreate {
	if u != nil {
		oaic.SetID(*u)
	}
	return oaic
}

// SetAlert sets the "alert" edge to the OncallAlert entity.
func (oaic *OncallAlertInstanceCreate) SetAlert(o *OncallAlert) *OncallAlertInstanceCreate {
	return oaic.SetAlertID(o.ID)
}

// SetReceiverID sets the "receiver" edge to the User entity by ID.
func (oaic *OncallAlertInstanceCreate) SetReceiverID(id uuid.UUID) *OncallAlertInstanceCreate {
	oaic.mutation.SetReceiverID(id)
	return oaic
}

// SetReceiver sets the "receiver" edge to the User entity.
func (oaic *OncallAlertInstanceCreate) SetReceiver(u *User) *OncallAlertInstanceCreate {
	return oaic.SetReceiverID(u.ID)
}

// Mutation returns the OncallAlertInstanceMutation object of the builder.
func (oaic *OncallAlertInstanceCreate) Mutation() *OncallAlertInstanceMutation {
	return oaic.mutation
}

// Save creates the OncallAlertInstance in the database.
func (oaic *OncallAlertInstanceCreate) Save(ctx context.Context) (*OncallAlertInstance, error) {
	oaic.defaults()
	return withHooks(ctx, oaic.sqlSave, oaic.mutation, oaic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oaic *OncallAlertInstanceCreate) SaveX(ctx context.Context) *OncallAlertInstance {
	v, err := oaic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oaic *OncallAlertInstanceCreate) Exec(ctx context.Context) error {
	_, err := oaic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oaic *OncallAlertInstanceCreate) ExecX(ctx context.Context) {
	if err := oaic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oaic *OncallAlertInstanceCreate) defaults() {
	if _, ok := oaic.mutation.ID(); !ok {
		v := oncallalertinstance.DefaultID()
		oaic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oaic *OncallAlertInstanceCreate) check() error {
	if _, ok := oaic.mutation.AlertID(); !ok {
		return &ValidationError{Name: "alert_id", err: errors.New(`ent: missing required field "OncallAlertInstance.alert_id"`)}
	}
	if _, ok := oaic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OncallAlertInstance.created_at"`)}
	}
	if _, ok := oaic.mutation.AckedAt(); !ok {
		return &ValidationError{Name: "acked_at", err: errors.New(`ent: missing required field "OncallAlertInstance.acked_at"`)}
	}
	if _, ok := oaic.mutation.ReceiverUserID(); !ok {
		return &ValidationError{Name: "receiver_user_id", err: errors.New(`ent: missing required field "OncallAlertInstance.receiver_user_id"`)}
	}
	if len(oaic.mutation.AlertIDs()) == 0 {
		return &ValidationError{Name: "alert", err: errors.New(`ent: missing required edge "OncallAlertInstance.alert"`)}
	}
	if len(oaic.mutation.ReceiverIDs()) == 0 {
		return &ValidationError{Name: "receiver", err: errors.New(`ent: missing required edge "OncallAlertInstance.receiver"`)}
	}
	return nil
}

func (oaic *OncallAlertInstanceCreate) sqlSave(ctx context.Context) (*OncallAlertInstance, error) {
	if err := oaic.check(); err != nil {
		return nil, err
	}
	_node, _spec := oaic.createSpec()
	if err := sqlgraph.CreateNode(ctx, oaic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	oaic.mutation.id = &_node.ID
	oaic.mutation.done = true
	return _node, nil
}

func (oaic *OncallAlertInstanceCreate) createSpec() (*OncallAlertInstance, *sqlgraph.CreateSpec) {
	var (
		_node = &OncallAlertInstance{config: oaic.config}
		_spec = sqlgraph.NewCreateSpec(oncallalertinstance.Table, sqlgraph.NewFieldSpec(oncallalertinstance.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = oaic.conflict
	if id, ok := oaic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := oaic.mutation.CreatedAt(); ok {
		_spec.SetField(oncallalertinstance.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := oaic.mutation.AckedAt(); ok {
		_spec.SetField(oncallalertinstance.FieldAckedAt, field.TypeTime, value)
		_node.AckedAt = value
	}
	if nodes := oaic.mutation.AlertIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oncallalertinstance.AlertTable,
			Columns: []string{oncallalertinstance.AlertColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallalert.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AlertID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oaic.mutation.ReceiverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallalertinstance.ReceiverTable,
			Columns: []string{oncallalertinstance.ReceiverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ReceiverUserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OncallAlertInstance.Create().
//		SetAlertID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OncallAlertInstanceUpsert) {
//			SetAlertID(v+v).
//		}).
//		Exec(ctx)
func (oaic *OncallAlertInstanceCreate) OnConflict(opts ...sql.ConflictOption) *OncallAlertInstanceUpsertOne {
	oaic.conflict = opts
	return &OncallAlertInstanceUpsertOne{
		create: oaic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OncallAlertInstance.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oaic *OncallAlertInstanceCreate) OnConflictColumns(columns ...string) *OncallAlertInstanceUpsertOne {
	oaic.conflict = append(oaic.conflict, sql.ConflictColumns(columns...))
	return &OncallAlertInstanceUpsertOne{
		create: oaic,
	}
}

type (
	// OncallAlertInstanceUpsertOne is the builder for "upsert"-ing
	//  one OncallAlertInstance node.
	OncallAlertInstanceUpsertOne struct {
		create *OncallAlertInstanceCreate
	}

	// OncallAlertInstanceUpsert is the "OnConflict" setter.
	OncallAlertInstanceUpsert struct {
		*sql.UpdateSet
	}
)

// SetAlertID sets the "alert_id" field.
func (u *OncallAlertInstanceUpsert) SetAlertID(v uuid.UUID) *OncallAlertInstanceUpsert {
	u.Set(oncallalertinstance.FieldAlertID, v)
	return u
}

// UpdateAlertID sets the "alert_id" field to the value that was provided on create.
func (u *OncallAlertInstanceUpsert) UpdateAlertID() *OncallAlertInstanceUpsert {
	u.SetExcluded(oncallalertinstance.FieldAlertID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *OncallAlertInstanceUpsert) SetCreatedAt(v time.Time) *OncallAlertInstanceUpsert {
	u.Set(oncallalertinstance.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OncallAlertInstanceUpsert) UpdateCreatedAt() *OncallAlertInstanceUpsert {
	u.SetExcluded(oncallalertinstance.FieldCreatedAt)
	return u
}

// SetAckedAt sets the "acked_at" field.
func (u *OncallAlertInstanceUpsert) SetAckedAt(v time.Time) *OncallAlertInstanceUpsert {
	u.Set(oncallalertinstance.FieldAckedAt, v)
	return u
}

// UpdateAckedAt sets the "acked_at" field to the value that was provided on create.
func (u *OncallAlertInstanceUpsert) UpdateAckedAt() *OncallAlertInstanceUpsert {
	u.SetExcluded(oncallalertinstance.FieldAckedAt)
	return u
}

// SetReceiverUserID sets the "receiver_user_id" field.
func (u *OncallAlertInstanceUpsert) SetReceiverUserID(v uuid.UUID) *OncallAlertInstanceUpsert {
	u.Set(oncallalertinstance.FieldReceiverUserID, v)
	return u
}

// UpdateReceiverUserID sets the "receiver_user_id" field to the value that was provided on create.
func (u *OncallAlertInstanceUpsert) UpdateReceiverUserID() *OncallAlertInstanceUpsert {
	u.SetExcluded(oncallalertinstance.FieldReceiverUserID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OncallAlertInstance.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oncallalertinstance.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OncallAlertInstanceUpsertOne) UpdateNewValues() *OncallAlertInstanceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(oncallalertinstance.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OncallAlertInstance.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OncallAlertInstanceUpsertOne) Ignore() *OncallAlertInstanceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OncallAlertInstanceUpsertOne) DoNothing() *OncallAlertInstanceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OncallAlertInstanceCreate.OnConflict
// documentation for more info.
func (u *OncallAlertInstanceUpsertOne) Update(set func(*OncallAlertInstanceUpsert)) *OncallAlertInstanceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OncallAlertInstanceUpsert{UpdateSet: update})
	}))
	return u
}

// SetAlertID sets the "alert_id" field.
func (u *OncallAlertInstanceUpsertOne) SetAlertID(v uuid.UUID) *OncallAlertInstanceUpsertOne {
	return u.Update(func(s *OncallAlertInstanceUpsert) {
		s.SetAlertID(v)
	})
}

// UpdateAlertID sets the "alert_id" field to the value that was provided on create.
func (u *OncallAlertInstanceUpsertOne) UpdateAlertID() *OncallAlertInstanceUpsertOne {
	return u.Update(func(s *OncallAlertInstanceUpsert) {
		s.UpdateAlertID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *OncallAlertInstanceUpsertOne) SetCreatedAt(v time.Time) *OncallAlertInstanceUpsertOne {
	return u.Update(func(s *OncallAlertInstanceUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OncallAlertInstanceUpsertOne) UpdateCreatedAt() *OncallAlertInstanceUpsertOne {
	return u.Update(func(s *OncallAlertInstanceUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetAckedAt sets the "acked_at" field.
func (u *OncallAlertInstanceUpsertOne) SetAckedAt(v time.Time) *OncallAlertInstanceUpsertOne {
	return u.Update(func(s *OncallAlertInstanceUpsert) {
		s.SetAckedAt(v)
	})
}

// UpdateAckedAt sets the "acked_at" field to the value that was provided on create.
func (u *OncallAlertInstanceUpsertOne) UpdateAckedAt() *OncallAlertInstanceUpsertOne {
	return u.Update(func(s *OncallAlertInstanceUpsert) {
		s.UpdateAckedAt()
	})
}

// SetReceiverUserID sets the "receiver_user_id" field.
func (u *OncallAlertInstanceUpsertOne) SetReceiverUserID(v uuid.UUID) *OncallAlertInstanceUpsertOne {
	return u.Update(func(s *OncallAlertInstanceUpsert) {
		s.SetReceiverUserID(v)
	})
}

// UpdateReceiverUserID sets the "receiver_user_id" field to the value that was provided on create.
func (u *OncallAlertInstanceUpsertOne) UpdateReceiverUserID() *OncallAlertInstanceUpsertOne {
	return u.Update(func(s *OncallAlertInstanceUpsert) {
		s.UpdateReceiverUserID()
	})
}

// Exec executes the query.
func (u *OncallAlertInstanceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OncallAlertInstanceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OncallAlertInstanceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OncallAlertInstanceUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: OncallAlertInstanceUpsertOne.ID is not supported by MySQL driver. Use OncallAlertInstanceUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OncallAlertInstanceUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OncallAlertInstanceCreateBulk is the builder for creating many OncallAlertInstance entities in bulk.
type OncallAlertInstanceCreateBulk struct {
	config
	err      error
	builders []*OncallAlertInstanceCreate
	conflict []sql.ConflictOption
}

// Save creates the OncallAlertInstance entities in the database.
func (oaicb *OncallAlertInstanceCreateBulk) Save(ctx context.Context) ([]*OncallAlertInstance, error) {
	if oaicb.err != nil {
		return nil, oaicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(oaicb.builders))
	nodes := make([]*OncallAlertInstance, len(oaicb.builders))
	mutators := make([]Mutator, len(oaicb.builders))
	for i := range oaicb.builders {
		func(i int, root context.Context) {
			builder := oaicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OncallAlertInstanceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oaicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = oaicb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oaicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oaicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oaicb *OncallAlertInstanceCreateBulk) SaveX(ctx context.Context) []*OncallAlertInstance {
	v, err := oaicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oaicb *OncallAlertInstanceCreateBulk) Exec(ctx context.Context) error {
	_, err := oaicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oaicb *OncallAlertInstanceCreateBulk) ExecX(ctx context.Context) {
	if err := oaicb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OncallAlertInstance.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OncallAlertInstanceUpsert) {
//			SetAlertID(v+v).
//		}).
//		Exec(ctx)
func (oaicb *OncallAlertInstanceCreateBulk) OnConflict(opts ...sql.ConflictOption) *OncallAlertInstanceUpsertBulk {
	oaicb.conflict = opts
	return &OncallAlertInstanceUpsertBulk{
		create: oaicb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OncallAlertInstance.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oaicb *OncallAlertInstanceCreateBulk) OnConflictColumns(columns ...string) *OncallAlertInstanceUpsertBulk {
	oaicb.conflict = append(oaicb.conflict, sql.ConflictColumns(columns...))
	return &OncallAlertInstanceUpsertBulk{
		create: oaicb,
	}
}

// OncallAlertInstanceUpsertBulk is the builder for "upsert"-ing
// a bulk of OncallAlertInstance nodes.
type OncallAlertInstanceUpsertBulk struct {
	create *OncallAlertInstanceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OncallAlertInstance.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oncallalertinstance.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OncallAlertInstanceUpsertBulk) UpdateNewValues() *OncallAlertInstanceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(oncallalertinstance.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OncallAlertInstance.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OncallAlertInstanceUpsertBulk) Ignore() *OncallAlertInstanceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OncallAlertInstanceUpsertBulk) DoNothing() *OncallAlertInstanceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OncallAlertInstanceCreateBulk.OnConflict
// documentation for more info.
func (u *OncallAlertInstanceUpsertBulk) Update(set func(*OncallAlertInstanceUpsert)) *OncallAlertInstanceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OncallAlertInstanceUpsert{UpdateSet: update})
	}))
	return u
}

// SetAlertID sets the "alert_id" field.
func (u *OncallAlertInstanceUpsertBulk) SetAlertID(v uuid.UUID) *OncallAlertInstanceUpsertBulk {
	return u.Update(func(s *OncallAlertInstanceUpsert) {
		s.SetAlertID(v)
	})
}

// UpdateAlertID sets the "alert_id" field to the value that was provided on create.
func (u *OncallAlertInstanceUpsertBulk) UpdateAlertID() *OncallAlertInstanceUpsertBulk {
	return u.Update(func(s *OncallAlertInstanceUpsert) {
		s.UpdateAlertID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *OncallAlertInstanceUpsertBulk) SetCreatedAt(v time.Time) *OncallAlertInstanceUpsertBulk {
	return u.Update(func(s *OncallAlertInstanceUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OncallAlertInstanceUpsertBulk) UpdateCreatedAt() *OncallAlertInstanceUpsertBulk {
	return u.Update(func(s *OncallAlertInstanceUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetAckedAt sets the "acked_at" field.
func (u *OncallAlertInstanceUpsertBulk) SetAckedAt(v time.Time) *OncallAlertInstanceUpsertBulk {
	return u.Update(func(s *OncallAlertInstanceUpsert) {
		s.SetAckedAt(v)
	})
}

// UpdateAckedAt sets the "acked_at" field to the value that was provided on create.
func (u *OncallAlertInstanceUpsertBulk) UpdateAckedAt() *OncallAlertInstanceUpsertBulk {
	return u.Update(func(s *OncallAlertInstanceUpsert) {
		s.UpdateAckedAt()
	})
}

// SetReceiverUserID sets the "receiver_user_id" field.
func (u *OncallAlertInstanceUpsertBulk) SetReceiverUserID(v uuid.UUID) *OncallAlertInstanceUpsertBulk {
	return u.Update(func(s *OncallAlertInstanceUpsert) {
		s.SetReceiverUserID(v)
	})
}

// UpdateReceiverUserID sets the "receiver_user_id" field to the value that was provided on create.
func (u *OncallAlertInstanceUpsertBulk) UpdateReceiverUserID() *OncallAlertInstanceUpsertBulk {
	return u.Update(func(s *OncallAlertInstanceUpsert) {
		s.UpdateReceiverUserID()
	})
}

// Exec executes the query.
func (u *OncallAlertInstanceUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OncallAlertInstanceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OncallAlertInstanceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OncallAlertInstanceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
