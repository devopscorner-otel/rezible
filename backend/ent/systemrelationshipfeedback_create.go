// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/systemcomponentsignal"
	"github.com/rezible/rezible/ent/systemrelationship"
	"github.com/rezible/rezible/ent/systemrelationshipfeedback"
)

// SystemRelationshipFeedbackCreate is the builder for creating a SystemRelationshipFeedback entity.
type SystemRelationshipFeedbackCreate struct {
	config
	mutation *SystemRelationshipFeedbackMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetRelationshipID sets the "relationship_id" field.
func (srfc *SystemRelationshipFeedbackCreate) SetRelationshipID(u uuid.UUID) *SystemRelationshipFeedbackCreate {
	srfc.mutation.SetRelationshipID(u)
	return srfc
}

// SetSignalID sets the "signal_id" field.
func (srfc *SystemRelationshipFeedbackCreate) SetSignalID(u uuid.UUID) *SystemRelationshipFeedbackCreate {
	srfc.mutation.SetSignalID(u)
	return srfc
}

// SetType sets the "type" field.
func (srfc *SystemRelationshipFeedbackCreate) SetType(s string) *SystemRelationshipFeedbackCreate {
	srfc.mutation.SetType(s)
	return srfc
}

// SetDescription sets the "description" field.
func (srfc *SystemRelationshipFeedbackCreate) SetDescription(s string) *SystemRelationshipFeedbackCreate {
	srfc.mutation.SetDescription(s)
	return srfc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (srfc *SystemRelationshipFeedbackCreate) SetNillableDescription(s *string) *SystemRelationshipFeedbackCreate {
	if s != nil {
		srfc.SetDescription(*s)
	}
	return srfc
}

// SetCreatedAt sets the "created_at" field.
func (srfc *SystemRelationshipFeedbackCreate) SetCreatedAt(t time.Time) *SystemRelationshipFeedbackCreate {
	srfc.mutation.SetCreatedAt(t)
	return srfc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (srfc *SystemRelationshipFeedbackCreate) SetNillableCreatedAt(t *time.Time) *SystemRelationshipFeedbackCreate {
	if t != nil {
		srfc.SetCreatedAt(*t)
	}
	return srfc
}

// SetID sets the "id" field.
func (srfc *SystemRelationshipFeedbackCreate) SetID(u uuid.UUID) *SystemRelationshipFeedbackCreate {
	srfc.mutation.SetID(u)
	return srfc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (srfc *SystemRelationshipFeedbackCreate) SetNillableID(u *uuid.UUID) *SystemRelationshipFeedbackCreate {
	if u != nil {
		srfc.SetID(*u)
	}
	return srfc
}

// SetSignal sets the "signal" edge to the SystemComponentSignal entity.
func (srfc *SystemRelationshipFeedbackCreate) SetSignal(s *SystemComponentSignal) *SystemRelationshipFeedbackCreate {
	return srfc.SetSignalID(s.ID)
}

// SetRelationship sets the "relationship" edge to the SystemRelationship entity.
func (srfc *SystemRelationshipFeedbackCreate) SetRelationship(s *SystemRelationship) *SystemRelationshipFeedbackCreate {
	return srfc.SetRelationshipID(s.ID)
}

// Mutation returns the SystemRelationshipFeedbackMutation object of the builder.
func (srfc *SystemRelationshipFeedbackCreate) Mutation() *SystemRelationshipFeedbackMutation {
	return srfc.mutation
}

// Save creates the SystemRelationshipFeedback in the database.
func (srfc *SystemRelationshipFeedbackCreate) Save(ctx context.Context) (*SystemRelationshipFeedback, error) {
	srfc.defaults()
	return withHooks(ctx, srfc.sqlSave, srfc.mutation, srfc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (srfc *SystemRelationshipFeedbackCreate) SaveX(ctx context.Context) *SystemRelationshipFeedback {
	v, err := srfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (srfc *SystemRelationshipFeedbackCreate) Exec(ctx context.Context) error {
	_, err := srfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (srfc *SystemRelationshipFeedbackCreate) ExecX(ctx context.Context) {
	if err := srfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (srfc *SystemRelationshipFeedbackCreate) defaults() {
	if _, ok := srfc.mutation.CreatedAt(); !ok {
		v := systemrelationshipfeedback.DefaultCreatedAt()
		srfc.mutation.SetCreatedAt(v)
	}
	if _, ok := srfc.mutation.ID(); !ok {
		v := systemrelationshipfeedback.DefaultID()
		srfc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (srfc *SystemRelationshipFeedbackCreate) check() error {
	if _, ok := srfc.mutation.RelationshipID(); !ok {
		return &ValidationError{Name: "relationship_id", err: errors.New(`ent: missing required field "SystemRelationshipFeedback.relationship_id"`)}
	}
	if _, ok := srfc.mutation.SignalID(); !ok {
		return &ValidationError{Name: "signal_id", err: errors.New(`ent: missing required field "SystemRelationshipFeedback.signal_id"`)}
	}
	if _, ok := srfc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "SystemRelationshipFeedback.type"`)}
	}
	if v, ok := srfc.mutation.GetType(); ok {
		if err := systemrelationshipfeedback.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "SystemRelationshipFeedback.type": %w`, err)}
		}
	}
	if _, ok := srfc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SystemRelationshipFeedback.created_at"`)}
	}
	if len(srfc.mutation.SignalIDs()) == 0 {
		return &ValidationError{Name: "signal", err: errors.New(`ent: missing required edge "SystemRelationshipFeedback.signal"`)}
	}
	if len(srfc.mutation.RelationshipIDs()) == 0 {
		return &ValidationError{Name: "relationship", err: errors.New(`ent: missing required edge "SystemRelationshipFeedback.relationship"`)}
	}
	return nil
}

func (srfc *SystemRelationshipFeedbackCreate) sqlSave(ctx context.Context) (*SystemRelationshipFeedback, error) {
	if err := srfc.check(); err != nil {
		return nil, err
	}
	_node, _spec := srfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, srfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	srfc.mutation.id = &_node.ID
	srfc.mutation.done = true
	return _node, nil
}

func (srfc *SystemRelationshipFeedbackCreate) createSpec() (*SystemRelationshipFeedback, *sqlgraph.CreateSpec) {
	var (
		_node = &SystemRelationshipFeedback{config: srfc.config}
		_spec = sqlgraph.NewCreateSpec(systemrelationshipfeedback.Table, sqlgraph.NewFieldSpec(systemrelationshipfeedback.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = srfc.conflict
	if id, ok := srfc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := srfc.mutation.GetType(); ok {
		_spec.SetField(systemrelationshipfeedback.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := srfc.mutation.Description(); ok {
		_spec.SetField(systemrelationshipfeedback.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := srfc.mutation.CreatedAt(); ok {
		_spec.SetField(systemrelationshipfeedback.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := srfc.mutation.SignalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemrelationshipfeedback.SignalTable,
			Columns: []string{systemrelationshipfeedback.SignalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentsignal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SignalID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := srfc.mutation.RelationshipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemrelationshipfeedback.RelationshipTable,
			Columns: []string{systemrelationshipfeedback.RelationshipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemrelationship.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RelationshipID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SystemRelationshipFeedback.Create().
//		SetRelationshipID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SystemRelationshipFeedbackUpsert) {
//			SetRelationshipID(v+v).
//		}).
//		Exec(ctx)
func (srfc *SystemRelationshipFeedbackCreate) OnConflict(opts ...sql.ConflictOption) *SystemRelationshipFeedbackUpsertOne {
	srfc.conflict = opts
	return &SystemRelationshipFeedbackUpsertOne{
		create: srfc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SystemRelationshipFeedback.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (srfc *SystemRelationshipFeedbackCreate) OnConflictColumns(columns ...string) *SystemRelationshipFeedbackUpsertOne {
	srfc.conflict = append(srfc.conflict, sql.ConflictColumns(columns...))
	return &SystemRelationshipFeedbackUpsertOne{
		create: srfc,
	}
}

type (
	// SystemRelationshipFeedbackUpsertOne is the builder for "upsert"-ing
	//  one SystemRelationshipFeedback node.
	SystemRelationshipFeedbackUpsertOne struct {
		create *SystemRelationshipFeedbackCreate
	}

	// SystemRelationshipFeedbackUpsert is the "OnConflict" setter.
	SystemRelationshipFeedbackUpsert struct {
		*sql.UpdateSet
	}
)

// SetRelationshipID sets the "relationship_id" field.
func (u *SystemRelationshipFeedbackUpsert) SetRelationshipID(v uuid.UUID) *SystemRelationshipFeedbackUpsert {
	u.Set(systemrelationshipfeedback.FieldRelationshipID, v)
	return u
}

// UpdateRelationshipID sets the "relationship_id" field to the value that was provided on create.
func (u *SystemRelationshipFeedbackUpsert) UpdateRelationshipID() *SystemRelationshipFeedbackUpsert {
	u.SetExcluded(systemrelationshipfeedback.FieldRelationshipID)
	return u
}

// SetSignalID sets the "signal_id" field.
func (u *SystemRelationshipFeedbackUpsert) SetSignalID(v uuid.UUID) *SystemRelationshipFeedbackUpsert {
	u.Set(systemrelationshipfeedback.FieldSignalID, v)
	return u
}

// UpdateSignalID sets the "signal_id" field to the value that was provided on create.
func (u *SystemRelationshipFeedbackUpsert) UpdateSignalID() *SystemRelationshipFeedbackUpsert {
	u.SetExcluded(systemrelationshipfeedback.FieldSignalID)
	return u
}

// SetType sets the "type" field.
func (u *SystemRelationshipFeedbackUpsert) SetType(v string) *SystemRelationshipFeedbackUpsert {
	u.Set(systemrelationshipfeedback.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *SystemRelationshipFeedbackUpsert) UpdateType() *SystemRelationshipFeedbackUpsert {
	u.SetExcluded(systemrelationshipfeedback.FieldType)
	return u
}

// SetDescription sets the "description" field.
func (u *SystemRelationshipFeedbackUpsert) SetDescription(v string) *SystemRelationshipFeedbackUpsert {
	u.Set(systemrelationshipfeedback.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SystemRelationshipFeedbackUpsert) UpdateDescription() *SystemRelationshipFeedbackUpsert {
	u.SetExcluded(systemrelationshipfeedback.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *SystemRelationshipFeedbackUpsert) ClearDescription() *SystemRelationshipFeedbackUpsert {
	u.SetNull(systemrelationshipfeedback.FieldDescription)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SystemRelationshipFeedbackUpsert) SetCreatedAt(v time.Time) *SystemRelationshipFeedbackUpsert {
	u.Set(systemrelationshipfeedback.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SystemRelationshipFeedbackUpsert) UpdateCreatedAt() *SystemRelationshipFeedbackUpsert {
	u.SetExcluded(systemrelationshipfeedback.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SystemRelationshipFeedback.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(systemrelationshipfeedback.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SystemRelationshipFeedbackUpsertOne) UpdateNewValues() *SystemRelationshipFeedbackUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(systemrelationshipfeedback.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SystemRelationshipFeedback.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SystemRelationshipFeedbackUpsertOne) Ignore() *SystemRelationshipFeedbackUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SystemRelationshipFeedbackUpsertOne) DoNothing() *SystemRelationshipFeedbackUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SystemRelationshipFeedbackCreate.OnConflict
// documentation for more info.
func (u *SystemRelationshipFeedbackUpsertOne) Update(set func(*SystemRelationshipFeedbackUpsert)) *SystemRelationshipFeedbackUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SystemRelationshipFeedbackUpsert{UpdateSet: update})
	}))
	return u
}

// SetRelationshipID sets the "relationship_id" field.
func (u *SystemRelationshipFeedbackUpsertOne) SetRelationshipID(v uuid.UUID) *SystemRelationshipFeedbackUpsertOne {
	return u.Update(func(s *SystemRelationshipFeedbackUpsert) {
		s.SetRelationshipID(v)
	})
}

// UpdateRelationshipID sets the "relationship_id" field to the value that was provided on create.
func (u *SystemRelationshipFeedbackUpsertOne) UpdateRelationshipID() *SystemRelationshipFeedbackUpsertOne {
	return u.Update(func(s *SystemRelationshipFeedbackUpsert) {
		s.UpdateRelationshipID()
	})
}

// SetSignalID sets the "signal_id" field.
func (u *SystemRelationshipFeedbackUpsertOne) SetSignalID(v uuid.UUID) *SystemRelationshipFeedbackUpsertOne {
	return u.Update(func(s *SystemRelationshipFeedbackUpsert) {
		s.SetSignalID(v)
	})
}

// UpdateSignalID sets the "signal_id" field to the value that was provided on create.
func (u *SystemRelationshipFeedbackUpsertOne) UpdateSignalID() *SystemRelationshipFeedbackUpsertOne {
	return u.Update(func(s *SystemRelationshipFeedbackUpsert) {
		s.UpdateSignalID()
	})
}

// SetType sets the "type" field.
func (u *SystemRelationshipFeedbackUpsertOne) SetType(v string) *SystemRelationshipFeedbackUpsertOne {
	return u.Update(func(s *SystemRelationshipFeedbackUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *SystemRelationshipFeedbackUpsertOne) UpdateType() *SystemRelationshipFeedbackUpsertOne {
	return u.Update(func(s *SystemRelationshipFeedbackUpsert) {
		s.UpdateType()
	})
}

// SetDescription sets the "description" field.
func (u *SystemRelationshipFeedbackUpsertOne) SetDescription(v string) *SystemRelationshipFeedbackUpsertOne {
	return u.Update(func(s *SystemRelationshipFeedbackUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SystemRelationshipFeedbackUpsertOne) UpdateDescription() *SystemRelationshipFeedbackUpsertOne {
	return u.Update(func(s *SystemRelationshipFeedbackUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *SystemRelationshipFeedbackUpsertOne) ClearDescription() *SystemRelationshipFeedbackUpsertOne {
	return u.Update(func(s *SystemRelationshipFeedbackUpsert) {
		s.ClearDescription()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SystemRelationshipFeedbackUpsertOne) SetCreatedAt(v time.Time) *SystemRelationshipFeedbackUpsertOne {
	return u.Update(func(s *SystemRelationshipFeedbackUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SystemRelationshipFeedbackUpsertOne) UpdateCreatedAt() *SystemRelationshipFeedbackUpsertOne {
	return u.Update(func(s *SystemRelationshipFeedbackUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *SystemRelationshipFeedbackUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SystemRelationshipFeedbackCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SystemRelationshipFeedbackUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SystemRelationshipFeedbackUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: SystemRelationshipFeedbackUpsertOne.ID is not supported by MySQL driver. Use SystemRelationshipFeedbackUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SystemRelationshipFeedbackUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SystemRelationshipFeedbackCreateBulk is the builder for creating many SystemRelationshipFeedback entities in bulk.
type SystemRelationshipFeedbackCreateBulk struct {
	config
	err      error
	builders []*SystemRelationshipFeedbackCreate
	conflict []sql.ConflictOption
}

// Save creates the SystemRelationshipFeedback entities in the database.
func (srfcb *SystemRelationshipFeedbackCreateBulk) Save(ctx context.Context) ([]*SystemRelationshipFeedback, error) {
	if srfcb.err != nil {
		return nil, srfcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(srfcb.builders))
	nodes := make([]*SystemRelationshipFeedback, len(srfcb.builders))
	mutators := make([]Mutator, len(srfcb.builders))
	for i := range srfcb.builders {
		func(i int, root context.Context) {
			builder := srfcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SystemRelationshipFeedbackMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, srfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = srfcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, srfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, srfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (srfcb *SystemRelationshipFeedbackCreateBulk) SaveX(ctx context.Context) []*SystemRelationshipFeedback {
	v, err := srfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (srfcb *SystemRelationshipFeedbackCreateBulk) Exec(ctx context.Context) error {
	_, err := srfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (srfcb *SystemRelationshipFeedbackCreateBulk) ExecX(ctx context.Context) {
	if err := srfcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SystemRelationshipFeedback.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SystemRelationshipFeedbackUpsert) {
//			SetRelationshipID(v+v).
//		}).
//		Exec(ctx)
func (srfcb *SystemRelationshipFeedbackCreateBulk) OnConflict(opts ...sql.ConflictOption) *SystemRelationshipFeedbackUpsertBulk {
	srfcb.conflict = opts
	return &SystemRelationshipFeedbackUpsertBulk{
		create: srfcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SystemRelationshipFeedback.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (srfcb *SystemRelationshipFeedbackCreateBulk) OnConflictColumns(columns ...string) *SystemRelationshipFeedbackUpsertBulk {
	srfcb.conflict = append(srfcb.conflict, sql.ConflictColumns(columns...))
	return &SystemRelationshipFeedbackUpsertBulk{
		create: srfcb,
	}
}

// SystemRelationshipFeedbackUpsertBulk is the builder for "upsert"-ing
// a bulk of SystemRelationshipFeedback nodes.
type SystemRelationshipFeedbackUpsertBulk struct {
	create *SystemRelationshipFeedbackCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SystemRelationshipFeedback.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(systemrelationshipfeedback.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SystemRelationshipFeedbackUpsertBulk) UpdateNewValues() *SystemRelationshipFeedbackUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(systemrelationshipfeedback.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SystemRelationshipFeedback.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SystemRelationshipFeedbackUpsertBulk) Ignore() *SystemRelationshipFeedbackUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SystemRelationshipFeedbackUpsertBulk) DoNothing() *SystemRelationshipFeedbackUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SystemRelationshipFeedbackCreateBulk.OnConflict
// documentation for more info.
func (u *SystemRelationshipFeedbackUpsertBulk) Update(set func(*SystemRelationshipFeedbackUpsert)) *SystemRelationshipFeedbackUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SystemRelationshipFeedbackUpsert{UpdateSet: update})
	}))
	return u
}

// SetRelationshipID sets the "relationship_id" field.
func (u *SystemRelationshipFeedbackUpsertBulk) SetRelationshipID(v uuid.UUID) *SystemRelationshipFeedbackUpsertBulk {
	return u.Update(func(s *SystemRelationshipFeedbackUpsert) {
		s.SetRelationshipID(v)
	})
}

// UpdateRelationshipID sets the "relationship_id" field to the value that was provided on create.
func (u *SystemRelationshipFeedbackUpsertBulk) UpdateRelationshipID() *SystemRelationshipFeedbackUpsertBulk {
	return u.Update(func(s *SystemRelationshipFeedbackUpsert) {
		s.UpdateRelationshipID()
	})
}

// SetSignalID sets the "signal_id" field.
func (u *SystemRelationshipFeedbackUpsertBulk) SetSignalID(v uuid.UUID) *SystemRelationshipFeedbackUpsertBulk {
	return u.Update(func(s *SystemRelationshipFeedbackUpsert) {
		s.SetSignalID(v)
	})
}

// UpdateSignalID sets the "signal_id" field to the value that was provided on create.
func (u *SystemRelationshipFeedbackUpsertBulk) UpdateSignalID() *SystemRelationshipFeedbackUpsertBulk {
	return u.Update(func(s *SystemRelationshipFeedbackUpsert) {
		s.UpdateSignalID()
	})
}

// SetType sets the "type" field.
func (u *SystemRelationshipFeedbackUpsertBulk) SetType(v string) *SystemRelationshipFeedbackUpsertBulk {
	return u.Update(func(s *SystemRelationshipFeedbackUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *SystemRelationshipFeedbackUpsertBulk) UpdateType() *SystemRelationshipFeedbackUpsertBulk {
	return u.Update(func(s *SystemRelationshipFeedbackUpsert) {
		s.UpdateType()
	})
}

// SetDescription sets the "description" field.
func (u *SystemRelationshipFeedbackUpsertBulk) SetDescription(v string) *SystemRelationshipFeedbackUpsertBulk {
	return u.Update(func(s *SystemRelationshipFeedbackUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SystemRelationshipFeedbackUpsertBulk) UpdateDescription() *SystemRelationshipFeedbackUpsertBulk {
	return u.Update(func(s *SystemRelationshipFeedbackUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *SystemRelationshipFeedbackUpsertBulk) ClearDescription() *SystemRelationshipFeedbackUpsertBulk {
	return u.Update(func(s *SystemRelationshipFeedbackUpsert) {
		s.ClearDescription()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SystemRelationshipFeedbackUpsertBulk) SetCreatedAt(v time.Time) *SystemRelationshipFeedbackUpsertBulk {
	return u.Update(func(s *SystemRelationshipFeedbackUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SystemRelationshipFeedbackUpsertBulk) UpdateCreatedAt() *SystemRelationshipFeedbackUpsertBulk {
	return u.Update(func(s *SystemRelationshipFeedbackUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *SystemRelationshipFeedbackUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SystemRelationshipFeedbackCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SystemRelationshipFeedbackCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SystemRelationshipFeedbackUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
