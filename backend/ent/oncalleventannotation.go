// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/oncalleventannotation"
	"github.com/rezible/rezible/ent/oncallroster"
	"github.com/rezible/rezible/ent/user"
)

// OncallEventAnnotation is the model entity for the OncallEventAnnotation schema.
type OncallEventAnnotation struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// RosterID holds the value of the "roster_id" field.
	RosterID uuid.UUID `json:"roster_id,omitempty"`
	// CreatorID holds the value of the "creator_id" field.
	CreatorID uuid.UUID `json:"creator_id,omitempty"`
	// EventID holds the value of the "event_id" field.
	EventID string `json:"event_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// MinutesOccupied holds the value of the "minutes_occupied" field.
	MinutesOccupied int `json:"minutes_occupied,omitempty"`
	// Notes holds the value of the "notes" field.
	Notes string `json:"notes,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OncallEventAnnotationQuery when eager-loading is set.
	Edges        OncallEventAnnotationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OncallEventAnnotationEdges holds the relations/edges for other nodes in the graph.
type OncallEventAnnotationEdges struct {
	// Roster holds the value of the roster edge.
	Roster *OncallRoster `json:"roster,omitempty"`
	// Creator holds the value of the creator edge.
	Creator *User `json:"creator,omitempty"`
	// Handovers holds the value of the handovers edge.
	Handovers []*OncallUserShiftHandover `json:"handovers,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// RosterOrErr returns the Roster value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OncallEventAnnotationEdges) RosterOrErr() (*OncallRoster, error) {
	if e.Roster != nil {
		return e.Roster, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: oncallroster.Label}
	}
	return nil, &NotLoadedError{edge: "roster"}
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OncallEventAnnotationEdges) CreatorOrErr() (*User, error) {
	if e.Creator != nil {
		return e.Creator, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// HandoversOrErr returns the Handovers value or an error if the edge
// was not loaded in eager-loading.
func (e OncallEventAnnotationEdges) HandoversOrErr() ([]*OncallUserShiftHandover, error) {
	if e.loadedTypes[2] {
		return e.Handovers, nil
	}
	return nil, &NotLoadedError{edge: "handovers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OncallEventAnnotation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case oncalleventannotation.FieldMinutesOccupied:
			values[i] = new(sql.NullInt64)
		case oncalleventannotation.FieldEventID, oncalleventannotation.FieldNotes:
			values[i] = new(sql.NullString)
		case oncalleventannotation.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case oncalleventannotation.FieldID, oncalleventannotation.FieldRosterID, oncalleventannotation.FieldCreatorID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OncallEventAnnotation fields.
func (oea *OncallEventAnnotation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case oncalleventannotation.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				oea.ID = *value
			}
		case oncalleventannotation.FieldRosterID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field roster_id", values[i])
			} else if value != nil {
				oea.RosterID = *value
			}
		case oncalleventannotation.FieldCreatorID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field creator_id", values[i])
			} else if value != nil {
				oea.CreatorID = *value
			}
		case oncalleventannotation.FieldEventID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_id", values[i])
			} else if value.Valid {
				oea.EventID = value.String
			}
		case oncalleventannotation.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				oea.CreatedAt = value.Time
			}
		case oncalleventannotation.FieldMinutesOccupied:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field minutes_occupied", values[i])
			} else if value.Valid {
				oea.MinutesOccupied = int(value.Int64)
			}
		case oncalleventannotation.FieldNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notes", values[i])
			} else if value.Valid {
				oea.Notes = value.String
			}
		default:
			oea.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OncallEventAnnotation.
// This includes values selected through modifiers, order, etc.
func (oea *OncallEventAnnotation) Value(name string) (ent.Value, error) {
	return oea.selectValues.Get(name)
}

// QueryRoster queries the "roster" edge of the OncallEventAnnotation entity.
func (oea *OncallEventAnnotation) QueryRoster() *OncallRosterQuery {
	return NewOncallEventAnnotationClient(oea.config).QueryRoster(oea)
}

// QueryCreator queries the "creator" edge of the OncallEventAnnotation entity.
func (oea *OncallEventAnnotation) QueryCreator() *UserQuery {
	return NewOncallEventAnnotationClient(oea.config).QueryCreator(oea)
}

// QueryHandovers queries the "handovers" edge of the OncallEventAnnotation entity.
func (oea *OncallEventAnnotation) QueryHandovers() *OncallUserShiftHandoverQuery {
	return NewOncallEventAnnotationClient(oea.config).QueryHandovers(oea)
}

// Update returns a builder for updating this OncallEventAnnotation.
// Note that you need to call OncallEventAnnotation.Unwrap() before calling this method if this OncallEventAnnotation
// was returned from a transaction, and the transaction was committed or rolled back.
func (oea *OncallEventAnnotation) Update() *OncallEventAnnotationUpdateOne {
	return NewOncallEventAnnotationClient(oea.config).UpdateOne(oea)
}

// Unwrap unwraps the OncallEventAnnotation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (oea *OncallEventAnnotation) Unwrap() *OncallEventAnnotation {
	_tx, ok := oea.config.driver.(*txDriver)
	if !ok {
		panic("ent: OncallEventAnnotation is not a transactional entity")
	}
	oea.config.driver = _tx.drv
	return oea
}

// String implements the fmt.Stringer.
func (oea *OncallEventAnnotation) String() string {
	var builder strings.Builder
	builder.WriteString("OncallEventAnnotation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", oea.ID))
	builder.WriteString("roster_id=")
	builder.WriteString(fmt.Sprintf("%v", oea.RosterID))
	builder.WriteString(", ")
	builder.WriteString("creator_id=")
	builder.WriteString(fmt.Sprintf("%v", oea.CreatorID))
	builder.WriteString(", ")
	builder.WriteString("event_id=")
	builder.WriteString(oea.EventID)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(oea.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("minutes_occupied=")
	builder.WriteString(fmt.Sprintf("%v", oea.MinutesOccupied))
	builder.WriteString(", ")
	builder.WriteString("notes=")
	builder.WriteString(oea.Notes)
	builder.WriteByte(')')
	return builder.String()
}

// OncallEventAnnotations is a parsable slice of OncallEventAnnotation.
type OncallEventAnnotations []*OncallEventAnnotation
