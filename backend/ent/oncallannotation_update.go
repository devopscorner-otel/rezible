// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/oncallannotation"
	"github.com/rezible/rezible/ent/oncallannotationalertfeedback"
	"github.com/rezible/rezible/ent/oncallevent"
	"github.com/rezible/rezible/ent/oncallroster"
	"github.com/rezible/rezible/ent/oncallusershifthandover"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/user"
)

// OncallAnnotationUpdate is the builder for updating OncallAnnotation entities.
type OncallAnnotationUpdate struct {
	config
	hooks     []Hook
	mutation  *OncallAnnotationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OncallAnnotationUpdate builder.
func (oau *OncallAnnotationUpdate) Where(ps ...predicate.OncallAnnotation) *OncallAnnotationUpdate {
	oau.mutation.Where(ps...)
	return oau
}

// SetEventID sets the "event_id" field.
func (oau *OncallAnnotationUpdate) SetEventID(u uuid.UUID) *OncallAnnotationUpdate {
	oau.mutation.SetEventID(u)
	return oau
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (oau *OncallAnnotationUpdate) SetNillableEventID(u *uuid.UUID) *OncallAnnotationUpdate {
	if u != nil {
		oau.SetEventID(*u)
	}
	return oau
}

// SetRosterID sets the "roster_id" field.
func (oau *OncallAnnotationUpdate) SetRosterID(u uuid.UUID) *OncallAnnotationUpdate {
	oau.mutation.SetRosterID(u)
	return oau
}

// SetNillableRosterID sets the "roster_id" field if the given value is not nil.
func (oau *OncallAnnotationUpdate) SetNillableRosterID(u *uuid.UUID) *OncallAnnotationUpdate {
	if u != nil {
		oau.SetRosterID(*u)
	}
	return oau
}

// SetCreatorID sets the "creator_id" field.
func (oau *OncallAnnotationUpdate) SetCreatorID(u uuid.UUID) *OncallAnnotationUpdate {
	oau.mutation.SetCreatorID(u)
	return oau
}

// SetNillableCreatorID sets the "creator_id" field if the given value is not nil.
func (oau *OncallAnnotationUpdate) SetNillableCreatorID(u *uuid.UUID) *OncallAnnotationUpdate {
	if u != nil {
		oau.SetCreatorID(*u)
	}
	return oau
}

// SetCreatedAt sets the "created_at" field.
func (oau *OncallAnnotationUpdate) SetCreatedAt(t time.Time) *OncallAnnotationUpdate {
	oau.mutation.SetCreatedAt(t)
	return oau
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oau *OncallAnnotationUpdate) SetNillableCreatedAt(t *time.Time) *OncallAnnotationUpdate {
	if t != nil {
		oau.SetCreatedAt(*t)
	}
	return oau
}

// SetMinutesOccupied sets the "minutes_occupied" field.
func (oau *OncallAnnotationUpdate) SetMinutesOccupied(i int) *OncallAnnotationUpdate {
	oau.mutation.ResetMinutesOccupied()
	oau.mutation.SetMinutesOccupied(i)
	return oau
}

// SetNillableMinutesOccupied sets the "minutes_occupied" field if the given value is not nil.
func (oau *OncallAnnotationUpdate) SetNillableMinutesOccupied(i *int) *OncallAnnotationUpdate {
	if i != nil {
		oau.SetMinutesOccupied(*i)
	}
	return oau
}

// AddMinutesOccupied adds i to the "minutes_occupied" field.
func (oau *OncallAnnotationUpdate) AddMinutesOccupied(i int) *OncallAnnotationUpdate {
	oau.mutation.AddMinutesOccupied(i)
	return oau
}

// SetNotes sets the "notes" field.
func (oau *OncallAnnotationUpdate) SetNotes(s string) *OncallAnnotationUpdate {
	oau.mutation.SetNotes(s)
	return oau
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (oau *OncallAnnotationUpdate) SetNillableNotes(s *string) *OncallAnnotationUpdate {
	if s != nil {
		oau.SetNotes(*s)
	}
	return oau
}

// SetEvent sets the "event" edge to the OncallEvent entity.
func (oau *OncallAnnotationUpdate) SetEvent(o *OncallEvent) *OncallAnnotationUpdate {
	return oau.SetEventID(o.ID)
}

// SetRoster sets the "roster" edge to the OncallRoster entity.
func (oau *OncallAnnotationUpdate) SetRoster(o *OncallRoster) *OncallAnnotationUpdate {
	return oau.SetRosterID(o.ID)
}

// SetCreator sets the "creator" edge to the User entity.
func (oau *OncallAnnotationUpdate) SetCreator(u *User) *OncallAnnotationUpdate {
	return oau.SetCreatorID(u.ID)
}

// SetAlertFeedbackID sets the "alert_feedback" edge to the OncallAnnotationAlertFeedback entity by ID.
func (oau *OncallAnnotationUpdate) SetAlertFeedbackID(id uuid.UUID) *OncallAnnotationUpdate {
	oau.mutation.SetAlertFeedbackID(id)
	return oau
}

// SetNillableAlertFeedbackID sets the "alert_feedback" edge to the OncallAnnotationAlertFeedback entity by ID if the given value is not nil.
func (oau *OncallAnnotationUpdate) SetNillableAlertFeedbackID(id *uuid.UUID) *OncallAnnotationUpdate {
	if id != nil {
		oau = oau.SetAlertFeedbackID(*id)
	}
	return oau
}

// SetAlertFeedback sets the "alert_feedback" edge to the OncallAnnotationAlertFeedback entity.
func (oau *OncallAnnotationUpdate) SetAlertFeedback(o *OncallAnnotationAlertFeedback) *OncallAnnotationUpdate {
	return oau.SetAlertFeedbackID(o.ID)
}

// AddHandoverIDs adds the "handovers" edge to the OncallUserShiftHandover entity by IDs.
func (oau *OncallAnnotationUpdate) AddHandoverIDs(ids ...uuid.UUID) *OncallAnnotationUpdate {
	oau.mutation.AddHandoverIDs(ids...)
	return oau
}

// AddHandovers adds the "handovers" edges to the OncallUserShiftHandover entity.
func (oau *OncallAnnotationUpdate) AddHandovers(o ...*OncallUserShiftHandover) *OncallAnnotationUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oau.AddHandoverIDs(ids...)
}

// Mutation returns the OncallAnnotationMutation object of the builder.
func (oau *OncallAnnotationUpdate) Mutation() *OncallAnnotationMutation {
	return oau.mutation
}

// ClearEvent clears the "event" edge to the OncallEvent entity.
func (oau *OncallAnnotationUpdate) ClearEvent() *OncallAnnotationUpdate {
	oau.mutation.ClearEvent()
	return oau
}

// ClearRoster clears the "roster" edge to the OncallRoster entity.
func (oau *OncallAnnotationUpdate) ClearRoster() *OncallAnnotationUpdate {
	oau.mutation.ClearRoster()
	return oau
}

// ClearCreator clears the "creator" edge to the User entity.
func (oau *OncallAnnotationUpdate) ClearCreator() *OncallAnnotationUpdate {
	oau.mutation.ClearCreator()
	return oau
}

// ClearAlertFeedback clears the "alert_feedback" edge to the OncallAnnotationAlertFeedback entity.
func (oau *OncallAnnotationUpdate) ClearAlertFeedback() *OncallAnnotationUpdate {
	oau.mutation.ClearAlertFeedback()
	return oau
}

// ClearHandovers clears all "handovers" edges to the OncallUserShiftHandover entity.
func (oau *OncallAnnotationUpdate) ClearHandovers() *OncallAnnotationUpdate {
	oau.mutation.ClearHandovers()
	return oau
}

// RemoveHandoverIDs removes the "handovers" edge to OncallUserShiftHandover entities by IDs.
func (oau *OncallAnnotationUpdate) RemoveHandoverIDs(ids ...uuid.UUID) *OncallAnnotationUpdate {
	oau.mutation.RemoveHandoverIDs(ids...)
	return oau
}

// RemoveHandovers removes "handovers" edges to OncallUserShiftHandover entities.
func (oau *OncallAnnotationUpdate) RemoveHandovers(o ...*OncallUserShiftHandover) *OncallAnnotationUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oau.RemoveHandoverIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oau *OncallAnnotationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, oau.sqlSave, oau.mutation, oau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oau *OncallAnnotationUpdate) SaveX(ctx context.Context) int {
	affected, err := oau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oau *OncallAnnotationUpdate) Exec(ctx context.Context) error {
	_, err := oau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oau *OncallAnnotationUpdate) ExecX(ctx context.Context) {
	if err := oau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oau *OncallAnnotationUpdate) check() error {
	if oau.mutation.EventCleared() && len(oau.mutation.EventIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallAnnotation.event"`)
	}
	if oau.mutation.RosterCleared() && len(oau.mutation.RosterIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallAnnotation.roster"`)
	}
	if oau.mutation.CreatorCleared() && len(oau.mutation.CreatorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallAnnotation.creator"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (oau *OncallAnnotationUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OncallAnnotationUpdate {
	oau.modifiers = append(oau.modifiers, modifiers...)
	return oau
}

func (oau *OncallAnnotationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := oau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(oncallannotation.Table, oncallannotation.Columns, sqlgraph.NewFieldSpec(oncallannotation.FieldID, field.TypeUUID))
	if ps := oau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oau.mutation.CreatedAt(); ok {
		_spec.SetField(oncallannotation.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := oau.mutation.MinutesOccupied(); ok {
		_spec.SetField(oncallannotation.FieldMinutesOccupied, field.TypeInt, value)
	}
	if value, ok := oau.mutation.AddedMinutesOccupied(); ok {
		_spec.AddField(oncallannotation.FieldMinutesOccupied, field.TypeInt, value)
	}
	if value, ok := oau.mutation.Notes(); ok {
		_spec.SetField(oncallannotation.FieldNotes, field.TypeString, value)
	}
	if oau.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallannotation.EventTable,
			Columns: []string{oncallannotation.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallevent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oau.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallannotation.EventTable,
			Columns: []string{oncallannotation.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallevent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oau.mutation.RosterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallannotation.RosterTable,
			Columns: []string{oncallannotation.RosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oau.mutation.RosterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallannotation.RosterTable,
			Columns: []string{oncallannotation.RosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oau.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallannotation.CreatorTable,
			Columns: []string{oncallannotation.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oau.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallannotation.CreatorTable,
			Columns: []string{oncallannotation.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oau.mutation.AlertFeedbackCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oncallannotation.AlertFeedbackTable,
			Columns: []string{oncallannotation.AlertFeedbackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallannotationalertfeedback.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oau.mutation.AlertFeedbackIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oncallannotation.AlertFeedbackTable,
			Columns: []string{oncallannotation.AlertFeedbackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallannotationalertfeedback.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oau.mutation.HandoversCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   oncallannotation.HandoversTable,
			Columns: oncallannotation.HandoversPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallusershifthandover.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oau.mutation.RemovedHandoversIDs(); len(nodes) > 0 && !oau.mutation.HandoversCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   oncallannotation.HandoversTable,
			Columns: oncallannotation.HandoversPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallusershifthandover.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oau.mutation.HandoversIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   oncallannotation.HandoversTable,
			Columns: oncallannotation.HandoversPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallusershifthandover.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(oau.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, oau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oncallannotation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	oau.mutation.done = true
	return n, nil
}

// OncallAnnotationUpdateOne is the builder for updating a single OncallAnnotation entity.
type OncallAnnotationUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OncallAnnotationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEventID sets the "event_id" field.
func (oauo *OncallAnnotationUpdateOne) SetEventID(u uuid.UUID) *OncallAnnotationUpdateOne {
	oauo.mutation.SetEventID(u)
	return oauo
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (oauo *OncallAnnotationUpdateOne) SetNillableEventID(u *uuid.UUID) *OncallAnnotationUpdateOne {
	if u != nil {
		oauo.SetEventID(*u)
	}
	return oauo
}

// SetRosterID sets the "roster_id" field.
func (oauo *OncallAnnotationUpdateOne) SetRosterID(u uuid.UUID) *OncallAnnotationUpdateOne {
	oauo.mutation.SetRosterID(u)
	return oauo
}

// SetNillableRosterID sets the "roster_id" field if the given value is not nil.
func (oauo *OncallAnnotationUpdateOne) SetNillableRosterID(u *uuid.UUID) *OncallAnnotationUpdateOne {
	if u != nil {
		oauo.SetRosterID(*u)
	}
	return oauo
}

// SetCreatorID sets the "creator_id" field.
func (oauo *OncallAnnotationUpdateOne) SetCreatorID(u uuid.UUID) *OncallAnnotationUpdateOne {
	oauo.mutation.SetCreatorID(u)
	return oauo
}

// SetNillableCreatorID sets the "creator_id" field if the given value is not nil.
func (oauo *OncallAnnotationUpdateOne) SetNillableCreatorID(u *uuid.UUID) *OncallAnnotationUpdateOne {
	if u != nil {
		oauo.SetCreatorID(*u)
	}
	return oauo
}

// SetCreatedAt sets the "created_at" field.
func (oauo *OncallAnnotationUpdateOne) SetCreatedAt(t time.Time) *OncallAnnotationUpdateOne {
	oauo.mutation.SetCreatedAt(t)
	return oauo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oauo *OncallAnnotationUpdateOne) SetNillableCreatedAt(t *time.Time) *OncallAnnotationUpdateOne {
	if t != nil {
		oauo.SetCreatedAt(*t)
	}
	return oauo
}

// SetMinutesOccupied sets the "minutes_occupied" field.
func (oauo *OncallAnnotationUpdateOne) SetMinutesOccupied(i int) *OncallAnnotationUpdateOne {
	oauo.mutation.ResetMinutesOccupied()
	oauo.mutation.SetMinutesOccupied(i)
	return oauo
}

// SetNillableMinutesOccupied sets the "minutes_occupied" field if the given value is not nil.
func (oauo *OncallAnnotationUpdateOne) SetNillableMinutesOccupied(i *int) *OncallAnnotationUpdateOne {
	if i != nil {
		oauo.SetMinutesOccupied(*i)
	}
	return oauo
}

// AddMinutesOccupied adds i to the "minutes_occupied" field.
func (oauo *OncallAnnotationUpdateOne) AddMinutesOccupied(i int) *OncallAnnotationUpdateOne {
	oauo.mutation.AddMinutesOccupied(i)
	return oauo
}

// SetNotes sets the "notes" field.
func (oauo *OncallAnnotationUpdateOne) SetNotes(s string) *OncallAnnotationUpdateOne {
	oauo.mutation.SetNotes(s)
	return oauo
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (oauo *OncallAnnotationUpdateOne) SetNillableNotes(s *string) *OncallAnnotationUpdateOne {
	if s != nil {
		oauo.SetNotes(*s)
	}
	return oauo
}

// SetEvent sets the "event" edge to the OncallEvent entity.
func (oauo *OncallAnnotationUpdateOne) SetEvent(o *OncallEvent) *OncallAnnotationUpdateOne {
	return oauo.SetEventID(o.ID)
}

// SetRoster sets the "roster" edge to the OncallRoster entity.
func (oauo *OncallAnnotationUpdateOne) SetRoster(o *OncallRoster) *OncallAnnotationUpdateOne {
	return oauo.SetRosterID(o.ID)
}

// SetCreator sets the "creator" edge to the User entity.
func (oauo *OncallAnnotationUpdateOne) SetCreator(u *User) *OncallAnnotationUpdateOne {
	return oauo.SetCreatorID(u.ID)
}

// SetAlertFeedbackID sets the "alert_feedback" edge to the OncallAnnotationAlertFeedback entity by ID.
func (oauo *OncallAnnotationUpdateOne) SetAlertFeedbackID(id uuid.UUID) *OncallAnnotationUpdateOne {
	oauo.mutation.SetAlertFeedbackID(id)
	return oauo
}

// SetNillableAlertFeedbackID sets the "alert_feedback" edge to the OncallAnnotationAlertFeedback entity by ID if the given value is not nil.
func (oauo *OncallAnnotationUpdateOne) SetNillableAlertFeedbackID(id *uuid.UUID) *OncallAnnotationUpdateOne {
	if id != nil {
		oauo = oauo.SetAlertFeedbackID(*id)
	}
	return oauo
}

// SetAlertFeedback sets the "alert_feedback" edge to the OncallAnnotationAlertFeedback entity.
func (oauo *OncallAnnotationUpdateOne) SetAlertFeedback(o *OncallAnnotationAlertFeedback) *OncallAnnotationUpdateOne {
	return oauo.SetAlertFeedbackID(o.ID)
}

// AddHandoverIDs adds the "handovers" edge to the OncallUserShiftHandover entity by IDs.
func (oauo *OncallAnnotationUpdateOne) AddHandoverIDs(ids ...uuid.UUID) *OncallAnnotationUpdateOne {
	oauo.mutation.AddHandoverIDs(ids...)
	return oauo
}

// AddHandovers adds the "handovers" edges to the OncallUserShiftHandover entity.
func (oauo *OncallAnnotationUpdateOne) AddHandovers(o ...*OncallUserShiftHandover) *OncallAnnotationUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oauo.AddHandoverIDs(ids...)
}

// Mutation returns the OncallAnnotationMutation object of the builder.
func (oauo *OncallAnnotationUpdateOne) Mutation() *OncallAnnotationMutation {
	return oauo.mutation
}

// ClearEvent clears the "event" edge to the OncallEvent entity.
func (oauo *OncallAnnotationUpdateOne) ClearEvent() *OncallAnnotationUpdateOne {
	oauo.mutation.ClearEvent()
	return oauo
}

// ClearRoster clears the "roster" edge to the OncallRoster entity.
func (oauo *OncallAnnotationUpdateOne) ClearRoster() *OncallAnnotationUpdateOne {
	oauo.mutation.ClearRoster()
	return oauo
}

// ClearCreator clears the "creator" edge to the User entity.
func (oauo *OncallAnnotationUpdateOne) ClearCreator() *OncallAnnotationUpdateOne {
	oauo.mutation.ClearCreator()
	return oauo
}

// ClearAlertFeedback clears the "alert_feedback" edge to the OncallAnnotationAlertFeedback entity.
func (oauo *OncallAnnotationUpdateOne) ClearAlertFeedback() *OncallAnnotationUpdateOne {
	oauo.mutation.ClearAlertFeedback()
	return oauo
}

// ClearHandovers clears all "handovers" edges to the OncallUserShiftHandover entity.
func (oauo *OncallAnnotationUpdateOne) ClearHandovers() *OncallAnnotationUpdateOne {
	oauo.mutation.ClearHandovers()
	return oauo
}

// RemoveHandoverIDs removes the "handovers" edge to OncallUserShiftHandover entities by IDs.
func (oauo *OncallAnnotationUpdateOne) RemoveHandoverIDs(ids ...uuid.UUID) *OncallAnnotationUpdateOne {
	oauo.mutation.RemoveHandoverIDs(ids...)
	return oauo
}

// RemoveHandovers removes "handovers" edges to OncallUserShiftHandover entities.
func (oauo *OncallAnnotationUpdateOne) RemoveHandovers(o ...*OncallUserShiftHandover) *OncallAnnotationUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oauo.RemoveHandoverIDs(ids...)
}

// Where appends a list predicates to the OncallAnnotationUpdate builder.
func (oauo *OncallAnnotationUpdateOne) Where(ps ...predicate.OncallAnnotation) *OncallAnnotationUpdateOne {
	oauo.mutation.Where(ps...)
	return oauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oauo *OncallAnnotationUpdateOne) Select(field string, fields ...string) *OncallAnnotationUpdateOne {
	oauo.fields = append([]string{field}, fields...)
	return oauo
}

// Save executes the query and returns the updated OncallAnnotation entity.
func (oauo *OncallAnnotationUpdateOne) Save(ctx context.Context) (*OncallAnnotation, error) {
	return withHooks(ctx, oauo.sqlSave, oauo.mutation, oauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oauo *OncallAnnotationUpdateOne) SaveX(ctx context.Context) *OncallAnnotation {
	node, err := oauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oauo *OncallAnnotationUpdateOne) Exec(ctx context.Context) error {
	_, err := oauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oauo *OncallAnnotationUpdateOne) ExecX(ctx context.Context) {
	if err := oauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oauo *OncallAnnotationUpdateOne) check() error {
	if oauo.mutation.EventCleared() && len(oauo.mutation.EventIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallAnnotation.event"`)
	}
	if oauo.mutation.RosterCleared() && len(oauo.mutation.RosterIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallAnnotation.roster"`)
	}
	if oauo.mutation.CreatorCleared() && len(oauo.mutation.CreatorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallAnnotation.creator"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (oauo *OncallAnnotationUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OncallAnnotationUpdateOne {
	oauo.modifiers = append(oauo.modifiers, modifiers...)
	return oauo
}

func (oauo *OncallAnnotationUpdateOne) sqlSave(ctx context.Context) (_node *OncallAnnotation, err error) {
	if err := oauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(oncallannotation.Table, oncallannotation.Columns, sqlgraph.NewFieldSpec(oncallannotation.FieldID, field.TypeUUID))
	id, ok := oauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OncallAnnotation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oncallannotation.FieldID)
		for _, f := range fields {
			if !oncallannotation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oncallannotation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oauo.mutation.CreatedAt(); ok {
		_spec.SetField(oncallannotation.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := oauo.mutation.MinutesOccupied(); ok {
		_spec.SetField(oncallannotation.FieldMinutesOccupied, field.TypeInt, value)
	}
	if value, ok := oauo.mutation.AddedMinutesOccupied(); ok {
		_spec.AddField(oncallannotation.FieldMinutesOccupied, field.TypeInt, value)
	}
	if value, ok := oauo.mutation.Notes(); ok {
		_spec.SetField(oncallannotation.FieldNotes, field.TypeString, value)
	}
	if oauo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallannotation.EventTable,
			Columns: []string{oncallannotation.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallevent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oauo.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallannotation.EventTable,
			Columns: []string{oncallannotation.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallevent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oauo.mutation.RosterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallannotation.RosterTable,
			Columns: []string{oncallannotation.RosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oauo.mutation.RosterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallannotation.RosterTable,
			Columns: []string{oncallannotation.RosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oauo.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallannotation.CreatorTable,
			Columns: []string{oncallannotation.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oauo.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallannotation.CreatorTable,
			Columns: []string{oncallannotation.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oauo.mutation.AlertFeedbackCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oncallannotation.AlertFeedbackTable,
			Columns: []string{oncallannotation.AlertFeedbackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallannotationalertfeedback.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oauo.mutation.AlertFeedbackIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oncallannotation.AlertFeedbackTable,
			Columns: []string{oncallannotation.AlertFeedbackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallannotationalertfeedback.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oauo.mutation.HandoversCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   oncallannotation.HandoversTable,
			Columns: oncallannotation.HandoversPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallusershifthandover.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oauo.mutation.RemovedHandoversIDs(); len(nodes) > 0 && !oauo.mutation.HandoversCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   oncallannotation.HandoversTable,
			Columns: oncallannotation.HandoversPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallusershifthandover.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oauo.mutation.HandoversIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   oncallannotation.HandoversTable,
			Columns: oncallannotation.HandoversPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallusershifthandover.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(oauo.modifiers...)
	_node = &OncallAnnotation{config: oauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oncallannotation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oauo.mutation.done = true
	return _node, nil
}
