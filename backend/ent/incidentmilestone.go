// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/incident"
	"github.com/rezible/rezible/ent/incidentmilestone"
)

// IncidentMilestone is the model entity for the IncidentMilestone schema.
type IncidentMilestone struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// IncidentID holds the value of the "incident_id" field.
	IncidentID uuid.UUID `json:"incident_id,omitempty"`
	// Kind holds the value of the "kind" field.
	Kind incidentmilestone.Kind `json:"kind,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Time holds the value of the "time" field.
	Time time.Time `json:"time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IncidentMilestoneQuery when eager-loading is set.
	Edges        IncidentMilestoneEdges `json:"edges"`
	selectValues sql.SelectValues
}

// IncidentMilestoneEdges holds the relations/edges for other nodes in the graph.
type IncidentMilestoneEdges struct {
	// Incident holds the value of the incident edge.
	Incident *Incident `json:"incident,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// IncidentOrErr returns the Incident value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IncidentMilestoneEdges) IncidentOrErr() (*Incident, error) {
	if e.Incident != nil {
		return e.Incident, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: incident.Label}
	}
	return nil, &NotLoadedError{edge: "incident"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IncidentMilestone) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case incidentmilestone.FieldKind, incidentmilestone.FieldDescription:
			values[i] = new(sql.NullString)
		case incidentmilestone.FieldTime:
			values[i] = new(sql.NullTime)
		case incidentmilestone.FieldID, incidentmilestone.FieldIncidentID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IncidentMilestone fields.
func (im *IncidentMilestone) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case incidentmilestone.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				im.ID = *value
			}
		case incidentmilestone.FieldIncidentID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field incident_id", values[i])
			} else if value != nil {
				im.IncidentID = *value
			}
		case incidentmilestone.FieldKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				im.Kind = incidentmilestone.Kind(value.String)
			}
		case incidentmilestone.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				im.Description = value.String
			}
		case incidentmilestone.FieldTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field time", values[i])
			} else if value.Valid {
				im.Time = value.Time
			}
		default:
			im.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the IncidentMilestone.
// This includes values selected through modifiers, order, etc.
func (im *IncidentMilestone) Value(name string) (ent.Value, error) {
	return im.selectValues.Get(name)
}

// QueryIncident queries the "incident" edge of the IncidentMilestone entity.
func (im *IncidentMilestone) QueryIncident() *IncidentQuery {
	return NewIncidentMilestoneClient(im.config).QueryIncident(im)
}

// Update returns a builder for updating this IncidentMilestone.
// Note that you need to call IncidentMilestone.Unwrap() before calling this method if this IncidentMilestone
// was returned from a transaction, and the transaction was committed or rolled back.
func (im *IncidentMilestone) Update() *IncidentMilestoneUpdateOne {
	return NewIncidentMilestoneClient(im.config).UpdateOne(im)
}

// Unwrap unwraps the IncidentMilestone entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (im *IncidentMilestone) Unwrap() *IncidentMilestone {
	_tx, ok := im.config.driver.(*txDriver)
	if !ok {
		panic("ent: IncidentMilestone is not a transactional entity")
	}
	im.config.driver = _tx.drv
	return im
}

// String implements the fmt.Stringer.
func (im *IncidentMilestone) String() string {
	var builder strings.Builder
	builder.WriteString("IncidentMilestone(")
	builder.WriteString(fmt.Sprintf("id=%v, ", im.ID))
	builder.WriteString("incident_id=")
	builder.WriteString(fmt.Sprintf("%v", im.IncidentID))
	builder.WriteString(", ")
	builder.WriteString("kind=")
	builder.WriteString(fmt.Sprintf("%v", im.Kind))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(im.Description)
	builder.WriteString(", ")
	builder.WriteString("time=")
	builder.WriteString(im.Time.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// IncidentMilestones is a parsable slice of IncidentMilestone.
type IncidentMilestones []*IncidentMilestone
