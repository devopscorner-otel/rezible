// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/oncallalert"
	"github.com/rezible/rezible/ent/oncallroster"
)

// OncallAlert is the model entity for the OncallAlert schema.
type OncallAlert struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// RosterID holds the value of the "roster_id" field.
	RosterID uuid.UUID `json:"roster_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp time.Time `json:"timestamp,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OncallAlertQuery when eager-loading is set.
	Edges        OncallAlertEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OncallAlertEdges holds the relations/edges for other nodes in the graph.
type OncallAlertEdges struct {
	// Instances holds the value of the instances edge.
	Instances []*OncallAlertInstance `json:"instances,omitempty"`
	// Roster holds the value of the roster edge.
	Roster *OncallRoster `json:"roster,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// InstancesOrErr returns the Instances value or an error if the edge
// was not loaded in eager-loading.
func (e OncallAlertEdges) InstancesOrErr() ([]*OncallAlertInstance, error) {
	if e.loadedTypes[0] {
		return e.Instances, nil
	}
	return nil, &NotLoadedError{edge: "instances"}
}

// RosterOrErr returns the Roster value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OncallAlertEdges) RosterOrErr() (*OncallRoster, error) {
	if e.Roster != nil {
		return e.Roster, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: oncallroster.Label}
	}
	return nil, &NotLoadedError{edge: "roster"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OncallAlert) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case oncallalert.FieldName:
			values[i] = new(sql.NullString)
		case oncallalert.FieldTimestamp:
			values[i] = new(sql.NullTime)
		case oncallalert.FieldID, oncallalert.FieldRosterID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OncallAlert fields.
func (oa *OncallAlert) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case oncallalert.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				oa.ID = *value
			}
		case oncallalert.FieldRosterID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field roster_id", values[i])
			} else if value != nil {
				oa.RosterID = *value
			}
		case oncallalert.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				oa.Name = value.String
			}
		case oncallalert.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				oa.Timestamp = value.Time
			}
		default:
			oa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OncallAlert.
// This includes values selected through modifiers, order, etc.
func (oa *OncallAlert) Value(name string) (ent.Value, error) {
	return oa.selectValues.Get(name)
}

// QueryInstances queries the "instances" edge of the OncallAlert entity.
func (oa *OncallAlert) QueryInstances() *OncallAlertInstanceQuery {
	return NewOncallAlertClient(oa.config).QueryInstances(oa)
}

// QueryRoster queries the "roster" edge of the OncallAlert entity.
func (oa *OncallAlert) QueryRoster() *OncallRosterQuery {
	return NewOncallAlertClient(oa.config).QueryRoster(oa)
}

// Update returns a builder for updating this OncallAlert.
// Note that you need to call OncallAlert.Unwrap() before calling this method if this OncallAlert
// was returned from a transaction, and the transaction was committed or rolled back.
func (oa *OncallAlert) Update() *OncallAlertUpdateOne {
	return NewOncallAlertClient(oa.config).UpdateOne(oa)
}

// Unwrap unwraps the OncallAlert entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (oa *OncallAlert) Unwrap() *OncallAlert {
	_tx, ok := oa.config.driver.(*txDriver)
	if !ok {
		panic("ent: OncallAlert is not a transactional entity")
	}
	oa.config.driver = _tx.drv
	return oa
}

// String implements the fmt.Stringer.
func (oa *OncallAlert) String() string {
	var builder strings.Builder
	builder.WriteString("OncallAlert(")
	builder.WriteString(fmt.Sprintf("id=%v, ", oa.ID))
	builder.WriteString("roster_id=")
	builder.WriteString(fmt.Sprintf("%v", oa.RosterID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(oa.Name)
	builder.WriteString(", ")
	builder.WriteString("timestamp=")
	builder.WriteString(oa.Timestamp.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// OncallAlerts is a parsable slice of OncallAlert.
type OncallAlerts []*OncallAlert
