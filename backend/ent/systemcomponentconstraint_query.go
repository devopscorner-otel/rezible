// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/systemcomponent"
	"github.com/rezible/rezible/ent/systemcomponentconstraint"
)

// SystemComponentConstraintQuery is the builder for querying SystemComponentConstraint entities.
type SystemComponentConstraintQuery struct {
	config
	ctx           *QueryContext
	order         []systemcomponentconstraint.OrderOption
	inters        []Interceptor
	predicates    []predicate.SystemComponentConstraint
	withComponent *SystemComponentQuery
	modifiers     []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SystemComponentConstraintQuery builder.
func (sccq *SystemComponentConstraintQuery) Where(ps ...predicate.SystemComponentConstraint) *SystemComponentConstraintQuery {
	sccq.predicates = append(sccq.predicates, ps...)
	return sccq
}

// Limit the number of records to be returned by this query.
func (sccq *SystemComponentConstraintQuery) Limit(limit int) *SystemComponentConstraintQuery {
	sccq.ctx.Limit = &limit
	return sccq
}

// Offset to start from.
func (sccq *SystemComponentConstraintQuery) Offset(offset int) *SystemComponentConstraintQuery {
	sccq.ctx.Offset = &offset
	return sccq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sccq *SystemComponentConstraintQuery) Unique(unique bool) *SystemComponentConstraintQuery {
	sccq.ctx.Unique = &unique
	return sccq
}

// Order specifies how the records should be ordered.
func (sccq *SystemComponentConstraintQuery) Order(o ...systemcomponentconstraint.OrderOption) *SystemComponentConstraintQuery {
	sccq.order = append(sccq.order, o...)
	return sccq
}

// QueryComponent chains the current query on the "component" edge.
func (sccq *SystemComponentConstraintQuery) QueryComponent() *SystemComponentQuery {
	query := (&SystemComponentClient{config: sccq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sccq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sccq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(systemcomponentconstraint.Table, systemcomponentconstraint.FieldID, selector),
			sqlgraph.To(systemcomponent.Table, systemcomponent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, systemcomponentconstraint.ComponentTable, systemcomponentconstraint.ComponentColumn),
		)
		fromU = sqlgraph.SetNeighbors(sccq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SystemComponentConstraint entity from the query.
// Returns a *NotFoundError when no SystemComponentConstraint was found.
func (sccq *SystemComponentConstraintQuery) First(ctx context.Context) (*SystemComponentConstraint, error) {
	nodes, err := sccq.Limit(1).All(setContextOp(ctx, sccq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{systemcomponentconstraint.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sccq *SystemComponentConstraintQuery) FirstX(ctx context.Context) *SystemComponentConstraint {
	node, err := sccq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SystemComponentConstraint ID from the query.
// Returns a *NotFoundError when no SystemComponentConstraint ID was found.
func (sccq *SystemComponentConstraintQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = sccq.Limit(1).IDs(setContextOp(ctx, sccq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{systemcomponentconstraint.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sccq *SystemComponentConstraintQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := sccq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SystemComponentConstraint entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SystemComponentConstraint entity is found.
// Returns a *NotFoundError when no SystemComponentConstraint entities are found.
func (sccq *SystemComponentConstraintQuery) Only(ctx context.Context) (*SystemComponentConstraint, error) {
	nodes, err := sccq.Limit(2).All(setContextOp(ctx, sccq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{systemcomponentconstraint.Label}
	default:
		return nil, &NotSingularError{systemcomponentconstraint.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sccq *SystemComponentConstraintQuery) OnlyX(ctx context.Context) *SystemComponentConstraint {
	node, err := sccq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SystemComponentConstraint ID in the query.
// Returns a *NotSingularError when more than one SystemComponentConstraint ID is found.
// Returns a *NotFoundError when no entities are found.
func (sccq *SystemComponentConstraintQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = sccq.Limit(2).IDs(setContextOp(ctx, sccq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{systemcomponentconstraint.Label}
	default:
		err = &NotSingularError{systemcomponentconstraint.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sccq *SystemComponentConstraintQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := sccq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SystemComponentConstraints.
func (sccq *SystemComponentConstraintQuery) All(ctx context.Context) ([]*SystemComponentConstraint, error) {
	ctx = setContextOp(ctx, sccq.ctx, ent.OpQueryAll)
	if err := sccq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SystemComponentConstraint, *SystemComponentConstraintQuery]()
	return withInterceptors[[]*SystemComponentConstraint](ctx, sccq, qr, sccq.inters)
}

// AllX is like All, but panics if an error occurs.
func (sccq *SystemComponentConstraintQuery) AllX(ctx context.Context) []*SystemComponentConstraint {
	nodes, err := sccq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SystemComponentConstraint IDs.
func (sccq *SystemComponentConstraintQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if sccq.ctx.Unique == nil && sccq.path != nil {
		sccq.Unique(true)
	}
	ctx = setContextOp(ctx, sccq.ctx, ent.OpQueryIDs)
	if err = sccq.Select(systemcomponentconstraint.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sccq *SystemComponentConstraintQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := sccq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sccq *SystemComponentConstraintQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, sccq.ctx, ent.OpQueryCount)
	if err := sccq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, sccq, querierCount[*SystemComponentConstraintQuery](), sccq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (sccq *SystemComponentConstraintQuery) CountX(ctx context.Context) int {
	count, err := sccq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sccq *SystemComponentConstraintQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, sccq.ctx, ent.OpQueryExist)
	switch _, err := sccq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (sccq *SystemComponentConstraintQuery) ExistX(ctx context.Context) bool {
	exist, err := sccq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SystemComponentConstraintQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sccq *SystemComponentConstraintQuery) Clone() *SystemComponentConstraintQuery {
	if sccq == nil {
		return nil
	}
	return &SystemComponentConstraintQuery{
		config:        sccq.config,
		ctx:           sccq.ctx.Clone(),
		order:         append([]systemcomponentconstraint.OrderOption{}, sccq.order...),
		inters:        append([]Interceptor{}, sccq.inters...),
		predicates:    append([]predicate.SystemComponentConstraint{}, sccq.predicates...),
		withComponent: sccq.withComponent.Clone(),
		// clone intermediate query.
		sql:       sccq.sql.Clone(),
		path:      sccq.path,
		modifiers: append([]func(*sql.Selector){}, sccq.modifiers...),
	}
}

// WithComponent tells the query-builder to eager-load the nodes that are connected to
// the "component" edge. The optional arguments are used to configure the query builder of the edge.
func (sccq *SystemComponentConstraintQuery) WithComponent(opts ...func(*SystemComponentQuery)) *SystemComponentConstraintQuery {
	query := (&SystemComponentClient{config: sccq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sccq.withComponent = query
	return sccq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ComponentID uuid.UUID `json:"component_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SystemComponentConstraint.Query().
//		GroupBy(systemcomponentconstraint.FieldComponentID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (sccq *SystemComponentConstraintQuery) GroupBy(field string, fields ...string) *SystemComponentConstraintGroupBy {
	sccq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SystemComponentConstraintGroupBy{build: sccq}
	grbuild.flds = &sccq.ctx.Fields
	grbuild.label = systemcomponentconstraint.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ComponentID uuid.UUID `json:"component_id,omitempty"`
//	}
//
//	client.SystemComponentConstraint.Query().
//		Select(systemcomponentconstraint.FieldComponentID).
//		Scan(ctx, &v)
func (sccq *SystemComponentConstraintQuery) Select(fields ...string) *SystemComponentConstraintSelect {
	sccq.ctx.Fields = append(sccq.ctx.Fields, fields...)
	sbuild := &SystemComponentConstraintSelect{SystemComponentConstraintQuery: sccq}
	sbuild.label = systemcomponentconstraint.Label
	sbuild.flds, sbuild.scan = &sccq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SystemComponentConstraintSelect configured with the given aggregations.
func (sccq *SystemComponentConstraintQuery) Aggregate(fns ...AggregateFunc) *SystemComponentConstraintSelect {
	return sccq.Select().Aggregate(fns...)
}

func (sccq *SystemComponentConstraintQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range sccq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, sccq); err != nil {
				return err
			}
		}
	}
	for _, f := range sccq.ctx.Fields {
		if !systemcomponentconstraint.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if sccq.path != nil {
		prev, err := sccq.path(ctx)
		if err != nil {
			return err
		}
		sccq.sql = prev
	}
	return nil
}

func (sccq *SystemComponentConstraintQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SystemComponentConstraint, error) {
	var (
		nodes       = []*SystemComponentConstraint{}
		_spec       = sccq.querySpec()
		loadedTypes = [1]bool{
			sccq.withComponent != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SystemComponentConstraint).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SystemComponentConstraint{config: sccq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(sccq.modifiers) > 0 {
		_spec.Modifiers = sccq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sccq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := sccq.withComponent; query != nil {
		if err := sccq.loadComponent(ctx, query, nodes, nil,
			func(n *SystemComponentConstraint, e *SystemComponent) { n.Edges.Component = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (sccq *SystemComponentConstraintQuery) loadComponent(ctx context.Context, query *SystemComponentQuery, nodes []*SystemComponentConstraint, init func(*SystemComponentConstraint), assign func(*SystemComponentConstraint, *SystemComponent)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*SystemComponentConstraint)
	for i := range nodes {
		fk := nodes[i].ComponentID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(systemcomponent.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "component_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (sccq *SystemComponentConstraintQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sccq.querySpec()
	if len(sccq.modifiers) > 0 {
		_spec.Modifiers = sccq.modifiers
	}
	_spec.Node.Columns = sccq.ctx.Fields
	if len(sccq.ctx.Fields) > 0 {
		_spec.Unique = sccq.ctx.Unique != nil && *sccq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, sccq.driver, _spec)
}

func (sccq *SystemComponentConstraintQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(systemcomponentconstraint.Table, systemcomponentconstraint.Columns, sqlgraph.NewFieldSpec(systemcomponentconstraint.FieldID, field.TypeUUID))
	_spec.From = sccq.sql
	if unique := sccq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if sccq.path != nil {
		_spec.Unique = true
	}
	if fields := sccq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, systemcomponentconstraint.FieldID)
		for i := range fields {
			if fields[i] != systemcomponentconstraint.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if sccq.withComponent != nil {
			_spec.Node.AddColumnOnce(systemcomponentconstraint.FieldComponentID)
		}
	}
	if ps := sccq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sccq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sccq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sccq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sccq *SystemComponentConstraintQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sccq.driver.Dialect())
	t1 := builder.Table(systemcomponentconstraint.Table)
	columns := sccq.ctx.Fields
	if len(columns) == 0 {
		columns = systemcomponentconstraint.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sccq.sql != nil {
		selector = sccq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sccq.ctx.Unique != nil && *sccq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range sccq.modifiers {
		m(selector)
	}
	for _, p := range sccq.predicates {
		p(selector)
	}
	for _, p := range sccq.order {
		p(selector)
	}
	if offset := sccq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sccq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (sccq *SystemComponentConstraintQuery) Modify(modifiers ...func(s *sql.Selector)) *SystemComponentConstraintSelect {
	sccq.modifiers = append(sccq.modifiers, modifiers...)
	return sccq.Select()
}

// SystemComponentConstraintGroupBy is the group-by builder for SystemComponentConstraint entities.
type SystemComponentConstraintGroupBy struct {
	selector
	build *SystemComponentConstraintQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sccgb *SystemComponentConstraintGroupBy) Aggregate(fns ...AggregateFunc) *SystemComponentConstraintGroupBy {
	sccgb.fns = append(sccgb.fns, fns...)
	return sccgb
}

// Scan applies the selector query and scans the result into the given value.
func (sccgb *SystemComponentConstraintGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sccgb.build.ctx, ent.OpQueryGroupBy)
	if err := sccgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SystemComponentConstraintQuery, *SystemComponentConstraintGroupBy](ctx, sccgb.build, sccgb, sccgb.build.inters, v)
}

func (sccgb *SystemComponentConstraintGroupBy) sqlScan(ctx context.Context, root *SystemComponentConstraintQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(sccgb.fns))
	for _, fn := range sccgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*sccgb.flds)+len(sccgb.fns))
		for _, f := range *sccgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*sccgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sccgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SystemComponentConstraintSelect is the builder for selecting fields of SystemComponentConstraint entities.
type SystemComponentConstraintSelect struct {
	*SystemComponentConstraintQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (sccs *SystemComponentConstraintSelect) Aggregate(fns ...AggregateFunc) *SystemComponentConstraintSelect {
	sccs.fns = append(sccs.fns, fns...)
	return sccs
}

// Scan applies the selector query and scans the result into the given value.
func (sccs *SystemComponentConstraintSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sccs.ctx, ent.OpQuerySelect)
	if err := sccs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SystemComponentConstraintQuery, *SystemComponentConstraintSelect](ctx, sccs.SystemComponentConstraintQuery, sccs, sccs.inters, v)
}

func (sccs *SystemComponentConstraintSelect) sqlScan(ctx context.Context, root *SystemComponentConstraintQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(sccs.fns))
	for _, fn := range sccs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*sccs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sccs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (sccs *SystemComponentConstraintSelect) Modify(modifiers ...func(s *sql.Selector)) *SystemComponentConstraintSelect {
	sccs.modifiers = append(sccs.modifiers, modifiers...)
	return sccs
}
