// Code generated by ent, DO NOT EDIT.

package oncallalertinstance

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the oncallalertinstance type in the database.
	Label = "oncall_alert_instance"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAlertID holds the string denoting the alert_id field in the database.
	FieldAlertID = "alert_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldAckedAt holds the string denoting the acked_at field in the database.
	FieldAckedAt = "acked_at"
	// FieldReceiverUserID holds the string denoting the receiver_user_id field in the database.
	FieldReceiverUserID = "receiver_user_id"
	// EdgeAlert holds the string denoting the alert edge name in mutations.
	EdgeAlert = "alert"
	// EdgeReceiver holds the string denoting the receiver edge name in mutations.
	EdgeReceiver = "receiver"
	// Table holds the table name of the oncallalertinstance in the database.
	Table = "oncall_alert_instances"
	// AlertTable is the table that holds the alert relation/edge.
	AlertTable = "oncall_alert_instances"
	// AlertInverseTable is the table name for the OncallAlert entity.
	// It exists in this package in order to avoid circular dependency with the "oncallalert" package.
	AlertInverseTable = "oncall_alerts"
	// AlertColumn is the table column denoting the alert relation/edge.
	AlertColumn = "alert_id"
	// ReceiverTable is the table that holds the receiver relation/edge.
	ReceiverTable = "oncall_alert_instances"
	// ReceiverInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ReceiverInverseTable = "users"
	// ReceiverColumn is the table column denoting the receiver relation/edge.
	ReceiverColumn = "receiver_user_id"
)

// Columns holds all SQL columns for oncallalertinstance fields.
var Columns = []string{
	FieldID,
	FieldAlertID,
	FieldCreatedAt,
	FieldAckedAt,
	FieldReceiverUserID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the OncallAlertInstance queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAlertID orders the results by the alert_id field.
func ByAlertID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAlertID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByAckedAt orders the results by the acked_at field.
func ByAckedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAckedAt, opts...).ToFunc()
}

// ByReceiverUserID orders the results by the receiver_user_id field.
func ByReceiverUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReceiverUserID, opts...).ToFunc()
}

// ByAlertField orders the results by alert field.
func ByAlertField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAlertStep(), sql.OrderByField(field, opts...))
	}
}

// ByReceiverField orders the results by receiver field.
func ByReceiverField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReceiverStep(), sql.OrderByField(field, opts...))
	}
}
func newAlertStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AlertInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AlertTable, AlertColumn),
	)
}
func newReceiverStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReceiverInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ReceiverTable, ReceiverColumn),
	)
}
