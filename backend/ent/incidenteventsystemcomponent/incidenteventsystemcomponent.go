// Code generated by ent, DO NOT EDIT.

package incidenteventsystemcomponent

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the incidenteventsystemcomponent type in the database.
	Label = "incident_event_system_component"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIncidentEventID holds the string denoting the incident_event_id field in the database.
	FieldIncidentEventID = "incident_event_id"
	// FieldSystemComponentID holds the string denoting the system_component_id field in the database.
	FieldSystemComponentID = "system_component_id"
	// FieldRelationship holds the string denoting the relationship field in the database.
	FieldRelationship = "relationship"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeEvent holds the string denoting the event edge name in mutations.
	EdgeEvent = "event"
	// EdgeSystemComponent holds the string denoting the system_component edge name in mutations.
	EdgeSystemComponent = "system_component"
	// Table holds the table name of the incidenteventsystemcomponent in the database.
	Table = "incident_event_system_components"
	// EventTable is the table that holds the event relation/edge.
	EventTable = "incident_event_system_components"
	// EventColumn is the table column denoting the event relation/edge.
	EventColumn = "incident_event_id"
	// SystemComponentTable is the table that holds the system_component relation/edge.
	SystemComponentTable = "incident_event_system_components"
	// SystemComponentInverseTable is the table name for the SystemComponent entity.
	// It exists in this package in order to avoid circular dependency with the "systemcomponent" package.
	SystemComponentInverseTable = "system_components"
	// SystemComponentColumn is the table column denoting the system_component relation/edge.
	SystemComponentColumn = "system_component_id"
)

// Columns holds all SQL columns for incidenteventsystemcomponent fields.
var Columns = []string{
	FieldID,
	FieldIncidentEventID,
	FieldSystemComponentID,
	FieldRelationship,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/rezible/rezible/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Relationship defines the type for the "relationship" enum field.
type Relationship string

// Relationship values.
const (
	RelationshipPrimary      Relationship = "primary"
	RelationshipAffected     Relationship = "affected"
	RelationshipContributing Relationship = "contributing"
)

func (r Relationship) String() string {
	return string(r)
}

// RelationshipValidator is a validator for the "relationship" field enum values. It is called by the builders before save.
func RelationshipValidator(r Relationship) error {
	switch r {
	case RelationshipPrimary, RelationshipAffected, RelationshipContributing:
		return nil
	default:
		return fmt.Errorf("incidenteventsystemcomponent: invalid enum value for relationship field: %q", r)
	}
}

// OrderOption defines the ordering options for the IncidentEventSystemComponent queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIncidentEventID orders the results by the incident_event_id field.
func ByIncidentEventID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIncidentEventID, opts...).ToFunc()
}

// BySystemComponentID orders the results by the system_component_id field.
func BySystemComponentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSystemComponentID, opts...).ToFunc()
}

// ByRelationship orders the results by the relationship field.
func ByRelationship(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRelationship, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByEventField orders the results by event field.
func ByEventField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventStep(), sql.OrderByField(field, opts...))
	}
}

// BySystemComponentField orders the results by system_component field.
func BySystemComponentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSystemComponentStep(), sql.OrderByField(field, opts...))
	}
}
func newEventStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, EventTable, EventColumn),
	)
}
func newSystemComponentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SystemComponentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SystemComponentTable, SystemComponentColumn),
	)
}
