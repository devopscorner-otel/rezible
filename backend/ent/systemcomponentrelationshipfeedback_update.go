// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/systemcomponentrelationship"
	"github.com/rezible/rezible/ent/systemcomponentrelationshipfeedback"
	"github.com/rezible/rezible/ent/systemcomponentsignal"
)

// SystemComponentRelationshipFeedbackUpdate is the builder for updating SystemComponentRelationshipFeedback entities.
type SystemComponentRelationshipFeedbackUpdate struct {
	config
	hooks     []Hook
	mutation  *SystemComponentRelationshipFeedbackMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SystemComponentRelationshipFeedbackUpdate builder.
func (scrfu *SystemComponentRelationshipFeedbackUpdate) Where(ps ...predicate.SystemComponentRelationshipFeedback) *SystemComponentRelationshipFeedbackUpdate {
	scrfu.mutation.Where(ps...)
	return scrfu
}

// SetRelationshipID sets the "relationship_id" field.
func (scrfu *SystemComponentRelationshipFeedbackUpdate) SetRelationshipID(u uuid.UUID) *SystemComponentRelationshipFeedbackUpdate {
	scrfu.mutation.SetRelationshipID(u)
	return scrfu
}

// SetNillableRelationshipID sets the "relationship_id" field if the given value is not nil.
func (scrfu *SystemComponentRelationshipFeedbackUpdate) SetNillableRelationshipID(u *uuid.UUID) *SystemComponentRelationshipFeedbackUpdate {
	if u != nil {
		scrfu.SetRelationshipID(*u)
	}
	return scrfu
}

// SetSignalID sets the "signal_id" field.
func (scrfu *SystemComponentRelationshipFeedbackUpdate) SetSignalID(u uuid.UUID) *SystemComponentRelationshipFeedbackUpdate {
	scrfu.mutation.SetSignalID(u)
	return scrfu
}

// SetNillableSignalID sets the "signal_id" field if the given value is not nil.
func (scrfu *SystemComponentRelationshipFeedbackUpdate) SetNillableSignalID(u *uuid.UUID) *SystemComponentRelationshipFeedbackUpdate {
	if u != nil {
		scrfu.SetSignalID(*u)
	}
	return scrfu
}

// SetType sets the "type" field.
func (scrfu *SystemComponentRelationshipFeedbackUpdate) SetType(s string) *SystemComponentRelationshipFeedbackUpdate {
	scrfu.mutation.SetType(s)
	return scrfu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (scrfu *SystemComponentRelationshipFeedbackUpdate) SetNillableType(s *string) *SystemComponentRelationshipFeedbackUpdate {
	if s != nil {
		scrfu.SetType(*s)
	}
	return scrfu
}

// SetDescription sets the "description" field.
func (scrfu *SystemComponentRelationshipFeedbackUpdate) SetDescription(s string) *SystemComponentRelationshipFeedbackUpdate {
	scrfu.mutation.SetDescription(s)
	return scrfu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (scrfu *SystemComponentRelationshipFeedbackUpdate) SetNillableDescription(s *string) *SystemComponentRelationshipFeedbackUpdate {
	if s != nil {
		scrfu.SetDescription(*s)
	}
	return scrfu
}

// ClearDescription clears the value of the "description" field.
func (scrfu *SystemComponentRelationshipFeedbackUpdate) ClearDescription() *SystemComponentRelationshipFeedbackUpdate {
	scrfu.mutation.ClearDescription()
	return scrfu
}

// SetCreatedAt sets the "created_at" field.
func (scrfu *SystemComponentRelationshipFeedbackUpdate) SetCreatedAt(t time.Time) *SystemComponentRelationshipFeedbackUpdate {
	scrfu.mutation.SetCreatedAt(t)
	return scrfu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (scrfu *SystemComponentRelationshipFeedbackUpdate) SetNillableCreatedAt(t *time.Time) *SystemComponentRelationshipFeedbackUpdate {
	if t != nil {
		scrfu.SetCreatedAt(*t)
	}
	return scrfu
}

// SetSignal sets the "signal" edge to the SystemComponentSignal entity.
func (scrfu *SystemComponentRelationshipFeedbackUpdate) SetSignal(s *SystemComponentSignal) *SystemComponentRelationshipFeedbackUpdate {
	return scrfu.SetSignalID(s.ID)
}

// SetRelationship sets the "relationship" edge to the SystemComponentRelationship entity.
func (scrfu *SystemComponentRelationshipFeedbackUpdate) SetRelationship(s *SystemComponentRelationship) *SystemComponentRelationshipFeedbackUpdate {
	return scrfu.SetRelationshipID(s.ID)
}

// Mutation returns the SystemComponentRelationshipFeedbackMutation object of the builder.
func (scrfu *SystemComponentRelationshipFeedbackUpdate) Mutation() *SystemComponentRelationshipFeedbackMutation {
	return scrfu.mutation
}

// ClearSignal clears the "signal" edge to the SystemComponentSignal entity.
func (scrfu *SystemComponentRelationshipFeedbackUpdate) ClearSignal() *SystemComponentRelationshipFeedbackUpdate {
	scrfu.mutation.ClearSignal()
	return scrfu
}

// ClearRelationship clears the "relationship" edge to the SystemComponentRelationship entity.
func (scrfu *SystemComponentRelationshipFeedbackUpdate) ClearRelationship() *SystemComponentRelationshipFeedbackUpdate {
	scrfu.mutation.ClearRelationship()
	return scrfu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (scrfu *SystemComponentRelationshipFeedbackUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, scrfu.sqlSave, scrfu.mutation, scrfu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scrfu *SystemComponentRelationshipFeedbackUpdate) SaveX(ctx context.Context) int {
	affected, err := scrfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (scrfu *SystemComponentRelationshipFeedbackUpdate) Exec(ctx context.Context) error {
	_, err := scrfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scrfu *SystemComponentRelationshipFeedbackUpdate) ExecX(ctx context.Context) {
	if err := scrfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scrfu *SystemComponentRelationshipFeedbackUpdate) check() error {
	if v, ok := scrfu.mutation.GetType(); ok {
		if err := systemcomponentrelationshipfeedback.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "SystemComponentRelationshipFeedback.type": %w`, err)}
		}
	}
	if scrfu.mutation.SignalCleared() && len(scrfu.mutation.SignalIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SystemComponentRelationshipFeedback.signal"`)
	}
	if scrfu.mutation.RelationshipCleared() && len(scrfu.mutation.RelationshipIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SystemComponentRelationshipFeedback.relationship"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (scrfu *SystemComponentRelationshipFeedbackUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SystemComponentRelationshipFeedbackUpdate {
	scrfu.modifiers = append(scrfu.modifiers, modifiers...)
	return scrfu
}

func (scrfu *SystemComponentRelationshipFeedbackUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := scrfu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(systemcomponentrelationshipfeedback.Table, systemcomponentrelationshipfeedback.Columns, sqlgraph.NewFieldSpec(systemcomponentrelationshipfeedback.FieldID, field.TypeUUID))
	if ps := scrfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scrfu.mutation.GetType(); ok {
		_spec.SetField(systemcomponentrelationshipfeedback.FieldType, field.TypeString, value)
	}
	if value, ok := scrfu.mutation.Description(); ok {
		_spec.SetField(systemcomponentrelationshipfeedback.FieldDescription, field.TypeString, value)
	}
	if scrfu.mutation.DescriptionCleared() {
		_spec.ClearField(systemcomponentrelationshipfeedback.FieldDescription, field.TypeString)
	}
	if value, ok := scrfu.mutation.CreatedAt(); ok {
		_spec.SetField(systemcomponentrelationshipfeedback.FieldCreatedAt, field.TypeTime, value)
	}
	if scrfu.mutation.SignalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemcomponentrelationshipfeedback.SignalTable,
			Columns: []string{systemcomponentrelationshipfeedback.SignalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentsignal.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scrfu.mutation.SignalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemcomponentrelationshipfeedback.SignalTable,
			Columns: []string{systemcomponentrelationshipfeedback.SignalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentsignal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scrfu.mutation.RelationshipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   systemcomponentrelationshipfeedback.RelationshipTable,
			Columns: []string{systemcomponentrelationshipfeedback.RelationshipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentrelationship.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scrfu.mutation.RelationshipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   systemcomponentrelationshipfeedback.RelationshipTable,
			Columns: []string{systemcomponentrelationshipfeedback.RelationshipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentrelationship.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(scrfu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, scrfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systemcomponentrelationshipfeedback.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	scrfu.mutation.done = true
	return n, nil
}

// SystemComponentRelationshipFeedbackUpdateOne is the builder for updating a single SystemComponentRelationshipFeedback entity.
type SystemComponentRelationshipFeedbackUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SystemComponentRelationshipFeedbackMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetRelationshipID sets the "relationship_id" field.
func (scrfuo *SystemComponentRelationshipFeedbackUpdateOne) SetRelationshipID(u uuid.UUID) *SystemComponentRelationshipFeedbackUpdateOne {
	scrfuo.mutation.SetRelationshipID(u)
	return scrfuo
}

// SetNillableRelationshipID sets the "relationship_id" field if the given value is not nil.
func (scrfuo *SystemComponentRelationshipFeedbackUpdateOne) SetNillableRelationshipID(u *uuid.UUID) *SystemComponentRelationshipFeedbackUpdateOne {
	if u != nil {
		scrfuo.SetRelationshipID(*u)
	}
	return scrfuo
}

// SetSignalID sets the "signal_id" field.
func (scrfuo *SystemComponentRelationshipFeedbackUpdateOne) SetSignalID(u uuid.UUID) *SystemComponentRelationshipFeedbackUpdateOne {
	scrfuo.mutation.SetSignalID(u)
	return scrfuo
}

// SetNillableSignalID sets the "signal_id" field if the given value is not nil.
func (scrfuo *SystemComponentRelationshipFeedbackUpdateOne) SetNillableSignalID(u *uuid.UUID) *SystemComponentRelationshipFeedbackUpdateOne {
	if u != nil {
		scrfuo.SetSignalID(*u)
	}
	return scrfuo
}

// SetType sets the "type" field.
func (scrfuo *SystemComponentRelationshipFeedbackUpdateOne) SetType(s string) *SystemComponentRelationshipFeedbackUpdateOne {
	scrfuo.mutation.SetType(s)
	return scrfuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (scrfuo *SystemComponentRelationshipFeedbackUpdateOne) SetNillableType(s *string) *SystemComponentRelationshipFeedbackUpdateOne {
	if s != nil {
		scrfuo.SetType(*s)
	}
	return scrfuo
}

// SetDescription sets the "description" field.
func (scrfuo *SystemComponentRelationshipFeedbackUpdateOne) SetDescription(s string) *SystemComponentRelationshipFeedbackUpdateOne {
	scrfuo.mutation.SetDescription(s)
	return scrfuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (scrfuo *SystemComponentRelationshipFeedbackUpdateOne) SetNillableDescription(s *string) *SystemComponentRelationshipFeedbackUpdateOne {
	if s != nil {
		scrfuo.SetDescription(*s)
	}
	return scrfuo
}

// ClearDescription clears the value of the "description" field.
func (scrfuo *SystemComponentRelationshipFeedbackUpdateOne) ClearDescription() *SystemComponentRelationshipFeedbackUpdateOne {
	scrfuo.mutation.ClearDescription()
	return scrfuo
}

// SetCreatedAt sets the "created_at" field.
func (scrfuo *SystemComponentRelationshipFeedbackUpdateOne) SetCreatedAt(t time.Time) *SystemComponentRelationshipFeedbackUpdateOne {
	scrfuo.mutation.SetCreatedAt(t)
	return scrfuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (scrfuo *SystemComponentRelationshipFeedbackUpdateOne) SetNillableCreatedAt(t *time.Time) *SystemComponentRelationshipFeedbackUpdateOne {
	if t != nil {
		scrfuo.SetCreatedAt(*t)
	}
	return scrfuo
}

// SetSignal sets the "signal" edge to the SystemComponentSignal entity.
func (scrfuo *SystemComponentRelationshipFeedbackUpdateOne) SetSignal(s *SystemComponentSignal) *SystemComponentRelationshipFeedbackUpdateOne {
	return scrfuo.SetSignalID(s.ID)
}

// SetRelationship sets the "relationship" edge to the SystemComponentRelationship entity.
func (scrfuo *SystemComponentRelationshipFeedbackUpdateOne) SetRelationship(s *SystemComponentRelationship) *SystemComponentRelationshipFeedbackUpdateOne {
	return scrfuo.SetRelationshipID(s.ID)
}

// Mutation returns the SystemComponentRelationshipFeedbackMutation object of the builder.
func (scrfuo *SystemComponentRelationshipFeedbackUpdateOne) Mutation() *SystemComponentRelationshipFeedbackMutation {
	return scrfuo.mutation
}

// ClearSignal clears the "signal" edge to the SystemComponentSignal entity.
func (scrfuo *SystemComponentRelationshipFeedbackUpdateOne) ClearSignal() *SystemComponentRelationshipFeedbackUpdateOne {
	scrfuo.mutation.ClearSignal()
	return scrfuo
}

// ClearRelationship clears the "relationship" edge to the SystemComponentRelationship entity.
func (scrfuo *SystemComponentRelationshipFeedbackUpdateOne) ClearRelationship() *SystemComponentRelationshipFeedbackUpdateOne {
	scrfuo.mutation.ClearRelationship()
	return scrfuo
}

// Where appends a list predicates to the SystemComponentRelationshipFeedbackUpdate builder.
func (scrfuo *SystemComponentRelationshipFeedbackUpdateOne) Where(ps ...predicate.SystemComponentRelationshipFeedback) *SystemComponentRelationshipFeedbackUpdateOne {
	scrfuo.mutation.Where(ps...)
	return scrfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (scrfuo *SystemComponentRelationshipFeedbackUpdateOne) Select(field string, fields ...string) *SystemComponentRelationshipFeedbackUpdateOne {
	scrfuo.fields = append([]string{field}, fields...)
	return scrfuo
}

// Save executes the query and returns the updated SystemComponentRelationshipFeedback entity.
func (scrfuo *SystemComponentRelationshipFeedbackUpdateOne) Save(ctx context.Context) (*SystemComponentRelationshipFeedback, error) {
	return withHooks(ctx, scrfuo.sqlSave, scrfuo.mutation, scrfuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scrfuo *SystemComponentRelationshipFeedbackUpdateOne) SaveX(ctx context.Context) *SystemComponentRelationshipFeedback {
	node, err := scrfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (scrfuo *SystemComponentRelationshipFeedbackUpdateOne) Exec(ctx context.Context) error {
	_, err := scrfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scrfuo *SystemComponentRelationshipFeedbackUpdateOne) ExecX(ctx context.Context) {
	if err := scrfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scrfuo *SystemComponentRelationshipFeedbackUpdateOne) check() error {
	if v, ok := scrfuo.mutation.GetType(); ok {
		if err := systemcomponentrelationshipfeedback.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "SystemComponentRelationshipFeedback.type": %w`, err)}
		}
	}
	if scrfuo.mutation.SignalCleared() && len(scrfuo.mutation.SignalIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SystemComponentRelationshipFeedback.signal"`)
	}
	if scrfuo.mutation.RelationshipCleared() && len(scrfuo.mutation.RelationshipIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SystemComponentRelationshipFeedback.relationship"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (scrfuo *SystemComponentRelationshipFeedbackUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SystemComponentRelationshipFeedbackUpdateOne {
	scrfuo.modifiers = append(scrfuo.modifiers, modifiers...)
	return scrfuo
}

func (scrfuo *SystemComponentRelationshipFeedbackUpdateOne) sqlSave(ctx context.Context) (_node *SystemComponentRelationshipFeedback, err error) {
	if err := scrfuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(systemcomponentrelationshipfeedback.Table, systemcomponentrelationshipfeedback.Columns, sqlgraph.NewFieldSpec(systemcomponentrelationshipfeedback.FieldID, field.TypeUUID))
	id, ok := scrfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SystemComponentRelationshipFeedback.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := scrfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, systemcomponentrelationshipfeedback.FieldID)
		for _, f := range fields {
			if !systemcomponentrelationshipfeedback.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != systemcomponentrelationshipfeedback.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := scrfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scrfuo.mutation.GetType(); ok {
		_spec.SetField(systemcomponentrelationshipfeedback.FieldType, field.TypeString, value)
	}
	if value, ok := scrfuo.mutation.Description(); ok {
		_spec.SetField(systemcomponentrelationshipfeedback.FieldDescription, field.TypeString, value)
	}
	if scrfuo.mutation.DescriptionCleared() {
		_spec.ClearField(systemcomponentrelationshipfeedback.FieldDescription, field.TypeString)
	}
	if value, ok := scrfuo.mutation.CreatedAt(); ok {
		_spec.SetField(systemcomponentrelationshipfeedback.FieldCreatedAt, field.TypeTime, value)
	}
	if scrfuo.mutation.SignalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemcomponentrelationshipfeedback.SignalTable,
			Columns: []string{systemcomponentrelationshipfeedback.SignalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentsignal.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scrfuo.mutation.SignalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemcomponentrelationshipfeedback.SignalTable,
			Columns: []string{systemcomponentrelationshipfeedback.SignalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentsignal.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scrfuo.mutation.RelationshipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   systemcomponentrelationshipfeedback.RelationshipTable,
			Columns: []string{systemcomponentrelationshipfeedback.RelationshipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentrelationship.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scrfuo.mutation.RelationshipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   systemcomponentrelationshipfeedback.RelationshipTable,
			Columns: []string{systemcomponentrelationshipfeedback.RelationshipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponentrelationship.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(scrfuo.modifiers...)
	_node = &SystemComponentRelationshipFeedback{config: scrfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, scrfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systemcomponentrelationshipfeedback.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	scrfuo.mutation.done = true
	return _node, nil
}
