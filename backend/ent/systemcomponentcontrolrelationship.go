// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/systemcomponent"
	"github.com/rezible/rezible/ent/systemcomponentcontrolrelationship"
)

// SystemComponentControlRelationship is the model entity for the SystemComponentControlRelationship schema.
type SystemComponentControlRelationship struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ControllerID holds the value of the "controller_id" field.
	ControllerID uuid.UUID `json:"controller_id,omitempty"`
	// ControlledID holds the value of the "controlled_id" field.
	ControlledID uuid.UUID `json:"controlled_id,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SystemComponentControlRelationshipQuery when eager-loading is set.
	Edges        SystemComponentControlRelationshipEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SystemComponentControlRelationshipEdges holds the relations/edges for other nodes in the graph.
type SystemComponentControlRelationshipEdges struct {
	// Controller holds the value of the controller edge.
	Controller *SystemComponent `json:"controller,omitempty"`
	// Controlled holds the value of the controlled edge.
	Controlled *SystemComponent `json:"controlled,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ControllerOrErr returns the Controller value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SystemComponentControlRelationshipEdges) ControllerOrErr() (*SystemComponent, error) {
	if e.Controller != nil {
		return e.Controller, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: systemcomponent.Label}
	}
	return nil, &NotLoadedError{edge: "controller"}
}

// ControlledOrErr returns the Controlled value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SystemComponentControlRelationshipEdges) ControlledOrErr() (*SystemComponent, error) {
	if e.Controlled != nil {
		return e.Controlled, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: systemcomponent.Label}
	}
	return nil, &NotLoadedError{edge: "controlled"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SystemComponentControlRelationship) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case systemcomponentcontrolrelationship.FieldType, systemcomponentcontrolrelationship.FieldDescription:
			values[i] = new(sql.NullString)
		case systemcomponentcontrolrelationship.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case systemcomponentcontrolrelationship.FieldID, systemcomponentcontrolrelationship.FieldControllerID, systemcomponentcontrolrelationship.FieldControlledID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SystemComponentControlRelationship fields.
func (sccr *SystemComponentControlRelationship) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case systemcomponentcontrolrelationship.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				sccr.ID = *value
			}
		case systemcomponentcontrolrelationship.FieldControllerID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field controller_id", values[i])
			} else if value != nil {
				sccr.ControllerID = *value
			}
		case systemcomponentcontrolrelationship.FieldControlledID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field controlled_id", values[i])
			} else if value != nil {
				sccr.ControlledID = *value
			}
		case systemcomponentcontrolrelationship.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				sccr.Type = value.String
			}
		case systemcomponentcontrolrelationship.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				sccr.Description = value.String
			}
		case systemcomponentcontrolrelationship.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sccr.CreatedAt = value.Time
			}
		default:
			sccr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SystemComponentControlRelationship.
// This includes values selected through modifiers, order, etc.
func (sccr *SystemComponentControlRelationship) Value(name string) (ent.Value, error) {
	return sccr.selectValues.Get(name)
}

// QueryController queries the "controller" edge of the SystemComponentControlRelationship entity.
func (sccr *SystemComponentControlRelationship) QueryController() *SystemComponentQuery {
	return NewSystemComponentControlRelationshipClient(sccr.config).QueryController(sccr)
}

// QueryControlled queries the "controlled" edge of the SystemComponentControlRelationship entity.
func (sccr *SystemComponentControlRelationship) QueryControlled() *SystemComponentQuery {
	return NewSystemComponentControlRelationshipClient(sccr.config).QueryControlled(sccr)
}

// Update returns a builder for updating this SystemComponentControlRelationship.
// Note that you need to call SystemComponentControlRelationship.Unwrap() before calling this method if this SystemComponentControlRelationship
// was returned from a transaction, and the transaction was committed or rolled back.
func (sccr *SystemComponentControlRelationship) Update() *SystemComponentControlRelationshipUpdateOne {
	return NewSystemComponentControlRelationshipClient(sccr.config).UpdateOne(sccr)
}

// Unwrap unwraps the SystemComponentControlRelationship entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sccr *SystemComponentControlRelationship) Unwrap() *SystemComponentControlRelationship {
	_tx, ok := sccr.config.driver.(*txDriver)
	if !ok {
		panic("ent: SystemComponentControlRelationship is not a transactional entity")
	}
	sccr.config.driver = _tx.drv
	return sccr
}

// String implements the fmt.Stringer.
func (sccr *SystemComponentControlRelationship) String() string {
	var builder strings.Builder
	builder.WriteString("SystemComponentControlRelationship(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sccr.ID))
	builder.WriteString("controller_id=")
	builder.WriteString(fmt.Sprintf("%v", sccr.ControllerID))
	builder.WriteString(", ")
	builder.WriteString("controlled_id=")
	builder.WriteString(fmt.Sprintf("%v", sccr.ControlledID))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(sccr.Type)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(sccr.Description)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sccr.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SystemComponentControlRelationships is a parsable slice of SystemComponentControlRelationship.
type SystemComponentControlRelationships []*SystemComponentControlRelationship
