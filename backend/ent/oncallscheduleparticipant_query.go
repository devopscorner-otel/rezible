// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/oncallschedule"
	"github.com/rezible/rezible/ent/oncallscheduleparticipant"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/user"
)

// OncallScheduleParticipantQuery is the builder for querying OncallScheduleParticipant entities.
type OncallScheduleParticipantQuery struct {
	config
	ctx          *QueryContext
	order        []oncallscheduleparticipant.OrderOption
	inters       []Interceptor
	predicates   []predicate.OncallScheduleParticipant
	withSchedule *OncallScheduleQuery
	withUser     *UserQuery
	modifiers    []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OncallScheduleParticipantQuery builder.
func (ospq *OncallScheduleParticipantQuery) Where(ps ...predicate.OncallScheduleParticipant) *OncallScheduleParticipantQuery {
	ospq.predicates = append(ospq.predicates, ps...)
	return ospq
}

// Limit the number of records to be returned by this query.
func (ospq *OncallScheduleParticipantQuery) Limit(limit int) *OncallScheduleParticipantQuery {
	ospq.ctx.Limit = &limit
	return ospq
}

// Offset to start from.
func (ospq *OncallScheduleParticipantQuery) Offset(offset int) *OncallScheduleParticipantQuery {
	ospq.ctx.Offset = &offset
	return ospq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ospq *OncallScheduleParticipantQuery) Unique(unique bool) *OncallScheduleParticipantQuery {
	ospq.ctx.Unique = &unique
	return ospq
}

// Order specifies how the records should be ordered.
func (ospq *OncallScheduleParticipantQuery) Order(o ...oncallscheduleparticipant.OrderOption) *OncallScheduleParticipantQuery {
	ospq.order = append(ospq.order, o...)
	return ospq
}

// QuerySchedule chains the current query on the "schedule" edge.
func (ospq *OncallScheduleParticipantQuery) QuerySchedule() *OncallScheduleQuery {
	query := (&OncallScheduleClient{config: ospq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ospq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ospq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(oncallscheduleparticipant.Table, oncallscheduleparticipant.FieldID, selector),
			sqlgraph.To(oncallschedule.Table, oncallschedule.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, oncallscheduleparticipant.ScheduleTable, oncallscheduleparticipant.ScheduleColumn),
		)
		fromU = sqlgraph.SetNeighbors(ospq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUser chains the current query on the "user" edge.
func (ospq *OncallScheduleParticipantQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: ospq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ospq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ospq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(oncallscheduleparticipant.Table, oncallscheduleparticipant.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, oncallscheduleparticipant.UserTable, oncallscheduleparticipant.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(ospq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first OncallScheduleParticipant entity from the query.
// Returns a *NotFoundError when no OncallScheduleParticipant was found.
func (ospq *OncallScheduleParticipantQuery) First(ctx context.Context) (*OncallScheduleParticipant, error) {
	nodes, err := ospq.Limit(1).All(setContextOp(ctx, ospq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{oncallscheduleparticipant.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ospq *OncallScheduleParticipantQuery) FirstX(ctx context.Context) *OncallScheduleParticipant {
	node, err := ospq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first OncallScheduleParticipant ID from the query.
// Returns a *NotFoundError when no OncallScheduleParticipant ID was found.
func (ospq *OncallScheduleParticipantQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = ospq.Limit(1).IDs(setContextOp(ctx, ospq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{oncallscheduleparticipant.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ospq *OncallScheduleParticipantQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := ospq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single OncallScheduleParticipant entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one OncallScheduleParticipant entity is found.
// Returns a *NotFoundError when no OncallScheduleParticipant entities are found.
func (ospq *OncallScheduleParticipantQuery) Only(ctx context.Context) (*OncallScheduleParticipant, error) {
	nodes, err := ospq.Limit(2).All(setContextOp(ctx, ospq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{oncallscheduleparticipant.Label}
	default:
		return nil, &NotSingularError{oncallscheduleparticipant.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ospq *OncallScheduleParticipantQuery) OnlyX(ctx context.Context) *OncallScheduleParticipant {
	node, err := ospq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only OncallScheduleParticipant ID in the query.
// Returns a *NotSingularError when more than one OncallScheduleParticipant ID is found.
// Returns a *NotFoundError when no entities are found.
func (ospq *OncallScheduleParticipantQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = ospq.Limit(2).IDs(setContextOp(ctx, ospq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{oncallscheduleparticipant.Label}
	default:
		err = &NotSingularError{oncallscheduleparticipant.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ospq *OncallScheduleParticipantQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := ospq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OncallScheduleParticipants.
func (ospq *OncallScheduleParticipantQuery) All(ctx context.Context) ([]*OncallScheduleParticipant, error) {
	ctx = setContextOp(ctx, ospq.ctx, ent.OpQueryAll)
	if err := ospq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*OncallScheduleParticipant, *OncallScheduleParticipantQuery]()
	return withInterceptors[[]*OncallScheduleParticipant](ctx, ospq, qr, ospq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ospq *OncallScheduleParticipantQuery) AllX(ctx context.Context) []*OncallScheduleParticipant {
	nodes, err := ospq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of OncallScheduleParticipant IDs.
func (ospq *OncallScheduleParticipantQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if ospq.ctx.Unique == nil && ospq.path != nil {
		ospq.Unique(true)
	}
	ctx = setContextOp(ctx, ospq.ctx, ent.OpQueryIDs)
	if err = ospq.Select(oncallscheduleparticipant.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ospq *OncallScheduleParticipantQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := ospq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ospq *OncallScheduleParticipantQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ospq.ctx, ent.OpQueryCount)
	if err := ospq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ospq, querierCount[*OncallScheduleParticipantQuery](), ospq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ospq *OncallScheduleParticipantQuery) CountX(ctx context.Context) int {
	count, err := ospq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ospq *OncallScheduleParticipantQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ospq.ctx, ent.OpQueryExist)
	switch _, err := ospq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ospq *OncallScheduleParticipantQuery) ExistX(ctx context.Context) bool {
	exist, err := ospq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OncallScheduleParticipantQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ospq *OncallScheduleParticipantQuery) Clone() *OncallScheduleParticipantQuery {
	if ospq == nil {
		return nil
	}
	return &OncallScheduleParticipantQuery{
		config:       ospq.config,
		ctx:          ospq.ctx.Clone(),
		order:        append([]oncallscheduleparticipant.OrderOption{}, ospq.order...),
		inters:       append([]Interceptor{}, ospq.inters...),
		predicates:   append([]predicate.OncallScheduleParticipant{}, ospq.predicates...),
		withSchedule: ospq.withSchedule.Clone(),
		withUser:     ospq.withUser.Clone(),
		// clone intermediate query.
		sql:       ospq.sql.Clone(),
		path:      ospq.path,
		modifiers: append([]func(*sql.Selector){}, ospq.modifiers...),
	}
}

// WithSchedule tells the query-builder to eager-load the nodes that are connected to
// the "schedule" edge. The optional arguments are used to configure the query builder of the edge.
func (ospq *OncallScheduleParticipantQuery) WithSchedule(opts ...func(*OncallScheduleQuery)) *OncallScheduleParticipantQuery {
	query := (&OncallScheduleClient{config: ospq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ospq.withSchedule = query
	return ospq
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (ospq *OncallScheduleParticipantQuery) WithUser(opts ...func(*UserQuery)) *OncallScheduleParticipantQuery {
	query := (&UserClient{config: ospq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ospq.withUser = query
	return ospq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ScheduleID uuid.UUID `json:"schedule_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OncallScheduleParticipant.Query().
//		GroupBy(oncallscheduleparticipant.FieldScheduleID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ospq *OncallScheduleParticipantQuery) GroupBy(field string, fields ...string) *OncallScheduleParticipantGroupBy {
	ospq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &OncallScheduleParticipantGroupBy{build: ospq}
	grbuild.flds = &ospq.ctx.Fields
	grbuild.label = oncallscheduleparticipant.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ScheduleID uuid.UUID `json:"schedule_id,omitempty"`
//	}
//
//	client.OncallScheduleParticipant.Query().
//		Select(oncallscheduleparticipant.FieldScheduleID).
//		Scan(ctx, &v)
func (ospq *OncallScheduleParticipantQuery) Select(fields ...string) *OncallScheduleParticipantSelect {
	ospq.ctx.Fields = append(ospq.ctx.Fields, fields...)
	sbuild := &OncallScheduleParticipantSelect{OncallScheduleParticipantQuery: ospq}
	sbuild.label = oncallscheduleparticipant.Label
	sbuild.flds, sbuild.scan = &ospq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a OncallScheduleParticipantSelect configured with the given aggregations.
func (ospq *OncallScheduleParticipantQuery) Aggregate(fns ...AggregateFunc) *OncallScheduleParticipantSelect {
	return ospq.Select().Aggregate(fns...)
}

func (ospq *OncallScheduleParticipantQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ospq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ospq); err != nil {
				return err
			}
		}
	}
	for _, f := range ospq.ctx.Fields {
		if !oncallscheduleparticipant.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ospq.path != nil {
		prev, err := ospq.path(ctx)
		if err != nil {
			return err
		}
		ospq.sql = prev
	}
	return nil
}

func (ospq *OncallScheduleParticipantQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*OncallScheduleParticipant, error) {
	var (
		nodes       = []*OncallScheduleParticipant{}
		_spec       = ospq.querySpec()
		loadedTypes = [2]bool{
			ospq.withSchedule != nil,
			ospq.withUser != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*OncallScheduleParticipant).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &OncallScheduleParticipant{config: ospq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(ospq.modifiers) > 0 {
		_spec.Modifiers = ospq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ospq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ospq.withSchedule; query != nil {
		if err := ospq.loadSchedule(ctx, query, nodes, nil,
			func(n *OncallScheduleParticipant, e *OncallSchedule) { n.Edges.Schedule = e }); err != nil {
			return nil, err
		}
	}
	if query := ospq.withUser; query != nil {
		if err := ospq.loadUser(ctx, query, nodes, nil,
			func(n *OncallScheduleParticipant, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ospq *OncallScheduleParticipantQuery) loadSchedule(ctx context.Context, query *OncallScheduleQuery, nodes []*OncallScheduleParticipant, init func(*OncallScheduleParticipant), assign func(*OncallScheduleParticipant, *OncallSchedule)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*OncallScheduleParticipant)
	for i := range nodes {
		fk := nodes[i].ScheduleID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(oncallschedule.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "schedule_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ospq *OncallScheduleParticipantQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*OncallScheduleParticipant, init func(*OncallScheduleParticipant), assign func(*OncallScheduleParticipant, *User)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*OncallScheduleParticipant)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ospq *OncallScheduleParticipantQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ospq.querySpec()
	if len(ospq.modifiers) > 0 {
		_spec.Modifiers = ospq.modifiers
	}
	_spec.Node.Columns = ospq.ctx.Fields
	if len(ospq.ctx.Fields) > 0 {
		_spec.Unique = ospq.ctx.Unique != nil && *ospq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ospq.driver, _spec)
}

func (ospq *OncallScheduleParticipantQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(oncallscheduleparticipant.Table, oncallscheduleparticipant.Columns, sqlgraph.NewFieldSpec(oncallscheduleparticipant.FieldID, field.TypeUUID))
	_spec.From = ospq.sql
	if unique := ospq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ospq.path != nil {
		_spec.Unique = true
	}
	if fields := ospq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oncallscheduleparticipant.FieldID)
		for i := range fields {
			if fields[i] != oncallscheduleparticipant.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if ospq.withSchedule != nil {
			_spec.Node.AddColumnOnce(oncallscheduleparticipant.FieldScheduleID)
		}
		if ospq.withUser != nil {
			_spec.Node.AddColumnOnce(oncallscheduleparticipant.FieldUserID)
		}
	}
	if ps := ospq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ospq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ospq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ospq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ospq *OncallScheduleParticipantQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ospq.driver.Dialect())
	t1 := builder.Table(oncallscheduleparticipant.Table)
	columns := ospq.ctx.Fields
	if len(columns) == 0 {
		columns = oncallscheduleparticipant.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ospq.sql != nil {
		selector = ospq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ospq.ctx.Unique != nil && *ospq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range ospq.modifiers {
		m(selector)
	}
	for _, p := range ospq.predicates {
		p(selector)
	}
	for _, p := range ospq.order {
		p(selector)
	}
	if offset := ospq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ospq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ospq *OncallScheduleParticipantQuery) Modify(modifiers ...func(s *sql.Selector)) *OncallScheduleParticipantSelect {
	ospq.modifiers = append(ospq.modifiers, modifiers...)
	return ospq.Select()
}

// OncallScheduleParticipantGroupBy is the group-by builder for OncallScheduleParticipant entities.
type OncallScheduleParticipantGroupBy struct {
	selector
	build *OncallScheduleParticipantQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ospgb *OncallScheduleParticipantGroupBy) Aggregate(fns ...AggregateFunc) *OncallScheduleParticipantGroupBy {
	ospgb.fns = append(ospgb.fns, fns...)
	return ospgb
}

// Scan applies the selector query and scans the result into the given value.
func (ospgb *OncallScheduleParticipantGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ospgb.build.ctx, ent.OpQueryGroupBy)
	if err := ospgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OncallScheduleParticipantQuery, *OncallScheduleParticipantGroupBy](ctx, ospgb.build, ospgb, ospgb.build.inters, v)
}

func (ospgb *OncallScheduleParticipantGroupBy) sqlScan(ctx context.Context, root *OncallScheduleParticipantQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ospgb.fns))
	for _, fn := range ospgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ospgb.flds)+len(ospgb.fns))
		for _, f := range *ospgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ospgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ospgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// OncallScheduleParticipantSelect is the builder for selecting fields of OncallScheduleParticipant entities.
type OncallScheduleParticipantSelect struct {
	*OncallScheduleParticipantQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (osps *OncallScheduleParticipantSelect) Aggregate(fns ...AggregateFunc) *OncallScheduleParticipantSelect {
	osps.fns = append(osps.fns, fns...)
	return osps
}

// Scan applies the selector query and scans the result into the given value.
func (osps *OncallScheduleParticipantSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, osps.ctx, ent.OpQuerySelect)
	if err := osps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OncallScheduleParticipantQuery, *OncallScheduleParticipantSelect](ctx, osps.OncallScheduleParticipantQuery, osps, osps.inters, v)
}

func (osps *OncallScheduleParticipantSelect) sqlScan(ctx context.Context, root *OncallScheduleParticipantQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(osps.fns))
	for _, fn := range osps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*osps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := osps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (osps *OncallScheduleParticipantSelect) Modify(modifiers ...func(s *sql.Selector)) *OncallScheduleParticipantSelect {
	osps.modifiers = append(osps.modifiers, modifiers...)
	return osps
}
