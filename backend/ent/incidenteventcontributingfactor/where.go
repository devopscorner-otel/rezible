// Code generated by ent, DO NOT EDIT.

package incidenteventcontributingfactor

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.FieldLTE(FieldID, id))
}

// FactorType applies equality check predicate on the "factor_type" field. It's identical to FactorTypeEQ.
func FactorType(v string) predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.FieldEQ(FieldFactorType, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.FieldEQ(FieldDescription, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.FieldEQ(FieldCreatedAt, v))
}

// FactorTypeEQ applies the EQ predicate on the "factor_type" field.
func FactorTypeEQ(v string) predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.FieldEQ(FieldFactorType, v))
}

// FactorTypeNEQ applies the NEQ predicate on the "factor_type" field.
func FactorTypeNEQ(v string) predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.FieldNEQ(FieldFactorType, v))
}

// FactorTypeIn applies the In predicate on the "factor_type" field.
func FactorTypeIn(vs ...string) predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.FieldIn(FieldFactorType, vs...))
}

// FactorTypeNotIn applies the NotIn predicate on the "factor_type" field.
func FactorTypeNotIn(vs ...string) predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.FieldNotIn(FieldFactorType, vs...))
}

// FactorTypeGT applies the GT predicate on the "factor_type" field.
func FactorTypeGT(v string) predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.FieldGT(FieldFactorType, v))
}

// FactorTypeGTE applies the GTE predicate on the "factor_type" field.
func FactorTypeGTE(v string) predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.FieldGTE(FieldFactorType, v))
}

// FactorTypeLT applies the LT predicate on the "factor_type" field.
func FactorTypeLT(v string) predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.FieldLT(FieldFactorType, v))
}

// FactorTypeLTE applies the LTE predicate on the "factor_type" field.
func FactorTypeLTE(v string) predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.FieldLTE(FieldFactorType, v))
}

// FactorTypeContains applies the Contains predicate on the "factor_type" field.
func FactorTypeContains(v string) predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.FieldContains(FieldFactorType, v))
}

// FactorTypeHasPrefix applies the HasPrefix predicate on the "factor_type" field.
func FactorTypeHasPrefix(v string) predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.FieldHasPrefix(FieldFactorType, v))
}

// FactorTypeHasSuffix applies the HasSuffix predicate on the "factor_type" field.
func FactorTypeHasSuffix(v string) predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.FieldHasSuffix(FieldFactorType, v))
}

// FactorTypeEqualFold applies the EqualFold predicate on the "factor_type" field.
func FactorTypeEqualFold(v string) predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.FieldEqualFold(FieldFactorType, v))
}

// FactorTypeContainsFold applies the ContainsFold predicate on the "factor_type" field.
func FactorTypeContainsFold(v string) predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.FieldContainsFold(FieldFactorType, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.FieldContainsFold(FieldDescription, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.FieldLTE(FieldCreatedAt, v))
}

// HasEvent applies the HasEdge predicate on the "event" edge.
func HasEvent() predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EventTable, EventColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventWith applies the HasEdge predicate on the "event" edge with a given conditions (other predicates).
func HasEventWith(preds ...predicate.IncidentEvent) predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(func(s *sql.Selector) {
		step := newEventStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.IncidentEventContributingFactor) predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.IncidentEventContributingFactor) predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.IncidentEventContributingFactor) predicate.IncidentEventContributingFactor {
	return predicate.IncidentEventContributingFactor(sql.NotPredicates(p))
}
