// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/providersynchistory"
	"github.com/rezible/rezible/ent/tenant"
)

// ProviderSyncHistory is the model entity for the ProviderSyncHistory schema.
type ProviderSyncHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID int `json:"tenant_id,omitempty"`
	// DataType holds the value of the "data_type" field.
	DataType string `json:"data_type,omitempty"`
	// StartedAt holds the value of the "started_at" field.
	StartedAt time.Time `json:"started_at,omitempty"`
	// FinishedAt holds the value of the "finished_at" field.
	FinishedAt time.Time `json:"finished_at,omitempty"`
	// NumMutations holds the value of the "num_mutations" field.
	NumMutations int `json:"num_mutations,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProviderSyncHistoryQuery when eager-loading is set.
	Edges        ProviderSyncHistoryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProviderSyncHistoryEdges holds the relations/edges for other nodes in the graph.
type ProviderSyncHistoryEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProviderSyncHistoryEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProviderSyncHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case providersynchistory.FieldTenantID, providersynchistory.FieldNumMutations:
			values[i] = new(sql.NullInt64)
		case providersynchistory.FieldDataType:
			values[i] = new(sql.NullString)
		case providersynchistory.FieldStartedAt, providersynchistory.FieldFinishedAt:
			values[i] = new(sql.NullTime)
		case providersynchistory.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProviderSyncHistory fields.
func (psh *ProviderSyncHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case providersynchistory.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				psh.ID = *value
			}
		case providersynchistory.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				psh.TenantID = int(value.Int64)
			}
		case providersynchistory.FieldDataType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field data_type", values[i])
			} else if value.Valid {
				psh.DataType = value.String
			}
		case providersynchistory.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				psh.StartedAt = value.Time
			}
		case providersynchistory.FieldFinishedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field finished_at", values[i])
			} else if value.Valid {
				psh.FinishedAt = value.Time
			}
		case providersynchistory.FieldNumMutations:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field num_mutations", values[i])
			} else if value.Valid {
				psh.NumMutations = int(value.Int64)
			}
		default:
			psh.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProviderSyncHistory.
// This includes values selected through modifiers, order, etc.
func (psh *ProviderSyncHistory) Value(name string) (ent.Value, error) {
	return psh.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the ProviderSyncHistory entity.
func (psh *ProviderSyncHistory) QueryTenant() *TenantQuery {
	return NewProviderSyncHistoryClient(psh.config).QueryTenant(psh)
}

// Update returns a builder for updating this ProviderSyncHistory.
// Note that you need to call ProviderSyncHistory.Unwrap() before calling this method if this ProviderSyncHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (psh *ProviderSyncHistory) Update() *ProviderSyncHistoryUpdateOne {
	return NewProviderSyncHistoryClient(psh.config).UpdateOne(psh)
}

// Unwrap unwraps the ProviderSyncHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (psh *ProviderSyncHistory) Unwrap() *ProviderSyncHistory {
	_tx, ok := psh.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProviderSyncHistory is not a transactional entity")
	}
	psh.config.driver = _tx.drv
	return psh
}

// String implements the fmt.Stringer.
func (psh *ProviderSyncHistory) String() string {
	var builder strings.Builder
	builder.WriteString("ProviderSyncHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", psh.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", psh.TenantID))
	builder.WriteString(", ")
	builder.WriteString("data_type=")
	builder.WriteString(psh.DataType)
	builder.WriteString(", ")
	builder.WriteString("started_at=")
	builder.WriteString(psh.StartedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("finished_at=")
	builder.WriteString(psh.FinishedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("num_mutations=")
	builder.WriteString(fmt.Sprintf("%v", psh.NumMutations))
	builder.WriteByte(')')
	return builder.String()
}

// ProviderSyncHistories is a parsable slice of ProviderSyncHistory.
type ProviderSyncHistories []*ProviderSyncHistory
