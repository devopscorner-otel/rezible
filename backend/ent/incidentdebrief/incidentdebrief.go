// Code generated by ent, DO NOT EDIT.

package incidentdebrief

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the incidentdebrief type in the database.
	Label = "incident_debrief"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIncidentID holds the string denoting the incident_id field in the database.
	FieldIncidentID = "incident_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldRequired holds the string denoting the required field in the database.
	FieldRequired = "required"
	// FieldStarted holds the string denoting the started field in the database.
	FieldStarted = "started"
	// EdgeIncident holds the string denoting the incident edge name in mutations.
	EdgeIncident = "incident"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeMessages holds the string denoting the messages edge name in mutations.
	EdgeMessages = "messages"
	// EdgeSuggestions holds the string denoting the suggestions edge name in mutations.
	EdgeSuggestions = "suggestions"
	// Table holds the table name of the incidentdebrief in the database.
	Table = "incident_debriefs"
	// IncidentTable is the table that holds the incident relation/edge.
	IncidentTable = "incident_debriefs"
	// IncidentInverseTable is the table name for the Incident entity.
	// It exists in this package in order to avoid circular dependency with the "incident" package.
	IncidentInverseTable = "incidents"
	// IncidentColumn is the table column denoting the incident relation/edge.
	IncidentColumn = "incident_id"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "incident_debriefs"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// MessagesTable is the table that holds the messages relation/edge.
	MessagesTable = "incident_debrief_messages"
	// MessagesInverseTable is the table name for the IncidentDebriefMessage entity.
	// It exists in this package in order to avoid circular dependency with the "incidentdebriefmessage" package.
	MessagesInverseTable = "incident_debrief_messages"
	// MessagesColumn is the table column denoting the messages relation/edge.
	MessagesColumn = "debrief_id"
	// SuggestionsTable is the table that holds the suggestions relation/edge.
	SuggestionsTable = "incident_debrief_suggestions"
	// SuggestionsInverseTable is the table name for the IncidentDebriefSuggestion entity.
	// It exists in this package in order to avoid circular dependency with the "incidentdebriefsuggestion" package.
	SuggestionsInverseTable = "incident_debrief_suggestions"
	// SuggestionsColumn is the table column denoting the suggestions relation/edge.
	SuggestionsColumn = "incident_debrief_suggestions"
)

// Columns holds all SQL columns for incidentdebrief fields.
var Columns = []string{
	FieldID,
	FieldIncidentID,
	FieldUserID,
	FieldRequired,
	FieldStarted,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the IncidentDebrief queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIncidentID orders the results by the incident_id field.
func ByIncidentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIncidentID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByRequired orders the results by the required field.
func ByRequired(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequired, opts...).ToFunc()
}

// ByStarted orders the results by the started field.
func ByStarted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStarted, opts...).ToFunc()
}

// ByIncidentField orders the results by incident field.
func ByIncidentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIncidentStep(), sql.OrderByField(field, opts...))
	}
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByMessagesCount orders the results by messages count.
func ByMessagesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMessagesStep(), opts...)
	}
}

// ByMessages orders the results by messages terms.
func ByMessages(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMessagesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySuggestionsCount orders the results by suggestions count.
func BySuggestionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSuggestionsStep(), opts...)
	}
}

// BySuggestions orders the results by suggestions terms.
func BySuggestions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSuggestionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newIncidentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IncidentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, IncidentTable, IncidentColumn),
	)
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newMessagesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MessagesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MessagesTable, MessagesColumn),
	)
}
func newSuggestionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SuggestionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SuggestionsTable, SuggestionsColumn),
	)
}
