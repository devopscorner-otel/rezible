// Code generated by ent, DO NOT EDIT.

package meetingschedule

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldEQ(FieldDescription, v))
}

// BeginMinute applies equality check predicate on the "begin_minute" field. It's identical to BeginMinuteEQ.
func BeginMinute(v int) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldEQ(FieldBeginMinute, v))
}

// DurationMinutes applies equality check predicate on the "duration_minutes" field. It's identical to DurationMinutesEQ.
func DurationMinutes(v int) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldEQ(FieldDurationMinutes, v))
}

// StartDate applies equality check predicate on the "start_date" field. It's identical to StartDateEQ.
func StartDate(v time.Time) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldEQ(FieldStartDate, v))
}

// RepetitionStep applies equality check predicate on the "repetition_step" field. It's identical to RepetitionStepEQ.
func RepetitionStep(v int) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldEQ(FieldRepetitionStep, v))
}

// UntilDate applies equality check predicate on the "until_date" field. It's identical to UntilDateEQ.
func UntilDate(v time.Time) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldEQ(FieldUntilDate, v))
}

// NumRepetitions applies equality check predicate on the "num_repetitions" field. It's identical to NumRepetitionsEQ.
func NumRepetitions(v int) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldEQ(FieldNumRepetitions, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldContainsFold(FieldDescription, v))
}

// BeginMinuteEQ applies the EQ predicate on the "begin_minute" field.
func BeginMinuteEQ(v int) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldEQ(FieldBeginMinute, v))
}

// BeginMinuteNEQ applies the NEQ predicate on the "begin_minute" field.
func BeginMinuteNEQ(v int) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldNEQ(FieldBeginMinute, v))
}

// BeginMinuteIn applies the In predicate on the "begin_minute" field.
func BeginMinuteIn(vs ...int) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldIn(FieldBeginMinute, vs...))
}

// BeginMinuteNotIn applies the NotIn predicate on the "begin_minute" field.
func BeginMinuteNotIn(vs ...int) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldNotIn(FieldBeginMinute, vs...))
}

// BeginMinuteGT applies the GT predicate on the "begin_minute" field.
func BeginMinuteGT(v int) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldGT(FieldBeginMinute, v))
}

// BeginMinuteGTE applies the GTE predicate on the "begin_minute" field.
func BeginMinuteGTE(v int) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldGTE(FieldBeginMinute, v))
}

// BeginMinuteLT applies the LT predicate on the "begin_minute" field.
func BeginMinuteLT(v int) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldLT(FieldBeginMinute, v))
}

// BeginMinuteLTE applies the LTE predicate on the "begin_minute" field.
func BeginMinuteLTE(v int) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldLTE(FieldBeginMinute, v))
}

// DurationMinutesEQ applies the EQ predicate on the "duration_minutes" field.
func DurationMinutesEQ(v int) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldEQ(FieldDurationMinutes, v))
}

// DurationMinutesNEQ applies the NEQ predicate on the "duration_minutes" field.
func DurationMinutesNEQ(v int) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldNEQ(FieldDurationMinutes, v))
}

// DurationMinutesIn applies the In predicate on the "duration_minutes" field.
func DurationMinutesIn(vs ...int) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldIn(FieldDurationMinutes, vs...))
}

// DurationMinutesNotIn applies the NotIn predicate on the "duration_minutes" field.
func DurationMinutesNotIn(vs ...int) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldNotIn(FieldDurationMinutes, vs...))
}

// DurationMinutesGT applies the GT predicate on the "duration_minutes" field.
func DurationMinutesGT(v int) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldGT(FieldDurationMinutes, v))
}

// DurationMinutesGTE applies the GTE predicate on the "duration_minutes" field.
func DurationMinutesGTE(v int) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldGTE(FieldDurationMinutes, v))
}

// DurationMinutesLT applies the LT predicate on the "duration_minutes" field.
func DurationMinutesLT(v int) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldLT(FieldDurationMinutes, v))
}

// DurationMinutesLTE applies the LTE predicate on the "duration_minutes" field.
func DurationMinutesLTE(v int) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldLTE(FieldDurationMinutes, v))
}

// StartDateEQ applies the EQ predicate on the "start_date" field.
func StartDateEQ(v time.Time) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldEQ(FieldStartDate, v))
}

// StartDateNEQ applies the NEQ predicate on the "start_date" field.
func StartDateNEQ(v time.Time) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldNEQ(FieldStartDate, v))
}

// StartDateIn applies the In predicate on the "start_date" field.
func StartDateIn(vs ...time.Time) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldIn(FieldStartDate, vs...))
}

// StartDateNotIn applies the NotIn predicate on the "start_date" field.
func StartDateNotIn(vs ...time.Time) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldNotIn(FieldStartDate, vs...))
}

// StartDateGT applies the GT predicate on the "start_date" field.
func StartDateGT(v time.Time) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldGT(FieldStartDate, v))
}

// StartDateGTE applies the GTE predicate on the "start_date" field.
func StartDateGTE(v time.Time) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldGTE(FieldStartDate, v))
}

// StartDateLT applies the LT predicate on the "start_date" field.
func StartDateLT(v time.Time) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldLT(FieldStartDate, v))
}

// StartDateLTE applies the LTE predicate on the "start_date" field.
func StartDateLTE(v time.Time) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldLTE(FieldStartDate, v))
}

// RepeatsEQ applies the EQ predicate on the "repeats" field.
func RepeatsEQ(v Repeats) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldEQ(FieldRepeats, v))
}

// RepeatsNEQ applies the NEQ predicate on the "repeats" field.
func RepeatsNEQ(v Repeats) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldNEQ(FieldRepeats, v))
}

// RepeatsIn applies the In predicate on the "repeats" field.
func RepeatsIn(vs ...Repeats) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldIn(FieldRepeats, vs...))
}

// RepeatsNotIn applies the NotIn predicate on the "repeats" field.
func RepeatsNotIn(vs ...Repeats) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldNotIn(FieldRepeats, vs...))
}

// RepetitionStepEQ applies the EQ predicate on the "repetition_step" field.
func RepetitionStepEQ(v int) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldEQ(FieldRepetitionStep, v))
}

// RepetitionStepNEQ applies the NEQ predicate on the "repetition_step" field.
func RepetitionStepNEQ(v int) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldNEQ(FieldRepetitionStep, v))
}

// RepetitionStepIn applies the In predicate on the "repetition_step" field.
func RepetitionStepIn(vs ...int) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldIn(FieldRepetitionStep, vs...))
}

// RepetitionStepNotIn applies the NotIn predicate on the "repetition_step" field.
func RepetitionStepNotIn(vs ...int) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldNotIn(FieldRepetitionStep, vs...))
}

// RepetitionStepGT applies the GT predicate on the "repetition_step" field.
func RepetitionStepGT(v int) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldGT(FieldRepetitionStep, v))
}

// RepetitionStepGTE applies the GTE predicate on the "repetition_step" field.
func RepetitionStepGTE(v int) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldGTE(FieldRepetitionStep, v))
}

// RepetitionStepLT applies the LT predicate on the "repetition_step" field.
func RepetitionStepLT(v int) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldLT(FieldRepetitionStep, v))
}

// RepetitionStepLTE applies the LTE predicate on the "repetition_step" field.
func RepetitionStepLTE(v int) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldLTE(FieldRepetitionStep, v))
}

// WeekDaysIsNil applies the IsNil predicate on the "week_days" field.
func WeekDaysIsNil() predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldIsNull(FieldWeekDays))
}

// WeekDaysNotNil applies the NotNil predicate on the "week_days" field.
func WeekDaysNotNil() predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldNotNull(FieldWeekDays))
}

// MonthlyOnEQ applies the EQ predicate on the "monthly_on" field.
func MonthlyOnEQ(v MonthlyOn) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldEQ(FieldMonthlyOn, v))
}

// MonthlyOnNEQ applies the NEQ predicate on the "monthly_on" field.
func MonthlyOnNEQ(v MonthlyOn) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldNEQ(FieldMonthlyOn, v))
}

// MonthlyOnIn applies the In predicate on the "monthly_on" field.
func MonthlyOnIn(vs ...MonthlyOn) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldIn(FieldMonthlyOn, vs...))
}

// MonthlyOnNotIn applies the NotIn predicate on the "monthly_on" field.
func MonthlyOnNotIn(vs ...MonthlyOn) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldNotIn(FieldMonthlyOn, vs...))
}

// MonthlyOnIsNil applies the IsNil predicate on the "monthly_on" field.
func MonthlyOnIsNil() predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldIsNull(FieldMonthlyOn))
}

// MonthlyOnNotNil applies the NotNil predicate on the "monthly_on" field.
func MonthlyOnNotNil() predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldNotNull(FieldMonthlyOn))
}

// UntilDateEQ applies the EQ predicate on the "until_date" field.
func UntilDateEQ(v time.Time) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldEQ(FieldUntilDate, v))
}

// UntilDateNEQ applies the NEQ predicate on the "until_date" field.
func UntilDateNEQ(v time.Time) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldNEQ(FieldUntilDate, v))
}

// UntilDateIn applies the In predicate on the "until_date" field.
func UntilDateIn(vs ...time.Time) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldIn(FieldUntilDate, vs...))
}

// UntilDateNotIn applies the NotIn predicate on the "until_date" field.
func UntilDateNotIn(vs ...time.Time) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldNotIn(FieldUntilDate, vs...))
}

// UntilDateGT applies the GT predicate on the "until_date" field.
func UntilDateGT(v time.Time) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldGT(FieldUntilDate, v))
}

// UntilDateGTE applies the GTE predicate on the "until_date" field.
func UntilDateGTE(v time.Time) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldGTE(FieldUntilDate, v))
}

// UntilDateLT applies the LT predicate on the "until_date" field.
func UntilDateLT(v time.Time) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldLT(FieldUntilDate, v))
}

// UntilDateLTE applies the LTE predicate on the "until_date" field.
func UntilDateLTE(v time.Time) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldLTE(FieldUntilDate, v))
}

// UntilDateIsNil applies the IsNil predicate on the "until_date" field.
func UntilDateIsNil() predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldIsNull(FieldUntilDate))
}

// UntilDateNotNil applies the NotNil predicate on the "until_date" field.
func UntilDateNotNil() predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldNotNull(FieldUntilDate))
}

// NumRepetitionsEQ applies the EQ predicate on the "num_repetitions" field.
func NumRepetitionsEQ(v int) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldEQ(FieldNumRepetitions, v))
}

// NumRepetitionsNEQ applies the NEQ predicate on the "num_repetitions" field.
func NumRepetitionsNEQ(v int) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldNEQ(FieldNumRepetitions, v))
}

// NumRepetitionsIn applies the In predicate on the "num_repetitions" field.
func NumRepetitionsIn(vs ...int) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldIn(FieldNumRepetitions, vs...))
}

// NumRepetitionsNotIn applies the NotIn predicate on the "num_repetitions" field.
func NumRepetitionsNotIn(vs ...int) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldNotIn(FieldNumRepetitions, vs...))
}

// NumRepetitionsGT applies the GT predicate on the "num_repetitions" field.
func NumRepetitionsGT(v int) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldGT(FieldNumRepetitions, v))
}

// NumRepetitionsGTE applies the GTE predicate on the "num_repetitions" field.
func NumRepetitionsGTE(v int) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldGTE(FieldNumRepetitions, v))
}

// NumRepetitionsLT applies the LT predicate on the "num_repetitions" field.
func NumRepetitionsLT(v int) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldLT(FieldNumRepetitions, v))
}

// NumRepetitionsLTE applies the LTE predicate on the "num_repetitions" field.
func NumRepetitionsLTE(v int) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldLTE(FieldNumRepetitions, v))
}

// NumRepetitionsIsNil applies the IsNil predicate on the "num_repetitions" field.
func NumRepetitionsIsNil() predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldIsNull(FieldNumRepetitions))
}

// NumRepetitionsNotNil applies the NotNil predicate on the "num_repetitions" field.
func NumRepetitionsNotNil() predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.FieldNotNull(FieldNumRepetitions))
}

// HasSessions applies the HasEdge predicate on the "sessions" edge.
func HasSessions() predicate.MeetingSchedule {
	return predicate.MeetingSchedule(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SessionsTable, SessionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSessionsWith applies the HasEdge predicate on the "sessions" edge with a given conditions (other predicates).
func HasSessionsWith(preds ...predicate.MeetingSession) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(func(s *sql.Selector) {
		step := newSessionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOwningTeam applies the HasEdge predicate on the "owning_team" edge.
func HasOwningTeam() predicate.MeetingSchedule {
	return predicate.MeetingSchedule(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, OwningTeamTable, OwningTeamPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwningTeamWith applies the HasEdge predicate on the "owning_team" edge with a given conditions (other predicates).
func HasOwningTeamWith(preds ...predicate.Team) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(func(s *sql.Selector) {
		step := newOwningTeamStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MeetingSchedule) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MeetingSchedule) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MeetingSchedule) predicate.MeetingSchedule {
	return predicate.MeetingSchedule(sql.NotPredicates(p))
}
