// Code generated by ent, DO NOT EDIT.

package meetingschedule

import (
	"fmt"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the meetingschedule type in the database.
	Label = "meeting_schedule"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldArchiveTime holds the string denoting the archive_time field in the database.
	FieldArchiveTime = "archive_time"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldBeginMinute holds the string denoting the begin_minute field in the database.
	FieldBeginMinute = "begin_minute"
	// FieldDurationMinutes holds the string denoting the duration_minutes field in the database.
	FieldDurationMinutes = "duration_minutes"
	// FieldStartDate holds the string denoting the start_date field in the database.
	FieldStartDate = "start_date"
	// FieldRepeats holds the string denoting the repeats field in the database.
	FieldRepeats = "repeats"
	// FieldRepetitionStep holds the string denoting the repetition_step field in the database.
	FieldRepetitionStep = "repetition_step"
	// FieldWeekDays holds the string denoting the week_days field in the database.
	FieldWeekDays = "week_days"
	// FieldMonthlyOn holds the string denoting the monthly_on field in the database.
	FieldMonthlyOn = "monthly_on"
	// FieldUntilDate holds the string denoting the until_date field in the database.
	FieldUntilDate = "until_date"
	// FieldNumRepetitions holds the string denoting the num_repetitions field in the database.
	FieldNumRepetitions = "num_repetitions"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeOwningTeam holds the string denoting the owning_team edge name in mutations.
	EdgeOwningTeam = "owning_team"
	// EdgeSessions holds the string denoting the sessions edge name in mutations.
	EdgeSessions = "sessions"
	// Table holds the table name of the meetingschedule in the database.
	Table = "meeting_schedules"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "meeting_schedules"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// OwningTeamTable is the table that holds the owning_team relation/edge. The primary key declared below.
	OwningTeamTable = "meeting_schedule_owning_team"
	// OwningTeamInverseTable is the table name for the Team entity.
	// It exists in this package in order to avoid circular dependency with the "team" package.
	OwningTeamInverseTable = "teams"
	// SessionsTable is the table that holds the sessions relation/edge.
	SessionsTable = "meeting_sessions"
	// SessionsInverseTable is the table name for the MeetingSession entity.
	// It exists in this package in order to avoid circular dependency with the "meetingsession" package.
	SessionsInverseTable = "meeting_sessions"
	// SessionsColumn is the table column denoting the sessions relation/edge.
	SessionsColumn = "meeting_session_schedule"
)

// Columns holds all SQL columns for meetingschedule fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldArchiveTime,
	FieldName,
	FieldDescription,
	FieldBeginMinute,
	FieldDurationMinutes,
	FieldStartDate,
	FieldRepeats,
	FieldRepetitionStep,
	FieldWeekDays,
	FieldMonthlyOn,
	FieldUntilDate,
	FieldNumRepetitions,
}

var (
	// OwningTeamPrimaryKey and OwningTeamColumn2 are the table columns denoting the
	// primary key for the owning_team relation (M2M).
	OwningTeamPrimaryKey = []string{"meeting_schedule_id", "team_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/rezible/rezible/ent/runtime"
var (
	Hooks        [2]ent.Hook
	Interceptors [1]ent.Interceptor
	Policy       ent.Policy
	// DefaultRepetitionStep holds the default value on creation for the "repetition_step" field.
	DefaultRepetitionStep int
	// WeekDaysValidator is a validator for the "week_days" field. It is called by the builders before save.
	WeekDaysValidator func([]string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Repeats defines the type for the "repeats" enum field.
type Repeats string

// Repeats values.
const (
	RepeatsDaily   Repeats = "daily"
	RepeatsWeekly  Repeats = "weekly"
	RepeatsMonthly Repeats = "monthly"
)

func (r Repeats) String() string {
	return string(r)
}

// RepeatsValidator is a validator for the "repeats" field enum values. It is called by the builders before save.
func RepeatsValidator(r Repeats) error {
	switch r {
	case RepeatsDaily, RepeatsWeekly, RepeatsMonthly:
		return nil
	default:
		return fmt.Errorf("meetingschedule: invalid enum value for repeats field: %q", r)
	}
}

// MonthlyOn defines the type for the "monthly_on" enum field.
type MonthlyOn string

// MonthlyOn values.
const (
	MonthlyOnSameDay     MonthlyOn = "same_day"
	MonthlyOnSameWeekday MonthlyOn = "same_weekday"
)

func (mo MonthlyOn) String() string {
	return string(mo)
}

// MonthlyOnValidator is a validator for the "monthly_on" field enum values. It is called by the builders before save.
func MonthlyOnValidator(mo MonthlyOn) error {
	switch mo {
	case MonthlyOnSameDay, MonthlyOnSameWeekday:
		return nil
	default:
		return fmt.Errorf("meetingschedule: invalid enum value for monthly_on field: %q", mo)
	}
}

// OrderOption defines the ordering options for the MeetingSchedule queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByArchiveTime orders the results by the archive_time field.
func ByArchiveTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArchiveTime, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByBeginMinute orders the results by the begin_minute field.
func ByBeginMinute(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBeginMinute, opts...).ToFunc()
}

// ByDurationMinutes orders the results by the duration_minutes field.
func ByDurationMinutes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDurationMinutes, opts...).ToFunc()
}

// ByStartDate orders the results by the start_date field.
func ByStartDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartDate, opts...).ToFunc()
}

// ByRepeats orders the results by the repeats field.
func ByRepeats(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRepeats, opts...).ToFunc()
}

// ByRepetitionStep orders the results by the repetition_step field.
func ByRepetitionStep(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRepetitionStep, opts...).ToFunc()
}

// ByMonthlyOn orders the results by the monthly_on field.
func ByMonthlyOn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMonthlyOn, opts...).ToFunc()
}

// ByUntilDate orders the results by the until_date field.
func ByUntilDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUntilDate, opts...).ToFunc()
}

// ByNumRepetitions orders the results by the num_repetitions field.
func ByNumRepetitions(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNumRepetitions, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByOwningTeamCount orders the results by owning_team count.
func ByOwningTeamCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOwningTeamStep(), opts...)
	}
}

// ByOwningTeam orders the results by owning_team terms.
func ByOwningTeam(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwningTeamStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySessionsCount orders the results by sessions count.
func BySessionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSessionsStep(), opts...)
	}
}

// BySessions orders the results by sessions terms.
func BySessions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSessionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newOwningTeamStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwningTeamInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, OwningTeamTable, OwningTeamPrimaryKey...),
	)
}
func newSessionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SessionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, SessionsTable, SessionsColumn),
	)
}
