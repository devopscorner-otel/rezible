// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/systemcomponent"
	"github.com/rezible/rezible/ent/systemcomponentcontrolrelationship"
	"github.com/rezible/rezible/ent/systemcomponentfeedbackrelationship"
)

// SystemComponentQuery is the builder for querying SystemComponent entities.
type SystemComponentQuery struct {
	config
	ctx                       *QueryContext
	order                     []systemcomponent.OrderOption
	inters                    []Interceptor
	predicates                []predicate.SystemComponent
	withParent                *SystemComponentQuery
	withChildren              *SystemComponentQuery
	withControls              *SystemComponentQuery
	withFeedbackTo            *SystemComponentQuery
	withControlRelationships  *SystemComponentControlRelationshipQuery
	withFeedbackRelationships *SystemComponentFeedbackRelationshipQuery
	withFKs                   bool
	modifiers                 []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SystemComponentQuery builder.
func (scq *SystemComponentQuery) Where(ps ...predicate.SystemComponent) *SystemComponentQuery {
	scq.predicates = append(scq.predicates, ps...)
	return scq
}

// Limit the number of records to be returned by this query.
func (scq *SystemComponentQuery) Limit(limit int) *SystemComponentQuery {
	scq.ctx.Limit = &limit
	return scq
}

// Offset to start from.
func (scq *SystemComponentQuery) Offset(offset int) *SystemComponentQuery {
	scq.ctx.Offset = &offset
	return scq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (scq *SystemComponentQuery) Unique(unique bool) *SystemComponentQuery {
	scq.ctx.Unique = &unique
	return scq
}

// Order specifies how the records should be ordered.
func (scq *SystemComponentQuery) Order(o ...systemcomponent.OrderOption) *SystemComponentQuery {
	scq.order = append(scq.order, o...)
	return scq
}

// QueryParent chains the current query on the "parent" edge.
func (scq *SystemComponentQuery) QueryParent() *SystemComponentQuery {
	query := (&SystemComponentClient{config: scq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := scq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := scq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(systemcomponent.Table, systemcomponent.FieldID, selector),
			sqlgraph.To(systemcomponent.Table, systemcomponent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, systemcomponent.ParentTable, systemcomponent.ParentColumn),
		)
		fromU = sqlgraph.SetNeighbors(scq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChildren chains the current query on the "children" edge.
func (scq *SystemComponentQuery) QueryChildren() *SystemComponentQuery {
	query := (&SystemComponentClient{config: scq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := scq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := scq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(systemcomponent.Table, systemcomponent.FieldID, selector),
			sqlgraph.To(systemcomponent.Table, systemcomponent.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, systemcomponent.ChildrenTable, systemcomponent.ChildrenColumn),
		)
		fromU = sqlgraph.SetNeighbors(scq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryControls chains the current query on the "controls" edge.
func (scq *SystemComponentQuery) QueryControls() *SystemComponentQuery {
	query := (&SystemComponentClient{config: scq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := scq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := scq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(systemcomponent.Table, systemcomponent.FieldID, selector),
			sqlgraph.To(systemcomponent.Table, systemcomponent.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, systemcomponent.ControlsTable, systemcomponent.ControlsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(scq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFeedbackTo chains the current query on the "feedback_to" edge.
func (scq *SystemComponentQuery) QueryFeedbackTo() *SystemComponentQuery {
	query := (&SystemComponentClient{config: scq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := scq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := scq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(systemcomponent.Table, systemcomponent.FieldID, selector),
			sqlgraph.To(systemcomponent.Table, systemcomponent.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, systemcomponent.FeedbackToTable, systemcomponent.FeedbackToPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(scq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryControlRelationships chains the current query on the "control_relationships" edge.
func (scq *SystemComponentQuery) QueryControlRelationships() *SystemComponentControlRelationshipQuery {
	query := (&SystemComponentControlRelationshipClient{config: scq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := scq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := scq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(systemcomponent.Table, systemcomponent.FieldID, selector),
			sqlgraph.To(systemcomponentcontrolrelationship.Table, systemcomponentcontrolrelationship.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, systemcomponent.ControlRelationshipsTable, systemcomponent.ControlRelationshipsColumn),
		)
		fromU = sqlgraph.SetNeighbors(scq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFeedbackRelationships chains the current query on the "feedback_relationships" edge.
func (scq *SystemComponentQuery) QueryFeedbackRelationships() *SystemComponentFeedbackRelationshipQuery {
	query := (&SystemComponentFeedbackRelationshipClient{config: scq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := scq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := scq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(systemcomponent.Table, systemcomponent.FieldID, selector),
			sqlgraph.To(systemcomponentfeedbackrelationship.Table, systemcomponentfeedbackrelationship.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, systemcomponent.FeedbackRelationshipsTable, systemcomponent.FeedbackRelationshipsColumn),
		)
		fromU = sqlgraph.SetNeighbors(scq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SystemComponent entity from the query.
// Returns a *NotFoundError when no SystemComponent was found.
func (scq *SystemComponentQuery) First(ctx context.Context) (*SystemComponent, error) {
	nodes, err := scq.Limit(1).All(setContextOp(ctx, scq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{systemcomponent.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (scq *SystemComponentQuery) FirstX(ctx context.Context) *SystemComponent {
	node, err := scq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SystemComponent ID from the query.
// Returns a *NotFoundError when no SystemComponent ID was found.
func (scq *SystemComponentQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = scq.Limit(1).IDs(setContextOp(ctx, scq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{systemcomponent.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (scq *SystemComponentQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := scq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SystemComponent entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SystemComponent entity is found.
// Returns a *NotFoundError when no SystemComponent entities are found.
func (scq *SystemComponentQuery) Only(ctx context.Context) (*SystemComponent, error) {
	nodes, err := scq.Limit(2).All(setContextOp(ctx, scq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{systemcomponent.Label}
	default:
		return nil, &NotSingularError{systemcomponent.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (scq *SystemComponentQuery) OnlyX(ctx context.Context) *SystemComponent {
	node, err := scq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SystemComponent ID in the query.
// Returns a *NotSingularError when more than one SystemComponent ID is found.
// Returns a *NotFoundError when no entities are found.
func (scq *SystemComponentQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = scq.Limit(2).IDs(setContextOp(ctx, scq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{systemcomponent.Label}
	default:
		err = &NotSingularError{systemcomponent.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (scq *SystemComponentQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := scq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SystemComponents.
func (scq *SystemComponentQuery) All(ctx context.Context) ([]*SystemComponent, error) {
	ctx = setContextOp(ctx, scq.ctx, ent.OpQueryAll)
	if err := scq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SystemComponent, *SystemComponentQuery]()
	return withInterceptors[[]*SystemComponent](ctx, scq, qr, scq.inters)
}

// AllX is like All, but panics if an error occurs.
func (scq *SystemComponentQuery) AllX(ctx context.Context) []*SystemComponent {
	nodes, err := scq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SystemComponent IDs.
func (scq *SystemComponentQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if scq.ctx.Unique == nil && scq.path != nil {
		scq.Unique(true)
	}
	ctx = setContextOp(ctx, scq.ctx, ent.OpQueryIDs)
	if err = scq.Select(systemcomponent.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (scq *SystemComponentQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := scq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (scq *SystemComponentQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, scq.ctx, ent.OpQueryCount)
	if err := scq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, scq, querierCount[*SystemComponentQuery](), scq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (scq *SystemComponentQuery) CountX(ctx context.Context) int {
	count, err := scq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (scq *SystemComponentQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, scq.ctx, ent.OpQueryExist)
	switch _, err := scq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (scq *SystemComponentQuery) ExistX(ctx context.Context) bool {
	exist, err := scq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SystemComponentQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (scq *SystemComponentQuery) Clone() *SystemComponentQuery {
	if scq == nil {
		return nil
	}
	return &SystemComponentQuery{
		config:                    scq.config,
		ctx:                       scq.ctx.Clone(),
		order:                     append([]systemcomponent.OrderOption{}, scq.order...),
		inters:                    append([]Interceptor{}, scq.inters...),
		predicates:                append([]predicate.SystemComponent{}, scq.predicates...),
		withParent:                scq.withParent.Clone(),
		withChildren:              scq.withChildren.Clone(),
		withControls:              scq.withControls.Clone(),
		withFeedbackTo:            scq.withFeedbackTo.Clone(),
		withControlRelationships:  scq.withControlRelationships.Clone(),
		withFeedbackRelationships: scq.withFeedbackRelationships.Clone(),
		// clone intermediate query.
		sql:       scq.sql.Clone(),
		path:      scq.path,
		modifiers: append([]func(*sql.Selector){}, scq.modifiers...),
	}
}

// WithParent tells the query-builder to eager-load the nodes that are connected to
// the "parent" edge. The optional arguments are used to configure the query builder of the edge.
func (scq *SystemComponentQuery) WithParent(opts ...func(*SystemComponentQuery)) *SystemComponentQuery {
	query := (&SystemComponentClient{config: scq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	scq.withParent = query
	return scq
}

// WithChildren tells the query-builder to eager-load the nodes that are connected to
// the "children" edge. The optional arguments are used to configure the query builder of the edge.
func (scq *SystemComponentQuery) WithChildren(opts ...func(*SystemComponentQuery)) *SystemComponentQuery {
	query := (&SystemComponentClient{config: scq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	scq.withChildren = query
	return scq
}

// WithControls tells the query-builder to eager-load the nodes that are connected to
// the "controls" edge. The optional arguments are used to configure the query builder of the edge.
func (scq *SystemComponentQuery) WithControls(opts ...func(*SystemComponentQuery)) *SystemComponentQuery {
	query := (&SystemComponentClient{config: scq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	scq.withControls = query
	return scq
}

// WithFeedbackTo tells the query-builder to eager-load the nodes that are connected to
// the "feedback_to" edge. The optional arguments are used to configure the query builder of the edge.
func (scq *SystemComponentQuery) WithFeedbackTo(opts ...func(*SystemComponentQuery)) *SystemComponentQuery {
	query := (&SystemComponentClient{config: scq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	scq.withFeedbackTo = query
	return scq
}

// WithControlRelationships tells the query-builder to eager-load the nodes that are connected to
// the "control_relationships" edge. The optional arguments are used to configure the query builder of the edge.
func (scq *SystemComponentQuery) WithControlRelationships(opts ...func(*SystemComponentControlRelationshipQuery)) *SystemComponentQuery {
	query := (&SystemComponentControlRelationshipClient{config: scq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	scq.withControlRelationships = query
	return scq
}

// WithFeedbackRelationships tells the query-builder to eager-load the nodes that are connected to
// the "feedback_relationships" edge. The optional arguments are used to configure the query builder of the edge.
func (scq *SystemComponentQuery) WithFeedbackRelationships(opts ...func(*SystemComponentFeedbackRelationshipQuery)) *SystemComponentQuery {
	query := (&SystemComponentFeedbackRelationshipClient{config: scq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	scq.withFeedbackRelationships = query
	return scq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SystemComponent.Query().
//		GroupBy(systemcomponent.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (scq *SystemComponentQuery) GroupBy(field string, fields ...string) *SystemComponentGroupBy {
	scq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SystemComponentGroupBy{build: scq}
	grbuild.flds = &scq.ctx.Fields
	grbuild.label = systemcomponent.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.SystemComponent.Query().
//		Select(systemcomponent.FieldName).
//		Scan(ctx, &v)
func (scq *SystemComponentQuery) Select(fields ...string) *SystemComponentSelect {
	scq.ctx.Fields = append(scq.ctx.Fields, fields...)
	sbuild := &SystemComponentSelect{SystemComponentQuery: scq}
	sbuild.label = systemcomponent.Label
	sbuild.flds, sbuild.scan = &scq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SystemComponentSelect configured with the given aggregations.
func (scq *SystemComponentQuery) Aggregate(fns ...AggregateFunc) *SystemComponentSelect {
	return scq.Select().Aggregate(fns...)
}

func (scq *SystemComponentQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range scq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, scq); err != nil {
				return err
			}
		}
	}
	for _, f := range scq.ctx.Fields {
		if !systemcomponent.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if scq.path != nil {
		prev, err := scq.path(ctx)
		if err != nil {
			return err
		}
		scq.sql = prev
	}
	return nil
}

func (scq *SystemComponentQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SystemComponent, error) {
	var (
		nodes       = []*SystemComponent{}
		withFKs     = scq.withFKs
		_spec       = scq.querySpec()
		loadedTypes = [6]bool{
			scq.withParent != nil,
			scq.withChildren != nil,
			scq.withControls != nil,
			scq.withFeedbackTo != nil,
			scq.withControlRelationships != nil,
			scq.withFeedbackRelationships != nil,
		}
	)
	if scq.withParent != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, systemcomponent.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SystemComponent).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SystemComponent{config: scq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(scq.modifiers) > 0 {
		_spec.Modifiers = scq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, scq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := scq.withParent; query != nil {
		if err := scq.loadParent(ctx, query, nodes, nil,
			func(n *SystemComponent, e *SystemComponent) { n.Edges.Parent = e }); err != nil {
			return nil, err
		}
	}
	if query := scq.withChildren; query != nil {
		if err := scq.loadChildren(ctx, query, nodes,
			func(n *SystemComponent) { n.Edges.Children = []*SystemComponent{} },
			func(n *SystemComponent, e *SystemComponent) { n.Edges.Children = append(n.Edges.Children, e) }); err != nil {
			return nil, err
		}
	}
	if query := scq.withControls; query != nil {
		if err := scq.loadControls(ctx, query, nodes,
			func(n *SystemComponent) { n.Edges.Controls = []*SystemComponent{} },
			func(n *SystemComponent, e *SystemComponent) { n.Edges.Controls = append(n.Edges.Controls, e) }); err != nil {
			return nil, err
		}
	}
	if query := scq.withFeedbackTo; query != nil {
		if err := scq.loadFeedbackTo(ctx, query, nodes,
			func(n *SystemComponent) { n.Edges.FeedbackTo = []*SystemComponent{} },
			func(n *SystemComponent, e *SystemComponent) { n.Edges.FeedbackTo = append(n.Edges.FeedbackTo, e) }); err != nil {
			return nil, err
		}
	}
	if query := scq.withControlRelationships; query != nil {
		if err := scq.loadControlRelationships(ctx, query, nodes,
			func(n *SystemComponent) { n.Edges.ControlRelationships = []*SystemComponentControlRelationship{} },
			func(n *SystemComponent, e *SystemComponentControlRelationship) {
				n.Edges.ControlRelationships = append(n.Edges.ControlRelationships, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := scq.withFeedbackRelationships; query != nil {
		if err := scq.loadFeedbackRelationships(ctx, query, nodes,
			func(n *SystemComponent) { n.Edges.FeedbackRelationships = []*SystemComponentFeedbackRelationship{} },
			func(n *SystemComponent, e *SystemComponentFeedbackRelationship) {
				n.Edges.FeedbackRelationships = append(n.Edges.FeedbackRelationships, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (scq *SystemComponentQuery) loadParent(ctx context.Context, query *SystemComponentQuery, nodes []*SystemComponent, init func(*SystemComponent), assign func(*SystemComponent, *SystemComponent)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*SystemComponent)
	for i := range nodes {
		if nodes[i].system_component_children == nil {
			continue
		}
		fk := *nodes[i].system_component_children
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(systemcomponent.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "system_component_children" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (scq *SystemComponentQuery) loadChildren(ctx context.Context, query *SystemComponentQuery, nodes []*SystemComponent, init func(*SystemComponent), assign func(*SystemComponent, *SystemComponent)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*SystemComponent)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.SystemComponent(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(systemcomponent.ChildrenColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.system_component_children
		if fk == nil {
			return fmt.Errorf(`foreign-key "system_component_children" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "system_component_children" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (scq *SystemComponentQuery) loadControls(ctx context.Context, query *SystemComponentQuery, nodes []*SystemComponent, init func(*SystemComponent), assign func(*SystemComponent, *SystemComponent)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*SystemComponent)
	nids := make(map[uuid.UUID]map[*SystemComponent]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(systemcomponent.ControlsTable)
		s.Join(joinT).On(s.C(systemcomponent.FieldID), joinT.C(systemcomponent.ControlsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(systemcomponent.ControlsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(systemcomponent.ControlsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*SystemComponent]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*SystemComponent](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "controls" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (scq *SystemComponentQuery) loadFeedbackTo(ctx context.Context, query *SystemComponentQuery, nodes []*SystemComponent, init func(*SystemComponent), assign func(*SystemComponent, *SystemComponent)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*SystemComponent)
	nids := make(map[uuid.UUID]map[*SystemComponent]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(systemcomponent.FeedbackToTable)
		s.Join(joinT).On(s.C(systemcomponent.FieldID), joinT.C(systemcomponent.FeedbackToPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(systemcomponent.FeedbackToPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(systemcomponent.FeedbackToPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*SystemComponent]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*SystemComponent](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "feedback_to" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (scq *SystemComponentQuery) loadControlRelationships(ctx context.Context, query *SystemComponentControlRelationshipQuery, nodes []*SystemComponent, init func(*SystemComponent), assign func(*SystemComponent, *SystemComponentControlRelationship)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*SystemComponent)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(systemcomponentcontrolrelationship.FieldControllerID)
	}
	query.Where(predicate.SystemComponentControlRelationship(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(systemcomponent.ControlRelationshipsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ControllerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "controller_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (scq *SystemComponentQuery) loadFeedbackRelationships(ctx context.Context, query *SystemComponentFeedbackRelationshipQuery, nodes []*SystemComponent, init func(*SystemComponent), assign func(*SystemComponent, *SystemComponentFeedbackRelationship)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*SystemComponent)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(systemcomponentfeedbackrelationship.FieldSourceID)
	}
	query.Where(predicate.SystemComponentFeedbackRelationship(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(systemcomponent.FeedbackRelationshipsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.SourceID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "source_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (scq *SystemComponentQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := scq.querySpec()
	if len(scq.modifiers) > 0 {
		_spec.Modifiers = scq.modifiers
	}
	_spec.Node.Columns = scq.ctx.Fields
	if len(scq.ctx.Fields) > 0 {
		_spec.Unique = scq.ctx.Unique != nil && *scq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, scq.driver, _spec)
}

func (scq *SystemComponentQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(systemcomponent.Table, systemcomponent.Columns, sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID))
	_spec.From = scq.sql
	if unique := scq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if scq.path != nil {
		_spec.Unique = true
	}
	if fields := scq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, systemcomponent.FieldID)
		for i := range fields {
			if fields[i] != systemcomponent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := scq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := scq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := scq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := scq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (scq *SystemComponentQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(scq.driver.Dialect())
	t1 := builder.Table(systemcomponent.Table)
	columns := scq.ctx.Fields
	if len(columns) == 0 {
		columns = systemcomponent.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if scq.sql != nil {
		selector = scq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if scq.ctx.Unique != nil && *scq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range scq.modifiers {
		m(selector)
	}
	for _, p := range scq.predicates {
		p(selector)
	}
	for _, p := range scq.order {
		p(selector)
	}
	if offset := scq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := scq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (scq *SystemComponentQuery) Modify(modifiers ...func(s *sql.Selector)) *SystemComponentSelect {
	scq.modifiers = append(scq.modifiers, modifiers...)
	return scq.Select()
}

// SystemComponentGroupBy is the group-by builder for SystemComponent entities.
type SystemComponentGroupBy struct {
	selector
	build *SystemComponentQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (scgb *SystemComponentGroupBy) Aggregate(fns ...AggregateFunc) *SystemComponentGroupBy {
	scgb.fns = append(scgb.fns, fns...)
	return scgb
}

// Scan applies the selector query and scans the result into the given value.
func (scgb *SystemComponentGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, scgb.build.ctx, ent.OpQueryGroupBy)
	if err := scgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SystemComponentQuery, *SystemComponentGroupBy](ctx, scgb.build, scgb, scgb.build.inters, v)
}

func (scgb *SystemComponentGroupBy) sqlScan(ctx context.Context, root *SystemComponentQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(scgb.fns))
	for _, fn := range scgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*scgb.flds)+len(scgb.fns))
		for _, f := range *scgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*scgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := scgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SystemComponentSelect is the builder for selecting fields of SystemComponent entities.
type SystemComponentSelect struct {
	*SystemComponentQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (scs *SystemComponentSelect) Aggregate(fns ...AggregateFunc) *SystemComponentSelect {
	scs.fns = append(scs.fns, fns...)
	return scs
}

// Scan applies the selector query and scans the result into the given value.
func (scs *SystemComponentSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, scs.ctx, ent.OpQuerySelect)
	if err := scs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SystemComponentQuery, *SystemComponentSelect](ctx, scs.SystemComponentQuery, scs, scs.inters, v)
}

func (scs *SystemComponentSelect) sqlScan(ctx context.Context, root *SystemComponentQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(scs.fns))
	for _, fn := range scs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*scs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := scs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (scs *SystemComponentSelect) Modify(modifiers ...func(s *sql.Selector)) *SystemComponentSelect {
	scs.modifiers = append(scs.modifiers, modifiers...)
	return scs
}
