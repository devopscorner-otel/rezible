// Code generated by ent, DO NOT EDIT.

package oncallshift

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v int) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldEQ(FieldTenantID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldEQ(FieldUserID, v))
}

// RosterID applies equality check predicate on the "roster_id" field. It's identical to RosterIDEQ.
func RosterID(v uuid.UUID) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldEQ(FieldRosterID, v))
}

// ProviderID applies equality check predicate on the "provider_id" field. It's identical to ProviderIDEQ.
func ProviderID(v string) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldEQ(FieldProviderID, v))
}

// PrimaryShiftID applies equality check predicate on the "primary_shift_id" field. It's identical to PrimaryShiftIDEQ.
func PrimaryShiftID(v uuid.UUID) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldEQ(FieldPrimaryShiftID, v))
}

// StartAt applies equality check predicate on the "start_at" field. It's identical to StartAtEQ.
func StartAt(v time.Time) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldEQ(FieldStartAt, v))
}

// EndAt applies equality check predicate on the "end_at" field. It's identical to EndAtEQ.
func EndAt(v time.Time) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldEQ(FieldEndAt, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v int) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v int) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...int) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...int) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldNotIn(FieldTenantID, vs...))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldNotIn(FieldUserID, vs...))
}

// RosterIDEQ applies the EQ predicate on the "roster_id" field.
func RosterIDEQ(v uuid.UUID) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldEQ(FieldRosterID, v))
}

// RosterIDNEQ applies the NEQ predicate on the "roster_id" field.
func RosterIDNEQ(v uuid.UUID) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldNEQ(FieldRosterID, v))
}

// RosterIDIn applies the In predicate on the "roster_id" field.
func RosterIDIn(vs ...uuid.UUID) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldIn(FieldRosterID, vs...))
}

// RosterIDNotIn applies the NotIn predicate on the "roster_id" field.
func RosterIDNotIn(vs ...uuid.UUID) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldNotIn(FieldRosterID, vs...))
}

// ProviderIDEQ applies the EQ predicate on the "provider_id" field.
func ProviderIDEQ(v string) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldEQ(FieldProviderID, v))
}

// ProviderIDNEQ applies the NEQ predicate on the "provider_id" field.
func ProviderIDNEQ(v string) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldNEQ(FieldProviderID, v))
}

// ProviderIDIn applies the In predicate on the "provider_id" field.
func ProviderIDIn(vs ...string) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldIn(FieldProviderID, vs...))
}

// ProviderIDNotIn applies the NotIn predicate on the "provider_id" field.
func ProviderIDNotIn(vs ...string) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldNotIn(FieldProviderID, vs...))
}

// ProviderIDGT applies the GT predicate on the "provider_id" field.
func ProviderIDGT(v string) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldGT(FieldProviderID, v))
}

// ProviderIDGTE applies the GTE predicate on the "provider_id" field.
func ProviderIDGTE(v string) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldGTE(FieldProviderID, v))
}

// ProviderIDLT applies the LT predicate on the "provider_id" field.
func ProviderIDLT(v string) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldLT(FieldProviderID, v))
}

// ProviderIDLTE applies the LTE predicate on the "provider_id" field.
func ProviderIDLTE(v string) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldLTE(FieldProviderID, v))
}

// ProviderIDContains applies the Contains predicate on the "provider_id" field.
func ProviderIDContains(v string) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldContains(FieldProviderID, v))
}

// ProviderIDHasPrefix applies the HasPrefix predicate on the "provider_id" field.
func ProviderIDHasPrefix(v string) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldHasPrefix(FieldProviderID, v))
}

// ProviderIDHasSuffix applies the HasSuffix predicate on the "provider_id" field.
func ProviderIDHasSuffix(v string) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldHasSuffix(FieldProviderID, v))
}

// ProviderIDIsNil applies the IsNil predicate on the "provider_id" field.
func ProviderIDIsNil() predicate.OncallShift {
	return predicate.OncallShift(sql.FieldIsNull(FieldProviderID))
}

// ProviderIDNotNil applies the NotNil predicate on the "provider_id" field.
func ProviderIDNotNil() predicate.OncallShift {
	return predicate.OncallShift(sql.FieldNotNull(FieldProviderID))
}

// ProviderIDEqualFold applies the EqualFold predicate on the "provider_id" field.
func ProviderIDEqualFold(v string) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldEqualFold(FieldProviderID, v))
}

// ProviderIDContainsFold applies the ContainsFold predicate on the "provider_id" field.
func ProviderIDContainsFold(v string) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldContainsFold(FieldProviderID, v))
}

// RoleEQ applies the EQ predicate on the "role" field.
func RoleEQ(v Role) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldEQ(FieldRole, v))
}

// RoleNEQ applies the NEQ predicate on the "role" field.
func RoleNEQ(v Role) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldNEQ(FieldRole, v))
}

// RoleIn applies the In predicate on the "role" field.
func RoleIn(vs ...Role) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldIn(FieldRole, vs...))
}

// RoleNotIn applies the NotIn predicate on the "role" field.
func RoleNotIn(vs ...Role) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldNotIn(FieldRole, vs...))
}

// RoleIsNil applies the IsNil predicate on the "role" field.
func RoleIsNil() predicate.OncallShift {
	return predicate.OncallShift(sql.FieldIsNull(FieldRole))
}

// RoleNotNil applies the NotNil predicate on the "role" field.
func RoleNotNil() predicate.OncallShift {
	return predicate.OncallShift(sql.FieldNotNull(FieldRole))
}

// PrimaryShiftIDEQ applies the EQ predicate on the "primary_shift_id" field.
func PrimaryShiftIDEQ(v uuid.UUID) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldEQ(FieldPrimaryShiftID, v))
}

// PrimaryShiftIDNEQ applies the NEQ predicate on the "primary_shift_id" field.
func PrimaryShiftIDNEQ(v uuid.UUID) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldNEQ(FieldPrimaryShiftID, v))
}

// PrimaryShiftIDIn applies the In predicate on the "primary_shift_id" field.
func PrimaryShiftIDIn(vs ...uuid.UUID) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldIn(FieldPrimaryShiftID, vs...))
}

// PrimaryShiftIDNotIn applies the NotIn predicate on the "primary_shift_id" field.
func PrimaryShiftIDNotIn(vs ...uuid.UUID) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldNotIn(FieldPrimaryShiftID, vs...))
}

// PrimaryShiftIDIsNil applies the IsNil predicate on the "primary_shift_id" field.
func PrimaryShiftIDIsNil() predicate.OncallShift {
	return predicate.OncallShift(sql.FieldIsNull(FieldPrimaryShiftID))
}

// PrimaryShiftIDNotNil applies the NotNil predicate on the "primary_shift_id" field.
func PrimaryShiftIDNotNil() predicate.OncallShift {
	return predicate.OncallShift(sql.FieldNotNull(FieldPrimaryShiftID))
}

// StartAtEQ applies the EQ predicate on the "start_at" field.
func StartAtEQ(v time.Time) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldEQ(FieldStartAt, v))
}

// StartAtNEQ applies the NEQ predicate on the "start_at" field.
func StartAtNEQ(v time.Time) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldNEQ(FieldStartAt, v))
}

// StartAtIn applies the In predicate on the "start_at" field.
func StartAtIn(vs ...time.Time) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldIn(FieldStartAt, vs...))
}

// StartAtNotIn applies the NotIn predicate on the "start_at" field.
func StartAtNotIn(vs ...time.Time) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldNotIn(FieldStartAt, vs...))
}

// StartAtGT applies the GT predicate on the "start_at" field.
func StartAtGT(v time.Time) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldGT(FieldStartAt, v))
}

// StartAtGTE applies the GTE predicate on the "start_at" field.
func StartAtGTE(v time.Time) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldGTE(FieldStartAt, v))
}

// StartAtLT applies the LT predicate on the "start_at" field.
func StartAtLT(v time.Time) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldLT(FieldStartAt, v))
}

// StartAtLTE applies the LTE predicate on the "start_at" field.
func StartAtLTE(v time.Time) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldLTE(FieldStartAt, v))
}

// EndAtEQ applies the EQ predicate on the "end_at" field.
func EndAtEQ(v time.Time) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldEQ(FieldEndAt, v))
}

// EndAtNEQ applies the NEQ predicate on the "end_at" field.
func EndAtNEQ(v time.Time) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldNEQ(FieldEndAt, v))
}

// EndAtIn applies the In predicate on the "end_at" field.
func EndAtIn(vs ...time.Time) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldIn(FieldEndAt, vs...))
}

// EndAtNotIn applies the NotIn predicate on the "end_at" field.
func EndAtNotIn(vs ...time.Time) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldNotIn(FieldEndAt, vs...))
}

// EndAtGT applies the GT predicate on the "end_at" field.
func EndAtGT(v time.Time) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldGT(FieldEndAt, v))
}

// EndAtGTE applies the GTE predicate on the "end_at" field.
func EndAtGTE(v time.Time) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldGTE(FieldEndAt, v))
}

// EndAtLT applies the LT predicate on the "end_at" field.
func EndAtLT(v time.Time) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldLT(FieldEndAt, v))
}

// EndAtLTE applies the LTE predicate on the "end_at" field.
func EndAtLTE(v time.Time) predicate.OncallShift {
	return predicate.OncallShift(sql.FieldLTE(FieldEndAt, v))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.OncallShift {
	return predicate.OncallShift(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.OncallShift {
	return predicate.OncallShift(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.OncallShift {
	return predicate.OncallShift(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.OncallShift {
	return predicate.OncallShift(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRoster applies the HasEdge predicate on the "roster" edge.
func HasRoster() predicate.OncallShift {
	return predicate.OncallShift(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RosterTable, RosterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRosterWith applies the HasEdge predicate on the "roster" edge with a given conditions (other predicates).
func HasRosterWith(preds ...predicate.OncallRoster) predicate.OncallShift {
	return predicate.OncallShift(func(s *sql.Selector) {
		step := newRosterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPrimaryShift applies the HasEdge predicate on the "primary_shift" edge.
func HasPrimaryShift() predicate.OncallShift {
	return predicate.OncallShift(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, PrimaryShiftTable, PrimaryShiftColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPrimaryShiftWith applies the HasEdge predicate on the "primary_shift" edge with a given conditions (other predicates).
func HasPrimaryShiftWith(preds ...predicate.OncallShift) predicate.OncallShift {
	return predicate.OncallShift(func(s *sql.Selector) {
		step := newPrimaryShiftStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHandover applies the HasEdge predicate on the "handover" edge.
func HasHandover() predicate.OncallShift {
	return predicate.OncallShift(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, HandoverTable, HandoverColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHandoverWith applies the HasEdge predicate on the "handover" edge with a given conditions (other predicates).
func HasHandoverWith(preds ...predicate.OncallShiftHandover) predicate.OncallShift {
	return predicate.OncallShift(func(s *sql.Selector) {
		step := newHandoverStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMetrics applies the HasEdge predicate on the "metrics" edge.
func HasMetrics() predicate.OncallShift {
	return predicate.OncallShift(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, MetricsTable, MetricsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMetricsWith applies the HasEdge predicate on the "metrics" edge with a given conditions (other predicates).
func HasMetricsWith(preds ...predicate.OncallShiftMetrics) predicate.OncallShift {
	return predicate.OncallShift(func(s *sql.Selector) {
		step := newMetricsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OncallShift) predicate.OncallShift {
	return predicate.OncallShift(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OncallShift) predicate.OncallShift {
	return predicate.OncallShift(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OncallShift) predicate.OncallShift {
	return predicate.OncallShift(sql.NotPredicates(p))
}
