// Code generated by ent, DO NOT EDIT.

package tenant

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Tenant {
	return predicate.Tenant(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Tenant {
	return predicate.Tenant(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Tenant {
	return predicate.Tenant(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Tenant {
	return predicate.Tenant(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Tenant {
	return predicate.Tenant(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Tenant {
	return predicate.Tenant(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Tenant {
	return predicate.Tenant(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldName, v))
}

// PublicID applies equality check predicate on the "public_id" field. It's identical to PublicIDEQ.
func PublicID(v uuid.UUID) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldPublicID, v))
}

// AuthID applies equality check predicate on the "auth_id" field. It's identical to AuthIDEQ.
func AuthID(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldAuthID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Tenant {
	return predicate.Tenant(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Tenant {
	return predicate.Tenant(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldContainsFold(FieldName, v))
}

// PublicIDEQ applies the EQ predicate on the "public_id" field.
func PublicIDEQ(v uuid.UUID) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldPublicID, v))
}

// PublicIDNEQ applies the NEQ predicate on the "public_id" field.
func PublicIDNEQ(v uuid.UUID) predicate.Tenant {
	return predicate.Tenant(sql.FieldNEQ(FieldPublicID, v))
}

// PublicIDIn applies the In predicate on the "public_id" field.
func PublicIDIn(vs ...uuid.UUID) predicate.Tenant {
	return predicate.Tenant(sql.FieldIn(FieldPublicID, vs...))
}

// PublicIDNotIn applies the NotIn predicate on the "public_id" field.
func PublicIDNotIn(vs ...uuid.UUID) predicate.Tenant {
	return predicate.Tenant(sql.FieldNotIn(FieldPublicID, vs...))
}

// PublicIDGT applies the GT predicate on the "public_id" field.
func PublicIDGT(v uuid.UUID) predicate.Tenant {
	return predicate.Tenant(sql.FieldGT(FieldPublicID, v))
}

// PublicIDGTE applies the GTE predicate on the "public_id" field.
func PublicIDGTE(v uuid.UUID) predicate.Tenant {
	return predicate.Tenant(sql.FieldGTE(FieldPublicID, v))
}

// PublicIDLT applies the LT predicate on the "public_id" field.
func PublicIDLT(v uuid.UUID) predicate.Tenant {
	return predicate.Tenant(sql.FieldLT(FieldPublicID, v))
}

// PublicIDLTE applies the LTE predicate on the "public_id" field.
func PublicIDLTE(v uuid.UUID) predicate.Tenant {
	return predicate.Tenant(sql.FieldLTE(FieldPublicID, v))
}

// AuthIDEQ applies the EQ predicate on the "auth_id" field.
func AuthIDEQ(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldAuthID, v))
}

// AuthIDNEQ applies the NEQ predicate on the "auth_id" field.
func AuthIDNEQ(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldNEQ(FieldAuthID, v))
}

// AuthIDIn applies the In predicate on the "auth_id" field.
func AuthIDIn(vs ...string) predicate.Tenant {
	return predicate.Tenant(sql.FieldIn(FieldAuthID, vs...))
}

// AuthIDNotIn applies the NotIn predicate on the "auth_id" field.
func AuthIDNotIn(vs ...string) predicate.Tenant {
	return predicate.Tenant(sql.FieldNotIn(FieldAuthID, vs...))
}

// AuthIDGT applies the GT predicate on the "auth_id" field.
func AuthIDGT(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldGT(FieldAuthID, v))
}

// AuthIDGTE applies the GTE predicate on the "auth_id" field.
func AuthIDGTE(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldGTE(FieldAuthID, v))
}

// AuthIDLT applies the LT predicate on the "auth_id" field.
func AuthIDLT(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldLT(FieldAuthID, v))
}

// AuthIDLTE applies the LTE predicate on the "auth_id" field.
func AuthIDLTE(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldLTE(FieldAuthID, v))
}

// AuthIDContains applies the Contains predicate on the "auth_id" field.
func AuthIDContains(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldContains(FieldAuthID, v))
}

// AuthIDHasPrefix applies the HasPrefix predicate on the "auth_id" field.
func AuthIDHasPrefix(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldHasPrefix(FieldAuthID, v))
}

// AuthIDHasSuffix applies the HasSuffix predicate on the "auth_id" field.
func AuthIDHasSuffix(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldHasSuffix(FieldAuthID, v))
}

// AuthIDEqualFold applies the EqualFold predicate on the "auth_id" field.
func AuthIDEqualFold(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldEqualFold(FieldAuthID, v))
}

// AuthIDContainsFold applies the ContainsFold predicate on the "auth_id" field.
func AuthIDContainsFold(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldContainsFold(FieldAuthID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Tenant) predicate.Tenant {
	return predicate.Tenant(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Tenant) predicate.Tenant {
	return predicate.Tenant(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Tenant) predicate.Tenant {
	return predicate.Tenant(sql.NotPredicates(p))
}
