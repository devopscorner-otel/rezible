// Code generated by ent, DO NOT EDIT.

package retrospectivereview

import (
	"fmt"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the retrospectivereview type in the database.
	Label = "retrospective_review"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRetrospectiveID holds the string denoting the retrospective_id field in the database.
	FieldRetrospectiveID = "retrospective_id"
	// FieldRequesterID holds the string denoting the requester_id field in the database.
	FieldRequesterID = "requester_id"
	// FieldReviewerID holds the string denoting the reviewer_id field in the database.
	FieldReviewerID = "reviewer_id"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// EdgeRetrospective holds the string denoting the retrospective edge name in mutations.
	EdgeRetrospective = "retrospective"
	// EdgeRequester holds the string denoting the requester edge name in mutations.
	EdgeRequester = "requester"
	// EdgeReviewer holds the string denoting the reviewer edge name in mutations.
	EdgeReviewer = "reviewer"
	// EdgeDiscussion holds the string denoting the discussion edge name in mutations.
	EdgeDiscussion = "discussion"
	// Table holds the table name of the retrospectivereview in the database.
	Table = "retrospective_reviews"
	// RetrospectiveTable is the table that holds the retrospective relation/edge.
	RetrospectiveTable = "retrospective_reviews"
	// RetrospectiveInverseTable is the table name for the Retrospective entity.
	// It exists in this package in order to avoid circular dependency with the "retrospective" package.
	RetrospectiveInverseTable = "retrospectives"
	// RetrospectiveColumn is the table column denoting the retrospective relation/edge.
	RetrospectiveColumn = "retrospective_id"
	// RequesterTable is the table that holds the requester relation/edge.
	RequesterTable = "retrospective_reviews"
	// RequesterInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	RequesterInverseTable = "users"
	// RequesterColumn is the table column denoting the requester relation/edge.
	RequesterColumn = "requester_id"
	// ReviewerTable is the table that holds the reviewer relation/edge.
	ReviewerTable = "retrospective_reviews"
	// ReviewerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ReviewerInverseTable = "users"
	// ReviewerColumn is the table column denoting the reviewer relation/edge.
	ReviewerColumn = "reviewer_id"
	// DiscussionTable is the table that holds the discussion relation/edge.
	DiscussionTable = "retrospective_reviews"
	// DiscussionInverseTable is the table name for the RetrospectiveDiscussion entity.
	// It exists in this package in order to avoid circular dependency with the "retrospectivediscussion" package.
	DiscussionInverseTable = "retrospective_discussions"
	// DiscussionColumn is the table column denoting the discussion relation/edge.
	DiscussionColumn = "retrospective_review_discussion"
)

// Columns holds all SQL columns for retrospectivereview fields.
var Columns = []string{
	FieldID,
	FieldRetrospectiveID,
	FieldRequesterID,
	FieldReviewerID,
	FieldState,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "retrospective_reviews"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"retrospective_review_discussion",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/rezible/rezible/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// State defines the type for the "state" enum field.
type State string

// State values.
const (
	StateWaiting        State = "waiting"
	StateRequestChanges State = "request_changes"
	StateApproved       State = "approved"
)

func (s State) String() string {
	return string(s)
}

// StateValidator is a validator for the "state" field enum values. It is called by the builders before save.
func StateValidator(s State) error {
	switch s {
	case StateWaiting, StateRequestChanges, StateApproved:
		return nil
	default:
		return fmt.Errorf("retrospectivereview: invalid enum value for state field: %q", s)
	}
}

// OrderOption defines the ordering options for the RetrospectiveReview queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRetrospectiveID orders the results by the retrospective_id field.
func ByRetrospectiveID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRetrospectiveID, opts...).ToFunc()
}

// ByRequesterID orders the results by the requester_id field.
func ByRequesterID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequesterID, opts...).ToFunc()
}

// ByReviewerID orders the results by the reviewer_id field.
func ByReviewerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReviewerID, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByRetrospectiveField orders the results by retrospective field.
func ByRetrospectiveField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRetrospectiveStep(), sql.OrderByField(field, opts...))
	}
}

// ByRequesterField orders the results by requester field.
func ByRequesterField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRequesterStep(), sql.OrderByField(field, opts...))
	}
}

// ByReviewerField orders the results by reviewer field.
func ByReviewerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReviewerStep(), sql.OrderByField(field, opts...))
	}
}

// ByDiscussionField orders the results by discussion field.
func ByDiscussionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDiscussionStep(), sql.OrderByField(field, opts...))
	}
}
func newRetrospectiveStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RetrospectiveInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RetrospectiveTable, RetrospectiveColumn),
	)
}
func newRequesterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RequesterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RequesterTable, RequesterColumn),
	)
}
func newReviewerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReviewerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ReviewerTable, ReviewerColumn),
	)
}
func newDiscussionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DiscussionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, DiscussionTable, DiscussionColumn),
	)
}
