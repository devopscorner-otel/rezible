// Code generated by ent, DO NOT EDIT.

package retrospectivereview

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.RetrospectiveReview {
	return predicate.RetrospectiveReview(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.RetrospectiveReview {
	return predicate.RetrospectiveReview(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.RetrospectiveReview {
	return predicate.RetrospectiveReview(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.RetrospectiveReview {
	return predicate.RetrospectiveReview(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.RetrospectiveReview {
	return predicate.RetrospectiveReview(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.RetrospectiveReview {
	return predicate.RetrospectiveReview(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.RetrospectiveReview {
	return predicate.RetrospectiveReview(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.RetrospectiveReview {
	return predicate.RetrospectiveReview(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.RetrospectiveReview {
	return predicate.RetrospectiveReview(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v int) predicate.RetrospectiveReview {
	return predicate.RetrospectiveReview(sql.FieldEQ(FieldTenantID, v))
}

// RetrospectiveID applies equality check predicate on the "retrospective_id" field. It's identical to RetrospectiveIDEQ.
func RetrospectiveID(v uuid.UUID) predicate.RetrospectiveReview {
	return predicate.RetrospectiveReview(sql.FieldEQ(FieldRetrospectiveID, v))
}

// RequesterID applies equality check predicate on the "requester_id" field. It's identical to RequesterIDEQ.
func RequesterID(v uuid.UUID) predicate.RetrospectiveReview {
	return predicate.RetrospectiveReview(sql.FieldEQ(FieldRequesterID, v))
}

// ReviewerID applies equality check predicate on the "reviewer_id" field. It's identical to ReviewerIDEQ.
func ReviewerID(v uuid.UUID) predicate.RetrospectiveReview {
	return predicate.RetrospectiveReview(sql.FieldEQ(FieldReviewerID, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v int) predicate.RetrospectiveReview {
	return predicate.RetrospectiveReview(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v int) predicate.RetrospectiveReview {
	return predicate.RetrospectiveReview(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...int) predicate.RetrospectiveReview {
	return predicate.RetrospectiveReview(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...int) predicate.RetrospectiveReview {
	return predicate.RetrospectiveReview(sql.FieldNotIn(FieldTenantID, vs...))
}

// RetrospectiveIDEQ applies the EQ predicate on the "retrospective_id" field.
func RetrospectiveIDEQ(v uuid.UUID) predicate.RetrospectiveReview {
	return predicate.RetrospectiveReview(sql.FieldEQ(FieldRetrospectiveID, v))
}

// RetrospectiveIDNEQ applies the NEQ predicate on the "retrospective_id" field.
func RetrospectiveIDNEQ(v uuid.UUID) predicate.RetrospectiveReview {
	return predicate.RetrospectiveReview(sql.FieldNEQ(FieldRetrospectiveID, v))
}

// RetrospectiveIDIn applies the In predicate on the "retrospective_id" field.
func RetrospectiveIDIn(vs ...uuid.UUID) predicate.RetrospectiveReview {
	return predicate.RetrospectiveReview(sql.FieldIn(FieldRetrospectiveID, vs...))
}

// RetrospectiveIDNotIn applies the NotIn predicate on the "retrospective_id" field.
func RetrospectiveIDNotIn(vs ...uuid.UUID) predicate.RetrospectiveReview {
	return predicate.RetrospectiveReview(sql.FieldNotIn(FieldRetrospectiveID, vs...))
}

// RequesterIDEQ applies the EQ predicate on the "requester_id" field.
func RequesterIDEQ(v uuid.UUID) predicate.RetrospectiveReview {
	return predicate.RetrospectiveReview(sql.FieldEQ(FieldRequesterID, v))
}

// RequesterIDNEQ applies the NEQ predicate on the "requester_id" field.
func RequesterIDNEQ(v uuid.UUID) predicate.RetrospectiveReview {
	return predicate.RetrospectiveReview(sql.FieldNEQ(FieldRequesterID, v))
}

// RequesterIDIn applies the In predicate on the "requester_id" field.
func RequesterIDIn(vs ...uuid.UUID) predicate.RetrospectiveReview {
	return predicate.RetrospectiveReview(sql.FieldIn(FieldRequesterID, vs...))
}

// RequesterIDNotIn applies the NotIn predicate on the "requester_id" field.
func RequesterIDNotIn(vs ...uuid.UUID) predicate.RetrospectiveReview {
	return predicate.RetrospectiveReview(sql.FieldNotIn(FieldRequesterID, vs...))
}

// ReviewerIDEQ applies the EQ predicate on the "reviewer_id" field.
func ReviewerIDEQ(v uuid.UUID) predicate.RetrospectiveReview {
	return predicate.RetrospectiveReview(sql.FieldEQ(FieldReviewerID, v))
}

// ReviewerIDNEQ applies the NEQ predicate on the "reviewer_id" field.
func ReviewerIDNEQ(v uuid.UUID) predicate.RetrospectiveReview {
	return predicate.RetrospectiveReview(sql.FieldNEQ(FieldReviewerID, v))
}

// ReviewerIDIn applies the In predicate on the "reviewer_id" field.
func ReviewerIDIn(vs ...uuid.UUID) predicate.RetrospectiveReview {
	return predicate.RetrospectiveReview(sql.FieldIn(FieldReviewerID, vs...))
}

// ReviewerIDNotIn applies the NotIn predicate on the "reviewer_id" field.
func ReviewerIDNotIn(vs ...uuid.UUID) predicate.RetrospectiveReview {
	return predicate.RetrospectiveReview(sql.FieldNotIn(FieldReviewerID, vs...))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v State) predicate.RetrospectiveReview {
	return predicate.RetrospectiveReview(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v State) predicate.RetrospectiveReview {
	return predicate.RetrospectiveReview(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...State) predicate.RetrospectiveReview {
	return predicate.RetrospectiveReview(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...State) predicate.RetrospectiveReview {
	return predicate.RetrospectiveReview(sql.FieldNotIn(FieldState, vs...))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.RetrospectiveReview {
	return predicate.RetrospectiveReview(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.RetrospectiveReview {
	return predicate.RetrospectiveReview(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRetrospective applies the HasEdge predicate on the "retrospective" edge.
func HasRetrospective() predicate.RetrospectiveReview {
	return predicate.RetrospectiveReview(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RetrospectiveTable, RetrospectiveColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRetrospectiveWith applies the HasEdge predicate on the "retrospective" edge with a given conditions (other predicates).
func HasRetrospectiveWith(preds ...predicate.Retrospective) predicate.RetrospectiveReview {
	return predicate.RetrospectiveReview(func(s *sql.Selector) {
		step := newRetrospectiveStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRequester applies the HasEdge predicate on the "requester" edge.
func HasRequester() predicate.RetrospectiveReview {
	return predicate.RetrospectiveReview(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RequesterTable, RequesterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRequesterWith applies the HasEdge predicate on the "requester" edge with a given conditions (other predicates).
func HasRequesterWith(preds ...predicate.User) predicate.RetrospectiveReview {
	return predicate.RetrospectiveReview(func(s *sql.Selector) {
		step := newRequesterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReviewer applies the HasEdge predicate on the "reviewer" edge.
func HasReviewer() predicate.RetrospectiveReview {
	return predicate.RetrospectiveReview(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ReviewerTable, ReviewerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReviewerWith applies the HasEdge predicate on the "reviewer" edge with a given conditions (other predicates).
func HasReviewerWith(preds ...predicate.User) predicate.RetrospectiveReview {
	return predicate.RetrospectiveReview(func(s *sql.Selector) {
		step := newReviewerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDiscussion applies the HasEdge predicate on the "discussion" edge.
func HasDiscussion() predicate.RetrospectiveReview {
	return predicate.RetrospectiveReview(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, DiscussionTable, DiscussionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDiscussionWith applies the HasEdge predicate on the "discussion" edge with a given conditions (other predicates).
func HasDiscussionWith(preds ...predicate.RetrospectiveDiscussion) predicate.RetrospectiveReview {
	return predicate.RetrospectiveReview(func(s *sql.Selector) {
		step := newDiscussionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RetrospectiveReview) predicate.RetrospectiveReview {
	return predicate.RetrospectiveReview(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RetrospectiveReview) predicate.RetrospectiveReview {
	return predicate.RetrospectiveReview(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RetrospectiveReview) predicate.RetrospectiveReview {
	return predicate.RetrospectiveReview(sql.NotPredicates(p))
}
