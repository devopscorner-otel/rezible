// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/environment"
	"github.com/rezible/rezible/ent/incident"
	"github.com/rezible/rezible/ent/incidentdebrief"
	"github.com/rezible/rezible/ent/incidentevent"
	"github.com/rezible/rezible/ent/incidentfieldoption"
	"github.com/rezible/rezible/ent/incidentlink"
	"github.com/rezible/rezible/ent/incidentmilestone"
	"github.com/rezible/rezible/ent/incidentroleassignment"
	"github.com/rezible/rezible/ent/incidentseverity"
	"github.com/rezible/rezible/ent/incidenttag"
	"github.com/rezible/rezible/ent/incidentteamassignment"
	"github.com/rezible/rezible/ent/incidenttype"
	"github.com/rezible/rezible/ent/meetingsession"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/retrospective"
	"github.com/rezible/rezible/ent/task"
)

// IncidentQuery is the builder for querying Incident entities.
type IncidentQuery struct {
	config
	ctx                 *QueryContext
	order               []incident.OrderOption
	inters              []Interceptor
	predicates          []predicate.Incident
	withEnvironments    *EnvironmentQuery
	withSeverity        *IncidentSeverityQuery
	withType            *IncidentTypeQuery
	withTeamAssignments *IncidentTeamAssignmentQuery
	withRoleAssignments *IncidentRoleAssignmentQuery
	withMilestones      *IncidentMilestoneQuery
	withEvents          *IncidentEventQuery
	withRetrospective   *RetrospectiveQuery
	withLinkedIncidents *IncidentQuery
	withFieldSelections *IncidentFieldOptionQuery
	withTasks           *TaskQuery
	withTagAssignments  *IncidentTagQuery
	withDebriefs        *IncidentDebriefQuery
	withReviewSessions  *MeetingSessionQuery
	withIncidentLinks   *IncidentLinkQuery
	modifiers           []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the IncidentQuery builder.
func (iq *IncidentQuery) Where(ps ...predicate.Incident) *IncidentQuery {
	iq.predicates = append(iq.predicates, ps...)
	return iq
}

// Limit the number of records to be returned by this query.
func (iq *IncidentQuery) Limit(limit int) *IncidentQuery {
	iq.ctx.Limit = &limit
	return iq
}

// Offset to start from.
func (iq *IncidentQuery) Offset(offset int) *IncidentQuery {
	iq.ctx.Offset = &offset
	return iq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (iq *IncidentQuery) Unique(unique bool) *IncidentQuery {
	iq.ctx.Unique = &unique
	return iq
}

// Order specifies how the records should be ordered.
func (iq *IncidentQuery) Order(o ...incident.OrderOption) *IncidentQuery {
	iq.order = append(iq.order, o...)
	return iq
}

// QueryEnvironments chains the current query on the "environments" edge.
func (iq *IncidentQuery) QueryEnvironments() *EnvironmentQuery {
	query := (&EnvironmentClient{config: iq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(incident.Table, incident.FieldID, selector),
			sqlgraph.To(environment.Table, environment.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, incident.EnvironmentsTable, incident.EnvironmentsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(iq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySeverity chains the current query on the "severity" edge.
func (iq *IncidentQuery) QuerySeverity() *IncidentSeverityQuery {
	query := (&IncidentSeverityClient{config: iq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(incident.Table, incident.FieldID, selector),
			sqlgraph.To(incidentseverity.Table, incidentseverity.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, incident.SeverityTable, incident.SeverityColumn),
		)
		fromU = sqlgraph.SetNeighbors(iq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryType chains the current query on the "type" edge.
func (iq *IncidentQuery) QueryType() *IncidentTypeQuery {
	query := (&IncidentTypeClient{config: iq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(incident.Table, incident.FieldID, selector),
			sqlgraph.To(incidenttype.Table, incidenttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, incident.TypeTable, incident.TypeColumn),
		)
		fromU = sqlgraph.SetNeighbors(iq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTeamAssignments chains the current query on the "team_assignments" edge.
func (iq *IncidentQuery) QueryTeamAssignments() *IncidentTeamAssignmentQuery {
	query := (&IncidentTeamAssignmentClient{config: iq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(incident.Table, incident.FieldID, selector),
			sqlgraph.To(incidentteamassignment.Table, incidentteamassignment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, incident.TeamAssignmentsTable, incident.TeamAssignmentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(iq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRoleAssignments chains the current query on the "role_assignments" edge.
func (iq *IncidentQuery) QueryRoleAssignments() *IncidentRoleAssignmentQuery {
	query := (&IncidentRoleAssignmentClient{config: iq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(incident.Table, incident.FieldID, selector),
			sqlgraph.To(incidentroleassignment.Table, incidentroleassignment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, incident.RoleAssignmentsTable, incident.RoleAssignmentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(iq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMilestones chains the current query on the "milestones" edge.
func (iq *IncidentQuery) QueryMilestones() *IncidentMilestoneQuery {
	query := (&IncidentMilestoneClient{config: iq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(incident.Table, incident.FieldID, selector),
			sqlgraph.To(incidentmilestone.Table, incidentmilestone.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, incident.MilestonesTable, incident.MilestonesColumn),
		)
		fromU = sqlgraph.SetNeighbors(iq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEvents chains the current query on the "events" edge.
func (iq *IncidentQuery) QueryEvents() *IncidentEventQuery {
	query := (&IncidentEventClient{config: iq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(incident.Table, incident.FieldID, selector),
			sqlgraph.To(incidentevent.Table, incidentevent.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, incident.EventsTable, incident.EventsColumn),
		)
		fromU = sqlgraph.SetNeighbors(iq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRetrospective chains the current query on the "retrospective" edge.
func (iq *IncidentQuery) QueryRetrospective() *RetrospectiveQuery {
	query := (&RetrospectiveClient{config: iq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(incident.Table, incident.FieldID, selector),
			sqlgraph.To(retrospective.Table, retrospective.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, incident.RetrospectiveTable, incident.RetrospectiveColumn),
		)
		fromU = sqlgraph.SetNeighbors(iq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLinkedIncidents chains the current query on the "linked_incidents" edge.
func (iq *IncidentQuery) QueryLinkedIncidents() *IncidentQuery {
	query := (&IncidentClient{config: iq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(incident.Table, incident.FieldID, selector),
			sqlgraph.To(incident.Table, incident.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, incident.LinkedIncidentsTable, incident.LinkedIncidentsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(iq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFieldSelections chains the current query on the "field_selections" edge.
func (iq *IncidentQuery) QueryFieldSelections() *IncidentFieldOptionQuery {
	query := (&IncidentFieldOptionClient{config: iq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(incident.Table, incident.FieldID, selector),
			sqlgraph.To(incidentfieldoption.Table, incidentfieldoption.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, incident.FieldSelectionsTable, incident.FieldSelectionsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(iq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTasks chains the current query on the "tasks" edge.
func (iq *IncidentQuery) QueryTasks() *TaskQuery {
	query := (&TaskClient{config: iq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(incident.Table, incident.FieldID, selector),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, incident.TasksTable, incident.TasksColumn),
		)
		fromU = sqlgraph.SetNeighbors(iq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTagAssignments chains the current query on the "tag_assignments" edge.
func (iq *IncidentQuery) QueryTagAssignments() *IncidentTagQuery {
	query := (&IncidentTagClient{config: iq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(incident.Table, incident.FieldID, selector),
			sqlgraph.To(incidenttag.Table, incidenttag.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, incident.TagAssignmentsTable, incident.TagAssignmentsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(iq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDebriefs chains the current query on the "debriefs" edge.
func (iq *IncidentQuery) QueryDebriefs() *IncidentDebriefQuery {
	query := (&IncidentDebriefClient{config: iq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(incident.Table, incident.FieldID, selector),
			sqlgraph.To(incidentdebrief.Table, incidentdebrief.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, incident.DebriefsTable, incident.DebriefsColumn),
		)
		fromU = sqlgraph.SetNeighbors(iq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReviewSessions chains the current query on the "review_sessions" edge.
func (iq *IncidentQuery) QueryReviewSessions() *MeetingSessionQuery {
	query := (&MeetingSessionClient{config: iq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(incident.Table, incident.FieldID, selector),
			sqlgraph.To(meetingsession.Table, meetingsession.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, incident.ReviewSessionsTable, incident.ReviewSessionsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(iq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryIncidentLinks chains the current query on the "incident_links" edge.
func (iq *IncidentQuery) QueryIncidentLinks() *IncidentLinkQuery {
	query := (&IncidentLinkClient{config: iq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(incident.Table, incident.FieldID, selector),
			sqlgraph.To(incidentlink.Table, incidentlink.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, incident.IncidentLinksTable, incident.IncidentLinksColumn),
		)
		fromU = sqlgraph.SetNeighbors(iq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Incident entity from the query.
// Returns a *NotFoundError when no Incident was found.
func (iq *IncidentQuery) First(ctx context.Context) (*Incident, error) {
	nodes, err := iq.Limit(1).All(setContextOp(ctx, iq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{incident.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (iq *IncidentQuery) FirstX(ctx context.Context) *Incident {
	node, err := iq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Incident ID from the query.
// Returns a *NotFoundError when no Incident ID was found.
func (iq *IncidentQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = iq.Limit(1).IDs(setContextOp(ctx, iq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{incident.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (iq *IncidentQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := iq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Incident entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Incident entity is found.
// Returns a *NotFoundError when no Incident entities are found.
func (iq *IncidentQuery) Only(ctx context.Context) (*Incident, error) {
	nodes, err := iq.Limit(2).All(setContextOp(ctx, iq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{incident.Label}
	default:
		return nil, &NotSingularError{incident.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (iq *IncidentQuery) OnlyX(ctx context.Context) *Incident {
	node, err := iq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Incident ID in the query.
// Returns a *NotSingularError when more than one Incident ID is found.
// Returns a *NotFoundError when no entities are found.
func (iq *IncidentQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = iq.Limit(2).IDs(setContextOp(ctx, iq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{incident.Label}
	default:
		err = &NotSingularError{incident.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (iq *IncidentQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := iq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Incidents.
func (iq *IncidentQuery) All(ctx context.Context) ([]*Incident, error) {
	ctx = setContextOp(ctx, iq.ctx, ent.OpQueryAll)
	if err := iq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Incident, *IncidentQuery]()
	return withInterceptors[[]*Incident](ctx, iq, qr, iq.inters)
}

// AllX is like All, but panics if an error occurs.
func (iq *IncidentQuery) AllX(ctx context.Context) []*Incident {
	nodes, err := iq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Incident IDs.
func (iq *IncidentQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if iq.ctx.Unique == nil && iq.path != nil {
		iq.Unique(true)
	}
	ctx = setContextOp(ctx, iq.ctx, ent.OpQueryIDs)
	if err = iq.Select(incident.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (iq *IncidentQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := iq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (iq *IncidentQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, iq.ctx, ent.OpQueryCount)
	if err := iq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, iq, querierCount[*IncidentQuery](), iq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (iq *IncidentQuery) CountX(ctx context.Context) int {
	count, err := iq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (iq *IncidentQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, iq.ctx, ent.OpQueryExist)
	switch _, err := iq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (iq *IncidentQuery) ExistX(ctx context.Context) bool {
	exist, err := iq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the IncidentQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (iq *IncidentQuery) Clone() *IncidentQuery {
	if iq == nil {
		return nil
	}
	return &IncidentQuery{
		config:              iq.config,
		ctx:                 iq.ctx.Clone(),
		order:               append([]incident.OrderOption{}, iq.order...),
		inters:              append([]Interceptor{}, iq.inters...),
		predicates:          append([]predicate.Incident{}, iq.predicates...),
		withEnvironments:    iq.withEnvironments.Clone(),
		withSeverity:        iq.withSeverity.Clone(),
		withType:            iq.withType.Clone(),
		withTeamAssignments: iq.withTeamAssignments.Clone(),
		withRoleAssignments: iq.withRoleAssignments.Clone(),
		withMilestones:      iq.withMilestones.Clone(),
		withEvents:          iq.withEvents.Clone(),
		withRetrospective:   iq.withRetrospective.Clone(),
		withLinkedIncidents: iq.withLinkedIncidents.Clone(),
		withFieldSelections: iq.withFieldSelections.Clone(),
		withTasks:           iq.withTasks.Clone(),
		withTagAssignments:  iq.withTagAssignments.Clone(),
		withDebriefs:        iq.withDebriefs.Clone(),
		withReviewSessions:  iq.withReviewSessions.Clone(),
		withIncidentLinks:   iq.withIncidentLinks.Clone(),
		// clone intermediate query.
		sql:       iq.sql.Clone(),
		path:      iq.path,
		modifiers: append([]func(*sql.Selector){}, iq.modifiers...),
	}
}

// WithEnvironments tells the query-builder to eager-load the nodes that are connected to
// the "environments" edge. The optional arguments are used to configure the query builder of the edge.
func (iq *IncidentQuery) WithEnvironments(opts ...func(*EnvironmentQuery)) *IncidentQuery {
	query := (&EnvironmentClient{config: iq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iq.withEnvironments = query
	return iq
}

// WithSeverity tells the query-builder to eager-load the nodes that are connected to
// the "severity" edge. The optional arguments are used to configure the query builder of the edge.
func (iq *IncidentQuery) WithSeverity(opts ...func(*IncidentSeverityQuery)) *IncidentQuery {
	query := (&IncidentSeverityClient{config: iq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iq.withSeverity = query
	return iq
}

// WithType tells the query-builder to eager-load the nodes that are connected to
// the "type" edge. The optional arguments are used to configure the query builder of the edge.
func (iq *IncidentQuery) WithType(opts ...func(*IncidentTypeQuery)) *IncidentQuery {
	query := (&IncidentTypeClient{config: iq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iq.withType = query
	return iq
}

// WithTeamAssignments tells the query-builder to eager-load the nodes that are connected to
// the "team_assignments" edge. The optional arguments are used to configure the query builder of the edge.
func (iq *IncidentQuery) WithTeamAssignments(opts ...func(*IncidentTeamAssignmentQuery)) *IncidentQuery {
	query := (&IncidentTeamAssignmentClient{config: iq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iq.withTeamAssignments = query
	return iq
}

// WithRoleAssignments tells the query-builder to eager-load the nodes that are connected to
// the "role_assignments" edge. The optional arguments are used to configure the query builder of the edge.
func (iq *IncidentQuery) WithRoleAssignments(opts ...func(*IncidentRoleAssignmentQuery)) *IncidentQuery {
	query := (&IncidentRoleAssignmentClient{config: iq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iq.withRoleAssignments = query
	return iq
}

// WithMilestones tells the query-builder to eager-load the nodes that are connected to
// the "milestones" edge. The optional arguments are used to configure the query builder of the edge.
func (iq *IncidentQuery) WithMilestones(opts ...func(*IncidentMilestoneQuery)) *IncidentQuery {
	query := (&IncidentMilestoneClient{config: iq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iq.withMilestones = query
	return iq
}

// WithEvents tells the query-builder to eager-load the nodes that are connected to
// the "events" edge. The optional arguments are used to configure the query builder of the edge.
func (iq *IncidentQuery) WithEvents(opts ...func(*IncidentEventQuery)) *IncidentQuery {
	query := (&IncidentEventClient{config: iq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iq.withEvents = query
	return iq
}

// WithRetrospective tells the query-builder to eager-load the nodes that are connected to
// the "retrospective" edge. The optional arguments are used to configure the query builder of the edge.
func (iq *IncidentQuery) WithRetrospective(opts ...func(*RetrospectiveQuery)) *IncidentQuery {
	query := (&RetrospectiveClient{config: iq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iq.withRetrospective = query
	return iq
}

// WithLinkedIncidents tells the query-builder to eager-load the nodes that are connected to
// the "linked_incidents" edge. The optional arguments are used to configure the query builder of the edge.
func (iq *IncidentQuery) WithLinkedIncidents(opts ...func(*IncidentQuery)) *IncidentQuery {
	query := (&IncidentClient{config: iq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iq.withLinkedIncidents = query
	return iq
}

// WithFieldSelections tells the query-builder to eager-load the nodes that are connected to
// the "field_selections" edge. The optional arguments are used to configure the query builder of the edge.
func (iq *IncidentQuery) WithFieldSelections(opts ...func(*IncidentFieldOptionQuery)) *IncidentQuery {
	query := (&IncidentFieldOptionClient{config: iq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iq.withFieldSelections = query
	return iq
}

// WithTasks tells the query-builder to eager-load the nodes that are connected to
// the "tasks" edge. The optional arguments are used to configure the query builder of the edge.
func (iq *IncidentQuery) WithTasks(opts ...func(*TaskQuery)) *IncidentQuery {
	query := (&TaskClient{config: iq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iq.withTasks = query
	return iq
}

// WithTagAssignments tells the query-builder to eager-load the nodes that are connected to
// the "tag_assignments" edge. The optional arguments are used to configure the query builder of the edge.
func (iq *IncidentQuery) WithTagAssignments(opts ...func(*IncidentTagQuery)) *IncidentQuery {
	query := (&IncidentTagClient{config: iq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iq.withTagAssignments = query
	return iq
}

// WithDebriefs tells the query-builder to eager-load the nodes that are connected to
// the "debriefs" edge. The optional arguments are used to configure the query builder of the edge.
func (iq *IncidentQuery) WithDebriefs(opts ...func(*IncidentDebriefQuery)) *IncidentQuery {
	query := (&IncidentDebriefClient{config: iq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iq.withDebriefs = query
	return iq
}

// WithReviewSessions tells the query-builder to eager-load the nodes that are connected to
// the "review_sessions" edge. The optional arguments are used to configure the query builder of the edge.
func (iq *IncidentQuery) WithReviewSessions(opts ...func(*MeetingSessionQuery)) *IncidentQuery {
	query := (&MeetingSessionClient{config: iq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iq.withReviewSessions = query
	return iq
}

// WithIncidentLinks tells the query-builder to eager-load the nodes that are connected to
// the "incident_links" edge. The optional arguments are used to configure the query builder of the edge.
func (iq *IncidentQuery) WithIncidentLinks(opts ...func(*IncidentLinkQuery)) *IncidentQuery {
	query := (&IncidentLinkClient{config: iq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iq.withIncidentLinks = query
	return iq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Slug string `json:"slug,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Incident.Query().
//		GroupBy(incident.FieldSlug).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (iq *IncidentQuery) GroupBy(field string, fields ...string) *IncidentGroupBy {
	iq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &IncidentGroupBy{build: iq}
	grbuild.flds = &iq.ctx.Fields
	grbuild.label = incident.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Slug string `json:"slug,omitempty"`
//	}
//
//	client.Incident.Query().
//		Select(incident.FieldSlug).
//		Scan(ctx, &v)
func (iq *IncidentQuery) Select(fields ...string) *IncidentSelect {
	iq.ctx.Fields = append(iq.ctx.Fields, fields...)
	sbuild := &IncidentSelect{IncidentQuery: iq}
	sbuild.label = incident.Label
	sbuild.flds, sbuild.scan = &iq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a IncidentSelect configured with the given aggregations.
func (iq *IncidentQuery) Aggregate(fns ...AggregateFunc) *IncidentSelect {
	return iq.Select().Aggregate(fns...)
}

func (iq *IncidentQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range iq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, iq); err != nil {
				return err
			}
		}
	}
	for _, f := range iq.ctx.Fields {
		if !incident.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if iq.path != nil {
		prev, err := iq.path(ctx)
		if err != nil {
			return err
		}
		iq.sql = prev
	}
	if incident.Policy == nil {
		return errors.New("ent: uninitialized incident.Policy (forgotten import ent/runtime?)")
	}
	if err := incident.Policy.EvalQuery(ctx, iq); err != nil {
		return err
	}
	return nil
}

func (iq *IncidentQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Incident, error) {
	var (
		nodes       = []*Incident{}
		_spec       = iq.querySpec()
		loadedTypes = [15]bool{
			iq.withEnvironments != nil,
			iq.withSeverity != nil,
			iq.withType != nil,
			iq.withTeamAssignments != nil,
			iq.withRoleAssignments != nil,
			iq.withMilestones != nil,
			iq.withEvents != nil,
			iq.withRetrospective != nil,
			iq.withLinkedIncidents != nil,
			iq.withFieldSelections != nil,
			iq.withTasks != nil,
			iq.withTagAssignments != nil,
			iq.withDebriefs != nil,
			iq.withReviewSessions != nil,
			iq.withIncidentLinks != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Incident).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Incident{config: iq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(iq.modifiers) > 0 {
		_spec.Modifiers = iq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, iq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := iq.withEnvironments; query != nil {
		if err := iq.loadEnvironments(ctx, query, nodes,
			func(n *Incident) { n.Edges.Environments = []*Environment{} },
			func(n *Incident, e *Environment) { n.Edges.Environments = append(n.Edges.Environments, e) }); err != nil {
			return nil, err
		}
	}
	if query := iq.withSeverity; query != nil {
		if err := iq.loadSeverity(ctx, query, nodes, nil,
			func(n *Incident, e *IncidentSeverity) { n.Edges.Severity = e }); err != nil {
			return nil, err
		}
	}
	if query := iq.withType; query != nil {
		if err := iq.loadType(ctx, query, nodes, nil,
			func(n *Incident, e *IncidentType) { n.Edges.Type = e }); err != nil {
			return nil, err
		}
	}
	if query := iq.withTeamAssignments; query != nil {
		if err := iq.loadTeamAssignments(ctx, query, nodes,
			func(n *Incident) { n.Edges.TeamAssignments = []*IncidentTeamAssignment{} },
			func(n *Incident, e *IncidentTeamAssignment) {
				n.Edges.TeamAssignments = append(n.Edges.TeamAssignments, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := iq.withRoleAssignments; query != nil {
		if err := iq.loadRoleAssignments(ctx, query, nodes,
			func(n *Incident) { n.Edges.RoleAssignments = []*IncidentRoleAssignment{} },
			func(n *Incident, e *IncidentRoleAssignment) {
				n.Edges.RoleAssignments = append(n.Edges.RoleAssignments, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := iq.withMilestones; query != nil {
		if err := iq.loadMilestones(ctx, query, nodes,
			func(n *Incident) { n.Edges.Milestones = []*IncidentMilestone{} },
			func(n *Incident, e *IncidentMilestone) { n.Edges.Milestones = append(n.Edges.Milestones, e) }); err != nil {
			return nil, err
		}
	}
	if query := iq.withEvents; query != nil {
		if err := iq.loadEvents(ctx, query, nodes,
			func(n *Incident) { n.Edges.Events = []*IncidentEvent{} },
			func(n *Incident, e *IncidentEvent) { n.Edges.Events = append(n.Edges.Events, e) }); err != nil {
			return nil, err
		}
	}
	if query := iq.withRetrospective; query != nil {
		if err := iq.loadRetrospective(ctx, query, nodes,
			func(n *Incident) { n.Edges.Retrospective = []*Retrospective{} },
			func(n *Incident, e *Retrospective) { n.Edges.Retrospective = append(n.Edges.Retrospective, e) }); err != nil {
			return nil, err
		}
	}
	if query := iq.withLinkedIncidents; query != nil {
		if err := iq.loadLinkedIncidents(ctx, query, nodes,
			func(n *Incident) { n.Edges.LinkedIncidents = []*Incident{} },
			func(n *Incident, e *Incident) { n.Edges.LinkedIncidents = append(n.Edges.LinkedIncidents, e) }); err != nil {
			return nil, err
		}
	}
	if query := iq.withFieldSelections; query != nil {
		if err := iq.loadFieldSelections(ctx, query, nodes,
			func(n *Incident) { n.Edges.FieldSelections = []*IncidentFieldOption{} },
			func(n *Incident, e *IncidentFieldOption) {
				n.Edges.FieldSelections = append(n.Edges.FieldSelections, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := iq.withTasks; query != nil {
		if err := iq.loadTasks(ctx, query, nodes,
			func(n *Incident) { n.Edges.Tasks = []*Task{} },
			func(n *Incident, e *Task) { n.Edges.Tasks = append(n.Edges.Tasks, e) }); err != nil {
			return nil, err
		}
	}
	if query := iq.withTagAssignments; query != nil {
		if err := iq.loadTagAssignments(ctx, query, nodes,
			func(n *Incident) { n.Edges.TagAssignments = []*IncidentTag{} },
			func(n *Incident, e *IncidentTag) { n.Edges.TagAssignments = append(n.Edges.TagAssignments, e) }); err != nil {
			return nil, err
		}
	}
	if query := iq.withDebriefs; query != nil {
		if err := iq.loadDebriefs(ctx, query, nodes,
			func(n *Incident) { n.Edges.Debriefs = []*IncidentDebrief{} },
			func(n *Incident, e *IncidentDebrief) { n.Edges.Debriefs = append(n.Edges.Debriefs, e) }); err != nil {
			return nil, err
		}
	}
	if query := iq.withReviewSessions; query != nil {
		if err := iq.loadReviewSessions(ctx, query, nodes,
			func(n *Incident) { n.Edges.ReviewSessions = []*MeetingSession{} },
			func(n *Incident, e *MeetingSession) { n.Edges.ReviewSessions = append(n.Edges.ReviewSessions, e) }); err != nil {
			return nil, err
		}
	}
	if query := iq.withIncidentLinks; query != nil {
		if err := iq.loadIncidentLinks(ctx, query, nodes,
			func(n *Incident) { n.Edges.IncidentLinks = []*IncidentLink{} },
			func(n *Incident, e *IncidentLink) { n.Edges.IncidentLinks = append(n.Edges.IncidentLinks, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (iq *IncidentQuery) loadEnvironments(ctx context.Context, query *EnvironmentQuery, nodes []*Incident, init func(*Incident), assign func(*Incident, *Environment)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*Incident)
	nids := make(map[uuid.UUID]map[*Incident]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(incident.EnvironmentsTable)
		s.Join(joinT).On(s.C(environment.FieldID), joinT.C(incident.EnvironmentsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(incident.EnvironmentsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(incident.EnvironmentsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*Incident]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Environment](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "environments" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (iq *IncidentQuery) loadSeverity(ctx context.Context, query *IncidentSeverityQuery, nodes []*Incident, init func(*Incident), assign func(*Incident, *IncidentSeverity)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Incident)
	for i := range nodes {
		fk := nodes[i].SeverityID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(incidentseverity.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "severity_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (iq *IncidentQuery) loadType(ctx context.Context, query *IncidentTypeQuery, nodes []*Incident, init func(*Incident), assign func(*Incident, *IncidentType)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Incident)
	for i := range nodes {
		fk := nodes[i].TypeID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(incidenttype.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "type_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (iq *IncidentQuery) loadTeamAssignments(ctx context.Context, query *IncidentTeamAssignmentQuery, nodes []*Incident, init func(*Incident), assign func(*Incident, *IncidentTeamAssignment)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Incident)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(incidentteamassignment.FieldIncidentID)
	}
	query.Where(predicate.IncidentTeamAssignment(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(incident.TeamAssignmentsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.IncidentID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "incident_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (iq *IncidentQuery) loadRoleAssignments(ctx context.Context, query *IncidentRoleAssignmentQuery, nodes []*Incident, init func(*Incident), assign func(*Incident, *IncidentRoleAssignment)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Incident)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(incidentroleassignment.FieldIncidentID)
	}
	query.Where(predicate.IncidentRoleAssignment(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(incident.RoleAssignmentsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.IncidentID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "incident_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (iq *IncidentQuery) loadMilestones(ctx context.Context, query *IncidentMilestoneQuery, nodes []*Incident, init func(*Incident), assign func(*Incident, *IncidentMilestone)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Incident)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(incidentmilestone.FieldIncidentID)
	}
	query.Where(predicate.IncidentMilestone(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(incident.MilestonesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.IncidentID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "incident_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (iq *IncidentQuery) loadEvents(ctx context.Context, query *IncidentEventQuery, nodes []*Incident, init func(*Incident), assign func(*Incident, *IncidentEvent)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Incident)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(incidentevent.FieldIncidentID)
	}
	query.Where(predicate.IncidentEvent(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(incident.EventsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.IncidentID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "incident_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (iq *IncidentQuery) loadRetrospective(ctx context.Context, query *RetrospectiveQuery, nodes []*Incident, init func(*Incident), assign func(*Incident, *Retrospective)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Incident)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(retrospective.FieldIncidentID)
	}
	query.Where(predicate.Retrospective(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(incident.RetrospectiveColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.IncidentID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "incident_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (iq *IncidentQuery) loadLinkedIncidents(ctx context.Context, query *IncidentQuery, nodes []*Incident, init func(*Incident), assign func(*Incident, *Incident)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*Incident)
	nids := make(map[uuid.UUID]map[*Incident]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(incident.LinkedIncidentsTable)
		s.Join(joinT).On(s.C(incident.FieldID), joinT.C(incident.LinkedIncidentsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(incident.LinkedIncidentsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(incident.LinkedIncidentsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*Incident]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Incident](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "linked_incidents" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (iq *IncidentQuery) loadFieldSelections(ctx context.Context, query *IncidentFieldOptionQuery, nodes []*Incident, init func(*Incident), assign func(*Incident, *IncidentFieldOption)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*Incident)
	nids := make(map[uuid.UUID]map[*Incident]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(incident.FieldSelectionsTable)
		s.Join(joinT).On(s.C(incidentfieldoption.FieldID), joinT.C(incident.FieldSelectionsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(incident.FieldSelectionsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(incident.FieldSelectionsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*Incident]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*IncidentFieldOption](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "field_selections" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (iq *IncidentQuery) loadTasks(ctx context.Context, query *TaskQuery, nodes []*Incident, init func(*Incident), assign func(*Incident, *Task)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Incident)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(task.FieldIncidentID)
	}
	query.Where(predicate.Task(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(incident.TasksColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.IncidentID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "incident_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (iq *IncidentQuery) loadTagAssignments(ctx context.Context, query *IncidentTagQuery, nodes []*Incident, init func(*Incident), assign func(*Incident, *IncidentTag)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*Incident)
	nids := make(map[uuid.UUID]map[*Incident]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(incident.TagAssignmentsTable)
		s.Join(joinT).On(s.C(incidenttag.FieldID), joinT.C(incident.TagAssignmentsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(incident.TagAssignmentsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(incident.TagAssignmentsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*Incident]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*IncidentTag](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "tag_assignments" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (iq *IncidentQuery) loadDebriefs(ctx context.Context, query *IncidentDebriefQuery, nodes []*Incident, init func(*Incident), assign func(*Incident, *IncidentDebrief)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Incident)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(incidentdebrief.FieldIncidentID)
	}
	query.Where(predicate.IncidentDebrief(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(incident.DebriefsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.IncidentID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "incident_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (iq *IncidentQuery) loadReviewSessions(ctx context.Context, query *MeetingSessionQuery, nodes []*Incident, init func(*Incident), assign func(*Incident, *MeetingSession)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*Incident)
	nids := make(map[uuid.UUID]map[*Incident]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(incident.ReviewSessionsTable)
		s.Join(joinT).On(s.C(meetingsession.FieldID), joinT.C(incident.ReviewSessionsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(incident.ReviewSessionsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(incident.ReviewSessionsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*Incident]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*MeetingSession](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "review_sessions" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (iq *IncidentQuery) loadIncidentLinks(ctx context.Context, query *IncidentLinkQuery, nodes []*Incident, init func(*Incident), assign func(*Incident, *IncidentLink)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Incident)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(incidentlink.FieldIncidentID)
	}
	query.Where(predicate.IncidentLink(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(incident.IncidentLinksColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.IncidentID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "incident_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (iq *IncidentQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := iq.querySpec()
	if len(iq.modifiers) > 0 {
		_spec.Modifiers = iq.modifiers
	}
	_spec.Node.Columns = iq.ctx.Fields
	if len(iq.ctx.Fields) > 0 {
		_spec.Unique = iq.ctx.Unique != nil && *iq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, iq.driver, _spec)
}

func (iq *IncidentQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(incident.Table, incident.Columns, sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID))
	_spec.From = iq.sql
	if unique := iq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if iq.path != nil {
		_spec.Unique = true
	}
	if fields := iq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, incident.FieldID)
		for i := range fields {
			if fields[i] != incident.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if iq.withSeverity != nil {
			_spec.Node.AddColumnOnce(incident.FieldSeverityID)
		}
		if iq.withType != nil {
			_spec.Node.AddColumnOnce(incident.FieldTypeID)
		}
	}
	if ps := iq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := iq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := iq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := iq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (iq *IncidentQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(iq.driver.Dialect())
	t1 := builder.Table(incident.Table)
	columns := iq.ctx.Fields
	if len(columns) == 0 {
		columns = incident.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if iq.sql != nil {
		selector = iq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if iq.ctx.Unique != nil && *iq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range iq.modifiers {
		m(selector)
	}
	for _, p := range iq.predicates {
		p(selector)
	}
	for _, p := range iq.order {
		p(selector)
	}
	if offset := iq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := iq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (iq *IncidentQuery) Modify(modifiers ...func(s *sql.Selector)) *IncidentSelect {
	iq.modifiers = append(iq.modifiers, modifiers...)
	return iq.Select()
}

// IncidentGroupBy is the group-by builder for Incident entities.
type IncidentGroupBy struct {
	selector
	build *IncidentQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (igb *IncidentGroupBy) Aggregate(fns ...AggregateFunc) *IncidentGroupBy {
	igb.fns = append(igb.fns, fns...)
	return igb
}

// Scan applies the selector query and scans the result into the given value.
func (igb *IncidentGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, igb.build.ctx, ent.OpQueryGroupBy)
	if err := igb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*IncidentQuery, *IncidentGroupBy](ctx, igb.build, igb, igb.build.inters, v)
}

func (igb *IncidentGroupBy) sqlScan(ctx context.Context, root *IncidentQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(igb.fns))
	for _, fn := range igb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*igb.flds)+len(igb.fns))
		for _, f := range *igb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*igb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := igb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// IncidentSelect is the builder for selecting fields of Incident entities.
type IncidentSelect struct {
	*IncidentQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (is *IncidentSelect) Aggregate(fns ...AggregateFunc) *IncidentSelect {
	is.fns = append(is.fns, fns...)
	return is
}

// Scan applies the selector query and scans the result into the given value.
func (is *IncidentSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, is.ctx, ent.OpQuerySelect)
	if err := is.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*IncidentQuery, *IncidentSelect](ctx, is.IncidentQuery, is, is.inters, v)
}

func (is *IncidentSelect) sqlScan(ctx context.Context, root *IncidentQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(is.fns))
	for _, fn := range is.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*is.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := is.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (is *IncidentSelect) Modify(modifiers ...func(s *sql.Selector)) *IncidentSelect {
	is.modifiers = append(is.modifiers, modifiers...)
	return is
}
