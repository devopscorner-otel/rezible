// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/incidentseverity"
	"github.com/rezible/rezible/ent/tenant"
)

// IncidentSeverity is the model entity for the IncidentSeverity schema.
type IncidentSeverity struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID int `json:"tenant_id,omitempty"`
	// ArchiveTime holds the value of the "archive_time" field.
	ArchiveTime time.Time `json:"archive_time,omitempty"`
	// ProviderID holds the value of the "provider_id" field.
	ProviderID string `json:"provider_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Rank holds the value of the "rank" field.
	Rank int `json:"rank,omitempty"`
	// Color holds the value of the "color" field.
	Color string `json:"color,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IncidentSeverityQuery when eager-loading is set.
	Edges        IncidentSeverityEdges `json:"edges"`
	selectValues sql.SelectValues
}

// IncidentSeverityEdges holds the relations/edges for other nodes in the graph.
type IncidentSeverityEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Incidents holds the value of the incidents edge.
	Incidents []*Incident `json:"incidents,omitempty"`
	// DebriefQuestions holds the value of the debrief_questions edge.
	DebriefQuestions []*IncidentDebriefQuestion `json:"debrief_questions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IncidentSeverityEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// IncidentsOrErr returns the Incidents value or an error if the edge
// was not loaded in eager-loading.
func (e IncidentSeverityEdges) IncidentsOrErr() ([]*Incident, error) {
	if e.loadedTypes[1] {
		return e.Incidents, nil
	}
	return nil, &NotLoadedError{edge: "incidents"}
}

// DebriefQuestionsOrErr returns the DebriefQuestions value or an error if the edge
// was not loaded in eager-loading.
func (e IncidentSeverityEdges) DebriefQuestionsOrErr() ([]*IncidentDebriefQuestion, error) {
	if e.loadedTypes[2] {
		return e.DebriefQuestions, nil
	}
	return nil, &NotLoadedError{edge: "debrief_questions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IncidentSeverity) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case incidentseverity.FieldTenantID, incidentseverity.FieldRank:
			values[i] = new(sql.NullInt64)
		case incidentseverity.FieldProviderID, incidentseverity.FieldName, incidentseverity.FieldColor, incidentseverity.FieldDescription:
			values[i] = new(sql.NullString)
		case incidentseverity.FieldArchiveTime:
			values[i] = new(sql.NullTime)
		case incidentseverity.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IncidentSeverity fields.
func (is *IncidentSeverity) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case incidentseverity.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				is.ID = *value
			}
		case incidentseverity.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				is.TenantID = int(value.Int64)
			}
		case incidentseverity.FieldArchiveTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field archive_time", values[i])
			} else if value.Valid {
				is.ArchiveTime = value.Time
			}
		case incidentseverity.FieldProviderID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_id", values[i])
			} else if value.Valid {
				is.ProviderID = value.String
			}
		case incidentseverity.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				is.Name = value.String
			}
		case incidentseverity.FieldRank:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rank", values[i])
			} else if value.Valid {
				is.Rank = int(value.Int64)
			}
		case incidentseverity.FieldColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field color", values[i])
			} else if value.Valid {
				is.Color = value.String
			}
		case incidentseverity.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				is.Description = value.String
			}
		default:
			is.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the IncidentSeverity.
// This includes values selected through modifiers, order, etc.
func (is *IncidentSeverity) Value(name string) (ent.Value, error) {
	return is.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the IncidentSeverity entity.
func (is *IncidentSeverity) QueryTenant() *TenantQuery {
	return NewIncidentSeverityClient(is.config).QueryTenant(is)
}

// QueryIncidents queries the "incidents" edge of the IncidentSeverity entity.
func (is *IncidentSeverity) QueryIncidents() *IncidentQuery {
	return NewIncidentSeverityClient(is.config).QueryIncidents(is)
}

// QueryDebriefQuestions queries the "debrief_questions" edge of the IncidentSeverity entity.
func (is *IncidentSeverity) QueryDebriefQuestions() *IncidentDebriefQuestionQuery {
	return NewIncidentSeverityClient(is.config).QueryDebriefQuestions(is)
}

// Update returns a builder for updating this IncidentSeverity.
// Note that you need to call IncidentSeverity.Unwrap() before calling this method if this IncidentSeverity
// was returned from a transaction, and the transaction was committed or rolled back.
func (is *IncidentSeverity) Update() *IncidentSeverityUpdateOne {
	return NewIncidentSeverityClient(is.config).UpdateOne(is)
}

// Unwrap unwraps the IncidentSeverity entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (is *IncidentSeverity) Unwrap() *IncidentSeverity {
	_tx, ok := is.config.driver.(*txDriver)
	if !ok {
		panic("ent: IncidentSeverity is not a transactional entity")
	}
	is.config.driver = _tx.drv
	return is
}

// String implements the fmt.Stringer.
func (is *IncidentSeverity) String() string {
	var builder strings.Builder
	builder.WriteString("IncidentSeverity(")
	builder.WriteString(fmt.Sprintf("id=%v, ", is.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", is.TenantID))
	builder.WriteString(", ")
	builder.WriteString("archive_time=")
	builder.WriteString(is.ArchiveTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("provider_id=")
	builder.WriteString(is.ProviderID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(is.Name)
	builder.WriteString(", ")
	builder.WriteString("rank=")
	builder.WriteString(fmt.Sprintf("%v", is.Rank))
	builder.WriteString(", ")
	builder.WriteString("color=")
	builder.WriteString(is.Color)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(is.Description)
	builder.WriteByte(')')
	return builder.String()
}

// IncidentSeverities is a parsable slice of IncidentSeverity.
type IncidentSeverities []*IncidentSeverity
