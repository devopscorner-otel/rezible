// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/incidentevent"
	"github.com/rezible/rezible/ent/incidenteventcontributingfactor"
	"github.com/rezible/rezible/ent/predicate"
)

// IncidentEventContributingFactorUpdate is the builder for updating IncidentEventContributingFactor entities.
type IncidentEventContributingFactorUpdate struct {
	config
	hooks     []Hook
	mutation  *IncidentEventContributingFactorMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the IncidentEventContributingFactorUpdate builder.
func (iecfu *IncidentEventContributingFactorUpdate) Where(ps ...predicate.IncidentEventContributingFactor) *IncidentEventContributingFactorUpdate {
	iecfu.mutation.Where(ps...)
	return iecfu
}

// SetFactorType sets the "factor_type" field.
func (iecfu *IncidentEventContributingFactorUpdate) SetFactorType(s string) *IncidentEventContributingFactorUpdate {
	iecfu.mutation.SetFactorType(s)
	return iecfu
}

// SetNillableFactorType sets the "factor_type" field if the given value is not nil.
func (iecfu *IncidentEventContributingFactorUpdate) SetNillableFactorType(s *string) *IncidentEventContributingFactorUpdate {
	if s != nil {
		iecfu.SetFactorType(*s)
	}
	return iecfu
}

// SetDescription sets the "description" field.
func (iecfu *IncidentEventContributingFactorUpdate) SetDescription(s string) *IncidentEventContributingFactorUpdate {
	iecfu.mutation.SetDescription(s)
	return iecfu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (iecfu *IncidentEventContributingFactorUpdate) SetNillableDescription(s *string) *IncidentEventContributingFactorUpdate {
	if s != nil {
		iecfu.SetDescription(*s)
	}
	return iecfu
}

// ClearDescription clears the value of the "description" field.
func (iecfu *IncidentEventContributingFactorUpdate) ClearDescription() *IncidentEventContributingFactorUpdate {
	iecfu.mutation.ClearDescription()
	return iecfu
}

// SetCreatedAt sets the "created_at" field.
func (iecfu *IncidentEventContributingFactorUpdate) SetCreatedAt(t time.Time) *IncidentEventContributingFactorUpdate {
	iecfu.mutation.SetCreatedAt(t)
	return iecfu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (iecfu *IncidentEventContributingFactorUpdate) SetNillableCreatedAt(t *time.Time) *IncidentEventContributingFactorUpdate {
	if t != nil {
		iecfu.SetCreatedAt(*t)
	}
	return iecfu
}

// SetEventID sets the "event" edge to the IncidentEvent entity by ID.
func (iecfu *IncidentEventContributingFactorUpdate) SetEventID(id uuid.UUID) *IncidentEventContributingFactorUpdate {
	iecfu.mutation.SetEventID(id)
	return iecfu
}

// SetEvent sets the "event" edge to the IncidentEvent entity.
func (iecfu *IncidentEventContributingFactorUpdate) SetEvent(i *IncidentEvent) *IncidentEventContributingFactorUpdate {
	return iecfu.SetEventID(i.ID)
}

// Mutation returns the IncidentEventContributingFactorMutation object of the builder.
func (iecfu *IncidentEventContributingFactorUpdate) Mutation() *IncidentEventContributingFactorMutation {
	return iecfu.mutation
}

// ClearEvent clears the "event" edge to the IncidentEvent entity.
func (iecfu *IncidentEventContributingFactorUpdate) ClearEvent() *IncidentEventContributingFactorUpdate {
	iecfu.mutation.ClearEvent()
	return iecfu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iecfu *IncidentEventContributingFactorUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iecfu.sqlSave, iecfu.mutation, iecfu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iecfu *IncidentEventContributingFactorUpdate) SaveX(ctx context.Context) int {
	affected, err := iecfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iecfu *IncidentEventContributingFactorUpdate) Exec(ctx context.Context) error {
	_, err := iecfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iecfu *IncidentEventContributingFactorUpdate) ExecX(ctx context.Context) {
	if err := iecfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iecfu *IncidentEventContributingFactorUpdate) check() error {
	if v, ok := iecfu.mutation.FactorType(); ok {
		if err := incidenteventcontributingfactor.FactorTypeValidator(v); err != nil {
			return &ValidationError{Name: "factor_type", err: fmt.Errorf(`ent: validator failed for field "IncidentEventContributingFactor.factor_type": %w`, err)}
		}
	}
	if iecfu.mutation.EventCleared() && len(iecfu.mutation.EventIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IncidentEventContributingFactor.event"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (iecfu *IncidentEventContributingFactorUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *IncidentEventContributingFactorUpdate {
	iecfu.modifiers = append(iecfu.modifiers, modifiers...)
	return iecfu
}

func (iecfu *IncidentEventContributingFactorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iecfu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(incidenteventcontributingfactor.Table, incidenteventcontributingfactor.Columns, sqlgraph.NewFieldSpec(incidenteventcontributingfactor.FieldID, field.TypeUUID))
	if ps := iecfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iecfu.mutation.FactorType(); ok {
		_spec.SetField(incidenteventcontributingfactor.FieldFactorType, field.TypeString, value)
	}
	if value, ok := iecfu.mutation.Description(); ok {
		_spec.SetField(incidenteventcontributingfactor.FieldDescription, field.TypeString, value)
	}
	if iecfu.mutation.DescriptionCleared() {
		_spec.ClearField(incidenteventcontributingfactor.FieldDescription, field.TypeString)
	}
	if value, ok := iecfu.mutation.CreatedAt(); ok {
		_spec.SetField(incidenteventcontributingfactor.FieldCreatedAt, field.TypeTime, value)
	}
	if iecfu.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incidenteventcontributingfactor.EventTable,
			Columns: []string{incidenteventcontributingfactor.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentevent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iecfu.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incidenteventcontributingfactor.EventTable,
			Columns: []string{incidenteventcontributingfactor.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentevent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(iecfu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, iecfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{incidenteventcontributingfactor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iecfu.mutation.done = true
	return n, nil
}

// IncidentEventContributingFactorUpdateOne is the builder for updating a single IncidentEventContributingFactor entity.
type IncidentEventContributingFactorUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *IncidentEventContributingFactorMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetFactorType sets the "factor_type" field.
func (iecfuo *IncidentEventContributingFactorUpdateOne) SetFactorType(s string) *IncidentEventContributingFactorUpdateOne {
	iecfuo.mutation.SetFactorType(s)
	return iecfuo
}

// SetNillableFactorType sets the "factor_type" field if the given value is not nil.
func (iecfuo *IncidentEventContributingFactorUpdateOne) SetNillableFactorType(s *string) *IncidentEventContributingFactorUpdateOne {
	if s != nil {
		iecfuo.SetFactorType(*s)
	}
	return iecfuo
}

// SetDescription sets the "description" field.
func (iecfuo *IncidentEventContributingFactorUpdateOne) SetDescription(s string) *IncidentEventContributingFactorUpdateOne {
	iecfuo.mutation.SetDescription(s)
	return iecfuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (iecfuo *IncidentEventContributingFactorUpdateOne) SetNillableDescription(s *string) *IncidentEventContributingFactorUpdateOne {
	if s != nil {
		iecfuo.SetDescription(*s)
	}
	return iecfuo
}

// ClearDescription clears the value of the "description" field.
func (iecfuo *IncidentEventContributingFactorUpdateOne) ClearDescription() *IncidentEventContributingFactorUpdateOne {
	iecfuo.mutation.ClearDescription()
	return iecfuo
}

// SetCreatedAt sets the "created_at" field.
func (iecfuo *IncidentEventContributingFactorUpdateOne) SetCreatedAt(t time.Time) *IncidentEventContributingFactorUpdateOne {
	iecfuo.mutation.SetCreatedAt(t)
	return iecfuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (iecfuo *IncidentEventContributingFactorUpdateOne) SetNillableCreatedAt(t *time.Time) *IncidentEventContributingFactorUpdateOne {
	if t != nil {
		iecfuo.SetCreatedAt(*t)
	}
	return iecfuo
}

// SetEventID sets the "event" edge to the IncidentEvent entity by ID.
func (iecfuo *IncidentEventContributingFactorUpdateOne) SetEventID(id uuid.UUID) *IncidentEventContributingFactorUpdateOne {
	iecfuo.mutation.SetEventID(id)
	return iecfuo
}

// SetEvent sets the "event" edge to the IncidentEvent entity.
func (iecfuo *IncidentEventContributingFactorUpdateOne) SetEvent(i *IncidentEvent) *IncidentEventContributingFactorUpdateOne {
	return iecfuo.SetEventID(i.ID)
}

// Mutation returns the IncidentEventContributingFactorMutation object of the builder.
func (iecfuo *IncidentEventContributingFactorUpdateOne) Mutation() *IncidentEventContributingFactorMutation {
	return iecfuo.mutation
}

// ClearEvent clears the "event" edge to the IncidentEvent entity.
func (iecfuo *IncidentEventContributingFactorUpdateOne) ClearEvent() *IncidentEventContributingFactorUpdateOne {
	iecfuo.mutation.ClearEvent()
	return iecfuo
}

// Where appends a list predicates to the IncidentEventContributingFactorUpdate builder.
func (iecfuo *IncidentEventContributingFactorUpdateOne) Where(ps ...predicate.IncidentEventContributingFactor) *IncidentEventContributingFactorUpdateOne {
	iecfuo.mutation.Where(ps...)
	return iecfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iecfuo *IncidentEventContributingFactorUpdateOne) Select(field string, fields ...string) *IncidentEventContributingFactorUpdateOne {
	iecfuo.fields = append([]string{field}, fields...)
	return iecfuo
}

// Save executes the query and returns the updated IncidentEventContributingFactor entity.
func (iecfuo *IncidentEventContributingFactorUpdateOne) Save(ctx context.Context) (*IncidentEventContributingFactor, error) {
	return withHooks(ctx, iecfuo.sqlSave, iecfuo.mutation, iecfuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iecfuo *IncidentEventContributingFactorUpdateOne) SaveX(ctx context.Context) *IncidentEventContributingFactor {
	node, err := iecfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iecfuo *IncidentEventContributingFactorUpdateOne) Exec(ctx context.Context) error {
	_, err := iecfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iecfuo *IncidentEventContributingFactorUpdateOne) ExecX(ctx context.Context) {
	if err := iecfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iecfuo *IncidentEventContributingFactorUpdateOne) check() error {
	if v, ok := iecfuo.mutation.FactorType(); ok {
		if err := incidenteventcontributingfactor.FactorTypeValidator(v); err != nil {
			return &ValidationError{Name: "factor_type", err: fmt.Errorf(`ent: validator failed for field "IncidentEventContributingFactor.factor_type": %w`, err)}
		}
	}
	if iecfuo.mutation.EventCleared() && len(iecfuo.mutation.EventIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IncidentEventContributingFactor.event"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (iecfuo *IncidentEventContributingFactorUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *IncidentEventContributingFactorUpdateOne {
	iecfuo.modifiers = append(iecfuo.modifiers, modifiers...)
	return iecfuo
}

func (iecfuo *IncidentEventContributingFactorUpdateOne) sqlSave(ctx context.Context) (_node *IncidentEventContributingFactor, err error) {
	if err := iecfuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(incidenteventcontributingfactor.Table, incidenteventcontributingfactor.Columns, sqlgraph.NewFieldSpec(incidenteventcontributingfactor.FieldID, field.TypeUUID))
	id, ok := iecfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "IncidentEventContributingFactor.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iecfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, incidenteventcontributingfactor.FieldID)
		for _, f := range fields {
			if !incidenteventcontributingfactor.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != incidenteventcontributingfactor.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iecfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iecfuo.mutation.FactorType(); ok {
		_spec.SetField(incidenteventcontributingfactor.FieldFactorType, field.TypeString, value)
	}
	if value, ok := iecfuo.mutation.Description(); ok {
		_spec.SetField(incidenteventcontributingfactor.FieldDescription, field.TypeString, value)
	}
	if iecfuo.mutation.DescriptionCleared() {
		_spec.ClearField(incidenteventcontributingfactor.FieldDescription, field.TypeString)
	}
	if value, ok := iecfuo.mutation.CreatedAt(); ok {
		_spec.SetField(incidenteventcontributingfactor.FieldCreatedAt, field.TypeTime, value)
	}
	if iecfuo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incidenteventcontributingfactor.EventTable,
			Columns: []string{incidenteventcontributingfactor.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentevent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iecfuo.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incidenteventcontributingfactor.EventTable,
			Columns: []string{incidenteventcontributingfactor.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incidentevent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(iecfuo.modifiers...)
	_node = &IncidentEventContributingFactor{config: iecfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iecfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{incidenteventcontributingfactor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iecfuo.mutation.done = true
	return _node, nil
}
