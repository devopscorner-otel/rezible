// Code generated by ent, DO NOT EDIT.

package incidentfieldoption

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v int) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.FieldEQ(FieldTenantID, v))
}

// ArchiveTime applies equality check predicate on the "archive_time" field. It's identical to ArchiveTimeEQ.
func ArchiveTime(v time.Time) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.FieldEQ(FieldArchiveTime, v))
}

// IncidentFieldID applies equality check predicate on the "incident_field_id" field. It's identical to IncidentFieldIDEQ.
func IncidentFieldID(v uuid.UUID) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.FieldEQ(FieldIncidentFieldID, v))
}

// Value applies equality check predicate on the "value" field. It's identical to ValueEQ.
func Value(v string) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.FieldEQ(FieldValue, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v int) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v int) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...int) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...int) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.FieldNotIn(FieldTenantID, vs...))
}

// ArchiveTimeEQ applies the EQ predicate on the "archive_time" field.
func ArchiveTimeEQ(v time.Time) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.FieldEQ(FieldArchiveTime, v))
}

// ArchiveTimeNEQ applies the NEQ predicate on the "archive_time" field.
func ArchiveTimeNEQ(v time.Time) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.FieldNEQ(FieldArchiveTime, v))
}

// ArchiveTimeIn applies the In predicate on the "archive_time" field.
func ArchiveTimeIn(vs ...time.Time) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.FieldIn(FieldArchiveTime, vs...))
}

// ArchiveTimeNotIn applies the NotIn predicate on the "archive_time" field.
func ArchiveTimeNotIn(vs ...time.Time) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.FieldNotIn(FieldArchiveTime, vs...))
}

// ArchiveTimeGT applies the GT predicate on the "archive_time" field.
func ArchiveTimeGT(v time.Time) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.FieldGT(FieldArchiveTime, v))
}

// ArchiveTimeGTE applies the GTE predicate on the "archive_time" field.
func ArchiveTimeGTE(v time.Time) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.FieldGTE(FieldArchiveTime, v))
}

// ArchiveTimeLT applies the LT predicate on the "archive_time" field.
func ArchiveTimeLT(v time.Time) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.FieldLT(FieldArchiveTime, v))
}

// ArchiveTimeLTE applies the LTE predicate on the "archive_time" field.
func ArchiveTimeLTE(v time.Time) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.FieldLTE(FieldArchiveTime, v))
}

// ArchiveTimeIsNil applies the IsNil predicate on the "archive_time" field.
func ArchiveTimeIsNil() predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.FieldIsNull(FieldArchiveTime))
}

// ArchiveTimeNotNil applies the NotNil predicate on the "archive_time" field.
func ArchiveTimeNotNil() predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.FieldNotNull(FieldArchiveTime))
}

// IncidentFieldIDEQ applies the EQ predicate on the "incident_field_id" field.
func IncidentFieldIDEQ(v uuid.UUID) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.FieldEQ(FieldIncidentFieldID, v))
}

// IncidentFieldIDNEQ applies the NEQ predicate on the "incident_field_id" field.
func IncidentFieldIDNEQ(v uuid.UUID) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.FieldNEQ(FieldIncidentFieldID, v))
}

// IncidentFieldIDIn applies the In predicate on the "incident_field_id" field.
func IncidentFieldIDIn(vs ...uuid.UUID) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.FieldIn(FieldIncidentFieldID, vs...))
}

// IncidentFieldIDNotIn applies the NotIn predicate on the "incident_field_id" field.
func IncidentFieldIDNotIn(vs ...uuid.UUID) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.FieldNotIn(FieldIncidentFieldID, vs...))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.FieldNotIn(FieldType, vs...))
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v string) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.FieldEQ(FieldValue, v))
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v string) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.FieldNEQ(FieldValue, v))
}

// ValueIn applies the In predicate on the "value" field.
func ValueIn(vs ...string) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.FieldIn(FieldValue, vs...))
}

// ValueNotIn applies the NotIn predicate on the "value" field.
func ValueNotIn(vs ...string) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.FieldNotIn(FieldValue, vs...))
}

// ValueGT applies the GT predicate on the "value" field.
func ValueGT(v string) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.FieldGT(FieldValue, v))
}

// ValueGTE applies the GTE predicate on the "value" field.
func ValueGTE(v string) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.FieldGTE(FieldValue, v))
}

// ValueLT applies the LT predicate on the "value" field.
func ValueLT(v string) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.FieldLT(FieldValue, v))
}

// ValueLTE applies the LTE predicate on the "value" field.
func ValueLTE(v string) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.FieldLTE(FieldValue, v))
}

// ValueContains applies the Contains predicate on the "value" field.
func ValueContains(v string) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.FieldContains(FieldValue, v))
}

// ValueHasPrefix applies the HasPrefix predicate on the "value" field.
func ValueHasPrefix(v string) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.FieldHasPrefix(FieldValue, v))
}

// ValueHasSuffix applies the HasSuffix predicate on the "value" field.
func ValueHasSuffix(v string) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.FieldHasSuffix(FieldValue, v))
}

// ValueEqualFold applies the EqualFold predicate on the "value" field.
func ValueEqualFold(v string) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.FieldEqualFold(FieldValue, v))
}

// ValueContainsFold applies the ContainsFold predicate on the "value" field.
func ValueContainsFold(v string) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.FieldContainsFold(FieldValue, v))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIncidentField applies the HasEdge predicate on the "incident_field" edge.
func HasIncidentField() predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, IncidentFieldTable, IncidentFieldColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIncidentFieldWith applies the HasEdge predicate on the "incident_field" edge with a given conditions (other predicates).
func HasIncidentFieldWith(preds ...predicate.IncidentField) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(func(s *sql.Selector) {
		step := newIncidentFieldStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIncidents applies the HasEdge predicate on the "incidents" edge.
func HasIncidents() predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, IncidentsTable, IncidentsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIncidentsWith applies the HasEdge predicate on the "incidents" edge with a given conditions (other predicates).
func HasIncidentsWith(preds ...predicate.Incident) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(func(s *sql.Selector) {
		step := newIncidentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.IncidentFieldOption) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.IncidentFieldOption) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.IncidentFieldOption) predicate.IncidentFieldOption {
	return predicate.IncidentFieldOption(sql.NotPredicates(p))
}
