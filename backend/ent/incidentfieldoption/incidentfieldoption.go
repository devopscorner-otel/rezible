// Code generated by ent, DO NOT EDIT.

package incidentfieldoption

import (
	"fmt"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the incidentfieldoption type in the database.
	Label = "incident_field_option"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldArchiveTime holds the string denoting the archive_time field in the database.
	FieldArchiveTime = "archive_time"
	// FieldIncidentFieldID holds the string denoting the incident_field_id field in the database.
	FieldIncidentFieldID = "incident_field_id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// EdgeIncidentField holds the string denoting the incident_field edge name in mutations.
	EdgeIncidentField = "incident_field"
	// EdgeIncidents holds the string denoting the incidents edge name in mutations.
	EdgeIncidents = "incidents"
	// Table holds the table name of the incidentfieldoption in the database.
	Table = "incident_field_options"
	// IncidentFieldTable is the table that holds the incident_field relation/edge.
	IncidentFieldTable = "incident_field_options"
	// IncidentFieldInverseTable is the table name for the IncidentField entity.
	// It exists in this package in order to avoid circular dependency with the "incidentfield" package.
	IncidentFieldInverseTable = "incident_fields"
	// IncidentFieldColumn is the table column denoting the incident_field relation/edge.
	IncidentFieldColumn = "incident_field_id"
	// IncidentsTable is the table that holds the incidents relation/edge. The primary key declared below.
	IncidentsTable = "incident_field_selections"
	// IncidentsInverseTable is the table name for the Incident entity.
	// It exists in this package in order to avoid circular dependency with the "incident" package.
	IncidentsInverseTable = "incidents"
)

// Columns holds all SQL columns for incidentfieldoption fields.
var Columns = []string{
	FieldID,
	FieldArchiveTime,
	FieldIncidentFieldID,
	FieldType,
	FieldValue,
}

var (
	// IncidentsPrimaryKey and IncidentsColumn2 are the table columns denoting the
	// primary key for the incidents relation (M2M).
	IncidentsPrimaryKey = []string{"incident_id", "incident_field_option_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/rezible/rezible/ent/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeCustom  Type = "custom"
	TypeDerived Type = "derived"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeCustom, TypeDerived:
		return nil
	default:
		return fmt.Errorf("incidentfieldoption: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the IncidentFieldOption queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByArchiveTime orders the results by the archive_time field.
func ByArchiveTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArchiveTime, opts...).ToFunc()
}

// ByIncidentFieldID orders the results by the incident_field_id field.
func ByIncidentFieldID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIncidentFieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByValue orders the results by the value field.
func ByValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValue, opts...).ToFunc()
}

// ByIncidentFieldField orders the results by incident_field field.
func ByIncidentFieldField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIncidentFieldStep(), sql.OrderByField(field, opts...))
	}
}

// ByIncidentsCount orders the results by incidents count.
func ByIncidentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIncidentsStep(), opts...)
	}
}

// ByIncidents orders the results by incidents terms.
func ByIncidents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIncidentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newIncidentFieldStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IncidentFieldInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, IncidentFieldTable, IncidentFieldColumn),
	)
}
func newIncidentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IncidentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, IncidentsTable, IncidentsPrimaryKey...),
	)
}
