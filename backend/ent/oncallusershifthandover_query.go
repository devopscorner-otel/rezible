// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/oncalleventannotation"
	"github.com/rezible/rezible/ent/oncallusershift"
	"github.com/rezible/rezible/ent/oncallusershifthandover"
	"github.com/rezible/rezible/ent/predicate"
)

// OncallUserShiftHandoverQuery is the builder for querying OncallUserShiftHandover entities.
type OncallUserShiftHandoverQuery struct {
	config
	ctx                   *QueryContext
	order                 []oncallusershifthandover.OrderOption
	inters                []Interceptor
	predicates            []predicate.OncallUserShiftHandover
	withShift             *OncallUserShiftQuery
	withPinnedAnnotations *OncallEventAnnotationQuery
	modifiers             []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OncallUserShiftHandoverQuery builder.
func (oushq *OncallUserShiftHandoverQuery) Where(ps ...predicate.OncallUserShiftHandover) *OncallUserShiftHandoverQuery {
	oushq.predicates = append(oushq.predicates, ps...)
	return oushq
}

// Limit the number of records to be returned by this query.
func (oushq *OncallUserShiftHandoverQuery) Limit(limit int) *OncallUserShiftHandoverQuery {
	oushq.ctx.Limit = &limit
	return oushq
}

// Offset to start from.
func (oushq *OncallUserShiftHandoverQuery) Offset(offset int) *OncallUserShiftHandoverQuery {
	oushq.ctx.Offset = &offset
	return oushq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (oushq *OncallUserShiftHandoverQuery) Unique(unique bool) *OncallUserShiftHandoverQuery {
	oushq.ctx.Unique = &unique
	return oushq
}

// Order specifies how the records should be ordered.
func (oushq *OncallUserShiftHandoverQuery) Order(o ...oncallusershifthandover.OrderOption) *OncallUserShiftHandoverQuery {
	oushq.order = append(oushq.order, o...)
	return oushq
}

// QueryShift chains the current query on the "shift" edge.
func (oushq *OncallUserShiftHandoverQuery) QueryShift() *OncallUserShiftQuery {
	query := (&OncallUserShiftClient{config: oushq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oushq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oushq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(oncallusershifthandover.Table, oncallusershifthandover.FieldID, selector),
			sqlgraph.To(oncallusershift.Table, oncallusershift.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, oncallusershifthandover.ShiftTable, oncallusershifthandover.ShiftColumn),
		)
		fromU = sqlgraph.SetNeighbors(oushq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPinnedAnnotations chains the current query on the "pinned_annotations" edge.
func (oushq *OncallUserShiftHandoverQuery) QueryPinnedAnnotations() *OncallEventAnnotationQuery {
	query := (&OncallEventAnnotationClient{config: oushq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oushq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oushq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(oncallusershifthandover.Table, oncallusershifthandover.FieldID, selector),
			sqlgraph.To(oncalleventannotation.Table, oncalleventannotation.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, oncallusershifthandover.PinnedAnnotationsTable, oncallusershifthandover.PinnedAnnotationsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(oushq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first OncallUserShiftHandover entity from the query.
// Returns a *NotFoundError when no OncallUserShiftHandover was found.
func (oushq *OncallUserShiftHandoverQuery) First(ctx context.Context) (*OncallUserShiftHandover, error) {
	nodes, err := oushq.Limit(1).All(setContextOp(ctx, oushq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{oncallusershifthandover.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (oushq *OncallUserShiftHandoverQuery) FirstX(ctx context.Context) *OncallUserShiftHandover {
	node, err := oushq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first OncallUserShiftHandover ID from the query.
// Returns a *NotFoundError when no OncallUserShiftHandover ID was found.
func (oushq *OncallUserShiftHandoverQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = oushq.Limit(1).IDs(setContextOp(ctx, oushq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{oncallusershifthandover.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (oushq *OncallUserShiftHandoverQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := oushq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single OncallUserShiftHandover entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one OncallUserShiftHandover entity is found.
// Returns a *NotFoundError when no OncallUserShiftHandover entities are found.
func (oushq *OncallUserShiftHandoverQuery) Only(ctx context.Context) (*OncallUserShiftHandover, error) {
	nodes, err := oushq.Limit(2).All(setContextOp(ctx, oushq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{oncallusershifthandover.Label}
	default:
		return nil, &NotSingularError{oncallusershifthandover.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (oushq *OncallUserShiftHandoverQuery) OnlyX(ctx context.Context) *OncallUserShiftHandover {
	node, err := oushq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only OncallUserShiftHandover ID in the query.
// Returns a *NotSingularError when more than one OncallUserShiftHandover ID is found.
// Returns a *NotFoundError when no entities are found.
func (oushq *OncallUserShiftHandoverQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = oushq.Limit(2).IDs(setContextOp(ctx, oushq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{oncallusershifthandover.Label}
	default:
		err = &NotSingularError{oncallusershifthandover.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (oushq *OncallUserShiftHandoverQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := oushq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OncallUserShiftHandovers.
func (oushq *OncallUserShiftHandoverQuery) All(ctx context.Context) ([]*OncallUserShiftHandover, error) {
	ctx = setContextOp(ctx, oushq.ctx, ent.OpQueryAll)
	if err := oushq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*OncallUserShiftHandover, *OncallUserShiftHandoverQuery]()
	return withInterceptors[[]*OncallUserShiftHandover](ctx, oushq, qr, oushq.inters)
}

// AllX is like All, but panics if an error occurs.
func (oushq *OncallUserShiftHandoverQuery) AllX(ctx context.Context) []*OncallUserShiftHandover {
	nodes, err := oushq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of OncallUserShiftHandover IDs.
func (oushq *OncallUserShiftHandoverQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if oushq.ctx.Unique == nil && oushq.path != nil {
		oushq.Unique(true)
	}
	ctx = setContextOp(ctx, oushq.ctx, ent.OpQueryIDs)
	if err = oushq.Select(oncallusershifthandover.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (oushq *OncallUserShiftHandoverQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := oushq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (oushq *OncallUserShiftHandoverQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, oushq.ctx, ent.OpQueryCount)
	if err := oushq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, oushq, querierCount[*OncallUserShiftHandoverQuery](), oushq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (oushq *OncallUserShiftHandoverQuery) CountX(ctx context.Context) int {
	count, err := oushq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (oushq *OncallUserShiftHandoverQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, oushq.ctx, ent.OpQueryExist)
	switch _, err := oushq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (oushq *OncallUserShiftHandoverQuery) ExistX(ctx context.Context) bool {
	exist, err := oushq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OncallUserShiftHandoverQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (oushq *OncallUserShiftHandoverQuery) Clone() *OncallUserShiftHandoverQuery {
	if oushq == nil {
		return nil
	}
	return &OncallUserShiftHandoverQuery{
		config:                oushq.config,
		ctx:                   oushq.ctx.Clone(),
		order:                 append([]oncallusershifthandover.OrderOption{}, oushq.order...),
		inters:                append([]Interceptor{}, oushq.inters...),
		predicates:            append([]predicate.OncallUserShiftHandover{}, oushq.predicates...),
		withShift:             oushq.withShift.Clone(),
		withPinnedAnnotations: oushq.withPinnedAnnotations.Clone(),
		// clone intermediate query.
		sql:       oushq.sql.Clone(),
		path:      oushq.path,
		modifiers: append([]func(*sql.Selector){}, oushq.modifiers...),
	}
}

// WithShift tells the query-builder to eager-load the nodes that are connected to
// the "shift" edge. The optional arguments are used to configure the query builder of the edge.
func (oushq *OncallUserShiftHandoverQuery) WithShift(opts ...func(*OncallUserShiftQuery)) *OncallUserShiftHandoverQuery {
	query := (&OncallUserShiftClient{config: oushq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oushq.withShift = query
	return oushq
}

// WithPinnedAnnotations tells the query-builder to eager-load the nodes that are connected to
// the "pinned_annotations" edge. The optional arguments are used to configure the query builder of the edge.
func (oushq *OncallUserShiftHandoverQuery) WithPinnedAnnotations(opts ...func(*OncallEventAnnotationQuery)) *OncallUserShiftHandoverQuery {
	query := (&OncallEventAnnotationClient{config: oushq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oushq.withPinnedAnnotations = query
	return oushq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ShiftID uuid.UUID `json:"shift_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OncallUserShiftHandover.Query().
//		GroupBy(oncallusershifthandover.FieldShiftID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (oushq *OncallUserShiftHandoverQuery) GroupBy(field string, fields ...string) *OncallUserShiftHandoverGroupBy {
	oushq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &OncallUserShiftHandoverGroupBy{build: oushq}
	grbuild.flds = &oushq.ctx.Fields
	grbuild.label = oncallusershifthandover.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ShiftID uuid.UUID `json:"shift_id,omitempty"`
//	}
//
//	client.OncallUserShiftHandover.Query().
//		Select(oncallusershifthandover.FieldShiftID).
//		Scan(ctx, &v)
func (oushq *OncallUserShiftHandoverQuery) Select(fields ...string) *OncallUserShiftHandoverSelect {
	oushq.ctx.Fields = append(oushq.ctx.Fields, fields...)
	sbuild := &OncallUserShiftHandoverSelect{OncallUserShiftHandoverQuery: oushq}
	sbuild.label = oncallusershifthandover.Label
	sbuild.flds, sbuild.scan = &oushq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a OncallUserShiftHandoverSelect configured with the given aggregations.
func (oushq *OncallUserShiftHandoverQuery) Aggregate(fns ...AggregateFunc) *OncallUserShiftHandoverSelect {
	return oushq.Select().Aggregate(fns...)
}

func (oushq *OncallUserShiftHandoverQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range oushq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, oushq); err != nil {
				return err
			}
		}
	}
	for _, f := range oushq.ctx.Fields {
		if !oncallusershifthandover.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if oushq.path != nil {
		prev, err := oushq.path(ctx)
		if err != nil {
			return err
		}
		oushq.sql = prev
	}
	return nil
}

func (oushq *OncallUserShiftHandoverQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*OncallUserShiftHandover, error) {
	var (
		nodes       = []*OncallUserShiftHandover{}
		_spec       = oushq.querySpec()
		loadedTypes = [2]bool{
			oushq.withShift != nil,
			oushq.withPinnedAnnotations != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*OncallUserShiftHandover).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &OncallUserShiftHandover{config: oushq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(oushq.modifiers) > 0 {
		_spec.Modifiers = oushq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, oushq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := oushq.withShift; query != nil {
		if err := oushq.loadShift(ctx, query, nodes, nil,
			func(n *OncallUserShiftHandover, e *OncallUserShift) { n.Edges.Shift = e }); err != nil {
			return nil, err
		}
	}
	if query := oushq.withPinnedAnnotations; query != nil {
		if err := oushq.loadPinnedAnnotations(ctx, query, nodes,
			func(n *OncallUserShiftHandover) { n.Edges.PinnedAnnotations = []*OncallEventAnnotation{} },
			func(n *OncallUserShiftHandover, e *OncallEventAnnotation) {
				n.Edges.PinnedAnnotations = append(n.Edges.PinnedAnnotations, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (oushq *OncallUserShiftHandoverQuery) loadShift(ctx context.Context, query *OncallUserShiftQuery, nodes []*OncallUserShiftHandover, init func(*OncallUserShiftHandover), assign func(*OncallUserShiftHandover, *OncallUserShift)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*OncallUserShiftHandover)
	for i := range nodes {
		fk := nodes[i].ShiftID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(oncallusershift.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "shift_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (oushq *OncallUserShiftHandoverQuery) loadPinnedAnnotations(ctx context.Context, query *OncallEventAnnotationQuery, nodes []*OncallUserShiftHandover, init func(*OncallUserShiftHandover), assign func(*OncallUserShiftHandover, *OncallEventAnnotation)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*OncallUserShiftHandover)
	nids := make(map[uuid.UUID]map[*OncallUserShiftHandover]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(oncallusershifthandover.PinnedAnnotationsTable)
		s.Join(joinT).On(s.C(oncalleventannotation.FieldID), joinT.C(oncallusershifthandover.PinnedAnnotationsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(oncallusershifthandover.PinnedAnnotationsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(oncallusershifthandover.PinnedAnnotationsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*OncallUserShiftHandover]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*OncallEventAnnotation](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "pinned_annotations" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (oushq *OncallUserShiftHandoverQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := oushq.querySpec()
	if len(oushq.modifiers) > 0 {
		_spec.Modifiers = oushq.modifiers
	}
	_spec.Node.Columns = oushq.ctx.Fields
	if len(oushq.ctx.Fields) > 0 {
		_spec.Unique = oushq.ctx.Unique != nil && *oushq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, oushq.driver, _spec)
}

func (oushq *OncallUserShiftHandoverQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(oncallusershifthandover.Table, oncallusershifthandover.Columns, sqlgraph.NewFieldSpec(oncallusershifthandover.FieldID, field.TypeUUID))
	_spec.From = oushq.sql
	if unique := oushq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if oushq.path != nil {
		_spec.Unique = true
	}
	if fields := oushq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oncallusershifthandover.FieldID)
		for i := range fields {
			if fields[i] != oncallusershifthandover.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if oushq.withShift != nil {
			_spec.Node.AddColumnOnce(oncallusershifthandover.FieldShiftID)
		}
	}
	if ps := oushq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := oushq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := oushq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := oushq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (oushq *OncallUserShiftHandoverQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(oushq.driver.Dialect())
	t1 := builder.Table(oncallusershifthandover.Table)
	columns := oushq.ctx.Fields
	if len(columns) == 0 {
		columns = oncallusershifthandover.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if oushq.sql != nil {
		selector = oushq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if oushq.ctx.Unique != nil && *oushq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range oushq.modifiers {
		m(selector)
	}
	for _, p := range oushq.predicates {
		p(selector)
	}
	for _, p := range oushq.order {
		p(selector)
	}
	if offset := oushq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := oushq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (oushq *OncallUserShiftHandoverQuery) Modify(modifiers ...func(s *sql.Selector)) *OncallUserShiftHandoverSelect {
	oushq.modifiers = append(oushq.modifiers, modifiers...)
	return oushq.Select()
}

// OncallUserShiftHandoverGroupBy is the group-by builder for OncallUserShiftHandover entities.
type OncallUserShiftHandoverGroupBy struct {
	selector
	build *OncallUserShiftHandoverQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (oushgb *OncallUserShiftHandoverGroupBy) Aggregate(fns ...AggregateFunc) *OncallUserShiftHandoverGroupBy {
	oushgb.fns = append(oushgb.fns, fns...)
	return oushgb
}

// Scan applies the selector query and scans the result into the given value.
func (oushgb *OncallUserShiftHandoverGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, oushgb.build.ctx, ent.OpQueryGroupBy)
	if err := oushgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OncallUserShiftHandoverQuery, *OncallUserShiftHandoverGroupBy](ctx, oushgb.build, oushgb, oushgb.build.inters, v)
}

func (oushgb *OncallUserShiftHandoverGroupBy) sqlScan(ctx context.Context, root *OncallUserShiftHandoverQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(oushgb.fns))
	for _, fn := range oushgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*oushgb.flds)+len(oushgb.fns))
		for _, f := range *oushgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*oushgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := oushgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// OncallUserShiftHandoverSelect is the builder for selecting fields of OncallUserShiftHandover entities.
type OncallUserShiftHandoverSelect struct {
	*OncallUserShiftHandoverQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (oushs *OncallUserShiftHandoverSelect) Aggregate(fns ...AggregateFunc) *OncallUserShiftHandoverSelect {
	oushs.fns = append(oushs.fns, fns...)
	return oushs
}

// Scan applies the selector query and scans the result into the given value.
func (oushs *OncallUserShiftHandoverSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, oushs.ctx, ent.OpQuerySelect)
	if err := oushs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OncallUserShiftHandoverQuery, *OncallUserShiftHandoverSelect](ctx, oushs.OncallUserShiftHandoverQuery, oushs, oushs.inters, v)
}

func (oushs *OncallUserShiftHandoverSelect) sqlScan(ctx context.Context, root *OncallUserShiftHandoverQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(oushs.fns))
	for _, fn := range oushs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*oushs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := oushs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (oushs *OncallUserShiftHandoverSelect) Modify(modifiers ...func(s *sql.Selector)) *OncallUserShiftHandoverSelect {
	oushs.modifiers = append(oushs.modifiers, modifiers...)
	return oushs
}
