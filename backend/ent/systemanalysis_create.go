// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/retrospective"
	"github.com/rezible/rezible/ent/systemanalysis"
	"github.com/rezible/rezible/ent/systemanalysiscomponent"
	"github.com/rezible/rezible/ent/systemanalysisrelationship"
	"github.com/rezible/rezible/ent/systemcomponent"
)

// SystemAnalysisCreate is the builder for creating a SystemAnalysis entity.
type SystemAnalysisCreate struct {
	config
	mutation *SystemAnalysisMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (sac *SystemAnalysisCreate) SetCreatedAt(t time.Time) *SystemAnalysisCreate {
	sac.mutation.SetCreatedAt(t)
	return sac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sac *SystemAnalysisCreate) SetNillableCreatedAt(t *time.Time) *SystemAnalysisCreate {
	if t != nil {
		sac.SetCreatedAt(*t)
	}
	return sac
}

// SetUpdatedAt sets the "updated_at" field.
func (sac *SystemAnalysisCreate) SetUpdatedAt(t time.Time) *SystemAnalysisCreate {
	sac.mutation.SetUpdatedAt(t)
	return sac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sac *SystemAnalysisCreate) SetNillableUpdatedAt(t *time.Time) *SystemAnalysisCreate {
	if t != nil {
		sac.SetUpdatedAt(*t)
	}
	return sac
}

// SetID sets the "id" field.
func (sac *SystemAnalysisCreate) SetID(u uuid.UUID) *SystemAnalysisCreate {
	sac.mutation.SetID(u)
	return sac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sac *SystemAnalysisCreate) SetNillableID(u *uuid.UUID) *SystemAnalysisCreate {
	if u != nil {
		sac.SetID(*u)
	}
	return sac
}

// SetRetrospectiveID sets the "retrospective" edge to the Retrospective entity by ID.
func (sac *SystemAnalysisCreate) SetRetrospectiveID(id uuid.UUID) *SystemAnalysisCreate {
	sac.mutation.SetRetrospectiveID(id)
	return sac
}

// SetRetrospective sets the "retrospective" edge to the Retrospective entity.
func (sac *SystemAnalysisCreate) SetRetrospective(r *Retrospective) *SystemAnalysisCreate {
	return sac.SetRetrospectiveID(r.ID)
}

// AddComponentIDs adds the "components" edge to the SystemComponent entity by IDs.
func (sac *SystemAnalysisCreate) AddComponentIDs(ids ...uuid.UUID) *SystemAnalysisCreate {
	sac.mutation.AddComponentIDs(ids...)
	return sac
}

// AddComponents adds the "components" edges to the SystemComponent entity.
func (sac *SystemAnalysisCreate) AddComponents(s ...*SystemComponent) *SystemAnalysisCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sac.AddComponentIDs(ids...)
}

// AddRelationshipIDs adds the "relationships" edge to the SystemAnalysisRelationship entity by IDs.
func (sac *SystemAnalysisCreate) AddRelationshipIDs(ids ...uuid.UUID) *SystemAnalysisCreate {
	sac.mutation.AddRelationshipIDs(ids...)
	return sac
}

// AddRelationships adds the "relationships" edges to the SystemAnalysisRelationship entity.
func (sac *SystemAnalysisCreate) AddRelationships(s ...*SystemAnalysisRelationship) *SystemAnalysisCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sac.AddRelationshipIDs(ids...)
}

// AddAnalysisComponentIDs adds the "analysis_components" edge to the SystemAnalysisComponent entity by IDs.
func (sac *SystemAnalysisCreate) AddAnalysisComponentIDs(ids ...uuid.UUID) *SystemAnalysisCreate {
	sac.mutation.AddAnalysisComponentIDs(ids...)
	return sac
}

// AddAnalysisComponents adds the "analysis_components" edges to the SystemAnalysisComponent entity.
func (sac *SystemAnalysisCreate) AddAnalysisComponents(s ...*SystemAnalysisComponent) *SystemAnalysisCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sac.AddAnalysisComponentIDs(ids...)
}

// Mutation returns the SystemAnalysisMutation object of the builder.
func (sac *SystemAnalysisCreate) Mutation() *SystemAnalysisMutation {
	return sac.mutation
}

// Save creates the SystemAnalysis in the database.
func (sac *SystemAnalysisCreate) Save(ctx context.Context) (*SystemAnalysis, error) {
	if err := sac.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, sac.sqlSave, sac.mutation, sac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sac *SystemAnalysisCreate) SaveX(ctx context.Context) *SystemAnalysis {
	v, err := sac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sac *SystemAnalysisCreate) Exec(ctx context.Context) error {
	_, err := sac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sac *SystemAnalysisCreate) ExecX(ctx context.Context) {
	if err := sac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sac *SystemAnalysisCreate) defaults() error {
	if _, ok := sac.mutation.CreatedAt(); !ok {
		if systemanalysis.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized systemanalysis.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := systemanalysis.DefaultCreatedAt()
		sac.mutation.SetCreatedAt(v)
	}
	if _, ok := sac.mutation.UpdatedAt(); !ok {
		if systemanalysis.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized systemanalysis.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := systemanalysis.DefaultUpdatedAt()
		sac.mutation.SetUpdatedAt(v)
	}
	if _, ok := sac.mutation.ID(); !ok {
		if systemanalysis.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized systemanalysis.DefaultID (forgotten import ent/runtime?)")
		}
		v := systemanalysis.DefaultID()
		sac.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sac *SystemAnalysisCreate) check() error {
	if _, ok := sac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SystemAnalysis.created_at"`)}
	}
	if _, ok := sac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SystemAnalysis.updated_at"`)}
	}
	if len(sac.mutation.RetrospectiveIDs()) == 0 {
		return &ValidationError{Name: "retrospective", err: errors.New(`ent: missing required edge "SystemAnalysis.retrospective"`)}
	}
	return nil
}

func (sac *SystemAnalysisCreate) sqlSave(ctx context.Context) (*SystemAnalysis, error) {
	if err := sac.check(); err != nil {
		return nil, err
	}
	_node, _spec := sac.createSpec()
	if err := sqlgraph.CreateNode(ctx, sac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	sac.mutation.id = &_node.ID
	sac.mutation.done = true
	return _node, nil
}

func (sac *SystemAnalysisCreate) createSpec() (*SystemAnalysis, *sqlgraph.CreateSpec) {
	var (
		_node = &SystemAnalysis{config: sac.config}
		_spec = sqlgraph.NewCreateSpec(systemanalysis.Table, sqlgraph.NewFieldSpec(systemanalysis.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = sac.conflict
	if id, ok := sac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sac.mutation.CreatedAt(); ok {
		_spec.SetField(systemanalysis.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sac.mutation.UpdatedAt(); ok {
		_spec.SetField(systemanalysis.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := sac.mutation.RetrospectiveIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   systemanalysis.RetrospectiveTable,
			Columns: []string{systemanalysis.RetrospectiveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospective.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sac.mutation.ComponentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   systemanalysis.ComponentsTable,
			Columns: systemanalysis.ComponentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemcomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SystemAnalysisComponentCreate{config: sac.config, mutation: newSystemAnalysisComponentMutation(sac.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sac.mutation.RelationshipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemanalysis.RelationshipsTable,
			Columns: []string{systemanalysis.RelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemanalysisrelationship.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sac.mutation.AnalysisComponentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systemanalysis.AnalysisComponentsTable,
			Columns: []string{systemanalysis.AnalysisComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemanalysiscomponent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SystemAnalysis.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SystemAnalysisUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (sac *SystemAnalysisCreate) OnConflict(opts ...sql.ConflictOption) *SystemAnalysisUpsertOne {
	sac.conflict = opts
	return &SystemAnalysisUpsertOne{
		create: sac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SystemAnalysis.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sac *SystemAnalysisCreate) OnConflictColumns(columns ...string) *SystemAnalysisUpsertOne {
	sac.conflict = append(sac.conflict, sql.ConflictColumns(columns...))
	return &SystemAnalysisUpsertOne{
		create: sac,
	}
}

type (
	// SystemAnalysisUpsertOne is the builder for "upsert"-ing
	//  one SystemAnalysis node.
	SystemAnalysisUpsertOne struct {
		create *SystemAnalysisCreate
	}

	// SystemAnalysisUpsert is the "OnConflict" setter.
	SystemAnalysisUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *SystemAnalysisUpsert) SetCreatedAt(v time.Time) *SystemAnalysisUpsert {
	u.Set(systemanalysis.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SystemAnalysisUpsert) UpdateCreatedAt() *SystemAnalysisUpsert {
	u.SetExcluded(systemanalysis.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SystemAnalysisUpsert) SetUpdatedAt(v time.Time) *SystemAnalysisUpsert {
	u.Set(systemanalysis.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SystemAnalysisUpsert) UpdateUpdatedAt() *SystemAnalysisUpsert {
	u.SetExcluded(systemanalysis.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SystemAnalysis.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(systemanalysis.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SystemAnalysisUpsertOne) UpdateNewValues() *SystemAnalysisUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(systemanalysis.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SystemAnalysis.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SystemAnalysisUpsertOne) Ignore() *SystemAnalysisUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SystemAnalysisUpsertOne) DoNothing() *SystemAnalysisUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SystemAnalysisCreate.OnConflict
// documentation for more info.
func (u *SystemAnalysisUpsertOne) Update(set func(*SystemAnalysisUpsert)) *SystemAnalysisUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SystemAnalysisUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SystemAnalysisUpsertOne) SetCreatedAt(v time.Time) *SystemAnalysisUpsertOne {
	return u.Update(func(s *SystemAnalysisUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SystemAnalysisUpsertOne) UpdateCreatedAt() *SystemAnalysisUpsertOne {
	return u.Update(func(s *SystemAnalysisUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SystemAnalysisUpsertOne) SetUpdatedAt(v time.Time) *SystemAnalysisUpsertOne {
	return u.Update(func(s *SystemAnalysisUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SystemAnalysisUpsertOne) UpdateUpdatedAt() *SystemAnalysisUpsertOne {
	return u.Update(func(s *SystemAnalysisUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *SystemAnalysisUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SystemAnalysisCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SystemAnalysisUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SystemAnalysisUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: SystemAnalysisUpsertOne.ID is not supported by MySQL driver. Use SystemAnalysisUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SystemAnalysisUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SystemAnalysisCreateBulk is the builder for creating many SystemAnalysis entities in bulk.
type SystemAnalysisCreateBulk struct {
	config
	err      error
	builders []*SystemAnalysisCreate
	conflict []sql.ConflictOption
}

// Save creates the SystemAnalysis entities in the database.
func (sacb *SystemAnalysisCreateBulk) Save(ctx context.Context) ([]*SystemAnalysis, error) {
	if sacb.err != nil {
		return nil, sacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sacb.builders))
	nodes := make([]*SystemAnalysis, len(sacb.builders))
	mutators := make([]Mutator, len(sacb.builders))
	for i := range sacb.builders {
		func(i int, root context.Context) {
			builder := sacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SystemAnalysisMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sacb *SystemAnalysisCreateBulk) SaveX(ctx context.Context) []*SystemAnalysis {
	v, err := sacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sacb *SystemAnalysisCreateBulk) Exec(ctx context.Context) error {
	_, err := sacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sacb *SystemAnalysisCreateBulk) ExecX(ctx context.Context) {
	if err := sacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SystemAnalysis.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SystemAnalysisUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (sacb *SystemAnalysisCreateBulk) OnConflict(opts ...sql.ConflictOption) *SystemAnalysisUpsertBulk {
	sacb.conflict = opts
	return &SystemAnalysisUpsertBulk{
		create: sacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SystemAnalysis.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sacb *SystemAnalysisCreateBulk) OnConflictColumns(columns ...string) *SystemAnalysisUpsertBulk {
	sacb.conflict = append(sacb.conflict, sql.ConflictColumns(columns...))
	return &SystemAnalysisUpsertBulk{
		create: sacb,
	}
}

// SystemAnalysisUpsertBulk is the builder for "upsert"-ing
// a bulk of SystemAnalysis nodes.
type SystemAnalysisUpsertBulk struct {
	create *SystemAnalysisCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SystemAnalysis.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(systemanalysis.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SystemAnalysisUpsertBulk) UpdateNewValues() *SystemAnalysisUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(systemanalysis.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SystemAnalysis.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SystemAnalysisUpsertBulk) Ignore() *SystemAnalysisUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SystemAnalysisUpsertBulk) DoNothing() *SystemAnalysisUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SystemAnalysisCreateBulk.OnConflict
// documentation for more info.
func (u *SystemAnalysisUpsertBulk) Update(set func(*SystemAnalysisUpsert)) *SystemAnalysisUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SystemAnalysisUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SystemAnalysisUpsertBulk) SetCreatedAt(v time.Time) *SystemAnalysisUpsertBulk {
	return u.Update(func(s *SystemAnalysisUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SystemAnalysisUpsertBulk) UpdateCreatedAt() *SystemAnalysisUpsertBulk {
	return u.Update(func(s *SystemAnalysisUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SystemAnalysisUpsertBulk) SetUpdatedAt(v time.Time) *SystemAnalysisUpsertBulk {
	return u.Update(func(s *SystemAnalysisUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SystemAnalysisUpsertBulk) UpdateUpdatedAt() *SystemAnalysisUpsertBulk {
	return u.Update(func(s *SystemAnalysisUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *SystemAnalysisUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SystemAnalysisCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SystemAnalysisCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SystemAnalysisUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
