// Code generated by ent, DO NOT EDIT.

package retrospective

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the retrospective type in the database.
	Label = "retrospective"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDocumentName holds the string denoting the document_name field in the database.
	FieldDocumentName = "document_name"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// EdgeIncident holds the string denoting the incident edge name in mutations.
	EdgeIncident = "incident"
	// EdgeDiscussions holds the string denoting the discussions edge name in mutations.
	EdgeDiscussions = "discussions"
	// Table holds the table name of the retrospective in the database.
	Table = "retrospectives"
	// IncidentTable is the table that holds the incident relation/edge.
	IncidentTable = "retrospectives"
	// IncidentInverseTable is the table name for the Incident entity.
	// It exists in this package in order to avoid circular dependency with the "incident" package.
	IncidentInverseTable = "incidents"
	// IncidentColumn is the table column denoting the incident relation/edge.
	IncidentColumn = "incident_retrospective"
	// DiscussionsTable is the table that holds the discussions relation/edge.
	DiscussionsTable = "retrospective_discussions"
	// DiscussionsInverseTable is the table name for the RetrospectiveDiscussion entity.
	// It exists in this package in order to avoid circular dependency with the "retrospectivediscussion" package.
	DiscussionsInverseTable = "retrospective_discussions"
	// DiscussionsColumn is the table column denoting the discussions relation/edge.
	DiscussionsColumn = "retrospective_id"
)

// Columns holds all SQL columns for retrospective fields.
var Columns = []string{
	FieldID,
	FieldDocumentName,
	FieldType,
	FieldState,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "retrospectives"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"incident_retrospective",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeQuick Type = "quick"
	TypeFull  Type = "full"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeQuick, TypeFull:
		return nil
	default:
		return fmt.Errorf("retrospective: invalid enum value for type field: %q", _type)
	}
}

// State defines the type for the "state" enum field.
type State string

// State values.
const (
	StateDraft    State = "draft"
	StateInReview State = "in_review"
	StateMeeting  State = "meeting"
	StateClosed   State = "closed"
)

func (s State) String() string {
	return string(s)
}

// StateValidator is a validator for the "state" field enum values. It is called by the builders before save.
func StateValidator(s State) error {
	switch s {
	case StateDraft, StateInReview, StateMeeting, StateClosed:
		return nil
	default:
		return fmt.Errorf("retrospective: invalid enum value for state field: %q", s)
	}
}

// OrderOption defines the ordering options for the Retrospective queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDocumentName orders the results by the document_name field.
func ByDocumentName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDocumentName, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByIncidentField orders the results by incident field.
func ByIncidentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIncidentStep(), sql.OrderByField(field, opts...))
	}
}

// ByDiscussionsCount orders the results by discussions count.
func ByDiscussionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDiscussionsStep(), opts...)
	}
}

// ByDiscussions orders the results by discussions terms.
func ByDiscussions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDiscussionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newIncidentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IncidentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, IncidentTable, IncidentColumn),
	)
}
func newDiscussionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DiscussionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, DiscussionsTable, DiscussionsColumn),
	)
}
