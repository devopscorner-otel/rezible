// Code generated by ent, DO NOT EDIT.

package retrospective

import (
	"fmt"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the retrospective type in the database.
	Label = "retrospective"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldIncidentID holds the string denoting the incident_id field in the database.
	FieldIncidentID = "incident_id"
	// FieldSystemAnalysisID holds the string denoting the system_analysis_id field in the database.
	FieldSystemAnalysisID = "system_analysis_id"
	// FieldDocumentName holds the string denoting the document_name field in the database.
	FieldDocumentName = "document_name"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeIncident holds the string denoting the incident edge name in mutations.
	EdgeIncident = "incident"
	// EdgeComments holds the string denoting the comments edge name in mutations.
	EdgeComments = "comments"
	// EdgeSystemAnalysis holds the string denoting the system_analysis edge name in mutations.
	EdgeSystemAnalysis = "system_analysis"
	// Table holds the table name of the retrospective in the database.
	Table = "retrospectives"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "retrospectives"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// IncidentTable is the table that holds the incident relation/edge.
	IncidentTable = "retrospectives"
	// IncidentInverseTable is the table name for the Incident entity.
	// It exists in this package in order to avoid circular dependency with the "incident" package.
	IncidentInverseTable = "incidents"
	// IncidentColumn is the table column denoting the incident relation/edge.
	IncidentColumn = "incident_id"
	// CommentsTable is the table that holds the comments relation/edge.
	CommentsTable = "retrospective_comments"
	// CommentsInverseTable is the table name for the RetrospectiveComment entity.
	// It exists in this package in order to avoid circular dependency with the "retrospectivecomment" package.
	CommentsInverseTable = "retrospective_comments"
	// CommentsColumn is the table column denoting the comments relation/edge.
	CommentsColumn = "retrospective_id"
	// SystemAnalysisTable is the table that holds the system_analysis relation/edge.
	SystemAnalysisTable = "retrospectives"
	// SystemAnalysisInverseTable is the table name for the SystemAnalysis entity.
	// It exists in this package in order to avoid circular dependency with the "systemanalysis" package.
	SystemAnalysisInverseTable = "system_analyses"
	// SystemAnalysisColumn is the table column denoting the system_analysis relation/edge.
	SystemAnalysisColumn = "system_analysis_id"
)

// Columns holds all SQL columns for retrospective fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldIncidentID,
	FieldSystemAnalysisID,
	FieldDocumentName,
	FieldType,
	FieldState,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/rezible/rezible/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeSimple Type = "simple"
	TypeFull   Type = "full"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeSimple, TypeFull:
		return nil
	default:
		return fmt.Errorf("retrospective: invalid enum value for type field: %q", _type)
	}
}

// State defines the type for the "state" enum field.
type State string

// State values.
const (
	StateDraft    State = "draft"
	StateInReview State = "in_review"
	StateMeeting  State = "meeting"
	StateClosed   State = "closed"
)

func (s State) String() string {
	return string(s)
}

// StateValidator is a validator for the "state" field enum values. It is called by the builders before save.
func StateValidator(s State) error {
	switch s {
	case StateDraft, StateInReview, StateMeeting, StateClosed:
		return nil
	default:
		return fmt.Errorf("retrospective: invalid enum value for state field: %q", s)
	}
}

// OrderOption defines the ordering options for the Retrospective queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByIncidentID orders the results by the incident_id field.
func ByIncidentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIncidentID, opts...).ToFunc()
}

// BySystemAnalysisID orders the results by the system_analysis_id field.
func BySystemAnalysisID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSystemAnalysisID, opts...).ToFunc()
}

// ByDocumentName orders the results by the document_name field.
func ByDocumentName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDocumentName, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByIncidentField orders the results by incident field.
func ByIncidentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIncidentStep(), sql.OrderByField(field, opts...))
	}
}

// ByCommentsCount orders the results by comments count.
func ByCommentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCommentsStep(), opts...)
	}
}

// ByComments orders the results by comments terms.
func ByComments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCommentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySystemAnalysisField orders the results by system_analysis field.
func BySystemAnalysisField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSystemAnalysisStep(), sql.OrderByField(field, opts...))
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newIncidentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IncidentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, IncidentTable, IncidentColumn),
	)
}
func newCommentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CommentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, CommentsTable, CommentsColumn),
	)
}
func newSystemAnalysisStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SystemAnalysisInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, SystemAnalysisTable, SystemAnalysisColumn),
	)
}
