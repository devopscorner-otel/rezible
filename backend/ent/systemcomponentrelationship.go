// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/systemcomponent"
	"github.com/rezible/rezible/ent/systemcomponentrelationship"
	"github.com/rezible/rezible/ent/tenant"
)

// SystemComponentRelationship is the model entity for the SystemComponentRelationship schema.
type SystemComponentRelationship struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID int `json:"tenant_id,omitempty"`
	// ProviderID holds the value of the "provider_id" field.
	ProviderID string `json:"provider_id,omitempty"`
	// SourceID holds the value of the "source_id" field.
	SourceID uuid.UUID `json:"source_id,omitempty"`
	// TargetID holds the value of the "target_id" field.
	TargetID uuid.UUID `json:"target_id,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SystemComponentRelationshipQuery when eager-loading is set.
	Edges        SystemComponentRelationshipEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SystemComponentRelationshipEdges holds the relations/edges for other nodes in the graph.
type SystemComponentRelationshipEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Source holds the value of the source edge.
	Source *SystemComponent `json:"source,omitempty"`
	// Target holds the value of the target edge.
	Target *SystemComponent `json:"target,omitempty"`
	// SystemAnalyses holds the value of the system_analyses edge.
	SystemAnalyses []*SystemAnalysisRelationship `json:"system_analyses,omitempty"`
	// Hazards holds the value of the hazards edge.
	Hazards []*SystemHazard `json:"hazards,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SystemComponentRelationshipEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// SourceOrErr returns the Source value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SystemComponentRelationshipEdges) SourceOrErr() (*SystemComponent, error) {
	if e.Source != nil {
		return e.Source, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: systemcomponent.Label}
	}
	return nil, &NotLoadedError{edge: "source"}
}

// TargetOrErr returns the Target value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SystemComponentRelationshipEdges) TargetOrErr() (*SystemComponent, error) {
	if e.Target != nil {
		return e.Target, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: systemcomponent.Label}
	}
	return nil, &NotLoadedError{edge: "target"}
}

// SystemAnalysesOrErr returns the SystemAnalyses value or an error if the edge
// was not loaded in eager-loading.
func (e SystemComponentRelationshipEdges) SystemAnalysesOrErr() ([]*SystemAnalysisRelationship, error) {
	if e.loadedTypes[3] {
		return e.SystemAnalyses, nil
	}
	return nil, &NotLoadedError{edge: "system_analyses"}
}

// HazardsOrErr returns the Hazards value or an error if the edge
// was not loaded in eager-loading.
func (e SystemComponentRelationshipEdges) HazardsOrErr() ([]*SystemHazard, error) {
	if e.loadedTypes[4] {
		return e.Hazards, nil
	}
	return nil, &NotLoadedError{edge: "hazards"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SystemComponentRelationship) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case systemcomponentrelationship.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case systemcomponentrelationship.FieldProviderID, systemcomponentrelationship.FieldDescription:
			values[i] = new(sql.NullString)
		case systemcomponentrelationship.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case systemcomponentrelationship.FieldID, systemcomponentrelationship.FieldSourceID, systemcomponentrelationship.FieldTargetID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SystemComponentRelationship fields.
func (scr *SystemComponentRelationship) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case systemcomponentrelationship.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				scr.ID = *value
			}
		case systemcomponentrelationship.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				scr.TenantID = int(value.Int64)
			}
		case systemcomponentrelationship.FieldProviderID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_id", values[i])
			} else if value.Valid {
				scr.ProviderID = value.String
			}
		case systemcomponentrelationship.FieldSourceID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field source_id", values[i])
			} else if value != nil {
				scr.SourceID = *value
			}
		case systemcomponentrelationship.FieldTargetID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field target_id", values[i])
			} else if value != nil {
				scr.TargetID = *value
			}
		case systemcomponentrelationship.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				scr.Description = value.String
			}
		case systemcomponentrelationship.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				scr.CreatedAt = value.Time
			}
		default:
			scr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SystemComponentRelationship.
// This includes values selected through modifiers, order, etc.
func (scr *SystemComponentRelationship) Value(name string) (ent.Value, error) {
	return scr.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the SystemComponentRelationship entity.
func (scr *SystemComponentRelationship) QueryTenant() *TenantQuery {
	return NewSystemComponentRelationshipClient(scr.config).QueryTenant(scr)
}

// QuerySource queries the "source" edge of the SystemComponentRelationship entity.
func (scr *SystemComponentRelationship) QuerySource() *SystemComponentQuery {
	return NewSystemComponentRelationshipClient(scr.config).QuerySource(scr)
}

// QueryTarget queries the "target" edge of the SystemComponentRelationship entity.
func (scr *SystemComponentRelationship) QueryTarget() *SystemComponentQuery {
	return NewSystemComponentRelationshipClient(scr.config).QueryTarget(scr)
}

// QuerySystemAnalyses queries the "system_analyses" edge of the SystemComponentRelationship entity.
func (scr *SystemComponentRelationship) QuerySystemAnalyses() *SystemAnalysisRelationshipQuery {
	return NewSystemComponentRelationshipClient(scr.config).QuerySystemAnalyses(scr)
}

// QueryHazards queries the "hazards" edge of the SystemComponentRelationship entity.
func (scr *SystemComponentRelationship) QueryHazards() *SystemHazardQuery {
	return NewSystemComponentRelationshipClient(scr.config).QueryHazards(scr)
}

// Update returns a builder for updating this SystemComponentRelationship.
// Note that you need to call SystemComponentRelationship.Unwrap() before calling this method if this SystemComponentRelationship
// was returned from a transaction, and the transaction was committed or rolled back.
func (scr *SystemComponentRelationship) Update() *SystemComponentRelationshipUpdateOne {
	return NewSystemComponentRelationshipClient(scr.config).UpdateOne(scr)
}

// Unwrap unwraps the SystemComponentRelationship entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (scr *SystemComponentRelationship) Unwrap() *SystemComponentRelationship {
	_tx, ok := scr.config.driver.(*txDriver)
	if !ok {
		panic("ent: SystemComponentRelationship is not a transactional entity")
	}
	scr.config.driver = _tx.drv
	return scr
}

// String implements the fmt.Stringer.
func (scr *SystemComponentRelationship) String() string {
	var builder strings.Builder
	builder.WriteString("SystemComponentRelationship(")
	builder.WriteString(fmt.Sprintf("id=%v, ", scr.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", scr.TenantID))
	builder.WriteString(", ")
	builder.WriteString("provider_id=")
	builder.WriteString(scr.ProviderID)
	builder.WriteString(", ")
	builder.WriteString("source_id=")
	builder.WriteString(fmt.Sprintf("%v", scr.SourceID))
	builder.WriteString(", ")
	builder.WriteString("target_id=")
	builder.WriteString(fmt.Sprintf("%v", scr.TargetID))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(scr.Description)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(scr.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SystemComponentRelationships is a parsable slice of SystemComponentRelationship.
type SystemComponentRelationships []*SystemComponentRelationship
