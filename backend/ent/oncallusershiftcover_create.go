// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/twohundreds/rezible/ent/oncallusershift"
	"github.com/twohundreds/rezible/ent/oncallusershiftcover"
	"github.com/twohundreds/rezible/ent/user"
)

// OncallUserShiftCoverCreate is the builder for creating a OncallUserShiftCover entity.
type OncallUserShiftCoverCreate struct {
	config
	mutation *OncallUserShiftCoverMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUserID sets the "user_id" field.
func (ouscc *OncallUserShiftCoverCreate) SetUserID(u uuid.UUID) *OncallUserShiftCoverCreate {
	ouscc.mutation.SetUserID(u)
	return ouscc
}

// SetShiftID sets the "shift_id" field.
func (ouscc *OncallUserShiftCoverCreate) SetShiftID(u uuid.UUID) *OncallUserShiftCoverCreate {
	ouscc.mutation.SetShiftID(u)
	return ouscc
}

// SetStartAt sets the "start_at" field.
func (ouscc *OncallUserShiftCoverCreate) SetStartAt(t time.Time) *OncallUserShiftCoverCreate {
	ouscc.mutation.SetStartAt(t)
	return ouscc
}

// SetEndAt sets the "end_at" field.
func (ouscc *OncallUserShiftCoverCreate) SetEndAt(t time.Time) *OncallUserShiftCoverCreate {
	ouscc.mutation.SetEndAt(t)
	return ouscc
}

// SetProviderID sets the "provider_id" field.
func (ouscc *OncallUserShiftCoverCreate) SetProviderID(s string) *OncallUserShiftCoverCreate {
	ouscc.mutation.SetProviderID(s)
	return ouscc
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (ouscc *OncallUserShiftCoverCreate) SetNillableProviderID(s *string) *OncallUserShiftCoverCreate {
	if s != nil {
		ouscc.SetProviderID(*s)
	}
	return ouscc
}

// SetID sets the "id" field.
func (ouscc *OncallUserShiftCoverCreate) SetID(u uuid.UUID) *OncallUserShiftCoverCreate {
	ouscc.mutation.SetID(u)
	return ouscc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ouscc *OncallUserShiftCoverCreate) SetNillableID(u *uuid.UUID) *OncallUserShiftCoverCreate {
	if u != nil {
		ouscc.SetID(*u)
	}
	return ouscc
}

// SetUser sets the "user" edge to the User entity.
func (ouscc *OncallUserShiftCoverCreate) SetUser(u *User) *OncallUserShiftCoverCreate {
	return ouscc.SetUserID(u.ID)
}

// SetShift sets the "shift" edge to the OncallUserShift entity.
func (ouscc *OncallUserShiftCoverCreate) SetShift(o *OncallUserShift) *OncallUserShiftCoverCreate {
	return ouscc.SetShiftID(o.ID)
}

// Mutation returns the OncallUserShiftCoverMutation object of the builder.
func (ouscc *OncallUserShiftCoverCreate) Mutation() *OncallUserShiftCoverMutation {
	return ouscc.mutation
}

// Save creates the OncallUserShiftCover in the database.
func (ouscc *OncallUserShiftCoverCreate) Save(ctx context.Context) (*OncallUserShiftCover, error) {
	ouscc.defaults()
	return withHooks(ctx, ouscc.sqlSave, ouscc.mutation, ouscc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ouscc *OncallUserShiftCoverCreate) SaveX(ctx context.Context) *OncallUserShiftCover {
	v, err := ouscc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ouscc *OncallUserShiftCoverCreate) Exec(ctx context.Context) error {
	_, err := ouscc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouscc *OncallUserShiftCoverCreate) ExecX(ctx context.Context) {
	if err := ouscc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouscc *OncallUserShiftCoverCreate) defaults() {
	if _, ok := ouscc.mutation.ID(); !ok {
		v := oncallusershiftcover.DefaultID()
		ouscc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouscc *OncallUserShiftCoverCreate) check() error {
	if _, ok := ouscc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "OncallUserShiftCover.user_id"`)}
	}
	if _, ok := ouscc.mutation.ShiftID(); !ok {
		return &ValidationError{Name: "shift_id", err: errors.New(`ent: missing required field "OncallUserShiftCover.shift_id"`)}
	}
	if _, ok := ouscc.mutation.StartAt(); !ok {
		return &ValidationError{Name: "start_at", err: errors.New(`ent: missing required field "OncallUserShiftCover.start_at"`)}
	}
	if _, ok := ouscc.mutation.EndAt(); !ok {
		return &ValidationError{Name: "end_at", err: errors.New(`ent: missing required field "OncallUserShiftCover.end_at"`)}
	}
	if len(ouscc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "OncallUserShiftCover.user"`)}
	}
	if len(ouscc.mutation.ShiftIDs()) == 0 {
		return &ValidationError{Name: "shift", err: errors.New(`ent: missing required edge "OncallUserShiftCover.shift"`)}
	}
	return nil
}

func (ouscc *OncallUserShiftCoverCreate) sqlSave(ctx context.Context) (*OncallUserShiftCover, error) {
	if err := ouscc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ouscc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ouscc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ouscc.mutation.id = &_node.ID
	ouscc.mutation.done = true
	return _node, nil
}

func (ouscc *OncallUserShiftCoverCreate) createSpec() (*OncallUserShiftCover, *sqlgraph.CreateSpec) {
	var (
		_node = &OncallUserShiftCover{config: ouscc.config}
		_spec = sqlgraph.NewCreateSpec(oncallusershiftcover.Table, sqlgraph.NewFieldSpec(oncallusershiftcover.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = ouscc.conflict
	if id, ok := ouscc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ouscc.mutation.StartAt(); ok {
		_spec.SetField(oncallusershiftcover.FieldStartAt, field.TypeTime, value)
		_node.StartAt = value
	}
	if value, ok := ouscc.mutation.EndAt(); ok {
		_spec.SetField(oncallusershiftcover.FieldEndAt, field.TypeTime, value)
		_node.EndAt = value
	}
	if value, ok := ouscc.mutation.ProviderID(); ok {
		_spec.SetField(oncallusershiftcover.FieldProviderID, field.TypeString, value)
		_node.ProviderID = value
	}
	if nodes := ouscc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallusershiftcover.UserTable,
			Columns: []string{oncallusershiftcover.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ouscc.mutation.ShiftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oncallusershiftcover.ShiftTable,
			Columns: []string{oncallusershiftcover.ShiftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallusershift.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ShiftID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OncallUserShiftCover.Create().
//		SetUserID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OncallUserShiftCoverUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (ouscc *OncallUserShiftCoverCreate) OnConflict(opts ...sql.ConflictOption) *OncallUserShiftCoverUpsertOne {
	ouscc.conflict = opts
	return &OncallUserShiftCoverUpsertOne{
		create: ouscc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OncallUserShiftCover.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ouscc *OncallUserShiftCoverCreate) OnConflictColumns(columns ...string) *OncallUserShiftCoverUpsertOne {
	ouscc.conflict = append(ouscc.conflict, sql.ConflictColumns(columns...))
	return &OncallUserShiftCoverUpsertOne{
		create: ouscc,
	}
}

type (
	// OncallUserShiftCoverUpsertOne is the builder for "upsert"-ing
	//  one OncallUserShiftCover node.
	OncallUserShiftCoverUpsertOne struct {
		create *OncallUserShiftCoverCreate
	}

	// OncallUserShiftCoverUpsert is the "OnConflict" setter.
	OncallUserShiftCoverUpsert struct {
		*sql.UpdateSet
	}
)

// SetUserID sets the "user_id" field.
func (u *OncallUserShiftCoverUpsert) SetUserID(v uuid.UUID) *OncallUserShiftCoverUpsert {
	u.Set(oncallusershiftcover.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *OncallUserShiftCoverUpsert) UpdateUserID() *OncallUserShiftCoverUpsert {
	u.SetExcluded(oncallusershiftcover.FieldUserID)
	return u
}

// SetShiftID sets the "shift_id" field.
func (u *OncallUserShiftCoverUpsert) SetShiftID(v uuid.UUID) *OncallUserShiftCoverUpsert {
	u.Set(oncallusershiftcover.FieldShiftID, v)
	return u
}

// UpdateShiftID sets the "shift_id" field to the value that was provided on create.
func (u *OncallUserShiftCoverUpsert) UpdateShiftID() *OncallUserShiftCoverUpsert {
	u.SetExcluded(oncallusershiftcover.FieldShiftID)
	return u
}

// SetStartAt sets the "start_at" field.
func (u *OncallUserShiftCoverUpsert) SetStartAt(v time.Time) *OncallUserShiftCoverUpsert {
	u.Set(oncallusershiftcover.FieldStartAt, v)
	return u
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *OncallUserShiftCoverUpsert) UpdateStartAt() *OncallUserShiftCoverUpsert {
	u.SetExcluded(oncallusershiftcover.FieldStartAt)
	return u
}

// SetEndAt sets the "end_at" field.
func (u *OncallUserShiftCoverUpsert) SetEndAt(v time.Time) *OncallUserShiftCoverUpsert {
	u.Set(oncallusershiftcover.FieldEndAt, v)
	return u
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *OncallUserShiftCoverUpsert) UpdateEndAt() *OncallUserShiftCoverUpsert {
	u.SetExcluded(oncallusershiftcover.FieldEndAt)
	return u
}

// SetProviderID sets the "provider_id" field.
func (u *OncallUserShiftCoverUpsert) SetProviderID(v string) *OncallUserShiftCoverUpsert {
	u.Set(oncallusershiftcover.FieldProviderID, v)
	return u
}

// UpdateProviderID sets the "provider_id" field to the value that was provided on create.
func (u *OncallUserShiftCoverUpsert) UpdateProviderID() *OncallUserShiftCoverUpsert {
	u.SetExcluded(oncallusershiftcover.FieldProviderID)
	return u
}

// ClearProviderID clears the value of the "provider_id" field.
func (u *OncallUserShiftCoverUpsert) ClearProviderID() *OncallUserShiftCoverUpsert {
	u.SetNull(oncallusershiftcover.FieldProviderID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OncallUserShiftCover.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oncallusershiftcover.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OncallUserShiftCoverUpsertOne) UpdateNewValues() *OncallUserShiftCoverUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(oncallusershiftcover.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OncallUserShiftCover.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OncallUserShiftCoverUpsertOne) Ignore() *OncallUserShiftCoverUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OncallUserShiftCoverUpsertOne) DoNothing() *OncallUserShiftCoverUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OncallUserShiftCoverCreate.OnConflict
// documentation for more info.
func (u *OncallUserShiftCoverUpsertOne) Update(set func(*OncallUserShiftCoverUpsert)) *OncallUserShiftCoverUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OncallUserShiftCoverUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *OncallUserShiftCoverUpsertOne) SetUserID(v uuid.UUID) *OncallUserShiftCoverUpsertOne {
	return u.Update(func(s *OncallUserShiftCoverUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *OncallUserShiftCoverUpsertOne) UpdateUserID() *OncallUserShiftCoverUpsertOne {
	return u.Update(func(s *OncallUserShiftCoverUpsert) {
		s.UpdateUserID()
	})
}

// SetShiftID sets the "shift_id" field.
func (u *OncallUserShiftCoverUpsertOne) SetShiftID(v uuid.UUID) *OncallUserShiftCoverUpsertOne {
	return u.Update(func(s *OncallUserShiftCoverUpsert) {
		s.SetShiftID(v)
	})
}

// UpdateShiftID sets the "shift_id" field to the value that was provided on create.
func (u *OncallUserShiftCoverUpsertOne) UpdateShiftID() *OncallUserShiftCoverUpsertOne {
	return u.Update(func(s *OncallUserShiftCoverUpsert) {
		s.UpdateShiftID()
	})
}

// SetStartAt sets the "start_at" field.
func (u *OncallUserShiftCoverUpsertOne) SetStartAt(v time.Time) *OncallUserShiftCoverUpsertOne {
	return u.Update(func(s *OncallUserShiftCoverUpsert) {
		s.SetStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *OncallUserShiftCoverUpsertOne) UpdateStartAt() *OncallUserShiftCoverUpsertOne {
	return u.Update(func(s *OncallUserShiftCoverUpsert) {
		s.UpdateStartAt()
	})
}

// SetEndAt sets the "end_at" field.
func (u *OncallUserShiftCoverUpsertOne) SetEndAt(v time.Time) *OncallUserShiftCoverUpsertOne {
	return u.Update(func(s *OncallUserShiftCoverUpsert) {
		s.SetEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *OncallUserShiftCoverUpsertOne) UpdateEndAt() *OncallUserShiftCoverUpsertOne {
	return u.Update(func(s *OncallUserShiftCoverUpsert) {
		s.UpdateEndAt()
	})
}

// SetProviderID sets the "provider_id" field.
func (u *OncallUserShiftCoverUpsertOne) SetProviderID(v string) *OncallUserShiftCoverUpsertOne {
	return u.Update(func(s *OncallUserShiftCoverUpsert) {
		s.SetProviderID(v)
	})
}

// UpdateProviderID sets the "provider_id" field to the value that was provided on create.
func (u *OncallUserShiftCoverUpsertOne) UpdateProviderID() *OncallUserShiftCoverUpsertOne {
	return u.Update(func(s *OncallUserShiftCoverUpsert) {
		s.UpdateProviderID()
	})
}

// ClearProviderID clears the value of the "provider_id" field.
func (u *OncallUserShiftCoverUpsertOne) ClearProviderID() *OncallUserShiftCoverUpsertOne {
	return u.Update(func(s *OncallUserShiftCoverUpsert) {
		s.ClearProviderID()
	})
}

// Exec executes the query.
func (u *OncallUserShiftCoverUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OncallUserShiftCoverCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OncallUserShiftCoverUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OncallUserShiftCoverUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: OncallUserShiftCoverUpsertOne.ID is not supported by MySQL driver. Use OncallUserShiftCoverUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OncallUserShiftCoverUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OncallUserShiftCoverCreateBulk is the builder for creating many OncallUserShiftCover entities in bulk.
type OncallUserShiftCoverCreateBulk struct {
	config
	err      error
	builders []*OncallUserShiftCoverCreate
	conflict []sql.ConflictOption
}

// Save creates the OncallUserShiftCover entities in the database.
func (ousccb *OncallUserShiftCoverCreateBulk) Save(ctx context.Context) ([]*OncallUserShiftCover, error) {
	if ousccb.err != nil {
		return nil, ousccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ousccb.builders))
	nodes := make([]*OncallUserShiftCover, len(ousccb.builders))
	mutators := make([]Mutator, len(ousccb.builders))
	for i := range ousccb.builders {
		func(i int, root context.Context) {
			builder := ousccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OncallUserShiftCoverMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ousccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ousccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ousccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ousccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ousccb *OncallUserShiftCoverCreateBulk) SaveX(ctx context.Context) []*OncallUserShiftCover {
	v, err := ousccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ousccb *OncallUserShiftCoverCreateBulk) Exec(ctx context.Context) error {
	_, err := ousccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ousccb *OncallUserShiftCoverCreateBulk) ExecX(ctx context.Context) {
	if err := ousccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OncallUserShiftCover.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OncallUserShiftCoverUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (ousccb *OncallUserShiftCoverCreateBulk) OnConflict(opts ...sql.ConflictOption) *OncallUserShiftCoverUpsertBulk {
	ousccb.conflict = opts
	return &OncallUserShiftCoverUpsertBulk{
		create: ousccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OncallUserShiftCover.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ousccb *OncallUserShiftCoverCreateBulk) OnConflictColumns(columns ...string) *OncallUserShiftCoverUpsertBulk {
	ousccb.conflict = append(ousccb.conflict, sql.ConflictColumns(columns...))
	return &OncallUserShiftCoverUpsertBulk{
		create: ousccb,
	}
}

// OncallUserShiftCoverUpsertBulk is the builder for "upsert"-ing
// a bulk of OncallUserShiftCover nodes.
type OncallUserShiftCoverUpsertBulk struct {
	create *OncallUserShiftCoverCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OncallUserShiftCover.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oncallusershiftcover.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OncallUserShiftCoverUpsertBulk) UpdateNewValues() *OncallUserShiftCoverUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(oncallusershiftcover.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OncallUserShiftCover.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OncallUserShiftCoverUpsertBulk) Ignore() *OncallUserShiftCoverUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OncallUserShiftCoverUpsertBulk) DoNothing() *OncallUserShiftCoverUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OncallUserShiftCoverCreateBulk.OnConflict
// documentation for more info.
func (u *OncallUserShiftCoverUpsertBulk) Update(set func(*OncallUserShiftCoverUpsert)) *OncallUserShiftCoverUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OncallUserShiftCoverUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *OncallUserShiftCoverUpsertBulk) SetUserID(v uuid.UUID) *OncallUserShiftCoverUpsertBulk {
	return u.Update(func(s *OncallUserShiftCoverUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *OncallUserShiftCoverUpsertBulk) UpdateUserID() *OncallUserShiftCoverUpsertBulk {
	return u.Update(func(s *OncallUserShiftCoverUpsert) {
		s.UpdateUserID()
	})
}

// SetShiftID sets the "shift_id" field.
func (u *OncallUserShiftCoverUpsertBulk) SetShiftID(v uuid.UUID) *OncallUserShiftCoverUpsertBulk {
	return u.Update(func(s *OncallUserShiftCoverUpsert) {
		s.SetShiftID(v)
	})
}

// UpdateShiftID sets the "shift_id" field to the value that was provided on create.
func (u *OncallUserShiftCoverUpsertBulk) UpdateShiftID() *OncallUserShiftCoverUpsertBulk {
	return u.Update(func(s *OncallUserShiftCoverUpsert) {
		s.UpdateShiftID()
	})
}

// SetStartAt sets the "start_at" field.
func (u *OncallUserShiftCoverUpsertBulk) SetStartAt(v time.Time) *OncallUserShiftCoverUpsertBulk {
	return u.Update(func(s *OncallUserShiftCoverUpsert) {
		s.SetStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *OncallUserShiftCoverUpsertBulk) UpdateStartAt() *OncallUserShiftCoverUpsertBulk {
	return u.Update(func(s *OncallUserShiftCoverUpsert) {
		s.UpdateStartAt()
	})
}

// SetEndAt sets the "end_at" field.
func (u *OncallUserShiftCoverUpsertBulk) SetEndAt(v time.Time) *OncallUserShiftCoverUpsertBulk {
	return u.Update(func(s *OncallUserShiftCoverUpsert) {
		s.SetEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *OncallUserShiftCoverUpsertBulk) UpdateEndAt() *OncallUserShiftCoverUpsertBulk {
	return u.Update(func(s *OncallUserShiftCoverUpsert) {
		s.UpdateEndAt()
	})
}

// SetProviderID sets the "provider_id" field.
func (u *OncallUserShiftCoverUpsertBulk) SetProviderID(v string) *OncallUserShiftCoverUpsertBulk {
	return u.Update(func(s *OncallUserShiftCoverUpsert) {
		s.SetProviderID(v)
	})
}

// UpdateProviderID sets the "provider_id" field to the value that was provided on create.
func (u *OncallUserShiftCoverUpsertBulk) UpdateProviderID() *OncallUserShiftCoverUpsertBulk {
	return u.Update(func(s *OncallUserShiftCoverUpsert) {
		s.UpdateProviderID()
	})
}

// ClearProviderID clears the value of the "provider_id" field.
func (u *OncallUserShiftCoverUpsertBulk) ClearProviderID() *OncallUserShiftCoverUpsertBulk {
	return u.Update(func(s *OncallUserShiftCoverUpsert) {
		s.ClearProviderID()
	})
}

// Exec executes the query.
func (u *OncallUserShiftCoverUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OncallUserShiftCoverCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OncallUserShiftCoverCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OncallUserShiftCoverUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
