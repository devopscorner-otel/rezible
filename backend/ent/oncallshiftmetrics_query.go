// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/oncallshift"
	"github.com/rezible/rezible/ent/oncallshiftmetrics"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/tenant"
)

// OncallShiftMetricsQuery is the builder for querying OncallShiftMetrics entities.
type OncallShiftMetricsQuery struct {
	config
	ctx        *QueryContext
	order      []oncallshiftmetrics.OrderOption
	inters     []Interceptor
	predicates []predicate.OncallShiftMetrics
	withTenant *TenantQuery
	withShift  *OncallShiftQuery
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OncallShiftMetricsQuery builder.
func (osmq *OncallShiftMetricsQuery) Where(ps ...predicate.OncallShiftMetrics) *OncallShiftMetricsQuery {
	osmq.predicates = append(osmq.predicates, ps...)
	return osmq
}

// Limit the number of records to be returned by this query.
func (osmq *OncallShiftMetricsQuery) Limit(limit int) *OncallShiftMetricsQuery {
	osmq.ctx.Limit = &limit
	return osmq
}

// Offset to start from.
func (osmq *OncallShiftMetricsQuery) Offset(offset int) *OncallShiftMetricsQuery {
	osmq.ctx.Offset = &offset
	return osmq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (osmq *OncallShiftMetricsQuery) Unique(unique bool) *OncallShiftMetricsQuery {
	osmq.ctx.Unique = &unique
	return osmq
}

// Order specifies how the records should be ordered.
func (osmq *OncallShiftMetricsQuery) Order(o ...oncallshiftmetrics.OrderOption) *OncallShiftMetricsQuery {
	osmq.order = append(osmq.order, o...)
	return osmq
}

// QueryTenant chains the current query on the "tenant" edge.
func (osmq *OncallShiftMetricsQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: osmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := osmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := osmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(oncallshiftmetrics.Table, oncallshiftmetrics.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, oncallshiftmetrics.TenantTable, oncallshiftmetrics.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(osmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryShift chains the current query on the "shift" edge.
func (osmq *OncallShiftMetricsQuery) QueryShift() *OncallShiftQuery {
	query := (&OncallShiftClient{config: osmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := osmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := osmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(oncallshiftmetrics.Table, oncallshiftmetrics.FieldID, selector),
			sqlgraph.To(oncallshift.Table, oncallshift.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, oncallshiftmetrics.ShiftTable, oncallshiftmetrics.ShiftColumn),
		)
		fromU = sqlgraph.SetNeighbors(osmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first OncallShiftMetrics entity from the query.
// Returns a *NotFoundError when no OncallShiftMetrics was found.
func (osmq *OncallShiftMetricsQuery) First(ctx context.Context) (*OncallShiftMetrics, error) {
	nodes, err := osmq.Limit(1).All(setContextOp(ctx, osmq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{oncallshiftmetrics.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (osmq *OncallShiftMetricsQuery) FirstX(ctx context.Context) *OncallShiftMetrics {
	node, err := osmq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first OncallShiftMetrics ID from the query.
// Returns a *NotFoundError when no OncallShiftMetrics ID was found.
func (osmq *OncallShiftMetricsQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = osmq.Limit(1).IDs(setContextOp(ctx, osmq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{oncallshiftmetrics.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (osmq *OncallShiftMetricsQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := osmq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single OncallShiftMetrics entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one OncallShiftMetrics entity is found.
// Returns a *NotFoundError when no OncallShiftMetrics entities are found.
func (osmq *OncallShiftMetricsQuery) Only(ctx context.Context) (*OncallShiftMetrics, error) {
	nodes, err := osmq.Limit(2).All(setContextOp(ctx, osmq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{oncallshiftmetrics.Label}
	default:
		return nil, &NotSingularError{oncallshiftmetrics.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (osmq *OncallShiftMetricsQuery) OnlyX(ctx context.Context) *OncallShiftMetrics {
	node, err := osmq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only OncallShiftMetrics ID in the query.
// Returns a *NotSingularError when more than one OncallShiftMetrics ID is found.
// Returns a *NotFoundError when no entities are found.
func (osmq *OncallShiftMetricsQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = osmq.Limit(2).IDs(setContextOp(ctx, osmq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{oncallshiftmetrics.Label}
	default:
		err = &NotSingularError{oncallshiftmetrics.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (osmq *OncallShiftMetricsQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := osmq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OncallShiftMetricsSlice.
func (osmq *OncallShiftMetricsQuery) All(ctx context.Context) ([]*OncallShiftMetrics, error) {
	ctx = setContextOp(ctx, osmq.ctx, ent.OpQueryAll)
	if err := osmq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*OncallShiftMetrics, *OncallShiftMetricsQuery]()
	return withInterceptors[[]*OncallShiftMetrics](ctx, osmq, qr, osmq.inters)
}

// AllX is like All, but panics if an error occurs.
func (osmq *OncallShiftMetricsQuery) AllX(ctx context.Context) []*OncallShiftMetrics {
	nodes, err := osmq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of OncallShiftMetrics IDs.
func (osmq *OncallShiftMetricsQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if osmq.ctx.Unique == nil && osmq.path != nil {
		osmq.Unique(true)
	}
	ctx = setContextOp(ctx, osmq.ctx, ent.OpQueryIDs)
	if err = osmq.Select(oncallshiftmetrics.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (osmq *OncallShiftMetricsQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := osmq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (osmq *OncallShiftMetricsQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, osmq.ctx, ent.OpQueryCount)
	if err := osmq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, osmq, querierCount[*OncallShiftMetricsQuery](), osmq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (osmq *OncallShiftMetricsQuery) CountX(ctx context.Context) int {
	count, err := osmq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (osmq *OncallShiftMetricsQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, osmq.ctx, ent.OpQueryExist)
	switch _, err := osmq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (osmq *OncallShiftMetricsQuery) ExistX(ctx context.Context) bool {
	exist, err := osmq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OncallShiftMetricsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (osmq *OncallShiftMetricsQuery) Clone() *OncallShiftMetricsQuery {
	if osmq == nil {
		return nil
	}
	return &OncallShiftMetricsQuery{
		config:     osmq.config,
		ctx:        osmq.ctx.Clone(),
		order:      append([]oncallshiftmetrics.OrderOption{}, osmq.order...),
		inters:     append([]Interceptor{}, osmq.inters...),
		predicates: append([]predicate.OncallShiftMetrics{}, osmq.predicates...),
		withTenant: osmq.withTenant.Clone(),
		withShift:  osmq.withShift.Clone(),
		// clone intermediate query.
		sql:       osmq.sql.Clone(),
		path:      osmq.path,
		modifiers: append([]func(*sql.Selector){}, osmq.modifiers...),
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (osmq *OncallShiftMetricsQuery) WithTenant(opts ...func(*TenantQuery)) *OncallShiftMetricsQuery {
	query := (&TenantClient{config: osmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	osmq.withTenant = query
	return osmq
}

// WithShift tells the query-builder to eager-load the nodes that are connected to
// the "shift" edge. The optional arguments are used to configure the query builder of the edge.
func (osmq *OncallShiftMetricsQuery) WithShift(opts ...func(*OncallShiftQuery)) *OncallShiftMetricsQuery {
	query := (&OncallShiftClient{config: osmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	osmq.withShift = query
	return osmq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID int `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OncallShiftMetrics.Query().
//		GroupBy(oncallshiftmetrics.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (osmq *OncallShiftMetricsQuery) GroupBy(field string, fields ...string) *OncallShiftMetricsGroupBy {
	osmq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &OncallShiftMetricsGroupBy{build: osmq}
	grbuild.flds = &osmq.ctx.Fields
	grbuild.label = oncallshiftmetrics.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID int `json:"tenant_id,omitempty"`
//	}
//
//	client.OncallShiftMetrics.Query().
//		Select(oncallshiftmetrics.FieldTenantID).
//		Scan(ctx, &v)
func (osmq *OncallShiftMetricsQuery) Select(fields ...string) *OncallShiftMetricsSelect {
	osmq.ctx.Fields = append(osmq.ctx.Fields, fields...)
	sbuild := &OncallShiftMetricsSelect{OncallShiftMetricsQuery: osmq}
	sbuild.label = oncallshiftmetrics.Label
	sbuild.flds, sbuild.scan = &osmq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a OncallShiftMetricsSelect configured with the given aggregations.
func (osmq *OncallShiftMetricsQuery) Aggregate(fns ...AggregateFunc) *OncallShiftMetricsSelect {
	return osmq.Select().Aggregate(fns...)
}

func (osmq *OncallShiftMetricsQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range osmq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, osmq); err != nil {
				return err
			}
		}
	}
	for _, f := range osmq.ctx.Fields {
		if !oncallshiftmetrics.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if osmq.path != nil {
		prev, err := osmq.path(ctx)
		if err != nil {
			return err
		}
		osmq.sql = prev
	}
	if oncallshiftmetrics.Policy == nil {
		return errors.New("ent: uninitialized oncallshiftmetrics.Policy (forgotten import ent/runtime?)")
	}
	if err := oncallshiftmetrics.Policy.EvalQuery(ctx, osmq); err != nil {
		return err
	}
	return nil
}

func (osmq *OncallShiftMetricsQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*OncallShiftMetrics, error) {
	var (
		nodes       = []*OncallShiftMetrics{}
		_spec       = osmq.querySpec()
		loadedTypes = [2]bool{
			osmq.withTenant != nil,
			osmq.withShift != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*OncallShiftMetrics).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &OncallShiftMetrics{config: osmq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(osmq.modifiers) > 0 {
		_spec.Modifiers = osmq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, osmq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := osmq.withTenant; query != nil {
		if err := osmq.loadTenant(ctx, query, nodes, nil,
			func(n *OncallShiftMetrics, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := osmq.withShift; query != nil {
		if err := osmq.loadShift(ctx, query, nodes, nil,
			func(n *OncallShiftMetrics, e *OncallShift) { n.Edges.Shift = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (osmq *OncallShiftMetricsQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*OncallShiftMetrics, init func(*OncallShiftMetrics), assign func(*OncallShiftMetrics, *Tenant)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*OncallShiftMetrics)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (osmq *OncallShiftMetricsQuery) loadShift(ctx context.Context, query *OncallShiftQuery, nodes []*OncallShiftMetrics, init func(*OncallShiftMetrics), assign func(*OncallShiftMetrics, *OncallShift)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*OncallShiftMetrics)
	for i := range nodes {
		fk := nodes[i].ShiftID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(oncallshift.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "shift_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (osmq *OncallShiftMetricsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := osmq.querySpec()
	if len(osmq.modifiers) > 0 {
		_spec.Modifiers = osmq.modifiers
	}
	_spec.Node.Columns = osmq.ctx.Fields
	if len(osmq.ctx.Fields) > 0 {
		_spec.Unique = osmq.ctx.Unique != nil && *osmq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, osmq.driver, _spec)
}

func (osmq *OncallShiftMetricsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(oncallshiftmetrics.Table, oncallshiftmetrics.Columns, sqlgraph.NewFieldSpec(oncallshiftmetrics.FieldID, field.TypeUUID))
	_spec.From = osmq.sql
	if unique := osmq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if osmq.path != nil {
		_spec.Unique = true
	}
	if fields := osmq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oncallshiftmetrics.FieldID)
		for i := range fields {
			if fields[i] != oncallshiftmetrics.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if osmq.withTenant != nil {
			_spec.Node.AddColumnOnce(oncallshiftmetrics.FieldTenantID)
		}
		if osmq.withShift != nil {
			_spec.Node.AddColumnOnce(oncallshiftmetrics.FieldShiftID)
		}
	}
	if ps := osmq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := osmq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := osmq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := osmq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (osmq *OncallShiftMetricsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(osmq.driver.Dialect())
	t1 := builder.Table(oncallshiftmetrics.Table)
	columns := osmq.ctx.Fields
	if len(columns) == 0 {
		columns = oncallshiftmetrics.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if osmq.sql != nil {
		selector = osmq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if osmq.ctx.Unique != nil && *osmq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range osmq.modifiers {
		m(selector)
	}
	for _, p := range osmq.predicates {
		p(selector)
	}
	for _, p := range osmq.order {
		p(selector)
	}
	if offset := osmq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := osmq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (osmq *OncallShiftMetricsQuery) Modify(modifiers ...func(s *sql.Selector)) *OncallShiftMetricsSelect {
	osmq.modifiers = append(osmq.modifiers, modifiers...)
	return osmq.Select()
}

// OncallShiftMetricsGroupBy is the group-by builder for OncallShiftMetrics entities.
type OncallShiftMetricsGroupBy struct {
	selector
	build *OncallShiftMetricsQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (osmgb *OncallShiftMetricsGroupBy) Aggregate(fns ...AggregateFunc) *OncallShiftMetricsGroupBy {
	osmgb.fns = append(osmgb.fns, fns...)
	return osmgb
}

// Scan applies the selector query and scans the result into the given value.
func (osmgb *OncallShiftMetricsGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, osmgb.build.ctx, ent.OpQueryGroupBy)
	if err := osmgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OncallShiftMetricsQuery, *OncallShiftMetricsGroupBy](ctx, osmgb.build, osmgb, osmgb.build.inters, v)
}

func (osmgb *OncallShiftMetricsGroupBy) sqlScan(ctx context.Context, root *OncallShiftMetricsQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(osmgb.fns))
	for _, fn := range osmgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*osmgb.flds)+len(osmgb.fns))
		for _, f := range *osmgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*osmgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := osmgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// OncallShiftMetricsSelect is the builder for selecting fields of OncallShiftMetrics entities.
type OncallShiftMetricsSelect struct {
	*OncallShiftMetricsQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (osms *OncallShiftMetricsSelect) Aggregate(fns ...AggregateFunc) *OncallShiftMetricsSelect {
	osms.fns = append(osms.fns, fns...)
	return osms
}

// Scan applies the selector query and scans the result into the given value.
func (osms *OncallShiftMetricsSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, osms.ctx, ent.OpQuerySelect)
	if err := osms.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OncallShiftMetricsQuery, *OncallShiftMetricsSelect](ctx, osms.OncallShiftMetricsQuery, osms, osms.inters, v)
}

func (osms *OncallShiftMetricsSelect) sqlScan(ctx context.Context, root *OncallShiftMetricsQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(osms.fns))
	for _, fn := range osms.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*osms.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := osms.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (osms *OncallShiftMetricsSelect) Modify(modifiers ...func(s *sql.Selector)) *OncallShiftMetricsSelect {
	osms.modifiers = append(osms.modifiers, modifiers...)
	return osms
}
