// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/alert"
	"github.com/rezible/rezible/ent/oncallannotation"
	"github.com/rezible/rezible/ent/oncallevent"
	"github.com/rezible/rezible/ent/oncallroster"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/tenant"
)

// OncallEventQuery is the builder for querying OncallEvent entities.
type OncallEventQuery struct {
	config
	ctx             *QueryContext
	order           []oncallevent.OrderOption
	inters          []Interceptor
	predicates      []predicate.OncallEvent
	withTenant      *TenantQuery
	withRoster      *OncallRosterQuery
	withAlert       *AlertQuery
	withAnnotations *OncallAnnotationQuery
	modifiers       []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OncallEventQuery builder.
func (oeq *OncallEventQuery) Where(ps ...predicate.OncallEvent) *OncallEventQuery {
	oeq.predicates = append(oeq.predicates, ps...)
	return oeq
}

// Limit the number of records to be returned by this query.
func (oeq *OncallEventQuery) Limit(limit int) *OncallEventQuery {
	oeq.ctx.Limit = &limit
	return oeq
}

// Offset to start from.
func (oeq *OncallEventQuery) Offset(offset int) *OncallEventQuery {
	oeq.ctx.Offset = &offset
	return oeq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (oeq *OncallEventQuery) Unique(unique bool) *OncallEventQuery {
	oeq.ctx.Unique = &unique
	return oeq
}

// Order specifies how the records should be ordered.
func (oeq *OncallEventQuery) Order(o ...oncallevent.OrderOption) *OncallEventQuery {
	oeq.order = append(oeq.order, o...)
	return oeq
}

// QueryTenant chains the current query on the "tenant" edge.
func (oeq *OncallEventQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: oeq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oeq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oeq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(oncallevent.Table, oncallevent.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, oncallevent.TenantTable, oncallevent.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(oeq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRoster chains the current query on the "roster" edge.
func (oeq *OncallEventQuery) QueryRoster() *OncallRosterQuery {
	query := (&OncallRosterClient{config: oeq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oeq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oeq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(oncallevent.Table, oncallevent.FieldID, selector),
			sqlgraph.To(oncallroster.Table, oncallroster.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, oncallevent.RosterTable, oncallevent.RosterColumn),
		)
		fromU = sqlgraph.SetNeighbors(oeq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAlert chains the current query on the "alert" edge.
func (oeq *OncallEventQuery) QueryAlert() *AlertQuery {
	query := (&AlertClient{config: oeq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oeq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oeq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(oncallevent.Table, oncallevent.FieldID, selector),
			sqlgraph.To(alert.Table, alert.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, oncallevent.AlertTable, oncallevent.AlertColumn),
		)
		fromU = sqlgraph.SetNeighbors(oeq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAnnotations chains the current query on the "annotations" edge.
func (oeq *OncallEventQuery) QueryAnnotations() *OncallAnnotationQuery {
	query := (&OncallAnnotationClient{config: oeq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oeq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oeq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(oncallevent.Table, oncallevent.FieldID, selector),
			sqlgraph.To(oncallannotation.Table, oncallannotation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, oncallevent.AnnotationsTable, oncallevent.AnnotationsColumn),
		)
		fromU = sqlgraph.SetNeighbors(oeq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first OncallEvent entity from the query.
// Returns a *NotFoundError when no OncallEvent was found.
func (oeq *OncallEventQuery) First(ctx context.Context) (*OncallEvent, error) {
	nodes, err := oeq.Limit(1).All(setContextOp(ctx, oeq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{oncallevent.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (oeq *OncallEventQuery) FirstX(ctx context.Context) *OncallEvent {
	node, err := oeq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first OncallEvent ID from the query.
// Returns a *NotFoundError when no OncallEvent ID was found.
func (oeq *OncallEventQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = oeq.Limit(1).IDs(setContextOp(ctx, oeq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{oncallevent.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (oeq *OncallEventQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := oeq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single OncallEvent entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one OncallEvent entity is found.
// Returns a *NotFoundError when no OncallEvent entities are found.
func (oeq *OncallEventQuery) Only(ctx context.Context) (*OncallEvent, error) {
	nodes, err := oeq.Limit(2).All(setContextOp(ctx, oeq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{oncallevent.Label}
	default:
		return nil, &NotSingularError{oncallevent.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (oeq *OncallEventQuery) OnlyX(ctx context.Context) *OncallEvent {
	node, err := oeq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only OncallEvent ID in the query.
// Returns a *NotSingularError when more than one OncallEvent ID is found.
// Returns a *NotFoundError when no entities are found.
func (oeq *OncallEventQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = oeq.Limit(2).IDs(setContextOp(ctx, oeq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{oncallevent.Label}
	default:
		err = &NotSingularError{oncallevent.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (oeq *OncallEventQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := oeq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OncallEvents.
func (oeq *OncallEventQuery) All(ctx context.Context) ([]*OncallEvent, error) {
	ctx = setContextOp(ctx, oeq.ctx, ent.OpQueryAll)
	if err := oeq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*OncallEvent, *OncallEventQuery]()
	return withInterceptors[[]*OncallEvent](ctx, oeq, qr, oeq.inters)
}

// AllX is like All, but panics if an error occurs.
func (oeq *OncallEventQuery) AllX(ctx context.Context) []*OncallEvent {
	nodes, err := oeq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of OncallEvent IDs.
func (oeq *OncallEventQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if oeq.ctx.Unique == nil && oeq.path != nil {
		oeq.Unique(true)
	}
	ctx = setContextOp(ctx, oeq.ctx, ent.OpQueryIDs)
	if err = oeq.Select(oncallevent.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (oeq *OncallEventQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := oeq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (oeq *OncallEventQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, oeq.ctx, ent.OpQueryCount)
	if err := oeq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, oeq, querierCount[*OncallEventQuery](), oeq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (oeq *OncallEventQuery) CountX(ctx context.Context) int {
	count, err := oeq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (oeq *OncallEventQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, oeq.ctx, ent.OpQueryExist)
	switch _, err := oeq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (oeq *OncallEventQuery) ExistX(ctx context.Context) bool {
	exist, err := oeq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OncallEventQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (oeq *OncallEventQuery) Clone() *OncallEventQuery {
	if oeq == nil {
		return nil
	}
	return &OncallEventQuery{
		config:          oeq.config,
		ctx:             oeq.ctx.Clone(),
		order:           append([]oncallevent.OrderOption{}, oeq.order...),
		inters:          append([]Interceptor{}, oeq.inters...),
		predicates:      append([]predicate.OncallEvent{}, oeq.predicates...),
		withTenant:      oeq.withTenant.Clone(),
		withRoster:      oeq.withRoster.Clone(),
		withAlert:       oeq.withAlert.Clone(),
		withAnnotations: oeq.withAnnotations.Clone(),
		// clone intermediate query.
		sql:       oeq.sql.Clone(),
		path:      oeq.path,
		modifiers: append([]func(*sql.Selector){}, oeq.modifiers...),
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (oeq *OncallEventQuery) WithTenant(opts ...func(*TenantQuery)) *OncallEventQuery {
	query := (&TenantClient{config: oeq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oeq.withTenant = query
	return oeq
}

// WithRoster tells the query-builder to eager-load the nodes that are connected to
// the "roster" edge. The optional arguments are used to configure the query builder of the edge.
func (oeq *OncallEventQuery) WithRoster(opts ...func(*OncallRosterQuery)) *OncallEventQuery {
	query := (&OncallRosterClient{config: oeq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oeq.withRoster = query
	return oeq
}

// WithAlert tells the query-builder to eager-load the nodes that are connected to
// the "alert" edge. The optional arguments are used to configure the query builder of the edge.
func (oeq *OncallEventQuery) WithAlert(opts ...func(*AlertQuery)) *OncallEventQuery {
	query := (&AlertClient{config: oeq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oeq.withAlert = query
	return oeq
}

// WithAnnotations tells the query-builder to eager-load the nodes that are connected to
// the "annotations" edge. The optional arguments are used to configure the query builder of the edge.
func (oeq *OncallEventQuery) WithAnnotations(opts ...func(*OncallAnnotationQuery)) *OncallEventQuery {
	query := (&OncallAnnotationClient{config: oeq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oeq.withAnnotations = query
	return oeq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID int `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OncallEvent.Query().
//		GroupBy(oncallevent.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (oeq *OncallEventQuery) GroupBy(field string, fields ...string) *OncallEventGroupBy {
	oeq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &OncallEventGroupBy{build: oeq}
	grbuild.flds = &oeq.ctx.Fields
	grbuild.label = oncallevent.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID int `json:"tenant_id,omitempty"`
//	}
//
//	client.OncallEvent.Query().
//		Select(oncallevent.FieldTenantID).
//		Scan(ctx, &v)
func (oeq *OncallEventQuery) Select(fields ...string) *OncallEventSelect {
	oeq.ctx.Fields = append(oeq.ctx.Fields, fields...)
	sbuild := &OncallEventSelect{OncallEventQuery: oeq}
	sbuild.label = oncallevent.Label
	sbuild.flds, sbuild.scan = &oeq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a OncallEventSelect configured with the given aggregations.
func (oeq *OncallEventQuery) Aggregate(fns ...AggregateFunc) *OncallEventSelect {
	return oeq.Select().Aggregate(fns...)
}

func (oeq *OncallEventQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range oeq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, oeq); err != nil {
				return err
			}
		}
	}
	for _, f := range oeq.ctx.Fields {
		if !oncallevent.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if oeq.path != nil {
		prev, err := oeq.path(ctx)
		if err != nil {
			return err
		}
		oeq.sql = prev
	}
	if oncallevent.Policy == nil {
		return errors.New("ent: uninitialized oncallevent.Policy (forgotten import ent/runtime?)")
	}
	if err := oncallevent.Policy.EvalQuery(ctx, oeq); err != nil {
		return err
	}
	return nil
}

func (oeq *OncallEventQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*OncallEvent, error) {
	var (
		nodes       = []*OncallEvent{}
		_spec       = oeq.querySpec()
		loadedTypes = [4]bool{
			oeq.withTenant != nil,
			oeq.withRoster != nil,
			oeq.withAlert != nil,
			oeq.withAnnotations != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*OncallEvent).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &OncallEvent{config: oeq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(oeq.modifiers) > 0 {
		_spec.Modifiers = oeq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, oeq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := oeq.withTenant; query != nil {
		if err := oeq.loadTenant(ctx, query, nodes, nil,
			func(n *OncallEvent, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := oeq.withRoster; query != nil {
		if err := oeq.loadRoster(ctx, query, nodes, nil,
			func(n *OncallEvent, e *OncallRoster) { n.Edges.Roster = e }); err != nil {
			return nil, err
		}
	}
	if query := oeq.withAlert; query != nil {
		if err := oeq.loadAlert(ctx, query, nodes, nil,
			func(n *OncallEvent, e *Alert) { n.Edges.Alert = e }); err != nil {
			return nil, err
		}
	}
	if query := oeq.withAnnotations; query != nil {
		if err := oeq.loadAnnotations(ctx, query, nodes,
			func(n *OncallEvent) { n.Edges.Annotations = []*OncallAnnotation{} },
			func(n *OncallEvent, e *OncallAnnotation) { n.Edges.Annotations = append(n.Edges.Annotations, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (oeq *OncallEventQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*OncallEvent, init func(*OncallEvent), assign func(*OncallEvent, *Tenant)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*OncallEvent)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (oeq *OncallEventQuery) loadRoster(ctx context.Context, query *OncallRosterQuery, nodes []*OncallEvent, init func(*OncallEvent), assign func(*OncallEvent, *OncallRoster)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*OncallEvent)
	for i := range nodes {
		fk := nodes[i].RosterID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(oncallroster.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "roster_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (oeq *OncallEventQuery) loadAlert(ctx context.Context, query *AlertQuery, nodes []*OncallEvent, init func(*OncallEvent), assign func(*OncallEvent, *Alert)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*OncallEvent)
	for i := range nodes {
		fk := nodes[i].AlertID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(alert.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "alert_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (oeq *OncallEventQuery) loadAnnotations(ctx context.Context, query *OncallAnnotationQuery, nodes []*OncallEvent, init func(*OncallEvent), assign func(*OncallEvent, *OncallAnnotation)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*OncallEvent)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(oncallannotation.FieldEventID)
	}
	query.Where(predicate.OncallAnnotation(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(oncallevent.AnnotationsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.EventID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "event_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (oeq *OncallEventQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := oeq.querySpec()
	if len(oeq.modifiers) > 0 {
		_spec.Modifiers = oeq.modifiers
	}
	_spec.Node.Columns = oeq.ctx.Fields
	if len(oeq.ctx.Fields) > 0 {
		_spec.Unique = oeq.ctx.Unique != nil && *oeq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, oeq.driver, _spec)
}

func (oeq *OncallEventQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(oncallevent.Table, oncallevent.Columns, sqlgraph.NewFieldSpec(oncallevent.FieldID, field.TypeUUID))
	_spec.From = oeq.sql
	if unique := oeq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if oeq.path != nil {
		_spec.Unique = true
	}
	if fields := oeq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oncallevent.FieldID)
		for i := range fields {
			if fields[i] != oncallevent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if oeq.withTenant != nil {
			_spec.Node.AddColumnOnce(oncallevent.FieldTenantID)
		}
		if oeq.withRoster != nil {
			_spec.Node.AddColumnOnce(oncallevent.FieldRosterID)
		}
		if oeq.withAlert != nil {
			_spec.Node.AddColumnOnce(oncallevent.FieldAlertID)
		}
	}
	if ps := oeq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := oeq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := oeq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := oeq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (oeq *OncallEventQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(oeq.driver.Dialect())
	t1 := builder.Table(oncallevent.Table)
	columns := oeq.ctx.Fields
	if len(columns) == 0 {
		columns = oncallevent.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if oeq.sql != nil {
		selector = oeq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if oeq.ctx.Unique != nil && *oeq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range oeq.modifiers {
		m(selector)
	}
	for _, p := range oeq.predicates {
		p(selector)
	}
	for _, p := range oeq.order {
		p(selector)
	}
	if offset := oeq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := oeq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (oeq *OncallEventQuery) Modify(modifiers ...func(s *sql.Selector)) *OncallEventSelect {
	oeq.modifiers = append(oeq.modifiers, modifiers...)
	return oeq.Select()
}

// OncallEventGroupBy is the group-by builder for OncallEvent entities.
type OncallEventGroupBy struct {
	selector
	build *OncallEventQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (oegb *OncallEventGroupBy) Aggregate(fns ...AggregateFunc) *OncallEventGroupBy {
	oegb.fns = append(oegb.fns, fns...)
	return oegb
}

// Scan applies the selector query and scans the result into the given value.
func (oegb *OncallEventGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, oegb.build.ctx, ent.OpQueryGroupBy)
	if err := oegb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OncallEventQuery, *OncallEventGroupBy](ctx, oegb.build, oegb, oegb.build.inters, v)
}

func (oegb *OncallEventGroupBy) sqlScan(ctx context.Context, root *OncallEventQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(oegb.fns))
	for _, fn := range oegb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*oegb.flds)+len(oegb.fns))
		for _, f := range *oegb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*oegb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := oegb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// OncallEventSelect is the builder for selecting fields of OncallEvent entities.
type OncallEventSelect struct {
	*OncallEventQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (oes *OncallEventSelect) Aggregate(fns ...AggregateFunc) *OncallEventSelect {
	oes.fns = append(oes.fns, fns...)
	return oes
}

// Scan applies the selector query and scans the result into the given value.
func (oes *OncallEventSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, oes.ctx, ent.OpQuerySelect)
	if err := oes.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OncallEventQuery, *OncallEventSelect](ctx, oes.OncallEventQuery, oes, oes.inters, v)
}

func (oes *OncallEventSelect) sqlScan(ctx context.Context, root *OncallEventQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(oes.fns))
	for _, fn := range oes.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*oes.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := oes.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (oes *OncallEventSelect) Modify(modifiers ...func(s *sql.Selector)) *OncallEventSelect {
	oes.modifiers = append(oes.modifiers, modifiers...)
	return oes
}
