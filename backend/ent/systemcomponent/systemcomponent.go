// Code generated by ent, DO NOT EDIT.

package systemcomponent

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the systemcomponent type in the database.
	Label = "system_component"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldProperties holds the string denoting the properties field in the database.
	FieldProperties = "properties"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeAnalyses holds the string denoting the analyses edge name in mutations.
	EdgeAnalyses = "analyses"
	// EdgeRelated holds the string denoting the related edge name in mutations.
	EdgeRelated = "related"
	// EdgeEvents holds the string denoting the events edge name in mutations.
	EdgeEvents = "events"
	// EdgeConstraints holds the string denoting the constraints edge name in mutations.
	EdgeConstraints = "constraints"
	// EdgeControls holds the string denoting the controls edge name in mutations.
	EdgeControls = "controls"
	// EdgeSignals holds the string denoting the signals edge name in mutations.
	EdgeSignals = "signals"
	// EdgeAnalysisComponents holds the string denoting the analysis_components edge name in mutations.
	EdgeAnalysisComponents = "analysis_components"
	// EdgeRelationships holds the string denoting the relationships edge name in mutations.
	EdgeRelationships = "relationships"
	// EdgeEventComponents holds the string denoting the event_components edge name in mutations.
	EdgeEventComponents = "event_components"
	// Table holds the table name of the systemcomponent in the database.
	Table = "system_components"
	// AnalysesTable is the table that holds the analyses relation/edge. The primary key declared below.
	AnalysesTable = "system_analysis_components"
	// AnalysesInverseTable is the table name for the SystemAnalysis entity.
	// It exists in this package in order to avoid circular dependency with the "systemanalysis" package.
	AnalysesInverseTable = "system_analyses"
	// RelatedTable is the table that holds the related relation/edge. The primary key declared below.
	RelatedTable = "system_relationships"
	// EventsTable is the table that holds the events relation/edge. The primary key declared below.
	EventsTable = "incident_event_system_components"
	// EventsInverseTable is the table name for the IncidentEvent entity.
	// It exists in this package in order to avoid circular dependency with the "incidentevent" package.
	EventsInverseTable = "incident_events"
	// ConstraintsTable is the table that holds the constraints relation/edge.
	ConstraintsTable = "system_component_constraints"
	// ConstraintsInverseTable is the table name for the SystemComponentConstraint entity.
	// It exists in this package in order to avoid circular dependency with the "systemcomponentconstraint" package.
	ConstraintsInverseTable = "system_component_constraints"
	// ConstraintsColumn is the table column denoting the constraints relation/edge.
	ConstraintsColumn = "component_id"
	// ControlsTable is the table that holds the controls relation/edge.
	ControlsTable = "system_component_controls"
	// ControlsInverseTable is the table name for the SystemComponentControl entity.
	// It exists in this package in order to avoid circular dependency with the "systemcomponentcontrol" package.
	ControlsInverseTable = "system_component_controls"
	// ControlsColumn is the table column denoting the controls relation/edge.
	ControlsColumn = "component_id"
	// SignalsTable is the table that holds the signals relation/edge.
	SignalsTable = "system_component_signals"
	// SignalsInverseTable is the table name for the SystemComponentSignal entity.
	// It exists in this package in order to avoid circular dependency with the "systemcomponentsignal" package.
	SignalsInverseTable = "system_component_signals"
	// SignalsColumn is the table column denoting the signals relation/edge.
	SignalsColumn = "component_id"
	// AnalysisComponentsTable is the table that holds the analysis_components relation/edge.
	AnalysisComponentsTable = "system_analysis_components"
	// AnalysisComponentsInverseTable is the table name for the SystemAnalysisComponent entity.
	// It exists in this package in order to avoid circular dependency with the "systemanalysiscomponent" package.
	AnalysisComponentsInverseTable = "system_analysis_components"
	// AnalysisComponentsColumn is the table column denoting the analysis_components relation/edge.
	AnalysisComponentsColumn = "component_id"
	// RelationshipsTable is the table that holds the relationships relation/edge.
	RelationshipsTable = "system_relationships"
	// RelationshipsInverseTable is the table name for the SystemRelationship entity.
	// It exists in this package in order to avoid circular dependency with the "systemrelationship" package.
	RelationshipsInverseTable = "system_relationships"
	// RelationshipsColumn is the table column denoting the relationships relation/edge.
	RelationshipsColumn = "source_component_id"
	// EventComponentsTable is the table that holds the event_components relation/edge.
	EventComponentsTable = "incident_event_system_components"
	// EventComponentsInverseTable is the table name for the IncidentEventSystemComponent entity.
	// It exists in this package in order to avoid circular dependency with the "incidenteventsystemcomponent" package.
	EventComponentsInverseTable = "incident_event_system_components"
	// EventComponentsColumn is the table column denoting the event_components relation/edge.
	EventComponentsColumn = "system_component_id"
)

// Columns holds all SQL columns for systemcomponent fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldType,
	FieldDescription,
	FieldProperties,
	FieldCreatedAt,
	FieldUpdatedAt,
}

var (
	// AnalysesPrimaryKey and AnalysesColumn2 are the table columns denoting the
	// primary key for the analyses relation (M2M).
	AnalysesPrimaryKey = []string{"component_id", "analysis_id"}
	// RelatedPrimaryKey and RelatedColumn2 are the table columns denoting the
	// primary key for the related relation (M2M).
	RelatedPrimaryKey = []string{"source_component_id", "target_component_id"}
	// EventsPrimaryKey and EventsColumn2 are the table columns denoting the
	// primary key for the events relation (M2M).
	EventsPrimaryKey = []string{"incident_event_id", "system_component_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeService         Type = "service"
	TypeControl         Type = "control"
	TypeFeedback        Type = "feedback"
	TypeInterface       Type = "interface"
	TypeHumanController Type = "human_controller"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeService, TypeControl, TypeFeedback, TypeInterface, TypeHumanController:
		return nil
	default:
		return fmt.Errorf("systemcomponent: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the SystemComponent queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByAnalysesCount orders the results by analyses count.
func ByAnalysesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAnalysesStep(), opts...)
	}
}

// ByAnalyses orders the results by analyses terms.
func ByAnalyses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAnalysesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRelatedCount orders the results by related count.
func ByRelatedCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRelatedStep(), opts...)
	}
}

// ByRelated orders the results by related terms.
func ByRelated(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRelatedStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEventsCount orders the results by events count.
func ByEventsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEventsStep(), opts...)
	}
}

// ByEvents orders the results by events terms.
func ByEvents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByConstraintsCount orders the results by constraints count.
func ByConstraintsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newConstraintsStep(), opts...)
	}
}

// ByConstraints orders the results by constraints terms.
func ByConstraints(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newConstraintsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByControlsCount orders the results by controls count.
func ByControlsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newControlsStep(), opts...)
	}
}

// ByControls orders the results by controls terms.
func ByControls(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newControlsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySignalsCount orders the results by signals count.
func BySignalsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSignalsStep(), opts...)
	}
}

// BySignals orders the results by signals terms.
func BySignals(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSignalsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAnalysisComponentsCount orders the results by analysis_components count.
func ByAnalysisComponentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAnalysisComponentsStep(), opts...)
	}
}

// ByAnalysisComponents orders the results by analysis_components terms.
func ByAnalysisComponents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAnalysisComponentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRelationshipsCount orders the results by relationships count.
func ByRelationshipsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRelationshipsStep(), opts...)
	}
}

// ByRelationships orders the results by relationships terms.
func ByRelationships(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRelationshipsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEventComponentsCount orders the results by event_components count.
func ByEventComponentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEventComponentsStep(), opts...)
	}
}

// ByEventComponents orders the results by event_components terms.
func ByEventComponents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventComponentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAnalysesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AnalysesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, AnalysesTable, AnalysesPrimaryKey...),
	)
}
func newRelatedStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, RelatedTable, RelatedPrimaryKey...),
	)
}
func newEventsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, EventsTable, EventsPrimaryKey...),
	)
}
func newConstraintsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ConstraintsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ConstraintsTable, ConstraintsColumn),
	)
}
func newControlsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ControlsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ControlsTable, ControlsColumn),
	)
}
func newSignalsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SignalsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, SignalsTable, SignalsColumn),
	)
}
func newAnalysisComponentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AnalysisComponentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, AnalysisComponentsTable, AnalysisComponentsColumn),
	)
}
func newRelationshipsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RelationshipsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, RelationshipsTable, RelationshipsColumn),
	)
}
func newEventComponentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventComponentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, EventComponentsTable, EventComponentsColumn),
	)
}
