// Code generated by ent, DO NOT EDIT.

package systemcomponent

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the systemcomponent type in the database.
	Label = "system_component"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldProperties holds the string denoting the properties field in the database.
	FieldProperties = "properties"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeParent holds the string denoting the parent edge name in mutations.
	EdgeParent = "parent"
	// EdgeChildren holds the string denoting the children edge name in mutations.
	EdgeChildren = "children"
	// EdgeControls holds the string denoting the controls edge name in mutations.
	EdgeControls = "controls"
	// EdgeFeedbackTo holds the string denoting the feedback_to edge name in mutations.
	EdgeFeedbackTo = "feedback_to"
	// EdgeIncidents holds the string denoting the incidents edge name in mutations.
	EdgeIncidents = "incidents"
	// EdgeEvents holds the string denoting the events edge name in mutations.
	EdgeEvents = "events"
	// EdgeControlRelationships holds the string denoting the control_relationships edge name in mutations.
	EdgeControlRelationships = "control_relationships"
	// EdgeFeedbackRelationships holds the string denoting the feedback_relationships edge name in mutations.
	EdgeFeedbackRelationships = "feedback_relationships"
	// EdgeIncidentSystemComponents holds the string denoting the incident_system_components edge name in mutations.
	EdgeIncidentSystemComponents = "incident_system_components"
	// EdgeEventComponents holds the string denoting the event_components edge name in mutations.
	EdgeEventComponents = "event_components"
	// Table holds the table name of the systemcomponent in the database.
	Table = "system_components"
	// ParentTable is the table that holds the parent relation/edge.
	ParentTable = "system_components"
	// ParentColumn is the table column denoting the parent relation/edge.
	ParentColumn = "system_component_children"
	// ChildrenTable is the table that holds the children relation/edge.
	ChildrenTable = "system_components"
	// ChildrenColumn is the table column denoting the children relation/edge.
	ChildrenColumn = "system_component_children"
	// ControlsTable is the table that holds the controls relation/edge. The primary key declared below.
	ControlsTable = "system_component_control_relationships"
	// FeedbackToTable is the table that holds the feedback_to relation/edge. The primary key declared below.
	FeedbackToTable = "system_component_feedback_relationships"
	// IncidentsTable is the table that holds the incidents relation/edge. The primary key declared below.
	IncidentsTable = "incident_system_components"
	// IncidentsInverseTable is the table name for the Incident entity.
	// It exists in this package in order to avoid circular dependency with the "incident" package.
	IncidentsInverseTable = "incidents"
	// EventsTable is the table that holds the events relation/edge. The primary key declared below.
	EventsTable = "incident_event_system_components"
	// EventsInverseTable is the table name for the IncidentEvent entity.
	// It exists in this package in order to avoid circular dependency with the "incidentevent" package.
	EventsInverseTable = "incident_events"
	// ControlRelationshipsTable is the table that holds the control_relationships relation/edge.
	ControlRelationshipsTable = "system_component_control_relationships"
	// ControlRelationshipsInverseTable is the table name for the SystemComponentControlRelationship entity.
	// It exists in this package in order to avoid circular dependency with the "systemcomponentcontrolrelationship" package.
	ControlRelationshipsInverseTable = "system_component_control_relationships"
	// ControlRelationshipsColumn is the table column denoting the control_relationships relation/edge.
	ControlRelationshipsColumn = "controller_id"
	// FeedbackRelationshipsTable is the table that holds the feedback_relationships relation/edge.
	FeedbackRelationshipsTable = "system_component_feedback_relationships"
	// FeedbackRelationshipsInverseTable is the table name for the SystemComponentFeedbackRelationship entity.
	// It exists in this package in order to avoid circular dependency with the "systemcomponentfeedbackrelationship" package.
	FeedbackRelationshipsInverseTable = "system_component_feedback_relationships"
	// FeedbackRelationshipsColumn is the table column denoting the feedback_relationships relation/edge.
	FeedbackRelationshipsColumn = "source_id"
	// IncidentSystemComponentsTable is the table that holds the incident_system_components relation/edge.
	IncidentSystemComponentsTable = "incident_system_components"
	// IncidentSystemComponentsInverseTable is the table name for the IncidentSystemComponent entity.
	// It exists in this package in order to avoid circular dependency with the "incidentsystemcomponent" package.
	IncidentSystemComponentsInverseTable = "incident_system_components"
	// IncidentSystemComponentsColumn is the table column denoting the incident_system_components relation/edge.
	IncidentSystemComponentsColumn = "system_component_id"
	// EventComponentsTable is the table that holds the event_components relation/edge.
	EventComponentsTable = "incident_event_system_components"
	// EventComponentsInverseTable is the table name for the IncidentEventSystemComponent entity.
	// It exists in this package in order to avoid circular dependency with the "incidenteventsystemcomponent" package.
	EventComponentsInverseTable = "incident_event_system_components"
	// EventComponentsColumn is the table column denoting the event_components relation/edge.
	EventComponentsColumn = "system_component_id"
)

// Columns holds all SQL columns for systemcomponent fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldType,
	FieldDescription,
	FieldProperties,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "system_components"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"system_component_children",
}

var (
	// ControlsPrimaryKey and ControlsColumn2 are the table columns denoting the
	// primary key for the controls relation (M2M).
	ControlsPrimaryKey = []string{"controller_id", "controlled_id"}
	// FeedbackToPrimaryKey and FeedbackToColumn2 are the table columns denoting the
	// primary key for the feedback_to relation (M2M).
	FeedbackToPrimaryKey = []string{"source_id", "target_id"}
	// IncidentsPrimaryKey and IncidentsColumn2 are the table columns denoting the
	// primary key for the incidents relation (M2M).
	IncidentsPrimaryKey = []string{"incident_id", "system_component_id"}
	// EventsPrimaryKey and EventsColumn2 are the table columns denoting the
	// primary key for the events relation (M2M).
	EventsPrimaryKey = []string{"incident_event_id", "system_component_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeService         Type = "service"
	TypeControl         Type = "control"
	TypeFeedback        Type = "feedback"
	TypeInterface       Type = "interface"
	TypeHumanController Type = "human_controller"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeService, TypeControl, TypeFeedback, TypeInterface, TypeHumanController:
		return nil
	default:
		return fmt.Errorf("systemcomponent: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the SystemComponent queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByParentField orders the results by parent field.
func ByParentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParentStep(), sql.OrderByField(field, opts...))
	}
}

// ByChildrenCount orders the results by children count.
func ByChildrenCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChildrenStep(), opts...)
	}
}

// ByChildren orders the results by children terms.
func ByChildren(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChildrenStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByControlsCount orders the results by controls count.
func ByControlsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newControlsStep(), opts...)
	}
}

// ByControls orders the results by controls terms.
func ByControls(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newControlsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFeedbackToCount orders the results by feedback_to count.
func ByFeedbackToCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFeedbackToStep(), opts...)
	}
}

// ByFeedbackTo orders the results by feedback_to terms.
func ByFeedbackTo(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFeedbackToStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByIncidentsCount orders the results by incidents count.
func ByIncidentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIncidentsStep(), opts...)
	}
}

// ByIncidents orders the results by incidents terms.
func ByIncidents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIncidentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEventsCount orders the results by events count.
func ByEventsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEventsStep(), opts...)
	}
}

// ByEvents orders the results by events terms.
func ByEvents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByControlRelationshipsCount orders the results by control_relationships count.
func ByControlRelationshipsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newControlRelationshipsStep(), opts...)
	}
}

// ByControlRelationships orders the results by control_relationships terms.
func ByControlRelationships(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newControlRelationshipsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFeedbackRelationshipsCount orders the results by feedback_relationships count.
func ByFeedbackRelationshipsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFeedbackRelationshipsStep(), opts...)
	}
}

// ByFeedbackRelationships orders the results by feedback_relationships terms.
func ByFeedbackRelationships(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFeedbackRelationshipsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByIncidentSystemComponentsCount orders the results by incident_system_components count.
func ByIncidentSystemComponentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIncidentSystemComponentsStep(), opts...)
	}
}

// ByIncidentSystemComponents orders the results by incident_system_components terms.
func ByIncidentSystemComponents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIncidentSystemComponentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEventComponentsCount orders the results by event_components count.
func ByEventComponentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEventComponentsStep(), opts...)
	}
}

// ByEventComponents orders the results by event_components terms.
func ByEventComponents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventComponentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newParentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
	)
}
func newChildrenStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
	)
}
func newControlsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ControlsTable, ControlsPrimaryKey...),
	)
}
func newFeedbackToStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, FeedbackToTable, FeedbackToPrimaryKey...),
	)
}
func newIncidentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IncidentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, IncidentsTable, IncidentsPrimaryKey...),
	)
}
func newEventsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, EventsTable, EventsPrimaryKey...),
	)
}
func newControlRelationshipsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ControlRelationshipsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ControlRelationshipsTable, ControlRelationshipsColumn),
	)
}
func newFeedbackRelationshipsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FeedbackRelationshipsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, FeedbackRelationshipsTable, FeedbackRelationshipsColumn),
	)
}
func newIncidentSystemComponentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IncidentSystemComponentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, IncidentSystemComponentsTable, IncidentSystemComponentsColumn),
	)
}
func newEventComponentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventComponentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, EventComponentsTable, EventComponentsColumn),
	)
}
