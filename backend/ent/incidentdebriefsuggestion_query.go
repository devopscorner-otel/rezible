// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/incidentdebrief"
	"github.com/rezible/rezible/ent/incidentdebriefsuggestion"
	"github.com/rezible/rezible/ent/predicate"
)

// IncidentDebriefSuggestionQuery is the builder for querying IncidentDebriefSuggestion entities.
type IncidentDebriefSuggestionQuery struct {
	config
	ctx         *QueryContext
	order       []incidentdebriefsuggestion.OrderOption
	inters      []Interceptor
	predicates  []predicate.IncidentDebriefSuggestion
	withDebrief *IncidentDebriefQuery
	withFKs     bool
	modifiers   []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the IncidentDebriefSuggestionQuery builder.
func (idsq *IncidentDebriefSuggestionQuery) Where(ps ...predicate.IncidentDebriefSuggestion) *IncidentDebriefSuggestionQuery {
	idsq.predicates = append(idsq.predicates, ps...)
	return idsq
}

// Limit the number of records to be returned by this query.
func (idsq *IncidentDebriefSuggestionQuery) Limit(limit int) *IncidentDebriefSuggestionQuery {
	idsq.ctx.Limit = &limit
	return idsq
}

// Offset to start from.
func (idsq *IncidentDebriefSuggestionQuery) Offset(offset int) *IncidentDebriefSuggestionQuery {
	idsq.ctx.Offset = &offset
	return idsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (idsq *IncidentDebriefSuggestionQuery) Unique(unique bool) *IncidentDebriefSuggestionQuery {
	idsq.ctx.Unique = &unique
	return idsq
}

// Order specifies how the records should be ordered.
func (idsq *IncidentDebriefSuggestionQuery) Order(o ...incidentdebriefsuggestion.OrderOption) *IncidentDebriefSuggestionQuery {
	idsq.order = append(idsq.order, o...)
	return idsq
}

// QueryDebrief chains the current query on the "debrief" edge.
func (idsq *IncidentDebriefSuggestionQuery) QueryDebrief() *IncidentDebriefQuery {
	query := (&IncidentDebriefClient{config: idsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := idsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := idsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(incidentdebriefsuggestion.Table, incidentdebriefsuggestion.FieldID, selector),
			sqlgraph.To(incidentdebrief.Table, incidentdebrief.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, incidentdebriefsuggestion.DebriefTable, incidentdebriefsuggestion.DebriefColumn),
		)
		fromU = sqlgraph.SetNeighbors(idsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first IncidentDebriefSuggestion entity from the query.
// Returns a *NotFoundError when no IncidentDebriefSuggestion was found.
func (idsq *IncidentDebriefSuggestionQuery) First(ctx context.Context) (*IncidentDebriefSuggestion, error) {
	nodes, err := idsq.Limit(1).All(setContextOp(ctx, idsq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{incidentdebriefsuggestion.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (idsq *IncidentDebriefSuggestionQuery) FirstX(ctx context.Context) *IncidentDebriefSuggestion {
	node, err := idsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first IncidentDebriefSuggestion ID from the query.
// Returns a *NotFoundError when no IncidentDebriefSuggestion ID was found.
func (idsq *IncidentDebriefSuggestionQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = idsq.Limit(1).IDs(setContextOp(ctx, idsq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{incidentdebriefsuggestion.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (idsq *IncidentDebriefSuggestionQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := idsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single IncidentDebriefSuggestion entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one IncidentDebriefSuggestion entity is found.
// Returns a *NotFoundError when no IncidentDebriefSuggestion entities are found.
func (idsq *IncidentDebriefSuggestionQuery) Only(ctx context.Context) (*IncidentDebriefSuggestion, error) {
	nodes, err := idsq.Limit(2).All(setContextOp(ctx, idsq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{incidentdebriefsuggestion.Label}
	default:
		return nil, &NotSingularError{incidentdebriefsuggestion.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (idsq *IncidentDebriefSuggestionQuery) OnlyX(ctx context.Context) *IncidentDebriefSuggestion {
	node, err := idsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only IncidentDebriefSuggestion ID in the query.
// Returns a *NotSingularError when more than one IncidentDebriefSuggestion ID is found.
// Returns a *NotFoundError when no entities are found.
func (idsq *IncidentDebriefSuggestionQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = idsq.Limit(2).IDs(setContextOp(ctx, idsq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{incidentdebriefsuggestion.Label}
	default:
		err = &NotSingularError{incidentdebriefsuggestion.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (idsq *IncidentDebriefSuggestionQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := idsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of IncidentDebriefSuggestions.
func (idsq *IncidentDebriefSuggestionQuery) All(ctx context.Context) ([]*IncidentDebriefSuggestion, error) {
	ctx = setContextOp(ctx, idsq.ctx, ent.OpQueryAll)
	if err := idsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*IncidentDebriefSuggestion, *IncidentDebriefSuggestionQuery]()
	return withInterceptors[[]*IncidentDebriefSuggestion](ctx, idsq, qr, idsq.inters)
}

// AllX is like All, but panics if an error occurs.
func (idsq *IncidentDebriefSuggestionQuery) AllX(ctx context.Context) []*IncidentDebriefSuggestion {
	nodes, err := idsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of IncidentDebriefSuggestion IDs.
func (idsq *IncidentDebriefSuggestionQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if idsq.ctx.Unique == nil && idsq.path != nil {
		idsq.Unique(true)
	}
	ctx = setContextOp(ctx, idsq.ctx, ent.OpQueryIDs)
	if err = idsq.Select(incidentdebriefsuggestion.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (idsq *IncidentDebriefSuggestionQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := idsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (idsq *IncidentDebriefSuggestionQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, idsq.ctx, ent.OpQueryCount)
	if err := idsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, idsq, querierCount[*IncidentDebriefSuggestionQuery](), idsq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (idsq *IncidentDebriefSuggestionQuery) CountX(ctx context.Context) int {
	count, err := idsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (idsq *IncidentDebriefSuggestionQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, idsq.ctx, ent.OpQueryExist)
	switch _, err := idsq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (idsq *IncidentDebriefSuggestionQuery) ExistX(ctx context.Context) bool {
	exist, err := idsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the IncidentDebriefSuggestionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (idsq *IncidentDebriefSuggestionQuery) Clone() *IncidentDebriefSuggestionQuery {
	if idsq == nil {
		return nil
	}
	return &IncidentDebriefSuggestionQuery{
		config:      idsq.config,
		ctx:         idsq.ctx.Clone(),
		order:       append([]incidentdebriefsuggestion.OrderOption{}, idsq.order...),
		inters:      append([]Interceptor{}, idsq.inters...),
		predicates:  append([]predicate.IncidentDebriefSuggestion{}, idsq.predicates...),
		withDebrief: idsq.withDebrief.Clone(),
		// clone intermediate query.
		sql:       idsq.sql.Clone(),
		path:      idsq.path,
		modifiers: append([]func(*sql.Selector){}, idsq.modifiers...),
	}
}

// WithDebrief tells the query-builder to eager-load the nodes that are connected to
// the "debrief" edge. The optional arguments are used to configure the query builder of the edge.
func (idsq *IncidentDebriefSuggestionQuery) WithDebrief(opts ...func(*IncidentDebriefQuery)) *IncidentDebriefSuggestionQuery {
	query := (&IncidentDebriefClient{config: idsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	idsq.withDebrief = query
	return idsq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Content string `json:"content,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.IncidentDebriefSuggestion.Query().
//		GroupBy(incidentdebriefsuggestion.FieldContent).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (idsq *IncidentDebriefSuggestionQuery) GroupBy(field string, fields ...string) *IncidentDebriefSuggestionGroupBy {
	idsq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &IncidentDebriefSuggestionGroupBy{build: idsq}
	grbuild.flds = &idsq.ctx.Fields
	grbuild.label = incidentdebriefsuggestion.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Content string `json:"content,omitempty"`
//	}
//
//	client.IncidentDebriefSuggestion.Query().
//		Select(incidentdebriefsuggestion.FieldContent).
//		Scan(ctx, &v)
func (idsq *IncidentDebriefSuggestionQuery) Select(fields ...string) *IncidentDebriefSuggestionSelect {
	idsq.ctx.Fields = append(idsq.ctx.Fields, fields...)
	sbuild := &IncidentDebriefSuggestionSelect{IncidentDebriefSuggestionQuery: idsq}
	sbuild.label = incidentdebriefsuggestion.Label
	sbuild.flds, sbuild.scan = &idsq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a IncidentDebriefSuggestionSelect configured with the given aggregations.
func (idsq *IncidentDebriefSuggestionQuery) Aggregate(fns ...AggregateFunc) *IncidentDebriefSuggestionSelect {
	return idsq.Select().Aggregate(fns...)
}

func (idsq *IncidentDebriefSuggestionQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range idsq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, idsq); err != nil {
				return err
			}
		}
	}
	for _, f := range idsq.ctx.Fields {
		if !incidentdebriefsuggestion.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if idsq.path != nil {
		prev, err := idsq.path(ctx)
		if err != nil {
			return err
		}
		idsq.sql = prev
	}
	if incidentdebriefsuggestion.Policy == nil {
		return errors.New("ent: uninitialized incidentdebriefsuggestion.Policy (forgotten import ent/runtime?)")
	}
	if err := incidentdebriefsuggestion.Policy.EvalQuery(ctx, idsq); err != nil {
		return err
	}
	return nil
}

func (idsq *IncidentDebriefSuggestionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*IncidentDebriefSuggestion, error) {
	var (
		nodes       = []*IncidentDebriefSuggestion{}
		withFKs     = idsq.withFKs
		_spec       = idsq.querySpec()
		loadedTypes = [1]bool{
			idsq.withDebrief != nil,
		}
	)
	if idsq.withDebrief != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, incidentdebriefsuggestion.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*IncidentDebriefSuggestion).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &IncidentDebriefSuggestion{config: idsq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(idsq.modifiers) > 0 {
		_spec.Modifiers = idsq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, idsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := idsq.withDebrief; query != nil {
		if err := idsq.loadDebrief(ctx, query, nodes, nil,
			func(n *IncidentDebriefSuggestion, e *IncidentDebrief) { n.Edges.Debrief = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (idsq *IncidentDebriefSuggestionQuery) loadDebrief(ctx context.Context, query *IncidentDebriefQuery, nodes []*IncidentDebriefSuggestion, init func(*IncidentDebriefSuggestion), assign func(*IncidentDebriefSuggestion, *IncidentDebrief)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*IncidentDebriefSuggestion)
	for i := range nodes {
		if nodes[i].incident_debrief_suggestions == nil {
			continue
		}
		fk := *nodes[i].incident_debrief_suggestions
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(incidentdebrief.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "incident_debrief_suggestions" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (idsq *IncidentDebriefSuggestionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := idsq.querySpec()
	if len(idsq.modifiers) > 0 {
		_spec.Modifiers = idsq.modifiers
	}
	_spec.Node.Columns = idsq.ctx.Fields
	if len(idsq.ctx.Fields) > 0 {
		_spec.Unique = idsq.ctx.Unique != nil && *idsq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, idsq.driver, _spec)
}

func (idsq *IncidentDebriefSuggestionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(incidentdebriefsuggestion.Table, incidentdebriefsuggestion.Columns, sqlgraph.NewFieldSpec(incidentdebriefsuggestion.FieldID, field.TypeUUID))
	_spec.From = idsq.sql
	if unique := idsq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if idsq.path != nil {
		_spec.Unique = true
	}
	if fields := idsq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, incidentdebriefsuggestion.FieldID)
		for i := range fields {
			if fields[i] != incidentdebriefsuggestion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := idsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := idsq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := idsq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := idsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (idsq *IncidentDebriefSuggestionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(idsq.driver.Dialect())
	t1 := builder.Table(incidentdebriefsuggestion.Table)
	columns := idsq.ctx.Fields
	if len(columns) == 0 {
		columns = incidentdebriefsuggestion.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if idsq.sql != nil {
		selector = idsq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if idsq.ctx.Unique != nil && *idsq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range idsq.modifiers {
		m(selector)
	}
	for _, p := range idsq.predicates {
		p(selector)
	}
	for _, p := range idsq.order {
		p(selector)
	}
	if offset := idsq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := idsq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (idsq *IncidentDebriefSuggestionQuery) Modify(modifiers ...func(s *sql.Selector)) *IncidentDebriefSuggestionSelect {
	idsq.modifiers = append(idsq.modifiers, modifiers...)
	return idsq.Select()
}

// IncidentDebriefSuggestionGroupBy is the group-by builder for IncidentDebriefSuggestion entities.
type IncidentDebriefSuggestionGroupBy struct {
	selector
	build *IncidentDebriefSuggestionQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (idsgb *IncidentDebriefSuggestionGroupBy) Aggregate(fns ...AggregateFunc) *IncidentDebriefSuggestionGroupBy {
	idsgb.fns = append(idsgb.fns, fns...)
	return idsgb
}

// Scan applies the selector query and scans the result into the given value.
func (idsgb *IncidentDebriefSuggestionGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, idsgb.build.ctx, ent.OpQueryGroupBy)
	if err := idsgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*IncidentDebriefSuggestionQuery, *IncidentDebriefSuggestionGroupBy](ctx, idsgb.build, idsgb, idsgb.build.inters, v)
}

func (idsgb *IncidentDebriefSuggestionGroupBy) sqlScan(ctx context.Context, root *IncidentDebriefSuggestionQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(idsgb.fns))
	for _, fn := range idsgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*idsgb.flds)+len(idsgb.fns))
		for _, f := range *idsgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*idsgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := idsgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// IncidentDebriefSuggestionSelect is the builder for selecting fields of IncidentDebriefSuggestion entities.
type IncidentDebriefSuggestionSelect struct {
	*IncidentDebriefSuggestionQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (idss *IncidentDebriefSuggestionSelect) Aggregate(fns ...AggregateFunc) *IncidentDebriefSuggestionSelect {
	idss.fns = append(idss.fns, fns...)
	return idss
}

// Scan applies the selector query and scans the result into the given value.
func (idss *IncidentDebriefSuggestionSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, idss.ctx, ent.OpQuerySelect)
	if err := idss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*IncidentDebriefSuggestionQuery, *IncidentDebriefSuggestionSelect](ctx, idss.IncidentDebriefSuggestionQuery, idss, idss.inters, v)
}

func (idss *IncidentDebriefSuggestionSelect) sqlScan(ctx context.Context, root *IncidentDebriefSuggestionQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(idss.fns))
	for _, fn := range idss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*idss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := idss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (idss *IncidentDebriefSuggestionSelect) Modify(modifiers ...func(s *sql.Selector)) *IncidentDebriefSuggestionSelect {
	idss.modifiers = append(idss.modifiers, modifiers...)
	return idss
}
