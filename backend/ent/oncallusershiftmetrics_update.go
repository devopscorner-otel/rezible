// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/oncallusershift"
	"github.com/rezible/rezible/ent/oncallusershiftmetrics"
	"github.com/rezible/rezible/ent/predicate"
)

// OncallUserShiftMetricsUpdate is the builder for updating OncallUserShiftMetrics entities.
type OncallUserShiftMetricsUpdate struct {
	config
	hooks     []Hook
	mutation  *OncallUserShiftMetricsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OncallUserShiftMetricsUpdate builder.
func (ousmu *OncallUserShiftMetricsUpdate) Where(ps ...predicate.OncallUserShiftMetrics) *OncallUserShiftMetricsUpdate {
	ousmu.mutation.Where(ps...)
	return ousmu
}

// SetShiftID sets the "shift_id" field.
func (ousmu *OncallUserShiftMetricsUpdate) SetShiftID(u uuid.UUID) *OncallUserShiftMetricsUpdate {
	ousmu.mutation.SetShiftID(u)
	return ousmu
}

// SetNillableShiftID sets the "shift_id" field if the given value is not nil.
func (ousmu *OncallUserShiftMetricsUpdate) SetNillableShiftID(u *uuid.UUID) *OncallUserShiftMetricsUpdate {
	if u != nil {
		ousmu.SetShiftID(*u)
	}
	return ousmu
}

// SetShift sets the "shift" edge to the OncallUserShift entity.
func (ousmu *OncallUserShiftMetricsUpdate) SetShift(o *OncallUserShift) *OncallUserShiftMetricsUpdate {
	return ousmu.SetShiftID(o.ID)
}

// Mutation returns the OncallUserShiftMetricsMutation object of the builder.
func (ousmu *OncallUserShiftMetricsUpdate) Mutation() *OncallUserShiftMetricsMutation {
	return ousmu.mutation
}

// ClearShift clears the "shift" edge to the OncallUserShift entity.
func (ousmu *OncallUserShiftMetricsUpdate) ClearShift() *OncallUserShiftMetricsUpdate {
	ousmu.mutation.ClearShift()
	return ousmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ousmu *OncallUserShiftMetricsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ousmu.sqlSave, ousmu.mutation, ousmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ousmu *OncallUserShiftMetricsUpdate) SaveX(ctx context.Context) int {
	affected, err := ousmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ousmu *OncallUserShiftMetricsUpdate) Exec(ctx context.Context) error {
	_, err := ousmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ousmu *OncallUserShiftMetricsUpdate) ExecX(ctx context.Context) {
	if err := ousmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ousmu *OncallUserShiftMetricsUpdate) check() error {
	if ousmu.mutation.TenantCleared() && len(ousmu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallUserShiftMetrics.tenant"`)
	}
	if ousmu.mutation.ShiftCleared() && len(ousmu.mutation.ShiftIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallUserShiftMetrics.shift"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ousmu *OncallUserShiftMetricsUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OncallUserShiftMetricsUpdate {
	ousmu.modifiers = append(ousmu.modifiers, modifiers...)
	return ousmu
}

func (ousmu *OncallUserShiftMetricsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ousmu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(oncallusershiftmetrics.Table, oncallusershiftmetrics.Columns, sqlgraph.NewFieldSpec(oncallusershiftmetrics.FieldID, field.TypeUUID))
	if ps := ousmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ousmu.mutation.ShiftCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   oncallusershiftmetrics.ShiftTable,
			Columns: []string{oncallusershiftmetrics.ShiftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallusershift.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ousmu.mutation.ShiftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   oncallusershiftmetrics.ShiftTable,
			Columns: []string{oncallusershiftmetrics.ShiftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallusershift.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ousmu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ousmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oncallusershiftmetrics.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ousmu.mutation.done = true
	return n, nil
}

// OncallUserShiftMetricsUpdateOne is the builder for updating a single OncallUserShiftMetrics entity.
type OncallUserShiftMetricsUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OncallUserShiftMetricsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetShiftID sets the "shift_id" field.
func (ousmuo *OncallUserShiftMetricsUpdateOne) SetShiftID(u uuid.UUID) *OncallUserShiftMetricsUpdateOne {
	ousmuo.mutation.SetShiftID(u)
	return ousmuo
}

// SetNillableShiftID sets the "shift_id" field if the given value is not nil.
func (ousmuo *OncallUserShiftMetricsUpdateOne) SetNillableShiftID(u *uuid.UUID) *OncallUserShiftMetricsUpdateOne {
	if u != nil {
		ousmuo.SetShiftID(*u)
	}
	return ousmuo
}

// SetShift sets the "shift" edge to the OncallUserShift entity.
func (ousmuo *OncallUserShiftMetricsUpdateOne) SetShift(o *OncallUserShift) *OncallUserShiftMetricsUpdateOne {
	return ousmuo.SetShiftID(o.ID)
}

// Mutation returns the OncallUserShiftMetricsMutation object of the builder.
func (ousmuo *OncallUserShiftMetricsUpdateOne) Mutation() *OncallUserShiftMetricsMutation {
	return ousmuo.mutation
}

// ClearShift clears the "shift" edge to the OncallUserShift entity.
func (ousmuo *OncallUserShiftMetricsUpdateOne) ClearShift() *OncallUserShiftMetricsUpdateOne {
	ousmuo.mutation.ClearShift()
	return ousmuo
}

// Where appends a list predicates to the OncallUserShiftMetricsUpdate builder.
func (ousmuo *OncallUserShiftMetricsUpdateOne) Where(ps ...predicate.OncallUserShiftMetrics) *OncallUserShiftMetricsUpdateOne {
	ousmuo.mutation.Where(ps...)
	return ousmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ousmuo *OncallUserShiftMetricsUpdateOne) Select(field string, fields ...string) *OncallUserShiftMetricsUpdateOne {
	ousmuo.fields = append([]string{field}, fields...)
	return ousmuo
}

// Save executes the query and returns the updated OncallUserShiftMetrics entity.
func (ousmuo *OncallUserShiftMetricsUpdateOne) Save(ctx context.Context) (*OncallUserShiftMetrics, error) {
	return withHooks(ctx, ousmuo.sqlSave, ousmuo.mutation, ousmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ousmuo *OncallUserShiftMetricsUpdateOne) SaveX(ctx context.Context) *OncallUserShiftMetrics {
	node, err := ousmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ousmuo *OncallUserShiftMetricsUpdateOne) Exec(ctx context.Context) error {
	_, err := ousmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ousmuo *OncallUserShiftMetricsUpdateOne) ExecX(ctx context.Context) {
	if err := ousmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ousmuo *OncallUserShiftMetricsUpdateOne) check() error {
	if ousmuo.mutation.TenantCleared() && len(ousmuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallUserShiftMetrics.tenant"`)
	}
	if ousmuo.mutation.ShiftCleared() && len(ousmuo.mutation.ShiftIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallUserShiftMetrics.shift"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ousmuo *OncallUserShiftMetricsUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OncallUserShiftMetricsUpdateOne {
	ousmuo.modifiers = append(ousmuo.modifiers, modifiers...)
	return ousmuo
}

func (ousmuo *OncallUserShiftMetricsUpdateOne) sqlSave(ctx context.Context) (_node *OncallUserShiftMetrics, err error) {
	if err := ousmuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(oncallusershiftmetrics.Table, oncallusershiftmetrics.Columns, sqlgraph.NewFieldSpec(oncallusershiftmetrics.FieldID, field.TypeUUID))
	id, ok := ousmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OncallUserShiftMetrics.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ousmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oncallusershiftmetrics.FieldID)
		for _, f := range fields {
			if !oncallusershiftmetrics.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oncallusershiftmetrics.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ousmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ousmuo.mutation.ShiftCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   oncallusershiftmetrics.ShiftTable,
			Columns: []string{oncallusershiftmetrics.ShiftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallusershift.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ousmuo.mutation.ShiftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   oncallusershiftmetrics.ShiftTable,
			Columns: []string{oncallusershiftmetrics.ShiftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallusershift.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ousmuo.modifiers...)
	_node = &OncallUserShiftMetrics{config: ousmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ousmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oncallusershiftmetrics.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ousmuo.mutation.done = true
	return _node, nil
}
