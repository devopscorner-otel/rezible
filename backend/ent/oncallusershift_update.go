// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/oncallroster"
	"github.com/rezible/rezible/ent/oncallusershift"
	"github.com/rezible/rezible/ent/oncallusershifthandover"
	"github.com/rezible/rezible/ent/oncallusershiftmetrics"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/user"
)

// OncallUserShiftUpdate is the builder for updating OncallUserShift entities.
type OncallUserShiftUpdate struct {
	config
	hooks     []Hook
	mutation  *OncallUserShiftMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OncallUserShiftUpdate builder.
func (ousu *OncallUserShiftUpdate) Where(ps ...predicate.OncallUserShift) *OncallUserShiftUpdate {
	ousu.mutation.Where(ps...)
	return ousu
}

// SetUserID sets the "user_id" field.
func (ousu *OncallUserShiftUpdate) SetUserID(u uuid.UUID) *OncallUserShiftUpdate {
	ousu.mutation.SetUserID(u)
	return ousu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ousu *OncallUserShiftUpdate) SetNillableUserID(u *uuid.UUID) *OncallUserShiftUpdate {
	if u != nil {
		ousu.SetUserID(*u)
	}
	return ousu
}

// SetRosterID sets the "roster_id" field.
func (ousu *OncallUserShiftUpdate) SetRosterID(u uuid.UUID) *OncallUserShiftUpdate {
	ousu.mutation.SetRosterID(u)
	return ousu
}

// SetNillableRosterID sets the "roster_id" field if the given value is not nil.
func (ousu *OncallUserShiftUpdate) SetNillableRosterID(u *uuid.UUID) *OncallUserShiftUpdate {
	if u != nil {
		ousu.SetRosterID(*u)
	}
	return ousu
}

// SetProviderID sets the "provider_id" field.
func (ousu *OncallUserShiftUpdate) SetProviderID(s string) *OncallUserShiftUpdate {
	ousu.mutation.SetProviderID(s)
	return ousu
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (ousu *OncallUserShiftUpdate) SetNillableProviderID(s *string) *OncallUserShiftUpdate {
	if s != nil {
		ousu.SetProviderID(*s)
	}
	return ousu
}

// ClearProviderID clears the value of the "provider_id" field.
func (ousu *OncallUserShiftUpdate) ClearProviderID() *OncallUserShiftUpdate {
	ousu.mutation.ClearProviderID()
	return ousu
}

// SetRole sets the "role" field.
func (ousu *OncallUserShiftUpdate) SetRole(o oncallusershift.Role) *OncallUserShiftUpdate {
	ousu.mutation.SetRole(o)
	return ousu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (ousu *OncallUserShiftUpdate) SetNillableRole(o *oncallusershift.Role) *OncallUserShiftUpdate {
	if o != nil {
		ousu.SetRole(*o)
	}
	return ousu
}

// ClearRole clears the value of the "role" field.
func (ousu *OncallUserShiftUpdate) ClearRole() *OncallUserShiftUpdate {
	ousu.mutation.ClearRole()
	return ousu
}

// SetPrimaryShiftID sets the "primary_shift_id" field.
func (ousu *OncallUserShiftUpdate) SetPrimaryShiftID(u uuid.UUID) *OncallUserShiftUpdate {
	ousu.mutation.SetPrimaryShiftID(u)
	return ousu
}

// SetNillablePrimaryShiftID sets the "primary_shift_id" field if the given value is not nil.
func (ousu *OncallUserShiftUpdate) SetNillablePrimaryShiftID(u *uuid.UUID) *OncallUserShiftUpdate {
	if u != nil {
		ousu.SetPrimaryShiftID(*u)
	}
	return ousu
}

// ClearPrimaryShiftID clears the value of the "primary_shift_id" field.
func (ousu *OncallUserShiftUpdate) ClearPrimaryShiftID() *OncallUserShiftUpdate {
	ousu.mutation.ClearPrimaryShiftID()
	return ousu
}

// SetStartAt sets the "start_at" field.
func (ousu *OncallUserShiftUpdate) SetStartAt(t time.Time) *OncallUserShiftUpdate {
	ousu.mutation.SetStartAt(t)
	return ousu
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (ousu *OncallUserShiftUpdate) SetNillableStartAt(t *time.Time) *OncallUserShiftUpdate {
	if t != nil {
		ousu.SetStartAt(*t)
	}
	return ousu
}

// SetEndAt sets the "end_at" field.
func (ousu *OncallUserShiftUpdate) SetEndAt(t time.Time) *OncallUserShiftUpdate {
	ousu.mutation.SetEndAt(t)
	return ousu
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (ousu *OncallUserShiftUpdate) SetNillableEndAt(t *time.Time) *OncallUserShiftUpdate {
	if t != nil {
		ousu.SetEndAt(*t)
	}
	return ousu
}

// SetUser sets the "user" edge to the User entity.
func (ousu *OncallUserShiftUpdate) SetUser(u *User) *OncallUserShiftUpdate {
	return ousu.SetUserID(u.ID)
}

// SetRoster sets the "roster" edge to the OncallRoster entity.
func (ousu *OncallUserShiftUpdate) SetRoster(o *OncallRoster) *OncallUserShiftUpdate {
	return ousu.SetRosterID(o.ID)
}

// SetPrimaryShift sets the "primary_shift" edge to the OncallUserShift entity.
func (ousu *OncallUserShiftUpdate) SetPrimaryShift(o *OncallUserShift) *OncallUserShiftUpdate {
	return ousu.SetPrimaryShiftID(o.ID)
}

// SetHandoverID sets the "handover" edge to the OncallUserShiftHandover entity by ID.
func (ousu *OncallUserShiftUpdate) SetHandoverID(id uuid.UUID) *OncallUserShiftUpdate {
	ousu.mutation.SetHandoverID(id)
	return ousu
}

// SetNillableHandoverID sets the "handover" edge to the OncallUserShiftHandover entity by ID if the given value is not nil.
func (ousu *OncallUserShiftUpdate) SetNillableHandoverID(id *uuid.UUID) *OncallUserShiftUpdate {
	if id != nil {
		ousu = ousu.SetHandoverID(*id)
	}
	return ousu
}

// SetHandover sets the "handover" edge to the OncallUserShiftHandover entity.
func (ousu *OncallUserShiftUpdate) SetHandover(o *OncallUserShiftHandover) *OncallUserShiftUpdate {
	return ousu.SetHandoverID(o.ID)
}

// SetMetricsID sets the "metrics" edge to the OncallUserShiftMetrics entity by ID.
func (ousu *OncallUserShiftUpdate) SetMetricsID(id uuid.UUID) *OncallUserShiftUpdate {
	ousu.mutation.SetMetricsID(id)
	return ousu
}

// SetNillableMetricsID sets the "metrics" edge to the OncallUserShiftMetrics entity by ID if the given value is not nil.
func (ousu *OncallUserShiftUpdate) SetNillableMetricsID(id *uuid.UUID) *OncallUserShiftUpdate {
	if id != nil {
		ousu = ousu.SetMetricsID(*id)
	}
	return ousu
}

// SetMetrics sets the "metrics" edge to the OncallUserShiftMetrics entity.
func (ousu *OncallUserShiftUpdate) SetMetrics(o *OncallUserShiftMetrics) *OncallUserShiftUpdate {
	return ousu.SetMetricsID(o.ID)
}

// Mutation returns the OncallUserShiftMutation object of the builder.
func (ousu *OncallUserShiftUpdate) Mutation() *OncallUserShiftMutation {
	return ousu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ousu *OncallUserShiftUpdate) ClearUser() *OncallUserShiftUpdate {
	ousu.mutation.ClearUser()
	return ousu
}

// ClearRoster clears the "roster" edge to the OncallRoster entity.
func (ousu *OncallUserShiftUpdate) ClearRoster() *OncallUserShiftUpdate {
	ousu.mutation.ClearRoster()
	return ousu
}

// ClearPrimaryShift clears the "primary_shift" edge to the OncallUserShift entity.
func (ousu *OncallUserShiftUpdate) ClearPrimaryShift() *OncallUserShiftUpdate {
	ousu.mutation.ClearPrimaryShift()
	return ousu
}

// ClearHandover clears the "handover" edge to the OncallUserShiftHandover entity.
func (ousu *OncallUserShiftUpdate) ClearHandover() *OncallUserShiftUpdate {
	ousu.mutation.ClearHandover()
	return ousu
}

// ClearMetrics clears the "metrics" edge to the OncallUserShiftMetrics entity.
func (ousu *OncallUserShiftUpdate) ClearMetrics() *OncallUserShiftUpdate {
	ousu.mutation.ClearMetrics()
	return ousu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ousu *OncallUserShiftUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ousu.sqlSave, ousu.mutation, ousu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ousu *OncallUserShiftUpdate) SaveX(ctx context.Context) int {
	affected, err := ousu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ousu *OncallUserShiftUpdate) Exec(ctx context.Context) error {
	_, err := ousu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ousu *OncallUserShiftUpdate) ExecX(ctx context.Context) {
	if err := ousu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ousu *OncallUserShiftUpdate) check() error {
	if v, ok := ousu.mutation.Role(); ok {
		if err := oncallusershift.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "OncallUserShift.role": %w`, err)}
		}
	}
	if ousu.mutation.UserCleared() && len(ousu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallUserShift.user"`)
	}
	if ousu.mutation.RosterCleared() && len(ousu.mutation.RosterIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallUserShift.roster"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ousu *OncallUserShiftUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OncallUserShiftUpdate {
	ousu.modifiers = append(ousu.modifiers, modifiers...)
	return ousu
}

func (ousu *OncallUserShiftUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ousu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(oncallusershift.Table, oncallusershift.Columns, sqlgraph.NewFieldSpec(oncallusershift.FieldID, field.TypeUUID))
	if ps := ousu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ousu.mutation.ProviderID(); ok {
		_spec.SetField(oncallusershift.FieldProviderID, field.TypeString, value)
	}
	if ousu.mutation.ProviderIDCleared() {
		_spec.ClearField(oncallusershift.FieldProviderID, field.TypeString)
	}
	if value, ok := ousu.mutation.Role(); ok {
		_spec.SetField(oncallusershift.FieldRole, field.TypeEnum, value)
	}
	if ousu.mutation.RoleCleared() {
		_spec.ClearField(oncallusershift.FieldRole, field.TypeEnum)
	}
	if value, ok := ousu.mutation.StartAt(); ok {
		_spec.SetField(oncallusershift.FieldStartAt, field.TypeTime, value)
	}
	if value, ok := ousu.mutation.EndAt(); ok {
		_spec.SetField(oncallusershift.FieldEndAt, field.TypeTime, value)
	}
	if ousu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallusershift.UserTable,
			Columns: []string{oncallusershift.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ousu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallusershift.UserTable,
			Columns: []string{oncallusershift.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ousu.mutation.RosterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallusershift.RosterTable,
			Columns: []string{oncallusershift.RosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ousu.mutation.RosterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallusershift.RosterTable,
			Columns: []string{oncallusershift.RosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ousu.mutation.PrimaryShiftCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oncallusershift.PrimaryShiftTable,
			Columns: []string{oncallusershift.PrimaryShiftColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallusershift.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ousu.mutation.PrimaryShiftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oncallusershift.PrimaryShiftTable,
			Columns: []string{oncallusershift.PrimaryShiftColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallusershift.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ousu.mutation.HandoverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oncallusershift.HandoverTable,
			Columns: []string{oncallusershift.HandoverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallusershifthandover.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ousu.mutation.HandoverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oncallusershift.HandoverTable,
			Columns: []string{oncallusershift.HandoverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallusershifthandover.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ousu.mutation.MetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oncallusershift.MetricsTable,
			Columns: []string{oncallusershift.MetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallusershiftmetrics.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ousu.mutation.MetricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oncallusershift.MetricsTable,
			Columns: []string{oncallusershift.MetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallusershiftmetrics.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ousu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ousu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oncallusershift.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ousu.mutation.done = true
	return n, nil
}

// OncallUserShiftUpdateOne is the builder for updating a single OncallUserShift entity.
type OncallUserShiftUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OncallUserShiftMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUserID sets the "user_id" field.
func (ousuo *OncallUserShiftUpdateOne) SetUserID(u uuid.UUID) *OncallUserShiftUpdateOne {
	ousuo.mutation.SetUserID(u)
	return ousuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ousuo *OncallUserShiftUpdateOne) SetNillableUserID(u *uuid.UUID) *OncallUserShiftUpdateOne {
	if u != nil {
		ousuo.SetUserID(*u)
	}
	return ousuo
}

// SetRosterID sets the "roster_id" field.
func (ousuo *OncallUserShiftUpdateOne) SetRosterID(u uuid.UUID) *OncallUserShiftUpdateOne {
	ousuo.mutation.SetRosterID(u)
	return ousuo
}

// SetNillableRosterID sets the "roster_id" field if the given value is not nil.
func (ousuo *OncallUserShiftUpdateOne) SetNillableRosterID(u *uuid.UUID) *OncallUserShiftUpdateOne {
	if u != nil {
		ousuo.SetRosterID(*u)
	}
	return ousuo
}

// SetProviderID sets the "provider_id" field.
func (ousuo *OncallUserShiftUpdateOne) SetProviderID(s string) *OncallUserShiftUpdateOne {
	ousuo.mutation.SetProviderID(s)
	return ousuo
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (ousuo *OncallUserShiftUpdateOne) SetNillableProviderID(s *string) *OncallUserShiftUpdateOne {
	if s != nil {
		ousuo.SetProviderID(*s)
	}
	return ousuo
}

// ClearProviderID clears the value of the "provider_id" field.
func (ousuo *OncallUserShiftUpdateOne) ClearProviderID() *OncallUserShiftUpdateOne {
	ousuo.mutation.ClearProviderID()
	return ousuo
}

// SetRole sets the "role" field.
func (ousuo *OncallUserShiftUpdateOne) SetRole(o oncallusershift.Role) *OncallUserShiftUpdateOne {
	ousuo.mutation.SetRole(o)
	return ousuo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (ousuo *OncallUserShiftUpdateOne) SetNillableRole(o *oncallusershift.Role) *OncallUserShiftUpdateOne {
	if o != nil {
		ousuo.SetRole(*o)
	}
	return ousuo
}

// ClearRole clears the value of the "role" field.
func (ousuo *OncallUserShiftUpdateOne) ClearRole() *OncallUserShiftUpdateOne {
	ousuo.mutation.ClearRole()
	return ousuo
}

// SetPrimaryShiftID sets the "primary_shift_id" field.
func (ousuo *OncallUserShiftUpdateOne) SetPrimaryShiftID(u uuid.UUID) *OncallUserShiftUpdateOne {
	ousuo.mutation.SetPrimaryShiftID(u)
	return ousuo
}

// SetNillablePrimaryShiftID sets the "primary_shift_id" field if the given value is not nil.
func (ousuo *OncallUserShiftUpdateOne) SetNillablePrimaryShiftID(u *uuid.UUID) *OncallUserShiftUpdateOne {
	if u != nil {
		ousuo.SetPrimaryShiftID(*u)
	}
	return ousuo
}

// ClearPrimaryShiftID clears the value of the "primary_shift_id" field.
func (ousuo *OncallUserShiftUpdateOne) ClearPrimaryShiftID() *OncallUserShiftUpdateOne {
	ousuo.mutation.ClearPrimaryShiftID()
	return ousuo
}

// SetStartAt sets the "start_at" field.
func (ousuo *OncallUserShiftUpdateOne) SetStartAt(t time.Time) *OncallUserShiftUpdateOne {
	ousuo.mutation.SetStartAt(t)
	return ousuo
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (ousuo *OncallUserShiftUpdateOne) SetNillableStartAt(t *time.Time) *OncallUserShiftUpdateOne {
	if t != nil {
		ousuo.SetStartAt(*t)
	}
	return ousuo
}

// SetEndAt sets the "end_at" field.
func (ousuo *OncallUserShiftUpdateOne) SetEndAt(t time.Time) *OncallUserShiftUpdateOne {
	ousuo.mutation.SetEndAt(t)
	return ousuo
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (ousuo *OncallUserShiftUpdateOne) SetNillableEndAt(t *time.Time) *OncallUserShiftUpdateOne {
	if t != nil {
		ousuo.SetEndAt(*t)
	}
	return ousuo
}

// SetUser sets the "user" edge to the User entity.
func (ousuo *OncallUserShiftUpdateOne) SetUser(u *User) *OncallUserShiftUpdateOne {
	return ousuo.SetUserID(u.ID)
}

// SetRoster sets the "roster" edge to the OncallRoster entity.
func (ousuo *OncallUserShiftUpdateOne) SetRoster(o *OncallRoster) *OncallUserShiftUpdateOne {
	return ousuo.SetRosterID(o.ID)
}

// SetPrimaryShift sets the "primary_shift" edge to the OncallUserShift entity.
func (ousuo *OncallUserShiftUpdateOne) SetPrimaryShift(o *OncallUserShift) *OncallUserShiftUpdateOne {
	return ousuo.SetPrimaryShiftID(o.ID)
}

// SetHandoverID sets the "handover" edge to the OncallUserShiftHandover entity by ID.
func (ousuo *OncallUserShiftUpdateOne) SetHandoverID(id uuid.UUID) *OncallUserShiftUpdateOne {
	ousuo.mutation.SetHandoverID(id)
	return ousuo
}

// SetNillableHandoverID sets the "handover" edge to the OncallUserShiftHandover entity by ID if the given value is not nil.
func (ousuo *OncallUserShiftUpdateOne) SetNillableHandoverID(id *uuid.UUID) *OncallUserShiftUpdateOne {
	if id != nil {
		ousuo = ousuo.SetHandoverID(*id)
	}
	return ousuo
}

// SetHandover sets the "handover" edge to the OncallUserShiftHandover entity.
func (ousuo *OncallUserShiftUpdateOne) SetHandover(o *OncallUserShiftHandover) *OncallUserShiftUpdateOne {
	return ousuo.SetHandoverID(o.ID)
}

// SetMetricsID sets the "metrics" edge to the OncallUserShiftMetrics entity by ID.
func (ousuo *OncallUserShiftUpdateOne) SetMetricsID(id uuid.UUID) *OncallUserShiftUpdateOne {
	ousuo.mutation.SetMetricsID(id)
	return ousuo
}

// SetNillableMetricsID sets the "metrics" edge to the OncallUserShiftMetrics entity by ID if the given value is not nil.
func (ousuo *OncallUserShiftUpdateOne) SetNillableMetricsID(id *uuid.UUID) *OncallUserShiftUpdateOne {
	if id != nil {
		ousuo = ousuo.SetMetricsID(*id)
	}
	return ousuo
}

// SetMetrics sets the "metrics" edge to the OncallUserShiftMetrics entity.
func (ousuo *OncallUserShiftUpdateOne) SetMetrics(o *OncallUserShiftMetrics) *OncallUserShiftUpdateOne {
	return ousuo.SetMetricsID(o.ID)
}

// Mutation returns the OncallUserShiftMutation object of the builder.
func (ousuo *OncallUserShiftUpdateOne) Mutation() *OncallUserShiftMutation {
	return ousuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ousuo *OncallUserShiftUpdateOne) ClearUser() *OncallUserShiftUpdateOne {
	ousuo.mutation.ClearUser()
	return ousuo
}

// ClearRoster clears the "roster" edge to the OncallRoster entity.
func (ousuo *OncallUserShiftUpdateOne) ClearRoster() *OncallUserShiftUpdateOne {
	ousuo.mutation.ClearRoster()
	return ousuo
}

// ClearPrimaryShift clears the "primary_shift" edge to the OncallUserShift entity.
func (ousuo *OncallUserShiftUpdateOne) ClearPrimaryShift() *OncallUserShiftUpdateOne {
	ousuo.mutation.ClearPrimaryShift()
	return ousuo
}

// ClearHandover clears the "handover" edge to the OncallUserShiftHandover entity.
func (ousuo *OncallUserShiftUpdateOne) ClearHandover() *OncallUserShiftUpdateOne {
	ousuo.mutation.ClearHandover()
	return ousuo
}

// ClearMetrics clears the "metrics" edge to the OncallUserShiftMetrics entity.
func (ousuo *OncallUserShiftUpdateOne) ClearMetrics() *OncallUserShiftUpdateOne {
	ousuo.mutation.ClearMetrics()
	return ousuo
}

// Where appends a list predicates to the OncallUserShiftUpdate builder.
func (ousuo *OncallUserShiftUpdateOne) Where(ps ...predicate.OncallUserShift) *OncallUserShiftUpdateOne {
	ousuo.mutation.Where(ps...)
	return ousuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ousuo *OncallUserShiftUpdateOne) Select(field string, fields ...string) *OncallUserShiftUpdateOne {
	ousuo.fields = append([]string{field}, fields...)
	return ousuo
}

// Save executes the query and returns the updated OncallUserShift entity.
func (ousuo *OncallUserShiftUpdateOne) Save(ctx context.Context) (*OncallUserShift, error) {
	return withHooks(ctx, ousuo.sqlSave, ousuo.mutation, ousuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ousuo *OncallUserShiftUpdateOne) SaveX(ctx context.Context) *OncallUserShift {
	node, err := ousuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ousuo *OncallUserShiftUpdateOne) Exec(ctx context.Context) error {
	_, err := ousuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ousuo *OncallUserShiftUpdateOne) ExecX(ctx context.Context) {
	if err := ousuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ousuo *OncallUserShiftUpdateOne) check() error {
	if v, ok := ousuo.mutation.Role(); ok {
		if err := oncallusershift.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "OncallUserShift.role": %w`, err)}
		}
	}
	if ousuo.mutation.UserCleared() && len(ousuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallUserShift.user"`)
	}
	if ousuo.mutation.RosterCleared() && len(ousuo.mutation.RosterIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallUserShift.roster"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ousuo *OncallUserShiftUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OncallUserShiftUpdateOne {
	ousuo.modifiers = append(ousuo.modifiers, modifiers...)
	return ousuo
}

func (ousuo *OncallUserShiftUpdateOne) sqlSave(ctx context.Context) (_node *OncallUserShift, err error) {
	if err := ousuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(oncallusershift.Table, oncallusershift.Columns, sqlgraph.NewFieldSpec(oncallusershift.FieldID, field.TypeUUID))
	id, ok := ousuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OncallUserShift.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ousuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oncallusershift.FieldID)
		for _, f := range fields {
			if !oncallusershift.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oncallusershift.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ousuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ousuo.mutation.ProviderID(); ok {
		_spec.SetField(oncallusershift.FieldProviderID, field.TypeString, value)
	}
	if ousuo.mutation.ProviderIDCleared() {
		_spec.ClearField(oncallusershift.FieldProviderID, field.TypeString)
	}
	if value, ok := ousuo.mutation.Role(); ok {
		_spec.SetField(oncallusershift.FieldRole, field.TypeEnum, value)
	}
	if ousuo.mutation.RoleCleared() {
		_spec.ClearField(oncallusershift.FieldRole, field.TypeEnum)
	}
	if value, ok := ousuo.mutation.StartAt(); ok {
		_spec.SetField(oncallusershift.FieldStartAt, field.TypeTime, value)
	}
	if value, ok := ousuo.mutation.EndAt(); ok {
		_spec.SetField(oncallusershift.FieldEndAt, field.TypeTime, value)
	}
	if ousuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallusershift.UserTable,
			Columns: []string{oncallusershift.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ousuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallusershift.UserTable,
			Columns: []string{oncallusershift.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ousuo.mutation.RosterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallusershift.RosterTable,
			Columns: []string{oncallusershift.RosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ousuo.mutation.RosterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallusershift.RosterTable,
			Columns: []string{oncallusershift.RosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ousuo.mutation.PrimaryShiftCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oncallusershift.PrimaryShiftTable,
			Columns: []string{oncallusershift.PrimaryShiftColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallusershift.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ousuo.mutation.PrimaryShiftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oncallusershift.PrimaryShiftTable,
			Columns: []string{oncallusershift.PrimaryShiftColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallusershift.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ousuo.mutation.HandoverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oncallusershift.HandoverTable,
			Columns: []string{oncallusershift.HandoverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallusershifthandover.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ousuo.mutation.HandoverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oncallusershift.HandoverTable,
			Columns: []string{oncallusershift.HandoverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallusershifthandover.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ousuo.mutation.MetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oncallusershift.MetricsTable,
			Columns: []string{oncallusershift.MetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallusershiftmetrics.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ousuo.mutation.MetricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oncallusershift.MetricsTable,
			Columns: []string{oncallusershift.MetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallusershiftmetrics.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ousuo.modifiers...)
	_node = &OncallUserShift{config: ousuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ousuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oncallusershift.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ousuo.mutation.done = true
	return _node, nil
}
