// Code generated by ent, DO NOT EDIT.

package intercept

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"github.com/rezible/rezible/ent"
	"github.com/rezible/rezible/ent/environment"
	"github.com/rezible/rezible/ent/functionality"
	"github.com/rezible/rezible/ent/incident"
	"github.com/rezible/rezible/ent/incidentdebrief"
	"github.com/rezible/rezible/ent/incidentdebriefmessage"
	"github.com/rezible/rezible/ent/incidentdebriefquestion"
	"github.com/rezible/rezible/ent/incidentdebriefsuggestion"
	"github.com/rezible/rezible/ent/incidentevent"
	"github.com/rezible/rezible/ent/incidenteventcontext"
	"github.com/rezible/rezible/ent/incidenteventcontributingfactor"
	"github.com/rezible/rezible/ent/incidenteventevidence"
	"github.com/rezible/rezible/ent/incidenteventsystemcomponent"
	"github.com/rezible/rezible/ent/incidentfield"
	"github.com/rezible/rezible/ent/incidentfieldoption"
	"github.com/rezible/rezible/ent/incidentlink"
	"github.com/rezible/rezible/ent/incidentmilestone"
	"github.com/rezible/rezible/ent/incidentrole"
	"github.com/rezible/rezible/ent/incidentroleassignment"
	"github.com/rezible/rezible/ent/incidentseverity"
	"github.com/rezible/rezible/ent/incidenttag"
	"github.com/rezible/rezible/ent/incidentteamassignment"
	"github.com/rezible/rezible/ent/incidenttype"
	"github.com/rezible/rezible/ent/meetingschedule"
	"github.com/rezible/rezible/ent/meetingsession"
	"github.com/rezible/rezible/ent/oncallalert"
	"github.com/rezible/rezible/ent/oncallalertinstance"
	"github.com/rezible/rezible/ent/oncallhandovertemplate"
	"github.com/rezible/rezible/ent/oncallroster"
	"github.com/rezible/rezible/ent/oncallschedule"
	"github.com/rezible/rezible/ent/oncallscheduleparticipant"
	"github.com/rezible/rezible/ent/oncallusershift"
	"github.com/rezible/rezible/ent/oncallusershiftannotation"
	"github.com/rezible/rezible/ent/oncallusershiftcover"
	"github.com/rezible/rezible/ent/oncallusershifthandover"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/providerconfig"
	"github.com/rezible/rezible/ent/providersynchistory"
	"github.com/rezible/rezible/ent/retrospective"
	"github.com/rezible/rezible/ent/retrospectivediscussion"
	"github.com/rezible/rezible/ent/retrospectivediscussionreply"
	"github.com/rezible/rezible/ent/retrospectivereview"
	"github.com/rezible/rezible/ent/systemanalysis"
	"github.com/rezible/rezible/ent/systemanalysiscomponent"
	"github.com/rezible/rezible/ent/systemcomponent"
	"github.com/rezible/rezible/ent/systemcomponentconstraint"
	"github.com/rezible/rezible/ent/systemcomponentcontrol"
	"github.com/rezible/rezible/ent/systemcomponentkind"
	"github.com/rezible/rezible/ent/systemcomponentsignal"
	"github.com/rezible/rezible/ent/systemrelationship"
	"github.com/rezible/rezible/ent/systemrelationshipcontrolaction"
	"github.com/rezible/rezible/ent/systemrelationshipfeedbacksignal"
	"github.com/rezible/rezible/ent/task"
	"github.com/rezible/rezible/ent/team"
	"github.com/rezible/rezible/ent/user"
)

// The Query interface represents an operation that queries a graph.
// By using this interface, users can write generic code that manipulates
// query builders of different types.
type Query interface {
	// Type returns the string representation of the query type.
	Type() string
	// Limit the number of records to be returned by this query.
	Limit(int)
	// Offset to start from.
	Offset(int)
	// Unique configures the query builder to filter duplicate records.
	Unique(bool)
	// Order specifies how the records should be ordered.
	Order(...func(*sql.Selector))
	// WhereP appends storage-level predicates to the query builder. Using this method, users
	// can use type-assertion to append predicates that do not depend on any generated package.
	WhereP(...func(*sql.Selector))
}

// The Func type is an adapter that allows ordinary functions to be used as interceptors.
// Unlike traversal functions, interceptors are skipped during graph traversals. Note that the
// implementation of Func is different from the one defined in entgo.io/ent.InterceptFunc.
type Func func(context.Context, Query) error

// Intercept calls f(ctx, q) and then applied the next Querier.
func (f Func) Intercept(next ent.Querier) ent.Querier {
	return ent.QuerierFunc(func(ctx context.Context, q ent.Query) (ent.Value, error) {
		query, err := NewQuery(q)
		if err != nil {
			return nil, err
		}
		if err := f(ctx, query); err != nil {
			return nil, err
		}
		return next.Query(ctx, q)
	})
}

// The TraverseFunc type is an adapter to allow the use of ordinary function as Traverser.
// If f is a function with the appropriate signature, TraverseFunc(f) is a Traverser that calls f.
type TraverseFunc func(context.Context, Query) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFunc) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFunc) Traverse(ctx context.Context, q ent.Query) error {
	query, err := NewQuery(q)
	if err != nil {
		return err
	}
	return f(ctx, query)
}

// The EnvironmentFunc type is an adapter to allow the use of ordinary function as a Querier.
type EnvironmentFunc func(context.Context, *ent.EnvironmentQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f EnvironmentFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.EnvironmentQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.EnvironmentQuery", q)
}

// The TraverseEnvironment type is an adapter to allow the use of ordinary function as Traverser.
type TraverseEnvironment func(context.Context, *ent.EnvironmentQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseEnvironment) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseEnvironment) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.EnvironmentQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.EnvironmentQuery", q)
}

// The FunctionalityFunc type is an adapter to allow the use of ordinary function as a Querier.
type FunctionalityFunc func(context.Context, *ent.FunctionalityQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f FunctionalityFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.FunctionalityQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.FunctionalityQuery", q)
}

// The TraverseFunctionality type is an adapter to allow the use of ordinary function as Traverser.
type TraverseFunctionality func(context.Context, *ent.FunctionalityQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFunctionality) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFunctionality) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FunctionalityQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.FunctionalityQuery", q)
}

// The IncidentFunc type is an adapter to allow the use of ordinary function as a Querier.
type IncidentFunc func(context.Context, *ent.IncidentQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f IncidentFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.IncidentQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.IncidentQuery", q)
}

// The TraverseIncident type is an adapter to allow the use of ordinary function as Traverser.
type TraverseIncident func(context.Context, *ent.IncidentQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseIncident) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseIncident) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.IncidentQuery", q)
}

// The IncidentDebriefFunc type is an adapter to allow the use of ordinary function as a Querier.
type IncidentDebriefFunc func(context.Context, *ent.IncidentDebriefQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f IncidentDebriefFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.IncidentDebriefQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.IncidentDebriefQuery", q)
}

// The TraverseIncidentDebrief type is an adapter to allow the use of ordinary function as Traverser.
type TraverseIncidentDebrief func(context.Context, *ent.IncidentDebriefQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseIncidentDebrief) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseIncidentDebrief) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentDebriefQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.IncidentDebriefQuery", q)
}

// The IncidentDebriefMessageFunc type is an adapter to allow the use of ordinary function as a Querier.
type IncidentDebriefMessageFunc func(context.Context, *ent.IncidentDebriefMessageQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f IncidentDebriefMessageFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.IncidentDebriefMessageQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.IncidentDebriefMessageQuery", q)
}

// The TraverseIncidentDebriefMessage type is an adapter to allow the use of ordinary function as Traverser.
type TraverseIncidentDebriefMessage func(context.Context, *ent.IncidentDebriefMessageQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseIncidentDebriefMessage) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseIncidentDebriefMessage) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentDebriefMessageQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.IncidentDebriefMessageQuery", q)
}

// The IncidentDebriefQuestionFunc type is an adapter to allow the use of ordinary function as a Querier.
type IncidentDebriefQuestionFunc func(context.Context, *ent.IncidentDebriefQuestionQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f IncidentDebriefQuestionFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.IncidentDebriefQuestionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.IncidentDebriefQuestionQuery", q)
}

// The TraverseIncidentDebriefQuestion type is an adapter to allow the use of ordinary function as Traverser.
type TraverseIncidentDebriefQuestion func(context.Context, *ent.IncidentDebriefQuestionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseIncidentDebriefQuestion) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseIncidentDebriefQuestion) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentDebriefQuestionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.IncidentDebriefQuestionQuery", q)
}

// The IncidentDebriefSuggestionFunc type is an adapter to allow the use of ordinary function as a Querier.
type IncidentDebriefSuggestionFunc func(context.Context, *ent.IncidentDebriefSuggestionQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f IncidentDebriefSuggestionFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.IncidentDebriefSuggestionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.IncidentDebriefSuggestionQuery", q)
}

// The TraverseIncidentDebriefSuggestion type is an adapter to allow the use of ordinary function as Traverser.
type TraverseIncidentDebriefSuggestion func(context.Context, *ent.IncidentDebriefSuggestionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseIncidentDebriefSuggestion) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseIncidentDebriefSuggestion) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentDebriefSuggestionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.IncidentDebriefSuggestionQuery", q)
}

// The IncidentEventFunc type is an adapter to allow the use of ordinary function as a Querier.
type IncidentEventFunc func(context.Context, *ent.IncidentEventQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f IncidentEventFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.IncidentEventQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.IncidentEventQuery", q)
}

// The TraverseIncidentEvent type is an adapter to allow the use of ordinary function as Traverser.
type TraverseIncidentEvent func(context.Context, *ent.IncidentEventQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseIncidentEvent) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseIncidentEvent) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentEventQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.IncidentEventQuery", q)
}

// The IncidentEventContextFunc type is an adapter to allow the use of ordinary function as a Querier.
type IncidentEventContextFunc func(context.Context, *ent.IncidentEventContextQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f IncidentEventContextFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.IncidentEventContextQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.IncidentEventContextQuery", q)
}

// The TraverseIncidentEventContext type is an adapter to allow the use of ordinary function as Traverser.
type TraverseIncidentEventContext func(context.Context, *ent.IncidentEventContextQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseIncidentEventContext) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseIncidentEventContext) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentEventContextQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.IncidentEventContextQuery", q)
}

// The IncidentEventContributingFactorFunc type is an adapter to allow the use of ordinary function as a Querier.
type IncidentEventContributingFactorFunc func(context.Context, *ent.IncidentEventContributingFactorQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f IncidentEventContributingFactorFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.IncidentEventContributingFactorQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.IncidentEventContributingFactorQuery", q)
}

// The TraverseIncidentEventContributingFactor type is an adapter to allow the use of ordinary function as Traverser.
type TraverseIncidentEventContributingFactor func(context.Context, *ent.IncidentEventContributingFactorQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseIncidentEventContributingFactor) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseIncidentEventContributingFactor) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentEventContributingFactorQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.IncidentEventContributingFactorQuery", q)
}

// The IncidentEventEvidenceFunc type is an adapter to allow the use of ordinary function as a Querier.
type IncidentEventEvidenceFunc func(context.Context, *ent.IncidentEventEvidenceQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f IncidentEventEvidenceFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.IncidentEventEvidenceQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.IncidentEventEvidenceQuery", q)
}

// The TraverseIncidentEventEvidence type is an adapter to allow the use of ordinary function as Traverser.
type TraverseIncidentEventEvidence func(context.Context, *ent.IncidentEventEvidenceQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseIncidentEventEvidence) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseIncidentEventEvidence) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentEventEvidenceQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.IncidentEventEvidenceQuery", q)
}

// The IncidentEventSystemComponentFunc type is an adapter to allow the use of ordinary function as a Querier.
type IncidentEventSystemComponentFunc func(context.Context, *ent.IncidentEventSystemComponentQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f IncidentEventSystemComponentFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.IncidentEventSystemComponentQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.IncidentEventSystemComponentQuery", q)
}

// The TraverseIncidentEventSystemComponent type is an adapter to allow the use of ordinary function as Traverser.
type TraverseIncidentEventSystemComponent func(context.Context, *ent.IncidentEventSystemComponentQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseIncidentEventSystemComponent) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseIncidentEventSystemComponent) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentEventSystemComponentQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.IncidentEventSystemComponentQuery", q)
}

// The IncidentFieldFunc type is an adapter to allow the use of ordinary function as a Querier.
type IncidentFieldFunc func(context.Context, *ent.IncidentFieldQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f IncidentFieldFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.IncidentFieldQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.IncidentFieldQuery", q)
}

// The TraverseIncidentField type is an adapter to allow the use of ordinary function as Traverser.
type TraverseIncidentField func(context.Context, *ent.IncidentFieldQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseIncidentField) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseIncidentField) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentFieldQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.IncidentFieldQuery", q)
}

// The IncidentFieldOptionFunc type is an adapter to allow the use of ordinary function as a Querier.
type IncidentFieldOptionFunc func(context.Context, *ent.IncidentFieldOptionQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f IncidentFieldOptionFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.IncidentFieldOptionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.IncidentFieldOptionQuery", q)
}

// The TraverseIncidentFieldOption type is an adapter to allow the use of ordinary function as Traverser.
type TraverseIncidentFieldOption func(context.Context, *ent.IncidentFieldOptionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseIncidentFieldOption) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseIncidentFieldOption) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentFieldOptionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.IncidentFieldOptionQuery", q)
}

// The IncidentLinkFunc type is an adapter to allow the use of ordinary function as a Querier.
type IncidentLinkFunc func(context.Context, *ent.IncidentLinkQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f IncidentLinkFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.IncidentLinkQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.IncidentLinkQuery", q)
}

// The TraverseIncidentLink type is an adapter to allow the use of ordinary function as Traverser.
type TraverseIncidentLink func(context.Context, *ent.IncidentLinkQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseIncidentLink) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseIncidentLink) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentLinkQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.IncidentLinkQuery", q)
}

// The IncidentMilestoneFunc type is an adapter to allow the use of ordinary function as a Querier.
type IncidentMilestoneFunc func(context.Context, *ent.IncidentMilestoneQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f IncidentMilestoneFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.IncidentMilestoneQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.IncidentMilestoneQuery", q)
}

// The TraverseIncidentMilestone type is an adapter to allow the use of ordinary function as Traverser.
type TraverseIncidentMilestone func(context.Context, *ent.IncidentMilestoneQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseIncidentMilestone) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseIncidentMilestone) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentMilestoneQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.IncidentMilestoneQuery", q)
}

// The IncidentRoleFunc type is an adapter to allow the use of ordinary function as a Querier.
type IncidentRoleFunc func(context.Context, *ent.IncidentRoleQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f IncidentRoleFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.IncidentRoleQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.IncidentRoleQuery", q)
}

// The TraverseIncidentRole type is an adapter to allow the use of ordinary function as Traverser.
type TraverseIncidentRole func(context.Context, *ent.IncidentRoleQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseIncidentRole) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseIncidentRole) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentRoleQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.IncidentRoleQuery", q)
}

// The IncidentRoleAssignmentFunc type is an adapter to allow the use of ordinary function as a Querier.
type IncidentRoleAssignmentFunc func(context.Context, *ent.IncidentRoleAssignmentQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f IncidentRoleAssignmentFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.IncidentRoleAssignmentQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.IncidentRoleAssignmentQuery", q)
}

// The TraverseIncidentRoleAssignment type is an adapter to allow the use of ordinary function as Traverser.
type TraverseIncidentRoleAssignment func(context.Context, *ent.IncidentRoleAssignmentQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseIncidentRoleAssignment) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseIncidentRoleAssignment) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentRoleAssignmentQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.IncidentRoleAssignmentQuery", q)
}

// The IncidentSeverityFunc type is an adapter to allow the use of ordinary function as a Querier.
type IncidentSeverityFunc func(context.Context, *ent.IncidentSeverityQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f IncidentSeverityFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.IncidentSeverityQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.IncidentSeverityQuery", q)
}

// The TraverseIncidentSeverity type is an adapter to allow the use of ordinary function as Traverser.
type TraverseIncidentSeverity func(context.Context, *ent.IncidentSeverityQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseIncidentSeverity) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseIncidentSeverity) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentSeverityQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.IncidentSeverityQuery", q)
}

// The IncidentTagFunc type is an adapter to allow the use of ordinary function as a Querier.
type IncidentTagFunc func(context.Context, *ent.IncidentTagQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f IncidentTagFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.IncidentTagQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.IncidentTagQuery", q)
}

// The TraverseIncidentTag type is an adapter to allow the use of ordinary function as Traverser.
type TraverseIncidentTag func(context.Context, *ent.IncidentTagQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseIncidentTag) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseIncidentTag) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentTagQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.IncidentTagQuery", q)
}

// The IncidentTeamAssignmentFunc type is an adapter to allow the use of ordinary function as a Querier.
type IncidentTeamAssignmentFunc func(context.Context, *ent.IncidentTeamAssignmentQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f IncidentTeamAssignmentFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.IncidentTeamAssignmentQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.IncidentTeamAssignmentQuery", q)
}

// The TraverseIncidentTeamAssignment type is an adapter to allow the use of ordinary function as Traverser.
type TraverseIncidentTeamAssignment func(context.Context, *ent.IncidentTeamAssignmentQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseIncidentTeamAssignment) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseIncidentTeamAssignment) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentTeamAssignmentQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.IncidentTeamAssignmentQuery", q)
}

// The IncidentTypeFunc type is an adapter to allow the use of ordinary function as a Querier.
type IncidentTypeFunc func(context.Context, *ent.IncidentTypeQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f IncidentTypeFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.IncidentTypeQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.IncidentTypeQuery", q)
}

// The TraverseIncidentType type is an adapter to allow the use of ordinary function as Traverser.
type TraverseIncidentType func(context.Context, *ent.IncidentTypeQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseIncidentType) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseIncidentType) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IncidentTypeQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.IncidentTypeQuery", q)
}

// The MeetingScheduleFunc type is an adapter to allow the use of ordinary function as a Querier.
type MeetingScheduleFunc func(context.Context, *ent.MeetingScheduleQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f MeetingScheduleFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.MeetingScheduleQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.MeetingScheduleQuery", q)
}

// The TraverseMeetingSchedule type is an adapter to allow the use of ordinary function as Traverser.
type TraverseMeetingSchedule func(context.Context, *ent.MeetingScheduleQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseMeetingSchedule) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseMeetingSchedule) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.MeetingScheduleQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.MeetingScheduleQuery", q)
}

// The MeetingSessionFunc type is an adapter to allow the use of ordinary function as a Querier.
type MeetingSessionFunc func(context.Context, *ent.MeetingSessionQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f MeetingSessionFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.MeetingSessionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.MeetingSessionQuery", q)
}

// The TraverseMeetingSession type is an adapter to allow the use of ordinary function as Traverser.
type TraverseMeetingSession func(context.Context, *ent.MeetingSessionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseMeetingSession) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseMeetingSession) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.MeetingSessionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.MeetingSessionQuery", q)
}

// The OncallAlertFunc type is an adapter to allow the use of ordinary function as a Querier.
type OncallAlertFunc func(context.Context, *ent.OncallAlertQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OncallAlertFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OncallAlertQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OncallAlertQuery", q)
}

// The TraverseOncallAlert type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOncallAlert func(context.Context, *ent.OncallAlertQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOncallAlert) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOncallAlert) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OncallAlertQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OncallAlertQuery", q)
}

// The OncallAlertInstanceFunc type is an adapter to allow the use of ordinary function as a Querier.
type OncallAlertInstanceFunc func(context.Context, *ent.OncallAlertInstanceQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OncallAlertInstanceFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OncallAlertInstanceQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OncallAlertInstanceQuery", q)
}

// The TraverseOncallAlertInstance type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOncallAlertInstance func(context.Context, *ent.OncallAlertInstanceQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOncallAlertInstance) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOncallAlertInstance) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OncallAlertInstanceQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OncallAlertInstanceQuery", q)
}

// The OncallHandoverTemplateFunc type is an adapter to allow the use of ordinary function as a Querier.
type OncallHandoverTemplateFunc func(context.Context, *ent.OncallHandoverTemplateQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OncallHandoverTemplateFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OncallHandoverTemplateQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OncallHandoverTemplateQuery", q)
}

// The TraverseOncallHandoverTemplate type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOncallHandoverTemplate func(context.Context, *ent.OncallHandoverTemplateQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOncallHandoverTemplate) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOncallHandoverTemplate) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OncallHandoverTemplateQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OncallHandoverTemplateQuery", q)
}

// The OncallRosterFunc type is an adapter to allow the use of ordinary function as a Querier.
type OncallRosterFunc func(context.Context, *ent.OncallRosterQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OncallRosterFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OncallRosterQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OncallRosterQuery", q)
}

// The TraverseOncallRoster type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOncallRoster func(context.Context, *ent.OncallRosterQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOncallRoster) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOncallRoster) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OncallRosterQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OncallRosterQuery", q)
}

// The OncallScheduleFunc type is an adapter to allow the use of ordinary function as a Querier.
type OncallScheduleFunc func(context.Context, *ent.OncallScheduleQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OncallScheduleFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OncallScheduleQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OncallScheduleQuery", q)
}

// The TraverseOncallSchedule type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOncallSchedule func(context.Context, *ent.OncallScheduleQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOncallSchedule) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOncallSchedule) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OncallScheduleQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OncallScheduleQuery", q)
}

// The OncallScheduleParticipantFunc type is an adapter to allow the use of ordinary function as a Querier.
type OncallScheduleParticipantFunc func(context.Context, *ent.OncallScheduleParticipantQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OncallScheduleParticipantFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OncallScheduleParticipantQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OncallScheduleParticipantQuery", q)
}

// The TraverseOncallScheduleParticipant type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOncallScheduleParticipant func(context.Context, *ent.OncallScheduleParticipantQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOncallScheduleParticipant) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOncallScheduleParticipant) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OncallScheduleParticipantQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OncallScheduleParticipantQuery", q)
}

// The OncallUserShiftFunc type is an adapter to allow the use of ordinary function as a Querier.
type OncallUserShiftFunc func(context.Context, *ent.OncallUserShiftQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OncallUserShiftFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OncallUserShiftQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OncallUserShiftQuery", q)
}

// The TraverseOncallUserShift type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOncallUserShift func(context.Context, *ent.OncallUserShiftQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOncallUserShift) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOncallUserShift) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OncallUserShiftQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OncallUserShiftQuery", q)
}

// The OncallUserShiftAnnotationFunc type is an adapter to allow the use of ordinary function as a Querier.
type OncallUserShiftAnnotationFunc func(context.Context, *ent.OncallUserShiftAnnotationQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OncallUserShiftAnnotationFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OncallUserShiftAnnotationQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OncallUserShiftAnnotationQuery", q)
}

// The TraverseOncallUserShiftAnnotation type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOncallUserShiftAnnotation func(context.Context, *ent.OncallUserShiftAnnotationQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOncallUserShiftAnnotation) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOncallUserShiftAnnotation) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OncallUserShiftAnnotationQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OncallUserShiftAnnotationQuery", q)
}

// The OncallUserShiftCoverFunc type is an adapter to allow the use of ordinary function as a Querier.
type OncallUserShiftCoverFunc func(context.Context, *ent.OncallUserShiftCoverQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OncallUserShiftCoverFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OncallUserShiftCoverQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OncallUserShiftCoverQuery", q)
}

// The TraverseOncallUserShiftCover type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOncallUserShiftCover func(context.Context, *ent.OncallUserShiftCoverQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOncallUserShiftCover) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOncallUserShiftCover) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OncallUserShiftCoverQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OncallUserShiftCoverQuery", q)
}

// The OncallUserShiftHandoverFunc type is an adapter to allow the use of ordinary function as a Querier.
type OncallUserShiftHandoverFunc func(context.Context, *ent.OncallUserShiftHandoverQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OncallUserShiftHandoverFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OncallUserShiftHandoverQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OncallUserShiftHandoverQuery", q)
}

// The TraverseOncallUserShiftHandover type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOncallUserShiftHandover func(context.Context, *ent.OncallUserShiftHandoverQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOncallUserShiftHandover) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOncallUserShiftHandover) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OncallUserShiftHandoverQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OncallUserShiftHandoverQuery", q)
}

// The ProviderConfigFunc type is an adapter to allow the use of ordinary function as a Querier.
type ProviderConfigFunc func(context.Context, *ent.ProviderConfigQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ProviderConfigFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ProviderConfigQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ProviderConfigQuery", q)
}

// The TraverseProviderConfig type is an adapter to allow the use of ordinary function as Traverser.
type TraverseProviderConfig func(context.Context, *ent.ProviderConfigQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseProviderConfig) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseProviderConfig) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ProviderConfigQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ProviderConfigQuery", q)
}

// The ProviderSyncHistoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type ProviderSyncHistoryFunc func(context.Context, *ent.ProviderSyncHistoryQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ProviderSyncHistoryFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ProviderSyncHistoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ProviderSyncHistoryQuery", q)
}

// The TraverseProviderSyncHistory type is an adapter to allow the use of ordinary function as Traverser.
type TraverseProviderSyncHistory func(context.Context, *ent.ProviderSyncHistoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseProviderSyncHistory) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseProviderSyncHistory) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ProviderSyncHistoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ProviderSyncHistoryQuery", q)
}

// The RetrospectiveFunc type is an adapter to allow the use of ordinary function as a Querier.
type RetrospectiveFunc func(context.Context, *ent.RetrospectiveQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f RetrospectiveFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.RetrospectiveQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.RetrospectiveQuery", q)
}

// The TraverseRetrospective type is an adapter to allow the use of ordinary function as Traverser.
type TraverseRetrospective func(context.Context, *ent.RetrospectiveQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseRetrospective) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseRetrospective) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RetrospectiveQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.RetrospectiveQuery", q)
}

// The RetrospectiveDiscussionFunc type is an adapter to allow the use of ordinary function as a Querier.
type RetrospectiveDiscussionFunc func(context.Context, *ent.RetrospectiveDiscussionQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f RetrospectiveDiscussionFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.RetrospectiveDiscussionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.RetrospectiveDiscussionQuery", q)
}

// The TraverseRetrospectiveDiscussion type is an adapter to allow the use of ordinary function as Traverser.
type TraverseRetrospectiveDiscussion func(context.Context, *ent.RetrospectiveDiscussionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseRetrospectiveDiscussion) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseRetrospectiveDiscussion) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RetrospectiveDiscussionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.RetrospectiveDiscussionQuery", q)
}

// The RetrospectiveDiscussionReplyFunc type is an adapter to allow the use of ordinary function as a Querier.
type RetrospectiveDiscussionReplyFunc func(context.Context, *ent.RetrospectiveDiscussionReplyQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f RetrospectiveDiscussionReplyFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.RetrospectiveDiscussionReplyQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.RetrospectiveDiscussionReplyQuery", q)
}

// The TraverseRetrospectiveDiscussionReply type is an adapter to allow the use of ordinary function as Traverser.
type TraverseRetrospectiveDiscussionReply func(context.Context, *ent.RetrospectiveDiscussionReplyQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseRetrospectiveDiscussionReply) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseRetrospectiveDiscussionReply) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RetrospectiveDiscussionReplyQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.RetrospectiveDiscussionReplyQuery", q)
}

// The RetrospectiveReviewFunc type is an adapter to allow the use of ordinary function as a Querier.
type RetrospectiveReviewFunc func(context.Context, *ent.RetrospectiveReviewQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f RetrospectiveReviewFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.RetrospectiveReviewQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.RetrospectiveReviewQuery", q)
}

// The TraverseRetrospectiveReview type is an adapter to allow the use of ordinary function as Traverser.
type TraverseRetrospectiveReview func(context.Context, *ent.RetrospectiveReviewQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseRetrospectiveReview) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseRetrospectiveReview) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RetrospectiveReviewQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.RetrospectiveReviewQuery", q)
}

// The SystemAnalysisFunc type is an adapter to allow the use of ordinary function as a Querier.
type SystemAnalysisFunc func(context.Context, *ent.SystemAnalysisQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SystemAnalysisFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SystemAnalysisQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SystemAnalysisQuery", q)
}

// The TraverseSystemAnalysis type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSystemAnalysis func(context.Context, *ent.SystemAnalysisQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSystemAnalysis) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSystemAnalysis) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SystemAnalysisQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SystemAnalysisQuery", q)
}

// The SystemAnalysisComponentFunc type is an adapter to allow the use of ordinary function as a Querier.
type SystemAnalysisComponentFunc func(context.Context, *ent.SystemAnalysisComponentQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SystemAnalysisComponentFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SystemAnalysisComponentQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SystemAnalysisComponentQuery", q)
}

// The TraverseSystemAnalysisComponent type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSystemAnalysisComponent func(context.Context, *ent.SystemAnalysisComponentQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSystemAnalysisComponent) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSystemAnalysisComponent) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SystemAnalysisComponentQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SystemAnalysisComponentQuery", q)
}

// The SystemComponentFunc type is an adapter to allow the use of ordinary function as a Querier.
type SystemComponentFunc func(context.Context, *ent.SystemComponentQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SystemComponentFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SystemComponentQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SystemComponentQuery", q)
}

// The TraverseSystemComponent type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSystemComponent func(context.Context, *ent.SystemComponentQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSystemComponent) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSystemComponent) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SystemComponentQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SystemComponentQuery", q)
}

// The SystemComponentConstraintFunc type is an adapter to allow the use of ordinary function as a Querier.
type SystemComponentConstraintFunc func(context.Context, *ent.SystemComponentConstraintQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SystemComponentConstraintFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SystemComponentConstraintQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SystemComponentConstraintQuery", q)
}

// The TraverseSystemComponentConstraint type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSystemComponentConstraint func(context.Context, *ent.SystemComponentConstraintQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSystemComponentConstraint) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSystemComponentConstraint) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SystemComponentConstraintQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SystemComponentConstraintQuery", q)
}

// The SystemComponentControlFunc type is an adapter to allow the use of ordinary function as a Querier.
type SystemComponentControlFunc func(context.Context, *ent.SystemComponentControlQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SystemComponentControlFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SystemComponentControlQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SystemComponentControlQuery", q)
}

// The TraverseSystemComponentControl type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSystemComponentControl func(context.Context, *ent.SystemComponentControlQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSystemComponentControl) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSystemComponentControl) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SystemComponentControlQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SystemComponentControlQuery", q)
}

// The SystemComponentKindFunc type is an adapter to allow the use of ordinary function as a Querier.
type SystemComponentKindFunc func(context.Context, *ent.SystemComponentKindQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SystemComponentKindFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SystemComponentKindQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SystemComponentKindQuery", q)
}

// The TraverseSystemComponentKind type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSystemComponentKind func(context.Context, *ent.SystemComponentKindQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSystemComponentKind) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSystemComponentKind) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SystemComponentKindQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SystemComponentKindQuery", q)
}

// The SystemComponentSignalFunc type is an adapter to allow the use of ordinary function as a Querier.
type SystemComponentSignalFunc func(context.Context, *ent.SystemComponentSignalQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SystemComponentSignalFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SystemComponentSignalQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SystemComponentSignalQuery", q)
}

// The TraverseSystemComponentSignal type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSystemComponentSignal func(context.Context, *ent.SystemComponentSignalQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSystemComponentSignal) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSystemComponentSignal) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SystemComponentSignalQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SystemComponentSignalQuery", q)
}

// The SystemRelationshipFunc type is an adapter to allow the use of ordinary function as a Querier.
type SystemRelationshipFunc func(context.Context, *ent.SystemRelationshipQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SystemRelationshipFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SystemRelationshipQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SystemRelationshipQuery", q)
}

// The TraverseSystemRelationship type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSystemRelationship func(context.Context, *ent.SystemRelationshipQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSystemRelationship) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSystemRelationship) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SystemRelationshipQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SystemRelationshipQuery", q)
}

// The SystemRelationshipControlActionFunc type is an adapter to allow the use of ordinary function as a Querier.
type SystemRelationshipControlActionFunc func(context.Context, *ent.SystemRelationshipControlActionQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SystemRelationshipControlActionFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SystemRelationshipControlActionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SystemRelationshipControlActionQuery", q)
}

// The TraverseSystemRelationshipControlAction type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSystemRelationshipControlAction func(context.Context, *ent.SystemRelationshipControlActionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSystemRelationshipControlAction) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSystemRelationshipControlAction) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SystemRelationshipControlActionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SystemRelationshipControlActionQuery", q)
}

// The SystemRelationshipFeedbackSignalFunc type is an adapter to allow the use of ordinary function as a Querier.
type SystemRelationshipFeedbackSignalFunc func(context.Context, *ent.SystemRelationshipFeedbackSignalQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SystemRelationshipFeedbackSignalFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SystemRelationshipFeedbackSignalQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SystemRelationshipFeedbackSignalQuery", q)
}

// The TraverseSystemRelationshipFeedbackSignal type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSystemRelationshipFeedbackSignal func(context.Context, *ent.SystemRelationshipFeedbackSignalQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSystemRelationshipFeedbackSignal) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSystemRelationshipFeedbackSignal) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SystemRelationshipFeedbackSignalQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SystemRelationshipFeedbackSignalQuery", q)
}

// The TaskFunc type is an adapter to allow the use of ordinary function as a Querier.
type TaskFunc func(context.Context, *ent.TaskQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f TaskFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.TaskQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.TaskQuery", q)
}

// The TraverseTask type is an adapter to allow the use of ordinary function as Traverser.
type TraverseTask func(context.Context, *ent.TaskQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseTask) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseTask) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TaskQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.TaskQuery", q)
}

// The TeamFunc type is an adapter to allow the use of ordinary function as a Querier.
type TeamFunc func(context.Context, *ent.TeamQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f TeamFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.TeamQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.TeamQuery", q)
}

// The TraverseTeam type is an adapter to allow the use of ordinary function as Traverser.
type TraverseTeam func(context.Context, *ent.TeamQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseTeam) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseTeam) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TeamQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.TeamQuery", q)
}

// The UserFunc type is an adapter to allow the use of ordinary function as a Querier.
type UserFunc func(context.Context, *ent.UserQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UserFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UserQuery", q)
}

// The TraverseUser type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUser func(context.Context, *ent.UserQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUser) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUser) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UserQuery", q)
}

// NewQuery returns the generic Query interface for the given typed query.
func NewQuery(q ent.Query) (Query, error) {
	switch q := q.(type) {
	case *ent.EnvironmentQuery:
		return &query[*ent.EnvironmentQuery, predicate.Environment, environment.OrderOption]{typ: ent.TypeEnvironment, tq: q}, nil
	case *ent.FunctionalityQuery:
		return &query[*ent.FunctionalityQuery, predicate.Functionality, functionality.OrderOption]{typ: ent.TypeFunctionality, tq: q}, nil
	case *ent.IncidentQuery:
		return &query[*ent.IncidentQuery, predicate.Incident, incident.OrderOption]{typ: ent.TypeIncident, tq: q}, nil
	case *ent.IncidentDebriefQuery:
		return &query[*ent.IncidentDebriefQuery, predicate.IncidentDebrief, incidentdebrief.OrderOption]{typ: ent.TypeIncidentDebrief, tq: q}, nil
	case *ent.IncidentDebriefMessageQuery:
		return &query[*ent.IncidentDebriefMessageQuery, predicate.IncidentDebriefMessage, incidentdebriefmessage.OrderOption]{typ: ent.TypeIncidentDebriefMessage, tq: q}, nil
	case *ent.IncidentDebriefQuestionQuery:
		return &query[*ent.IncidentDebriefQuestionQuery, predicate.IncidentDebriefQuestion, incidentdebriefquestion.OrderOption]{typ: ent.TypeIncidentDebriefQuestion, tq: q}, nil
	case *ent.IncidentDebriefSuggestionQuery:
		return &query[*ent.IncidentDebriefSuggestionQuery, predicate.IncidentDebriefSuggestion, incidentdebriefsuggestion.OrderOption]{typ: ent.TypeIncidentDebriefSuggestion, tq: q}, nil
	case *ent.IncidentEventQuery:
		return &query[*ent.IncidentEventQuery, predicate.IncidentEvent, incidentevent.OrderOption]{typ: ent.TypeIncidentEvent, tq: q}, nil
	case *ent.IncidentEventContextQuery:
		return &query[*ent.IncidentEventContextQuery, predicate.IncidentEventContext, incidenteventcontext.OrderOption]{typ: ent.TypeIncidentEventContext, tq: q}, nil
	case *ent.IncidentEventContributingFactorQuery:
		return &query[*ent.IncidentEventContributingFactorQuery, predicate.IncidentEventContributingFactor, incidenteventcontributingfactor.OrderOption]{typ: ent.TypeIncidentEventContributingFactor, tq: q}, nil
	case *ent.IncidentEventEvidenceQuery:
		return &query[*ent.IncidentEventEvidenceQuery, predicate.IncidentEventEvidence, incidenteventevidence.OrderOption]{typ: ent.TypeIncidentEventEvidence, tq: q}, nil
	case *ent.IncidentEventSystemComponentQuery:
		return &query[*ent.IncidentEventSystemComponentQuery, predicate.IncidentEventSystemComponent, incidenteventsystemcomponent.OrderOption]{typ: ent.TypeIncidentEventSystemComponent, tq: q}, nil
	case *ent.IncidentFieldQuery:
		return &query[*ent.IncidentFieldQuery, predicate.IncidentField, incidentfield.OrderOption]{typ: ent.TypeIncidentField, tq: q}, nil
	case *ent.IncidentFieldOptionQuery:
		return &query[*ent.IncidentFieldOptionQuery, predicate.IncidentFieldOption, incidentfieldoption.OrderOption]{typ: ent.TypeIncidentFieldOption, tq: q}, nil
	case *ent.IncidentLinkQuery:
		return &query[*ent.IncidentLinkQuery, predicate.IncidentLink, incidentlink.OrderOption]{typ: ent.TypeIncidentLink, tq: q}, nil
	case *ent.IncidentMilestoneQuery:
		return &query[*ent.IncidentMilestoneQuery, predicate.IncidentMilestone, incidentmilestone.OrderOption]{typ: ent.TypeIncidentMilestone, tq: q}, nil
	case *ent.IncidentRoleQuery:
		return &query[*ent.IncidentRoleQuery, predicate.IncidentRole, incidentrole.OrderOption]{typ: ent.TypeIncidentRole, tq: q}, nil
	case *ent.IncidentRoleAssignmentQuery:
		return &query[*ent.IncidentRoleAssignmentQuery, predicate.IncidentRoleAssignment, incidentroleassignment.OrderOption]{typ: ent.TypeIncidentRoleAssignment, tq: q}, nil
	case *ent.IncidentSeverityQuery:
		return &query[*ent.IncidentSeverityQuery, predicate.IncidentSeverity, incidentseverity.OrderOption]{typ: ent.TypeIncidentSeverity, tq: q}, nil
	case *ent.IncidentTagQuery:
		return &query[*ent.IncidentTagQuery, predicate.IncidentTag, incidenttag.OrderOption]{typ: ent.TypeIncidentTag, tq: q}, nil
	case *ent.IncidentTeamAssignmentQuery:
		return &query[*ent.IncidentTeamAssignmentQuery, predicate.IncidentTeamAssignment, incidentteamassignment.OrderOption]{typ: ent.TypeIncidentTeamAssignment, tq: q}, nil
	case *ent.IncidentTypeQuery:
		return &query[*ent.IncidentTypeQuery, predicate.IncidentType, incidenttype.OrderOption]{typ: ent.TypeIncidentType, tq: q}, nil
	case *ent.MeetingScheduleQuery:
		return &query[*ent.MeetingScheduleQuery, predicate.MeetingSchedule, meetingschedule.OrderOption]{typ: ent.TypeMeetingSchedule, tq: q}, nil
	case *ent.MeetingSessionQuery:
		return &query[*ent.MeetingSessionQuery, predicate.MeetingSession, meetingsession.OrderOption]{typ: ent.TypeMeetingSession, tq: q}, nil
	case *ent.OncallAlertQuery:
		return &query[*ent.OncallAlertQuery, predicate.OncallAlert, oncallalert.OrderOption]{typ: ent.TypeOncallAlert, tq: q}, nil
	case *ent.OncallAlertInstanceQuery:
		return &query[*ent.OncallAlertInstanceQuery, predicate.OncallAlertInstance, oncallalertinstance.OrderOption]{typ: ent.TypeOncallAlertInstance, tq: q}, nil
	case *ent.OncallHandoverTemplateQuery:
		return &query[*ent.OncallHandoverTemplateQuery, predicate.OncallHandoverTemplate, oncallhandovertemplate.OrderOption]{typ: ent.TypeOncallHandoverTemplate, tq: q}, nil
	case *ent.OncallRosterQuery:
		return &query[*ent.OncallRosterQuery, predicate.OncallRoster, oncallroster.OrderOption]{typ: ent.TypeOncallRoster, tq: q}, nil
	case *ent.OncallScheduleQuery:
		return &query[*ent.OncallScheduleQuery, predicate.OncallSchedule, oncallschedule.OrderOption]{typ: ent.TypeOncallSchedule, tq: q}, nil
	case *ent.OncallScheduleParticipantQuery:
		return &query[*ent.OncallScheduleParticipantQuery, predicate.OncallScheduleParticipant, oncallscheduleparticipant.OrderOption]{typ: ent.TypeOncallScheduleParticipant, tq: q}, nil
	case *ent.OncallUserShiftQuery:
		return &query[*ent.OncallUserShiftQuery, predicate.OncallUserShift, oncallusershift.OrderOption]{typ: ent.TypeOncallUserShift, tq: q}, nil
	case *ent.OncallUserShiftAnnotationQuery:
		return &query[*ent.OncallUserShiftAnnotationQuery, predicate.OncallUserShiftAnnotation, oncallusershiftannotation.OrderOption]{typ: ent.TypeOncallUserShiftAnnotation, tq: q}, nil
	case *ent.OncallUserShiftCoverQuery:
		return &query[*ent.OncallUserShiftCoverQuery, predicate.OncallUserShiftCover, oncallusershiftcover.OrderOption]{typ: ent.TypeOncallUserShiftCover, tq: q}, nil
	case *ent.OncallUserShiftHandoverQuery:
		return &query[*ent.OncallUserShiftHandoverQuery, predicate.OncallUserShiftHandover, oncallusershifthandover.OrderOption]{typ: ent.TypeOncallUserShiftHandover, tq: q}, nil
	case *ent.ProviderConfigQuery:
		return &query[*ent.ProviderConfigQuery, predicate.ProviderConfig, providerconfig.OrderOption]{typ: ent.TypeProviderConfig, tq: q}, nil
	case *ent.ProviderSyncHistoryQuery:
		return &query[*ent.ProviderSyncHistoryQuery, predicate.ProviderSyncHistory, providersynchistory.OrderOption]{typ: ent.TypeProviderSyncHistory, tq: q}, nil
	case *ent.RetrospectiveQuery:
		return &query[*ent.RetrospectiveQuery, predicate.Retrospective, retrospective.OrderOption]{typ: ent.TypeRetrospective, tq: q}, nil
	case *ent.RetrospectiveDiscussionQuery:
		return &query[*ent.RetrospectiveDiscussionQuery, predicate.RetrospectiveDiscussion, retrospectivediscussion.OrderOption]{typ: ent.TypeRetrospectiveDiscussion, tq: q}, nil
	case *ent.RetrospectiveDiscussionReplyQuery:
		return &query[*ent.RetrospectiveDiscussionReplyQuery, predicate.RetrospectiveDiscussionReply, retrospectivediscussionreply.OrderOption]{typ: ent.TypeRetrospectiveDiscussionReply, tq: q}, nil
	case *ent.RetrospectiveReviewQuery:
		return &query[*ent.RetrospectiveReviewQuery, predicate.RetrospectiveReview, retrospectivereview.OrderOption]{typ: ent.TypeRetrospectiveReview, tq: q}, nil
	case *ent.SystemAnalysisQuery:
		return &query[*ent.SystemAnalysisQuery, predicate.SystemAnalysis, systemanalysis.OrderOption]{typ: ent.TypeSystemAnalysis, tq: q}, nil
	case *ent.SystemAnalysisComponentQuery:
		return &query[*ent.SystemAnalysisComponentQuery, predicate.SystemAnalysisComponent, systemanalysiscomponent.OrderOption]{typ: ent.TypeSystemAnalysisComponent, tq: q}, nil
	case *ent.SystemComponentQuery:
		return &query[*ent.SystemComponentQuery, predicate.SystemComponent, systemcomponent.OrderOption]{typ: ent.TypeSystemComponent, tq: q}, nil
	case *ent.SystemComponentConstraintQuery:
		return &query[*ent.SystemComponentConstraintQuery, predicate.SystemComponentConstraint, systemcomponentconstraint.OrderOption]{typ: ent.TypeSystemComponentConstraint, tq: q}, nil
	case *ent.SystemComponentControlQuery:
		return &query[*ent.SystemComponentControlQuery, predicate.SystemComponentControl, systemcomponentcontrol.OrderOption]{typ: ent.TypeSystemComponentControl, tq: q}, nil
	case *ent.SystemComponentKindQuery:
		return &query[*ent.SystemComponentKindQuery, predicate.SystemComponentKind, systemcomponentkind.OrderOption]{typ: ent.TypeSystemComponentKind, tq: q}, nil
	case *ent.SystemComponentSignalQuery:
		return &query[*ent.SystemComponentSignalQuery, predicate.SystemComponentSignal, systemcomponentsignal.OrderOption]{typ: ent.TypeSystemComponentSignal, tq: q}, nil
	case *ent.SystemRelationshipQuery:
		return &query[*ent.SystemRelationshipQuery, predicate.SystemRelationship, systemrelationship.OrderOption]{typ: ent.TypeSystemRelationship, tq: q}, nil
	case *ent.SystemRelationshipControlActionQuery:
		return &query[*ent.SystemRelationshipControlActionQuery, predicate.SystemRelationshipControlAction, systemrelationshipcontrolaction.OrderOption]{typ: ent.TypeSystemRelationshipControlAction, tq: q}, nil
	case *ent.SystemRelationshipFeedbackSignalQuery:
		return &query[*ent.SystemRelationshipFeedbackSignalQuery, predicate.SystemRelationshipFeedbackSignal, systemrelationshipfeedbacksignal.OrderOption]{typ: ent.TypeSystemRelationshipFeedbackSignal, tq: q}, nil
	case *ent.TaskQuery:
		return &query[*ent.TaskQuery, predicate.Task, task.OrderOption]{typ: ent.TypeTask, tq: q}, nil
	case *ent.TeamQuery:
		return &query[*ent.TeamQuery, predicate.Team, team.OrderOption]{typ: ent.TypeTeam, tq: q}, nil
	case *ent.UserQuery:
		return &query[*ent.UserQuery, predicate.User, user.OrderOption]{typ: ent.TypeUser, tq: q}, nil
	default:
		return nil, fmt.Errorf("unknown query type %T", q)
	}
}

type query[T any, P ~func(*sql.Selector), R ~func(*sql.Selector)] struct {
	typ string
	tq  interface {
		Limit(int) T
		Offset(int) T
		Unique(bool) T
		Order(...R) T
		Where(...P) T
	}
}

func (q query[T, P, R]) Type() string {
	return q.typ
}

func (q query[T, P, R]) Limit(limit int) {
	q.tq.Limit(limit)
}

func (q query[T, P, R]) Offset(offset int) {
	q.tq.Offset(offset)
}

func (q query[T, P, R]) Unique(unique bool) {
	q.tq.Unique(unique)
}

func (q query[T, P, R]) Order(orders ...func(*sql.Selector)) {
	rs := make([]R, len(orders))
	for i := range orders {
		rs[i] = orders[i]
	}
	q.tq.Order(rs...)
}

func (q query[T, P, R]) WhereP(ps ...func(*sql.Selector)) {
	p := make([]P, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	q.tq.Where(p...)
}
