// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/incident"
	"github.com/rezible/rezible/ent/retrospective"
	"github.com/rezible/rezible/ent/systemanalysis"
	"github.com/rezible/rezible/ent/tenant"
)

// Retrospective is the model entity for the Retrospective schema.
type Retrospective struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID int `json:"tenant_id,omitempty"`
	// IncidentID holds the value of the "incident_id" field.
	IncidentID uuid.UUID `json:"incident_id,omitempty"`
	// SystemAnalysisID holds the value of the "system_analysis_id" field.
	SystemAnalysisID uuid.UUID `json:"system_analysis_id,omitempty"`
	// DocumentName holds the value of the "document_name" field.
	DocumentName string `json:"document_name,omitempty"`
	// Type holds the value of the "type" field.
	Type retrospective.Type `json:"type,omitempty"`
	// State holds the value of the "state" field.
	State retrospective.State `json:"state,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RetrospectiveQuery when eager-loading is set.
	Edges        RetrospectiveEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RetrospectiveEdges holds the relations/edges for other nodes in the graph.
type RetrospectiveEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Incident holds the value of the incident edge.
	Incident *Incident `json:"incident,omitempty"`
	// Comments holds the value of the comments edge.
	Comments []*RetrospectiveComment `json:"comments,omitempty"`
	// SystemAnalysis holds the value of the system_analysis edge.
	SystemAnalysis *SystemAnalysis `json:"system_analysis,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RetrospectiveEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// IncidentOrErr returns the Incident value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RetrospectiveEdges) IncidentOrErr() (*Incident, error) {
	if e.Incident != nil {
		return e.Incident, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: incident.Label}
	}
	return nil, &NotLoadedError{edge: "incident"}
}

// CommentsOrErr returns the Comments value or an error if the edge
// was not loaded in eager-loading.
func (e RetrospectiveEdges) CommentsOrErr() ([]*RetrospectiveComment, error) {
	if e.loadedTypes[2] {
		return e.Comments, nil
	}
	return nil, &NotLoadedError{edge: "comments"}
}

// SystemAnalysisOrErr returns the SystemAnalysis value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RetrospectiveEdges) SystemAnalysisOrErr() (*SystemAnalysis, error) {
	if e.SystemAnalysis != nil {
		return e.SystemAnalysis, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: systemanalysis.Label}
	}
	return nil, &NotLoadedError{edge: "system_analysis"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Retrospective) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case retrospective.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case retrospective.FieldDocumentName, retrospective.FieldType, retrospective.FieldState:
			values[i] = new(sql.NullString)
		case retrospective.FieldID, retrospective.FieldIncidentID, retrospective.FieldSystemAnalysisID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Retrospective fields.
func (r *Retrospective) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case retrospective.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				r.ID = *value
			}
		case retrospective.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				r.TenantID = int(value.Int64)
			}
		case retrospective.FieldIncidentID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field incident_id", values[i])
			} else if value != nil {
				r.IncidentID = *value
			}
		case retrospective.FieldSystemAnalysisID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field system_analysis_id", values[i])
			} else if value != nil {
				r.SystemAnalysisID = *value
			}
		case retrospective.FieldDocumentName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field document_name", values[i])
			} else if value.Valid {
				r.DocumentName = value.String
			}
		case retrospective.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				r.Type = retrospective.Type(value.String)
			}
		case retrospective.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				r.State = retrospective.State(value.String)
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Retrospective.
// This includes values selected through modifiers, order, etc.
func (r *Retrospective) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the Retrospective entity.
func (r *Retrospective) QueryTenant() *TenantQuery {
	return NewRetrospectiveClient(r.config).QueryTenant(r)
}

// QueryIncident queries the "incident" edge of the Retrospective entity.
func (r *Retrospective) QueryIncident() *IncidentQuery {
	return NewRetrospectiveClient(r.config).QueryIncident(r)
}

// QueryComments queries the "comments" edge of the Retrospective entity.
func (r *Retrospective) QueryComments() *RetrospectiveCommentQuery {
	return NewRetrospectiveClient(r.config).QueryComments(r)
}

// QuerySystemAnalysis queries the "system_analysis" edge of the Retrospective entity.
func (r *Retrospective) QuerySystemAnalysis() *SystemAnalysisQuery {
	return NewRetrospectiveClient(r.config).QuerySystemAnalysis(r)
}

// Update returns a builder for updating this Retrospective.
// Note that you need to call Retrospective.Unwrap() before calling this method if this Retrospective
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Retrospective) Update() *RetrospectiveUpdateOne {
	return NewRetrospectiveClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Retrospective entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Retrospective) Unwrap() *Retrospective {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Retrospective is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Retrospective) String() string {
	var builder strings.Builder
	builder.WriteString("Retrospective(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", r.TenantID))
	builder.WriteString(", ")
	builder.WriteString("incident_id=")
	builder.WriteString(fmt.Sprintf("%v", r.IncidentID))
	builder.WriteString(", ")
	builder.WriteString("system_analysis_id=")
	builder.WriteString(fmt.Sprintf("%v", r.SystemAnalysisID))
	builder.WriteString(", ")
	builder.WriteString("document_name=")
	builder.WriteString(r.DocumentName)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", r.Type))
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(fmt.Sprintf("%v", r.State))
	builder.WriteByte(')')
	return builder.String()
}

// Retrospectives is a parsable slice of Retrospective.
type Retrospectives []*Retrospective
