// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/incidentdebriefmessage"
	"github.com/rezible/rezible/ent/incidentdebriefquestion"
	"github.com/rezible/rezible/ent/incidentfield"
	"github.com/rezible/rezible/ent/incidentrole"
	"github.com/rezible/rezible/ent/incidentseverity"
	"github.com/rezible/rezible/ent/incidenttag"
	"github.com/rezible/rezible/ent/incidenttype"
	"github.com/rezible/rezible/ent/predicate"
)

// IncidentDebriefQuestionQuery is the builder for querying IncidentDebriefQuestion entities.
type IncidentDebriefQuestionQuery struct {
	config
	ctx                    *QueryContext
	order                  []incidentdebriefquestion.OrderOption
	inters                 []Interceptor
	predicates             []predicate.IncidentDebriefQuestion
	withMessages           *IncidentDebriefMessageQuery
	withIncidentFields     *IncidentFieldQuery
	withIncidentRoles      *IncidentRoleQuery
	withIncidentSeverities *IncidentSeverityQuery
	withIncidentTags       *IncidentTagQuery
	withIncidentTypes      *IncidentTypeQuery
	modifiers              []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the IncidentDebriefQuestionQuery builder.
func (idqq *IncidentDebriefQuestionQuery) Where(ps ...predicate.IncidentDebriefQuestion) *IncidentDebriefQuestionQuery {
	idqq.predicates = append(idqq.predicates, ps...)
	return idqq
}

// Limit the number of records to be returned by this query.
func (idqq *IncidentDebriefQuestionQuery) Limit(limit int) *IncidentDebriefQuestionQuery {
	idqq.ctx.Limit = &limit
	return idqq
}

// Offset to start from.
func (idqq *IncidentDebriefQuestionQuery) Offset(offset int) *IncidentDebriefQuestionQuery {
	idqq.ctx.Offset = &offset
	return idqq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (idqq *IncidentDebriefQuestionQuery) Unique(unique bool) *IncidentDebriefQuestionQuery {
	idqq.ctx.Unique = &unique
	return idqq
}

// Order specifies how the records should be ordered.
func (idqq *IncidentDebriefQuestionQuery) Order(o ...incidentdebriefquestion.OrderOption) *IncidentDebriefQuestionQuery {
	idqq.order = append(idqq.order, o...)
	return idqq
}

// QueryMessages chains the current query on the "messages" edge.
func (idqq *IncidentDebriefQuestionQuery) QueryMessages() *IncidentDebriefMessageQuery {
	query := (&IncidentDebriefMessageClient{config: idqq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := idqq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := idqq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(incidentdebriefquestion.Table, incidentdebriefquestion.FieldID, selector),
			sqlgraph.To(incidentdebriefmessage.Table, incidentdebriefmessage.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, incidentdebriefquestion.MessagesTable, incidentdebriefquestion.MessagesColumn),
		)
		fromU = sqlgraph.SetNeighbors(idqq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryIncidentFields chains the current query on the "incident_fields" edge.
func (idqq *IncidentDebriefQuestionQuery) QueryIncidentFields() *IncidentFieldQuery {
	query := (&IncidentFieldClient{config: idqq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := idqq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := idqq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(incidentdebriefquestion.Table, incidentdebriefquestion.FieldID, selector),
			sqlgraph.To(incidentfield.Table, incidentfield.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, incidentdebriefquestion.IncidentFieldsTable, incidentdebriefquestion.IncidentFieldsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(idqq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryIncidentRoles chains the current query on the "incident_roles" edge.
func (idqq *IncidentDebriefQuestionQuery) QueryIncidentRoles() *IncidentRoleQuery {
	query := (&IncidentRoleClient{config: idqq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := idqq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := idqq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(incidentdebriefquestion.Table, incidentdebriefquestion.FieldID, selector),
			sqlgraph.To(incidentrole.Table, incidentrole.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, incidentdebriefquestion.IncidentRolesTable, incidentdebriefquestion.IncidentRolesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(idqq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryIncidentSeverities chains the current query on the "incident_severities" edge.
func (idqq *IncidentDebriefQuestionQuery) QueryIncidentSeverities() *IncidentSeverityQuery {
	query := (&IncidentSeverityClient{config: idqq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := idqq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := idqq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(incidentdebriefquestion.Table, incidentdebriefquestion.FieldID, selector),
			sqlgraph.To(incidentseverity.Table, incidentseverity.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, incidentdebriefquestion.IncidentSeveritiesTable, incidentdebriefquestion.IncidentSeveritiesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(idqq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryIncidentTags chains the current query on the "incident_tags" edge.
func (idqq *IncidentDebriefQuestionQuery) QueryIncidentTags() *IncidentTagQuery {
	query := (&IncidentTagClient{config: idqq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := idqq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := idqq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(incidentdebriefquestion.Table, incidentdebriefquestion.FieldID, selector),
			sqlgraph.To(incidenttag.Table, incidenttag.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, incidentdebriefquestion.IncidentTagsTable, incidentdebriefquestion.IncidentTagsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(idqq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryIncidentTypes chains the current query on the "incident_types" edge.
func (idqq *IncidentDebriefQuestionQuery) QueryIncidentTypes() *IncidentTypeQuery {
	query := (&IncidentTypeClient{config: idqq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := idqq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := idqq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(incidentdebriefquestion.Table, incidentdebriefquestion.FieldID, selector),
			sqlgraph.To(incidenttype.Table, incidenttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, incidentdebriefquestion.IncidentTypesTable, incidentdebriefquestion.IncidentTypesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(idqq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first IncidentDebriefQuestion entity from the query.
// Returns a *NotFoundError when no IncidentDebriefQuestion was found.
func (idqq *IncidentDebriefQuestionQuery) First(ctx context.Context) (*IncidentDebriefQuestion, error) {
	nodes, err := idqq.Limit(1).All(setContextOp(ctx, idqq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{incidentdebriefquestion.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (idqq *IncidentDebriefQuestionQuery) FirstX(ctx context.Context) *IncidentDebriefQuestion {
	node, err := idqq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first IncidentDebriefQuestion ID from the query.
// Returns a *NotFoundError when no IncidentDebriefQuestion ID was found.
func (idqq *IncidentDebriefQuestionQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = idqq.Limit(1).IDs(setContextOp(ctx, idqq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{incidentdebriefquestion.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (idqq *IncidentDebriefQuestionQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := idqq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single IncidentDebriefQuestion entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one IncidentDebriefQuestion entity is found.
// Returns a *NotFoundError when no IncidentDebriefQuestion entities are found.
func (idqq *IncidentDebriefQuestionQuery) Only(ctx context.Context) (*IncidentDebriefQuestion, error) {
	nodes, err := idqq.Limit(2).All(setContextOp(ctx, idqq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{incidentdebriefquestion.Label}
	default:
		return nil, &NotSingularError{incidentdebriefquestion.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (idqq *IncidentDebriefQuestionQuery) OnlyX(ctx context.Context) *IncidentDebriefQuestion {
	node, err := idqq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only IncidentDebriefQuestion ID in the query.
// Returns a *NotSingularError when more than one IncidentDebriefQuestion ID is found.
// Returns a *NotFoundError when no entities are found.
func (idqq *IncidentDebriefQuestionQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = idqq.Limit(2).IDs(setContextOp(ctx, idqq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{incidentdebriefquestion.Label}
	default:
		err = &NotSingularError{incidentdebriefquestion.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (idqq *IncidentDebriefQuestionQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := idqq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of IncidentDebriefQuestions.
func (idqq *IncidentDebriefQuestionQuery) All(ctx context.Context) ([]*IncidentDebriefQuestion, error) {
	ctx = setContextOp(ctx, idqq.ctx, ent.OpQueryAll)
	if err := idqq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*IncidentDebriefQuestion, *IncidentDebriefQuestionQuery]()
	return withInterceptors[[]*IncidentDebriefQuestion](ctx, idqq, qr, idqq.inters)
}

// AllX is like All, but panics if an error occurs.
func (idqq *IncidentDebriefQuestionQuery) AllX(ctx context.Context) []*IncidentDebriefQuestion {
	nodes, err := idqq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of IncidentDebriefQuestion IDs.
func (idqq *IncidentDebriefQuestionQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if idqq.ctx.Unique == nil && idqq.path != nil {
		idqq.Unique(true)
	}
	ctx = setContextOp(ctx, idqq.ctx, ent.OpQueryIDs)
	if err = idqq.Select(incidentdebriefquestion.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (idqq *IncidentDebriefQuestionQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := idqq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (idqq *IncidentDebriefQuestionQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, idqq.ctx, ent.OpQueryCount)
	if err := idqq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, idqq, querierCount[*IncidentDebriefQuestionQuery](), idqq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (idqq *IncidentDebriefQuestionQuery) CountX(ctx context.Context) int {
	count, err := idqq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (idqq *IncidentDebriefQuestionQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, idqq.ctx, ent.OpQueryExist)
	switch _, err := idqq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (idqq *IncidentDebriefQuestionQuery) ExistX(ctx context.Context) bool {
	exist, err := idqq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the IncidentDebriefQuestionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (idqq *IncidentDebriefQuestionQuery) Clone() *IncidentDebriefQuestionQuery {
	if idqq == nil {
		return nil
	}
	return &IncidentDebriefQuestionQuery{
		config:                 idqq.config,
		ctx:                    idqq.ctx.Clone(),
		order:                  append([]incidentdebriefquestion.OrderOption{}, idqq.order...),
		inters:                 append([]Interceptor{}, idqq.inters...),
		predicates:             append([]predicate.IncidentDebriefQuestion{}, idqq.predicates...),
		withMessages:           idqq.withMessages.Clone(),
		withIncidentFields:     idqq.withIncidentFields.Clone(),
		withIncidentRoles:      idqq.withIncidentRoles.Clone(),
		withIncidentSeverities: idqq.withIncidentSeverities.Clone(),
		withIncidentTags:       idqq.withIncidentTags.Clone(),
		withIncidentTypes:      idqq.withIncidentTypes.Clone(),
		// clone intermediate query.
		sql:       idqq.sql.Clone(),
		path:      idqq.path,
		modifiers: append([]func(*sql.Selector){}, idqq.modifiers...),
	}
}

// WithMessages tells the query-builder to eager-load the nodes that are connected to
// the "messages" edge. The optional arguments are used to configure the query builder of the edge.
func (idqq *IncidentDebriefQuestionQuery) WithMessages(opts ...func(*IncidentDebriefMessageQuery)) *IncidentDebriefQuestionQuery {
	query := (&IncidentDebriefMessageClient{config: idqq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	idqq.withMessages = query
	return idqq
}

// WithIncidentFields tells the query-builder to eager-load the nodes that are connected to
// the "incident_fields" edge. The optional arguments are used to configure the query builder of the edge.
func (idqq *IncidentDebriefQuestionQuery) WithIncidentFields(opts ...func(*IncidentFieldQuery)) *IncidentDebriefQuestionQuery {
	query := (&IncidentFieldClient{config: idqq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	idqq.withIncidentFields = query
	return idqq
}

// WithIncidentRoles tells the query-builder to eager-load the nodes that are connected to
// the "incident_roles" edge. The optional arguments are used to configure the query builder of the edge.
func (idqq *IncidentDebriefQuestionQuery) WithIncidentRoles(opts ...func(*IncidentRoleQuery)) *IncidentDebriefQuestionQuery {
	query := (&IncidentRoleClient{config: idqq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	idqq.withIncidentRoles = query
	return idqq
}

// WithIncidentSeverities tells the query-builder to eager-load the nodes that are connected to
// the "incident_severities" edge. The optional arguments are used to configure the query builder of the edge.
func (idqq *IncidentDebriefQuestionQuery) WithIncidentSeverities(opts ...func(*IncidentSeverityQuery)) *IncidentDebriefQuestionQuery {
	query := (&IncidentSeverityClient{config: idqq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	idqq.withIncidentSeverities = query
	return idqq
}

// WithIncidentTags tells the query-builder to eager-load the nodes that are connected to
// the "incident_tags" edge. The optional arguments are used to configure the query builder of the edge.
func (idqq *IncidentDebriefQuestionQuery) WithIncidentTags(opts ...func(*IncidentTagQuery)) *IncidentDebriefQuestionQuery {
	query := (&IncidentTagClient{config: idqq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	idqq.withIncidentTags = query
	return idqq
}

// WithIncidentTypes tells the query-builder to eager-load the nodes that are connected to
// the "incident_types" edge. The optional arguments are used to configure the query builder of the edge.
func (idqq *IncidentDebriefQuestionQuery) WithIncidentTypes(opts ...func(*IncidentTypeQuery)) *IncidentDebriefQuestionQuery {
	query := (&IncidentTypeClient{config: idqq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	idqq.withIncidentTypes = query
	return idqq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Content string `json:"content,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.IncidentDebriefQuestion.Query().
//		GroupBy(incidentdebriefquestion.FieldContent).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (idqq *IncidentDebriefQuestionQuery) GroupBy(field string, fields ...string) *IncidentDebriefQuestionGroupBy {
	idqq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &IncidentDebriefQuestionGroupBy{build: idqq}
	grbuild.flds = &idqq.ctx.Fields
	grbuild.label = incidentdebriefquestion.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Content string `json:"content,omitempty"`
//	}
//
//	client.IncidentDebriefQuestion.Query().
//		Select(incidentdebriefquestion.FieldContent).
//		Scan(ctx, &v)
func (idqq *IncidentDebriefQuestionQuery) Select(fields ...string) *IncidentDebriefQuestionSelect {
	idqq.ctx.Fields = append(idqq.ctx.Fields, fields...)
	sbuild := &IncidentDebriefQuestionSelect{IncidentDebriefQuestionQuery: idqq}
	sbuild.label = incidentdebriefquestion.Label
	sbuild.flds, sbuild.scan = &idqq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a IncidentDebriefQuestionSelect configured with the given aggregations.
func (idqq *IncidentDebriefQuestionQuery) Aggregate(fns ...AggregateFunc) *IncidentDebriefQuestionSelect {
	return idqq.Select().Aggregate(fns...)
}

func (idqq *IncidentDebriefQuestionQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range idqq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, idqq); err != nil {
				return err
			}
		}
	}
	for _, f := range idqq.ctx.Fields {
		if !incidentdebriefquestion.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if idqq.path != nil {
		prev, err := idqq.path(ctx)
		if err != nil {
			return err
		}
		idqq.sql = prev
	}
	if incidentdebriefquestion.Policy == nil {
		return errors.New("ent: uninitialized incidentdebriefquestion.Policy (forgotten import ent/runtime?)")
	}
	if err := incidentdebriefquestion.Policy.EvalQuery(ctx, idqq); err != nil {
		return err
	}
	return nil
}

func (idqq *IncidentDebriefQuestionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*IncidentDebriefQuestion, error) {
	var (
		nodes       = []*IncidentDebriefQuestion{}
		_spec       = idqq.querySpec()
		loadedTypes = [6]bool{
			idqq.withMessages != nil,
			idqq.withIncidentFields != nil,
			idqq.withIncidentRoles != nil,
			idqq.withIncidentSeverities != nil,
			idqq.withIncidentTags != nil,
			idqq.withIncidentTypes != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*IncidentDebriefQuestion).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &IncidentDebriefQuestion{config: idqq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(idqq.modifiers) > 0 {
		_spec.Modifiers = idqq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, idqq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := idqq.withMessages; query != nil {
		if err := idqq.loadMessages(ctx, query, nodes,
			func(n *IncidentDebriefQuestion) { n.Edges.Messages = []*IncidentDebriefMessage{} },
			func(n *IncidentDebriefQuestion, e *IncidentDebriefMessage) {
				n.Edges.Messages = append(n.Edges.Messages, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := idqq.withIncidentFields; query != nil {
		if err := idqq.loadIncidentFields(ctx, query, nodes,
			func(n *IncidentDebriefQuestion) { n.Edges.IncidentFields = []*IncidentField{} },
			func(n *IncidentDebriefQuestion, e *IncidentField) {
				n.Edges.IncidentFields = append(n.Edges.IncidentFields, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := idqq.withIncidentRoles; query != nil {
		if err := idqq.loadIncidentRoles(ctx, query, nodes,
			func(n *IncidentDebriefQuestion) { n.Edges.IncidentRoles = []*IncidentRole{} },
			func(n *IncidentDebriefQuestion, e *IncidentRole) {
				n.Edges.IncidentRoles = append(n.Edges.IncidentRoles, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := idqq.withIncidentSeverities; query != nil {
		if err := idqq.loadIncidentSeverities(ctx, query, nodes,
			func(n *IncidentDebriefQuestion) { n.Edges.IncidentSeverities = []*IncidentSeverity{} },
			func(n *IncidentDebriefQuestion, e *IncidentSeverity) {
				n.Edges.IncidentSeverities = append(n.Edges.IncidentSeverities, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := idqq.withIncidentTags; query != nil {
		if err := idqq.loadIncidentTags(ctx, query, nodes,
			func(n *IncidentDebriefQuestion) { n.Edges.IncidentTags = []*IncidentTag{} },
			func(n *IncidentDebriefQuestion, e *IncidentTag) {
				n.Edges.IncidentTags = append(n.Edges.IncidentTags, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := idqq.withIncidentTypes; query != nil {
		if err := idqq.loadIncidentTypes(ctx, query, nodes,
			func(n *IncidentDebriefQuestion) { n.Edges.IncidentTypes = []*IncidentType{} },
			func(n *IncidentDebriefQuestion, e *IncidentType) {
				n.Edges.IncidentTypes = append(n.Edges.IncidentTypes, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (idqq *IncidentDebriefQuestionQuery) loadMessages(ctx context.Context, query *IncidentDebriefMessageQuery, nodes []*IncidentDebriefQuestion, init func(*IncidentDebriefQuestion), assign func(*IncidentDebriefQuestion, *IncidentDebriefMessage)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*IncidentDebriefQuestion)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(incidentdebriefmessage.FieldQuestionID)
	}
	query.Where(predicate.IncidentDebriefMessage(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(incidentdebriefquestion.MessagesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.QuestionID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "question_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (idqq *IncidentDebriefQuestionQuery) loadIncidentFields(ctx context.Context, query *IncidentFieldQuery, nodes []*IncidentDebriefQuestion, init func(*IncidentDebriefQuestion), assign func(*IncidentDebriefQuestion, *IncidentField)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*IncidentDebriefQuestion)
	nids := make(map[uuid.UUID]map[*IncidentDebriefQuestion]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(incidentdebriefquestion.IncidentFieldsTable)
		s.Join(joinT).On(s.C(incidentfield.FieldID), joinT.C(incidentdebriefquestion.IncidentFieldsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(incidentdebriefquestion.IncidentFieldsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(incidentdebriefquestion.IncidentFieldsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*IncidentDebriefQuestion]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*IncidentField](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "incident_fields" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (idqq *IncidentDebriefQuestionQuery) loadIncidentRoles(ctx context.Context, query *IncidentRoleQuery, nodes []*IncidentDebriefQuestion, init func(*IncidentDebriefQuestion), assign func(*IncidentDebriefQuestion, *IncidentRole)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*IncidentDebriefQuestion)
	nids := make(map[uuid.UUID]map[*IncidentDebriefQuestion]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(incidentdebriefquestion.IncidentRolesTable)
		s.Join(joinT).On(s.C(incidentrole.FieldID), joinT.C(incidentdebriefquestion.IncidentRolesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(incidentdebriefquestion.IncidentRolesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(incidentdebriefquestion.IncidentRolesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*IncidentDebriefQuestion]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*IncidentRole](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "incident_roles" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (idqq *IncidentDebriefQuestionQuery) loadIncidentSeverities(ctx context.Context, query *IncidentSeverityQuery, nodes []*IncidentDebriefQuestion, init func(*IncidentDebriefQuestion), assign func(*IncidentDebriefQuestion, *IncidentSeverity)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*IncidentDebriefQuestion)
	nids := make(map[uuid.UUID]map[*IncidentDebriefQuestion]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(incidentdebriefquestion.IncidentSeveritiesTable)
		s.Join(joinT).On(s.C(incidentseverity.FieldID), joinT.C(incidentdebriefquestion.IncidentSeveritiesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(incidentdebriefquestion.IncidentSeveritiesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(incidentdebriefquestion.IncidentSeveritiesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*IncidentDebriefQuestion]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*IncidentSeverity](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "incident_severities" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (idqq *IncidentDebriefQuestionQuery) loadIncidentTags(ctx context.Context, query *IncidentTagQuery, nodes []*IncidentDebriefQuestion, init func(*IncidentDebriefQuestion), assign func(*IncidentDebriefQuestion, *IncidentTag)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*IncidentDebriefQuestion)
	nids := make(map[uuid.UUID]map[*IncidentDebriefQuestion]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(incidentdebriefquestion.IncidentTagsTable)
		s.Join(joinT).On(s.C(incidenttag.FieldID), joinT.C(incidentdebriefquestion.IncidentTagsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(incidentdebriefquestion.IncidentTagsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(incidentdebriefquestion.IncidentTagsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*IncidentDebriefQuestion]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*IncidentTag](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "incident_tags" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (idqq *IncidentDebriefQuestionQuery) loadIncidentTypes(ctx context.Context, query *IncidentTypeQuery, nodes []*IncidentDebriefQuestion, init func(*IncidentDebriefQuestion), assign func(*IncidentDebriefQuestion, *IncidentType)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*IncidentDebriefQuestion)
	nids := make(map[uuid.UUID]map[*IncidentDebriefQuestion]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(incidentdebriefquestion.IncidentTypesTable)
		s.Join(joinT).On(s.C(incidenttype.FieldID), joinT.C(incidentdebriefquestion.IncidentTypesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(incidentdebriefquestion.IncidentTypesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(incidentdebriefquestion.IncidentTypesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*IncidentDebriefQuestion]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*IncidentType](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "incident_types" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (idqq *IncidentDebriefQuestionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := idqq.querySpec()
	if len(idqq.modifiers) > 0 {
		_spec.Modifiers = idqq.modifiers
	}
	_spec.Node.Columns = idqq.ctx.Fields
	if len(idqq.ctx.Fields) > 0 {
		_spec.Unique = idqq.ctx.Unique != nil && *idqq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, idqq.driver, _spec)
}

func (idqq *IncidentDebriefQuestionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(incidentdebriefquestion.Table, incidentdebriefquestion.Columns, sqlgraph.NewFieldSpec(incidentdebriefquestion.FieldID, field.TypeUUID))
	_spec.From = idqq.sql
	if unique := idqq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if idqq.path != nil {
		_spec.Unique = true
	}
	if fields := idqq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, incidentdebriefquestion.FieldID)
		for i := range fields {
			if fields[i] != incidentdebriefquestion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := idqq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := idqq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := idqq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := idqq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (idqq *IncidentDebriefQuestionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(idqq.driver.Dialect())
	t1 := builder.Table(incidentdebriefquestion.Table)
	columns := idqq.ctx.Fields
	if len(columns) == 0 {
		columns = incidentdebriefquestion.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if idqq.sql != nil {
		selector = idqq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if idqq.ctx.Unique != nil && *idqq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range idqq.modifiers {
		m(selector)
	}
	for _, p := range idqq.predicates {
		p(selector)
	}
	for _, p := range idqq.order {
		p(selector)
	}
	if offset := idqq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := idqq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (idqq *IncidentDebriefQuestionQuery) Modify(modifiers ...func(s *sql.Selector)) *IncidentDebriefQuestionSelect {
	idqq.modifiers = append(idqq.modifiers, modifiers...)
	return idqq.Select()
}

// IncidentDebriefQuestionGroupBy is the group-by builder for IncidentDebriefQuestion entities.
type IncidentDebriefQuestionGroupBy struct {
	selector
	build *IncidentDebriefQuestionQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (idqgb *IncidentDebriefQuestionGroupBy) Aggregate(fns ...AggregateFunc) *IncidentDebriefQuestionGroupBy {
	idqgb.fns = append(idqgb.fns, fns...)
	return idqgb
}

// Scan applies the selector query and scans the result into the given value.
func (idqgb *IncidentDebriefQuestionGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, idqgb.build.ctx, ent.OpQueryGroupBy)
	if err := idqgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*IncidentDebriefQuestionQuery, *IncidentDebriefQuestionGroupBy](ctx, idqgb.build, idqgb, idqgb.build.inters, v)
}

func (idqgb *IncidentDebriefQuestionGroupBy) sqlScan(ctx context.Context, root *IncidentDebriefQuestionQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(idqgb.fns))
	for _, fn := range idqgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*idqgb.flds)+len(idqgb.fns))
		for _, f := range *idqgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*idqgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := idqgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// IncidentDebriefQuestionSelect is the builder for selecting fields of IncidentDebriefQuestion entities.
type IncidentDebriefQuestionSelect struct {
	*IncidentDebriefQuestionQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (idqs *IncidentDebriefQuestionSelect) Aggregate(fns ...AggregateFunc) *IncidentDebriefQuestionSelect {
	idqs.fns = append(idqs.fns, fns...)
	return idqs
}

// Scan applies the selector query and scans the result into the given value.
func (idqs *IncidentDebriefQuestionSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, idqs.ctx, ent.OpQuerySelect)
	if err := idqs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*IncidentDebriefQuestionQuery, *IncidentDebriefQuestionSelect](ctx, idqs.IncidentDebriefQuestionQuery, idqs, idqs.inters, v)
}

func (idqs *IncidentDebriefQuestionSelect) sqlScan(ctx context.Context, root *IncidentDebriefQuestionQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(idqs.fns))
	for _, fn := range idqs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*idqs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := idqs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (idqs *IncidentDebriefQuestionSelect) Modify(modifiers ...func(s *sql.Selector)) *IncidentDebriefQuestionSelect {
	idqs.modifiers = append(idqs.modifiers, modifiers...)
	return idqs
}
