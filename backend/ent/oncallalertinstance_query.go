// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/oncallalert"
	"github.com/rezible/rezible/ent/oncallalertinstance"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/user"
)

// OncallAlertInstanceQuery is the builder for querying OncallAlertInstance entities.
type OncallAlertInstanceQuery struct {
	config
	ctx          *QueryContext
	order        []oncallalertinstance.OrderOption
	inters       []Interceptor
	predicates   []predicate.OncallAlertInstance
	withAlert    *OncallAlertQuery
	withReceiver *UserQuery
	modifiers    []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OncallAlertInstanceQuery builder.
func (oaiq *OncallAlertInstanceQuery) Where(ps ...predicate.OncallAlertInstance) *OncallAlertInstanceQuery {
	oaiq.predicates = append(oaiq.predicates, ps...)
	return oaiq
}

// Limit the number of records to be returned by this query.
func (oaiq *OncallAlertInstanceQuery) Limit(limit int) *OncallAlertInstanceQuery {
	oaiq.ctx.Limit = &limit
	return oaiq
}

// Offset to start from.
func (oaiq *OncallAlertInstanceQuery) Offset(offset int) *OncallAlertInstanceQuery {
	oaiq.ctx.Offset = &offset
	return oaiq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (oaiq *OncallAlertInstanceQuery) Unique(unique bool) *OncallAlertInstanceQuery {
	oaiq.ctx.Unique = &unique
	return oaiq
}

// Order specifies how the records should be ordered.
func (oaiq *OncallAlertInstanceQuery) Order(o ...oncallalertinstance.OrderOption) *OncallAlertInstanceQuery {
	oaiq.order = append(oaiq.order, o...)
	return oaiq
}

// QueryAlert chains the current query on the "alert" edge.
func (oaiq *OncallAlertInstanceQuery) QueryAlert() *OncallAlertQuery {
	query := (&OncallAlertClient{config: oaiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oaiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oaiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(oncallalertinstance.Table, oncallalertinstance.FieldID, selector),
			sqlgraph.To(oncallalert.Table, oncallalert.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, oncallalertinstance.AlertTable, oncallalertinstance.AlertColumn),
		)
		fromU = sqlgraph.SetNeighbors(oaiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReceiver chains the current query on the "receiver" edge.
func (oaiq *OncallAlertInstanceQuery) QueryReceiver() *UserQuery {
	query := (&UserClient{config: oaiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oaiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oaiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(oncallalertinstance.Table, oncallalertinstance.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, oncallalertinstance.ReceiverTable, oncallalertinstance.ReceiverColumn),
		)
		fromU = sqlgraph.SetNeighbors(oaiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first OncallAlertInstance entity from the query.
// Returns a *NotFoundError when no OncallAlertInstance was found.
func (oaiq *OncallAlertInstanceQuery) First(ctx context.Context) (*OncallAlertInstance, error) {
	nodes, err := oaiq.Limit(1).All(setContextOp(ctx, oaiq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{oncallalertinstance.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (oaiq *OncallAlertInstanceQuery) FirstX(ctx context.Context) *OncallAlertInstance {
	node, err := oaiq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first OncallAlertInstance ID from the query.
// Returns a *NotFoundError when no OncallAlertInstance ID was found.
func (oaiq *OncallAlertInstanceQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = oaiq.Limit(1).IDs(setContextOp(ctx, oaiq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{oncallalertinstance.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (oaiq *OncallAlertInstanceQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := oaiq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single OncallAlertInstance entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one OncallAlertInstance entity is found.
// Returns a *NotFoundError when no OncallAlertInstance entities are found.
func (oaiq *OncallAlertInstanceQuery) Only(ctx context.Context) (*OncallAlertInstance, error) {
	nodes, err := oaiq.Limit(2).All(setContextOp(ctx, oaiq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{oncallalertinstance.Label}
	default:
		return nil, &NotSingularError{oncallalertinstance.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (oaiq *OncallAlertInstanceQuery) OnlyX(ctx context.Context) *OncallAlertInstance {
	node, err := oaiq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only OncallAlertInstance ID in the query.
// Returns a *NotSingularError when more than one OncallAlertInstance ID is found.
// Returns a *NotFoundError when no entities are found.
func (oaiq *OncallAlertInstanceQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = oaiq.Limit(2).IDs(setContextOp(ctx, oaiq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{oncallalertinstance.Label}
	default:
		err = &NotSingularError{oncallalertinstance.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (oaiq *OncallAlertInstanceQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := oaiq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OncallAlertInstances.
func (oaiq *OncallAlertInstanceQuery) All(ctx context.Context) ([]*OncallAlertInstance, error) {
	ctx = setContextOp(ctx, oaiq.ctx, ent.OpQueryAll)
	if err := oaiq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*OncallAlertInstance, *OncallAlertInstanceQuery]()
	return withInterceptors[[]*OncallAlertInstance](ctx, oaiq, qr, oaiq.inters)
}

// AllX is like All, but panics if an error occurs.
func (oaiq *OncallAlertInstanceQuery) AllX(ctx context.Context) []*OncallAlertInstance {
	nodes, err := oaiq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of OncallAlertInstance IDs.
func (oaiq *OncallAlertInstanceQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if oaiq.ctx.Unique == nil && oaiq.path != nil {
		oaiq.Unique(true)
	}
	ctx = setContextOp(ctx, oaiq.ctx, ent.OpQueryIDs)
	if err = oaiq.Select(oncallalertinstance.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (oaiq *OncallAlertInstanceQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := oaiq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (oaiq *OncallAlertInstanceQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, oaiq.ctx, ent.OpQueryCount)
	if err := oaiq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, oaiq, querierCount[*OncallAlertInstanceQuery](), oaiq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (oaiq *OncallAlertInstanceQuery) CountX(ctx context.Context) int {
	count, err := oaiq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (oaiq *OncallAlertInstanceQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, oaiq.ctx, ent.OpQueryExist)
	switch _, err := oaiq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (oaiq *OncallAlertInstanceQuery) ExistX(ctx context.Context) bool {
	exist, err := oaiq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OncallAlertInstanceQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (oaiq *OncallAlertInstanceQuery) Clone() *OncallAlertInstanceQuery {
	if oaiq == nil {
		return nil
	}
	return &OncallAlertInstanceQuery{
		config:       oaiq.config,
		ctx:          oaiq.ctx.Clone(),
		order:        append([]oncallalertinstance.OrderOption{}, oaiq.order...),
		inters:       append([]Interceptor{}, oaiq.inters...),
		predicates:   append([]predicate.OncallAlertInstance{}, oaiq.predicates...),
		withAlert:    oaiq.withAlert.Clone(),
		withReceiver: oaiq.withReceiver.Clone(),
		// clone intermediate query.
		sql:       oaiq.sql.Clone(),
		path:      oaiq.path,
		modifiers: append([]func(*sql.Selector){}, oaiq.modifiers...),
	}
}

// WithAlert tells the query-builder to eager-load the nodes that are connected to
// the "alert" edge. The optional arguments are used to configure the query builder of the edge.
func (oaiq *OncallAlertInstanceQuery) WithAlert(opts ...func(*OncallAlertQuery)) *OncallAlertInstanceQuery {
	query := (&OncallAlertClient{config: oaiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oaiq.withAlert = query
	return oaiq
}

// WithReceiver tells the query-builder to eager-load the nodes that are connected to
// the "receiver" edge. The optional arguments are used to configure the query builder of the edge.
func (oaiq *OncallAlertInstanceQuery) WithReceiver(opts ...func(*UserQuery)) *OncallAlertInstanceQuery {
	query := (&UserClient{config: oaiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oaiq.withReceiver = query
	return oaiq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		AlertID uuid.UUID `json:"alert_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OncallAlertInstance.Query().
//		GroupBy(oncallalertinstance.FieldAlertID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (oaiq *OncallAlertInstanceQuery) GroupBy(field string, fields ...string) *OncallAlertInstanceGroupBy {
	oaiq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &OncallAlertInstanceGroupBy{build: oaiq}
	grbuild.flds = &oaiq.ctx.Fields
	grbuild.label = oncallalertinstance.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		AlertID uuid.UUID `json:"alert_id,omitempty"`
//	}
//
//	client.OncallAlertInstance.Query().
//		Select(oncallalertinstance.FieldAlertID).
//		Scan(ctx, &v)
func (oaiq *OncallAlertInstanceQuery) Select(fields ...string) *OncallAlertInstanceSelect {
	oaiq.ctx.Fields = append(oaiq.ctx.Fields, fields...)
	sbuild := &OncallAlertInstanceSelect{OncallAlertInstanceQuery: oaiq}
	sbuild.label = oncallalertinstance.Label
	sbuild.flds, sbuild.scan = &oaiq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a OncallAlertInstanceSelect configured with the given aggregations.
func (oaiq *OncallAlertInstanceQuery) Aggregate(fns ...AggregateFunc) *OncallAlertInstanceSelect {
	return oaiq.Select().Aggregate(fns...)
}

func (oaiq *OncallAlertInstanceQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range oaiq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, oaiq); err != nil {
				return err
			}
		}
	}
	for _, f := range oaiq.ctx.Fields {
		if !oncallalertinstance.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if oaiq.path != nil {
		prev, err := oaiq.path(ctx)
		if err != nil {
			return err
		}
		oaiq.sql = prev
	}
	return nil
}

func (oaiq *OncallAlertInstanceQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*OncallAlertInstance, error) {
	var (
		nodes       = []*OncallAlertInstance{}
		_spec       = oaiq.querySpec()
		loadedTypes = [2]bool{
			oaiq.withAlert != nil,
			oaiq.withReceiver != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*OncallAlertInstance).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &OncallAlertInstance{config: oaiq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(oaiq.modifiers) > 0 {
		_spec.Modifiers = oaiq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, oaiq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := oaiq.withAlert; query != nil {
		if err := oaiq.loadAlert(ctx, query, nodes, nil,
			func(n *OncallAlertInstance, e *OncallAlert) { n.Edges.Alert = e }); err != nil {
			return nil, err
		}
	}
	if query := oaiq.withReceiver; query != nil {
		if err := oaiq.loadReceiver(ctx, query, nodes, nil,
			func(n *OncallAlertInstance, e *User) { n.Edges.Receiver = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (oaiq *OncallAlertInstanceQuery) loadAlert(ctx context.Context, query *OncallAlertQuery, nodes []*OncallAlertInstance, init func(*OncallAlertInstance), assign func(*OncallAlertInstance, *OncallAlert)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*OncallAlertInstance)
	for i := range nodes {
		fk := nodes[i].AlertID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(oncallalert.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "alert_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (oaiq *OncallAlertInstanceQuery) loadReceiver(ctx context.Context, query *UserQuery, nodes []*OncallAlertInstance, init func(*OncallAlertInstance), assign func(*OncallAlertInstance, *User)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*OncallAlertInstance)
	for i := range nodes {
		fk := nodes[i].ReceiverUserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "receiver_user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (oaiq *OncallAlertInstanceQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := oaiq.querySpec()
	if len(oaiq.modifiers) > 0 {
		_spec.Modifiers = oaiq.modifiers
	}
	_spec.Node.Columns = oaiq.ctx.Fields
	if len(oaiq.ctx.Fields) > 0 {
		_spec.Unique = oaiq.ctx.Unique != nil && *oaiq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, oaiq.driver, _spec)
}

func (oaiq *OncallAlertInstanceQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(oncallalertinstance.Table, oncallalertinstance.Columns, sqlgraph.NewFieldSpec(oncallalertinstance.FieldID, field.TypeUUID))
	_spec.From = oaiq.sql
	if unique := oaiq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if oaiq.path != nil {
		_spec.Unique = true
	}
	if fields := oaiq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oncallalertinstance.FieldID)
		for i := range fields {
			if fields[i] != oncallalertinstance.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if oaiq.withAlert != nil {
			_spec.Node.AddColumnOnce(oncallalertinstance.FieldAlertID)
		}
		if oaiq.withReceiver != nil {
			_spec.Node.AddColumnOnce(oncallalertinstance.FieldReceiverUserID)
		}
	}
	if ps := oaiq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := oaiq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := oaiq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := oaiq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (oaiq *OncallAlertInstanceQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(oaiq.driver.Dialect())
	t1 := builder.Table(oncallalertinstance.Table)
	columns := oaiq.ctx.Fields
	if len(columns) == 0 {
		columns = oncallalertinstance.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if oaiq.sql != nil {
		selector = oaiq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if oaiq.ctx.Unique != nil && *oaiq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range oaiq.modifiers {
		m(selector)
	}
	for _, p := range oaiq.predicates {
		p(selector)
	}
	for _, p := range oaiq.order {
		p(selector)
	}
	if offset := oaiq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := oaiq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (oaiq *OncallAlertInstanceQuery) Modify(modifiers ...func(s *sql.Selector)) *OncallAlertInstanceSelect {
	oaiq.modifiers = append(oaiq.modifiers, modifiers...)
	return oaiq.Select()
}

// OncallAlertInstanceGroupBy is the group-by builder for OncallAlertInstance entities.
type OncallAlertInstanceGroupBy struct {
	selector
	build *OncallAlertInstanceQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (oaigb *OncallAlertInstanceGroupBy) Aggregate(fns ...AggregateFunc) *OncallAlertInstanceGroupBy {
	oaigb.fns = append(oaigb.fns, fns...)
	return oaigb
}

// Scan applies the selector query and scans the result into the given value.
func (oaigb *OncallAlertInstanceGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, oaigb.build.ctx, ent.OpQueryGroupBy)
	if err := oaigb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OncallAlertInstanceQuery, *OncallAlertInstanceGroupBy](ctx, oaigb.build, oaigb, oaigb.build.inters, v)
}

func (oaigb *OncallAlertInstanceGroupBy) sqlScan(ctx context.Context, root *OncallAlertInstanceQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(oaigb.fns))
	for _, fn := range oaigb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*oaigb.flds)+len(oaigb.fns))
		for _, f := range *oaigb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*oaigb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := oaigb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// OncallAlertInstanceSelect is the builder for selecting fields of OncallAlertInstance entities.
type OncallAlertInstanceSelect struct {
	*OncallAlertInstanceQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (oais *OncallAlertInstanceSelect) Aggregate(fns ...AggregateFunc) *OncallAlertInstanceSelect {
	oais.fns = append(oais.fns, fns...)
	return oais
}

// Scan applies the selector query and scans the result into the given value.
func (oais *OncallAlertInstanceSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, oais.ctx, ent.OpQuerySelect)
	if err := oais.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OncallAlertInstanceQuery, *OncallAlertInstanceSelect](ctx, oais.OncallAlertInstanceQuery, oais, oais.inters, v)
}

func (oais *OncallAlertInstanceSelect) sqlScan(ctx context.Context, root *OncallAlertInstanceQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(oais.fns))
	for _, fn := range oais.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*oais.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := oais.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (oais *OncallAlertInstanceSelect) Modify(modifiers ...func(s *sql.Selector)) *OncallAlertInstanceSelect {
	oais.modifiers = append(oais.modifiers, modifiers...)
	return oais
}
