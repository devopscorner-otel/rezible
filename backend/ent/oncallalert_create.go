// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/oncallalert"
	"github.com/rezible/rezible/ent/oncallalertinstance"
	"github.com/rezible/rezible/ent/oncallroster"
)

// OncallAlertCreate is the builder for creating a OncallAlert entity.
type OncallAlertCreate struct {
	config
	mutation *OncallAlertMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetRosterID sets the "roster_id" field.
func (oac *OncallAlertCreate) SetRosterID(u uuid.UUID) *OncallAlertCreate {
	oac.mutation.SetRosterID(u)
	return oac
}

// SetName sets the "name" field.
func (oac *OncallAlertCreate) SetName(s string) *OncallAlertCreate {
	oac.mutation.SetName(s)
	return oac
}

// SetTimestamp sets the "timestamp" field.
func (oac *OncallAlertCreate) SetTimestamp(t time.Time) *OncallAlertCreate {
	oac.mutation.SetTimestamp(t)
	return oac
}

// SetID sets the "id" field.
func (oac *OncallAlertCreate) SetID(u uuid.UUID) *OncallAlertCreate {
	oac.mutation.SetID(u)
	return oac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (oac *OncallAlertCreate) SetNillableID(u *uuid.UUID) *OncallAlertCreate {
	if u != nil {
		oac.SetID(*u)
	}
	return oac
}

// AddInstanceIDs adds the "instances" edge to the OncallAlertInstance entity by IDs.
func (oac *OncallAlertCreate) AddInstanceIDs(ids ...uuid.UUID) *OncallAlertCreate {
	oac.mutation.AddInstanceIDs(ids...)
	return oac
}

// AddInstances adds the "instances" edges to the OncallAlertInstance entity.
func (oac *OncallAlertCreate) AddInstances(o ...*OncallAlertInstance) *OncallAlertCreate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oac.AddInstanceIDs(ids...)
}

// SetRoster sets the "roster" edge to the OncallRoster entity.
func (oac *OncallAlertCreate) SetRoster(o *OncallRoster) *OncallAlertCreate {
	return oac.SetRosterID(o.ID)
}

// Mutation returns the OncallAlertMutation object of the builder.
func (oac *OncallAlertCreate) Mutation() *OncallAlertMutation {
	return oac.mutation
}

// Save creates the OncallAlert in the database.
func (oac *OncallAlertCreate) Save(ctx context.Context) (*OncallAlert, error) {
	oac.defaults()
	return withHooks(ctx, oac.sqlSave, oac.mutation, oac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oac *OncallAlertCreate) SaveX(ctx context.Context) *OncallAlert {
	v, err := oac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oac *OncallAlertCreate) Exec(ctx context.Context) error {
	_, err := oac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oac *OncallAlertCreate) ExecX(ctx context.Context) {
	if err := oac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oac *OncallAlertCreate) defaults() {
	if _, ok := oac.mutation.ID(); !ok {
		v := oncallalert.DefaultID()
		oac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oac *OncallAlertCreate) check() error {
	if _, ok := oac.mutation.RosterID(); !ok {
		return &ValidationError{Name: "roster_id", err: errors.New(`ent: missing required field "OncallAlert.roster_id"`)}
	}
	if _, ok := oac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "OncallAlert.name"`)}
	}
	if _, ok := oac.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`ent: missing required field "OncallAlert.timestamp"`)}
	}
	if len(oac.mutation.RosterIDs()) == 0 {
		return &ValidationError{Name: "roster", err: errors.New(`ent: missing required edge "OncallAlert.roster"`)}
	}
	return nil
}

func (oac *OncallAlertCreate) sqlSave(ctx context.Context) (*OncallAlert, error) {
	if err := oac.check(); err != nil {
		return nil, err
	}
	_node, _spec := oac.createSpec()
	if err := sqlgraph.CreateNode(ctx, oac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	oac.mutation.id = &_node.ID
	oac.mutation.done = true
	return _node, nil
}

func (oac *OncallAlertCreate) createSpec() (*OncallAlert, *sqlgraph.CreateSpec) {
	var (
		_node = &OncallAlert{config: oac.config}
		_spec = sqlgraph.NewCreateSpec(oncallalert.Table, sqlgraph.NewFieldSpec(oncallalert.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = oac.conflict
	if id, ok := oac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := oac.mutation.Name(); ok {
		_spec.SetField(oncallalert.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := oac.mutation.Timestamp(); ok {
		_spec.SetField(oncallalert.FieldTimestamp, field.TypeTime, value)
		_node.Timestamp = value
	}
	if nodes := oac.mutation.InstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oncallalert.InstancesTable,
			Columns: []string{oncallalert.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallalertinstance.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oac.mutation.RosterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallalert.RosterTable,
			Columns: []string{oncallalert.RosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallroster.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RosterID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OncallAlert.Create().
//		SetRosterID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OncallAlertUpsert) {
//			SetRosterID(v+v).
//		}).
//		Exec(ctx)
func (oac *OncallAlertCreate) OnConflict(opts ...sql.ConflictOption) *OncallAlertUpsertOne {
	oac.conflict = opts
	return &OncallAlertUpsertOne{
		create: oac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OncallAlert.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oac *OncallAlertCreate) OnConflictColumns(columns ...string) *OncallAlertUpsertOne {
	oac.conflict = append(oac.conflict, sql.ConflictColumns(columns...))
	return &OncallAlertUpsertOne{
		create: oac,
	}
}

type (
	// OncallAlertUpsertOne is the builder for "upsert"-ing
	//  one OncallAlert node.
	OncallAlertUpsertOne struct {
		create *OncallAlertCreate
	}

	// OncallAlertUpsert is the "OnConflict" setter.
	OncallAlertUpsert struct {
		*sql.UpdateSet
	}
)

// SetRosterID sets the "roster_id" field.
func (u *OncallAlertUpsert) SetRosterID(v uuid.UUID) *OncallAlertUpsert {
	u.Set(oncallalert.FieldRosterID, v)
	return u
}

// UpdateRosterID sets the "roster_id" field to the value that was provided on create.
func (u *OncallAlertUpsert) UpdateRosterID() *OncallAlertUpsert {
	u.SetExcluded(oncallalert.FieldRosterID)
	return u
}

// SetName sets the "name" field.
func (u *OncallAlertUpsert) SetName(v string) *OncallAlertUpsert {
	u.Set(oncallalert.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OncallAlertUpsert) UpdateName() *OncallAlertUpsert {
	u.SetExcluded(oncallalert.FieldName)
	return u
}

// SetTimestamp sets the "timestamp" field.
func (u *OncallAlertUpsert) SetTimestamp(v time.Time) *OncallAlertUpsert {
	u.Set(oncallalert.FieldTimestamp, v)
	return u
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *OncallAlertUpsert) UpdateTimestamp() *OncallAlertUpsert {
	u.SetExcluded(oncallalert.FieldTimestamp)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OncallAlert.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oncallalert.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OncallAlertUpsertOne) UpdateNewValues() *OncallAlertUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(oncallalert.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OncallAlert.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OncallAlertUpsertOne) Ignore() *OncallAlertUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OncallAlertUpsertOne) DoNothing() *OncallAlertUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OncallAlertCreate.OnConflict
// documentation for more info.
func (u *OncallAlertUpsertOne) Update(set func(*OncallAlertUpsert)) *OncallAlertUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OncallAlertUpsert{UpdateSet: update})
	}))
	return u
}

// SetRosterID sets the "roster_id" field.
func (u *OncallAlertUpsertOne) SetRosterID(v uuid.UUID) *OncallAlertUpsertOne {
	return u.Update(func(s *OncallAlertUpsert) {
		s.SetRosterID(v)
	})
}

// UpdateRosterID sets the "roster_id" field to the value that was provided on create.
func (u *OncallAlertUpsertOne) UpdateRosterID() *OncallAlertUpsertOne {
	return u.Update(func(s *OncallAlertUpsert) {
		s.UpdateRosterID()
	})
}

// SetName sets the "name" field.
func (u *OncallAlertUpsertOne) SetName(v string) *OncallAlertUpsertOne {
	return u.Update(func(s *OncallAlertUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OncallAlertUpsertOne) UpdateName() *OncallAlertUpsertOne {
	return u.Update(func(s *OncallAlertUpsert) {
		s.UpdateName()
	})
}

// SetTimestamp sets the "timestamp" field.
func (u *OncallAlertUpsertOne) SetTimestamp(v time.Time) *OncallAlertUpsertOne {
	return u.Update(func(s *OncallAlertUpsert) {
		s.SetTimestamp(v)
	})
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *OncallAlertUpsertOne) UpdateTimestamp() *OncallAlertUpsertOne {
	return u.Update(func(s *OncallAlertUpsert) {
		s.UpdateTimestamp()
	})
}

// Exec executes the query.
func (u *OncallAlertUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OncallAlertCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OncallAlertUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OncallAlertUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: OncallAlertUpsertOne.ID is not supported by MySQL driver. Use OncallAlertUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OncallAlertUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OncallAlertCreateBulk is the builder for creating many OncallAlert entities in bulk.
type OncallAlertCreateBulk struct {
	config
	err      error
	builders []*OncallAlertCreate
	conflict []sql.ConflictOption
}

// Save creates the OncallAlert entities in the database.
func (oacb *OncallAlertCreateBulk) Save(ctx context.Context) ([]*OncallAlert, error) {
	if oacb.err != nil {
		return nil, oacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(oacb.builders))
	nodes := make([]*OncallAlert, len(oacb.builders))
	mutators := make([]Mutator, len(oacb.builders))
	for i := range oacb.builders {
		func(i int, root context.Context) {
			builder := oacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OncallAlertMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = oacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oacb *OncallAlertCreateBulk) SaveX(ctx context.Context) []*OncallAlert {
	v, err := oacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oacb *OncallAlertCreateBulk) Exec(ctx context.Context) error {
	_, err := oacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oacb *OncallAlertCreateBulk) ExecX(ctx context.Context) {
	if err := oacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OncallAlert.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OncallAlertUpsert) {
//			SetRosterID(v+v).
//		}).
//		Exec(ctx)
func (oacb *OncallAlertCreateBulk) OnConflict(opts ...sql.ConflictOption) *OncallAlertUpsertBulk {
	oacb.conflict = opts
	return &OncallAlertUpsertBulk{
		create: oacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OncallAlert.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oacb *OncallAlertCreateBulk) OnConflictColumns(columns ...string) *OncallAlertUpsertBulk {
	oacb.conflict = append(oacb.conflict, sql.ConflictColumns(columns...))
	return &OncallAlertUpsertBulk{
		create: oacb,
	}
}

// OncallAlertUpsertBulk is the builder for "upsert"-ing
// a bulk of OncallAlert nodes.
type OncallAlertUpsertBulk struct {
	create *OncallAlertCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OncallAlert.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oncallalert.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OncallAlertUpsertBulk) UpdateNewValues() *OncallAlertUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(oncallalert.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OncallAlert.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OncallAlertUpsertBulk) Ignore() *OncallAlertUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OncallAlertUpsertBulk) DoNothing() *OncallAlertUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OncallAlertCreateBulk.OnConflict
// documentation for more info.
func (u *OncallAlertUpsertBulk) Update(set func(*OncallAlertUpsert)) *OncallAlertUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OncallAlertUpsert{UpdateSet: update})
	}))
	return u
}

// SetRosterID sets the "roster_id" field.
func (u *OncallAlertUpsertBulk) SetRosterID(v uuid.UUID) *OncallAlertUpsertBulk {
	return u.Update(func(s *OncallAlertUpsert) {
		s.SetRosterID(v)
	})
}

// UpdateRosterID sets the "roster_id" field to the value that was provided on create.
func (u *OncallAlertUpsertBulk) UpdateRosterID() *OncallAlertUpsertBulk {
	return u.Update(func(s *OncallAlertUpsert) {
		s.UpdateRosterID()
	})
}

// SetName sets the "name" field.
func (u *OncallAlertUpsertBulk) SetName(v string) *OncallAlertUpsertBulk {
	return u.Update(func(s *OncallAlertUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OncallAlertUpsertBulk) UpdateName() *OncallAlertUpsertBulk {
	return u.Update(func(s *OncallAlertUpsert) {
		s.UpdateName()
	})
}

// SetTimestamp sets the "timestamp" field.
func (u *OncallAlertUpsertBulk) SetTimestamp(v time.Time) *OncallAlertUpsertBulk {
	return u.Update(func(s *OncallAlertUpsert) {
		s.SetTimestamp(v)
	})
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *OncallAlertUpsertBulk) UpdateTimestamp() *OncallAlertUpsertBulk {
	return u.Update(func(s *OncallAlertUpsert) {
		s.UpdateTimestamp()
	})
}

// Exec executes the query.
func (u *OncallAlertUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OncallAlertCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OncallAlertCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OncallAlertUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
