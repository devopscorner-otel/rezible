// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/oncalleventannotation"
	"github.com/rezible/rezible/ent/oncallusershift"
	"github.com/rezible/rezible/ent/predicate"
)

// OncallEventAnnotationUpdate is the builder for updating OncallEventAnnotation entities.
type OncallEventAnnotationUpdate struct {
	config
	hooks     []Hook
	mutation  *OncallEventAnnotationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OncallEventAnnotationUpdate builder.
func (oeau *OncallEventAnnotationUpdate) Where(ps ...predicate.OncallEventAnnotation) *OncallEventAnnotationUpdate {
	oeau.mutation.Where(ps...)
	return oeau
}

// SetEventID sets the "event_id" field.
func (oeau *OncallEventAnnotationUpdate) SetEventID(s string) *OncallEventAnnotationUpdate {
	oeau.mutation.SetEventID(s)
	return oeau
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (oeau *OncallEventAnnotationUpdate) SetNillableEventID(s *string) *OncallEventAnnotationUpdate {
	if s != nil {
		oeau.SetEventID(*s)
	}
	return oeau
}

// SetCreatedAt sets the "created_at" field.
func (oeau *OncallEventAnnotationUpdate) SetCreatedAt(t time.Time) *OncallEventAnnotationUpdate {
	oeau.mutation.SetCreatedAt(t)
	return oeau
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oeau *OncallEventAnnotationUpdate) SetNillableCreatedAt(t *time.Time) *OncallEventAnnotationUpdate {
	if t != nil {
		oeau.SetCreatedAt(*t)
	}
	return oeau
}

// SetMinutesOccupied sets the "minutes_occupied" field.
func (oeau *OncallEventAnnotationUpdate) SetMinutesOccupied(i int) *OncallEventAnnotationUpdate {
	oeau.mutation.ResetMinutesOccupied()
	oeau.mutation.SetMinutesOccupied(i)
	return oeau
}

// SetNillableMinutesOccupied sets the "minutes_occupied" field if the given value is not nil.
func (oeau *OncallEventAnnotationUpdate) SetNillableMinutesOccupied(i *int) *OncallEventAnnotationUpdate {
	if i != nil {
		oeau.SetMinutesOccupied(*i)
	}
	return oeau
}

// AddMinutesOccupied adds i to the "minutes_occupied" field.
func (oeau *OncallEventAnnotationUpdate) AddMinutesOccupied(i int) *OncallEventAnnotationUpdate {
	oeau.mutation.AddMinutesOccupied(i)
	return oeau
}

// SetNotes sets the "notes" field.
func (oeau *OncallEventAnnotationUpdate) SetNotes(s string) *OncallEventAnnotationUpdate {
	oeau.mutation.SetNotes(s)
	return oeau
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (oeau *OncallEventAnnotationUpdate) SetNillableNotes(s *string) *OncallEventAnnotationUpdate {
	if s != nil {
		oeau.SetNotes(*s)
	}
	return oeau
}

// SetPinned sets the "pinned" field.
func (oeau *OncallEventAnnotationUpdate) SetPinned(b bool) *OncallEventAnnotationUpdate {
	oeau.mutation.SetPinned(b)
	return oeau
}

// SetNillablePinned sets the "pinned" field if the given value is not nil.
func (oeau *OncallEventAnnotationUpdate) SetNillablePinned(b *bool) *OncallEventAnnotationUpdate {
	if b != nil {
		oeau.SetPinned(*b)
	}
	return oeau
}

// AddShiftIDs adds the "shifts" edge to the OncallUserShift entity by IDs.
func (oeau *OncallEventAnnotationUpdate) AddShiftIDs(ids ...uuid.UUID) *OncallEventAnnotationUpdate {
	oeau.mutation.AddShiftIDs(ids...)
	return oeau
}

// AddShifts adds the "shifts" edges to the OncallUserShift entity.
func (oeau *OncallEventAnnotationUpdate) AddShifts(o ...*OncallUserShift) *OncallEventAnnotationUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oeau.AddShiftIDs(ids...)
}

// Mutation returns the OncallEventAnnotationMutation object of the builder.
func (oeau *OncallEventAnnotationUpdate) Mutation() *OncallEventAnnotationMutation {
	return oeau.mutation
}

// ClearShifts clears all "shifts" edges to the OncallUserShift entity.
func (oeau *OncallEventAnnotationUpdate) ClearShifts() *OncallEventAnnotationUpdate {
	oeau.mutation.ClearShifts()
	return oeau
}

// RemoveShiftIDs removes the "shifts" edge to OncallUserShift entities by IDs.
func (oeau *OncallEventAnnotationUpdate) RemoveShiftIDs(ids ...uuid.UUID) *OncallEventAnnotationUpdate {
	oeau.mutation.RemoveShiftIDs(ids...)
	return oeau
}

// RemoveShifts removes "shifts" edges to OncallUserShift entities.
func (oeau *OncallEventAnnotationUpdate) RemoveShifts(o ...*OncallUserShift) *OncallEventAnnotationUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oeau.RemoveShiftIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oeau *OncallEventAnnotationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, oeau.sqlSave, oeau.mutation, oeau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oeau *OncallEventAnnotationUpdate) SaveX(ctx context.Context) int {
	affected, err := oeau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oeau *OncallEventAnnotationUpdate) Exec(ctx context.Context) error {
	_, err := oeau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oeau *OncallEventAnnotationUpdate) ExecX(ctx context.Context) {
	if err := oeau.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (oeau *OncallEventAnnotationUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OncallEventAnnotationUpdate {
	oeau.modifiers = append(oeau.modifiers, modifiers...)
	return oeau
}

func (oeau *OncallEventAnnotationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(oncalleventannotation.Table, oncalleventannotation.Columns, sqlgraph.NewFieldSpec(oncalleventannotation.FieldID, field.TypeUUID))
	if ps := oeau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oeau.mutation.EventID(); ok {
		_spec.SetField(oncalleventannotation.FieldEventID, field.TypeString, value)
	}
	if value, ok := oeau.mutation.CreatedAt(); ok {
		_spec.SetField(oncalleventannotation.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := oeau.mutation.MinutesOccupied(); ok {
		_spec.SetField(oncalleventannotation.FieldMinutesOccupied, field.TypeInt, value)
	}
	if value, ok := oeau.mutation.AddedMinutesOccupied(); ok {
		_spec.AddField(oncalleventannotation.FieldMinutesOccupied, field.TypeInt, value)
	}
	if value, ok := oeau.mutation.Notes(); ok {
		_spec.SetField(oncalleventannotation.FieldNotes, field.TypeString, value)
	}
	if value, ok := oeau.mutation.Pinned(); ok {
		_spec.SetField(oncalleventannotation.FieldPinned, field.TypeBool, value)
	}
	if oeau.mutation.ShiftsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   oncalleventannotation.ShiftsTable,
			Columns: oncalleventannotation.ShiftsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallusershift.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oeau.mutation.RemovedShiftsIDs(); len(nodes) > 0 && !oeau.mutation.ShiftsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   oncalleventannotation.ShiftsTable,
			Columns: oncalleventannotation.ShiftsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallusershift.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oeau.mutation.ShiftsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   oncalleventannotation.ShiftsTable,
			Columns: oncalleventannotation.ShiftsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallusershift.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(oeau.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, oeau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oncalleventannotation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	oeau.mutation.done = true
	return n, nil
}

// OncallEventAnnotationUpdateOne is the builder for updating a single OncallEventAnnotation entity.
type OncallEventAnnotationUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OncallEventAnnotationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEventID sets the "event_id" field.
func (oeauo *OncallEventAnnotationUpdateOne) SetEventID(s string) *OncallEventAnnotationUpdateOne {
	oeauo.mutation.SetEventID(s)
	return oeauo
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (oeauo *OncallEventAnnotationUpdateOne) SetNillableEventID(s *string) *OncallEventAnnotationUpdateOne {
	if s != nil {
		oeauo.SetEventID(*s)
	}
	return oeauo
}

// SetCreatedAt sets the "created_at" field.
func (oeauo *OncallEventAnnotationUpdateOne) SetCreatedAt(t time.Time) *OncallEventAnnotationUpdateOne {
	oeauo.mutation.SetCreatedAt(t)
	return oeauo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oeauo *OncallEventAnnotationUpdateOne) SetNillableCreatedAt(t *time.Time) *OncallEventAnnotationUpdateOne {
	if t != nil {
		oeauo.SetCreatedAt(*t)
	}
	return oeauo
}

// SetMinutesOccupied sets the "minutes_occupied" field.
func (oeauo *OncallEventAnnotationUpdateOne) SetMinutesOccupied(i int) *OncallEventAnnotationUpdateOne {
	oeauo.mutation.ResetMinutesOccupied()
	oeauo.mutation.SetMinutesOccupied(i)
	return oeauo
}

// SetNillableMinutesOccupied sets the "minutes_occupied" field if the given value is not nil.
func (oeauo *OncallEventAnnotationUpdateOne) SetNillableMinutesOccupied(i *int) *OncallEventAnnotationUpdateOne {
	if i != nil {
		oeauo.SetMinutesOccupied(*i)
	}
	return oeauo
}

// AddMinutesOccupied adds i to the "minutes_occupied" field.
func (oeauo *OncallEventAnnotationUpdateOne) AddMinutesOccupied(i int) *OncallEventAnnotationUpdateOne {
	oeauo.mutation.AddMinutesOccupied(i)
	return oeauo
}

// SetNotes sets the "notes" field.
func (oeauo *OncallEventAnnotationUpdateOne) SetNotes(s string) *OncallEventAnnotationUpdateOne {
	oeauo.mutation.SetNotes(s)
	return oeauo
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (oeauo *OncallEventAnnotationUpdateOne) SetNillableNotes(s *string) *OncallEventAnnotationUpdateOne {
	if s != nil {
		oeauo.SetNotes(*s)
	}
	return oeauo
}

// SetPinned sets the "pinned" field.
func (oeauo *OncallEventAnnotationUpdateOne) SetPinned(b bool) *OncallEventAnnotationUpdateOne {
	oeauo.mutation.SetPinned(b)
	return oeauo
}

// SetNillablePinned sets the "pinned" field if the given value is not nil.
func (oeauo *OncallEventAnnotationUpdateOne) SetNillablePinned(b *bool) *OncallEventAnnotationUpdateOne {
	if b != nil {
		oeauo.SetPinned(*b)
	}
	return oeauo
}

// AddShiftIDs adds the "shifts" edge to the OncallUserShift entity by IDs.
func (oeauo *OncallEventAnnotationUpdateOne) AddShiftIDs(ids ...uuid.UUID) *OncallEventAnnotationUpdateOne {
	oeauo.mutation.AddShiftIDs(ids...)
	return oeauo
}

// AddShifts adds the "shifts" edges to the OncallUserShift entity.
func (oeauo *OncallEventAnnotationUpdateOne) AddShifts(o ...*OncallUserShift) *OncallEventAnnotationUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oeauo.AddShiftIDs(ids...)
}

// Mutation returns the OncallEventAnnotationMutation object of the builder.
func (oeauo *OncallEventAnnotationUpdateOne) Mutation() *OncallEventAnnotationMutation {
	return oeauo.mutation
}

// ClearShifts clears all "shifts" edges to the OncallUserShift entity.
func (oeauo *OncallEventAnnotationUpdateOne) ClearShifts() *OncallEventAnnotationUpdateOne {
	oeauo.mutation.ClearShifts()
	return oeauo
}

// RemoveShiftIDs removes the "shifts" edge to OncallUserShift entities by IDs.
func (oeauo *OncallEventAnnotationUpdateOne) RemoveShiftIDs(ids ...uuid.UUID) *OncallEventAnnotationUpdateOne {
	oeauo.mutation.RemoveShiftIDs(ids...)
	return oeauo
}

// RemoveShifts removes "shifts" edges to OncallUserShift entities.
func (oeauo *OncallEventAnnotationUpdateOne) RemoveShifts(o ...*OncallUserShift) *OncallEventAnnotationUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oeauo.RemoveShiftIDs(ids...)
}

// Where appends a list predicates to the OncallEventAnnotationUpdate builder.
func (oeauo *OncallEventAnnotationUpdateOne) Where(ps ...predicate.OncallEventAnnotation) *OncallEventAnnotationUpdateOne {
	oeauo.mutation.Where(ps...)
	return oeauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oeauo *OncallEventAnnotationUpdateOne) Select(field string, fields ...string) *OncallEventAnnotationUpdateOne {
	oeauo.fields = append([]string{field}, fields...)
	return oeauo
}

// Save executes the query and returns the updated OncallEventAnnotation entity.
func (oeauo *OncallEventAnnotationUpdateOne) Save(ctx context.Context) (*OncallEventAnnotation, error) {
	return withHooks(ctx, oeauo.sqlSave, oeauo.mutation, oeauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oeauo *OncallEventAnnotationUpdateOne) SaveX(ctx context.Context) *OncallEventAnnotation {
	node, err := oeauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oeauo *OncallEventAnnotationUpdateOne) Exec(ctx context.Context) error {
	_, err := oeauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oeauo *OncallEventAnnotationUpdateOne) ExecX(ctx context.Context) {
	if err := oeauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (oeauo *OncallEventAnnotationUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OncallEventAnnotationUpdateOne {
	oeauo.modifiers = append(oeauo.modifiers, modifiers...)
	return oeauo
}

func (oeauo *OncallEventAnnotationUpdateOne) sqlSave(ctx context.Context) (_node *OncallEventAnnotation, err error) {
	_spec := sqlgraph.NewUpdateSpec(oncalleventannotation.Table, oncalleventannotation.Columns, sqlgraph.NewFieldSpec(oncalleventannotation.FieldID, field.TypeUUID))
	id, ok := oeauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OncallEventAnnotation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oeauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oncalleventannotation.FieldID)
		for _, f := range fields {
			if !oncalleventannotation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oncalleventannotation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oeauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oeauo.mutation.EventID(); ok {
		_spec.SetField(oncalleventannotation.FieldEventID, field.TypeString, value)
	}
	if value, ok := oeauo.mutation.CreatedAt(); ok {
		_spec.SetField(oncalleventannotation.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := oeauo.mutation.MinutesOccupied(); ok {
		_spec.SetField(oncalleventannotation.FieldMinutesOccupied, field.TypeInt, value)
	}
	if value, ok := oeauo.mutation.AddedMinutesOccupied(); ok {
		_spec.AddField(oncalleventannotation.FieldMinutesOccupied, field.TypeInt, value)
	}
	if value, ok := oeauo.mutation.Notes(); ok {
		_spec.SetField(oncalleventannotation.FieldNotes, field.TypeString, value)
	}
	if value, ok := oeauo.mutation.Pinned(); ok {
		_spec.SetField(oncalleventannotation.FieldPinned, field.TypeBool, value)
	}
	if oeauo.mutation.ShiftsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   oncalleventannotation.ShiftsTable,
			Columns: oncalleventannotation.ShiftsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallusershift.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oeauo.mutation.RemovedShiftsIDs(); len(nodes) > 0 && !oeauo.mutation.ShiftsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   oncalleventannotation.ShiftsTable,
			Columns: oncalleventannotation.ShiftsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallusershift.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oeauo.mutation.ShiftsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   oncalleventannotation.ShiftsTable,
			Columns: oncalleventannotation.ShiftsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallusershift.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(oeauo.modifiers...)
	_node = &OncallEventAnnotation{config: oeauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oeauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oncalleventannotation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oeauo.mutation.done = true
	return _node, nil
}
