// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/oncallusershift"
	"github.com/rezible/rezible/ent/oncallusershiftannotation"
	"github.com/rezible/rezible/ent/predicate"
)

// OncallUserShiftAnnotationUpdate is the builder for updating OncallUserShiftAnnotation entities.
type OncallUserShiftAnnotationUpdate struct {
	config
	hooks     []Hook
	mutation  *OncallUserShiftAnnotationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OncallUserShiftAnnotationUpdate builder.
func (ousau *OncallUserShiftAnnotationUpdate) Where(ps ...predicate.OncallUserShiftAnnotation) *OncallUserShiftAnnotationUpdate {
	ousau.mutation.Where(ps...)
	return ousau
}

// SetShiftID sets the "shift_id" field.
func (ousau *OncallUserShiftAnnotationUpdate) SetShiftID(u uuid.UUID) *OncallUserShiftAnnotationUpdate {
	ousau.mutation.SetShiftID(u)
	return ousau
}

// SetNillableShiftID sets the "shift_id" field if the given value is not nil.
func (ousau *OncallUserShiftAnnotationUpdate) SetNillableShiftID(u *uuid.UUID) *OncallUserShiftAnnotationUpdate {
	if u != nil {
		ousau.SetShiftID(*u)
	}
	return ousau
}

// SetEventID sets the "event_id" field.
func (ousau *OncallUserShiftAnnotationUpdate) SetEventID(s string) *OncallUserShiftAnnotationUpdate {
	ousau.mutation.SetEventID(s)
	return ousau
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (ousau *OncallUserShiftAnnotationUpdate) SetNillableEventID(s *string) *OncallUserShiftAnnotationUpdate {
	if s != nil {
		ousau.SetEventID(*s)
	}
	return ousau
}

// SetEventKind sets the "event_kind" field.
func (ousau *OncallUserShiftAnnotationUpdate) SetEventKind(ok oncallusershiftannotation.EventKind) *OncallUserShiftAnnotationUpdate {
	ousau.mutation.SetEventKind(ok)
	return ousau
}

// SetNillableEventKind sets the "event_kind" field if the given value is not nil.
func (ousau *OncallUserShiftAnnotationUpdate) SetNillableEventKind(ok *oncallusershiftannotation.EventKind) *OncallUserShiftAnnotationUpdate {
	if ok != nil {
		ousau.SetEventKind(*ok)
	}
	return ousau
}

// SetTitle sets the "title" field.
func (ousau *OncallUserShiftAnnotationUpdate) SetTitle(s string) *OncallUserShiftAnnotationUpdate {
	ousau.mutation.SetTitle(s)
	return ousau
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (ousau *OncallUserShiftAnnotationUpdate) SetNillableTitle(s *string) *OncallUserShiftAnnotationUpdate {
	if s != nil {
		ousau.SetTitle(*s)
	}
	return ousau
}

// SetOccurredAt sets the "occurred_at" field.
func (ousau *OncallUserShiftAnnotationUpdate) SetOccurredAt(t time.Time) *OncallUserShiftAnnotationUpdate {
	ousau.mutation.SetOccurredAt(t)
	return ousau
}

// SetNillableOccurredAt sets the "occurred_at" field if the given value is not nil.
func (ousau *OncallUserShiftAnnotationUpdate) SetNillableOccurredAt(t *time.Time) *OncallUserShiftAnnotationUpdate {
	if t != nil {
		ousau.SetOccurredAt(*t)
	}
	return ousau
}

// SetMinutesOccupied sets the "minutes_occupied" field.
func (ousau *OncallUserShiftAnnotationUpdate) SetMinutesOccupied(i int) *OncallUserShiftAnnotationUpdate {
	ousau.mutation.ResetMinutesOccupied()
	ousau.mutation.SetMinutesOccupied(i)
	return ousau
}

// SetNillableMinutesOccupied sets the "minutes_occupied" field if the given value is not nil.
func (ousau *OncallUserShiftAnnotationUpdate) SetNillableMinutesOccupied(i *int) *OncallUserShiftAnnotationUpdate {
	if i != nil {
		ousau.SetMinutesOccupied(*i)
	}
	return ousau
}

// AddMinutesOccupied adds i to the "minutes_occupied" field.
func (ousau *OncallUserShiftAnnotationUpdate) AddMinutesOccupied(i int) *OncallUserShiftAnnotationUpdate {
	ousau.mutation.AddMinutesOccupied(i)
	return ousau
}

// SetNotes sets the "notes" field.
func (ousau *OncallUserShiftAnnotationUpdate) SetNotes(s string) *OncallUserShiftAnnotationUpdate {
	ousau.mutation.SetNotes(s)
	return ousau
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (ousau *OncallUserShiftAnnotationUpdate) SetNillableNotes(s *string) *OncallUserShiftAnnotationUpdate {
	if s != nil {
		ousau.SetNotes(*s)
	}
	return ousau
}

// SetPinned sets the "pinned" field.
func (ousau *OncallUserShiftAnnotationUpdate) SetPinned(b bool) *OncallUserShiftAnnotationUpdate {
	ousau.mutation.SetPinned(b)
	return ousau
}

// SetNillablePinned sets the "pinned" field if the given value is not nil.
func (ousau *OncallUserShiftAnnotationUpdate) SetNillablePinned(b *bool) *OncallUserShiftAnnotationUpdate {
	if b != nil {
		ousau.SetPinned(*b)
	}
	return ousau
}

// SetShift sets the "shift" edge to the OncallUserShift entity.
func (ousau *OncallUserShiftAnnotationUpdate) SetShift(o *OncallUserShift) *OncallUserShiftAnnotationUpdate {
	return ousau.SetShiftID(o.ID)
}

// Mutation returns the OncallUserShiftAnnotationMutation object of the builder.
func (ousau *OncallUserShiftAnnotationUpdate) Mutation() *OncallUserShiftAnnotationMutation {
	return ousau.mutation
}

// ClearShift clears the "shift" edge to the OncallUserShift entity.
func (ousau *OncallUserShiftAnnotationUpdate) ClearShift() *OncallUserShiftAnnotationUpdate {
	ousau.mutation.ClearShift()
	return ousau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ousau *OncallUserShiftAnnotationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ousau.sqlSave, ousau.mutation, ousau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ousau *OncallUserShiftAnnotationUpdate) SaveX(ctx context.Context) int {
	affected, err := ousau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ousau *OncallUserShiftAnnotationUpdate) Exec(ctx context.Context) error {
	_, err := ousau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ousau *OncallUserShiftAnnotationUpdate) ExecX(ctx context.Context) {
	if err := ousau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ousau *OncallUserShiftAnnotationUpdate) check() error {
	if v, ok := ousau.mutation.EventKind(); ok {
		if err := oncallusershiftannotation.EventKindValidator(v); err != nil {
			return &ValidationError{Name: "event_kind", err: fmt.Errorf(`ent: validator failed for field "OncallUserShiftAnnotation.event_kind": %w`, err)}
		}
	}
	if ousau.mutation.ShiftCleared() && len(ousau.mutation.ShiftIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallUserShiftAnnotation.shift"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ousau *OncallUserShiftAnnotationUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OncallUserShiftAnnotationUpdate {
	ousau.modifiers = append(ousau.modifiers, modifiers...)
	return ousau
}

func (ousau *OncallUserShiftAnnotationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ousau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(oncallusershiftannotation.Table, oncallusershiftannotation.Columns, sqlgraph.NewFieldSpec(oncallusershiftannotation.FieldID, field.TypeUUID))
	if ps := ousau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ousau.mutation.EventID(); ok {
		_spec.SetField(oncallusershiftannotation.FieldEventID, field.TypeString, value)
	}
	if value, ok := ousau.mutation.EventKind(); ok {
		_spec.SetField(oncallusershiftannotation.FieldEventKind, field.TypeEnum, value)
	}
	if value, ok := ousau.mutation.Title(); ok {
		_spec.SetField(oncallusershiftannotation.FieldTitle, field.TypeString, value)
	}
	if value, ok := ousau.mutation.OccurredAt(); ok {
		_spec.SetField(oncallusershiftannotation.FieldOccurredAt, field.TypeTime, value)
	}
	if value, ok := ousau.mutation.MinutesOccupied(); ok {
		_spec.SetField(oncallusershiftannotation.FieldMinutesOccupied, field.TypeInt, value)
	}
	if value, ok := ousau.mutation.AddedMinutesOccupied(); ok {
		_spec.AddField(oncallusershiftannotation.FieldMinutesOccupied, field.TypeInt, value)
	}
	if value, ok := ousau.mutation.Notes(); ok {
		_spec.SetField(oncallusershiftannotation.FieldNotes, field.TypeString, value)
	}
	if value, ok := ousau.mutation.Pinned(); ok {
		_spec.SetField(oncallusershiftannotation.FieldPinned, field.TypeBool, value)
	}
	if ousau.mutation.ShiftCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oncallusershiftannotation.ShiftTable,
			Columns: []string{oncallusershiftannotation.ShiftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallusershift.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ousau.mutation.ShiftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oncallusershiftannotation.ShiftTable,
			Columns: []string{oncallusershiftannotation.ShiftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallusershift.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ousau.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ousau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oncallusershiftannotation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ousau.mutation.done = true
	return n, nil
}

// OncallUserShiftAnnotationUpdateOne is the builder for updating a single OncallUserShiftAnnotation entity.
type OncallUserShiftAnnotationUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OncallUserShiftAnnotationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetShiftID sets the "shift_id" field.
func (ousauo *OncallUserShiftAnnotationUpdateOne) SetShiftID(u uuid.UUID) *OncallUserShiftAnnotationUpdateOne {
	ousauo.mutation.SetShiftID(u)
	return ousauo
}

// SetNillableShiftID sets the "shift_id" field if the given value is not nil.
func (ousauo *OncallUserShiftAnnotationUpdateOne) SetNillableShiftID(u *uuid.UUID) *OncallUserShiftAnnotationUpdateOne {
	if u != nil {
		ousauo.SetShiftID(*u)
	}
	return ousauo
}

// SetEventID sets the "event_id" field.
func (ousauo *OncallUserShiftAnnotationUpdateOne) SetEventID(s string) *OncallUserShiftAnnotationUpdateOne {
	ousauo.mutation.SetEventID(s)
	return ousauo
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (ousauo *OncallUserShiftAnnotationUpdateOne) SetNillableEventID(s *string) *OncallUserShiftAnnotationUpdateOne {
	if s != nil {
		ousauo.SetEventID(*s)
	}
	return ousauo
}

// SetEventKind sets the "event_kind" field.
func (ousauo *OncallUserShiftAnnotationUpdateOne) SetEventKind(ok oncallusershiftannotation.EventKind) *OncallUserShiftAnnotationUpdateOne {
	ousauo.mutation.SetEventKind(ok)
	return ousauo
}

// SetNillableEventKind sets the "event_kind" field if the given value is not nil.
func (ousauo *OncallUserShiftAnnotationUpdateOne) SetNillableEventKind(ok *oncallusershiftannotation.EventKind) *OncallUserShiftAnnotationUpdateOne {
	if ok != nil {
		ousauo.SetEventKind(*ok)
	}
	return ousauo
}

// SetTitle sets the "title" field.
func (ousauo *OncallUserShiftAnnotationUpdateOne) SetTitle(s string) *OncallUserShiftAnnotationUpdateOne {
	ousauo.mutation.SetTitle(s)
	return ousauo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (ousauo *OncallUserShiftAnnotationUpdateOne) SetNillableTitle(s *string) *OncallUserShiftAnnotationUpdateOne {
	if s != nil {
		ousauo.SetTitle(*s)
	}
	return ousauo
}

// SetOccurredAt sets the "occurred_at" field.
func (ousauo *OncallUserShiftAnnotationUpdateOne) SetOccurredAt(t time.Time) *OncallUserShiftAnnotationUpdateOne {
	ousauo.mutation.SetOccurredAt(t)
	return ousauo
}

// SetNillableOccurredAt sets the "occurred_at" field if the given value is not nil.
func (ousauo *OncallUserShiftAnnotationUpdateOne) SetNillableOccurredAt(t *time.Time) *OncallUserShiftAnnotationUpdateOne {
	if t != nil {
		ousauo.SetOccurredAt(*t)
	}
	return ousauo
}

// SetMinutesOccupied sets the "minutes_occupied" field.
func (ousauo *OncallUserShiftAnnotationUpdateOne) SetMinutesOccupied(i int) *OncallUserShiftAnnotationUpdateOne {
	ousauo.mutation.ResetMinutesOccupied()
	ousauo.mutation.SetMinutesOccupied(i)
	return ousauo
}

// SetNillableMinutesOccupied sets the "minutes_occupied" field if the given value is not nil.
func (ousauo *OncallUserShiftAnnotationUpdateOne) SetNillableMinutesOccupied(i *int) *OncallUserShiftAnnotationUpdateOne {
	if i != nil {
		ousauo.SetMinutesOccupied(*i)
	}
	return ousauo
}

// AddMinutesOccupied adds i to the "minutes_occupied" field.
func (ousauo *OncallUserShiftAnnotationUpdateOne) AddMinutesOccupied(i int) *OncallUserShiftAnnotationUpdateOne {
	ousauo.mutation.AddMinutesOccupied(i)
	return ousauo
}

// SetNotes sets the "notes" field.
func (ousauo *OncallUserShiftAnnotationUpdateOne) SetNotes(s string) *OncallUserShiftAnnotationUpdateOne {
	ousauo.mutation.SetNotes(s)
	return ousauo
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (ousauo *OncallUserShiftAnnotationUpdateOne) SetNillableNotes(s *string) *OncallUserShiftAnnotationUpdateOne {
	if s != nil {
		ousauo.SetNotes(*s)
	}
	return ousauo
}

// SetPinned sets the "pinned" field.
func (ousauo *OncallUserShiftAnnotationUpdateOne) SetPinned(b bool) *OncallUserShiftAnnotationUpdateOne {
	ousauo.mutation.SetPinned(b)
	return ousauo
}

// SetNillablePinned sets the "pinned" field if the given value is not nil.
func (ousauo *OncallUserShiftAnnotationUpdateOne) SetNillablePinned(b *bool) *OncallUserShiftAnnotationUpdateOne {
	if b != nil {
		ousauo.SetPinned(*b)
	}
	return ousauo
}

// SetShift sets the "shift" edge to the OncallUserShift entity.
func (ousauo *OncallUserShiftAnnotationUpdateOne) SetShift(o *OncallUserShift) *OncallUserShiftAnnotationUpdateOne {
	return ousauo.SetShiftID(o.ID)
}

// Mutation returns the OncallUserShiftAnnotationMutation object of the builder.
func (ousauo *OncallUserShiftAnnotationUpdateOne) Mutation() *OncallUserShiftAnnotationMutation {
	return ousauo.mutation
}

// ClearShift clears the "shift" edge to the OncallUserShift entity.
func (ousauo *OncallUserShiftAnnotationUpdateOne) ClearShift() *OncallUserShiftAnnotationUpdateOne {
	ousauo.mutation.ClearShift()
	return ousauo
}

// Where appends a list predicates to the OncallUserShiftAnnotationUpdate builder.
func (ousauo *OncallUserShiftAnnotationUpdateOne) Where(ps ...predicate.OncallUserShiftAnnotation) *OncallUserShiftAnnotationUpdateOne {
	ousauo.mutation.Where(ps...)
	return ousauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ousauo *OncallUserShiftAnnotationUpdateOne) Select(field string, fields ...string) *OncallUserShiftAnnotationUpdateOne {
	ousauo.fields = append([]string{field}, fields...)
	return ousauo
}

// Save executes the query and returns the updated OncallUserShiftAnnotation entity.
func (ousauo *OncallUserShiftAnnotationUpdateOne) Save(ctx context.Context) (*OncallUserShiftAnnotation, error) {
	return withHooks(ctx, ousauo.sqlSave, ousauo.mutation, ousauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ousauo *OncallUserShiftAnnotationUpdateOne) SaveX(ctx context.Context) *OncallUserShiftAnnotation {
	node, err := ousauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ousauo *OncallUserShiftAnnotationUpdateOne) Exec(ctx context.Context) error {
	_, err := ousauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ousauo *OncallUserShiftAnnotationUpdateOne) ExecX(ctx context.Context) {
	if err := ousauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ousauo *OncallUserShiftAnnotationUpdateOne) check() error {
	if v, ok := ousauo.mutation.EventKind(); ok {
		if err := oncallusershiftannotation.EventKindValidator(v); err != nil {
			return &ValidationError{Name: "event_kind", err: fmt.Errorf(`ent: validator failed for field "OncallUserShiftAnnotation.event_kind": %w`, err)}
		}
	}
	if ousauo.mutation.ShiftCleared() && len(ousauo.mutation.ShiftIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallUserShiftAnnotation.shift"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ousauo *OncallUserShiftAnnotationUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OncallUserShiftAnnotationUpdateOne {
	ousauo.modifiers = append(ousauo.modifiers, modifiers...)
	return ousauo
}

func (ousauo *OncallUserShiftAnnotationUpdateOne) sqlSave(ctx context.Context) (_node *OncallUserShiftAnnotation, err error) {
	if err := ousauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(oncallusershiftannotation.Table, oncallusershiftannotation.Columns, sqlgraph.NewFieldSpec(oncallusershiftannotation.FieldID, field.TypeUUID))
	id, ok := ousauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OncallUserShiftAnnotation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ousauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oncallusershiftannotation.FieldID)
		for _, f := range fields {
			if !oncallusershiftannotation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oncallusershiftannotation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ousauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ousauo.mutation.EventID(); ok {
		_spec.SetField(oncallusershiftannotation.FieldEventID, field.TypeString, value)
	}
	if value, ok := ousauo.mutation.EventKind(); ok {
		_spec.SetField(oncallusershiftannotation.FieldEventKind, field.TypeEnum, value)
	}
	if value, ok := ousauo.mutation.Title(); ok {
		_spec.SetField(oncallusershiftannotation.FieldTitle, field.TypeString, value)
	}
	if value, ok := ousauo.mutation.OccurredAt(); ok {
		_spec.SetField(oncallusershiftannotation.FieldOccurredAt, field.TypeTime, value)
	}
	if value, ok := ousauo.mutation.MinutesOccupied(); ok {
		_spec.SetField(oncallusershiftannotation.FieldMinutesOccupied, field.TypeInt, value)
	}
	if value, ok := ousauo.mutation.AddedMinutesOccupied(); ok {
		_spec.AddField(oncallusershiftannotation.FieldMinutesOccupied, field.TypeInt, value)
	}
	if value, ok := ousauo.mutation.Notes(); ok {
		_spec.SetField(oncallusershiftannotation.FieldNotes, field.TypeString, value)
	}
	if value, ok := ousauo.mutation.Pinned(); ok {
		_spec.SetField(oncallusershiftannotation.FieldPinned, field.TypeBool, value)
	}
	if ousauo.mutation.ShiftCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oncallusershiftannotation.ShiftTable,
			Columns: []string{oncallusershiftannotation.ShiftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallusershift.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ousauo.mutation.ShiftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oncallusershiftannotation.ShiftTable,
			Columns: []string{oncallusershiftannotation.ShiftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallusershift.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ousauo.modifiers...)
	_node = &OncallUserShiftAnnotation{config: ousauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ousauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oncallusershiftannotation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ousauo.mutation.done = true
	return _node, nil
}
