// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/incident"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/task"
	"github.com/rezible/rezible/ent/user"
)

// TaskUpdate is the builder for updating Task entities.
type TaskUpdate struct {
	config
	hooks     []Hook
	mutation  *TaskMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TaskUpdate builder.
func (tu *TaskUpdate) Where(ps ...predicate.Task) *TaskUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetType sets the "type" field.
func (tu *TaskUpdate) SetType(t task.Type) *TaskUpdate {
	tu.mutation.SetType(t)
	return tu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableType(t *task.Type) *TaskUpdate {
	if t != nil {
		tu.SetType(*t)
	}
	return tu
}

// SetTitle sets the "title" field.
func (tu *TaskUpdate) SetTitle(s string) *TaskUpdate {
	tu.mutation.SetTitle(s)
	return tu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableTitle(s *string) *TaskUpdate {
	if s != nil {
		tu.SetTitle(*s)
	}
	return tu
}

// SetIncidentID sets the "incident_id" field.
func (tu *TaskUpdate) SetIncidentID(u uuid.UUID) *TaskUpdate {
	tu.mutation.SetIncidentID(u)
	return tu
}

// SetNillableIncidentID sets the "incident_id" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableIncidentID(u *uuid.UUID) *TaskUpdate {
	if u != nil {
		tu.SetIncidentID(*u)
	}
	return tu
}

// ClearIncidentID clears the value of the "incident_id" field.
func (tu *TaskUpdate) ClearIncidentID() *TaskUpdate {
	tu.mutation.ClearIncidentID()
	return tu
}

// SetAssigneeID sets the "assignee_id" field.
func (tu *TaskUpdate) SetAssigneeID(u uuid.UUID) *TaskUpdate {
	tu.mutation.SetAssigneeID(u)
	return tu
}

// SetNillableAssigneeID sets the "assignee_id" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableAssigneeID(u *uuid.UUID) *TaskUpdate {
	if u != nil {
		tu.SetAssigneeID(*u)
	}
	return tu
}

// ClearAssigneeID clears the value of the "assignee_id" field.
func (tu *TaskUpdate) ClearAssigneeID() *TaskUpdate {
	tu.mutation.ClearAssigneeID()
	return tu
}

// SetCreatorID sets the "creator_id" field.
func (tu *TaskUpdate) SetCreatorID(u uuid.UUID) *TaskUpdate {
	tu.mutation.SetCreatorID(u)
	return tu
}

// SetNillableCreatorID sets the "creator_id" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableCreatorID(u *uuid.UUID) *TaskUpdate {
	if u != nil {
		tu.SetCreatorID(*u)
	}
	return tu
}

// ClearCreatorID clears the value of the "creator_id" field.
func (tu *TaskUpdate) ClearCreatorID() *TaskUpdate {
	tu.mutation.ClearCreatorID()
	return tu
}

// SetIssueTrackerID sets the "issue_tracker_id" field.
func (tu *TaskUpdate) SetIssueTrackerID(s string) *TaskUpdate {
	tu.mutation.SetIssueTrackerID(s)
	return tu
}

// SetNillableIssueTrackerID sets the "issue_tracker_id" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableIssueTrackerID(s *string) *TaskUpdate {
	if s != nil {
		tu.SetIssueTrackerID(*s)
	}
	return tu
}

// ClearIssueTrackerID clears the value of the "issue_tracker_id" field.
func (tu *TaskUpdate) ClearIssueTrackerID() *TaskUpdate {
	tu.mutation.ClearIssueTrackerID()
	return tu
}

// SetIncident sets the "incident" edge to the Incident entity.
func (tu *TaskUpdate) SetIncident(i *Incident) *TaskUpdate {
	return tu.SetIncidentID(i.ID)
}

// SetAssignee sets the "assignee" edge to the User entity.
func (tu *TaskUpdate) SetAssignee(u *User) *TaskUpdate {
	return tu.SetAssigneeID(u.ID)
}

// SetCreator sets the "creator" edge to the User entity.
func (tu *TaskUpdate) SetCreator(u *User) *TaskUpdate {
	return tu.SetCreatorID(u.ID)
}

// Mutation returns the TaskMutation object of the builder.
func (tu *TaskUpdate) Mutation() *TaskMutation {
	return tu.mutation
}

// ClearIncident clears the "incident" edge to the Incident entity.
func (tu *TaskUpdate) ClearIncident() *TaskUpdate {
	tu.mutation.ClearIncident()
	return tu
}

// ClearAssignee clears the "assignee" edge to the User entity.
func (tu *TaskUpdate) ClearAssignee() *TaskUpdate {
	tu.mutation.ClearAssignee()
	return tu
}

// ClearCreator clears the "creator" edge to the User entity.
func (tu *TaskUpdate) ClearCreator() *TaskUpdate {
	tu.mutation.ClearCreator()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TaskUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TaskUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TaskUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TaskUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TaskUpdate) check() error {
	if v, ok := tu.mutation.GetType(); ok {
		if err := task.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Task.type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tu *TaskUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TaskUpdate {
	tu.modifiers = append(tu.modifiers, modifiers...)
	return tu
}

func (tu *TaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.GetType(); ok {
		_spec.SetField(task.FieldType, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.Title(); ok {
		_spec.SetField(task.FieldTitle, field.TypeString, value)
	}
	if value, ok := tu.mutation.IssueTrackerID(); ok {
		_spec.SetField(task.FieldIssueTrackerID, field.TypeString, value)
	}
	if tu.mutation.IssueTrackerIDCleared() {
		_spec.ClearField(task.FieldIssueTrackerID, field.TypeString)
	}
	if tu.mutation.IncidentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.IncidentTable,
			Columns: []string{task.IncidentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.IncidentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.IncidentTable,
			Columns: []string{task.IncidentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.AssigneeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.AssigneeTable,
			Columns: []string{task.AssigneeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.AssigneeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.AssigneeTable,
			Columns: []string{task.AssigneeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.CreatorTable,
			Columns: []string{task.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.CreatorTable,
			Columns: []string{task.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TaskUpdateOne is the builder for updating a single Task entity.
type TaskUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TaskMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetType sets the "type" field.
func (tuo *TaskUpdateOne) SetType(t task.Type) *TaskUpdateOne {
	tuo.mutation.SetType(t)
	return tuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableType(t *task.Type) *TaskUpdateOne {
	if t != nil {
		tuo.SetType(*t)
	}
	return tuo
}

// SetTitle sets the "title" field.
func (tuo *TaskUpdateOne) SetTitle(s string) *TaskUpdateOne {
	tuo.mutation.SetTitle(s)
	return tuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableTitle(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetTitle(*s)
	}
	return tuo
}

// SetIncidentID sets the "incident_id" field.
func (tuo *TaskUpdateOne) SetIncidentID(u uuid.UUID) *TaskUpdateOne {
	tuo.mutation.SetIncidentID(u)
	return tuo
}

// SetNillableIncidentID sets the "incident_id" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableIncidentID(u *uuid.UUID) *TaskUpdateOne {
	if u != nil {
		tuo.SetIncidentID(*u)
	}
	return tuo
}

// ClearIncidentID clears the value of the "incident_id" field.
func (tuo *TaskUpdateOne) ClearIncidentID() *TaskUpdateOne {
	tuo.mutation.ClearIncidentID()
	return tuo
}

// SetAssigneeID sets the "assignee_id" field.
func (tuo *TaskUpdateOne) SetAssigneeID(u uuid.UUID) *TaskUpdateOne {
	tuo.mutation.SetAssigneeID(u)
	return tuo
}

// SetNillableAssigneeID sets the "assignee_id" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableAssigneeID(u *uuid.UUID) *TaskUpdateOne {
	if u != nil {
		tuo.SetAssigneeID(*u)
	}
	return tuo
}

// ClearAssigneeID clears the value of the "assignee_id" field.
func (tuo *TaskUpdateOne) ClearAssigneeID() *TaskUpdateOne {
	tuo.mutation.ClearAssigneeID()
	return tuo
}

// SetCreatorID sets the "creator_id" field.
func (tuo *TaskUpdateOne) SetCreatorID(u uuid.UUID) *TaskUpdateOne {
	tuo.mutation.SetCreatorID(u)
	return tuo
}

// SetNillableCreatorID sets the "creator_id" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableCreatorID(u *uuid.UUID) *TaskUpdateOne {
	if u != nil {
		tuo.SetCreatorID(*u)
	}
	return tuo
}

// ClearCreatorID clears the value of the "creator_id" field.
func (tuo *TaskUpdateOne) ClearCreatorID() *TaskUpdateOne {
	tuo.mutation.ClearCreatorID()
	return tuo
}

// SetIssueTrackerID sets the "issue_tracker_id" field.
func (tuo *TaskUpdateOne) SetIssueTrackerID(s string) *TaskUpdateOne {
	tuo.mutation.SetIssueTrackerID(s)
	return tuo
}

// SetNillableIssueTrackerID sets the "issue_tracker_id" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableIssueTrackerID(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetIssueTrackerID(*s)
	}
	return tuo
}

// ClearIssueTrackerID clears the value of the "issue_tracker_id" field.
func (tuo *TaskUpdateOne) ClearIssueTrackerID() *TaskUpdateOne {
	tuo.mutation.ClearIssueTrackerID()
	return tuo
}

// SetIncident sets the "incident" edge to the Incident entity.
func (tuo *TaskUpdateOne) SetIncident(i *Incident) *TaskUpdateOne {
	return tuo.SetIncidentID(i.ID)
}

// SetAssignee sets the "assignee" edge to the User entity.
func (tuo *TaskUpdateOne) SetAssignee(u *User) *TaskUpdateOne {
	return tuo.SetAssigneeID(u.ID)
}

// SetCreator sets the "creator" edge to the User entity.
func (tuo *TaskUpdateOne) SetCreator(u *User) *TaskUpdateOne {
	return tuo.SetCreatorID(u.ID)
}

// Mutation returns the TaskMutation object of the builder.
func (tuo *TaskUpdateOne) Mutation() *TaskMutation {
	return tuo.mutation
}

// ClearIncident clears the "incident" edge to the Incident entity.
func (tuo *TaskUpdateOne) ClearIncident() *TaskUpdateOne {
	tuo.mutation.ClearIncident()
	return tuo
}

// ClearAssignee clears the "assignee" edge to the User entity.
func (tuo *TaskUpdateOne) ClearAssignee() *TaskUpdateOne {
	tuo.mutation.ClearAssignee()
	return tuo
}

// ClearCreator clears the "creator" edge to the User entity.
func (tuo *TaskUpdateOne) ClearCreator() *TaskUpdateOne {
	tuo.mutation.ClearCreator()
	return tuo
}

// Where appends a list predicates to the TaskUpdate builder.
func (tuo *TaskUpdateOne) Where(ps ...predicate.Task) *TaskUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TaskUpdateOne) Select(field string, fields ...string) *TaskUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Task entity.
func (tuo *TaskUpdateOne) Save(ctx context.Context) (*Task, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TaskUpdateOne) SaveX(ctx context.Context) *Task {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TaskUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TaskUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TaskUpdateOne) check() error {
	if v, ok := tuo.mutation.GetType(); ok {
		if err := task.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Task.type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tuo *TaskUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TaskUpdateOne {
	tuo.modifiers = append(tuo.modifiers, modifiers...)
	return tuo
}

func (tuo *TaskUpdateOne) sqlSave(ctx context.Context) (_node *Task, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Task.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, task.FieldID)
		for _, f := range fields {
			if !task.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != task.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.GetType(); ok {
		_spec.SetField(task.FieldType, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.Title(); ok {
		_spec.SetField(task.FieldTitle, field.TypeString, value)
	}
	if value, ok := tuo.mutation.IssueTrackerID(); ok {
		_spec.SetField(task.FieldIssueTrackerID, field.TypeString, value)
	}
	if tuo.mutation.IssueTrackerIDCleared() {
		_spec.ClearField(task.FieldIssueTrackerID, field.TypeString)
	}
	if tuo.mutation.IncidentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.IncidentTable,
			Columns: []string{task.IncidentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.IncidentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.IncidentTable,
			Columns: []string{task.IncidentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.AssigneeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.AssigneeTable,
			Columns: []string{task.AssigneeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.AssigneeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.AssigneeTable,
			Columns: []string{task.AssigneeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.CreatorTable,
			Columns: []string{task.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.CreatorTable,
			Columns: []string{task.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tuo.modifiers...)
	_node = &Task{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
