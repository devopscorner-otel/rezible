// Code generated by ent, DO NOT EDIT.

package incidentresourceimpact

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the incidentresourceimpact type in the database.
	Label = "incident_resource_impact"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIncidentID holds the string denoting the incident_id field in the database.
	FieldIncidentID = "incident_id"
	// FieldServiceID holds the string denoting the service_id field in the database.
	FieldServiceID = "service_id"
	// FieldFunctionalityID holds the string denoting the functionality_id field in the database.
	FieldFunctionalityID = "functionality_id"
	// EdgeIncident holds the string denoting the incident edge name in mutations.
	EdgeIncident = "incident"
	// EdgeService holds the string denoting the service edge name in mutations.
	EdgeService = "service"
	// EdgeFunctionality holds the string denoting the functionality edge name in mutations.
	EdgeFunctionality = "functionality"
	// EdgeResultingIncidents holds the string denoting the resulting_incidents edge name in mutations.
	EdgeResultingIncidents = "resulting_incidents"
	// Table holds the table name of the incidentresourceimpact in the database.
	Table = "incident_resource_impacts"
	// IncidentTable is the table that holds the incident relation/edge.
	IncidentTable = "incident_resource_impacts"
	// IncidentInverseTable is the table name for the Incident entity.
	// It exists in this package in order to avoid circular dependency with the "incident" package.
	IncidentInverseTable = "incidents"
	// IncidentColumn is the table column denoting the incident relation/edge.
	IncidentColumn = "incident_id"
	// ServiceTable is the table that holds the service relation/edge.
	ServiceTable = "incident_resource_impacts"
	// ServiceInverseTable is the table name for the Service entity.
	// It exists in this package in order to avoid circular dependency with the "service" package.
	ServiceInverseTable = "services"
	// ServiceColumn is the table column denoting the service relation/edge.
	ServiceColumn = "service_id"
	// FunctionalityTable is the table that holds the functionality relation/edge.
	FunctionalityTable = "incident_resource_impacts"
	// FunctionalityInverseTable is the table name for the Functionality entity.
	// It exists in this package in order to avoid circular dependency with the "functionality" package.
	FunctionalityInverseTable = "functionalities"
	// FunctionalityColumn is the table column denoting the functionality relation/edge.
	FunctionalityColumn = "functionality_id"
	// ResultingIncidentsTable is the table that holds the resulting_incidents relation/edge.
	ResultingIncidentsTable = "incident_links"
	// ResultingIncidentsInverseTable is the table name for the IncidentLink entity.
	// It exists in this package in order to avoid circular dependency with the "incidentlink" package.
	ResultingIncidentsInverseTable = "incident_links"
	// ResultingIncidentsColumn is the table column denoting the resulting_incidents relation/edge.
	ResultingIncidentsColumn = "incident_link_resource_impact"
)

// Columns holds all SQL columns for incidentresourceimpact fields.
var Columns = []string{
	FieldID,
	FieldIncidentID,
	FieldServiceID,
	FieldFunctionalityID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the IncidentResourceImpact queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIncidentID orders the results by the incident_id field.
func ByIncidentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIncidentID, opts...).ToFunc()
}

// ByServiceID orders the results by the service_id field.
func ByServiceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldServiceID, opts...).ToFunc()
}

// ByFunctionalityID orders the results by the functionality_id field.
func ByFunctionalityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFunctionalityID, opts...).ToFunc()
}

// ByIncidentField orders the results by incident field.
func ByIncidentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIncidentStep(), sql.OrderByField(field, opts...))
	}
}

// ByServiceField orders the results by service field.
func ByServiceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newServiceStep(), sql.OrderByField(field, opts...))
	}
}

// ByFunctionalityField orders the results by functionality field.
func ByFunctionalityField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFunctionalityStep(), sql.OrderByField(field, opts...))
	}
}

// ByResultingIncidentsCount orders the results by resulting_incidents count.
func ByResultingIncidentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newResultingIncidentsStep(), opts...)
	}
}

// ByResultingIncidents orders the results by resulting_incidents terms.
func ByResultingIncidents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newResultingIncidentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newIncidentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IncidentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, IncidentTable, IncidentColumn),
	)
}
func newServiceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ServiceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ServiceTable, ServiceColumn),
	)
}
func newFunctionalityStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FunctionalityInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, FunctionalityTable, FunctionalityColumn),
	)
}
func newResultingIncidentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ResultingIncidentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ResultingIncidentsTable, ResultingIncidentsColumn),
	)
}
