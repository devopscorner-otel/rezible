// Code generated by ent, DO NOT EDIT.

package incidentresourceimpact

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/twohundreds/rezible/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.IncidentResourceImpact {
	return predicate.IncidentResourceImpact(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.IncidentResourceImpact {
	return predicate.IncidentResourceImpact(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.IncidentResourceImpact {
	return predicate.IncidentResourceImpact(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.IncidentResourceImpact {
	return predicate.IncidentResourceImpact(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.IncidentResourceImpact {
	return predicate.IncidentResourceImpact(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.IncidentResourceImpact {
	return predicate.IncidentResourceImpact(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.IncidentResourceImpact {
	return predicate.IncidentResourceImpact(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.IncidentResourceImpact {
	return predicate.IncidentResourceImpact(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.IncidentResourceImpact {
	return predicate.IncidentResourceImpact(sql.FieldLTE(FieldID, id))
}

// IncidentID applies equality check predicate on the "incident_id" field. It's identical to IncidentIDEQ.
func IncidentID(v uuid.UUID) predicate.IncidentResourceImpact {
	return predicate.IncidentResourceImpact(sql.FieldEQ(FieldIncidentID, v))
}

// ServiceID applies equality check predicate on the "service_id" field. It's identical to ServiceIDEQ.
func ServiceID(v uuid.UUID) predicate.IncidentResourceImpact {
	return predicate.IncidentResourceImpact(sql.FieldEQ(FieldServiceID, v))
}

// FunctionalityID applies equality check predicate on the "functionality_id" field. It's identical to FunctionalityIDEQ.
func FunctionalityID(v uuid.UUID) predicate.IncidentResourceImpact {
	return predicate.IncidentResourceImpact(sql.FieldEQ(FieldFunctionalityID, v))
}

// IncidentIDEQ applies the EQ predicate on the "incident_id" field.
func IncidentIDEQ(v uuid.UUID) predicate.IncidentResourceImpact {
	return predicate.IncidentResourceImpact(sql.FieldEQ(FieldIncidentID, v))
}

// IncidentIDNEQ applies the NEQ predicate on the "incident_id" field.
func IncidentIDNEQ(v uuid.UUID) predicate.IncidentResourceImpact {
	return predicate.IncidentResourceImpact(sql.FieldNEQ(FieldIncidentID, v))
}

// IncidentIDIn applies the In predicate on the "incident_id" field.
func IncidentIDIn(vs ...uuid.UUID) predicate.IncidentResourceImpact {
	return predicate.IncidentResourceImpact(sql.FieldIn(FieldIncidentID, vs...))
}

// IncidentIDNotIn applies the NotIn predicate on the "incident_id" field.
func IncidentIDNotIn(vs ...uuid.UUID) predicate.IncidentResourceImpact {
	return predicate.IncidentResourceImpact(sql.FieldNotIn(FieldIncidentID, vs...))
}

// ServiceIDEQ applies the EQ predicate on the "service_id" field.
func ServiceIDEQ(v uuid.UUID) predicate.IncidentResourceImpact {
	return predicate.IncidentResourceImpact(sql.FieldEQ(FieldServiceID, v))
}

// ServiceIDNEQ applies the NEQ predicate on the "service_id" field.
func ServiceIDNEQ(v uuid.UUID) predicate.IncidentResourceImpact {
	return predicate.IncidentResourceImpact(sql.FieldNEQ(FieldServiceID, v))
}

// ServiceIDIn applies the In predicate on the "service_id" field.
func ServiceIDIn(vs ...uuid.UUID) predicate.IncidentResourceImpact {
	return predicate.IncidentResourceImpact(sql.FieldIn(FieldServiceID, vs...))
}

// ServiceIDNotIn applies the NotIn predicate on the "service_id" field.
func ServiceIDNotIn(vs ...uuid.UUID) predicate.IncidentResourceImpact {
	return predicate.IncidentResourceImpact(sql.FieldNotIn(FieldServiceID, vs...))
}

// ServiceIDIsNil applies the IsNil predicate on the "service_id" field.
func ServiceIDIsNil() predicate.IncidentResourceImpact {
	return predicate.IncidentResourceImpact(sql.FieldIsNull(FieldServiceID))
}

// ServiceIDNotNil applies the NotNil predicate on the "service_id" field.
func ServiceIDNotNil() predicate.IncidentResourceImpact {
	return predicate.IncidentResourceImpact(sql.FieldNotNull(FieldServiceID))
}

// FunctionalityIDEQ applies the EQ predicate on the "functionality_id" field.
func FunctionalityIDEQ(v uuid.UUID) predicate.IncidentResourceImpact {
	return predicate.IncidentResourceImpact(sql.FieldEQ(FieldFunctionalityID, v))
}

// FunctionalityIDNEQ applies the NEQ predicate on the "functionality_id" field.
func FunctionalityIDNEQ(v uuid.UUID) predicate.IncidentResourceImpact {
	return predicate.IncidentResourceImpact(sql.FieldNEQ(FieldFunctionalityID, v))
}

// FunctionalityIDIn applies the In predicate on the "functionality_id" field.
func FunctionalityIDIn(vs ...uuid.UUID) predicate.IncidentResourceImpact {
	return predicate.IncidentResourceImpact(sql.FieldIn(FieldFunctionalityID, vs...))
}

// FunctionalityIDNotIn applies the NotIn predicate on the "functionality_id" field.
func FunctionalityIDNotIn(vs ...uuid.UUID) predicate.IncidentResourceImpact {
	return predicate.IncidentResourceImpact(sql.FieldNotIn(FieldFunctionalityID, vs...))
}

// FunctionalityIDIsNil applies the IsNil predicate on the "functionality_id" field.
func FunctionalityIDIsNil() predicate.IncidentResourceImpact {
	return predicate.IncidentResourceImpact(sql.FieldIsNull(FieldFunctionalityID))
}

// FunctionalityIDNotNil applies the NotNil predicate on the "functionality_id" field.
func FunctionalityIDNotNil() predicate.IncidentResourceImpact {
	return predicate.IncidentResourceImpact(sql.FieldNotNull(FieldFunctionalityID))
}

// HasIncident applies the HasEdge predicate on the "incident" edge.
func HasIncident() predicate.IncidentResourceImpact {
	return predicate.IncidentResourceImpact(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, IncidentTable, IncidentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIncidentWith applies the HasEdge predicate on the "incident" edge with a given conditions (other predicates).
func HasIncidentWith(preds ...predicate.Incident) predicate.IncidentResourceImpact {
	return predicate.IncidentResourceImpact(func(s *sql.Selector) {
		step := newIncidentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasService applies the HasEdge predicate on the "service" edge.
func HasService() predicate.IncidentResourceImpact {
	return predicate.IncidentResourceImpact(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ServiceTable, ServiceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServiceWith applies the HasEdge predicate on the "service" edge with a given conditions (other predicates).
func HasServiceWith(preds ...predicate.Service) predicate.IncidentResourceImpact {
	return predicate.IncidentResourceImpact(func(s *sql.Selector) {
		step := newServiceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFunctionality applies the HasEdge predicate on the "functionality" edge.
func HasFunctionality() predicate.IncidentResourceImpact {
	return predicate.IncidentResourceImpact(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FunctionalityTable, FunctionalityColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFunctionalityWith applies the HasEdge predicate on the "functionality" edge with a given conditions (other predicates).
func HasFunctionalityWith(preds ...predicate.Functionality) predicate.IncidentResourceImpact {
	return predicate.IncidentResourceImpact(func(s *sql.Selector) {
		step := newFunctionalityStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasResultingIncidents applies the HasEdge predicate on the "resulting_incidents" edge.
func HasResultingIncidents() predicate.IncidentResourceImpact {
	return predicate.IncidentResourceImpact(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ResultingIncidentsTable, ResultingIncidentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasResultingIncidentsWith applies the HasEdge predicate on the "resulting_incidents" edge with a given conditions (other predicates).
func HasResultingIncidentsWith(preds ...predicate.IncidentLink) predicate.IncidentResourceImpact {
	return predicate.IncidentResourceImpact(func(s *sql.Selector) {
		step := newResultingIncidentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.IncidentResourceImpact) predicate.IncidentResourceImpact {
	return predicate.IncidentResourceImpact(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.IncidentResourceImpact) predicate.IncidentResourceImpact {
	return predicate.IncidentResourceImpact(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.IncidentResourceImpact) predicate.IncidentResourceImpact {
	return predicate.IncidentResourceImpact(sql.NotPredicates(p))
}
