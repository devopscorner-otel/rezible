// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/oncallusershift"
	"github.com/rezible/rezible/ent/oncallusershiftmetrics"
	"github.com/rezible/rezible/ent/tenant"
)

// OncallUserShiftMetrics is the model entity for the OncallUserShiftMetrics schema.
type OncallUserShiftMetrics struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID int `json:"tenant_id,omitempty"`
	// ShiftID holds the value of the "shift_id" field.
	ShiftID uuid.UUID `json:"shift_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OncallUserShiftMetricsQuery when eager-loading is set.
	Edges        OncallUserShiftMetricsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OncallUserShiftMetricsEdges holds the relations/edges for other nodes in the graph.
type OncallUserShiftMetricsEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Shift holds the value of the shift edge.
	Shift *OncallUserShift `json:"shift,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OncallUserShiftMetricsEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// ShiftOrErr returns the Shift value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OncallUserShiftMetricsEdges) ShiftOrErr() (*OncallUserShift, error) {
	if e.Shift != nil {
		return e.Shift, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: oncallusershift.Label}
	}
	return nil, &NotLoadedError{edge: "shift"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OncallUserShiftMetrics) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case oncallusershiftmetrics.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case oncallusershiftmetrics.FieldID, oncallusershiftmetrics.FieldShiftID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OncallUserShiftMetrics fields.
func (ousm *OncallUserShiftMetrics) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case oncallusershiftmetrics.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ousm.ID = *value
			}
		case oncallusershiftmetrics.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				ousm.TenantID = int(value.Int64)
			}
		case oncallusershiftmetrics.FieldShiftID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field shift_id", values[i])
			} else if value != nil {
				ousm.ShiftID = *value
			}
		default:
			ousm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OncallUserShiftMetrics.
// This includes values selected through modifiers, order, etc.
func (ousm *OncallUserShiftMetrics) Value(name string) (ent.Value, error) {
	return ousm.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the OncallUserShiftMetrics entity.
func (ousm *OncallUserShiftMetrics) QueryTenant() *TenantQuery {
	return NewOncallUserShiftMetricsClient(ousm.config).QueryTenant(ousm)
}

// QueryShift queries the "shift" edge of the OncallUserShiftMetrics entity.
func (ousm *OncallUserShiftMetrics) QueryShift() *OncallUserShiftQuery {
	return NewOncallUserShiftMetricsClient(ousm.config).QueryShift(ousm)
}

// Update returns a builder for updating this OncallUserShiftMetrics.
// Note that you need to call OncallUserShiftMetrics.Unwrap() before calling this method if this OncallUserShiftMetrics
// was returned from a transaction, and the transaction was committed or rolled back.
func (ousm *OncallUserShiftMetrics) Update() *OncallUserShiftMetricsUpdateOne {
	return NewOncallUserShiftMetricsClient(ousm.config).UpdateOne(ousm)
}

// Unwrap unwraps the OncallUserShiftMetrics entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ousm *OncallUserShiftMetrics) Unwrap() *OncallUserShiftMetrics {
	_tx, ok := ousm.config.driver.(*txDriver)
	if !ok {
		panic("ent: OncallUserShiftMetrics is not a transactional entity")
	}
	ousm.config.driver = _tx.drv
	return ousm
}

// String implements the fmt.Stringer.
func (ousm *OncallUserShiftMetrics) String() string {
	var builder strings.Builder
	builder.WriteString("OncallUserShiftMetrics(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ousm.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", ousm.TenantID))
	builder.WriteString(", ")
	builder.WriteString("shift_id=")
	builder.WriteString(fmt.Sprintf("%v", ousm.ShiftID))
	builder.WriteByte(')')
	return builder.String()
}

// OncallUserShiftMetricsSlice is a parsable slice of OncallUserShiftMetrics.
type OncallUserShiftMetricsSlice []*OncallUserShiftMetrics
