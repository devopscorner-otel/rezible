// Code generated by ent, DO NOT EDIT.

package oncallrostermetrics

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the oncallrostermetrics type in the database.
	Label = "oncall_roster_metrics"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRosterID holds the string denoting the roster_id field in the database.
	FieldRosterID = "roster_id"
	// EdgeRoster holds the string denoting the roster edge name in mutations.
	EdgeRoster = "roster"
	// Table holds the table name of the oncallrostermetrics in the database.
	Table = "oncall_roster_metrics"
	// RosterTable is the table that holds the roster relation/edge.
	RosterTable = "oncall_roster_metrics"
	// RosterInverseTable is the table name for the OncallRoster entity.
	// It exists in this package in order to avoid circular dependency with the "oncallroster" package.
	RosterInverseTable = "oncall_rosters"
	// RosterColumn is the table column denoting the roster relation/edge.
	RosterColumn = "roster_id"
)

// Columns holds all SQL columns for oncallrostermetrics fields.
var Columns = []string{
	FieldID,
	FieldRosterID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the OncallRosterMetrics queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRosterID orders the results by the roster_id field.
func ByRosterID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRosterID, opts...).ToFunc()
}

// ByRosterField orders the results by roster field.
func ByRosterField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRosterStep(), sql.OrderByField(field, opts...))
	}
}
func newRosterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RosterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RosterTable, RosterColumn),
	)
}
