// Code generated by ent, DO NOT EDIT.

package oncallrostermetrics

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.OncallRosterMetrics {
	return predicate.OncallRosterMetrics(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.OncallRosterMetrics {
	return predicate.OncallRosterMetrics(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.OncallRosterMetrics {
	return predicate.OncallRosterMetrics(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.OncallRosterMetrics {
	return predicate.OncallRosterMetrics(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.OncallRosterMetrics {
	return predicate.OncallRosterMetrics(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.OncallRosterMetrics {
	return predicate.OncallRosterMetrics(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.OncallRosterMetrics {
	return predicate.OncallRosterMetrics(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.OncallRosterMetrics {
	return predicate.OncallRosterMetrics(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.OncallRosterMetrics {
	return predicate.OncallRosterMetrics(sql.FieldLTE(FieldID, id))
}

// RosterID applies equality check predicate on the "roster_id" field. It's identical to RosterIDEQ.
func RosterID(v uuid.UUID) predicate.OncallRosterMetrics {
	return predicate.OncallRosterMetrics(sql.FieldEQ(FieldRosterID, v))
}

// RosterIDEQ applies the EQ predicate on the "roster_id" field.
func RosterIDEQ(v uuid.UUID) predicate.OncallRosterMetrics {
	return predicate.OncallRosterMetrics(sql.FieldEQ(FieldRosterID, v))
}

// RosterIDNEQ applies the NEQ predicate on the "roster_id" field.
func RosterIDNEQ(v uuid.UUID) predicate.OncallRosterMetrics {
	return predicate.OncallRosterMetrics(sql.FieldNEQ(FieldRosterID, v))
}

// RosterIDIn applies the In predicate on the "roster_id" field.
func RosterIDIn(vs ...uuid.UUID) predicate.OncallRosterMetrics {
	return predicate.OncallRosterMetrics(sql.FieldIn(FieldRosterID, vs...))
}

// RosterIDNotIn applies the NotIn predicate on the "roster_id" field.
func RosterIDNotIn(vs ...uuid.UUID) predicate.OncallRosterMetrics {
	return predicate.OncallRosterMetrics(sql.FieldNotIn(FieldRosterID, vs...))
}

// HasRoster applies the HasEdge predicate on the "roster" edge.
func HasRoster() predicate.OncallRosterMetrics {
	return predicate.OncallRosterMetrics(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RosterTable, RosterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRosterWith applies the HasEdge predicate on the "roster" edge with a given conditions (other predicates).
func HasRosterWith(preds ...predicate.OncallRoster) predicate.OncallRosterMetrics {
	return predicate.OncallRosterMetrics(func(s *sql.Selector) {
		step := newRosterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OncallRosterMetrics) predicate.OncallRosterMetrics {
	return predicate.OncallRosterMetrics(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OncallRosterMetrics) predicate.OncallRosterMetrics {
	return predicate.OncallRosterMetrics(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OncallRosterMetrics) predicate.OncallRosterMetrics {
	return predicate.OncallRosterMetrics(sql.NotPredicates(p))
}
