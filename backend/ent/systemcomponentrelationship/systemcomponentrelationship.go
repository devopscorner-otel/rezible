// Code generated by ent, DO NOT EDIT.

package systemcomponentrelationship

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the systemcomponentrelationship type in the database.
	Label = "system_component_relationship"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldProviderID holds the string denoting the provider_id field in the database.
	FieldProviderID = "provider_id"
	// FieldSourceID holds the string denoting the source_id field in the database.
	FieldSourceID = "source_id"
	// FieldTargetID holds the string denoting the target_id field in the database.
	FieldTargetID = "target_id"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeSource holds the string denoting the source edge name in mutations.
	EdgeSource = "source"
	// EdgeTarget holds the string denoting the target edge name in mutations.
	EdgeTarget = "target"
	// EdgeSystemAnalyses holds the string denoting the system_analyses edge name in mutations.
	EdgeSystemAnalyses = "system_analyses"
	// EdgeHazards holds the string denoting the hazards edge name in mutations.
	EdgeHazards = "hazards"
	// Table holds the table name of the systemcomponentrelationship in the database.
	Table = "system_component_relationships"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "system_component_relationships"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// SourceTable is the table that holds the source relation/edge.
	SourceTable = "system_component_relationships"
	// SourceInverseTable is the table name for the SystemComponent entity.
	// It exists in this package in order to avoid circular dependency with the "systemcomponent" package.
	SourceInverseTable = "system_components"
	// SourceColumn is the table column denoting the source relation/edge.
	SourceColumn = "source_id"
	// TargetTable is the table that holds the target relation/edge.
	TargetTable = "system_component_relationships"
	// TargetInverseTable is the table name for the SystemComponent entity.
	// It exists in this package in order to avoid circular dependency with the "systemcomponent" package.
	TargetInverseTable = "system_components"
	// TargetColumn is the table column denoting the target relation/edge.
	TargetColumn = "target_id"
	// SystemAnalysesTable is the table that holds the system_analyses relation/edge.
	SystemAnalysesTable = "system_analysis_relationships"
	// SystemAnalysesInverseTable is the table name for the SystemAnalysisRelationship entity.
	// It exists in this package in order to avoid circular dependency with the "systemanalysisrelationship" package.
	SystemAnalysesInverseTable = "system_analysis_relationships"
	// SystemAnalysesColumn is the table column denoting the system_analyses relation/edge.
	SystemAnalysesColumn = "component_relationship_id"
	// HazardsTable is the table that holds the hazards relation/edge. The primary key declared below.
	HazardsTable = "system_hazard_relationships"
	// HazardsInverseTable is the table name for the SystemHazard entity.
	// It exists in this package in order to avoid circular dependency with the "systemhazard" package.
	HazardsInverseTable = "system_hazards"
)

// Columns holds all SQL columns for systemcomponentrelationship fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldProviderID,
	FieldSourceID,
	FieldTargetID,
	FieldDescription,
	FieldCreatedAt,
}

var (
	// HazardsPrimaryKey and HazardsColumn2 are the table columns denoting the
	// primary key for the hazards relation (M2M).
	HazardsPrimaryKey = []string{"system_hazard_id", "system_component_relationship_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/rezible/rezible/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the SystemComponentRelationship queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByProviderID orders the results by the provider_id field.
func ByProviderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProviderID, opts...).ToFunc()
}

// BySourceID orders the results by the source_id field.
func BySourceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSourceID, opts...).ToFunc()
}

// ByTargetID orders the results by the target_id field.
func ByTargetID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTargetID, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// BySourceField orders the results by source field.
func BySourceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSourceStep(), sql.OrderByField(field, opts...))
	}
}

// ByTargetField orders the results by target field.
func ByTargetField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTargetStep(), sql.OrderByField(field, opts...))
	}
}

// BySystemAnalysesCount orders the results by system_analyses count.
func BySystemAnalysesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSystemAnalysesStep(), opts...)
	}
}

// BySystemAnalyses orders the results by system_analyses terms.
func BySystemAnalyses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSystemAnalysesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByHazardsCount orders the results by hazards count.
func ByHazardsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHazardsStep(), opts...)
	}
}

// ByHazards orders the results by hazards terms.
func ByHazards(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHazardsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newSourceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SourceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SourceTable, SourceColumn),
	)
}
func newTargetStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TargetInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TargetTable, TargetColumn),
	)
}
func newSystemAnalysesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SystemAnalysesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, SystemAnalysesTable, SystemAnalysesColumn),
	)
}
func newHazardsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HazardsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, HazardsTable, HazardsPrimaryKey...),
	)
}
