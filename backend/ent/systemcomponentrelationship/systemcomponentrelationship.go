// Code generated by ent, DO NOT EDIT.

package systemcomponentrelationship

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the systemcomponentrelationship type in the database.
	Label = "system_component_relationship"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSourceID holds the string denoting the source_id field in the database.
	FieldSourceID = "source_id"
	// FieldTargetID holds the string denoting the target_id field in the database.
	FieldTargetID = "target_id"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeSource holds the string denoting the source edge name in mutations.
	EdgeSource = "source"
	// EdgeTarget holds the string denoting the target edge name in mutations.
	EdgeTarget = "target"
	// EdgeControlActions holds the string denoting the control_actions edge name in mutations.
	EdgeControlActions = "control_actions"
	// EdgeFeedback holds the string denoting the feedback edge name in mutations.
	EdgeFeedback = "feedback"
	// Table holds the table name of the systemcomponentrelationship in the database.
	Table = "system_component_relationships"
	// SourceTable is the table that holds the source relation/edge.
	SourceTable = "system_component_relationships"
	// SourceInverseTable is the table name for the SystemComponent entity.
	// It exists in this package in order to avoid circular dependency with the "systemcomponent" package.
	SourceInverseTable = "system_components"
	// SourceColumn is the table column denoting the source relation/edge.
	SourceColumn = "source_id"
	// TargetTable is the table that holds the target relation/edge.
	TargetTable = "system_component_relationships"
	// TargetInverseTable is the table name for the SystemComponent entity.
	// It exists in this package in order to avoid circular dependency with the "systemcomponent" package.
	TargetInverseTable = "system_components"
	// TargetColumn is the table column denoting the target relation/edge.
	TargetColumn = "target_id"
	// ControlActionsTable is the table that holds the control_actions relation/edge.
	ControlActionsTable = "system_component_relationship_control_actions"
	// ControlActionsInverseTable is the table name for the SystemComponentRelationshipControlAction entity.
	// It exists in this package in order to avoid circular dependency with the "systemcomponentrelationshipcontrolaction" package.
	ControlActionsInverseTable = "system_component_relationship_control_actions"
	// ControlActionsColumn is the table column denoting the control_actions relation/edge.
	ControlActionsColumn = "relationship_id"
	// FeedbackTable is the table that holds the feedback relation/edge.
	FeedbackTable = "system_component_relationship_feedbacks"
	// FeedbackInverseTable is the table name for the SystemComponentRelationshipFeedback entity.
	// It exists in this package in order to avoid circular dependency with the "systemcomponentrelationshipfeedback" package.
	FeedbackInverseTable = "system_component_relationship_feedbacks"
	// FeedbackColumn is the table column denoting the feedback relation/edge.
	FeedbackColumn = "relationship_id"
)

// Columns holds all SQL columns for systemcomponentrelationship fields.
var Columns = []string{
	FieldID,
	FieldSourceID,
	FieldTargetID,
	FieldDescription,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the SystemComponentRelationship queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySourceID orders the results by the source_id field.
func BySourceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSourceID, opts...).ToFunc()
}

// ByTargetID orders the results by the target_id field.
func ByTargetID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTargetID, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// BySourceField orders the results by source field.
func BySourceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSourceStep(), sql.OrderByField(field, opts...))
	}
}

// ByTargetField orders the results by target field.
func ByTargetField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTargetStep(), sql.OrderByField(field, opts...))
	}
}

// ByControlActionsCount orders the results by control_actions count.
func ByControlActionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newControlActionsStep(), opts...)
	}
}

// ByControlActions orders the results by control_actions terms.
func ByControlActions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newControlActionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFeedbackCount orders the results by feedback count.
func ByFeedbackCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFeedbackStep(), opts...)
	}
}

// ByFeedback orders the results by feedback terms.
func ByFeedback(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFeedbackStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSourceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SourceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SourceTable, SourceColumn),
	)
}
func newTargetStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TargetInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TargetTable, TargetColumn),
	)
}
func newControlActionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ControlActionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ControlActionsTable, ControlActionsColumn),
	)
}
func newFeedbackStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FeedbackInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FeedbackTable, FeedbackColumn),
	)
}
