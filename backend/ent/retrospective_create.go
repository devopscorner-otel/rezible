// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/incident"
	"github.com/rezible/rezible/ent/retrospective"
	"github.com/rezible/rezible/ent/retrospectivecomment"
	"github.com/rezible/rezible/ent/systemanalysis"
	"github.com/rezible/rezible/ent/tenant"
)

// RetrospectiveCreate is the builder for creating a Retrospective entity.
type RetrospectiveCreate struct {
	config
	mutation *RetrospectiveMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (rc *RetrospectiveCreate) SetTenantID(i int) *RetrospectiveCreate {
	rc.mutation.SetTenantID(i)
	return rc
}

// SetIncidentID sets the "incident_id" field.
func (rc *RetrospectiveCreate) SetIncidentID(u uuid.UUID) *RetrospectiveCreate {
	rc.mutation.SetIncidentID(u)
	return rc
}

// SetSystemAnalysisID sets the "system_analysis_id" field.
func (rc *RetrospectiveCreate) SetSystemAnalysisID(u uuid.UUID) *RetrospectiveCreate {
	rc.mutation.SetSystemAnalysisID(u)
	return rc
}

// SetNillableSystemAnalysisID sets the "system_analysis_id" field if the given value is not nil.
func (rc *RetrospectiveCreate) SetNillableSystemAnalysisID(u *uuid.UUID) *RetrospectiveCreate {
	if u != nil {
		rc.SetSystemAnalysisID(*u)
	}
	return rc
}

// SetType sets the "type" field.
func (rc *RetrospectiveCreate) SetType(r retrospective.Type) *RetrospectiveCreate {
	rc.mutation.SetType(r)
	return rc
}

// SetState sets the "state" field.
func (rc *RetrospectiveCreate) SetState(r retrospective.State) *RetrospectiveCreate {
	rc.mutation.SetState(r)
	return rc
}

// SetID sets the "id" field.
func (rc *RetrospectiveCreate) SetID(u uuid.UUID) *RetrospectiveCreate {
	rc.mutation.SetID(u)
	return rc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rc *RetrospectiveCreate) SetNillableID(u *uuid.UUID) *RetrospectiveCreate {
	if u != nil {
		rc.SetID(*u)
	}
	return rc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (rc *RetrospectiveCreate) SetTenant(t *Tenant) *RetrospectiveCreate {
	return rc.SetTenantID(t.ID)
}

// SetIncident sets the "incident" edge to the Incident entity.
func (rc *RetrospectiveCreate) SetIncident(i *Incident) *RetrospectiveCreate {
	return rc.SetIncidentID(i.ID)
}

// AddCommentIDs adds the "comments" edge to the RetrospectiveComment entity by IDs.
func (rc *RetrospectiveCreate) AddCommentIDs(ids ...uuid.UUID) *RetrospectiveCreate {
	rc.mutation.AddCommentIDs(ids...)
	return rc
}

// AddComments adds the "comments" edges to the RetrospectiveComment entity.
func (rc *RetrospectiveCreate) AddComments(r ...*RetrospectiveComment) *RetrospectiveCreate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rc.AddCommentIDs(ids...)
}

// SetSystemAnalysis sets the "system_analysis" edge to the SystemAnalysis entity.
func (rc *RetrospectiveCreate) SetSystemAnalysis(s *SystemAnalysis) *RetrospectiveCreate {
	return rc.SetSystemAnalysisID(s.ID)
}

// Mutation returns the RetrospectiveMutation object of the builder.
func (rc *RetrospectiveCreate) Mutation() *RetrospectiveMutation {
	return rc.mutation
}

// Save creates the Retrospective in the database.
func (rc *RetrospectiveCreate) Save(ctx context.Context) (*Retrospective, error) {
	if err := rc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RetrospectiveCreate) SaveX(ctx context.Context) *Retrospective {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RetrospectiveCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RetrospectiveCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RetrospectiveCreate) defaults() error {
	if _, ok := rc.mutation.ID(); !ok {
		if retrospective.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized retrospective.DefaultID (forgotten import ent/runtime?)")
		}
		v := retrospective.DefaultID()
		rc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rc *RetrospectiveCreate) check() error {
	if _, ok := rc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "Retrospective.tenant_id"`)}
	}
	if _, ok := rc.mutation.IncidentID(); !ok {
		return &ValidationError{Name: "incident_id", err: errors.New(`ent: missing required field "Retrospective.incident_id"`)}
	}
	if _, ok := rc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Retrospective.type"`)}
	}
	if v, ok := rc.mutation.GetType(); ok {
		if err := retrospective.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Retrospective.type": %w`, err)}
		}
	}
	if _, ok := rc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "Retrospective.state"`)}
	}
	if v, ok := rc.mutation.State(); ok {
		if err := retrospective.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Retrospective.state": %w`, err)}
		}
	}
	if len(rc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "Retrospective.tenant"`)}
	}
	if len(rc.mutation.IncidentIDs()) == 0 {
		return &ValidationError{Name: "incident", err: errors.New(`ent: missing required edge "Retrospective.incident"`)}
	}
	return nil
}

func (rc *RetrospectiveCreate) sqlSave(ctx context.Context) (*Retrospective, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RetrospectiveCreate) createSpec() (*Retrospective, *sqlgraph.CreateSpec) {
	var (
		_node = &Retrospective{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(retrospective.Table, sqlgraph.NewFieldSpec(retrospective.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = rc.conflict
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rc.mutation.GetType(); ok {
		_spec.SetField(retrospective.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := rc.mutation.State(); ok {
		_spec.SetField(retrospective.FieldState, field.TypeEnum, value)
		_node.State = value
	}
	if nodes := rc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   retrospective.TenantTable,
			Columns: []string{retrospective.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.IncidentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   retrospective.IncidentTable,
			Columns: []string{retrospective.IncidentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.IncidentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   retrospective.CommentsTable,
			Columns: []string{retrospective.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retrospectivecomment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.SystemAnalysisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   retrospective.SystemAnalysisTable,
			Columns: []string{retrospective.SystemAnalysisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemanalysis.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SystemAnalysisID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Retrospective.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RetrospectiveUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (rc *RetrospectiveCreate) OnConflict(opts ...sql.ConflictOption) *RetrospectiveUpsertOne {
	rc.conflict = opts
	return &RetrospectiveUpsertOne{
		create: rc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Retrospective.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rc *RetrospectiveCreate) OnConflictColumns(columns ...string) *RetrospectiveUpsertOne {
	rc.conflict = append(rc.conflict, sql.ConflictColumns(columns...))
	return &RetrospectiveUpsertOne{
		create: rc,
	}
}

type (
	// RetrospectiveUpsertOne is the builder for "upsert"-ing
	//  one Retrospective node.
	RetrospectiveUpsertOne struct {
		create *RetrospectiveCreate
	}

	// RetrospectiveUpsert is the "OnConflict" setter.
	RetrospectiveUpsert struct {
		*sql.UpdateSet
	}
)

// SetIncidentID sets the "incident_id" field.
func (u *RetrospectiveUpsert) SetIncidentID(v uuid.UUID) *RetrospectiveUpsert {
	u.Set(retrospective.FieldIncidentID, v)
	return u
}

// UpdateIncidentID sets the "incident_id" field to the value that was provided on create.
func (u *RetrospectiveUpsert) UpdateIncidentID() *RetrospectiveUpsert {
	u.SetExcluded(retrospective.FieldIncidentID)
	return u
}

// SetSystemAnalysisID sets the "system_analysis_id" field.
func (u *RetrospectiveUpsert) SetSystemAnalysisID(v uuid.UUID) *RetrospectiveUpsert {
	u.Set(retrospective.FieldSystemAnalysisID, v)
	return u
}

// UpdateSystemAnalysisID sets the "system_analysis_id" field to the value that was provided on create.
func (u *RetrospectiveUpsert) UpdateSystemAnalysisID() *RetrospectiveUpsert {
	u.SetExcluded(retrospective.FieldSystemAnalysisID)
	return u
}

// ClearSystemAnalysisID clears the value of the "system_analysis_id" field.
func (u *RetrospectiveUpsert) ClearSystemAnalysisID() *RetrospectiveUpsert {
	u.SetNull(retrospective.FieldSystemAnalysisID)
	return u
}

// SetType sets the "type" field.
func (u *RetrospectiveUpsert) SetType(v retrospective.Type) *RetrospectiveUpsert {
	u.Set(retrospective.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *RetrospectiveUpsert) UpdateType() *RetrospectiveUpsert {
	u.SetExcluded(retrospective.FieldType)
	return u
}

// SetState sets the "state" field.
func (u *RetrospectiveUpsert) SetState(v retrospective.State) *RetrospectiveUpsert {
	u.Set(retrospective.FieldState, v)
	return u
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *RetrospectiveUpsert) UpdateState() *RetrospectiveUpsert {
	u.SetExcluded(retrospective.FieldState)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Retrospective.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(retrospective.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RetrospectiveUpsertOne) UpdateNewValues() *RetrospectiveUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(retrospective.FieldID)
		}
		if _, exists := u.create.mutation.TenantID(); exists {
			s.SetIgnore(retrospective.FieldTenantID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Retrospective.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RetrospectiveUpsertOne) Ignore() *RetrospectiveUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RetrospectiveUpsertOne) DoNothing() *RetrospectiveUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RetrospectiveCreate.OnConflict
// documentation for more info.
func (u *RetrospectiveUpsertOne) Update(set func(*RetrospectiveUpsert)) *RetrospectiveUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RetrospectiveUpsert{UpdateSet: update})
	}))
	return u
}

// SetIncidentID sets the "incident_id" field.
func (u *RetrospectiveUpsertOne) SetIncidentID(v uuid.UUID) *RetrospectiveUpsertOne {
	return u.Update(func(s *RetrospectiveUpsert) {
		s.SetIncidentID(v)
	})
}

// UpdateIncidentID sets the "incident_id" field to the value that was provided on create.
func (u *RetrospectiveUpsertOne) UpdateIncidentID() *RetrospectiveUpsertOne {
	return u.Update(func(s *RetrospectiveUpsert) {
		s.UpdateIncidentID()
	})
}

// SetSystemAnalysisID sets the "system_analysis_id" field.
func (u *RetrospectiveUpsertOne) SetSystemAnalysisID(v uuid.UUID) *RetrospectiveUpsertOne {
	return u.Update(func(s *RetrospectiveUpsert) {
		s.SetSystemAnalysisID(v)
	})
}

// UpdateSystemAnalysisID sets the "system_analysis_id" field to the value that was provided on create.
func (u *RetrospectiveUpsertOne) UpdateSystemAnalysisID() *RetrospectiveUpsertOne {
	return u.Update(func(s *RetrospectiveUpsert) {
		s.UpdateSystemAnalysisID()
	})
}

// ClearSystemAnalysisID clears the value of the "system_analysis_id" field.
func (u *RetrospectiveUpsertOne) ClearSystemAnalysisID() *RetrospectiveUpsertOne {
	return u.Update(func(s *RetrospectiveUpsert) {
		s.ClearSystemAnalysisID()
	})
}

// SetType sets the "type" field.
func (u *RetrospectiveUpsertOne) SetType(v retrospective.Type) *RetrospectiveUpsertOne {
	return u.Update(func(s *RetrospectiveUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *RetrospectiveUpsertOne) UpdateType() *RetrospectiveUpsertOne {
	return u.Update(func(s *RetrospectiveUpsert) {
		s.UpdateType()
	})
}

// SetState sets the "state" field.
func (u *RetrospectiveUpsertOne) SetState(v retrospective.State) *RetrospectiveUpsertOne {
	return u.Update(func(s *RetrospectiveUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *RetrospectiveUpsertOne) UpdateState() *RetrospectiveUpsertOne {
	return u.Update(func(s *RetrospectiveUpsert) {
		s.UpdateState()
	})
}

// Exec executes the query.
func (u *RetrospectiveUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RetrospectiveCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RetrospectiveUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RetrospectiveUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: RetrospectiveUpsertOne.ID is not supported by MySQL driver. Use RetrospectiveUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RetrospectiveUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RetrospectiveCreateBulk is the builder for creating many Retrospective entities in bulk.
type RetrospectiveCreateBulk struct {
	config
	err      error
	builders []*RetrospectiveCreate
	conflict []sql.ConflictOption
}

// Save creates the Retrospective entities in the database.
func (rcb *RetrospectiveCreateBulk) Save(ctx context.Context) ([]*Retrospective, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Retrospective, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RetrospectiveMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RetrospectiveCreateBulk) SaveX(ctx context.Context) []*Retrospective {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RetrospectiveCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RetrospectiveCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Retrospective.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RetrospectiveUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (rcb *RetrospectiveCreateBulk) OnConflict(opts ...sql.ConflictOption) *RetrospectiveUpsertBulk {
	rcb.conflict = opts
	return &RetrospectiveUpsertBulk{
		create: rcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Retrospective.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rcb *RetrospectiveCreateBulk) OnConflictColumns(columns ...string) *RetrospectiveUpsertBulk {
	rcb.conflict = append(rcb.conflict, sql.ConflictColumns(columns...))
	return &RetrospectiveUpsertBulk{
		create: rcb,
	}
}

// RetrospectiveUpsertBulk is the builder for "upsert"-ing
// a bulk of Retrospective nodes.
type RetrospectiveUpsertBulk struct {
	create *RetrospectiveCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Retrospective.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(retrospective.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RetrospectiveUpsertBulk) UpdateNewValues() *RetrospectiveUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(retrospective.FieldID)
			}
			if _, exists := b.mutation.TenantID(); exists {
				s.SetIgnore(retrospective.FieldTenantID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Retrospective.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RetrospectiveUpsertBulk) Ignore() *RetrospectiveUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RetrospectiveUpsertBulk) DoNothing() *RetrospectiveUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RetrospectiveCreateBulk.OnConflict
// documentation for more info.
func (u *RetrospectiveUpsertBulk) Update(set func(*RetrospectiveUpsert)) *RetrospectiveUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RetrospectiveUpsert{UpdateSet: update})
	}))
	return u
}

// SetIncidentID sets the "incident_id" field.
func (u *RetrospectiveUpsertBulk) SetIncidentID(v uuid.UUID) *RetrospectiveUpsertBulk {
	return u.Update(func(s *RetrospectiveUpsert) {
		s.SetIncidentID(v)
	})
}

// UpdateIncidentID sets the "incident_id" field to the value that was provided on create.
func (u *RetrospectiveUpsertBulk) UpdateIncidentID() *RetrospectiveUpsertBulk {
	return u.Update(func(s *RetrospectiveUpsert) {
		s.UpdateIncidentID()
	})
}

// SetSystemAnalysisID sets the "system_analysis_id" field.
func (u *RetrospectiveUpsertBulk) SetSystemAnalysisID(v uuid.UUID) *RetrospectiveUpsertBulk {
	return u.Update(func(s *RetrospectiveUpsert) {
		s.SetSystemAnalysisID(v)
	})
}

// UpdateSystemAnalysisID sets the "system_analysis_id" field to the value that was provided on create.
func (u *RetrospectiveUpsertBulk) UpdateSystemAnalysisID() *RetrospectiveUpsertBulk {
	return u.Update(func(s *RetrospectiveUpsert) {
		s.UpdateSystemAnalysisID()
	})
}

// ClearSystemAnalysisID clears the value of the "system_analysis_id" field.
func (u *RetrospectiveUpsertBulk) ClearSystemAnalysisID() *RetrospectiveUpsertBulk {
	return u.Update(func(s *RetrospectiveUpsert) {
		s.ClearSystemAnalysisID()
	})
}

// SetType sets the "type" field.
func (u *RetrospectiveUpsertBulk) SetType(v retrospective.Type) *RetrospectiveUpsertBulk {
	return u.Update(func(s *RetrospectiveUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *RetrospectiveUpsertBulk) UpdateType() *RetrospectiveUpsertBulk {
	return u.Update(func(s *RetrospectiveUpsert) {
		s.UpdateType()
	})
}

// SetState sets the "state" field.
func (u *RetrospectiveUpsertBulk) SetState(v retrospective.State) *RetrospectiveUpsertBulk {
	return u.Update(func(s *RetrospectiveUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *RetrospectiveUpsertBulk) UpdateState() *RetrospectiveUpsertBulk {
	return u.Update(func(s *RetrospectiveUpsert) {
		s.UpdateState()
	})
}

// Exec executes the query.
func (u *RetrospectiveUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RetrospectiveCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RetrospectiveCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RetrospectiveUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
