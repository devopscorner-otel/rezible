// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/oncallschedule"
	"github.com/rezible/rezible/ent/oncallscheduleparticipant"
	"github.com/rezible/rezible/ent/user"
)

// OncallScheduleParticipant is the model entity for the OncallScheduleParticipant schema.
type OncallScheduleParticipant struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ScheduleID holds the value of the "schedule_id" field.
	ScheduleID uuid.UUID `json:"schedule_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// Index holds the value of the "index" field.
	Index int `json:"index,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OncallScheduleParticipantQuery when eager-loading is set.
	Edges        OncallScheduleParticipantEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OncallScheduleParticipantEdges holds the relations/edges for other nodes in the graph.
type OncallScheduleParticipantEdges struct {
	// Schedule holds the value of the schedule edge.
	Schedule *OncallSchedule `json:"schedule,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ScheduleOrErr returns the Schedule value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OncallScheduleParticipantEdges) ScheduleOrErr() (*OncallSchedule, error) {
	if e.Schedule != nil {
		return e.Schedule, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: oncallschedule.Label}
	}
	return nil, &NotLoadedError{edge: "schedule"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OncallScheduleParticipantEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OncallScheduleParticipant) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case oncallscheduleparticipant.FieldIndex:
			values[i] = new(sql.NullInt64)
		case oncallscheduleparticipant.FieldID, oncallscheduleparticipant.FieldScheduleID, oncallscheduleparticipant.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OncallScheduleParticipant fields.
func (osp *OncallScheduleParticipant) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case oncallscheduleparticipant.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				osp.ID = *value
			}
		case oncallscheduleparticipant.FieldScheduleID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field schedule_id", values[i])
			} else if value != nil {
				osp.ScheduleID = *value
			}
		case oncallscheduleparticipant.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				osp.UserID = *value
			}
		case oncallscheduleparticipant.FieldIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field index", values[i])
			} else if value.Valid {
				osp.Index = int(value.Int64)
			}
		default:
			osp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OncallScheduleParticipant.
// This includes values selected through modifiers, order, etc.
func (osp *OncallScheduleParticipant) Value(name string) (ent.Value, error) {
	return osp.selectValues.Get(name)
}

// QuerySchedule queries the "schedule" edge of the OncallScheduleParticipant entity.
func (osp *OncallScheduleParticipant) QuerySchedule() *OncallScheduleQuery {
	return NewOncallScheduleParticipantClient(osp.config).QuerySchedule(osp)
}

// QueryUser queries the "user" edge of the OncallScheduleParticipant entity.
func (osp *OncallScheduleParticipant) QueryUser() *UserQuery {
	return NewOncallScheduleParticipantClient(osp.config).QueryUser(osp)
}

// Update returns a builder for updating this OncallScheduleParticipant.
// Note that you need to call OncallScheduleParticipant.Unwrap() before calling this method if this OncallScheduleParticipant
// was returned from a transaction, and the transaction was committed or rolled back.
func (osp *OncallScheduleParticipant) Update() *OncallScheduleParticipantUpdateOne {
	return NewOncallScheduleParticipantClient(osp.config).UpdateOne(osp)
}

// Unwrap unwraps the OncallScheduleParticipant entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (osp *OncallScheduleParticipant) Unwrap() *OncallScheduleParticipant {
	_tx, ok := osp.config.driver.(*txDriver)
	if !ok {
		panic("ent: OncallScheduleParticipant is not a transactional entity")
	}
	osp.config.driver = _tx.drv
	return osp
}

// String implements the fmt.Stringer.
func (osp *OncallScheduleParticipant) String() string {
	var builder strings.Builder
	builder.WriteString("OncallScheduleParticipant(")
	builder.WriteString(fmt.Sprintf("id=%v, ", osp.ID))
	builder.WriteString("schedule_id=")
	builder.WriteString(fmt.Sprintf("%v", osp.ScheduleID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", osp.UserID))
	builder.WriteString(", ")
	builder.WriteString("index=")
	builder.WriteString(fmt.Sprintf("%v", osp.Index))
	builder.WriteByte(')')
	return builder.String()
}

// OncallScheduleParticipants is a parsable slice of OncallScheduleParticipant.
type OncallScheduleParticipants []*OncallScheduleParticipant
