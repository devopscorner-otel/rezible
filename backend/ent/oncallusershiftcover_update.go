// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rezible/rezible/ent/oncallusershift"
	"github.com/rezible/rezible/ent/oncallusershiftcover"
	"github.com/rezible/rezible/ent/predicate"
	"github.com/rezible/rezible/ent/user"
)

// OncallUserShiftCoverUpdate is the builder for updating OncallUserShiftCover entities.
type OncallUserShiftCoverUpdate struct {
	config
	hooks     []Hook
	mutation  *OncallUserShiftCoverMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OncallUserShiftCoverUpdate builder.
func (ouscu *OncallUserShiftCoverUpdate) Where(ps ...predicate.OncallUserShiftCover) *OncallUserShiftCoverUpdate {
	ouscu.mutation.Where(ps...)
	return ouscu
}

// SetUserID sets the "user_id" field.
func (ouscu *OncallUserShiftCoverUpdate) SetUserID(u uuid.UUID) *OncallUserShiftCoverUpdate {
	ouscu.mutation.SetUserID(u)
	return ouscu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ouscu *OncallUserShiftCoverUpdate) SetNillableUserID(u *uuid.UUID) *OncallUserShiftCoverUpdate {
	if u != nil {
		ouscu.SetUserID(*u)
	}
	return ouscu
}

// SetShiftID sets the "shift_id" field.
func (ouscu *OncallUserShiftCoverUpdate) SetShiftID(u uuid.UUID) *OncallUserShiftCoverUpdate {
	ouscu.mutation.SetShiftID(u)
	return ouscu
}

// SetNillableShiftID sets the "shift_id" field if the given value is not nil.
func (ouscu *OncallUserShiftCoverUpdate) SetNillableShiftID(u *uuid.UUID) *OncallUserShiftCoverUpdate {
	if u != nil {
		ouscu.SetShiftID(*u)
	}
	return ouscu
}

// SetStartAt sets the "start_at" field.
func (ouscu *OncallUserShiftCoverUpdate) SetStartAt(t time.Time) *OncallUserShiftCoverUpdate {
	ouscu.mutation.SetStartAt(t)
	return ouscu
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (ouscu *OncallUserShiftCoverUpdate) SetNillableStartAt(t *time.Time) *OncallUserShiftCoverUpdate {
	if t != nil {
		ouscu.SetStartAt(*t)
	}
	return ouscu
}

// SetEndAt sets the "end_at" field.
func (ouscu *OncallUserShiftCoverUpdate) SetEndAt(t time.Time) *OncallUserShiftCoverUpdate {
	ouscu.mutation.SetEndAt(t)
	return ouscu
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (ouscu *OncallUserShiftCoverUpdate) SetNillableEndAt(t *time.Time) *OncallUserShiftCoverUpdate {
	if t != nil {
		ouscu.SetEndAt(*t)
	}
	return ouscu
}

// SetProviderID sets the "provider_id" field.
func (ouscu *OncallUserShiftCoverUpdate) SetProviderID(s string) *OncallUserShiftCoverUpdate {
	ouscu.mutation.SetProviderID(s)
	return ouscu
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (ouscu *OncallUserShiftCoverUpdate) SetNillableProviderID(s *string) *OncallUserShiftCoverUpdate {
	if s != nil {
		ouscu.SetProviderID(*s)
	}
	return ouscu
}

// ClearProviderID clears the value of the "provider_id" field.
func (ouscu *OncallUserShiftCoverUpdate) ClearProviderID() *OncallUserShiftCoverUpdate {
	ouscu.mutation.ClearProviderID()
	return ouscu
}

// SetUser sets the "user" edge to the User entity.
func (ouscu *OncallUserShiftCoverUpdate) SetUser(u *User) *OncallUserShiftCoverUpdate {
	return ouscu.SetUserID(u.ID)
}

// SetShift sets the "shift" edge to the OncallUserShift entity.
func (ouscu *OncallUserShiftCoverUpdate) SetShift(o *OncallUserShift) *OncallUserShiftCoverUpdate {
	return ouscu.SetShiftID(o.ID)
}

// Mutation returns the OncallUserShiftCoverMutation object of the builder.
func (ouscu *OncallUserShiftCoverUpdate) Mutation() *OncallUserShiftCoverMutation {
	return ouscu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ouscu *OncallUserShiftCoverUpdate) ClearUser() *OncallUserShiftCoverUpdate {
	ouscu.mutation.ClearUser()
	return ouscu
}

// ClearShift clears the "shift" edge to the OncallUserShift entity.
func (ouscu *OncallUserShiftCoverUpdate) ClearShift() *OncallUserShiftCoverUpdate {
	ouscu.mutation.ClearShift()
	return ouscu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ouscu *OncallUserShiftCoverUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ouscu.sqlSave, ouscu.mutation, ouscu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouscu *OncallUserShiftCoverUpdate) SaveX(ctx context.Context) int {
	affected, err := ouscu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ouscu *OncallUserShiftCoverUpdate) Exec(ctx context.Context) error {
	_, err := ouscu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouscu *OncallUserShiftCoverUpdate) ExecX(ctx context.Context) {
	if err := ouscu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouscu *OncallUserShiftCoverUpdate) check() error {
	if ouscu.mutation.UserCleared() && len(ouscu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallUserShiftCover.user"`)
	}
	if ouscu.mutation.ShiftCleared() && len(ouscu.mutation.ShiftIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallUserShiftCover.shift"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ouscu *OncallUserShiftCoverUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OncallUserShiftCoverUpdate {
	ouscu.modifiers = append(ouscu.modifiers, modifiers...)
	return ouscu
}

func (ouscu *OncallUserShiftCoverUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ouscu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(oncallusershiftcover.Table, oncallusershiftcover.Columns, sqlgraph.NewFieldSpec(oncallusershiftcover.FieldID, field.TypeUUID))
	if ps := ouscu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouscu.mutation.StartAt(); ok {
		_spec.SetField(oncallusershiftcover.FieldStartAt, field.TypeTime, value)
	}
	if value, ok := ouscu.mutation.EndAt(); ok {
		_spec.SetField(oncallusershiftcover.FieldEndAt, field.TypeTime, value)
	}
	if value, ok := ouscu.mutation.ProviderID(); ok {
		_spec.SetField(oncallusershiftcover.FieldProviderID, field.TypeString, value)
	}
	if ouscu.mutation.ProviderIDCleared() {
		_spec.ClearField(oncallusershiftcover.FieldProviderID, field.TypeString)
	}
	if ouscu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallusershiftcover.UserTable,
			Columns: []string{oncallusershiftcover.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouscu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallusershiftcover.UserTable,
			Columns: []string{oncallusershiftcover.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouscu.mutation.ShiftCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oncallusershiftcover.ShiftTable,
			Columns: []string{oncallusershiftcover.ShiftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallusershift.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouscu.mutation.ShiftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oncallusershiftcover.ShiftTable,
			Columns: []string{oncallusershiftcover.ShiftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallusershift.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ouscu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ouscu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oncallusershiftcover.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ouscu.mutation.done = true
	return n, nil
}

// OncallUserShiftCoverUpdateOne is the builder for updating a single OncallUserShiftCover entity.
type OncallUserShiftCoverUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OncallUserShiftCoverMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUserID sets the "user_id" field.
func (ouscuo *OncallUserShiftCoverUpdateOne) SetUserID(u uuid.UUID) *OncallUserShiftCoverUpdateOne {
	ouscuo.mutation.SetUserID(u)
	return ouscuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ouscuo *OncallUserShiftCoverUpdateOne) SetNillableUserID(u *uuid.UUID) *OncallUserShiftCoverUpdateOne {
	if u != nil {
		ouscuo.SetUserID(*u)
	}
	return ouscuo
}

// SetShiftID sets the "shift_id" field.
func (ouscuo *OncallUserShiftCoverUpdateOne) SetShiftID(u uuid.UUID) *OncallUserShiftCoverUpdateOne {
	ouscuo.mutation.SetShiftID(u)
	return ouscuo
}

// SetNillableShiftID sets the "shift_id" field if the given value is not nil.
func (ouscuo *OncallUserShiftCoverUpdateOne) SetNillableShiftID(u *uuid.UUID) *OncallUserShiftCoverUpdateOne {
	if u != nil {
		ouscuo.SetShiftID(*u)
	}
	return ouscuo
}

// SetStartAt sets the "start_at" field.
func (ouscuo *OncallUserShiftCoverUpdateOne) SetStartAt(t time.Time) *OncallUserShiftCoverUpdateOne {
	ouscuo.mutation.SetStartAt(t)
	return ouscuo
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (ouscuo *OncallUserShiftCoverUpdateOne) SetNillableStartAt(t *time.Time) *OncallUserShiftCoverUpdateOne {
	if t != nil {
		ouscuo.SetStartAt(*t)
	}
	return ouscuo
}

// SetEndAt sets the "end_at" field.
func (ouscuo *OncallUserShiftCoverUpdateOne) SetEndAt(t time.Time) *OncallUserShiftCoverUpdateOne {
	ouscuo.mutation.SetEndAt(t)
	return ouscuo
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (ouscuo *OncallUserShiftCoverUpdateOne) SetNillableEndAt(t *time.Time) *OncallUserShiftCoverUpdateOne {
	if t != nil {
		ouscuo.SetEndAt(*t)
	}
	return ouscuo
}

// SetProviderID sets the "provider_id" field.
func (ouscuo *OncallUserShiftCoverUpdateOne) SetProviderID(s string) *OncallUserShiftCoverUpdateOne {
	ouscuo.mutation.SetProviderID(s)
	return ouscuo
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (ouscuo *OncallUserShiftCoverUpdateOne) SetNillableProviderID(s *string) *OncallUserShiftCoverUpdateOne {
	if s != nil {
		ouscuo.SetProviderID(*s)
	}
	return ouscuo
}

// ClearProviderID clears the value of the "provider_id" field.
func (ouscuo *OncallUserShiftCoverUpdateOne) ClearProviderID() *OncallUserShiftCoverUpdateOne {
	ouscuo.mutation.ClearProviderID()
	return ouscuo
}

// SetUser sets the "user" edge to the User entity.
func (ouscuo *OncallUserShiftCoverUpdateOne) SetUser(u *User) *OncallUserShiftCoverUpdateOne {
	return ouscuo.SetUserID(u.ID)
}

// SetShift sets the "shift" edge to the OncallUserShift entity.
func (ouscuo *OncallUserShiftCoverUpdateOne) SetShift(o *OncallUserShift) *OncallUserShiftCoverUpdateOne {
	return ouscuo.SetShiftID(o.ID)
}

// Mutation returns the OncallUserShiftCoverMutation object of the builder.
func (ouscuo *OncallUserShiftCoverUpdateOne) Mutation() *OncallUserShiftCoverMutation {
	return ouscuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ouscuo *OncallUserShiftCoverUpdateOne) ClearUser() *OncallUserShiftCoverUpdateOne {
	ouscuo.mutation.ClearUser()
	return ouscuo
}

// ClearShift clears the "shift" edge to the OncallUserShift entity.
func (ouscuo *OncallUserShiftCoverUpdateOne) ClearShift() *OncallUserShiftCoverUpdateOne {
	ouscuo.mutation.ClearShift()
	return ouscuo
}

// Where appends a list predicates to the OncallUserShiftCoverUpdate builder.
func (ouscuo *OncallUserShiftCoverUpdateOne) Where(ps ...predicate.OncallUserShiftCover) *OncallUserShiftCoverUpdateOne {
	ouscuo.mutation.Where(ps...)
	return ouscuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouscuo *OncallUserShiftCoverUpdateOne) Select(field string, fields ...string) *OncallUserShiftCoverUpdateOne {
	ouscuo.fields = append([]string{field}, fields...)
	return ouscuo
}

// Save executes the query and returns the updated OncallUserShiftCover entity.
func (ouscuo *OncallUserShiftCoverUpdateOne) Save(ctx context.Context) (*OncallUserShiftCover, error) {
	return withHooks(ctx, ouscuo.sqlSave, ouscuo.mutation, ouscuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouscuo *OncallUserShiftCoverUpdateOne) SaveX(ctx context.Context) *OncallUserShiftCover {
	node, err := ouscuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouscuo *OncallUserShiftCoverUpdateOne) Exec(ctx context.Context) error {
	_, err := ouscuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouscuo *OncallUserShiftCoverUpdateOne) ExecX(ctx context.Context) {
	if err := ouscuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouscuo *OncallUserShiftCoverUpdateOne) check() error {
	if ouscuo.mutation.UserCleared() && len(ouscuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallUserShiftCover.user"`)
	}
	if ouscuo.mutation.ShiftCleared() && len(ouscuo.mutation.ShiftIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OncallUserShiftCover.shift"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ouscuo *OncallUserShiftCoverUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OncallUserShiftCoverUpdateOne {
	ouscuo.modifiers = append(ouscuo.modifiers, modifiers...)
	return ouscuo
}

func (ouscuo *OncallUserShiftCoverUpdateOne) sqlSave(ctx context.Context) (_node *OncallUserShiftCover, err error) {
	if err := ouscuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(oncallusershiftcover.Table, oncallusershiftcover.Columns, sqlgraph.NewFieldSpec(oncallusershiftcover.FieldID, field.TypeUUID))
	id, ok := ouscuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OncallUserShiftCover.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouscuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oncallusershiftcover.FieldID)
		for _, f := range fields {
			if !oncallusershiftcover.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oncallusershiftcover.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouscuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouscuo.mutation.StartAt(); ok {
		_spec.SetField(oncallusershiftcover.FieldStartAt, field.TypeTime, value)
	}
	if value, ok := ouscuo.mutation.EndAt(); ok {
		_spec.SetField(oncallusershiftcover.FieldEndAt, field.TypeTime, value)
	}
	if value, ok := ouscuo.mutation.ProviderID(); ok {
		_spec.SetField(oncallusershiftcover.FieldProviderID, field.TypeString, value)
	}
	if ouscuo.mutation.ProviderIDCleared() {
		_spec.ClearField(oncallusershiftcover.FieldProviderID, field.TypeString)
	}
	if ouscuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallusershiftcover.UserTable,
			Columns: []string{oncallusershiftcover.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouscuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oncallusershiftcover.UserTable,
			Columns: []string{oncallusershiftcover.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouscuo.mutation.ShiftCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oncallusershiftcover.ShiftTable,
			Columns: []string{oncallusershiftcover.ShiftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallusershift.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouscuo.mutation.ShiftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oncallusershiftcover.ShiftTable,
			Columns: []string{oncallusershiftcover.ShiftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oncallusershift.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ouscuo.modifiers...)
	_node = &OncallUserShiftCover{config: ouscuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouscuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oncallusershiftcover.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouscuo.mutation.done = true
	return _node, nil
}
