// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GetAuthSessionConfigData, GetAuthSessionConfigResponse, GetAuthSessionConfigError, GetCurrentUserAuthSessionData, GetCurrentUserAuthSessionResponse, GetCurrentUserAuthSessionError, ListUserNotificationsData, ListUserNotificationsResponse, ListUserNotificationsError, ListDebriefQuestionsData, ListDebriefQuestionsResponse, ListDebriefQuestionsError, CreateDebriefQuestionData, CreateDebriefQuestionResponse, CreateDebriefQuestionError, ArchiveDebriefQuestionData, ArchiveDebriefQuestionResponse, ArchiveDebriefQuestionError, GetDebriefQuestionData, GetDebriefQuestionResponse, GetDebriefQuestionError, UpdateDebriefQuestionData, UpdateDebriefQuestionResponse, UpdateDebriefQuestionError, RequestDocumentEditorSessionData, RequestDocumentEditorSessionResponse, RequestDocumentEditorSessionError, VerifyDocumentEditorSessionData, VerifyDocumentEditorSessionResponse, VerifyDocumentEditorSessionError, ListEnvironmentsData, ListEnvironmentsResponse, ListEnvironmentsError, CreateEnvironmentData, CreateEnvironmentResponse, CreateEnvironmentError, ArchiveEnvironmentData, ArchiveEnvironmentResponse, ArchiveEnvironmentError, GetEnvironmentData, GetEnvironmentResponse, GetEnvironmentError, UpdateEnvironmentData, UpdateEnvironmentResponse, UpdateEnvironmentError, ListFunctionalitiesData, ListFunctionalitiesResponse, ListFunctionalitiesError, CreateFunctionalityData, CreateFunctionalityResponse, CreateFunctionalityError, ArchiveFunctionalityData, ArchiveFunctionalityResponse, ArchiveFunctionalityError, GetFunctionalityData, GetFunctionalityResponse, GetFunctionalityError, UpdateFunctionalityData, UpdateFunctionalityResponse, UpdateFunctionalityError, GetIncidentDebriefData, GetIncidentDebriefResponse, GetIncidentDebriefError, UpdateIncidentDebriefData, UpdateIncidentDebriefResponse, UpdateIncidentDebriefError, ListDebriefMessagesData, ListDebriefMessagesResponse, ListDebriefMessagesError, AddIncidentDebriefUserMessageData, AddIncidentDebriefUserMessageResponse, AddIncidentDebriefUserMessageError, ListDebriefSuggestionsData, ListDebriefSuggestionsResponse, ListDebriefSuggestionsError, ListIncidentEventContributingFactorCategoriesData, ListIncidentEventContributingFactorCategoriesResponse, ListIncidentEventContributingFactorCategoriesError, DeleteIncidentEventData, DeleteIncidentEventResponse, DeleteIncidentEventError, UpdateIncidentEventData, UpdateIncidentEventResponse, UpdateIncidentEventError, ListIncidentFieldsData, ListIncidentFieldsResponse, ListIncidentFieldsError, CreateIncidentFieldData, CreateIncidentFieldResponse, CreateIncidentFieldError, ArchiveIncidentFieldData, ArchiveIncidentFieldResponse, ArchiveIncidentFieldError, GetIncidentFieldData, GetIncidentFieldResponse, GetIncidentFieldError, UpdateIncidentFieldData, UpdateIncidentFieldResponse, UpdateIncidentFieldError, DeleteIncidentMilestoneData, DeleteIncidentMilestoneResponse, DeleteIncidentMilestoneError, UpdateIncidentMilestoneData, UpdateIncidentMilestoneResponse, UpdateIncidentMilestoneError, ListIncidentRolesData, ListIncidentRolesResponse, ListIncidentRolesError, CreateIncidentRoleData, CreateIncidentRoleResponse, CreateIncidentRoleError, ArchiveIncidentRoleData, ArchiveIncidentRoleResponse, ArchiveIncidentRoleError, GetIncidentRoleData, GetIncidentRoleResponse, GetIncidentRoleError, UpdateIncidentRoleData, UpdateIncidentRoleResponse, UpdateIncidentRoleError, ListIncidentSeveritiesData, ListIncidentSeveritiesResponse, ListIncidentSeveritiesError, CreateIncidentSeverityData, CreateIncidentSeverityResponse, CreateIncidentSeverityError, ArchiveIncidentSeverityData, ArchiveIncidentSeverityResponse, ArchiveIncidentSeverityError, GetIncidentSeverityData, GetIncidentSeverityResponse, GetIncidentSeverityError, UpdateIncidentSeverityData, UpdateIncidentSeverityResponse, UpdateIncidentSeverityError, ListIncidentTagsData, ListIncidentTagsResponse, ListIncidentTagsError, CreateIncidentTagData, CreateIncidentTagResponse, CreateIncidentTagError, ArchiveIncidentTagData, ArchiveIncidentTagResponse, ArchiveIncidentTagError, GetIncidentTagData, GetIncidentTagResponse, GetIncidentTagError, UpdateIncidentTagData, UpdateIncidentTagResponse, UpdateIncidentTagError, ListIncidentTypesData, ListIncidentTypesResponse, ListIncidentTypesError, CreateIncidentTypeData, CreateIncidentTypeResponse, CreateIncidentTypeError, ArchiveIncidentTypeData, ArchiveIncidentTypeResponse, ArchiveIncidentTypeError, GetIncidentTypeData, GetIncidentTypeResponse, GetIncidentTypeError, UpdateIncidentTypeData, UpdateIncidentTypeResponse, UpdateIncidentTypeError, ListIncidentsData, ListIncidentsResponse, ListIncidentsError, CreateIncidentData, CreateIncidentResponse, CreateIncidentError, ArchiveIncidentData, ArchiveIncidentResponse, ArchiveIncidentError, GetIncidentData, GetIncidentResponse, GetIncidentError, UpdateIncidentData, UpdateIncidentResponse, UpdateIncidentError, GetIncidentUserDebriefData, GetIncidentUserDebriefResponse, GetIncidentUserDebriefError, ListIncidentEventsData, ListIncidentEventsResponse, ListIncidentEventsError, CreateIncidentEventData, CreateIncidentEventResponse, CreateIncidentEventError, ListIncidentMilestonesData, ListIncidentMilestonesResponse, ListIncidentMilestonesError, CreateIncidentMilestoneData, CreateIncidentMilestoneResponse, CreateIncidentMilestoneError, GetRetrospectiveForIncidentData, GetRetrospectiveForIncidentResponse, GetRetrospectiveForIncidentError, ListIntegrationsData, ListIntegrationsResponse, ListIntegrationsError, CreateIntegrationData, CreateIntegrationResponse, CreateIntegrationError, ArchiveIntegrationData, ArchiveIntegrationResponse, ArchiveIntegrationError, GetIntegrationData, GetIntegrationResponse, GetIntegrationError, UpdateIntegrationData, UpdateIntegrationResponse, UpdateIntegrationError, ListMeetingSchedulesData, ListMeetingSchedulesResponse, ListMeetingSchedulesError, CreateMeetingScheduleData, CreateMeetingScheduleResponse, CreateMeetingScheduleError, ArchiveMeetingScheduleData, ArchiveMeetingScheduleResponse, ArchiveMeetingScheduleError, GetMeetingScheduleData, GetMeetingScheduleResponse, GetMeetingScheduleError, UpdateMeetingScheduleData, UpdateMeetingScheduleResponse, UpdateMeetingScheduleError, ListMeetingSessionsData, ListMeetingSessionsResponse, ListMeetingSessionsError, CreateMeetingSessionData, CreateMeetingSessionResponse, CreateMeetingSessionError, ArchiveMeetingSessionData, ArchiveMeetingSessionResponse, ArchiveMeetingSessionError, GetMeetingSessionData, GetMeetingSessionResponse, GetMeetingSessionError, UpdateMeetingSessionData, UpdateMeetingSessionResponse, UpdateMeetingSessionError, ListOncallAnnotationsData, ListOncallAnnotationsResponse, ListOncallAnnotationsError, CreateOncallAnnotationData, CreateOncallAnnotationResponse, CreateOncallAnnotationError, DeleteOncallAnnotationData, DeleteOncallAnnotationResponse, DeleteOncallAnnotationError, UpdateOncallAnnotationData, UpdateOncallAnnotationResponse, UpdateOncallAnnotationError, ListOncallEventsData, ListOncallEventsResponse, ListOncallEventsError, CreateOncallHandoverTemplateData, CreateOncallHandoverTemplateResponse, CreateOncallHandoverTemplateError, ArchiveOncallHandoverTemplateData, ArchiveOncallHandoverTemplateResponse, ArchiveOncallHandoverTemplateError, GetOncallShiftHandoverTemplateData, GetOncallShiftHandoverTemplateResponse, GetOncallShiftHandoverTemplateError, UpdateOncallHandoverTemplateData, UpdateOncallHandoverTemplateResponse, UpdateOncallHandoverTemplateError, UpdateOncallShiftHandoverData, UpdateOncallShiftHandoverResponse, UpdateOncallShiftHandoverError, SendOncallShiftHandoverData, SendOncallShiftHandoverResponse, SendOncallShiftHandoverError, ListOncallRostersData, ListOncallRostersResponse, ListOncallRostersError, GetOncallRosterData, GetOncallRosterResponse, GetOncallRosterError, ListOncallShiftsData, ListOncallShiftsResponse, ListOncallShiftsError, GetOncallShiftData, GetOncallShiftResponse, GetOncallShiftError, GetOncallShiftHandoverData, GetOncallShiftHandoverResponse, GetOncallShiftHandoverError, GetNextOncallShiftData, GetNextOncallShiftResponse, GetNextOncallShiftError, GetPreviousOncallShiftData, GetPreviousOncallShiftResponse, GetPreviousOncallShiftError, GetUserOncallInformationData, GetUserOncallInformationResponse, GetUserOncallInformationError, ListWatchedOncallRostersData, ListWatchedOncallRostersResponse, ListWatchedOncallRostersError, RemoveWatchedOncallRosterData, RemoveWatchedOncallRosterResponse, RemoveWatchedOncallRosterError, AddWatchedOncallRosterData, AddWatchedOncallRosterResponse, AddWatchedOncallRosterError, GetOncallShiftBurdenMetricWeightsData, GetOncallShiftBurdenMetricWeightsResponse, GetOncallShiftBurdenMetricWeightsError, GetOncallRosterMetricsData, GetOncallRosterMetricsResponse, GetOncallRosterMetricsError, GetOncallShiftMetricsData, GetOncallShiftMetricsResponse, GetOncallShiftMetricsError, ArchiveRetrospectiveReviewData, ArchiveRetrospectiveReviewResponse, ArchiveRetrospectiveReviewError, UpdateRetrospectiveReviewData, UpdateRetrospectiveReviewResponse, UpdateRetrospectiveReviewError, ListRetrospectivesData, ListRetrospectivesResponse, ListRetrospectivesError, CreateRetrospectiveData, CreateRetrospectiveResponse, CreateRetrospectiveError, GetRetrospectiveData, GetRetrospectiveResponse, GetRetrospectiveError, ListRetrospectiveDiscussionsData, ListRetrospectiveDiscussionsResponse, ListRetrospectiveDiscussionsError, CreateRetrospectiveDiscussionData, CreateRetrospectiveDiscussionResponse, CreateRetrospectiveDiscussionError, GetRetrospectiveDiscussionData, GetRetrospectiveDiscussionResponse, GetRetrospectiveDiscussionError, UpdateRetrospectiveDiscussionData, UpdateRetrospectiveDiscussionResponse, UpdateRetrospectiveDiscussionError, AddRetrospectiveDiscussionReplyData, AddRetrospectiveDiscussionReplyResponse, AddRetrospectiveDiscussionReplyError, ListRetrospectiveReviewsData, ListRetrospectiveReviewsResponse, ListRetrospectiveReviewsError, CreateRetrospectiveReviewData, CreateRetrospectiveReviewResponse, CreateRetrospectiveReviewError, GetSystemAnalysisData, GetSystemAnalysisResponse, GetSystemAnalysisError, ListSystemAnalysisComponentsData, ListSystemAnalysisComponentsResponse, ListSystemAnalysisComponentsError, AddSystemAnalysisComponentData, AddSystemAnalysisComponentResponse, AddSystemAnalysisComponentError, ListSystemAnalysisRelationshipsData, ListSystemAnalysisRelationshipsResponse, ListSystemAnalysisRelationshipsError, CreateSystemAnalysisRelationshipData, CreateSystemAnalysisRelationshipResponse, CreateSystemAnalysisRelationshipError, DeleteSystemAnalysisComponentData, DeleteSystemAnalysisComponentResponse, DeleteSystemAnalysisComponentError, GetSystemAnalysisComponentData, GetSystemAnalysisComponentResponse, GetSystemAnalysisComponentError, UpdateSystemAnalysisComponentData, UpdateSystemAnalysisComponentResponse, UpdateSystemAnalysisComponentError, DeleteSystemAnalysisRelationshipData, DeleteSystemAnalysisRelationshipResponse, DeleteSystemAnalysisRelationshipError, GetSystemAnalysisRelationshipData, GetSystemAnalysisRelationshipResponse, GetSystemAnalysisRelationshipError, UpdateSystemAnalysisRelationshipData, UpdateSystemAnalysisRelationshipResponse, UpdateSystemAnalysisRelationshipError, ArchiveSystemComponentConstraintData, ArchiveSystemComponentConstraintResponse, ArchiveSystemComponentConstraintError, GetSystemComponentConstraintData, GetSystemComponentConstraintResponse, GetSystemComponentConstraintError, UpdateSystemComponentConstraintData, UpdateSystemComponentConstraintResponse, UpdateSystemComponentConstraintError, ArchiveSystemComponentControlData, ArchiveSystemComponentControlResponse, ArchiveSystemComponentControlError, GetSystemComponentControlData, GetSystemComponentControlResponse, GetSystemComponentControlError, UpdateSystemComponentControlData, UpdateSystemComponentControlResponse, UpdateSystemComponentControlError, ListSystemComponentKindsData, ListSystemComponentKindsResponse, ListSystemComponentKindsError, CreateSystemComponentKindData, CreateSystemComponentKindResponse, CreateSystemComponentKindError, ArchiveSystemComponentKindData, ArchiveSystemComponentKindResponse, ArchiveSystemComponentKindError, GetSystemComponentKindData, GetSystemComponentKindResponse, GetSystemComponentKindError, UpdateSystemComponentKindData, UpdateSystemComponentKindResponse, UpdateSystemComponentKindError, ListSystemComponentRelationshipsData, ListSystemComponentRelationshipsResponse, ListSystemComponentRelationshipsError, CreateSystemComponentRelationshipData, CreateSystemComponentRelationshipResponse, CreateSystemComponentRelationshipError, ArchiveSystemComponentRelationshipData, ArchiveSystemComponentRelationshipResponse, ArchiveSystemComponentRelationshipError, GetSystemComponentRelationshipData, GetSystemComponentRelationshipResponse, GetSystemComponentRelationshipError, UpdateSystemComponentRelationshipData, UpdateSystemComponentRelationshipResponse, UpdateSystemComponentRelationshipError, ArchiveSystemComponentSignalData, ArchiveSystemComponentSignalResponse, ArchiveSystemComponentSignalError, GetSystemComponentSignalData, GetSystemComponentSignalResponse, GetSystemComponentSignalError, UpdateSystemComponentSignalData, UpdateSystemComponentSignalResponse, UpdateSystemComponentSignalError, ListSystemComponentsData, ListSystemComponentsResponse, ListSystemComponentsError, CreateSystemComponentData, CreateSystemComponentResponse, CreateSystemComponentError, ArchiveSystemComponentData, ArchiveSystemComponentResponse, ArchiveSystemComponentError, GetSystemComponentData, GetSystemComponentResponse, GetSystemComponentError, UpdateSystemComponentData, UpdateSystemComponentResponse, UpdateSystemComponentError, CreateSystemComponentConstraintData, CreateSystemComponentConstraintResponse, CreateSystemComponentConstraintError, CreateSystemComponentControlData, CreateSystemComponentControlResponse, CreateSystemComponentControlError, CreateSystemComponentSignalData, CreateSystemComponentSignalResponse, CreateSystemComponentSignalError, ListTasksData, ListTasksResponse, ListTasksError, CreateTaskData, CreateTaskResponse, CreateTaskError, ArchiveTaskData, ArchiveTaskResponse, ArchiveTaskError, GetTaskData, GetTaskResponse, GetTaskError, UpdateTaskData, UpdateTaskResponse, UpdateTaskError, ListTeamsData, ListTeamsResponse, ListTeamsError, CreateTeamData, CreateTeamResponse, CreateTeamError, ArchiveTeamData, ArchiveTeamResponse, ArchiveTeamError, GetTeamData, GetTeamResponse, GetTeamError, UpdateTeamsData, UpdateTeamsResponse, UpdateTeamsError, DeleteUserNotificationData, DeleteUserNotificationResponse, DeleteUserNotificationError, ListUsersData, ListUsersResponse, ListUsersError, GetUserData, GetUserResponse, GetUserError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get the Auth Session config
 */
export const getAuthSessionConfig = <ThrowOnError extends boolean = false>(options?: Options<GetAuthSessionConfigData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAuthSessionConfigResponse, GetAuthSessionConfigError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth_session/config',
        ...options
    });
};

/**
 * Get the Auth Session for the Current User
 */
export const getCurrentUserAuthSession = <ThrowOnError extends boolean = false>(options?: Options<GetCurrentUserAuthSessionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCurrentUserAuthSessionResponse, GetCurrentUserAuthSessionError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth_session/user',
        ...options
    });
};

/**
 * List Notifications for the Current User
 */
export const listUserNotifications = <ThrowOnError extends boolean = false>(options?: Options<ListUserNotificationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListUserNotificationsResponse, ListUserNotificationsError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth_session/user/notifications',
        ...options
    });
};

/**
 * List Incident Debrief Questions
 */
export const listDebriefQuestions = <ThrowOnError extends boolean = false>(options?: Options<ListDebriefQuestionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListDebriefQuestionsResponse, ListDebriefQuestionsError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/debrief_questions',
        ...options
    });
};

/**
 * Create an Incident Debrief Question
 */
export const createDebriefQuestion = <ThrowOnError extends boolean = false>(options: Options<CreateDebriefQuestionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateDebriefQuestionResponse, CreateDebriefQuestionError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/debrief_questions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Archive an Incident Debrief Question
 */
export const archiveDebriefQuestion = <ThrowOnError extends boolean = false>(options: Options<ArchiveDebriefQuestionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ArchiveDebriefQuestionResponse, ArchiveDebriefQuestionError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/debrief_questions/{id}',
        ...options
    });
};

/**
 * Get an Incident Debrief Question
 */
export const getDebriefQuestion = <ThrowOnError extends boolean = false>(options: Options<GetDebriefQuestionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDebriefQuestionResponse, GetDebriefQuestionError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/debrief_questions/{id}',
        ...options
    });
};

/**
 * Update an Incident Debrief Question
 */
export const updateDebriefQuestion = <ThrowOnError extends boolean = false>(options: Options<UpdateDebriefQuestionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateDebriefQuestionResponse, UpdateDebriefQuestionError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/debrief_questions/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Request a Document Editor Session
 */
export const requestDocumentEditorSession = <ThrowOnError extends boolean = false>(options: Options<RequestDocumentEditorSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RequestDocumentEditorSessionResponse, RequestDocumentEditorSessionError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/documents/session/new',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Verify a Document Editor Session
 */
export const verifyDocumentEditorSession = <ThrowOnError extends boolean = false>(options: Options<VerifyDocumentEditorSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<VerifyDocumentEditorSessionResponse, VerifyDocumentEditorSessionError, ThrowOnError>({
        url: '/documents/session/verify',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List Environments
 */
export const listEnvironments = <ThrowOnError extends boolean = false>(options?: Options<ListEnvironmentsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListEnvironmentsResponse, ListEnvironmentsError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/environments',
        ...options
    });
};

/**
 * Create an Environment
 */
export const createEnvironment = <ThrowOnError extends boolean = false>(options: Options<CreateEnvironmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateEnvironmentResponse, CreateEnvironmentError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/environments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Archive an Environment
 */
export const archiveEnvironment = <ThrowOnError extends boolean = false>(options: Options<ArchiveEnvironmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ArchiveEnvironmentResponse, ArchiveEnvironmentError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/environments/{id}',
        ...options
    });
};

/**
 * Get an Environment
 */
export const getEnvironment = <ThrowOnError extends boolean = false>(options: Options<GetEnvironmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetEnvironmentResponse, GetEnvironmentError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/environments/{id}',
        ...options
    });
};

/**
 * Update an Environment
 */
export const updateEnvironment = <ThrowOnError extends boolean = false>(options: Options<UpdateEnvironmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateEnvironmentResponse, UpdateEnvironmentError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/environments/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List Functionalities
 */
export const listFunctionalities = <ThrowOnError extends boolean = false>(options?: Options<ListFunctionalitiesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListFunctionalitiesResponse, ListFunctionalitiesError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/functionalities',
        ...options
    });
};

/**
 * Create a Functionality
 */
export const createFunctionality = <ThrowOnError extends boolean = false>(options: Options<CreateFunctionalityData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateFunctionalityResponse, CreateFunctionalityError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/functionalities',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Archive a Functionality
 */
export const archiveFunctionality = <ThrowOnError extends boolean = false>(options: Options<ArchiveFunctionalityData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ArchiveFunctionalityResponse, ArchiveFunctionalityError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/functionalities/{id}',
        ...options
    });
};

/**
 * Get a Functionality
 */
export const getFunctionality = <ThrowOnError extends boolean = false>(options: Options<GetFunctionalityData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFunctionalityResponse, GetFunctionalityError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/functionalities/{id}',
        ...options
    });
};

/**
 * Update a Functionality
 */
export const updateFunctionality = <ThrowOnError extends boolean = false>(options: Options<UpdateFunctionalityData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateFunctionalityResponse, UpdateFunctionalityError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/functionalities/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Incident Debrief
 */
export const getIncidentDebrief = <ThrowOnError extends boolean = false>(options: Options<GetIncidentDebriefData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetIncidentDebriefResponse, GetIncidentDebriefError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/incident_debriefs/{id}',
        ...options
    });
};

/**
 * Update Incident Debrief
 */
export const updateIncidentDebrief = <ThrowOnError extends boolean = false>(options: Options<UpdateIncidentDebriefData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateIncidentDebriefResponse, UpdateIncidentDebriefError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/incident_debriefs/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List Incident Debrief Messages
 */
export const listDebriefMessages = <ThrowOnError extends boolean = false>(options: Options<ListDebriefMessagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListDebriefMessagesResponse, ListDebriefMessagesError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/incident_debriefs/{id}/messages',
        ...options
    });
};

/**
 * Add an Incident Debrief message
 */
export const addIncidentDebriefUserMessage = <ThrowOnError extends boolean = false>(options: Options<AddIncidentDebriefUserMessageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddIncidentDebriefUserMessageResponse, AddIncidentDebriefUserMessageError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/incident_debriefs/{id}/messages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List Incident Debrief Suggestions
 */
export const listDebriefSuggestions = <ThrowOnError extends boolean = false>(options: Options<ListDebriefSuggestionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListDebriefSuggestionsResponse, ListDebriefSuggestionsError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/incident_debriefs/{id}/suggestions',
        ...options
    });
};

/**
 * List Categories of Contributing Factors used in Incident Events
 */
export const listIncidentEventContributingFactorCategories = <ThrowOnError extends boolean = false>(options?: Options<ListIncidentEventContributingFactorCategoriesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListIncidentEventContributingFactorCategoriesResponse, ListIncidentEventContributingFactorCategoriesError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/incident_event_contributing_factor_categories',
        ...options
    });
};

/**
 * Delete an Incident Event
 */
export const deleteIncidentEvent = <ThrowOnError extends boolean = false>(options: Options<DeleteIncidentEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteIncidentEventResponse, DeleteIncidentEventError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/incident_events/{id}',
        ...options
    });
};

/**
 * Update an Incident Event
 */
export const updateIncidentEvent = <ThrowOnError extends boolean = false>(options: Options<UpdateIncidentEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateIncidentEventResponse, UpdateIncidentEventError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/incident_events/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List Incident Fields
 */
export const listIncidentFields = <ThrowOnError extends boolean = false>(options?: Options<ListIncidentFieldsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListIncidentFieldsResponse, ListIncidentFieldsError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/incident_fields',
        ...options
    });
};

/**
 * Create an Incident Field
 */
export const createIncidentField = <ThrowOnError extends boolean = false>(options: Options<CreateIncidentFieldData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateIncidentFieldResponse, CreateIncidentFieldError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/incident_fields',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Archive an Incident Field
 */
export const archiveIncidentField = <ThrowOnError extends boolean = false>(options: Options<ArchiveIncidentFieldData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ArchiveIncidentFieldResponse, ArchiveIncidentFieldError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/incident_fields/{id}',
        ...options
    });
};

/**
 * Get an Incident Field
 */
export const getIncidentField = <ThrowOnError extends boolean = false>(options: Options<GetIncidentFieldData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetIncidentFieldResponse, GetIncidentFieldError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/incident_fields/{id}',
        ...options
    });
};

/**
 * Update an Incident Field
 */
export const updateIncidentField = <ThrowOnError extends boolean = false>(options: Options<UpdateIncidentFieldData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateIncidentFieldResponse, UpdateIncidentFieldError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/incident_fields/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete an Incident Milestone
 */
export const deleteIncidentMilestone = <ThrowOnError extends boolean = false>(options: Options<DeleteIncidentMilestoneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteIncidentMilestoneResponse, DeleteIncidentMilestoneError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/incident_milestones/{id}',
        ...options
    });
};

/**
 * Update an Incident Milestone
 */
export const updateIncidentMilestone = <ThrowOnError extends boolean = false>(options: Options<UpdateIncidentMilestoneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateIncidentMilestoneResponse, UpdateIncidentMilestoneError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/incident_milestones/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List Incident Roles
 */
export const listIncidentRoles = <ThrowOnError extends boolean = false>(options?: Options<ListIncidentRolesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListIncidentRolesResponse, ListIncidentRolesError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/incident_roles',
        ...options
    });
};

/**
 * Create an Incident Role
 */
export const createIncidentRole = <ThrowOnError extends boolean = false>(options: Options<CreateIncidentRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateIncidentRoleResponse, CreateIncidentRoleError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/incident_roles',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Archive an Incident Role
 */
export const archiveIncidentRole = <ThrowOnError extends boolean = false>(options: Options<ArchiveIncidentRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ArchiveIncidentRoleResponse, ArchiveIncidentRoleError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/incident_roles/{id}',
        ...options
    });
};

/**
 * Get an Incident Role
 */
export const getIncidentRole = <ThrowOnError extends boolean = false>(options: Options<GetIncidentRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetIncidentRoleResponse, GetIncidentRoleError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/incident_roles/{id}',
        ...options
    });
};

/**
 * Update an Incident Role
 */
export const updateIncidentRole = <ThrowOnError extends boolean = false>(options: Options<UpdateIncidentRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateIncidentRoleResponse, UpdateIncidentRoleError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/incident_roles/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List Severities
 */
export const listIncidentSeverities = <ThrowOnError extends boolean = false>(options?: Options<ListIncidentSeveritiesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListIncidentSeveritiesResponse, ListIncidentSeveritiesError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/incident_severities',
        ...options
    });
};

/**
 * Create a Severity
 */
export const createIncidentSeverity = <ThrowOnError extends boolean = false>(options: Options<CreateIncidentSeverityData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateIncidentSeverityResponse, CreateIncidentSeverityError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/incident_severities',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Archive a Severity
 */
export const archiveIncidentSeverity = <ThrowOnError extends boolean = false>(options: Options<ArchiveIncidentSeverityData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ArchiveIncidentSeverityResponse, ArchiveIncidentSeverityError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/incident_severities/{id}',
        ...options
    });
};

/**
 * Get a Severity
 */
export const getIncidentSeverity = <ThrowOnError extends boolean = false>(options: Options<GetIncidentSeverityData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetIncidentSeverityResponse, GetIncidentSeverityError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/incident_severities/{id}',
        ...options
    });
};

/**
 * Update a Severity
 */
export const updateIncidentSeverity = <ThrowOnError extends boolean = false>(options: Options<UpdateIncidentSeverityData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateIncidentSeverityResponse, UpdateIncidentSeverityError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/incident_severities/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List Incident Tags
 */
export const listIncidentTags = <ThrowOnError extends boolean = false>(options?: Options<ListIncidentTagsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListIncidentTagsResponse, ListIncidentTagsError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/incident_tags',
        ...options
    });
};

/**
 * Create an Incident Tag
 */
export const createIncidentTag = <ThrowOnError extends boolean = false>(options: Options<CreateIncidentTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateIncidentTagResponse, CreateIncidentTagError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/incident_tags',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Archive an Incident Tag
 */
export const archiveIncidentTag = <ThrowOnError extends boolean = false>(options: Options<ArchiveIncidentTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ArchiveIncidentTagResponse, ArchiveIncidentTagError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/incident_tags/{id}',
        ...options
    });
};

/**
 * Get an Incident Tag
 */
export const getIncidentTag = <ThrowOnError extends boolean = false>(options: Options<GetIncidentTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetIncidentTagResponse, GetIncidentTagError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/incident_tags/{id}',
        ...options
    });
};

/**
 * Update an Incident Tag
 */
export const updateIncidentTag = <ThrowOnError extends boolean = false>(options: Options<UpdateIncidentTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateIncidentTagResponse, UpdateIncidentTagError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/incident_tags/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List Types
 */
export const listIncidentTypes = <ThrowOnError extends boolean = false>(options?: Options<ListIncidentTypesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListIncidentTypesResponse, ListIncidentTypesError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/incident_types',
        ...options
    });
};

/**
 * Create an Incident Type
 */
export const createIncidentType = <ThrowOnError extends boolean = false>(options: Options<CreateIncidentTypeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateIncidentTypeResponse, CreateIncidentTypeError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/incident_types',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Archive an Incident Type
 */
export const archiveIncidentType = <ThrowOnError extends boolean = false>(options: Options<ArchiveIncidentTypeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ArchiveIncidentTypeResponse, ArchiveIncidentTypeError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/incident_types/{id}',
        ...options
    });
};

/**
 * Get a Severity
 */
export const getIncidentType = <ThrowOnError extends boolean = false>(options: Options<GetIncidentTypeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetIncidentTypeResponse, GetIncidentTypeError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/incident_types/{id}',
        ...options
    });
};

/**
 * Update an Incident Type
 */
export const updateIncidentType = <ThrowOnError extends boolean = false>(options: Options<UpdateIncidentTypeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateIncidentTypeResponse, UpdateIncidentTypeError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/incident_types/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List Incidents
 */
export const listIncidents = <ThrowOnError extends boolean = false>(options?: Options<ListIncidentsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListIncidentsResponse, ListIncidentsError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/incidents',
        ...options
    });
};

/**
 * Create an Incident
 */
export const createIncident = <ThrowOnError extends boolean = false>(options: Options<CreateIncidentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateIncidentResponse, CreateIncidentError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/incidents',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Archive an Incident
 */
export const archiveIncident = <ThrowOnError extends boolean = false>(options: Options<ArchiveIncidentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ArchiveIncidentResponse, ArchiveIncidentError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/incidents/{id}',
        ...options
    });
};

/**
 * Get Incident
 */
export const getIncident = <ThrowOnError extends boolean = false>(options: Options<GetIncidentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetIncidentResponse, GetIncidentError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/incidents/{id}',
        ...options
    });
};

/**
 * Update an Incident
 */
export const updateIncident = <ThrowOnError extends boolean = false>(options: Options<UpdateIncidentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateIncidentResponse, UpdateIncidentError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/incidents/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Debrief For Incident
 */
export const getIncidentUserDebrief = <ThrowOnError extends boolean = false>(options: Options<GetIncidentUserDebriefData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetIncidentUserDebriefResponse, GetIncidentUserDebriefError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/incidents/{id}/debrief',
        ...options
    });
};

/**
 * List Events for Incident
 */
export const listIncidentEvents = <ThrowOnError extends boolean = false>(options: Options<ListIncidentEventsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListIncidentEventsResponse, ListIncidentEventsError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/incidents/{id}/events',
        ...options
    });
};

/**
 * Create an Incident Event
 */
export const createIncidentEvent = <ThrowOnError extends boolean = false>(options: Options<CreateIncidentEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateIncidentEventResponse, CreateIncidentEventError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/incidents/{id}/events',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List Milestones for Incident
 */
export const listIncidentMilestones = <ThrowOnError extends boolean = false>(options: Options<ListIncidentMilestonesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListIncidentMilestonesResponse, ListIncidentMilestonesError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/incidents/{id}/milestones',
        ...options
    });
};

/**
 * Create an Incident Milestone
 */
export const createIncidentMilestone = <ThrowOnError extends boolean = false>(options: Options<CreateIncidentMilestoneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateIncidentMilestoneResponse, CreateIncidentMilestoneError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/incidents/{id}/milestones',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get a Retrospective for an Incident
 */
export const getRetrospectiveForIncident = <ThrowOnError extends boolean = false>(options: Options<GetRetrospectiveForIncidentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRetrospectiveForIncidentResponse, GetRetrospectiveForIncidentError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/incidents/{id}/retrospective',
        ...options
    });
};

/**
 * List Integrations
 */
export const listIntegrations = <ThrowOnError extends boolean = false>(options?: Options<ListIntegrationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListIntegrationsResponse, ListIntegrationsError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/integrations',
        ...options
    });
};

/**
 * Create an Integration
 */
export const createIntegration = <ThrowOnError extends boolean = false>(options: Options<CreateIntegrationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateIntegrationResponse, CreateIntegrationError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/integrations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Archive an Integration
 */
export const archiveIntegration = <ThrowOnError extends boolean = false>(options: Options<ArchiveIntegrationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ArchiveIntegrationResponse, ArchiveIntegrationError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/integrations/{id}',
        ...options
    });
};

/**
 * Get an Integration
 */
export const getIntegration = <ThrowOnError extends boolean = false>(options: Options<GetIntegrationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetIntegrationResponse, GetIntegrationError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/integrations/{id}',
        ...options
    });
};

/**
 * Update an Integration
 */
export const updateIntegration = <ThrowOnError extends boolean = false>(options: Options<UpdateIntegrationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateIntegrationResponse, UpdateIntegrationError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/integrations/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List Meeting Schedules
 */
export const listMeetingSchedules = <ThrowOnError extends boolean = false>(options?: Options<ListMeetingSchedulesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListMeetingSchedulesResponse, ListMeetingSchedulesError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/meeting_schedules',
        ...options
    });
};

/**
 * Create a Meeting Schedule
 */
export const createMeetingSchedule = <ThrowOnError extends boolean = false>(options: Options<CreateMeetingScheduleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateMeetingScheduleResponse, CreateMeetingScheduleError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/meeting_schedules',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Archive a Meeting Schedule
 */
export const archiveMeetingSchedule = <ThrowOnError extends boolean = false>(options: Options<ArchiveMeetingScheduleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ArchiveMeetingScheduleResponse, ArchiveMeetingScheduleError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/meeting_schedules/{id}',
        ...options
    });
};

/**
 * Get a Meeting Schedule
 */
export const getMeetingSchedule = <ThrowOnError extends boolean = false>(options: Options<GetMeetingScheduleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMeetingScheduleResponse, GetMeetingScheduleError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/meeting_schedules/{id}',
        ...options
    });
};

/**
 * Update a Meeting Schedule
 */
export const updateMeetingSchedule = <ThrowOnError extends boolean = false>(options: Options<UpdateMeetingScheduleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateMeetingScheduleResponse, UpdateMeetingScheduleError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/meeting_schedules/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List Sessions
 */
export const listMeetingSessions = <ThrowOnError extends boolean = false>(options?: Options<ListMeetingSessionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListMeetingSessionsResponse, ListMeetingSessionsError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/meeting_sessions',
        ...options
    });
};

/**
 * Create a Meeting Session
 */
export const createMeetingSession = <ThrowOnError extends boolean = false>(options: Options<CreateMeetingSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateMeetingSessionResponse, CreateMeetingSessionError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/meeting_sessions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Archive a Meeting Session
 */
export const archiveMeetingSession = <ThrowOnError extends boolean = false>(options: Options<ArchiveMeetingSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ArchiveMeetingSessionResponse, ArchiveMeetingSessionError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/meeting_sessions/{id}',
        ...options
    });
};

/**
 * Get a Meeting Session
 */
export const getMeetingSession = <ThrowOnError extends boolean = false>(options: Options<GetMeetingSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMeetingSessionResponse, GetMeetingSessionError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/meeting_sessions/{id}',
        ...options
    });
};

/**
 * Update a Meeting Session
 */
export const updateMeetingSession = <ThrowOnError extends boolean = false>(options: Options<UpdateMeetingSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateMeetingSessionResponse, UpdateMeetingSessionError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/meeting_sessions/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List Oncall Annotations
 */
export const listOncallAnnotations = <ThrowOnError extends boolean = false>(options?: Options<ListOncallAnnotationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListOncallAnnotationsResponse, ListOncallAnnotationsError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/oncall/annotations',
        ...options
    });
};

/**
 * Create an Oncall Annotation
 */
export const createOncallAnnotation = <ThrowOnError extends boolean = false>(options: Options<CreateOncallAnnotationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateOncallAnnotationResponse, CreateOncallAnnotationError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/oncall/annotations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete an Oncall Event Annotation
 */
export const deleteOncallAnnotation = <ThrowOnError extends boolean = false>(options: Options<DeleteOncallAnnotationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteOncallAnnotationResponse, DeleteOncallAnnotationError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/oncall/annotations/{id}',
        ...options
    });
};

/**
 * Update an Oncall Event Annotation
 */
export const updateOncallAnnotation = <ThrowOnError extends boolean = false>(options: Options<UpdateOncallAnnotationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateOncallAnnotationResponse, UpdateOncallAnnotationError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/oncall/annotations/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List Oncall Events
 */
export const listOncallEvents = <ThrowOnError extends boolean = false>(options?: Options<ListOncallEventsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListOncallEventsResponse, ListOncallEventsError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/oncall/events',
        ...options
    });
};

/**
 * Create an Oncall Handover Template
 */
export const createOncallHandoverTemplate = <ThrowOnError extends boolean = false>(options: Options<CreateOncallHandoverTemplateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateOncallHandoverTemplateResponse, CreateOncallHandoverTemplateError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/oncall/handover_templates',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Archive an Oncall Handover Template
 */
export const archiveOncallHandoverTemplate = <ThrowOnError extends boolean = false>(options: Options<ArchiveOncallHandoverTemplateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ArchiveOncallHandoverTemplateResponse, ArchiveOncallHandoverTemplateError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/oncall/handover_templates/{id}',
        ...options
    });
};

/**
 * Get handover for a shift
 */
export const getOncallShiftHandoverTemplate = <ThrowOnError extends boolean = false>(options: Options<GetOncallShiftHandoverTemplateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOncallShiftHandoverTemplateResponse, GetOncallShiftHandoverTemplateError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/oncall/handover_templates/{id}',
        ...options
    });
};

/**
 * Update an Oncall Handover Template
 */
export const updateOncallHandoverTemplate = <ThrowOnError extends boolean = false>(options: Options<UpdateOncallHandoverTemplateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateOncallHandoverTemplateResponse, UpdateOncallHandoverTemplateError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/oncall/handover_templates/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update an Oncall Shift Handover
 */
export const updateOncallShiftHandover = <ThrowOnError extends boolean = false>(options: Options<UpdateOncallShiftHandoverData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateOncallShiftHandoverResponse, UpdateOncallShiftHandoverError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/oncall/handovers/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Send a Shift Handover
 */
export const sendOncallShiftHandover = <ThrowOnError extends boolean = false>(options: Options<SendOncallShiftHandoverData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SendOncallShiftHandoverResponse, SendOncallShiftHandoverError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/oncall/handovers/{id}/send',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List Oncall Rosters
 */
export const listOncallRosters = <ThrowOnError extends boolean = false>(options?: Options<ListOncallRostersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListOncallRostersResponse, ListOncallRostersError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/oncall/rosters',
        ...options
    });
};

/**
 * Get oncall roster
 */
export const getOncallRoster = <ThrowOnError extends boolean = false>(options: Options<GetOncallRosterData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOncallRosterResponse, GetOncallRosterError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/oncall/rosters/{id}',
        ...options
    });
};

/**
 * List Oncall Shifts
 */
export const listOncallShifts = <ThrowOnError extends boolean = false>(options?: Options<ListOncallShiftsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListOncallShiftsResponse, ListOncallShiftsError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/oncall/shifts',
        ...options
    });
};

/**
 * Get an Oncall Shift
 */
export const getOncallShift = <ThrowOnError extends boolean = false>(options: Options<GetOncallShiftData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOncallShiftResponse, GetOncallShiftError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/oncall/shifts/{id}',
        ...options
    });
};

/**
 * Get handover for a shift
 */
export const getOncallShiftHandover = <ThrowOnError extends boolean = false>(options: Options<GetOncallShiftHandoverData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOncallShiftHandoverResponse, GetOncallShiftHandoverError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/oncall/shifts/{id}/handover',
        ...options
    });
};

/**
 * Get the next Oncall Shift
 */
export const getNextOncallShift = <ThrowOnError extends boolean = false>(options: Options<GetNextOncallShiftData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNextOncallShiftResponse, GetNextOncallShiftError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/oncall/shifts/{id}/next',
        ...options
    });
};

/**
 * Get the previous Oncall Shift
 */
export const getPreviousOncallShift = <ThrowOnError extends boolean = false>(options: Options<GetPreviousOncallShiftData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPreviousOncallShiftResponse, GetPreviousOncallShiftError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/oncall/shifts/{id}/previous',
        ...options
    });
};

/**
 * Get current user oncall information
 */
export const getUserOncallInformation = <ThrowOnError extends boolean = false>(options?: Options<GetUserOncallInformationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserOncallInformationResponse, GetUserOncallInformationError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/oncall/user',
        ...options
    });
};

/**
 * List watched oncall rosters
 */
export const listWatchedOncallRosters = <ThrowOnError extends boolean = false>(options?: Options<ListWatchedOncallRostersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListWatchedOncallRostersResponse, ListWatchedOncallRostersError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/oncall/watched_rosters',
        ...options
    });
};

/**
 * Remove a watched oncall roster
 */
export const removeWatchedOncallRoster = <ThrowOnError extends boolean = false>(options: Options<RemoveWatchedOncallRosterData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveWatchedOncallRosterResponse, RemoveWatchedOncallRosterError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/oncall/watched_rosters/{id}',
        ...options
    });
};

/**
 * Add a watched oncall roster
 */
export const addWatchedOncallRoster = <ThrowOnError extends boolean = false>(options: Options<AddWatchedOncallRosterData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddWatchedOncallRosterResponse, AddWatchedOncallRosterError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/oncall/watched_rosters/{id}',
        ...options
    });
};

/**
 * Get Weights for Calculating Burden
 */
export const getOncallShiftBurdenMetricWeights = <ThrowOnError extends boolean = false>(options?: Options<GetOncallShiftBurdenMetricWeightsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetOncallShiftBurdenMetricWeightsResponse, GetOncallShiftBurdenMetricWeightsError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/oncall_metrics/burden_weights',
        ...options
    });
};

/**
 * Get Metrics for an Oncall Roster
 */
export const getOncallRosterMetrics = <ThrowOnError extends boolean = false>(options?: Options<GetOncallRosterMetricsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetOncallRosterMetricsResponse, GetOncallRosterMetricsError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/oncall_metrics/rosters',
        ...options
    });
};

/**
 * Get Metrics for an Oncall Shift
 */
export const getOncallShiftMetrics = <ThrowOnError extends boolean = false>(options?: Options<GetOncallShiftMetricsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetOncallShiftMetricsResponse, GetOncallShiftMetricsError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/oncall_metrics/shifts',
        ...options
    });
};

/**
 * Archive a Retrospective Review
 */
export const archiveRetrospectiveReview = <ThrowOnError extends boolean = false>(options: Options<ArchiveRetrospectiveReviewData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ArchiveRetrospectiveReviewResponse, ArchiveRetrospectiveReviewError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/retrospective_reviews/{id}',
        ...options
    });
};

/**
 * Update a Retrospective Review
 */
export const updateRetrospectiveReview = <ThrowOnError extends boolean = false>(options: Options<UpdateRetrospectiveReviewData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateRetrospectiveReviewResponse, UpdateRetrospectiveReviewError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/retrospective_reviews/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List Retrospectives
 */
export const listRetrospectives = <ThrowOnError extends boolean = false>(options?: Options<ListRetrospectivesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListRetrospectivesResponse, ListRetrospectivesError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/retrospectives',
        ...options
    });
};

/**
 * Create an Incident Retrospective
 */
export const createRetrospective = <ThrowOnError extends boolean = false>(options: Options<CreateRetrospectiveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateRetrospectiveResponse, CreateRetrospectiveError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/retrospectives',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get a Retrospective
 */
export const getRetrospective = <ThrowOnError extends boolean = false>(options: Options<GetRetrospectiveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRetrospectiveResponse, GetRetrospectiveError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/retrospectives/{id}',
        ...options
    });
};

/**
 * List Discussions For a Retrospective
 */
export const listRetrospectiveDiscussions = <ThrowOnError extends boolean = false>(options: Options<ListRetrospectiveDiscussionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListRetrospectiveDiscussionsResponse, ListRetrospectiveDiscussionsError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/retrospectives/{id}/discussions',
        ...options
    });
};

/**
 * Create a Retrospective Discussion
 */
export const createRetrospectiveDiscussion = <ThrowOnError extends boolean = false>(options: Options<CreateRetrospectiveDiscussionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateRetrospectiveDiscussionResponse, CreateRetrospectiveDiscussionError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/retrospectives/{id}/discussions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get a Retrospective Discussion
 */
export const getRetrospectiveDiscussion = <ThrowOnError extends boolean = false>(options: Options<GetRetrospectiveDiscussionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRetrospectiveDiscussionResponse, GetRetrospectiveDiscussionError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/retrospectives/{id}/discussions/{discussionId}',
        ...options
    });
};

/**
 * Update a Retrospective Discussion
 */
export const updateRetrospectiveDiscussion = <ThrowOnError extends boolean = false>(options: Options<UpdateRetrospectiveDiscussionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateRetrospectiveDiscussionResponse, UpdateRetrospectiveDiscussionError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/retrospectives/{id}/discussions/{discussionId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Add a Reply to a Retrospective Discussion
 */
export const addRetrospectiveDiscussionReply = <ThrowOnError extends boolean = false>(options: Options<AddRetrospectiveDiscussionReplyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddRetrospectiveDiscussionReplyResponse, AddRetrospectiveDiscussionReplyError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/retrospectives/{id}/discussions/{discussionId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List Retrospective Reviews
 */
export const listRetrospectiveReviews = <ThrowOnError extends boolean = false>(options?: Options<ListRetrospectiveReviewsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListRetrospectiveReviewsResponse, ListRetrospectiveReviewsError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/retrospectives/{id}/reviews',
        ...options
    });
};

/**
 * Create a Retrospective Review
 */
export const createRetrospectiveReview = <ThrowOnError extends boolean = false>(options: Options<CreateRetrospectiveReviewData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateRetrospectiveReviewResponse, CreateRetrospectiveReviewError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/retrospectives/{id}/reviews',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get System Analysis
 */
export const getSystemAnalysis = <ThrowOnError extends boolean = false>(options: Options<GetSystemAnalysisData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSystemAnalysisResponse, GetSystemAnalysisError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/system_analysis/{id}',
        ...options
    });
};

/**
 * List components in a System analysis
 */
export const listSystemAnalysisComponents = <ThrowOnError extends boolean = false>(options: Options<ListSystemAnalysisComponentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListSystemAnalysisComponentsResponse, ListSystemAnalysisComponentsError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/system_analysis/{id}/components',
        ...options
    });
};

/**
 * Add a Component to a System Analysis
 */
export const addSystemAnalysisComponent = <ThrowOnError extends boolean = false>(options: Options<AddSystemAnalysisComponentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddSystemAnalysisComponentResponse, AddSystemAnalysisComponentError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/system_analysis/{id}/components',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List relationships in a System analysis
 */
export const listSystemAnalysisRelationships = <ThrowOnError extends boolean = false>(options: Options<ListSystemAnalysisRelationshipsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListSystemAnalysisRelationshipsResponse, ListSystemAnalysisRelationshipsError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/system_analysis/{id}/relationships',
        ...options
    });
};

/**
 * Create a Relationship in a System Analysis
 */
export const createSystemAnalysisRelationship = <ThrowOnError extends boolean = false>(options: Options<CreateSystemAnalysisRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateSystemAnalysisRelationshipResponse, CreateSystemAnalysisRelationshipError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/system_analysis/{id}/relationships',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a Component from a System Analysis
 */
export const deleteSystemAnalysisComponent = <ThrowOnError extends boolean = false>(options: Options<DeleteSystemAnalysisComponentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteSystemAnalysisComponentResponse, DeleteSystemAnalysisComponentError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/system_analysis_components/{id}',
        ...options
    });
};

/**
 * Get a component in a System analysis
 */
export const getSystemAnalysisComponent = <ThrowOnError extends boolean = false>(options: Options<GetSystemAnalysisComponentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSystemAnalysisComponentResponse, GetSystemAnalysisComponentError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/system_analysis_components/{id}',
        ...options
    });
};

/**
 * Update a System Analysis Component
 */
export const updateSystemAnalysisComponent = <ThrowOnError extends boolean = false>(options: Options<UpdateSystemAnalysisComponentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateSystemAnalysisComponentResponse, UpdateSystemAnalysisComponentError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/system_analysis_components/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a Relationship from a System Analysis
 */
export const deleteSystemAnalysisRelationship = <ThrowOnError extends boolean = false>(options: Options<DeleteSystemAnalysisRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteSystemAnalysisRelationshipResponse, DeleteSystemAnalysisRelationshipError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/system_analysis_relationships/{id}',
        ...options
    });
};

/**
 * Get a relationship in a System analysis
 */
export const getSystemAnalysisRelationship = <ThrowOnError extends boolean = false>(options: Options<GetSystemAnalysisRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSystemAnalysisRelationshipResponse, GetSystemAnalysisRelationshipError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/system_analysis_relationships/{id}',
        ...options
    });
};

/**
 * Update a System Analysis Relationship
 */
export const updateSystemAnalysisRelationship = <ThrowOnError extends boolean = false>(options: Options<UpdateSystemAnalysisRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateSystemAnalysisRelationshipResponse, UpdateSystemAnalysisRelationshipError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/system_analysis_relationships/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Archive a System Component Constraint
 */
export const archiveSystemComponentConstraint = <ThrowOnError extends boolean = false>(options: Options<ArchiveSystemComponentConstraintData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ArchiveSystemComponentConstraintResponse, ArchiveSystemComponentConstraintError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/system_component_constraints/{id}',
        ...options
    });
};

/**
 * Get a System Component
 */
export const getSystemComponentConstraint = <ThrowOnError extends boolean = false>(options: Options<GetSystemComponentConstraintData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSystemComponentConstraintResponse, GetSystemComponentConstraintError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/system_component_constraints/{id}',
        ...options
    });
};

/**
 * Update a System Component Constraint
 */
export const updateSystemComponentConstraint = <ThrowOnError extends boolean = false>(options: Options<UpdateSystemComponentConstraintData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateSystemComponentConstraintResponse, UpdateSystemComponentConstraintError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/system_component_constraints/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Archive a System Component Control
 */
export const archiveSystemComponentControl = <ThrowOnError extends boolean = false>(options: Options<ArchiveSystemComponentControlData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ArchiveSystemComponentControlResponse, ArchiveSystemComponentControlError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/system_component_controls/{id}',
        ...options
    });
};

/**
 * Get a System Component Control
 */
export const getSystemComponentControl = <ThrowOnError extends boolean = false>(options: Options<GetSystemComponentControlData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSystemComponentControlResponse, GetSystemComponentControlError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/system_component_controls/{id}',
        ...options
    });
};

/**
 * Update a System Component Control
 */
export const updateSystemComponentControl = <ThrowOnError extends boolean = false>(options: Options<UpdateSystemComponentControlData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateSystemComponentControlResponse, UpdateSystemComponentControlError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/system_component_controls/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List System Component Kinds
 */
export const listSystemComponentKinds = <ThrowOnError extends boolean = false>(options?: Options<ListSystemComponentKindsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListSystemComponentKindsResponse, ListSystemComponentKindsError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/system_component_kinds',
        ...options
    });
};

/**
 * Create a System Component Kind
 */
export const createSystemComponentKind = <ThrowOnError extends boolean = false>(options: Options<CreateSystemComponentKindData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateSystemComponentKindResponse, CreateSystemComponentKindError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/system_component_kinds',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Archive a System Component Kind
 */
export const archiveSystemComponentKind = <ThrowOnError extends boolean = false>(options: Options<ArchiveSystemComponentKindData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ArchiveSystemComponentKindResponse, ArchiveSystemComponentKindError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/system_component_kinds/{id}',
        ...options
    });
};

/**
 * Get a System Component Kind
 */
export const getSystemComponentKind = <ThrowOnError extends boolean = false>(options: Options<GetSystemComponentKindData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSystemComponentKindResponse, GetSystemComponentKindError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/system_component_kinds/{id}',
        ...options
    });
};

/**
 * Update a System Component Kind
 */
export const updateSystemComponentKind = <ThrowOnError extends boolean = false>(options: Options<UpdateSystemComponentKindData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateSystemComponentKindResponse, UpdateSystemComponentKindError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/system_component_kinds/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List System Component Relationships
 */
export const listSystemComponentRelationships = <ThrowOnError extends boolean = false>(options?: Options<ListSystemComponentRelationshipsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListSystemComponentRelationshipsResponse, ListSystemComponentRelationshipsError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/system_component_relationships',
        ...options
    });
};

/**
 * Create a System Component Relationship
 */
export const createSystemComponentRelationship = <ThrowOnError extends boolean = false>(options: Options<CreateSystemComponentRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateSystemComponentRelationshipResponse, CreateSystemComponentRelationshipError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/system_component_relationships',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Archive a System Component Relationship
 */
export const archiveSystemComponentRelationship = <ThrowOnError extends boolean = false>(options: Options<ArchiveSystemComponentRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ArchiveSystemComponentRelationshipResponse, ArchiveSystemComponentRelationshipError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/system_component_relationships/{id}',
        ...options
    });
};

/**
 * Get a System Component Relationship
 */
export const getSystemComponentRelationship = <ThrowOnError extends boolean = false>(options: Options<GetSystemComponentRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSystemComponentRelationshipResponse, GetSystemComponentRelationshipError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/system_component_relationships/{id}',
        ...options
    });
};

/**
 * Update a System Component Relationship
 */
export const updateSystemComponentRelationship = <ThrowOnError extends boolean = false>(options: Options<UpdateSystemComponentRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateSystemComponentRelationshipResponse, UpdateSystemComponentRelationshipError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/system_component_relationships/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Archive a System Component Signal
 */
export const archiveSystemComponentSignal = <ThrowOnError extends boolean = false>(options: Options<ArchiveSystemComponentSignalData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ArchiveSystemComponentSignalResponse, ArchiveSystemComponentSignalError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/system_component_signals/{id}',
        ...options
    });
};

/**
 * Get a System Component Signal
 */
export const getSystemComponentSignal = <ThrowOnError extends boolean = false>(options: Options<GetSystemComponentSignalData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSystemComponentSignalResponse, GetSystemComponentSignalError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/system_component_signals/{id}',
        ...options
    });
};

/**
 * Update a System Component Signal
 */
export const updateSystemComponentSignal = <ThrowOnError extends boolean = false>(options: Options<UpdateSystemComponentSignalData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateSystemComponentSignalResponse, UpdateSystemComponentSignalError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/system_component_signals/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List System Components
 */
export const listSystemComponents = <ThrowOnError extends boolean = false>(options?: Options<ListSystemComponentsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListSystemComponentsResponse, ListSystemComponentsError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/system_components',
        ...options
    });
};

/**
 * Create a System Component
 */
export const createSystemComponent = <ThrowOnError extends boolean = false>(options: Options<CreateSystemComponentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateSystemComponentResponse, CreateSystemComponentError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/system_components',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Archive a System Component
 */
export const archiveSystemComponent = <ThrowOnError extends boolean = false>(options: Options<ArchiveSystemComponentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ArchiveSystemComponentResponse, ArchiveSystemComponentError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/system_components/{id}',
        ...options
    });
};

/**
 * Get a System Component
 */
export const getSystemComponent = <ThrowOnError extends boolean = false>(options: Options<GetSystemComponentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSystemComponentResponse, GetSystemComponentError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/system_components/{id}',
        ...options
    });
};

/**
 * Update a System Component
 */
export const updateSystemComponent = <ThrowOnError extends boolean = false>(options: Options<UpdateSystemComponentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateSystemComponentResponse, UpdateSystemComponentError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/system_components/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create a System Component Constraint
 */
export const createSystemComponentConstraint = <ThrowOnError extends boolean = false>(options: Options<CreateSystemComponentConstraintData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateSystemComponentConstraintResponse, CreateSystemComponentConstraintError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/system_components/{id}/constraints',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create a System Component Control
 */
export const createSystemComponentControl = <ThrowOnError extends boolean = false>(options: Options<CreateSystemComponentControlData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateSystemComponentControlResponse, CreateSystemComponentControlError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/system_components/{id}/controls',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create a System Component Signal
 */
export const createSystemComponentSignal = <ThrowOnError extends boolean = false>(options: Options<CreateSystemComponentSignalData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateSystemComponentSignalResponse, CreateSystemComponentSignalError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/system_components/{id}/signals',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List Tasks
 */
export const listTasks = <ThrowOnError extends boolean = false>(options?: Options<ListTasksData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListTasksResponse, ListTasksError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tasks',
        ...options
    });
};

/**
 * Create a Task
 */
export const createTask = <ThrowOnError extends boolean = false>(options: Options<CreateTaskData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTaskResponse, CreateTaskError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tasks',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Archive a Task
 */
export const archiveTask = <ThrowOnError extends boolean = false>(options: Options<ArchiveTaskData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ArchiveTaskResponse, ArchiveTaskError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tasks/{id}',
        ...options
    });
};

/**
 * Get Task
 */
export const getTask = <ThrowOnError extends boolean = false>(options: Options<GetTaskData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTaskResponse, GetTaskError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tasks/{id}',
        ...options
    });
};

/**
 * Update a Task
 */
export const updateTask = <ThrowOnError extends boolean = false>(options: Options<UpdateTaskData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateTaskResponse, UpdateTaskError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tasks/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List Teams
 */
export const listTeams = <ThrowOnError extends boolean = false>(options?: Options<ListTeamsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListTeamsResponse, ListTeamsError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teams',
        ...options
    });
};

/**
 * Create a Team
 */
export const createTeam = <ThrowOnError extends boolean = false>(options: Options<CreateTeamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTeamResponse, CreateTeamError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teams',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Archive a Team
 */
export const archiveTeam = <ThrowOnError extends boolean = false>(options: Options<ArchiveTeamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ArchiveTeamResponse, ArchiveTeamError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teams/{id}',
        ...options
    });
};

/**
 * Get a Team
 */
export const getTeam = <ThrowOnError extends boolean = false>(options: Options<GetTeamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTeamResponse, GetTeamError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teams/{id}',
        ...options
    });
};

/**
 * Update a Team
 */
export const updateTeams = <ThrowOnError extends boolean = false>(options: Options<UpdateTeamsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateTeamsResponse, UpdateTeamsError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teams/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a Notification for the Current User
 */
export const deleteUserNotification = <ThrowOnError extends boolean = false>(options: Options<DeleteUserNotificationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserNotificationResponse, DeleteUserNotificationError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/user_session/notifications/{id}',
        ...options
    });
};

/**
 * List Users
 */
export const listUsers = <ThrowOnError extends boolean = false>(options?: Options<ListUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListUsersResponse, ListUsersError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users',
        ...options
    });
};

/**
 * Get a User
 */
export const getUser = <ThrowOnError extends boolean = false>(options: Options<GetUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserResponse, GetUserError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'rez_session',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{id}',
        ...options
    });
};