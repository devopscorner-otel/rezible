// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser } from '@hey-api/client-fetch';
import { type ListDebriefQuestionsData, type ListDebriefQuestionsError, type ListDebriefQuestionsResponse, type CreateDebriefQuestionData, type CreateDebriefQuestionError, type CreateDebriefQuestionResponse, type GetDebriefQuestionData, type GetDebriefQuestionError, type GetDebriefQuestionResponse, type ArchiveDebriefQuestionData, type ArchiveDebriefQuestionError, type ArchiveDebriefQuestionResponse, type UpdateDebriefQuestionData, type UpdateDebriefQuestionError, type UpdateDebriefQuestionResponse, type RequestDocumentEditorSessionData, type RequestDocumentEditorSessionError, type RequestDocumentEditorSessionResponse, type VerifyDocumentEditorSessionData, type VerifyDocumentEditorSessionError, type VerifyDocumentEditorSessionResponse, type ListEnvironmentsData, type ListEnvironmentsError, type ListEnvironmentsResponse, type CreateEnvironmentData, type CreateEnvironmentError, type CreateEnvironmentResponse, type GetEnvironmentData, type GetEnvironmentError, type GetEnvironmentResponse, type ArchiveEnvironmentData, type ArchiveEnvironmentError, type ArchiveEnvironmentResponse, type UpdateEnvironmentData, type UpdateEnvironmentError, type UpdateEnvironmentResponse, type ListFunctionalitiesData, type ListFunctionalitiesError, type ListFunctionalitiesResponse, type CreateFunctionalityData, type CreateFunctionalityError, type CreateFunctionalityResponse, type GetFunctionalityData, type GetFunctionalityError, type GetFunctionalityResponse, type ArchiveFunctionalityData, type ArchiveFunctionalityError, type ArchiveFunctionalityResponse, type UpdateFunctionalityData, type UpdateFunctionalityError, type UpdateFunctionalityResponse, type GetIncidentDebriefData, type GetIncidentDebriefError, type GetIncidentDebriefResponse, type UpdateIncidentDebriefData, type UpdateIncidentDebriefError, type UpdateIncidentDebriefResponse, type ListDebriefMessagesData, type ListDebriefMessagesError, type ListDebriefMessagesResponse, type AddIncidentDebriefUserMessageData, type AddIncidentDebriefUserMessageError, type AddIncidentDebriefUserMessageResponse, type ListDebriefSuggestionsData, type ListDebriefSuggestionsError, type ListDebriefSuggestionsResponse, type ListIncidentFieldsData, type ListIncidentFieldsError, type ListIncidentFieldsResponse, type CreateIncidentFieldData, type CreateIncidentFieldError, type CreateIncidentFieldResponse, type GetIncidentFieldData, type GetIncidentFieldError, type GetIncidentFieldResponse, type ArchiveIncidentFieldData, type ArchiveIncidentFieldError, type ArchiveIncidentFieldResponse, type UpdateIncidentFieldData, type UpdateIncidentFieldError, type UpdateIncidentFieldResponse, type ArchiveIncidentMilestoneData, type ArchiveIncidentMilestoneError, type ArchiveIncidentMilestoneResponse, type UpdateIncidentMilestoneData, type UpdateIncidentMilestoneError, type UpdateIncidentMilestoneResponse, type ListIncidentRolesData, type ListIncidentRolesError, type ListIncidentRolesResponse, type CreateIncidentRoleData, type CreateIncidentRoleError, type CreateIncidentRoleResponse, type GetIncidentRoleData, type GetIncidentRoleError, type GetIncidentRoleResponse, type ArchiveIncidentRoleData, type ArchiveIncidentRoleError, type ArchiveIncidentRoleResponse, type UpdateIncidentRoleData, type UpdateIncidentRoleError, type UpdateIncidentRoleResponse, type ListIncidentSeveritiesData, type ListIncidentSeveritiesError, type ListIncidentSeveritiesResponse, type CreateIncidentSeverityData, type CreateIncidentSeverityError, type CreateIncidentSeverityResponse, type GetIncidentSeverityData, type GetIncidentSeverityError, type GetIncidentSeverityResponse, type ArchiveIncidentSeverityData, type ArchiveIncidentSeverityError, type ArchiveIncidentSeverityResponse, type UpdateIncidentSeverityData, type UpdateIncidentSeverityError, type UpdateIncidentSeverityResponse, type ListIncidentTagsData, type ListIncidentTagsError, type ListIncidentTagsResponse, type CreateIncidentTagData, type CreateIncidentTagError, type CreateIncidentTagResponse, type GetIncidentTagData, type GetIncidentTagError, type GetIncidentTagResponse, type ArchiveIncidentTagData, type ArchiveIncidentTagError, type ArchiveIncidentTagResponse, type UpdateIncidentTagData, type UpdateIncidentTagError, type UpdateIncidentTagResponse, type ListIncidentTypesData, type ListIncidentTypesError, type ListIncidentTypesResponse, type CreateIncidentTypeData, type CreateIncidentTypeError, type CreateIncidentTypeResponse, type GetIncidentTypeData, type GetIncidentTypeError, type GetIncidentTypeResponse, type ArchiveIncidentTypeData, type ArchiveIncidentTypeError, type ArchiveIncidentTypeResponse, type UpdateIncidentTypeData, type UpdateIncidentTypeError, type UpdateIncidentTypeResponse, type ListIncidentsData, type ListIncidentsError, type ListIncidentsResponse, type CreateIncidentData, type CreateIncidentError, type CreateIncidentResponse, type GetIncidentData, type GetIncidentError, type GetIncidentResponse, type ArchiveIncidentData, type ArchiveIncidentError, type ArchiveIncidentResponse, type UpdateIncidentData, type UpdateIncidentError, type UpdateIncidentResponse, type GetIncidentUserDebriefData, type GetIncidentUserDebriefError, type GetIncidentUserDebriefResponse, type ListIncidentMilestonesData, type ListIncidentMilestonesError, type ListIncidentMilestonesResponse, type CreateIncidentMilestoneData, type CreateIncidentMilestoneError, type CreateIncidentMilestoneResponse, type GetRetrospectiveForIncidentData, type GetRetrospectiveForIncidentError, type GetRetrospectiveForIncidentResponse, type ListIntegrationsData, type ListIntegrationsError, type ListIntegrationsResponse, type CreateIntegrationData, type CreateIntegrationError, type CreateIntegrationResponse, type GetIntegrationData, type GetIntegrationError, type GetIntegrationResponse, type ArchiveIntegrationData, type ArchiveIntegrationError, type ArchiveIntegrationResponse, type UpdateIntegrationData, type UpdateIntegrationError, type UpdateIntegrationResponse, type ListMeetingSchedulesData, type ListMeetingSchedulesError, type ListMeetingSchedulesResponse, type CreateMeetingScheduleData, type CreateMeetingScheduleError, type CreateMeetingScheduleResponse, type GetMeetingScheduleData, type GetMeetingScheduleError, type GetMeetingScheduleResponse, type ArchiveMeetingScheduleData, type ArchiveMeetingScheduleError, type ArchiveMeetingScheduleResponse, type UpdateMeetingScheduleData, type UpdateMeetingScheduleError, type UpdateMeetingScheduleResponse, type ListMeetingSessionsData, type ListMeetingSessionsError, type ListMeetingSessionsResponse, type CreateMeetingSessionData, type CreateMeetingSessionError, type CreateMeetingSessionResponse, type GetMeetingSessionData, type GetMeetingSessionError, type GetMeetingSessionResponse, type ArchiveMeetingSessionData, type ArchiveMeetingSessionError, type ArchiveMeetingSessionResponse, type UpdateMeetingSessionData, type UpdateMeetingSessionError, type UpdateMeetingSessionResponse, type ArchiveOncallShiftAnnotationData, type ArchiveOncallShiftAnnotationError, type ArchiveOncallShiftAnnotationResponse, type UpdateOncallShiftAnnotationData, type UpdateOncallShiftAnnotationError, type UpdateOncallShiftAnnotationResponse, type CreateOncallHandoverTemplateData, type CreateOncallHandoverTemplateError, type CreateOncallHandoverTemplateResponse, type GetOncallShiftHandoverTemplateData, type GetOncallShiftHandoverTemplateError, type GetOncallShiftHandoverTemplateResponse, type ArchiveOncallHandoverTemplateData, type ArchiveOncallHandoverTemplateError, type ArchiveOncallHandoverTemplateResponse, type UpdateOncallHandoverTemplateData, type UpdateOncallHandoverTemplateError, type UpdateOncallHandoverTemplateResponse, type ListOncallRostersData, type ListOncallRostersError, type ListOncallRostersResponse, type GetOncallRosterData, type GetOncallRosterError, type GetOncallRosterResponse, type ListOncallShiftsData, type ListOncallShiftsError, type ListOncallShiftsResponse, type GetOncallShiftData, type GetOncallShiftError, type GetOncallShiftResponse, type ListOncallShiftAlertsData, type ListOncallShiftAlertsError, type ListOncallShiftAlertsResponse, type ListOncallShiftAnnotationsData, type ListOncallShiftAnnotationsError, type ListOncallShiftAnnotationsResponse, type CreateOncallShiftAnnotationData, type CreateOncallShiftAnnotationError, type CreateOncallShiftAnnotationResponse, type GetOncallShiftHandoverData, type GetOncallShiftHandoverError, type GetOncallShiftHandoverResponse, type SendOncallShiftHandoverData, type SendOncallShiftHandoverError, type SendOncallShiftHandoverResponse, type ListOncallShiftIncidentsData, type ListOncallShiftIncidentsError, type ListOncallShiftIncidentsResponse, type GetNextOncallShiftData, type GetNextOncallShiftError, type GetNextOncallShiftResponse, type GetUserOncallDetailsData, type GetUserOncallDetailsError, type GetUserOncallDetailsResponse, type ArchiveRetrospectiveReviewData, type ArchiveRetrospectiveReviewError, type ArchiveRetrospectiveReviewResponse, type UpdateRetrospectiveReviewData, type UpdateRetrospectiveReviewError, type UpdateRetrospectiveReviewResponse, type ListRetrospectivesData, type ListRetrospectivesError, type ListRetrospectivesResponse, type GetRetrospectiveData, type GetRetrospectiveError, type GetRetrospectiveResponse, type ListRetrospectiveDiscussionsData, type ListRetrospectiveDiscussionsError, type ListRetrospectiveDiscussionsResponse, type CreateRetrospectiveDiscussionData, type CreateRetrospectiveDiscussionError, type CreateRetrospectiveDiscussionResponse, type GetRetrospectiveDiscussionData, type GetRetrospectiveDiscussionError, type GetRetrospectiveDiscussionResponse, type AddRetrospectiveDiscussionReplyData, type AddRetrospectiveDiscussionReplyError, type AddRetrospectiveDiscussionReplyResponse, type UpdateRetrospectiveDiscussionData, type UpdateRetrospectiveDiscussionError, type UpdateRetrospectiveDiscussionResponse, type ListRetrospectiveReviewsData, type ListRetrospectiveReviewsError, type ListRetrospectiveReviewsResponse, type CreateRetrospectiveReviewData, type CreateRetrospectiveReviewError, type CreateRetrospectiveReviewResponse, type GetSystemAnalysisComponentData, type GetSystemAnalysisComponentError, type GetSystemAnalysisComponentResponse, type DeleteSystemAnalysisComponentData, type DeleteSystemAnalysisComponentError, type DeleteSystemAnalysisComponentResponse, type UpdateSystemAnalysisComponentData, type UpdateSystemAnalysisComponentError, type UpdateSystemAnalysisComponentResponse, type GetSystemAnalysisRelationshipData, type GetSystemAnalysisRelationshipError, type GetSystemAnalysisRelationshipResponse, type DeleteSystemAnalysisRelationshipData, type DeleteSystemAnalysisRelationshipError, type DeleteSystemAnalysisRelationshipResponse, type UpdateSystemAnalysisRelationshipData, type UpdateSystemAnalysisRelationshipError, type UpdateSystemAnalysisRelationshipResponse, type GetSystemAnalysisData, type GetSystemAnalysisError, type GetSystemAnalysisResponse, type ListSystemAnalysisComponentsData, type ListSystemAnalysisComponentsError, type ListSystemAnalysisComponentsResponse, type AddSystemAnalysisComponentData, type AddSystemAnalysisComponentError, type AddSystemAnalysisComponentResponse, type ListSystemAnalysisRelationshipsData, type ListSystemAnalysisRelationshipsError, type ListSystemAnalysisRelationshipsResponse, type CreateSystemAnalysisRelationshipData, type CreateSystemAnalysisRelationshipError, type CreateSystemAnalysisRelationshipResponse, type ListSystemComponentsData, type ListSystemComponentsError, type ListSystemComponentsResponse, type CreateSystemComponentData, type CreateSystemComponentError, type CreateSystemComponentResponse, type GetSystemComponentConstraintData, type GetSystemComponentConstraintError, type GetSystemComponentConstraintResponse, type ArchiveSystemComponentConstraintData, type ArchiveSystemComponentConstraintError, type ArchiveSystemComponentConstraintResponse, type UpdateSystemComponentConstraintData, type UpdateSystemComponentConstraintError, type UpdateSystemComponentConstraintResponse, type GetSystemComponentControlData, type GetSystemComponentControlError, type GetSystemComponentControlResponse, type ArchiveSystemComponentControlData, type ArchiveSystemComponentControlError, type ArchiveSystemComponentControlResponse, type UpdateSystemComponentControlData, type UpdateSystemComponentControlError, type UpdateSystemComponentControlResponse, type GetSystemComponentSignalData, type GetSystemComponentSignalError, type GetSystemComponentSignalResponse, type ArchiveSystemComponentSignalData, type ArchiveSystemComponentSignalError, type ArchiveSystemComponentSignalResponse, type UpdateSystemComponentSignalData, type UpdateSystemComponentSignalError, type UpdateSystemComponentSignalResponse, type GetSystemComponentData, type GetSystemComponentError, type GetSystemComponentResponse, type ArchiveSystemComponentData, type ArchiveSystemComponentError, type ArchiveSystemComponentResponse, type UpdateSystemComponentData, type UpdateSystemComponentError, type UpdateSystemComponentResponse, type CreateSystemComponentConstraintData, type CreateSystemComponentConstraintError, type CreateSystemComponentConstraintResponse, type CreateSystemComponentControlData, type CreateSystemComponentControlError, type CreateSystemComponentControlResponse, type CreateSystemComponentSignalData, type CreateSystemComponentSignalError, type CreateSystemComponentSignalResponse, type ListTasksData, type ListTasksError, type ListTasksResponse, type CreateTaskData, type CreateTaskError, type CreateTaskResponse, type GetTaskData, type GetTaskError, type GetTaskResponse, type ArchiveTaskData, type ArchiveTaskError, type ArchiveTaskResponse, type UpdateTaskData, type UpdateTaskError, type UpdateTaskResponse, type ListTeamsData, type ListTeamsError, type ListTeamsResponse, type CreateTeamData, type CreateTeamError, type CreateTeamResponse, type GetTeamData, type GetTeamError, type GetTeamResponse, type ArchiveTeamData, type ArchiveTeamError, type ArchiveTeamResponse, type UpdateTeamsData, type UpdateTeamsError, type UpdateTeamsResponse, type GetCurrentUserSessionError, type GetCurrentUserSessionResponse, type ListUserAssignmentsData, type ListUserAssignmentsError, type ListUserAssignmentsResponse, type ListUserNotificationsData, type ListUserNotificationsError, type ListUserNotificationsResponse, type DeleteUserNotificationData, type DeleteUserNotificationError, type DeleteUserNotificationResponse, type ListUsersData, type ListUsersError, type ListUsersResponse, type GetUserData, type GetUserError, type GetUserResponse, ListDebriefMessagesResponseTransformer, AddIncidentDebriefUserMessageResponseTransformer, UpdateIncidentMilestoneResponseTransformer, ListIncidentsResponseTransformer, CreateIncidentResponseTransformer, GetIncidentResponseTransformer, UpdateIncidentResponseTransformer, ListIncidentMilestonesResponseTransformer, CreateIncidentMilestoneResponseTransformer, ListMeetingSchedulesResponseTransformer, CreateMeetingScheduleResponseTransformer, GetMeetingScheduleResponseTransformer, UpdateMeetingScheduleResponseTransformer, ListMeetingSessionsResponseTransformer, CreateMeetingSessionResponseTransformer, GetMeetingSessionResponseTransformer, UpdateMeetingSessionResponseTransformer, UpdateOncallShiftAnnotationResponseTransformer, ListOncallRostersResponseTransformer, GetOncallRosterResponseTransformer, ListOncallShiftsResponseTransformer, GetOncallShiftResponseTransformer, ListOncallShiftAlertsResponseTransformer, ListOncallShiftAnnotationsResponseTransformer, CreateOncallShiftAnnotationResponseTransformer, GetOncallShiftHandoverResponseTransformer, SendOncallShiftHandoverResponseTransformer, ListOncallShiftIncidentsResponseTransformer, GetNextOncallShiftResponseTransformer, GetUserOncallDetailsResponseTransformer, ListRetrospectiveDiscussionsResponseTransformer, CreateRetrospectiveDiscussionResponseTransformer, GetRetrospectiveDiscussionResponseTransformer, AddRetrospectiveDiscussionReplyResponseTransformer, UpdateRetrospectiveDiscussionResponseTransformer, GetCurrentUserSessionResponseTransformer, ListUserAssignmentsResponseTransformer } from './types.gen';

export const client = createClient(createConfig());

/**
 * List Incident Debrief Questions
 */
export const listDebriefQuestions = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<ListDebriefQuestionsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListDebriefQuestionsResponse, ListDebriefQuestionsError, ThrowOnError>({
        ...options,
        url: '/debrief_questions'
    });
};

/**
 * Create an Incident Debrief Question
 */
export const createDebriefQuestion = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateDebriefQuestionData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateDebriefQuestionResponse, CreateDebriefQuestionError, ThrowOnError>({
        ...options,
        url: '/debrief_questions'
    });
};

/**
 * Get an Incident Debrief Question
 */
export const getDebriefQuestion = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetDebriefQuestionData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetDebriefQuestionResponse, GetDebriefQuestionError, ThrowOnError>({
        ...options,
        url: '/debrief_questions/{id}'
    });
};

/**
 * Archive an Incident Debrief Question
 */
export const archiveDebriefQuestion = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ArchiveDebriefQuestionData, ThrowOnError>) => {
    return (options?.client ?? client).delete<ArchiveDebriefQuestionResponse, ArchiveDebriefQuestionError, ThrowOnError>({
        ...options,
        url: '/debrief_questions/{id}'
    });
};

/**
 * Update an Incident Debrief Question
 */
export const updateDebriefQuestion = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateDebriefQuestionData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UpdateDebriefQuestionResponse, UpdateDebriefQuestionError, ThrowOnError>({
        ...options,
        url: '/debrief_questions/{id}'
    });
};

/**
 * Request a Document Editor Session
 */
export const requestDocumentEditorSession = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<RequestDocumentEditorSessionData, ThrowOnError>) => {
    return (options?.client ?? client).post<RequestDocumentEditorSessionResponse, RequestDocumentEditorSessionError, ThrowOnError>({
        ...options,
        url: '/documents/session/new'
    });
};

/**
 * Verify a Document Editor Session
 */
export const verifyDocumentEditorSession = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<VerifyDocumentEditorSessionData, ThrowOnError>) => {
    return (options?.client ?? client).post<VerifyDocumentEditorSessionResponse, VerifyDocumentEditorSessionError, ThrowOnError>({
        ...options,
        url: '/documents/session/verify'
    });
};

/**
 * List Environments
 */
export const listEnvironments = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<ListEnvironmentsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListEnvironmentsResponse, ListEnvironmentsError, ThrowOnError>({
        ...options,
        url: '/environments'
    });
};

/**
 * Create an Environment
 */
export const createEnvironment = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateEnvironmentData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateEnvironmentResponse, CreateEnvironmentError, ThrowOnError>({
        ...options,
        url: '/environments'
    });
};

/**
 * Get an Environment
 */
export const getEnvironment = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetEnvironmentData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetEnvironmentResponse, GetEnvironmentError, ThrowOnError>({
        ...options,
        url: '/environments/{id}'
    });
};

/**
 * Archive an Environment
 */
export const archiveEnvironment = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ArchiveEnvironmentData, ThrowOnError>) => {
    return (options?.client ?? client).delete<ArchiveEnvironmentResponse, ArchiveEnvironmentError, ThrowOnError>({
        ...options,
        url: '/environments/{id}'
    });
};

/**
 * Update an Environment
 */
export const updateEnvironment = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateEnvironmentData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UpdateEnvironmentResponse, UpdateEnvironmentError, ThrowOnError>({
        ...options,
        url: '/environments/{id}'
    });
};

/**
 * List Functionalities
 */
export const listFunctionalities = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<ListFunctionalitiesData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListFunctionalitiesResponse, ListFunctionalitiesError, ThrowOnError>({
        ...options,
        url: '/functionalities'
    });
};

/**
 * Create a Functionality
 */
export const createFunctionality = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateFunctionalityData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateFunctionalityResponse, CreateFunctionalityError, ThrowOnError>({
        ...options,
        url: '/functionalities'
    });
};

/**
 * Get a Functionality
 */
export const getFunctionality = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetFunctionalityData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetFunctionalityResponse, GetFunctionalityError, ThrowOnError>({
        ...options,
        url: '/functionalities/{id}'
    });
};

/**
 * Archive a Functionality
 */
export const archiveFunctionality = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ArchiveFunctionalityData, ThrowOnError>) => {
    return (options?.client ?? client).delete<ArchiveFunctionalityResponse, ArchiveFunctionalityError, ThrowOnError>({
        ...options,
        url: '/functionalities/{id}'
    });
};

/**
 * Update a Functionality
 */
export const updateFunctionality = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateFunctionalityData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UpdateFunctionalityResponse, UpdateFunctionalityError, ThrowOnError>({
        ...options,
        url: '/functionalities/{id}'
    });
};

/**
 * Get Incident Debrief
 */
export const getIncidentDebrief = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetIncidentDebriefData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetIncidentDebriefResponse, GetIncidentDebriefError, ThrowOnError>({
        ...options,
        url: '/incident_debriefs/{id}'
    });
};

/**
 * Update Incident Debrief
 */
export const updateIncidentDebrief = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateIncidentDebriefData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UpdateIncidentDebriefResponse, UpdateIncidentDebriefError, ThrowOnError>({
        ...options,
        url: '/incident_debriefs/{id}'
    });
};

/**
 * List Incident Debrief Messages
 */
export const listDebriefMessages = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ListDebriefMessagesData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListDebriefMessagesResponse, ListDebriefMessagesError, ThrowOnError>({
        ...options,
        url: '/incident_debriefs/{id}/messages',
        responseTransformer: ListDebriefMessagesResponseTransformer
    });
};

/**
 * Add an Incident Debrief message
 */
export const addIncidentDebriefUserMessage = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<AddIncidentDebriefUserMessageData, ThrowOnError>) => {
    return (options?.client ?? client).post<AddIncidentDebriefUserMessageResponse, AddIncidentDebriefUserMessageError, ThrowOnError>({
        ...options,
        url: '/incident_debriefs/{id}/messages',
        responseTransformer: AddIncidentDebriefUserMessageResponseTransformer
    });
};

/**
 * List Incident Debrief Suggestions
 */
export const listDebriefSuggestions = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ListDebriefSuggestionsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListDebriefSuggestionsResponse, ListDebriefSuggestionsError, ThrowOnError>({
        ...options,
        url: '/incident_debriefs/{id}/suggestions'
    });
};

/**
 * List Incident Fields
 */
export const listIncidentFields = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<ListIncidentFieldsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListIncidentFieldsResponse, ListIncidentFieldsError, ThrowOnError>({
        ...options,
        url: '/incident_fields'
    });
};

/**
 * Create an Incident Field
 */
export const createIncidentField = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateIncidentFieldData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateIncidentFieldResponse, CreateIncidentFieldError, ThrowOnError>({
        ...options,
        url: '/incident_fields'
    });
};

/**
 * Get an Incident Field
 */
export const getIncidentField = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetIncidentFieldData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetIncidentFieldResponse, GetIncidentFieldError, ThrowOnError>({
        ...options,
        url: '/incident_fields/{id}'
    });
};

/**
 * Archive an Incident Field
 */
export const archiveIncidentField = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ArchiveIncidentFieldData, ThrowOnError>) => {
    return (options?.client ?? client).delete<ArchiveIncidentFieldResponse, ArchiveIncidentFieldError, ThrowOnError>({
        ...options,
        url: '/incident_fields/{id}'
    });
};

/**
 * Update an Incident Field
 */
export const updateIncidentField = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateIncidentFieldData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UpdateIncidentFieldResponse, UpdateIncidentFieldError, ThrowOnError>({
        ...options,
        url: '/incident_fields/{id}'
    });
};

/**
 * Archive an Incident Milestone
 */
export const archiveIncidentMilestone = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ArchiveIncidentMilestoneData, ThrowOnError>) => {
    return (options?.client ?? client).delete<ArchiveIncidentMilestoneResponse, ArchiveIncidentMilestoneError, ThrowOnError>({
        ...options,
        url: '/incident_milestones/{id}'
    });
};

/**
 * Update an Incident Milestone
 */
export const updateIncidentMilestone = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateIncidentMilestoneData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UpdateIncidentMilestoneResponse, UpdateIncidentMilestoneError, ThrowOnError>({
        ...options,
        url: '/incident_milestones/{id}',
        responseTransformer: UpdateIncidentMilestoneResponseTransformer
    });
};

/**
 * List Incident Roles
 */
export const listIncidentRoles = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<ListIncidentRolesData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListIncidentRolesResponse, ListIncidentRolesError, ThrowOnError>({
        ...options,
        url: '/incident_roles'
    });
};

/**
 * Create an Incident Role
 */
export const createIncidentRole = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateIncidentRoleData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateIncidentRoleResponse, CreateIncidentRoleError, ThrowOnError>({
        ...options,
        url: '/incident_roles'
    });
};

/**
 * Get an Incident Role
 */
export const getIncidentRole = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetIncidentRoleData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetIncidentRoleResponse, GetIncidentRoleError, ThrowOnError>({
        ...options,
        url: '/incident_roles/{id}'
    });
};

/**
 * Archive an Incident Role
 */
export const archiveIncidentRole = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ArchiveIncidentRoleData, ThrowOnError>) => {
    return (options?.client ?? client).delete<ArchiveIncidentRoleResponse, ArchiveIncidentRoleError, ThrowOnError>({
        ...options,
        url: '/incident_roles/{id}'
    });
};

/**
 * Update an Incident Role
 */
export const updateIncidentRole = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateIncidentRoleData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UpdateIncidentRoleResponse, UpdateIncidentRoleError, ThrowOnError>({
        ...options,
        url: '/incident_roles/{id}'
    });
};

/**
 * List Severities
 */
export const listIncidentSeverities = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<ListIncidentSeveritiesData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListIncidentSeveritiesResponse, ListIncidentSeveritiesError, ThrowOnError>({
        ...options,
        url: '/incident_severities'
    });
};

/**
 * Create a Severity
 */
export const createIncidentSeverity = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateIncidentSeverityData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateIncidentSeverityResponse, CreateIncidentSeverityError, ThrowOnError>({
        ...options,
        url: '/incident_severities'
    });
};

/**
 * Get a Severity
 */
export const getIncidentSeverity = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetIncidentSeverityData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetIncidentSeverityResponse, GetIncidentSeverityError, ThrowOnError>({
        ...options,
        url: '/incident_severities/{id}'
    });
};

/**
 * Archive a Severity
 */
export const archiveIncidentSeverity = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ArchiveIncidentSeverityData, ThrowOnError>) => {
    return (options?.client ?? client).delete<ArchiveIncidentSeverityResponse, ArchiveIncidentSeverityError, ThrowOnError>({
        ...options,
        url: '/incident_severities/{id}'
    });
};

/**
 * Update a Severity
 */
export const updateIncidentSeverity = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateIncidentSeverityData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UpdateIncidentSeverityResponse, UpdateIncidentSeverityError, ThrowOnError>({
        ...options,
        url: '/incident_severities/{id}'
    });
};

/**
 * List Incident Tags
 */
export const listIncidentTags = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<ListIncidentTagsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListIncidentTagsResponse, ListIncidentTagsError, ThrowOnError>({
        ...options,
        url: '/incident_tags'
    });
};

/**
 * Create an Incident Tag
 */
export const createIncidentTag = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateIncidentTagData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateIncidentTagResponse, CreateIncidentTagError, ThrowOnError>({
        ...options,
        url: '/incident_tags'
    });
};

/**
 * Get an Incident Tag
 */
export const getIncidentTag = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetIncidentTagData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetIncidentTagResponse, GetIncidentTagError, ThrowOnError>({
        ...options,
        url: '/incident_tags/{id}'
    });
};

/**
 * Archive an Incident Tag
 */
export const archiveIncidentTag = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ArchiveIncidentTagData, ThrowOnError>) => {
    return (options?.client ?? client).delete<ArchiveIncidentTagResponse, ArchiveIncidentTagError, ThrowOnError>({
        ...options,
        url: '/incident_tags/{id}'
    });
};

/**
 * Update an Incident Tag
 */
export const updateIncidentTag = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateIncidentTagData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UpdateIncidentTagResponse, UpdateIncidentTagError, ThrowOnError>({
        ...options,
        url: '/incident_tags/{id}'
    });
};

/**
 * List Types
 */
export const listIncidentTypes = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<ListIncidentTypesData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListIncidentTypesResponse, ListIncidentTypesError, ThrowOnError>({
        ...options,
        url: '/incident_types'
    });
};

/**
 * Create an Incident Type
 */
export const createIncidentType = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateIncidentTypeData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateIncidentTypeResponse, CreateIncidentTypeError, ThrowOnError>({
        ...options,
        url: '/incident_types'
    });
};

/**
 * Get a Severity
 */
export const getIncidentType = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetIncidentTypeData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetIncidentTypeResponse, GetIncidentTypeError, ThrowOnError>({
        ...options,
        url: '/incident_types/{id}'
    });
};

/**
 * Archive an Incident Type
 */
export const archiveIncidentType = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ArchiveIncidentTypeData, ThrowOnError>) => {
    return (options?.client ?? client).delete<ArchiveIncidentTypeResponse, ArchiveIncidentTypeError, ThrowOnError>({
        ...options,
        url: '/incident_types/{id}'
    });
};

/**
 * Update an Incident Type
 */
export const updateIncidentType = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateIncidentTypeData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UpdateIncidentTypeResponse, UpdateIncidentTypeError, ThrowOnError>({
        ...options,
        url: '/incident_types/{id}'
    });
};

/**
 * List Incidents
 */
export const listIncidents = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<ListIncidentsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListIncidentsResponse, ListIncidentsError, ThrowOnError>({
        ...options,
        url: '/incidents',
        responseTransformer: ListIncidentsResponseTransformer
    });
};

/**
 * Create an Incident
 */
export const createIncident = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateIncidentData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateIncidentResponse, CreateIncidentError, ThrowOnError>({
        ...options,
        url: '/incidents',
        responseTransformer: CreateIncidentResponseTransformer
    });
};

/**
 * Get Incident
 */
export const getIncident = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetIncidentData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetIncidentResponse, GetIncidentError, ThrowOnError>({
        ...options,
        url: '/incidents/{id}',
        responseTransformer: GetIncidentResponseTransformer
    });
};

/**
 * Archive an Incident
 */
export const archiveIncident = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ArchiveIncidentData, ThrowOnError>) => {
    return (options?.client ?? client).delete<ArchiveIncidentResponse, ArchiveIncidentError, ThrowOnError>({
        ...options,
        url: '/incidents/{id}'
    });
};

/**
 * Update an Incident
 */
export const updateIncident = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateIncidentData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UpdateIncidentResponse, UpdateIncidentError, ThrowOnError>({
        ...options,
        url: '/incidents/{id}',
        responseTransformer: UpdateIncidentResponseTransformer
    });
};

/**
 * Get Debrief For Incident
 */
export const getIncidentUserDebrief = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetIncidentUserDebriefData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetIncidentUserDebriefResponse, GetIncidentUserDebriefError, ThrowOnError>({
        ...options,
        url: '/incidents/{id}/debrief'
    });
};

/**
 * List Milestones for Incident
 */
export const listIncidentMilestones = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ListIncidentMilestonesData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListIncidentMilestonesResponse, ListIncidentMilestonesError, ThrowOnError>({
        ...options,
        url: '/incidents/{id}/milestones',
        responseTransformer: ListIncidentMilestonesResponseTransformer
    });
};

/**
 * Create an Incident Milestone
 */
export const createIncidentMilestone = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateIncidentMilestoneData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateIncidentMilestoneResponse, CreateIncidentMilestoneError, ThrowOnError>({
        ...options,
        url: '/incidents/{id}/milestones',
        responseTransformer: CreateIncidentMilestoneResponseTransformer
    });
};

/**
 * Get a Retrospective for an Incident
 */
export const getRetrospectiveForIncident = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetRetrospectiveForIncidentData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetRetrospectiveForIncidentResponse, GetRetrospectiveForIncidentError, ThrowOnError>({
        ...options,
        url: '/incidents/{id}/retrospective'
    });
};

/**
 * List Integrations
 */
export const listIntegrations = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<ListIntegrationsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListIntegrationsResponse, ListIntegrationsError, ThrowOnError>({
        ...options,
        url: '/integrations'
    });
};

/**
 * Create an Integration
 */
export const createIntegration = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateIntegrationData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateIntegrationResponse, CreateIntegrationError, ThrowOnError>({
        ...options,
        url: '/integrations'
    });
};

/**
 * Get an Integration
 */
export const getIntegration = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetIntegrationData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetIntegrationResponse, GetIntegrationError, ThrowOnError>({
        ...options,
        url: '/integrations/{id}'
    });
};

/**
 * Archive an Integration
 */
export const archiveIntegration = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ArchiveIntegrationData, ThrowOnError>) => {
    return (options?.client ?? client).delete<ArchiveIntegrationResponse, ArchiveIntegrationError, ThrowOnError>({
        ...options,
        url: '/integrations/{id}'
    });
};

/**
 * Update an Integration
 */
export const updateIntegration = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateIntegrationData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UpdateIntegrationResponse, UpdateIntegrationError, ThrowOnError>({
        ...options,
        url: '/integrations/{id}'
    });
};

/**
 * List Meeting Schedules
 */
export const listMeetingSchedules = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<ListMeetingSchedulesData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListMeetingSchedulesResponse, ListMeetingSchedulesError, ThrowOnError>({
        ...options,
        url: '/meeting_schedules',
        responseTransformer: ListMeetingSchedulesResponseTransformer
    });
};

/**
 * Create a Meeting Schedule
 */
export const createMeetingSchedule = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateMeetingScheduleData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateMeetingScheduleResponse, CreateMeetingScheduleError, ThrowOnError>({
        ...options,
        url: '/meeting_schedules',
        responseTransformer: CreateMeetingScheduleResponseTransformer
    });
};

/**
 * Get a Meeting Schedule
 */
export const getMeetingSchedule = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetMeetingScheduleData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetMeetingScheduleResponse, GetMeetingScheduleError, ThrowOnError>({
        ...options,
        url: '/meeting_schedules/{id}',
        responseTransformer: GetMeetingScheduleResponseTransformer
    });
};

/**
 * Archive a Meeting Schedule
 */
export const archiveMeetingSchedule = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ArchiveMeetingScheduleData, ThrowOnError>) => {
    return (options?.client ?? client).delete<ArchiveMeetingScheduleResponse, ArchiveMeetingScheduleError, ThrowOnError>({
        ...options,
        url: '/meeting_schedules/{id}'
    });
};

/**
 * Update a Meeting Schedule
 */
export const updateMeetingSchedule = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateMeetingScheduleData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UpdateMeetingScheduleResponse, UpdateMeetingScheduleError, ThrowOnError>({
        ...options,
        url: '/meeting_schedules/{id}',
        responseTransformer: UpdateMeetingScheduleResponseTransformer
    });
};

/**
 * List Sessions
 */
export const listMeetingSessions = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<ListMeetingSessionsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListMeetingSessionsResponse, ListMeetingSessionsError, ThrowOnError>({
        ...options,
        url: '/meeting_sessions',
        responseTransformer: ListMeetingSessionsResponseTransformer
    });
};

/**
 * Create a Meeting Session
 */
export const createMeetingSession = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateMeetingSessionData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateMeetingSessionResponse, CreateMeetingSessionError, ThrowOnError>({
        ...options,
        url: '/meeting_sessions',
        responseTransformer: CreateMeetingSessionResponseTransformer
    });
};

/**
 * Get a Meeting Session
 */
export const getMeetingSession = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetMeetingSessionData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetMeetingSessionResponse, GetMeetingSessionError, ThrowOnError>({
        ...options,
        url: '/meeting_sessions/{id}',
        responseTransformer: GetMeetingSessionResponseTransformer
    });
};

/**
 * Archive a Meeting Session
 */
export const archiveMeetingSession = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ArchiveMeetingSessionData, ThrowOnError>) => {
    return (options?.client ?? client).delete<ArchiveMeetingSessionResponse, ArchiveMeetingSessionError, ThrowOnError>({
        ...options,
        url: '/meeting_sessions/{id}'
    });
};

/**
 * Update a Meeting Session
 */
export const updateMeetingSession = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateMeetingSessionData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UpdateMeetingSessionResponse, UpdateMeetingSessionError, ThrowOnError>({
        ...options,
        url: '/meeting_sessions/{id}',
        responseTransformer: UpdateMeetingSessionResponseTransformer
    });
};

/**
 * Archive an Oncall Shift Annotation
 */
export const archiveOncallShiftAnnotation = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ArchiveOncallShiftAnnotationData, ThrowOnError>) => {
    return (options?.client ?? client).delete<ArchiveOncallShiftAnnotationResponse, ArchiveOncallShiftAnnotationError, ThrowOnError>({
        ...options,
        url: '/oncall/annotations/{id}'
    });
};

/**
 * Update an Oncall Shift Annotation
 */
export const updateOncallShiftAnnotation = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateOncallShiftAnnotationData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UpdateOncallShiftAnnotationResponse, UpdateOncallShiftAnnotationError, ThrowOnError>({
        ...options,
        url: '/oncall/annotations/{id}',
        responseTransformer: UpdateOncallShiftAnnotationResponseTransformer
    });
};

/**
 * Create an Oncall Handover Template
 */
export const createOncallHandoverTemplate = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateOncallHandoverTemplateData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateOncallHandoverTemplateResponse, CreateOncallHandoverTemplateError, ThrowOnError>({
        ...options,
        url: '/oncall/handover_templates'
    });
};

/**
 * Get handover for a shift
 */
export const getOncallShiftHandoverTemplate = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetOncallShiftHandoverTemplateData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetOncallShiftHandoverTemplateResponse, GetOncallShiftHandoverTemplateError, ThrowOnError>({
        ...options,
        url: '/oncall/handover_templates/{id}'
    });
};

/**
 * Archive an Oncall Handover Template
 */
export const archiveOncallHandoverTemplate = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ArchiveOncallHandoverTemplateData, ThrowOnError>) => {
    return (options?.client ?? client).delete<ArchiveOncallHandoverTemplateResponse, ArchiveOncallHandoverTemplateError, ThrowOnError>({
        ...options,
        url: '/oncall/handover_templates/{id}'
    });
};

/**
 * Update an Oncall Handover Template
 */
export const updateOncallHandoverTemplate = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateOncallHandoverTemplateData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UpdateOncallHandoverTemplateResponse, UpdateOncallHandoverTemplateError, ThrowOnError>({
        ...options,
        url: '/oncall/handover_templates/{id}'
    });
};

/**
 * List Oncall Rosters
 */
export const listOncallRosters = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<ListOncallRostersData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListOncallRostersResponse, ListOncallRostersError, ThrowOnError>({
        ...options,
        url: '/oncall/rosters',
        responseTransformer: ListOncallRostersResponseTransformer
    });
};

/**
 * Get oncall roster
 */
export const getOncallRoster = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetOncallRosterData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetOncallRosterResponse, GetOncallRosterError, ThrowOnError>({
        ...options,
        url: '/oncall/rosters/{id}',
        responseTransformer: GetOncallRosterResponseTransformer
    });
};

/**
 * List Oncall Shifts
 */
export const listOncallShifts = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<ListOncallShiftsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListOncallShiftsResponse, ListOncallShiftsError, ThrowOnError>({
        ...options,
        url: '/oncall/shifts',
        responseTransformer: ListOncallShiftsResponseTransformer
    });
};

/**
 * Get an Oncall Shift
 */
export const getOncallShift = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetOncallShiftData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetOncallShiftResponse, GetOncallShiftError, ThrowOnError>({
        ...options,
        url: '/oncall/shifts/{id}',
        responseTransformer: GetOncallShiftResponseTransformer
    });
};

/**
 * List Alerts For an Oncall Shift
 */
export const listOncallShiftAlerts = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ListOncallShiftAlertsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListOncallShiftAlertsResponse, ListOncallShiftAlertsError, ThrowOnError>({
        ...options,
        url: '/oncall/shifts/{id}/alerts',
        responseTransformer: ListOncallShiftAlertsResponseTransformer
    });
};

/**
 * List Annotations For an Oncall Shift
 */
export const listOncallShiftAnnotations = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ListOncallShiftAnnotationsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListOncallShiftAnnotationsResponse, ListOncallShiftAnnotationsError, ThrowOnError>({
        ...options,
        url: '/oncall/shifts/{id}/annotations',
        responseTransformer: ListOncallShiftAnnotationsResponseTransformer
    });
};

/**
 * Create an Oncall Shift Annotation
 */
export const createOncallShiftAnnotation = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateOncallShiftAnnotationData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateOncallShiftAnnotationResponse, CreateOncallShiftAnnotationError, ThrowOnError>({
        ...options,
        url: '/oncall/shifts/{id}/annotations',
        responseTransformer: CreateOncallShiftAnnotationResponseTransformer
    });
};

/**
 * Get handover for a shift
 */
export const getOncallShiftHandover = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetOncallShiftHandoverData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetOncallShiftHandoverResponse, GetOncallShiftHandoverError, ThrowOnError>({
        ...options,
        url: '/oncall/shifts/{id}/handover',
        responseTransformer: GetOncallShiftHandoverResponseTransformer
    });
};

/**
 * Send a Shift Handover
 */
export const sendOncallShiftHandover = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<SendOncallShiftHandoverData, ThrowOnError>) => {
    return (options?.client ?? client).post<SendOncallShiftHandoverResponse, SendOncallShiftHandoverError, ThrowOnError>({
        ...options,
        url: '/oncall/shifts/{id}/handover',
        responseTransformer: SendOncallShiftHandoverResponseTransformer
    });
};

/**
 * List Incidents For an Oncall Shift
 */
export const listOncallShiftIncidents = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ListOncallShiftIncidentsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListOncallShiftIncidentsResponse, ListOncallShiftIncidentsError, ThrowOnError>({
        ...options,
        url: '/oncall/shifts/{id}/incidents',
        responseTransformer: ListOncallShiftIncidentsResponseTransformer
    });
};

/**
 * Get the following Oncall Shift
 */
export const getNextOncallShift = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetNextOncallShiftData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNextOncallShiftResponse, GetNextOncallShiftError, ThrowOnError>({
        ...options,
        url: '/oncall/shifts/{id}/next',
        responseTransformer: GetNextOncallShiftResponseTransformer
    });
};

/**
 * Get user oncall details
 */
export const getUserOncallDetails = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetUserOncallDetailsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetUserOncallDetailsResponse, GetUserOncallDetailsError, ThrowOnError>({
        ...options,
        url: '/oncall/user',
        responseTransformer: GetUserOncallDetailsResponseTransformer
    });
};

/**
 * Archive a Retrospective Review
 */
export const archiveRetrospectiveReview = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ArchiveRetrospectiveReviewData, ThrowOnError>) => {
    return (options?.client ?? client).delete<ArchiveRetrospectiveReviewResponse, ArchiveRetrospectiveReviewError, ThrowOnError>({
        ...options,
        url: '/retrospective_reviews/{id}'
    });
};

/**
 * Update a Retrospective Review
 */
export const updateRetrospectiveReview = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateRetrospectiveReviewData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UpdateRetrospectiveReviewResponse, UpdateRetrospectiveReviewError, ThrowOnError>({
        ...options,
        url: '/retrospective_reviews/{id}'
    });
};

/**
 * List Retrospectives
 */
export const listRetrospectives = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<ListRetrospectivesData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListRetrospectivesResponse, ListRetrospectivesError, ThrowOnError>({
        ...options,
        url: '/retrospectives'
    });
};

/**
 * Get a Retrospective
 */
export const getRetrospective = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetRetrospectiveData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetRetrospectiveResponse, GetRetrospectiveError, ThrowOnError>({
        ...options,
        url: '/retrospectives/{id}'
    });
};

/**
 * List Discussions For a Retrospective
 */
export const listRetrospectiveDiscussions = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ListRetrospectiveDiscussionsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListRetrospectiveDiscussionsResponse, ListRetrospectiveDiscussionsError, ThrowOnError>({
        ...options,
        url: '/retrospectives/{id}/discussions',
        responseTransformer: ListRetrospectiveDiscussionsResponseTransformer
    });
};

/**
 * Create a Retrospective Discussion
 */
export const createRetrospectiveDiscussion = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateRetrospectiveDiscussionData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateRetrospectiveDiscussionResponse, CreateRetrospectiveDiscussionError, ThrowOnError>({
        ...options,
        url: '/retrospectives/{id}/discussions',
        responseTransformer: CreateRetrospectiveDiscussionResponseTransformer
    });
};

/**
 * Get a Retrospective Discussion
 */
export const getRetrospectiveDiscussion = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetRetrospectiveDiscussionData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetRetrospectiveDiscussionResponse, GetRetrospectiveDiscussionError, ThrowOnError>({
        ...options,
        url: '/retrospectives/{id}/discussions/{discussion_id}',
        responseTransformer: GetRetrospectiveDiscussionResponseTransformer
    });
};

/**
 * Add a Reply to a Retrospective Discussion
 */
export const addRetrospectiveDiscussionReply = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<AddRetrospectiveDiscussionReplyData, ThrowOnError>) => {
    return (options?.client ?? client).post<AddRetrospectiveDiscussionReplyResponse, AddRetrospectiveDiscussionReplyError, ThrowOnError>({
        ...options,
        url: '/retrospectives/{id}/discussions/{discussion_id}',
        responseTransformer: AddRetrospectiveDiscussionReplyResponseTransformer
    });
};

/**
 * Update a Retrospective Discussion
 */
export const updateRetrospectiveDiscussion = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateRetrospectiveDiscussionData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UpdateRetrospectiveDiscussionResponse, UpdateRetrospectiveDiscussionError, ThrowOnError>({
        ...options,
        url: '/retrospectives/{id}/discussions/{discussion_id}',
        responseTransformer: UpdateRetrospectiveDiscussionResponseTransformer
    });
};

/**
 * List Retrospective Reviews
 */
export const listRetrospectiveReviews = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<ListRetrospectiveReviewsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListRetrospectiveReviewsResponse, ListRetrospectiveReviewsError, ThrowOnError>({
        ...options,
        url: '/retrospectives/{id}/reviews'
    });
};

/**
 * Create a Retrospective Review
 */
export const createRetrospectiveReview = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateRetrospectiveReviewData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateRetrospectiveReviewResponse, CreateRetrospectiveReviewError, ThrowOnError>({
        ...options,
        url: '/retrospectives/{id}/reviews'
    });
};

/**
 * Get a component in a System analysis
 */
export const getSystemAnalysisComponent = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetSystemAnalysisComponentData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSystemAnalysisComponentResponse, GetSystemAnalysisComponentError, ThrowOnError>({
        ...options,
        url: '/system_analysis/{analysis_id}/components/{entity_id}'
    });
};

/**
 * Delete a Component from a System Analysis
 */
export const deleteSystemAnalysisComponent = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteSystemAnalysisComponentData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteSystemAnalysisComponentResponse, DeleteSystemAnalysisComponentError, ThrowOnError>({
        ...options,
        url: '/system_analysis/{analysis_id}/components/{entity_id}'
    });
};

/**
 * Update a System Analysis Component
 */
export const updateSystemAnalysisComponent = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateSystemAnalysisComponentData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UpdateSystemAnalysisComponentResponse, UpdateSystemAnalysisComponentError, ThrowOnError>({
        ...options,
        url: '/system_analysis/{analysis_id}/components/{entity_id}'
    });
};

/**
 * Get a relationship in a System analysis
 */
export const getSystemAnalysisRelationship = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetSystemAnalysisRelationshipData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSystemAnalysisRelationshipResponse, GetSystemAnalysisRelationshipError, ThrowOnError>({
        ...options,
        url: '/system_analysis/{analysis_id}/relationships/{entity_id}'
    });
};

/**
 * Delete a Relationship from a System Analysis
 */
export const deleteSystemAnalysisRelationship = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteSystemAnalysisRelationshipData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteSystemAnalysisRelationshipResponse, DeleteSystemAnalysisRelationshipError, ThrowOnError>({
        ...options,
        url: '/system_analysis/{analysis_id}/relationships/{entity_id}'
    });
};

/**
 * Update a System Analysis Relationship
 */
export const updateSystemAnalysisRelationship = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateSystemAnalysisRelationshipData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UpdateSystemAnalysisRelationshipResponse, UpdateSystemAnalysisRelationshipError, ThrowOnError>({
        ...options,
        url: '/system_analysis/{analysis_id}/relationships/{entity_id}'
    });
};

/**
 * Get System Analysis
 */
export const getSystemAnalysis = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetSystemAnalysisData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSystemAnalysisResponse, GetSystemAnalysisError, ThrowOnError>({
        ...options,
        url: '/system_analysis/{id}'
    });
};

/**
 * List components in a System analysis
 */
export const listSystemAnalysisComponents = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ListSystemAnalysisComponentsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListSystemAnalysisComponentsResponse, ListSystemAnalysisComponentsError, ThrowOnError>({
        ...options,
        url: '/system_analysis/{id}/components'
    });
};

/**
 * Add a Component to a System Analysis
 */
export const addSystemAnalysisComponent = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<AddSystemAnalysisComponentData, ThrowOnError>) => {
    return (options?.client ?? client).post<AddSystemAnalysisComponentResponse, AddSystemAnalysisComponentError, ThrowOnError>({
        ...options,
        url: '/system_analysis/{id}/components'
    });
};

/**
 * List relationships in a System analysis
 */
export const listSystemAnalysisRelationships = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ListSystemAnalysisRelationshipsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListSystemAnalysisRelationshipsResponse, ListSystemAnalysisRelationshipsError, ThrowOnError>({
        ...options,
        url: '/system_analysis/{id}/relationships'
    });
};

/**
 * Create a Relationship in a System Analysis
 */
export const createSystemAnalysisRelationship = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateSystemAnalysisRelationshipData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateSystemAnalysisRelationshipResponse, CreateSystemAnalysisRelationshipError, ThrowOnError>({
        ...options,
        url: '/system_analysis/{id}/relationships'
    });
};

/**
 * List System Components
 */
export const listSystemComponents = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<ListSystemComponentsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListSystemComponentsResponse, ListSystemComponentsError, ThrowOnError>({
        ...options,
        url: '/system_components'
    });
};

/**
 * Create a System Component
 */
export const createSystemComponent = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateSystemComponentData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateSystemComponentResponse, CreateSystemComponentError, ThrowOnError>({
        ...options,
        url: '/system_components'
    });
};

/**
 * Get a System Component
 */
export const getSystemComponentConstraint = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetSystemComponentConstraintData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSystemComponentConstraintResponse, GetSystemComponentConstraintError, ThrowOnError>({
        ...options,
        url: '/system_components/{componentId}/constraints/{constraintId}'
    });
};

/**
 * Archive a System Component Constraint
 */
export const archiveSystemComponentConstraint = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ArchiveSystemComponentConstraintData, ThrowOnError>) => {
    return (options?.client ?? client).delete<ArchiveSystemComponentConstraintResponse, ArchiveSystemComponentConstraintError, ThrowOnError>({
        ...options,
        url: '/system_components/{componentId}/constraints/{constraintId}'
    });
};

/**
 * Update a System Component Constraint
 */
export const updateSystemComponentConstraint = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateSystemComponentConstraintData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UpdateSystemComponentConstraintResponse, UpdateSystemComponentConstraintError, ThrowOnError>({
        ...options,
        url: '/system_components/{componentId}/constraints/{constraintId}'
    });
};

/**
 * Get a System Component Control
 */
export const getSystemComponentControl = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetSystemComponentControlData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSystemComponentControlResponse, GetSystemComponentControlError, ThrowOnError>({
        ...options,
        url: '/system_components/{componentId}/controls/{controlId}'
    });
};

/**
 * Archive a System Component Control
 */
export const archiveSystemComponentControl = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ArchiveSystemComponentControlData, ThrowOnError>) => {
    return (options?.client ?? client).delete<ArchiveSystemComponentControlResponse, ArchiveSystemComponentControlError, ThrowOnError>({
        ...options,
        url: '/system_components/{componentId}/controls/{controlId}'
    });
};

/**
 * Update a System Component Control
 */
export const updateSystemComponentControl = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateSystemComponentControlData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UpdateSystemComponentControlResponse, UpdateSystemComponentControlError, ThrowOnError>({
        ...options,
        url: '/system_components/{componentId}/controls/{controlId}'
    });
};

/**
 * Get a System Component Signal
 */
export const getSystemComponentSignal = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetSystemComponentSignalData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSystemComponentSignalResponse, GetSystemComponentSignalError, ThrowOnError>({
        ...options,
        url: '/system_components/{componentId}/signals/{signalId}'
    });
};

/**
 * Archive a System Component Signal
 */
export const archiveSystemComponentSignal = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ArchiveSystemComponentSignalData, ThrowOnError>) => {
    return (options?.client ?? client).delete<ArchiveSystemComponentSignalResponse, ArchiveSystemComponentSignalError, ThrowOnError>({
        ...options,
        url: '/system_components/{componentId}/signals/{signalId}'
    });
};

/**
 * Update a System Component Signal
 */
export const updateSystemComponentSignal = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateSystemComponentSignalData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UpdateSystemComponentSignalResponse, UpdateSystemComponentSignalError, ThrowOnError>({
        ...options,
        url: '/system_components/{componentId}/signals/{signalId}'
    });
};

/**
 * Get a System Component
 */
export const getSystemComponent = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetSystemComponentData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSystemComponentResponse, GetSystemComponentError, ThrowOnError>({
        ...options,
        url: '/system_components/{id}'
    });
};

/**
 * Archive a System Component
 */
export const archiveSystemComponent = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ArchiveSystemComponentData, ThrowOnError>) => {
    return (options?.client ?? client).delete<ArchiveSystemComponentResponse, ArchiveSystemComponentError, ThrowOnError>({
        ...options,
        url: '/system_components/{id}'
    });
};

/**
 * Update a System Component
 */
export const updateSystemComponent = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateSystemComponentData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UpdateSystemComponentResponse, UpdateSystemComponentError, ThrowOnError>({
        ...options,
        url: '/system_components/{id}'
    });
};

/**
 * Create a System Component Constraint
 */
export const createSystemComponentConstraint = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateSystemComponentConstraintData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateSystemComponentConstraintResponse, CreateSystemComponentConstraintError, ThrowOnError>({
        ...options,
        url: '/system_components/{id}/constraints'
    });
};

/**
 * Create a System Component Control
 */
export const createSystemComponentControl = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateSystemComponentControlData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateSystemComponentControlResponse, CreateSystemComponentControlError, ThrowOnError>({
        ...options,
        url: '/system_components/{id}/controls'
    });
};

/**
 * Create a System Component Signal
 */
export const createSystemComponentSignal = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateSystemComponentSignalData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateSystemComponentSignalResponse, CreateSystemComponentSignalError, ThrowOnError>({
        ...options,
        url: '/system_components/{id}/signals'
    });
};

/**
 * List Tasks
 */
export const listTasks = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<ListTasksData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListTasksResponse, ListTasksError, ThrowOnError>({
        ...options,
        url: '/tasks'
    });
};

/**
 * Create a Task
 */
export const createTask = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateTaskData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateTaskResponse, CreateTaskError, ThrowOnError>({
        ...options,
        url: '/tasks'
    });
};

/**
 * Get Task
 */
export const getTask = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetTaskData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTaskResponse, GetTaskError, ThrowOnError>({
        ...options,
        url: '/tasks/{id}'
    });
};

/**
 * Archive a Task
 */
export const archiveTask = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ArchiveTaskData, ThrowOnError>) => {
    return (options?.client ?? client).delete<ArchiveTaskResponse, ArchiveTaskError, ThrowOnError>({
        ...options,
        url: '/tasks/{id}'
    });
};

/**
 * Update a Task
 */
export const updateTask = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateTaskData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UpdateTaskResponse, UpdateTaskError, ThrowOnError>({
        ...options,
        url: '/tasks/{id}'
    });
};

/**
 * List Teams
 */
export const listTeams = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<ListTeamsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListTeamsResponse, ListTeamsError, ThrowOnError>({
        ...options,
        url: '/teams'
    });
};

/**
 * Create a Team
 */
export const createTeam = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateTeamData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateTeamResponse, CreateTeamError, ThrowOnError>({
        ...options,
        url: '/teams'
    });
};

/**
 * Get a Team
 */
export const getTeam = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetTeamData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTeamResponse, GetTeamError, ThrowOnError>({
        ...options,
        url: '/teams/{id}'
    });
};

/**
 * Archive a Team
 */
export const archiveTeam = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ArchiveTeamData, ThrowOnError>) => {
    return (options?.client ?? client).delete<ArchiveTeamResponse, ArchiveTeamError, ThrowOnError>({
        ...options,
        url: '/teams/{id}'
    });
};

/**
 * Update a Team
 */
export const updateTeams = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateTeamsData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UpdateTeamsResponse, UpdateTeamsError, ThrowOnError>({
        ...options,
        url: '/teams/{id}'
    });
};

/**
 * Get the Auth Session for the Current User
 */
export const getCurrentUserSession = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCurrentUserSessionResponse, GetCurrentUserSessionError, ThrowOnError>({
        ...options,
        url: '/user_session',
        responseTransformer: GetCurrentUserSessionResponseTransformer
    });
};

/**
 * List Assignments for the Current User
 */
export const listUserAssignments = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<ListUserAssignmentsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListUserAssignmentsResponse, ListUserAssignmentsError, ThrowOnError>({
        ...options,
        url: '/user_session/assignments',
        responseTransformer: ListUserAssignmentsResponseTransformer
    });
};

/**
 * List Notifications for the Current User
 */
export const listUserNotifications = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<ListUserNotificationsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListUserNotificationsResponse, ListUserNotificationsError, ThrowOnError>({
        ...options,
        url: '/user_session/notifications'
    });
};

/**
 * Delete a Notification for the Current User
 */
export const deleteUserNotification = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteUserNotificationData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteUserNotificationResponse, DeleteUserNotificationError, ThrowOnError>({
        ...options,
        url: '/user_session/notifications/{id}'
    });
};

/**
 * List Users
 */
export const listUsers = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<ListUsersData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListUsersResponse, ListUsersError, ThrowOnError>({
        ...options,
        url: '/users'
    });
};

/**
 * Get a User
 */
export const getUser = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetUserData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetUserResponse, GetUserError, ThrowOnError>({
        ...options,
        url: '/users/{id}'
    });
};