// This file is auto-generated by @hey-api/openapi-ts

export type AddIncidentDebriefUserMessageAttributes = {
    message_content: string;
};

export type AddIncidentDebriefUserMessageRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: AddIncidentDebriefUserMessageAttributes;
};

export type AddIncidentDebriefUserMessageResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: IncidentDebriefMessage;
};

export type AddRetrospectiveDiscussionReplyRequestAttributes = {
    content: unknown;
    parent_reply_id?: string;
};

export type AddRetrospectiveDiscussionReplyRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: AddRetrospectiveDiscussionReplyRequestAttributes;
};

export type AddRetrospectiveDiscussionReplyResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: RetrospectiveDiscussion;
};

export type AddSystemAnalysisComponentAttributes = {
    component_id: string;
    role: string;
};

export type AddSystemAnalysisComponentRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: AddSystemAnalysisComponentAttributes;
};

export type AddSystemAnalysisComponentResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: SystemAnalysisComponent;
};

export type CreateEnvironmentAttributes = {
    name: string;
};

export type CreateEnvironmentRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: CreateEnvironmentAttributes;
};

export type CreateEnvironmentResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Environment;
};

export type CreateFunctionalityAttributes = {
    name: string;
};

export type CreateFunctionalityRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: CreateFunctionalityAttributes;
};

export type CreateFunctionalityResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Functionality;
};

export type CreateIncidentAttributes = {
    summary: string;
    title: string;
};

export type CreateIncidentDebriefQuestionAttributes = {
    content: string;
};

export type CreateIncidentDebriefQuestionRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: CreateIncidentDebriefQuestionAttributes;
};

export type CreateIncidentDebriefQuestionResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: IncidentDebriefQuestion;
};

export type CreateIncidentFieldAttributes = {
    incident_type?: string;
    name: string;
    options: Array<CreateIncidentFieldOptionAttributes>;
    required: boolean;
};

export type CreateIncidentFieldOptionAttributes = {
    field_option_type: 'custom' | 'derived';
    value: string;
};

export type field_option_type = 'custom' | 'derived';

export const field_option_type = {
    CUSTOM: 'custom',
    DERIVED: 'derived'
} as const;

export type CreateIncidentFieldRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: CreateIncidentFieldAttributes;
};

export type CreateIncidentFieldResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: IncidentField;
};

export type CreateIncidentMilestoneAttributes = {
    timestamp: Date;
    title: string;
    type: string;
};

export type CreateIncidentMilestoneRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: CreateIncidentMilestoneAttributes;
};

export type CreateIncidentMilestoneResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: IncidentMilestone;
};

export type CreateIncidentRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: CreateIncidentAttributes;
};

export type CreateIncidentResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Incident;
};

export type CreateIncidentRoleAttributes = {
    name: string;
    required: boolean;
};

export type CreateIncidentRoleRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: CreateIncidentRoleAttributes;
};

export type CreateIncidentRoleResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: IncidentRole;
};

export type CreateIncidentSeverityAttributes = {
    title: string;
};

export type CreateIncidentSeverityRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: CreateIncidentSeverityAttributes;
};

export type CreateIncidentSeverityResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: IncidentSeverity;
};

export type CreateIncidentTagAttributes = {
    value: string;
};

export type CreateIncidentTagRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: CreateIncidentTagAttributes;
};

export type CreateIncidentTagResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: IncidentTag;
};

export type CreateIncidentTypeAttributes = {
    name: string;
};

export type CreateIncidentTypeRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: CreateIncidentTypeAttributes;
};

export type CreateIncidentTypeResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: IncidentType;
};

export type CreateIntegrationRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
};

export type CreateIntegrationResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Integration;
};

export type CreateMeetingScheduleAttributes = {
    attendees: MeetingAttendees;
    description?: string;
    duration_minutes: number;
    name: string;
    num_repetitions?: number;
    repeat_monthly_on?: 'same_day' | 'same_weekday';
    repeats: 'daily' | 'weekly' | 'monthly';
    repetition_step: number;
    session_title: string;
    starts_at: DateTimeAnchor;
    until_date?: Date;
};

export type repeat_monthly_on = 'same_day' | 'same_weekday';

export const repeat_monthly_on = {
    SAME_DAY: 'same_day',
    SAME_WEEKDAY: 'same_weekday'
} as const;

export type repeats = 'daily' | 'weekly' | 'monthly';

export const repeats = {
    DAILY: 'daily',
    WEEKLY: 'weekly',
    MONTHLY: 'monthly'
} as const;

export type CreateMeetingScheduleRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: CreateMeetingScheduleAttributes;
};

export type CreateMeetingScheduleResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: MeetingSchedule;
};

export type CreateMeetingSessionAttributes = {
    attendees: MeetingAttendees;
    description?: string;
    document_template_id?: string;
    duration_minutes: number;
    starts_at: DateTimeAnchor;
    title: string;
};

export type CreateMeetingSessionRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: CreateMeetingSessionAttributes;
};

export type CreateMeetingSessionResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: MeetingSession;
};

export type CreateOncallShiftAnnotationRequestAttributes = {
    event_id: string;
    event_kind: 'incident' | 'alert' | 'toil' | 'ping';
    minutes_occupied: number;
    notes: string;
    occurred_at: Date;
    pinned: boolean;
    title: string;
};

export type event_kind = 'incident' | 'alert' | 'toil' | 'ping';

export const event_kind = {
    INCIDENT: 'incident',
    ALERT: 'alert',
    TOIL: 'toil',
    PING: 'ping'
} as const;

export type CreateOncallShiftAnnotationRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: CreateOncallShiftAnnotationRequestAttributes;
};

export type CreateOncallShiftAnnotationResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: OncallShiftAnnotation;
};

export type CreateOncallShiftHandoverTemplateRequestAttributes = {
    sections: Array<OncallShiftHandoverTemplateSection>;
};

export type CreateOncallShiftHandoverTemplateRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: CreateOncallShiftHandoverTemplateRequestAttributes;
};

export type CreateOncallShiftHandoverTemplateResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: OncallShiftHandoverTemplate;
};

export type CreateRetrospectiveDiscussionAttributes = {
    content: unknown;
};

export type CreateRetrospectiveDiscussionRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: CreateRetrospectiveDiscussionAttributes;
};

export type CreateRetrospectiveDiscussionResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: RetrospectiveDiscussion;
};

export type CreateRetrospectiveReviewRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: RetrospectiveReviewAttributes;
};

export type CreateRetrospectiveReviewResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: RetrospectiveReview;
};

export type CreateSystemAnalysisRelationshipAttributes = {
    [key: string]: unknown;
};

export type CreateSystemAnalysisRelationshipRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: CreateSystemAnalysisRelationshipAttributes;
};

export type CreateSystemAnalysisRelationshipResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: SystemAnalysisRelationship;
};

export type CreateSystemComponentAttributes = {
    name: string;
};

export type CreateSystemComponentRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: CreateSystemComponentAttributes;
};

export type CreateSystemComponentResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: SystemComponent;
};

export type CreateTaskAttributes = {
    title: string;
};

export type CreateTaskRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: CreateTaskAttributes;
};

export type CreateTaskResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Task;
};

export type CreateTeamAttributes = {
    name: string;
};

export type CreateTeamRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: CreateTeamAttributes;
};

export type CreateTeamResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Team;
};

export type DateTimeAnchor = {
    date: Date;
    time: string;
    timezone: string;
};

export type DocumentEditorSession = {
    connectionUrl: string;
    documentName: string;
    token: string;
};

export type DocumentEditorSessionAuth = {
    readOnly: boolean;
    user: DocumentEditorSessionUser;
};

export type DocumentEditorSessionUser = {
    id: string;
    username: string;
};

export type Environment = {
    attributes: EnvironmentAttributes;
    id: string;
};

export type EnvironmentAttributes = {
    archived: boolean;
    name: string;
};

export type ErrorDetail = {
    /**
     * Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id'
     */
    location?: string;
    /**
     * Error message text
     */
    message?: string;
    /**
     * The value at the given location
     */
    value?: unknown;
};

export type ErrorModel = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * A human-readable explanation specific to this occurrence of the problem.
     */
    detail?: string;
    /**
     * Optional list of individual error details
     */
    errors?: Array<ErrorDetail>;
    /**
     * A URI reference that identifies the specific occurrence of the problem.
     */
    instance?: string;
    /**
     * HTTP status code
     */
    status?: number;
    /**
     * A short, human-readable summary of the problem type. This value should not change between occurrences of the error.
     */
    title?: string;
    /**
     * A URI reference to human-readable documentation for the error.
     */
    type?: string;
};

export type ExternalTicket = {
    provider: string;
};

export type Functionality = {
    attributes: FunctionalityAttributes;
    id: string;
};

export type FunctionalityAttributes = {
    name: string;
};

export type GetEnvironmentResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Environment;
};

export type GetFunctionalityResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Functionality;
};

export type GetIncidentDebriefQuestionResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: IncidentDebriefQuestion;
};

export type GetIncidentDebriefResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: IncidentDebrief;
};

export type GetIncidentFieldResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: IncidentField;
};

export type GetIncidentResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Incident;
};

export type GetIncidentRoleResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: IncidentRole;
};

export type GetIncidentSeverityResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: IncidentSeverity;
};

export type GetIncidentTagResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: IncidentTag;
};

export type GetIncidentTypeResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: IncidentType;
};

export type GetIncidentUserDebriefResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: IncidentDebrief;
};

export type GetIntegrationResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Integration;
};

export type GetMeetingScheduleResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: MeetingSchedule;
};

export type GetMeetingSessionResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: MeetingSession;
};

export type GetNextOncallShiftResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: OncallShift;
};

export type GetOncallRosterResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: OncallRoster;
};

export type GetOncallShiftHandoverResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: OncallShiftHandover;
};

export type GetOncallShiftHandoverTemplateResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: OncallShiftHandoverTemplate;
};

export type GetOncallShiftResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: OncallShift;
};

export type GetRetrospectiveDiscussionResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: RetrospectiveDiscussion;
};

export type GetRetrospectiveForIncidentResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Retrospective;
};

export type GetRetrospectiveResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Retrospective;
};

export type GetSystemAnalysisComponentResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: SystemAnalysisComponent;
};

export type GetSystemAnalysisRelationshipResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: SystemAnalysisRelationship;
};

export type GetSystemAnalysisResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: SystemAnalysis;
};

export type GetSystemComponentResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: SystemComponent;
};

export type GetTaskResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Task;
};

export type GetTeamResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Team;
};

export type GetUserOncallDetailsResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: UserOncallDetails;
};

export type GetUserResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: User;
};

export type GetUserSessionResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: UserSession;
};

export type Incident = {
    attributes: IncidentAttributes;
    id: string;
};

export type IncidentAttributes = {
    chat_channel: IncidentChatChannel;
    closed_at: Date;
    current_status: 'started' | 'mitigated' | 'resolved' | 'closed';
    environments: Array<Environment>;
    linked_incidents: Array<IncidentLink>;
    opened_at: Date;
    private: boolean;
    roles: Array<IncidentRoleAssignment>;
    severity: IncidentSeverity;
    slug: string;
    summary: string;
    system_analysis_id: string;
    tags: Array<IncidentTag>;
    tasks: Array<Task>;
    teams: Array<IncidentTeamAssignment>;
    ticket: ExternalTicket;
    title: string;
    type: IncidentType;
};

export type current_status = 'started' | 'mitigated' | 'resolved' | 'closed';

export const current_status = {
    STARTED: 'started',
    MITIGATED: 'mitigated',
    RESOLVED: 'resolved',
    CLOSED: 'closed'
} as const;

export type IncidentChatChannel = {
    id: string;
    private: boolean;
    provider: 'slack' | 'ms_teams';
    url: string;
};

export type provider = 'slack' | 'ms_teams';

export const provider = {
    SLACK: 'slack',
    MS_TEAMS: 'ms_teams'
} as const;

export type IncidentDebrief = {
    attributes: IncidentDebriefAttributes;
    id: string;
};

export type IncidentDebriefAttributes = {
    incidentId: string;
    required: boolean;
    started: boolean;
    userId: string;
};

export type IncidentDebriefMessage = {
    attributes: IncidentDebriefMessageAttributes;
    id: string;
};

export type IncidentDebriefMessageAttributes = {
    body: string;
    createdAt: Date;
    type: 'user' | 'assistant' | 'question';
};

export type type = 'user' | 'assistant' | 'question';

export const type = {
    USER: 'user',
    ASSISTANT: 'assistant',
    QUESTION: 'question'
} as const;

export type IncidentDebriefQuestion = {
    attributes: IncidentDebriefQuestionAttributes;
    id: string;
};

export type IncidentDebriefQuestionAttributes = {
    content: string;
};

export type IncidentDebriefSuggestion = {
    attributes: IncidentDebriefSuggestionAttributes;
    id: string;
};

export type IncidentDebriefSuggestionAttributes = {
    content: string;
    ignored: boolean;
};

export type IncidentField = {
    attributes: IncidentFieldAttributes;
    id: string;
};

export type IncidentFieldAttributes = {
    archived: boolean;
    description: string;
    incident_type: IncidentType;
    name: string;
    options: Array<IncidentFieldOption>;
    required: boolean;
};

export type IncidentFieldOption = {
    attributes: IncidentFieldOptionAttributes;
    id: string;
};

export type IncidentFieldOptionAttributes = {
    archived: boolean;
    option_type: 'custom' | 'derived';
    value: string;
};

export type option_type = 'custom' | 'derived';

export const option_type = {
    CUSTOM: 'custom',
    DERIVED: 'derived'
} as const;

export type IncidentLink = {
    incident_id: string;
    incident_summary: string;
    incident_title: string;
    link_type: 'duplicate_of' | 'parent' | 'sibling' | 'child';
};

export type link_type = 'duplicate_of' | 'parent' | 'sibling' | 'child';

export const link_type = {
    DUPLICATE_OF: 'duplicate_of',
    PARENT: 'parent',
    SIBLING: 'sibling',
    CHILD: 'child'
} as const;

export type IncidentMilestone = {
    attributes: IncidentMilestoneAttributes;
    id: string;
};

export type IncidentMilestoneAttributes = {
    timestamp: Date;
    title: string;
    type: 'default' | 'incident';
};

export type type2 = 'default' | 'incident';

export const type2 = {
    DEFAULT: 'default',
    INCIDENT: 'incident'
} as const;

export type IncidentRole = {
    attributes: IncidentRoleAttributes;
    id: string;
};

export type IncidentRoleAssignment = {
    active: boolean;
    ended_at: Date;
    role: IncidentRole;
    started_at: Date;
    user: User;
};

export type IncidentRoleAttributes = {
    archived: boolean;
    description: string;
    name: string;
    required: boolean;
};

export type IncidentSeverity = {
    attributes: IncidentSeverityAttributes;
    id: string;
};

export type IncidentSeverityAttributes = {
    archived: boolean;
    description: string;
    name: string;
};

export type IncidentTag = {
    attributes: IncidentTagAttributes;
    id: string;
};

export type IncidentTagAttributes = {
    archived: boolean;
    description: string;
    value: string;
};

export type IncidentTeamAssignment = {
    active: boolean;
    ended_at: Date;
    started_at: Date;
    team: Team;
};

export type IncidentType = {
    attributes: IncidentTypeAttributes;
    id: string;
};

export type IncidentTypeAttributes = {
    archived: boolean;
    description: string;
    name: string;
};

export type Integration = {
    [key: string]: unknown;
};

export type ListEnvironmentsResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<Environment>;
    pagination: ResponsePagination;
};

export type ListFunctionalitiesResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<Functionality>;
    pagination: ResponsePagination;
};

export type ListIncidentDebriefMessagesResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<IncidentDebriefMessage>;
};

export type ListIncidentDebriefQuestionsResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<IncidentDebriefQuestion>;
    pagination: ResponsePagination;
};

export type ListIncidentDebriefSuggestionsResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<IncidentDebriefSuggestion>;
};

export type ListIncidentFieldsResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<IncidentField>;
    pagination: ResponsePagination;
};

export type ListIncidentMilestonesResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<IncidentMilestone>;
    pagination: ResponsePagination;
};

export type ListIncidentRolesResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<IncidentRole>;
    pagination: ResponsePagination;
};

export type ListIncidentSeveritiesResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<IncidentSeverity>;
    pagination: ResponsePagination;
};

export type ListIncidentsResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<Incident>;
    pagination: ResponsePagination;
};

export type ListIncidentTagsResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<IncidentTag>;
    pagination: ResponsePagination;
};

export type ListIncidentTypesResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<IncidentType>;
    pagination: ResponsePagination;
};

export type ListIntegrationsResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<Integration>;
    pagination: ResponsePagination;
};

export type ListMeetingSchedulesResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<MeetingSchedule>;
    pagination: ResponsePagination;
};

export type ListMeetingSessionsResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<MeetingSession>;
    pagination: ResponsePagination;
};

export type ListNotificationsResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<UserNotification>;
    pagination: ResponsePagination;
};

export type ListOncallRostersResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<OncallRoster>;
    pagination: ResponsePagination;
};

export type ListOncallShiftAlertsResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<OncallAlert>;
    pagination: ResponsePagination;
};

export type ListOncallShiftAnnotationsResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<OncallShiftAnnotation>;
    pagination: ResponsePagination;
};

export type ListOncallShiftIncidentsResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<Incident>;
    pagination: ResponsePagination;
};

export type ListOncallShiftsResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<OncallShift>;
    pagination: ResponsePagination;
};

export type ListRetrospectiveDiscussionsResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<RetrospectiveDiscussion>;
    pagination: ResponsePagination;
};

export type ListRetrospectiveReviewsResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<RetrospectiveReview>;
    pagination: ResponsePagination;
};

export type ListRetrospectivesResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<Retrospective>;
    pagination: ResponsePagination;
};

export type ListSystemAnalysisComponentsResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<SystemAnalysisComponent>;
    pagination: ResponsePagination;
};

export type ListSystemAnalysisRelationshipsResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<SystemAnalysisRelationship>;
    pagination: ResponsePagination;
};

export type ListSystemComponentsResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<SystemComponent>;
    pagination: ResponsePagination;
};

export type ListTasksResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<Task>;
    pagination: ResponsePagination;
};

export type ListTeamsResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<Team>;
    pagination: ResponsePagination;
};

export type ListUserAssignmentsResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<UserAssignment>;
    pagination: ResponsePagination;
};

export type ListUsersResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Array<User>;
    pagination: ResponsePagination;
};

export type MeetingAttendees = {
    private: boolean;
    teams: Array<(string)>;
    users: Array<(string)>;
};

export type MeetingSchedule = {
    attributes: MeetingScheduleAttributes;
    id: string;
};

export type MeetingScheduleAttributes = {
    attendees: MeetingAttendees;
    document_template_id: string;
    host_team_id: string;
    name: string;
    session_title: string;
    timing: MeetingScheduleTiming;
};

export type MeetingScheduleTiming = {
    duration_minutes: number;
    indefinite: boolean;
    repeat: 'daily' | 'weekly' | 'monthly';
    repeat_monthly_on: 'same_day' | 'same_weekday';
    repeat_step: number;
    starts_at: Date;
    until_date?: string;
    until_num_repetitions?: number;
};

export type repeat = 'daily' | 'weekly' | 'monthly';

export const repeat = {
    DAILY: 'daily',
    WEEKLY: 'weekly',
    MONTHLY: 'monthly'
} as const;

export type MeetingSession = {
    attributes: MeetingSessionAttributes;
    id: string;
};

export type MeetingSessionAttributes = {
    attendees: MeetingAttendees;
    document_name: string;
    host_team_id: string;
    meeting_schedule_id: string;
    starts_at: Date;
    title: string;
};

export type OncallAlert = {
    attributes: OncallAlertAttributes;
    id: string;
};

export type OncallAlertAttributes = {
    occurred_at: Date;
    title: string;
};

export type OncallRoster = {
    attributes: OncallRosterAttributes;
    id: string;
};

export type OncallRosterAttributes = {
    handover_template_id: string;
    name: string;
    schedules: Array<OncallSchedule>;
    slug: string;
};

export type OncallSchedule = {
    attributes: OncallScheduleAttributes;
    id: string;
};

export type OncallScheduleAttributes = {
    description: string;
    participants: Array<OncallScheduleParticipant>;
    roster: OncallRoster;
    timezone: string;
};

export type OncallScheduleParticipant = {
    order: number;
    user: User;
};

export type OncallShift = {
    attributes: OncallShiftAttributes;
    id: string;
};

export type OncallShiftAnnotation = {
    attributes: OncallShiftAnnotationAttributes;
    id: string;
};

export type OncallShiftAnnotationAttributes = {
    event_id: string;
    kind: 'incident' | 'alert' | 'toil' | 'ping';
    minutes_occupied: number;
    notes: string;
    occurred_at: Date;
    pinned: boolean;
    shift_id: string;
    title: string;
};

export type kind = 'incident' | 'alert' | 'toil' | 'ping';

export const kind = {
    INCIDENT: 'incident',
    ALERT: 'alert',
    TOIL: 'toil',
    PING: 'ping'
} as const;

export type OncallShiftAttributes = {
    covers: Array<OncallShiftCover>;
    end_at: Date;
    role: string;
    roster: OncallRoster;
    start_at: Date;
    user: User;
};

export type OncallShiftCover = {
    attributes: OncallShiftCoverAttributes;
    id: string;
};

export type OncallShiftCoverAttributes = {
    end_at: Date;
    start_at: Date;
    user: User;
};

export type OncallShiftHandover = {
    attributes: OncallShiftHandoverAttributes;
    id: string;
};

export type OncallShiftHandoverAttributes = {
    content: Array<OncallShiftHandoverSection>;
    created_at: Date;
    sent_at: Date;
    shift_id: string;
    updated_at: Date;
};

export type OncallShiftHandoverSection = {
    header: string;
    jsonContent?: string;
    kind: 'regular' | 'annotations' | 'incidents';
};

export type kind2 = 'regular' | 'annotations' | 'incidents';

export const kind2 = {
    REGULAR: 'regular',
    ANNOTATIONS: 'annotations',
    INCIDENTS: 'incidents'
} as const;

export type OncallShiftHandoverTemplate = {
    attributes: OncallShiftHandoverTemplateAttributes;
    id: string;
};

export type OncallShiftHandoverTemplateAttributes = {
    sections: Array<OncallShiftHandoverTemplateSection>;
};

export type OncallShiftHandoverTemplateSection = {
    header: string;
    list: boolean;
    type: 'regular' | 'annotations' | 'incidents';
};

export type type3 = 'regular' | 'annotations' | 'incidents';

export const type3 = {
    REGULAR: 'regular',
    ANNOTATIONS: 'annotations',
    INCIDENTS: 'incidents'
} as const;

export type RequestDocumentEditorSessionAttributes = {
    documentName: string;
};

export type RequestDocumentEditorSessionRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: RequestDocumentEditorSessionAttributes;
};

export type RequestDocumentEditorSessionResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: DocumentEditorSession;
};

export type ResponsePagination = {
    next?: string;
    previous?: string;
    total: number;
};

export type Retrospective = {
    attributes: RetrospectiveAttributes;
    id: string;
};

export type RetrospectiveAttributes = {
    sections: Array<RetrospectiveSection>;
    state: 'draft' | 'in_review' | 'meeting_scheduled' | 'completed';
    type: 'quick' | 'full';
};

export type state = 'draft' | 'in_review' | 'meeting_scheduled' | 'completed';

export const state = {
    DRAFT: 'draft',
    IN_REVIEW: 'in_review',
    MEETING_SCHEDULED: 'meeting_scheduled',
    COMPLETED: 'completed'
} as const;

export type type4 = 'quick' | 'full';

export const type4 = {
    QUICK: 'quick',
    FULL: 'full'
} as const;

export type RetrospectiveDiscussion = {
    attributes: RetrospectiveDiscussionAttributes;
    id: string;
};

export type RetrospectiveDiscussionAttributes = {
    annotationId?: string;
    content: string;
    replies: Array<RetrospectiveDiscussionReply>;
    resolved: boolean;
};

export type RetrospectiveDiscussionReply = {
    attributes: RetrospectiveDiscussionReplyAttributes;
    id: string;
};

export type RetrospectiveDiscussionReplyAttributes = {
    content: string;
    replies: Array<RetrospectiveDiscussionReply>;
};

export type RetrospectiveReview = {
    attributes: RetrospectiveReviewAttributes;
    id: string;
};

export type RetrospectiveReviewAttributes = {
    [key: string]: unknown;
};

export type RetrospectiveSection = {
    description: string;
    field: string;
    title: string;
    type: 'field' | 'timeline';
};

export type type5 = 'field' | 'timeline';

export const type5 = {
    FIELD: 'field',
    TIMELINE: 'timeline'
} as const;

export type SendOncallShiftHandoverAttributes = {
    content: Array<OncallShiftHandoverSection>;
};

export type SendOncallShiftHandoverRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: SendOncallShiftHandoverAttributes;
};

export type SendOncallShiftHandoverResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: OncallShiftHandover;
};

export type SystemAnalysis = {
    attributes: SystemAnalysisAttributes;
    id: string;
};

export type SystemAnalysisAttributes = {
    components: Array<SystemAnalysisComponent>;
    relationships: Array<SystemAnalysisRelationship>;
};

export type SystemAnalysisComponent = {
    attributes: SystemAnalysisComponentAttributes;
    id: string;
};

export type SystemAnalysisComponentAttributes = {
    component: SystemComponent;
    position: SystemAnalysisDiagramPosition;
    role: string;
};

export type SystemAnalysisDiagramPosition = {
    x: number;
    y: number;
    z?: number;
};

export type SystemAnalysisRelationship = {
    attributes: SystemAnalysisRelationshipAttributes;
    id: string;
};

export type SystemAnalysisRelationshipAttributes = {
    control_actions: Array<SystemAnalysisRelationshipControlAction>;
    description: string;
    feedback_signals: Array<SystemAnalysisRelationshipFeedbackSignal>;
    source_id: string;
    target_id: string;
};

export type SystemAnalysisRelationshipControlAction = {
    attributes: SystemAnalysisRelationshipControlActionAttributes;
    id: string;
};

export type SystemAnalysisRelationshipControlActionAttributes = {
    control_id: string;
    description: string;
};

export type SystemAnalysisRelationshipFeedbackSignal = {
    attributes: SystemAnalysisRelationshipFeedbackSignalAttributes;
    id: string;
};

export type SystemAnalysisRelationshipFeedbackSignalAttributes = {
    description: string;
    signal_id: string;
};

export type SystemComponent = {
    attributes: SystemComponentAttributes;
    id: string;
};

export type SystemComponentAttributes = {
    constraints: Array<SystemComponentConstraint>;
    controls: Array<SystemComponentControl>;
    description: string;
    kind: string;
    name: string;
    properties: {
        [key: string]: unknown;
    };
    signals: Array<SystemComponentSignal>;
};

export type SystemComponentConstraint = {
    attributes: SystemComponentConstraintAttributes;
    id: string;
};

export type SystemComponentConstraintAttributes = {
    description: string;
    label: string;
};

export type SystemComponentControl = {
    attributes: SystemComponentControlAttributes;
    id: string;
};

export type SystemComponentControlAttributes = {
    description: string;
    label: string;
};

export type SystemComponentSignal = {
    attributes: SystemComponentSignalAttributes;
    id: string;
};

export type SystemComponentSignalAttributes = {
    description: string;
    label: string;
};

export type Task = {
    attributes: TaskAttributes;
    id: string;
};

export type TaskAttributes = {
    description: string;
    name: string;
};

export type Team = {
    attributes: TeamAttributes;
    id: string;
};

export type TeamAttributes = {
    name: string;
    slug: string;
};

export type UpdateEnvironmentAttributes = {
    archived?: boolean;
    name?: string;
};

export type UpdateEnvironmentRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateEnvironmentAttributes;
};

export type UpdateEnvironmentResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Environment;
};

export type UpdateFunctionalityAttributes = {
    name: (string) | null;
};

export type UpdateFunctionalityRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateFunctionalityAttributes;
};

export type UpdateFunctionalityResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Functionality;
};

export type UpdateIncidentAttributes = {
    environments?: Array<(string)>;
    private?: boolean;
    severity_id?: string;
    summary?: string;
    title?: string;
};

export type UpdateIncidentDebriefAttributes = {
    status: 'started' | 'completed';
};

export type status = 'started' | 'completed';

export const status = {
    STARTED: 'started',
    COMPLETED: 'completed'
} as const;

export type UpdateIncidentDebriefQuestionAttributes = {
    content?: string;
};

export type UpdateIncidentDebriefQuestionRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateIncidentDebriefQuestionAttributes;
};

export type UpdateIncidentDebriefQuestionResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: IncidentDebriefQuestion;
};

export type UpdateIncidentDebriefRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateIncidentDebriefAttributes;
};

export type UpdateIncidentDebriefResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: IncidentDebrief;
};

export type UpdateIncidentFieldAttributes = {
    archived?: boolean;
    incident_type?: string;
    name?: string;
    options?: Array<UpdateIncidentFieldOptionAttributes>;
    required?: boolean;
};

export type UpdateIncidentFieldOptionAttributes = {
    archived: boolean;
    field_option_type: 'custom' | 'derived';
    id?: string;
    value: string;
};

export type UpdateIncidentFieldRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateIncidentFieldAttributes;
};

export type UpdateIncidentFieldResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: IncidentField;
};

export type UpdateIncidentMilestoneAttributes = {
    timestamp: Date;
    title: string;
    type: string;
};

export type UpdateIncidentMilestoneRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateIncidentMilestoneAttributes;
};

export type UpdateIncidentMilestoneResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: IncidentMilestone;
};

export type UpdateIncidentRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateIncidentAttributes;
};

export type UpdateIncidentResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Incident;
};

export type UpdateIncidentRoleAttributes = {
    archived?: boolean;
    description?: string;
    name?: string;
    required?: boolean;
};

export type UpdateIncidentRoleRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateIncidentRoleAttributes;
};

export type UpdateIncidentRoleResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: IncidentRole;
};

export type UpdateIncidentSeverityAttributes = {
    archived?: boolean;
    name?: string;
};

export type UpdateIncidentSeverityRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateIncidentSeverityAttributes;
};

export type UpdateIncidentSeverityResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: IncidentSeverity;
};

export type UpdateIncidentTagAttributes = {
    archived?: boolean;
    value?: string;
};

export type UpdateIncidentTagRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateIncidentTagAttributes;
};

export type UpdateIncidentTagResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: IncidentTag;
};

export type UpdateIncidentTypeAttributes = {
    archived?: boolean;
    name?: string;
};

export type UpdateIncidentTypeRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateIncidentTypeAttributes;
};

export type UpdateIncidentTypeResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: IncidentType;
};

export type UpdateIntegrationAttributes = {
    [key: string]: unknown;
};

export type UpdateIntegrationRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateIntegrationAttributes;
};

export type UpdateIntegrationResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Integration;
};

export type UpdateMeetingScheduleAttributes = {
    [key: string]: unknown;
};

export type UpdateMeetingScheduleRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateMeetingScheduleAttributes;
};

export type UpdateMeetingScheduleResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: MeetingSchedule;
};

export type UpdateMeetingSessionAttributes = {
    [key: string]: unknown;
};

export type UpdateMeetingSessionRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateMeetingSessionAttributes;
};

export type UpdateMeetingSessionResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: MeetingSession;
};

export type UpdateOncallShiftAnnotationRequestAttributes = {
    minutes_occupied?: number;
    notes?: string;
    pinned?: boolean;
};

export type UpdateOncallShiftAnnotationRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateOncallShiftAnnotationRequestAttributes;
};

export type UpdateOncallShiftAnnotationResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: OncallShiftAnnotation;
};

export type UpdateOncallShiftHandoverTemplateRequestAttributes = {
    sections: Array<OncallShiftHandoverTemplateSection>;
};

export type UpdateOncallShiftHandoverTemplateRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateOncallShiftHandoverTemplateRequestAttributes;
};

export type UpdateOncallShiftHandoverTemplateResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: OncallShiftHandoverTemplate;
};

export type UpdateRetrospectiveDiscussionAttributes = {
    resolved?: boolean;
};

export type UpdateRetrospectiveDiscussionRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateRetrospectiveDiscussionAttributes;
};

export type UpdateRetrospectiveDiscussionResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: RetrospectiveDiscussion;
};

export type UpdateRetrospectiveReviewRequestAttributes = {
    [key: string]: unknown;
};

export type UpdateRetrospectiveReviewRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateRetrospectiveReviewRequestAttributes;
};

export type UpdateRetrospectiveReviewResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: RetrospectiveReview;
};

export type UpdateSystemAnalysisComponentAttributes = {
    role?: string;
};

export type UpdateSystemAnalysisComponentRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateSystemAnalysisComponentAttributes;
};

export type UpdateSystemAnalysisComponentResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: SystemAnalysisComponent;
};

export type UpdateSystemAnalysisRelationshipAttributes = {
    [key: string]: unknown;
};

export type UpdateSystemAnalysisRelationshipRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateSystemAnalysisRelationshipAttributes;
};

export type UpdateSystemAnalysisRelationshipResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: SystemAnalysisRelationship;
};

export type UpdateSystemComponentAttributes = {
    [key: string]: unknown;
};

export type UpdateSystemComponentRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateSystemComponentAttributes;
};

export type UpdateSystemComponentResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: SystemComponent;
};

export type UpdateTaskAttributes = {
    name?: (string) | null;
};

export type UpdateTaskRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateTaskAttributes;
};

export type UpdateTaskResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Task;
};

export type UpdateTeamAttributes = {
    name: (string) | null;
};

export type UpdateTeamRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: UpdateTeamAttributes;
};

export type UpdateTeamResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: Team;
};

export type User = {
    attributes: UserAttributes;
    id: string;
};

export type UserAssignment = {
    deadline: Date;
    item_id: string;
    item_type: string;
    role: string;
    title: string;
};

export type UserAttributes = {
    email: string;
    name: string;
};

export type UserNotification = {
    attributes: UserNotificationAttributes;
    id: string;
};

export type UserNotificationAttributes = {
    text: string;
};

export type UserOncallDetails = {
    active_shifts: Array<OncallShift>;
    past_shifts: Array<OncallShift>;
    rosters: Array<OncallRoster>;
    upcoming_shifts: Array<OncallShift>;
};

export type UserSession = {
    expires_at: Date;
    user: User;
};

export type VerifyDocumentEditorSessionRequestAttributes = {
    documentName: string;
};

export type VerifyDocumentEditorSessionRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    attributes: VerifyDocumentEditorSessionRequestAttributes;
};

export type VerifyDocumentEditorSessionResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    data: DocumentEditorSessionAuth;
};

export type ListDebriefQuestionsData = {
    query?: {
        archived?: boolean;
        limit?: number;
        offset?: number;
        search?: string;
    };
};

export type ListDebriefQuestionsResponse = (ListIncidentDebriefQuestionsResponseBody);

export type ListDebriefQuestionsError = (ErrorModel);

export type CreateDebriefQuestionData = {
    body: CreateIncidentDebriefQuestionRequestBody;
};

export type CreateDebriefQuestionResponse = (CreateIncidentDebriefQuestionResponseBody);

export type CreateDebriefQuestionError = (ErrorModel);

export type GetDebriefQuestionData = {
    path: {
        id: string;
    };
};

export type GetDebriefQuestionResponse = (GetIncidentDebriefQuestionResponseBody);

export type GetDebriefQuestionError = (ErrorModel);

export type ArchiveDebriefQuestionData = {
    path: {
        id: string;
    };
};

export type ArchiveDebriefQuestionResponse = (void);

export type ArchiveDebriefQuestionError = (ErrorModel);

export type UpdateDebriefQuestionData = {
    body: UpdateIncidentDebriefQuestionRequestBody;
    path: {
        id: string;
    };
};

export type UpdateDebriefQuestionResponse = (UpdateIncidentDebriefQuestionResponseBody);

export type UpdateDebriefQuestionError = (ErrorModel);

export type RequestDocumentEditorSessionData = {
    body: RequestDocumentEditorSessionRequestBody;
};

export type RequestDocumentEditorSessionResponse = (RequestDocumentEditorSessionResponseBody);

export type RequestDocumentEditorSessionError = (ErrorModel);

export type VerifyDocumentEditorSessionData = {
    body: VerifyDocumentEditorSessionRequestBody;
};

export type VerifyDocumentEditorSessionResponse = (VerifyDocumentEditorSessionResponseBody);

export type VerifyDocumentEditorSessionError = (ErrorModel);

export type ListEnvironmentsData = {
    query?: {
        archived?: boolean;
        limit?: number;
        offset?: number;
        search?: string;
    };
};

export type ListEnvironmentsResponse = (ListEnvironmentsResponseBody);

export type ListEnvironmentsError = (ErrorModel);

export type CreateEnvironmentData = {
    body: CreateEnvironmentRequestBody;
};

export type CreateEnvironmentResponse = (CreateEnvironmentResponseBody);

export type CreateEnvironmentError = (ErrorModel);

export type GetEnvironmentData = {
    path: {
        id: string;
    };
};

export type GetEnvironmentResponse = (GetEnvironmentResponseBody);

export type GetEnvironmentError = (ErrorModel);

export type ArchiveEnvironmentData = {
    path: {
        id: string;
    };
};

export type ArchiveEnvironmentResponse = (void);

export type ArchiveEnvironmentError = (ErrorModel);

export type UpdateEnvironmentData = {
    body: UpdateEnvironmentRequestBody;
    path: {
        id: string;
    };
};

export type UpdateEnvironmentResponse = (UpdateEnvironmentResponseBody);

export type UpdateEnvironmentError = (ErrorModel);

export type ListFunctionalitiesData = {
    query?: {
        archived?: boolean;
        limit?: number;
        offset?: number;
        search?: string;
    };
};

export type ListFunctionalitiesResponse = (ListFunctionalitiesResponseBody);

export type ListFunctionalitiesError = (ErrorModel);

export type CreateFunctionalityData = {
    body: CreateFunctionalityRequestBody;
};

export type CreateFunctionalityResponse = (CreateFunctionalityResponseBody);

export type CreateFunctionalityError = (ErrorModel);

export type GetFunctionalityData = {
    path: {
        id: string;
    };
};

export type GetFunctionalityResponse = (GetFunctionalityResponseBody);

export type GetFunctionalityError = (ErrorModel);

export type ArchiveFunctionalityData = {
    path: {
        id: string;
    };
};

export type ArchiveFunctionalityResponse = (void);

export type ArchiveFunctionalityError = (ErrorModel);

export type UpdateFunctionalityData = {
    body: UpdateFunctionalityRequestBody;
    path: {
        id: string;
    };
};

export type UpdateFunctionalityResponse = (UpdateFunctionalityResponseBody);

export type UpdateFunctionalityError = (ErrorModel);

export type GetIncidentDebriefData = {
    path: {
        id: string;
    };
};

export type GetIncidentDebriefResponse = (GetIncidentDebriefResponseBody);

export type GetIncidentDebriefError = (ErrorModel);

export type UpdateIncidentDebriefData = {
    body: UpdateIncidentDebriefRequestBody;
    path: {
        id: string;
    };
};

export type UpdateIncidentDebriefResponse = (UpdateIncidentDebriefResponseBody);

export type UpdateIncidentDebriefError = (ErrorModel);

export type ListDebriefMessagesData = {
    path: {
        id: string;
    };
    query?: {
        archived?: boolean;
        limit?: number;
        offset?: number;
        search?: string;
    };
};

export type ListDebriefMessagesResponse = (ListIncidentDebriefMessagesResponseBody);

export type ListDebriefMessagesError = (ErrorModel);

export type AddIncidentDebriefUserMessageData = {
    body: AddIncidentDebriefUserMessageRequestBody;
    path: {
        id: string;
    };
};

export type AddIncidentDebriefUserMessageResponse = (AddIncidentDebriefUserMessageResponseBody);

export type AddIncidentDebriefUserMessageError = (ErrorModel);

export type ListDebriefSuggestionsData = {
    path: {
        id: string;
    };
    query?: {
        archived?: boolean;
        limit?: number;
        offset?: number;
        search?: string;
    };
};

export type ListDebriefSuggestionsResponse = (ListIncidentDebriefSuggestionsResponseBody);

export type ListDebriefSuggestionsError = (ErrorModel);

export type ListIncidentFieldsData = {
    query?: {
        archived?: boolean;
        limit?: number;
        offset?: number;
        search?: string;
    };
};

export type ListIncidentFieldsResponse = (ListIncidentFieldsResponseBody);

export type ListIncidentFieldsError = (ErrorModel);

export type CreateIncidentFieldData = {
    body: CreateIncidentFieldRequestBody;
};

export type CreateIncidentFieldResponse = (CreateIncidentFieldResponseBody);

export type CreateIncidentFieldError = (ErrorModel);

export type GetIncidentFieldData = {
    path: {
        id: string;
    };
};

export type GetIncidentFieldResponse = (GetIncidentFieldResponseBody);

export type GetIncidentFieldError = (ErrorModel);

export type ArchiveIncidentFieldData = {
    path: {
        id: string;
    };
};

export type ArchiveIncidentFieldResponse = (void);

export type ArchiveIncidentFieldError = (ErrorModel);

export type UpdateIncidentFieldData = {
    body: UpdateIncidentFieldRequestBody;
    path: {
        id: string;
    };
};

export type UpdateIncidentFieldResponse = (UpdateIncidentFieldResponseBody);

export type UpdateIncidentFieldError = (ErrorModel);

export type ArchiveIncidentMilestoneData = {
    path: {
        id: string;
    };
};

export type ArchiveIncidentMilestoneResponse = (void);

export type ArchiveIncidentMilestoneError = (ErrorModel);

export type UpdateIncidentMilestoneData = {
    body: UpdateIncidentMilestoneRequestBody;
    path: {
        id: string;
    };
};

export type UpdateIncidentMilestoneResponse = (UpdateIncidentMilestoneResponseBody);

export type UpdateIncidentMilestoneError = (ErrorModel);

export type ListIncidentRolesData = {
    query?: {
        archived?: boolean;
        limit?: number;
        offset?: number;
        search?: string;
    };
};

export type ListIncidentRolesResponse = (ListIncidentRolesResponseBody);

export type ListIncidentRolesError = (ErrorModel);

export type CreateIncidentRoleData = {
    body: CreateIncidentRoleRequestBody;
};

export type CreateIncidentRoleResponse = (CreateIncidentRoleResponseBody);

export type CreateIncidentRoleError = (ErrorModel);

export type GetIncidentRoleData = {
    path: {
        id: string;
    };
};

export type GetIncidentRoleResponse = (GetIncidentRoleResponseBody);

export type GetIncidentRoleError = (ErrorModel);

export type ArchiveIncidentRoleData = {
    path: {
        id: string;
    };
};

export type ArchiveIncidentRoleResponse = (void);

export type ArchiveIncidentRoleError = (ErrorModel);

export type UpdateIncidentRoleData = {
    body: UpdateIncidentRoleRequestBody;
    path: {
        id: string;
    };
};

export type UpdateIncidentRoleResponse = (UpdateIncidentRoleResponseBody);

export type UpdateIncidentRoleError = (ErrorModel);

export type ListIncidentSeveritiesData = {
    query?: {
        archived?: boolean;
        limit?: number;
        offset?: number;
        search?: string;
    };
};

export type ListIncidentSeveritiesResponse = (ListIncidentSeveritiesResponseBody);

export type ListIncidentSeveritiesError = (ErrorModel);

export type CreateIncidentSeverityData = {
    body: CreateIncidentSeverityRequestBody;
};

export type CreateIncidentSeverityResponse = (CreateIncidentSeverityResponseBody);

export type CreateIncidentSeverityError = (ErrorModel);

export type GetIncidentSeverityData = {
    path: {
        id: string;
    };
};

export type GetIncidentSeverityResponse = (GetIncidentSeverityResponseBody);

export type GetIncidentSeverityError = (ErrorModel);

export type ArchiveIncidentSeverityData = {
    path: {
        id: string;
    };
};

export type ArchiveIncidentSeverityResponse = (void);

export type ArchiveIncidentSeverityError = (ErrorModel);

export type UpdateIncidentSeverityData = {
    body: UpdateIncidentSeverityRequestBody;
    path: {
        id: string;
    };
};

export type UpdateIncidentSeverityResponse = (UpdateIncidentSeverityResponseBody);

export type UpdateIncidentSeverityError = (ErrorModel);

export type ListIncidentTagsData = {
    query?: {
        archived?: boolean;
        limit?: number;
        offset?: number;
        search?: string;
    };
};

export type ListIncidentTagsResponse = (ListIncidentTagsResponseBody);

export type ListIncidentTagsError = (ErrorModel);

export type CreateIncidentTagData = {
    body: CreateIncidentTagRequestBody;
};

export type CreateIncidentTagResponse = (CreateIncidentTagResponseBody);

export type CreateIncidentTagError = (ErrorModel);

export type GetIncidentTagData = {
    path: {
        id: string;
    };
};

export type GetIncidentTagResponse = (GetIncidentTagResponseBody);

export type GetIncidentTagError = (ErrorModel);

export type ArchiveIncidentTagData = {
    path: {
        id: string;
    };
};

export type ArchiveIncidentTagResponse = (void);

export type ArchiveIncidentTagError = (ErrorModel);

export type UpdateIncidentTagData = {
    body: UpdateIncidentTagRequestBody;
    path: {
        id: string;
    };
};

export type UpdateIncidentTagResponse = (UpdateIncidentTagResponseBody);

export type UpdateIncidentTagError = (ErrorModel);

export type ListIncidentTypesData = {
    query?: {
        archived?: boolean;
        limit?: number;
        offset?: number;
        search?: string;
    };
};

export type ListIncidentTypesResponse = (ListIncidentTypesResponseBody);

export type ListIncidentTypesError = (ErrorModel);

export type CreateIncidentTypeData = {
    body: CreateIncidentTypeRequestBody;
};

export type CreateIncidentTypeResponse = (CreateIncidentTypeResponseBody);

export type CreateIncidentTypeError = (ErrorModel);

export type GetIncidentTypeData = {
    path: {
        id: string;
    };
};

export type GetIncidentTypeResponse = (GetIncidentTypeResponseBody);

export type GetIncidentTypeError = (ErrorModel);

export type ArchiveIncidentTypeData = {
    path: {
        id: string;
    };
};

export type ArchiveIncidentTypeResponse = (void);

export type ArchiveIncidentTypeError = (ErrorModel);

export type UpdateIncidentTypeData = {
    body: UpdateIncidentTypeRequestBody;
    path: {
        id: string;
    };
};

export type UpdateIncidentTypeResponse = (UpdateIncidentTypeResponseBody);

export type UpdateIncidentTypeError = (ErrorModel);

export type ListIncidentsData = {
    query?: {
        archived?: boolean;
        limit?: number;
        offset?: number;
        search?: string;
        team_id?: string;
    };
};

export type ListIncidentsResponse = (ListIncidentsResponseBody);

export type ListIncidentsError = (ErrorModel);

export type CreateIncidentData = {
    body: CreateIncidentRequestBody;
};

export type CreateIncidentResponse = (CreateIncidentResponseBody);

export type CreateIncidentError = (ErrorModel);

export type GetIncidentData = {
    path: {
        id: string;
    };
};

export type GetIncidentResponse = (GetIncidentResponseBody);

export type GetIncidentError = (ErrorModel);

export type ArchiveIncidentData = {
    path: {
        id: string;
    };
};

export type ArchiveIncidentResponse = (void);

export type ArchiveIncidentError = (ErrorModel);

export type UpdateIncidentData = {
    body: UpdateIncidentRequestBody;
    path: {
        id: string;
    };
};

export type UpdateIncidentResponse = (UpdateIncidentResponseBody);

export type UpdateIncidentError = (ErrorModel);

export type GetIncidentUserDebriefData = {
    path: {
        id: string;
    };
};

export type GetIncidentUserDebriefResponse = (GetIncidentUserDebriefResponseBody);

export type GetIncidentUserDebriefError = (ErrorModel);

export type ListIncidentMilestonesData = {
    path: {
        id: string;
    };
};

export type ListIncidentMilestonesResponse = (ListIncidentMilestonesResponseBody);

export type ListIncidentMilestonesError = (ErrorModel);

export type CreateIncidentMilestoneData = {
    body: CreateIncidentMilestoneRequestBody;
    path: {
        id: string;
    };
};

export type CreateIncidentMilestoneResponse = (CreateIncidentMilestoneResponseBody);

export type CreateIncidentMilestoneError = (ErrorModel);

export type GetRetrospectiveForIncidentData = {
    path: {
        id: string;
    };
};

export type GetRetrospectiveForIncidentResponse = (GetRetrospectiveForIncidentResponseBody);

export type GetRetrospectiveForIncidentError = (ErrorModel);

export type ListIntegrationsData = {
    query?: {
        archived?: boolean;
        limit?: number;
        offset?: number;
        search?: string;
    };
};

export type ListIntegrationsResponse = (ListIntegrationsResponseBody);

export type ListIntegrationsError = (ErrorModel);

export type CreateIntegrationData = {
    body: CreateIntegrationRequestBody;
};

export type CreateIntegrationResponse = (CreateIntegrationResponseBody);

export type CreateIntegrationError = (ErrorModel);

export type GetIntegrationData = {
    path: {
        id: string;
    };
};

export type GetIntegrationResponse = (GetIntegrationResponseBody);

export type GetIntegrationError = (ErrorModel);

export type ArchiveIntegrationData = {
    path: {
        id: string;
    };
};

export type ArchiveIntegrationResponse = (void);

export type ArchiveIntegrationError = (ErrorModel);

export type UpdateIntegrationData = {
    body: UpdateIntegrationRequestBody;
    path: {
        id: string;
    };
};

export type UpdateIntegrationResponse = (UpdateIntegrationResponseBody);

export type UpdateIntegrationError = (ErrorModel);

export type ListMeetingSchedulesData = {
    query?: {
        archived?: boolean;
        limit?: number;
        offset?: number;
        search?: string;
    };
};

export type ListMeetingSchedulesResponse = (ListMeetingSchedulesResponseBody);

export type ListMeetingSchedulesError = (ErrorModel);

export type CreateMeetingScheduleData = {
    body: CreateMeetingScheduleRequestBody;
};

export type CreateMeetingScheduleResponse = (CreateMeetingScheduleResponseBody);

export type CreateMeetingScheduleError = (ErrorModel);

export type GetMeetingScheduleData = {
    path: {
        id: string;
    };
};

export type GetMeetingScheduleResponse = (GetMeetingScheduleResponseBody);

export type GetMeetingScheduleError = (ErrorModel);

export type ArchiveMeetingScheduleData = {
    path: {
        id: string;
    };
};

export type ArchiveMeetingScheduleResponse = (void);

export type ArchiveMeetingScheduleError = (ErrorModel);

export type UpdateMeetingScheduleData = {
    body: UpdateMeetingScheduleRequestBody;
    path: {
        id: string;
    };
};

export type UpdateMeetingScheduleResponse = (UpdateMeetingScheduleResponseBody);

export type UpdateMeetingScheduleError = (ErrorModel);

export type ListMeetingSessionsData = {
    query?: {
        archived?: boolean;
        from?: string;
        limit?: number;
        meeting_schedule_id?: string;
        offset?: number;
        search?: string;
        team_id?: string;
        to?: string;
        user_id?: string;
    };
};

export type ListMeetingSessionsResponse = (ListMeetingSessionsResponseBody);

export type ListMeetingSessionsError = (ErrorModel);

export type CreateMeetingSessionData = {
    body: CreateMeetingSessionRequestBody;
};

export type CreateMeetingSessionResponse = (CreateMeetingSessionResponseBody);

export type CreateMeetingSessionError = (ErrorModel);

export type GetMeetingSessionData = {
    path: {
        id: string;
    };
};

export type GetMeetingSessionResponse = (GetMeetingSessionResponseBody);

export type GetMeetingSessionError = (ErrorModel);

export type ArchiveMeetingSessionData = {
    path: {
        id: string;
    };
};

export type ArchiveMeetingSessionResponse = (void);

export type ArchiveMeetingSessionError = (ErrorModel);

export type UpdateMeetingSessionData = {
    body: UpdateMeetingSessionRequestBody;
    path: {
        id: string;
    };
};

export type UpdateMeetingSessionResponse = (UpdateMeetingSessionResponseBody);

export type UpdateMeetingSessionError = (ErrorModel);

export type ArchiveOncallShiftAnnotationData = {
    path: {
        id: string;
    };
};

export type ArchiveOncallShiftAnnotationResponse = (void);

export type ArchiveOncallShiftAnnotationError = (ErrorModel);

export type UpdateOncallShiftAnnotationData = {
    body: UpdateOncallShiftAnnotationRequestBody;
    path: {
        id: string;
    };
};

export type UpdateOncallShiftAnnotationResponse = (UpdateOncallShiftAnnotationResponseBody);

export type UpdateOncallShiftAnnotationError = (ErrorModel);

export type CreateOncallHandoverTemplateData = {
    body: CreateOncallShiftHandoverTemplateRequestBody;
};

export type CreateOncallHandoverTemplateResponse = (CreateOncallShiftHandoverTemplateResponseBody);

export type CreateOncallHandoverTemplateError = (ErrorModel);

export type GetOncallShiftHandoverTemplateData = {
    path: {
        id: string;
    };
};

export type GetOncallShiftHandoverTemplateResponse = (GetOncallShiftHandoverTemplateResponseBody);

export type GetOncallShiftHandoverTemplateError = (ErrorModel);

export type ArchiveOncallHandoverTemplateData = {
    path: {
        id: string;
    };
};

export type ArchiveOncallHandoverTemplateResponse = (void);

export type ArchiveOncallHandoverTemplateError = (ErrorModel);

export type UpdateOncallHandoverTemplateData = {
    body: UpdateOncallShiftHandoverTemplateRequestBody;
    path: {
        id: string;
    };
};

export type UpdateOncallHandoverTemplateResponse = (UpdateOncallShiftHandoverTemplateResponseBody);

export type UpdateOncallHandoverTemplateError = (ErrorModel);

export type ListOncallRostersData = {
    query?: {
        archived?: boolean;
        limit?: number;
        offset?: number;
        pinned?: boolean;
        search?: string;
        team_id?: string;
        user_id?: string;
    };
};

export type ListOncallRostersResponse = (ListOncallRostersResponseBody);

export type ListOncallRostersError = (ErrorModel);

export type GetOncallRosterData = {
    path: {
        id: string;
    };
};

export type GetOncallRosterResponse = (GetOncallRosterResponseBody);

export type GetOncallRosterError = (ErrorModel);

export type ListOncallShiftsData = {
    query?: {
        active?: boolean;
        archived?: boolean;
        limit?: number;
        offset?: number;
        search?: string;
        user_id?: string;
    };
};

export type ListOncallShiftsResponse = (ListOncallShiftsResponseBody);

export type ListOncallShiftsError = (ErrorModel);

export type GetOncallShiftData = {
    path: {
        id: string;
    };
};

export type GetOncallShiftResponse = (GetOncallShiftResponseBody);

export type GetOncallShiftError = (ErrorModel);

export type ListOncallShiftAlertsData = {
    path: {
        id: string;
    };
    query?: {
        archived?: boolean;
        limit?: number;
        offset?: number;
        search?: string;
    };
};

export type ListOncallShiftAlertsResponse = (ListOncallShiftAlertsResponseBody);

export type ListOncallShiftAlertsError = (ErrorModel);

export type ListOncallShiftAnnotationsData = {
    path: {
        id: string;
    };
    query?: {
        archived?: boolean;
        limit?: number;
        offset?: number;
        search?: string;
    };
};

export type ListOncallShiftAnnotationsResponse = (ListOncallShiftAnnotationsResponseBody);

export type ListOncallShiftAnnotationsError = (ErrorModel);

export type CreateOncallShiftAnnotationData = {
    body: CreateOncallShiftAnnotationRequestBody;
    path: {
        id: string;
    };
};

export type CreateOncallShiftAnnotationResponse = (CreateOncallShiftAnnotationResponseBody);

export type CreateOncallShiftAnnotationError = (ErrorModel);

export type GetOncallShiftHandoverData = {
    path: {
        id: string;
    };
};

export type GetOncallShiftHandoverResponse = (GetOncallShiftHandoverResponseBody);

export type GetOncallShiftHandoverError = (ErrorModel);

export type SendOncallShiftHandoverData = {
    body: SendOncallShiftHandoverRequestBody;
    path: {
        id: string;
    };
};

export type SendOncallShiftHandoverResponse = (SendOncallShiftHandoverResponseBody);

export type SendOncallShiftHandoverError = (ErrorModel);

export type ListOncallShiftIncidentsData = {
    path: {
        id: string;
    };
    query?: {
        archived?: boolean;
        limit?: number;
        offset?: number;
        search?: string;
    };
};

export type ListOncallShiftIncidentsResponse = (ListOncallShiftIncidentsResponseBody);

export type ListOncallShiftIncidentsError = (ErrorModel);

export type GetNextOncallShiftData = {
    path: {
        id: string;
    };
};

export type GetNextOncallShiftResponse = (GetNextOncallShiftResponseBody);

export type GetNextOncallShiftError = (ErrorModel);

export type GetUserOncallDetailsData = {
    query?: {
        userId?: string;
    };
};

export type GetUserOncallDetailsResponse = (GetUserOncallDetailsResponseBody);

export type GetUserOncallDetailsError = (ErrorModel);

export type ArchiveRetrospectiveReviewData = {
    path: {
        id: string;
    };
};

export type ArchiveRetrospectiveReviewResponse = (void);

export type ArchiveRetrospectiveReviewError = (ErrorModel);

export type UpdateRetrospectiveReviewData = {
    body: UpdateRetrospectiveReviewRequestBody;
    path: {
        id: string;
    };
};

export type UpdateRetrospectiveReviewResponse = (UpdateRetrospectiveReviewResponseBody);

export type UpdateRetrospectiveReviewError = (ErrorModel);

export type ListRetrospectivesData = {
    query?: {
        archived?: boolean;
        limit?: number;
        offset?: number;
        search?: string;
    };
};

export type ListRetrospectivesResponse = (ListRetrospectivesResponseBody);

export type ListRetrospectivesError = (ErrorModel);

export type GetRetrospectiveData = {
    path: {
        id: string;
    };
};

export type GetRetrospectiveResponse = (GetRetrospectiveResponseBody);

export type GetRetrospectiveError = (ErrorModel);

export type ListRetrospectiveDiscussionsData = {
    path: {
        id: string;
    };
    query?: {
        archived?: boolean;
        limit?: number;
        offset?: number;
        search?: string;
    };
};

export type ListRetrospectiveDiscussionsResponse = (ListRetrospectiveDiscussionsResponseBody);

export type ListRetrospectiveDiscussionsError = (ErrorModel);

export type CreateRetrospectiveDiscussionData = {
    body: CreateRetrospectiveDiscussionRequestBody;
    path: {
        id: string;
    };
};

export type CreateRetrospectiveDiscussionResponse = (CreateRetrospectiveDiscussionResponseBody);

export type CreateRetrospectiveDiscussionError = (ErrorModel);

export type GetRetrospectiveDiscussionData = {
    path: {
        discussion_id: string;
        id: string;
    };
};

export type GetRetrospectiveDiscussionResponse = (GetRetrospectiveDiscussionResponseBody);

export type GetRetrospectiveDiscussionError = (ErrorModel);

export type AddRetrospectiveDiscussionReplyData = {
    body: AddRetrospectiveDiscussionReplyRequestBody;
};

export type AddRetrospectiveDiscussionReplyResponse = (AddRetrospectiveDiscussionReplyResponseBody);

export type AddRetrospectiveDiscussionReplyError = (ErrorModel);

export type UpdateRetrospectiveDiscussionData = {
    body: UpdateRetrospectiveDiscussionRequestBody;
};

export type UpdateRetrospectiveDiscussionResponse = (UpdateRetrospectiveDiscussionResponseBody);

export type UpdateRetrospectiveDiscussionError = (ErrorModel);

export type ListRetrospectiveReviewsData = {
    query?: {
        archived?: boolean;
        limit?: number;
        offset?: number;
        search?: string;
    };
};

export type ListRetrospectiveReviewsResponse = (ListRetrospectiveReviewsResponseBody);

export type ListRetrospectiveReviewsError = (ErrorModel);

export type CreateRetrospectiveReviewData = {
    body: CreateRetrospectiveReviewRequestBody;
    path: {
        id: string;
    };
};

export type CreateRetrospectiveReviewResponse = (CreateRetrospectiveReviewResponseBody);

export type CreateRetrospectiveReviewError = (ErrorModel);

export type GetSystemAnalysisComponentData = {
    path: {
        analysis_id: string;
        entity_id: string;
    };
};

export type GetSystemAnalysisComponentResponse = (GetSystemAnalysisComponentResponseBody);

export type GetSystemAnalysisComponentError = (ErrorModel);

export type DeleteSystemAnalysisComponentData = {
    path: {
        analysis_id: string;
        entity_id: string;
    };
};

export type DeleteSystemAnalysisComponentResponse = (void);

export type DeleteSystemAnalysisComponentError = (ErrorModel);

export type UpdateSystemAnalysisComponentData = {
    body: UpdateSystemAnalysisComponentRequestBody;
    path: {
        analysis_id: string;
        entity_id: string;
    };
};

export type UpdateSystemAnalysisComponentResponse = (UpdateSystemAnalysisComponentResponseBody);

export type UpdateSystemAnalysisComponentError = (ErrorModel);

export type GetSystemAnalysisRelationshipData = {
    path: {
        analysis_id: string;
        entity_id: string;
    };
};

export type GetSystemAnalysisRelationshipResponse = (GetSystemAnalysisRelationshipResponseBody);

export type GetSystemAnalysisRelationshipError = (ErrorModel);

export type DeleteSystemAnalysisRelationshipData = {
    path: {
        analysis_id: string;
        entity_id: string;
    };
};

export type DeleteSystemAnalysisRelationshipResponse = (void);

export type DeleteSystemAnalysisRelationshipError = (ErrorModel);

export type UpdateSystemAnalysisRelationshipData = {
    body: UpdateSystemAnalysisRelationshipRequestBody;
    path: {
        analysis_id: string;
        entity_id: string;
    };
};

export type UpdateSystemAnalysisRelationshipResponse = (UpdateSystemAnalysisRelationshipResponseBody);

export type UpdateSystemAnalysisRelationshipError = (ErrorModel);

export type GetSystemAnalysisData = {
    path: {
        id: string;
    };
};

export type GetSystemAnalysisResponse = (GetSystemAnalysisResponseBody);

export type GetSystemAnalysisError = (ErrorModel);

export type ListSystemAnalysisComponentsData = {
    path: {
        id: string;
    };
    query?: {
        archived?: boolean;
        limit?: number;
        offset?: number;
        search?: string;
    };
};

export type ListSystemAnalysisComponentsResponse = (ListSystemAnalysisComponentsResponseBody);

export type ListSystemAnalysisComponentsError = (ErrorModel);

export type AddSystemAnalysisComponentData = {
    body: AddSystemAnalysisComponentRequestBody;
    path: {
        id: string;
    };
};

export type AddSystemAnalysisComponentResponse = (AddSystemAnalysisComponentResponseBody);

export type AddSystemAnalysisComponentError = (ErrorModel);

export type ListSystemAnalysisRelationshipsData = {
    path: {
        id: string;
    };
    query?: {
        archived?: boolean;
        limit?: number;
        offset?: number;
        search?: string;
    };
};

export type ListSystemAnalysisRelationshipsResponse = (ListSystemAnalysisRelationshipsResponseBody);

export type ListSystemAnalysisRelationshipsError = (ErrorModel);

export type CreateSystemAnalysisRelationshipData = {
    body: CreateSystemAnalysisRelationshipRequestBody;
    path: {
        id: string;
    };
};

export type CreateSystemAnalysisRelationshipResponse = (CreateSystemAnalysisRelationshipResponseBody);

export type CreateSystemAnalysisRelationshipError = (ErrorModel);

export type ListSystemComponentsData = {
    query?: {
        archived?: boolean;
        limit?: number;
        offset?: number;
        search?: string;
    };
};

export type ListSystemComponentsResponse = (ListSystemComponentsResponseBody);

export type ListSystemComponentsError = (ErrorModel);

export type CreateSystemComponentData = {
    body: CreateSystemComponentRequestBody;
};

export type CreateSystemComponentResponse = (CreateSystemComponentResponseBody);

export type CreateSystemComponentError = (ErrorModel);

export type GetSystemComponentData = {
    path: {
        id: string;
    };
};

export type GetSystemComponentResponse = (GetSystemComponentResponseBody);

export type GetSystemComponentError = (ErrorModel);

export type ArchiveSystemComponentData = {
    path: {
        id: string;
    };
};

export type ArchiveSystemComponentResponse = (void);

export type ArchiveSystemComponentError = (ErrorModel);

export type UpdateSystemComponentData = {
    body: UpdateSystemComponentRequestBody;
    path: {
        id: string;
    };
};

export type UpdateSystemComponentResponse = (UpdateSystemComponentResponseBody);

export type UpdateSystemComponentError = (ErrorModel);

export type ListTasksData = {
    query?: {
        archived?: boolean;
        limit?: number;
        offset?: number;
        search?: string;
        team_id?: string;
    };
};

export type ListTasksResponse = (ListTasksResponseBody);

export type ListTasksError = (ErrorModel);

export type CreateTaskData = {
    body: CreateTaskRequestBody;
};

export type CreateTaskResponse = (CreateTaskResponseBody);

export type CreateTaskError = (ErrorModel);

export type GetTaskData = {
    path: {
        id: string;
    };
};

export type GetTaskResponse = (GetTaskResponseBody);

export type GetTaskError = (ErrorModel);

export type ArchiveTaskData = {
    path: {
        id: string;
    };
};

export type ArchiveTaskResponse = (void);

export type ArchiveTaskError = (ErrorModel);

export type UpdateTaskData = {
    body: UpdateTaskRequestBody;
    path: {
        id: string;
    };
};

export type UpdateTaskResponse = (UpdateTaskResponseBody);

export type UpdateTaskError = (ErrorModel);

export type ListTeamsData = {
    query?: {
        archived?: boolean;
        limit?: number;
        offset?: number;
        search?: string;
    };
};

export type ListTeamsResponse = (ListTeamsResponseBody);

export type ListTeamsError = (ErrorModel);

export type CreateTeamData = {
    body: CreateTeamRequestBody;
};

export type CreateTeamResponse = (CreateTeamResponseBody);

export type CreateTeamError = (ErrorModel);

export type GetTeamData = {
    path: {
        id: string;
    };
};

export type GetTeamResponse = (GetTeamResponseBody);

export type GetTeamError = (ErrorModel);

export type ArchiveTeamData = {
    path: {
        id: string;
    };
};

export type ArchiveTeamResponse = (void);

export type ArchiveTeamError = (ErrorModel);

export type UpdateTeamsData = {
    body: UpdateTeamRequestBody;
    path: {
        id: string;
    };
};

export type UpdateTeamsResponse = (UpdateTeamResponseBody);

export type UpdateTeamsError = (ErrorModel);

export type GetCurrentUserSessionResponse = (GetUserSessionResponseBody);

export type GetCurrentUserSessionError = (ErrorModel);

export type ListUserAssignmentsData = {
    query?: {
        archived?: boolean;
        limit?: number;
        offset?: number;
        search?: string;
    };
};

export type ListUserAssignmentsResponse = (ListUserAssignmentsResponseBody);

export type ListUserAssignmentsError = (ErrorModel);

export type ListUserNotificationsData = {
    query?: {
        archived?: boolean;
        limit?: number;
        offset?: number;
        search?: string;
    };
};

export type ListUserNotificationsResponse = (ListNotificationsResponseBody);

export type ListUserNotificationsError = (ErrorModel);

export type DeleteUserNotificationData = {
    path: {
        id: string;
    };
};

export type DeleteUserNotificationResponse = (void);

export type DeleteUserNotificationError = (ErrorModel);

export type ListUsersData = {
    query?: {
        archived?: boolean;
        limit?: number;
        offset?: number;
        search?: string;
        team_id?: string;
    };
};

export type ListUsersResponse = (ListUsersResponseBody);

export type ListUsersError = (ErrorModel);

export type GetUserData = {
    path: {
        id: string;
    };
};

export type GetUserResponse = (GetUserResponseBody);

export type GetUserError = (ErrorModel);

export type ListDebriefMessagesResponseTransformer = (data: any) => Promise<ListDebriefMessagesResponse>;

export type ListIncidentDebriefMessagesResponseBodyModelResponseTransformer = (data: any) => ListIncidentDebriefMessagesResponseBody;

export type IncidentDebriefMessageModelResponseTransformer = (data: any) => IncidentDebriefMessage;

export type IncidentDebriefMessageAttributesModelResponseTransformer = (data: any) => IncidentDebriefMessageAttributes;

export const IncidentDebriefMessageAttributesModelResponseTransformer: IncidentDebriefMessageAttributesModelResponseTransformer = data => {
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    return data;
};

export const IncidentDebriefMessageModelResponseTransformer: IncidentDebriefMessageModelResponseTransformer = data => {
    if (data?.attributes) {
        IncidentDebriefMessageAttributesModelResponseTransformer(data.attributes);
    }
    return data;
};

export const ListIncidentDebriefMessagesResponseBodyModelResponseTransformer: ListIncidentDebriefMessagesResponseBodyModelResponseTransformer = data => {
    if (Array.isArray(data?.data)) {
        data.data.forEach(IncidentDebriefMessageModelResponseTransformer);
    }
    return data;
};

export const ListDebriefMessagesResponseTransformer: ListDebriefMessagesResponseTransformer = async (data) => {
    ListIncidentDebriefMessagesResponseBodyModelResponseTransformer(data);
    return data;
};

export type AddIncidentDebriefUserMessageResponseTransformer = (data: any) => Promise<AddIncidentDebriefUserMessageResponse>;

export type AddIncidentDebriefUserMessageResponseBodyModelResponseTransformer = (data: any) => AddIncidentDebriefUserMessageResponseBody;

export const AddIncidentDebriefUserMessageResponseBodyModelResponseTransformer: AddIncidentDebriefUserMessageResponseBodyModelResponseTransformer = data => {
    if (data?.data) {
        IncidentDebriefMessageModelResponseTransformer(data.data);
    }
    return data;
};

export const AddIncidentDebriefUserMessageResponseTransformer: AddIncidentDebriefUserMessageResponseTransformer = async (data) => {
    AddIncidentDebriefUserMessageResponseBodyModelResponseTransformer(data);
    return data;
};

export type UpdateIncidentMilestoneResponseTransformer = (data: any) => Promise<UpdateIncidentMilestoneResponse>;

export type UpdateIncidentMilestoneResponseBodyModelResponseTransformer = (data: any) => UpdateIncidentMilestoneResponseBody;

export type IncidentMilestoneModelResponseTransformer = (data: any) => IncidentMilestone;

export type IncidentMilestoneAttributesModelResponseTransformer = (data: any) => IncidentMilestoneAttributes;

export const IncidentMilestoneAttributesModelResponseTransformer: IncidentMilestoneAttributesModelResponseTransformer = data => {
    if (data?.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const IncidentMilestoneModelResponseTransformer: IncidentMilestoneModelResponseTransformer = data => {
    if (data?.attributes) {
        IncidentMilestoneAttributesModelResponseTransformer(data.attributes);
    }
    return data;
};

export const UpdateIncidentMilestoneResponseBodyModelResponseTransformer: UpdateIncidentMilestoneResponseBodyModelResponseTransformer = data => {
    if (data?.data) {
        IncidentMilestoneModelResponseTransformer(data.data);
    }
    return data;
};

export const UpdateIncidentMilestoneResponseTransformer: UpdateIncidentMilestoneResponseTransformer = async (data) => {
    UpdateIncidentMilestoneResponseBodyModelResponseTransformer(data);
    return data;
};

export type ListIncidentsResponseTransformer = (data: any) => Promise<ListIncidentsResponse>;

export type ListIncidentsResponseBodyModelResponseTransformer = (data: any) => ListIncidentsResponseBody;

export type IncidentModelResponseTransformer = (data: any) => Incident;

export type IncidentAttributesModelResponseTransformer = (data: any) => IncidentAttributes;

export type IncidentRoleAssignmentModelResponseTransformer = (data: any) => IncidentRoleAssignment;

export const IncidentRoleAssignmentModelResponseTransformer: IncidentRoleAssignmentModelResponseTransformer = data => {
    if (data?.ended_at) {
        data.ended_at = new Date(data.ended_at);
    }
    if (data?.started_at) {
        data.started_at = new Date(data.started_at);
    }
    return data;
};

export type IncidentTeamAssignmentModelResponseTransformer = (data: any) => IncidentTeamAssignment;

export const IncidentTeamAssignmentModelResponseTransformer: IncidentTeamAssignmentModelResponseTransformer = data => {
    if (data?.ended_at) {
        data.ended_at = new Date(data.ended_at);
    }
    if (data?.started_at) {
        data.started_at = new Date(data.started_at);
    }
    return data;
};

export const IncidentAttributesModelResponseTransformer: IncidentAttributesModelResponseTransformer = data => {
    if (data?.closed_at) {
        data.closed_at = new Date(data.closed_at);
    }
    if (data?.opened_at) {
        data.opened_at = new Date(data.opened_at);
    }
    if (Array.isArray(data?.roles)) {
        data.roles.forEach(IncidentRoleAssignmentModelResponseTransformer);
    }
    if (Array.isArray(data?.teams)) {
        data.teams.forEach(IncidentTeamAssignmentModelResponseTransformer);
    }
    return data;
};

export const IncidentModelResponseTransformer: IncidentModelResponseTransformer = data => {
    if (data?.attributes) {
        IncidentAttributesModelResponseTransformer(data.attributes);
    }
    return data;
};

export const ListIncidentsResponseBodyModelResponseTransformer: ListIncidentsResponseBodyModelResponseTransformer = data => {
    if (Array.isArray(data?.data)) {
        data.data.forEach(IncidentModelResponseTransformer);
    }
    return data;
};

export const ListIncidentsResponseTransformer: ListIncidentsResponseTransformer = async (data) => {
    ListIncidentsResponseBodyModelResponseTransformer(data);
    return data;
};

export type CreateIncidentResponseTransformer = (data: any) => Promise<CreateIncidentResponse>;

export type CreateIncidentResponseBodyModelResponseTransformer = (data: any) => CreateIncidentResponseBody;

export const CreateIncidentResponseBodyModelResponseTransformer: CreateIncidentResponseBodyModelResponseTransformer = data => {
    if (data?.data) {
        IncidentModelResponseTransformer(data.data);
    }
    return data;
};

export const CreateIncidentResponseTransformer: CreateIncidentResponseTransformer = async (data) => {
    CreateIncidentResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetIncidentResponseTransformer = (data: any) => Promise<GetIncidentResponse>;

export type GetIncidentResponseBodyModelResponseTransformer = (data: any) => GetIncidentResponseBody;

export const GetIncidentResponseBodyModelResponseTransformer: GetIncidentResponseBodyModelResponseTransformer = data => {
    if (data?.data) {
        IncidentModelResponseTransformer(data.data);
    }
    return data;
};

export const GetIncidentResponseTransformer: GetIncidentResponseTransformer = async (data) => {
    GetIncidentResponseBodyModelResponseTransformer(data);
    return data;
};

export type UpdateIncidentResponseTransformer = (data: any) => Promise<UpdateIncidentResponse>;

export type UpdateIncidentResponseBodyModelResponseTransformer = (data: any) => UpdateIncidentResponseBody;

export const UpdateIncidentResponseBodyModelResponseTransformer: UpdateIncidentResponseBodyModelResponseTransformer = data => {
    if (data?.data) {
        IncidentModelResponseTransformer(data.data);
    }
    return data;
};

export const UpdateIncidentResponseTransformer: UpdateIncidentResponseTransformer = async (data) => {
    UpdateIncidentResponseBodyModelResponseTransformer(data);
    return data;
};

export type ListIncidentMilestonesResponseTransformer = (data: any) => Promise<ListIncidentMilestonesResponse>;

export type ListIncidentMilestonesResponseBodyModelResponseTransformer = (data: any) => ListIncidentMilestonesResponseBody;

export const ListIncidentMilestonesResponseBodyModelResponseTransformer: ListIncidentMilestonesResponseBodyModelResponseTransformer = data => {
    if (Array.isArray(data?.data)) {
        data.data.forEach(IncidentMilestoneModelResponseTransformer);
    }
    return data;
};

export const ListIncidentMilestonesResponseTransformer: ListIncidentMilestonesResponseTransformer = async (data) => {
    ListIncidentMilestonesResponseBodyModelResponseTransformer(data);
    return data;
};

export type CreateIncidentMilestoneResponseTransformer = (data: any) => Promise<CreateIncidentMilestoneResponse>;

export type CreateIncidentMilestoneResponseBodyModelResponseTransformer = (data: any) => CreateIncidentMilestoneResponseBody;

export const CreateIncidentMilestoneResponseBodyModelResponseTransformer: CreateIncidentMilestoneResponseBodyModelResponseTransformer = data => {
    if (data?.data) {
        IncidentMilestoneModelResponseTransformer(data.data);
    }
    return data;
};

export const CreateIncidentMilestoneResponseTransformer: CreateIncidentMilestoneResponseTransformer = async (data) => {
    CreateIncidentMilestoneResponseBodyModelResponseTransformer(data);
    return data;
};

export type ListMeetingSchedulesResponseTransformer = (data: any) => Promise<ListMeetingSchedulesResponse>;

export type ListMeetingSchedulesResponseBodyModelResponseTransformer = (data: any) => ListMeetingSchedulesResponseBody;

export type MeetingScheduleModelResponseTransformer = (data: any) => MeetingSchedule;

export type MeetingScheduleAttributesModelResponseTransformer = (data: any) => MeetingScheduleAttributes;

export type MeetingScheduleTimingModelResponseTransformer = (data: any) => MeetingScheduleTiming;

export const MeetingScheduleTimingModelResponseTransformer: MeetingScheduleTimingModelResponseTransformer = data => {
    if (data?.starts_at) {
        data.starts_at = new Date(data.starts_at);
    }
    return data;
};

export const MeetingScheduleAttributesModelResponseTransformer: MeetingScheduleAttributesModelResponseTransformer = data => {
    if (data?.timing) {
        MeetingScheduleTimingModelResponseTransformer(data.timing);
    }
    return data;
};

export const MeetingScheduleModelResponseTransformer: MeetingScheduleModelResponseTransformer = data => {
    if (data?.attributes) {
        MeetingScheduleAttributesModelResponseTransformer(data.attributes);
    }
    return data;
};

export const ListMeetingSchedulesResponseBodyModelResponseTransformer: ListMeetingSchedulesResponseBodyModelResponseTransformer = data => {
    if (Array.isArray(data?.data)) {
        data.data.forEach(MeetingScheduleModelResponseTransformer);
    }
    return data;
};

export const ListMeetingSchedulesResponseTransformer: ListMeetingSchedulesResponseTransformer = async (data) => {
    ListMeetingSchedulesResponseBodyModelResponseTransformer(data);
    return data;
};

export type CreateMeetingScheduleResponseTransformer = (data: any) => Promise<CreateMeetingScheduleResponse>;

export type CreateMeetingScheduleResponseBodyModelResponseTransformer = (data: any) => CreateMeetingScheduleResponseBody;

export const CreateMeetingScheduleResponseBodyModelResponseTransformer: CreateMeetingScheduleResponseBodyModelResponseTransformer = data => {
    if (data?.data) {
        MeetingScheduleModelResponseTransformer(data.data);
    }
    return data;
};

export const CreateMeetingScheduleResponseTransformer: CreateMeetingScheduleResponseTransformer = async (data) => {
    CreateMeetingScheduleResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetMeetingScheduleResponseTransformer = (data: any) => Promise<GetMeetingScheduleResponse>;

export type GetMeetingScheduleResponseBodyModelResponseTransformer = (data: any) => GetMeetingScheduleResponseBody;

export const GetMeetingScheduleResponseBodyModelResponseTransformer: GetMeetingScheduleResponseBodyModelResponseTransformer = data => {
    if (data?.data) {
        MeetingScheduleModelResponseTransformer(data.data);
    }
    return data;
};

export const GetMeetingScheduleResponseTransformer: GetMeetingScheduleResponseTransformer = async (data) => {
    GetMeetingScheduleResponseBodyModelResponseTransformer(data);
    return data;
};

export type UpdateMeetingScheduleResponseTransformer = (data: any) => Promise<UpdateMeetingScheduleResponse>;

export type UpdateMeetingScheduleResponseBodyModelResponseTransformer = (data: any) => UpdateMeetingScheduleResponseBody;

export const UpdateMeetingScheduleResponseBodyModelResponseTransformer: UpdateMeetingScheduleResponseBodyModelResponseTransformer = data => {
    if (data?.data) {
        MeetingScheduleModelResponseTransformer(data.data);
    }
    return data;
};

export const UpdateMeetingScheduleResponseTransformer: UpdateMeetingScheduleResponseTransformer = async (data) => {
    UpdateMeetingScheduleResponseBodyModelResponseTransformer(data);
    return data;
};

export type ListMeetingSessionsResponseTransformer = (data: any) => Promise<ListMeetingSessionsResponse>;

export type ListMeetingSessionsResponseBodyModelResponseTransformer = (data: any) => ListMeetingSessionsResponseBody;

export type MeetingSessionModelResponseTransformer = (data: any) => MeetingSession;

export type MeetingSessionAttributesModelResponseTransformer = (data: any) => MeetingSessionAttributes;

export const MeetingSessionAttributesModelResponseTransformer: MeetingSessionAttributesModelResponseTransformer = data => {
    if (data?.starts_at) {
        data.starts_at = new Date(data.starts_at);
    }
    return data;
};

export const MeetingSessionModelResponseTransformer: MeetingSessionModelResponseTransformer = data => {
    if (data?.attributes) {
        MeetingSessionAttributesModelResponseTransformer(data.attributes);
    }
    return data;
};

export const ListMeetingSessionsResponseBodyModelResponseTransformer: ListMeetingSessionsResponseBodyModelResponseTransformer = data => {
    if (Array.isArray(data?.data)) {
        data.data.forEach(MeetingSessionModelResponseTransformer);
    }
    return data;
};

export const ListMeetingSessionsResponseTransformer: ListMeetingSessionsResponseTransformer = async (data) => {
    ListMeetingSessionsResponseBodyModelResponseTransformer(data);
    return data;
};

export type CreateMeetingSessionResponseTransformer = (data: any) => Promise<CreateMeetingSessionResponse>;

export type CreateMeetingSessionResponseBodyModelResponseTransformer = (data: any) => CreateMeetingSessionResponseBody;

export const CreateMeetingSessionResponseBodyModelResponseTransformer: CreateMeetingSessionResponseBodyModelResponseTransformer = data => {
    if (data?.data) {
        MeetingSessionModelResponseTransformer(data.data);
    }
    return data;
};

export const CreateMeetingSessionResponseTransformer: CreateMeetingSessionResponseTransformer = async (data) => {
    CreateMeetingSessionResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetMeetingSessionResponseTransformer = (data: any) => Promise<GetMeetingSessionResponse>;

export type GetMeetingSessionResponseBodyModelResponseTransformer = (data: any) => GetMeetingSessionResponseBody;

export const GetMeetingSessionResponseBodyModelResponseTransformer: GetMeetingSessionResponseBodyModelResponseTransformer = data => {
    if (data?.data) {
        MeetingSessionModelResponseTransformer(data.data);
    }
    return data;
};

export const GetMeetingSessionResponseTransformer: GetMeetingSessionResponseTransformer = async (data) => {
    GetMeetingSessionResponseBodyModelResponseTransformer(data);
    return data;
};

export type UpdateMeetingSessionResponseTransformer = (data: any) => Promise<UpdateMeetingSessionResponse>;

export type UpdateMeetingSessionResponseBodyModelResponseTransformer = (data: any) => UpdateMeetingSessionResponseBody;

export const UpdateMeetingSessionResponseBodyModelResponseTransformer: UpdateMeetingSessionResponseBodyModelResponseTransformer = data => {
    if (data?.data) {
        MeetingSessionModelResponseTransformer(data.data);
    }
    return data;
};

export const UpdateMeetingSessionResponseTransformer: UpdateMeetingSessionResponseTransformer = async (data) => {
    UpdateMeetingSessionResponseBodyModelResponseTransformer(data);
    return data;
};

export type UpdateOncallShiftAnnotationResponseTransformer = (data: any) => Promise<UpdateOncallShiftAnnotationResponse>;

export type UpdateOncallShiftAnnotationResponseBodyModelResponseTransformer = (data: any) => UpdateOncallShiftAnnotationResponseBody;

export type OncallShiftAnnotationModelResponseTransformer = (data: any) => OncallShiftAnnotation;

export type OncallShiftAnnotationAttributesModelResponseTransformer = (data: any) => OncallShiftAnnotationAttributes;

export const OncallShiftAnnotationAttributesModelResponseTransformer: OncallShiftAnnotationAttributesModelResponseTransformer = data => {
    if (data?.occurred_at) {
        data.occurred_at = new Date(data.occurred_at);
    }
    return data;
};

export const OncallShiftAnnotationModelResponseTransformer: OncallShiftAnnotationModelResponseTransformer = data => {
    if (data?.attributes) {
        OncallShiftAnnotationAttributesModelResponseTransformer(data.attributes);
    }
    return data;
};

export const UpdateOncallShiftAnnotationResponseBodyModelResponseTransformer: UpdateOncallShiftAnnotationResponseBodyModelResponseTransformer = data => {
    if (data?.data) {
        OncallShiftAnnotationModelResponseTransformer(data.data);
    }
    return data;
};

export const UpdateOncallShiftAnnotationResponseTransformer: UpdateOncallShiftAnnotationResponseTransformer = async (data) => {
    UpdateOncallShiftAnnotationResponseBodyModelResponseTransformer(data);
    return data;
};

export type ListOncallRostersResponseTransformer = (data: any) => Promise<ListOncallRostersResponse>;

export type ListOncallRostersResponseBodyModelResponseTransformer = (data: any) => ListOncallRostersResponseBody;

export type OncallRosterModelResponseTransformer = (data: any) => OncallRoster;

export type OncallRosterAttributesModelResponseTransformer = (data: any) => OncallRosterAttributes;

export type OncallScheduleModelResponseTransformer = (data: any) => OncallSchedule;

export type OncallScheduleAttributesModelResponseTransformer = (data: any) => OncallScheduleAttributes;

export const OncallScheduleAttributesModelResponseTransformer: OncallScheduleAttributesModelResponseTransformer = data => {
    if (data?.roster) {
        OncallRosterModelResponseTransformer(data.roster);
    }
    return data;
};

export const OncallScheduleModelResponseTransformer: OncallScheduleModelResponseTransformer = data => {
    if (data?.attributes) {
        OncallScheduleAttributesModelResponseTransformer(data.attributes);
    }
    return data;
};

export const OncallRosterAttributesModelResponseTransformer: OncallRosterAttributesModelResponseTransformer = data => {
    if (Array.isArray(data?.schedules)) {
        data.schedules.forEach(OncallScheduleModelResponseTransformer);
    }
    return data;
};

export const OncallRosterModelResponseTransformer: OncallRosterModelResponseTransformer = data => {
    if (data?.attributes) {
        OncallRosterAttributesModelResponseTransformer(data.attributes);
    }
    return data;
};

export const ListOncallRostersResponseBodyModelResponseTransformer: ListOncallRostersResponseBodyModelResponseTransformer = data => {
    if (Array.isArray(data?.data)) {
        data.data.forEach(OncallRosterModelResponseTransformer);
    }
    return data;
};

export const ListOncallRostersResponseTransformer: ListOncallRostersResponseTransformer = async (data) => {
    ListOncallRostersResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetOncallRosterResponseTransformer = (data: any) => Promise<GetOncallRosterResponse>;

export type GetOncallRosterResponseBodyModelResponseTransformer = (data: any) => GetOncallRosterResponseBody;

export const GetOncallRosterResponseBodyModelResponseTransformer: GetOncallRosterResponseBodyModelResponseTransformer = data => {
    if (data?.data) {
        OncallRosterModelResponseTransformer(data.data);
    }
    return data;
};

export const GetOncallRosterResponseTransformer: GetOncallRosterResponseTransformer = async (data) => {
    GetOncallRosterResponseBodyModelResponseTransformer(data);
    return data;
};

export type ListOncallShiftsResponseTransformer = (data: any) => Promise<ListOncallShiftsResponse>;

export type ListOncallShiftsResponseBodyModelResponseTransformer = (data: any) => ListOncallShiftsResponseBody;

export type OncallShiftModelResponseTransformer = (data: any) => OncallShift;

export type OncallShiftAttributesModelResponseTransformer = (data: any) => OncallShiftAttributes;

export type OncallShiftCoverModelResponseTransformer = (data: any) => OncallShiftCover;

export type OncallShiftCoverAttributesModelResponseTransformer = (data: any) => OncallShiftCoverAttributes;

export const OncallShiftCoverAttributesModelResponseTransformer: OncallShiftCoverAttributesModelResponseTransformer = data => {
    if (data?.end_at) {
        data.end_at = new Date(data.end_at);
    }
    if (data?.start_at) {
        data.start_at = new Date(data.start_at);
    }
    return data;
};

export const OncallShiftCoverModelResponseTransformer: OncallShiftCoverModelResponseTransformer = data => {
    if (data?.attributes) {
        OncallShiftCoverAttributesModelResponseTransformer(data.attributes);
    }
    return data;
};

export const OncallShiftAttributesModelResponseTransformer: OncallShiftAttributesModelResponseTransformer = data => {
    if (Array.isArray(data?.covers)) {
        data.covers.forEach(OncallShiftCoverModelResponseTransformer);
    }
    if (data?.end_at) {
        data.end_at = new Date(data.end_at);
    }
    if (data?.roster) {
        OncallRosterModelResponseTransformer(data.roster);
    }
    if (data?.start_at) {
        data.start_at = new Date(data.start_at);
    }
    return data;
};

export const OncallShiftModelResponseTransformer: OncallShiftModelResponseTransformer = data => {
    if (data?.attributes) {
        OncallShiftAttributesModelResponseTransformer(data.attributes);
    }
    return data;
};

export const ListOncallShiftsResponseBodyModelResponseTransformer: ListOncallShiftsResponseBodyModelResponseTransformer = data => {
    if (Array.isArray(data?.data)) {
        data.data.forEach(OncallShiftModelResponseTransformer);
    }
    return data;
};

export const ListOncallShiftsResponseTransformer: ListOncallShiftsResponseTransformer = async (data) => {
    ListOncallShiftsResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetOncallShiftResponseTransformer = (data: any) => Promise<GetOncallShiftResponse>;

export type GetOncallShiftResponseBodyModelResponseTransformer = (data: any) => GetOncallShiftResponseBody;

export const GetOncallShiftResponseBodyModelResponseTransformer: GetOncallShiftResponseBodyModelResponseTransformer = data => {
    if (data?.data) {
        OncallShiftModelResponseTransformer(data.data);
    }
    return data;
};

export const GetOncallShiftResponseTransformer: GetOncallShiftResponseTransformer = async (data) => {
    GetOncallShiftResponseBodyModelResponseTransformer(data);
    return data;
};

export type ListOncallShiftAlertsResponseTransformer = (data: any) => Promise<ListOncallShiftAlertsResponse>;

export type ListOncallShiftAlertsResponseBodyModelResponseTransformer = (data: any) => ListOncallShiftAlertsResponseBody;

export type OncallAlertModelResponseTransformer = (data: any) => OncallAlert;

export type OncallAlertAttributesModelResponseTransformer = (data: any) => OncallAlertAttributes;

export const OncallAlertAttributesModelResponseTransformer: OncallAlertAttributesModelResponseTransformer = data => {
    if (data?.occurred_at) {
        data.occurred_at = new Date(data.occurred_at);
    }
    return data;
};

export const OncallAlertModelResponseTransformer: OncallAlertModelResponseTransformer = data => {
    if (data?.attributes) {
        OncallAlertAttributesModelResponseTransformer(data.attributes);
    }
    return data;
};

export const ListOncallShiftAlertsResponseBodyModelResponseTransformer: ListOncallShiftAlertsResponseBodyModelResponseTransformer = data => {
    if (Array.isArray(data?.data)) {
        data.data.forEach(OncallAlertModelResponseTransformer);
    }
    return data;
};

export const ListOncallShiftAlertsResponseTransformer: ListOncallShiftAlertsResponseTransformer = async (data) => {
    ListOncallShiftAlertsResponseBodyModelResponseTransformer(data);
    return data;
};

export type ListOncallShiftAnnotationsResponseTransformer = (data: any) => Promise<ListOncallShiftAnnotationsResponse>;

export type ListOncallShiftAnnotationsResponseBodyModelResponseTransformer = (data: any) => ListOncallShiftAnnotationsResponseBody;

export const ListOncallShiftAnnotationsResponseBodyModelResponseTransformer: ListOncallShiftAnnotationsResponseBodyModelResponseTransformer = data => {
    if (Array.isArray(data?.data)) {
        data.data.forEach(OncallShiftAnnotationModelResponseTransformer);
    }
    return data;
};

export const ListOncallShiftAnnotationsResponseTransformer: ListOncallShiftAnnotationsResponseTransformer = async (data) => {
    ListOncallShiftAnnotationsResponseBodyModelResponseTransformer(data);
    return data;
};

export type CreateOncallShiftAnnotationResponseTransformer = (data: any) => Promise<CreateOncallShiftAnnotationResponse>;

export type CreateOncallShiftAnnotationResponseBodyModelResponseTransformer = (data: any) => CreateOncallShiftAnnotationResponseBody;

export const CreateOncallShiftAnnotationResponseBodyModelResponseTransformer: CreateOncallShiftAnnotationResponseBodyModelResponseTransformer = data => {
    if (data?.data) {
        OncallShiftAnnotationModelResponseTransformer(data.data);
    }
    return data;
};

export const CreateOncallShiftAnnotationResponseTransformer: CreateOncallShiftAnnotationResponseTransformer = async (data) => {
    CreateOncallShiftAnnotationResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetOncallShiftHandoverResponseTransformer = (data: any) => Promise<GetOncallShiftHandoverResponse>;

export type GetOncallShiftHandoverResponseBodyModelResponseTransformer = (data: any) => GetOncallShiftHandoverResponseBody;

export type OncallShiftHandoverModelResponseTransformer = (data: any) => OncallShiftHandover;

export type OncallShiftHandoverAttributesModelResponseTransformer = (data: any) => OncallShiftHandoverAttributes;

export const OncallShiftHandoverAttributesModelResponseTransformer: OncallShiftHandoverAttributesModelResponseTransformer = data => {
    if (data?.created_at) {
        data.created_at = new Date(data.created_at);
    }
    if (data?.sent_at) {
        data.sent_at = new Date(data.sent_at);
    }
    if (data?.updated_at) {
        data.updated_at = new Date(data.updated_at);
    }
    return data;
};

export const OncallShiftHandoverModelResponseTransformer: OncallShiftHandoverModelResponseTransformer = data => {
    if (data?.attributes) {
        OncallShiftHandoverAttributesModelResponseTransformer(data.attributes);
    }
    return data;
};

export const GetOncallShiftHandoverResponseBodyModelResponseTransformer: GetOncallShiftHandoverResponseBodyModelResponseTransformer = data => {
    if (data?.data) {
        OncallShiftHandoverModelResponseTransformer(data.data);
    }
    return data;
};

export const GetOncallShiftHandoverResponseTransformer: GetOncallShiftHandoverResponseTransformer = async (data) => {
    GetOncallShiftHandoverResponseBodyModelResponseTransformer(data);
    return data;
};

export type SendOncallShiftHandoverResponseTransformer = (data: any) => Promise<SendOncallShiftHandoverResponse>;

export type SendOncallShiftHandoverResponseBodyModelResponseTransformer = (data: any) => SendOncallShiftHandoverResponseBody;

export const SendOncallShiftHandoverResponseBodyModelResponseTransformer: SendOncallShiftHandoverResponseBodyModelResponseTransformer = data => {
    if (data?.data) {
        OncallShiftHandoverModelResponseTransformer(data.data);
    }
    return data;
};

export const SendOncallShiftHandoverResponseTransformer: SendOncallShiftHandoverResponseTransformer = async (data) => {
    SendOncallShiftHandoverResponseBodyModelResponseTransformer(data);
    return data;
};

export type ListOncallShiftIncidentsResponseTransformer = (data: any) => Promise<ListOncallShiftIncidentsResponse>;

export type ListOncallShiftIncidentsResponseBodyModelResponseTransformer = (data: any) => ListOncallShiftIncidentsResponseBody;

export const ListOncallShiftIncidentsResponseBodyModelResponseTransformer: ListOncallShiftIncidentsResponseBodyModelResponseTransformer = data => {
    if (Array.isArray(data?.data)) {
        data.data.forEach(IncidentModelResponseTransformer);
    }
    return data;
};

export const ListOncallShiftIncidentsResponseTransformer: ListOncallShiftIncidentsResponseTransformer = async (data) => {
    ListOncallShiftIncidentsResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetNextOncallShiftResponseTransformer = (data: any) => Promise<GetNextOncallShiftResponse>;

export type GetNextOncallShiftResponseBodyModelResponseTransformer = (data: any) => GetNextOncallShiftResponseBody;

export const GetNextOncallShiftResponseBodyModelResponseTransformer: GetNextOncallShiftResponseBodyModelResponseTransformer = data => {
    if (data?.data) {
        OncallShiftModelResponseTransformer(data.data);
    }
    return data;
};

export const GetNextOncallShiftResponseTransformer: GetNextOncallShiftResponseTransformer = async (data) => {
    GetNextOncallShiftResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetUserOncallDetailsResponseTransformer = (data: any) => Promise<GetUserOncallDetailsResponse>;

export type GetUserOncallDetailsResponseBodyModelResponseTransformer = (data: any) => GetUserOncallDetailsResponseBody;

export type UserOncallDetailsModelResponseTransformer = (data: any) => UserOncallDetails;

export const UserOncallDetailsModelResponseTransformer: UserOncallDetailsModelResponseTransformer = data => {
    if (Array.isArray(data?.active_shifts)) {
        data.active_shifts.forEach(OncallShiftModelResponseTransformer);
    }
    if (Array.isArray(data?.past_shifts)) {
        data.past_shifts.forEach(OncallShiftModelResponseTransformer);
    }
    if (Array.isArray(data?.rosters)) {
        data.rosters.forEach(OncallRosterModelResponseTransformer);
    }
    if (Array.isArray(data?.upcoming_shifts)) {
        data.upcoming_shifts.forEach(OncallShiftModelResponseTransformer);
    }
    return data;
};

export const GetUserOncallDetailsResponseBodyModelResponseTransformer: GetUserOncallDetailsResponseBodyModelResponseTransformer = data => {
    if (data?.data) {
        UserOncallDetailsModelResponseTransformer(data.data);
    }
    return data;
};

export const GetUserOncallDetailsResponseTransformer: GetUserOncallDetailsResponseTransformer = async (data) => {
    GetUserOncallDetailsResponseBodyModelResponseTransformer(data);
    return data;
};

export type ListRetrospectiveDiscussionsResponseTransformer = (data: any) => Promise<ListRetrospectiveDiscussionsResponse>;

export type ListRetrospectiveDiscussionsResponseBodyModelResponseTransformer = (data: any) => ListRetrospectiveDiscussionsResponseBody;

export type RetrospectiveDiscussionModelResponseTransformer = (data: any) => RetrospectiveDiscussion;

export type RetrospectiveDiscussionAttributesModelResponseTransformer = (data: any) => RetrospectiveDiscussionAttributes;

export type RetrospectiveDiscussionReplyModelResponseTransformer = (data: any) => RetrospectiveDiscussionReply;

export type RetrospectiveDiscussionReplyAttributesModelResponseTransformer = (data: any) => RetrospectiveDiscussionReplyAttributes;

export const RetrospectiveDiscussionReplyAttributesModelResponseTransformer: RetrospectiveDiscussionReplyAttributesModelResponseTransformer = data => {
    if (Array.isArray(data?.replies)) {
        data.replies.forEach(RetrospectiveDiscussionReplyModelResponseTransformer);
    }
    return data;
};

export const RetrospectiveDiscussionReplyModelResponseTransformer: RetrospectiveDiscussionReplyModelResponseTransformer = data => {
    if (data?.attributes) {
        RetrospectiveDiscussionReplyAttributesModelResponseTransformer(data.attributes);
    }
    return data;
};

export const RetrospectiveDiscussionAttributesModelResponseTransformer: RetrospectiveDiscussionAttributesModelResponseTransformer = data => {
    if (Array.isArray(data?.replies)) {
        data.replies.forEach(RetrospectiveDiscussionReplyModelResponseTransformer);
    }
    return data;
};

export const RetrospectiveDiscussionModelResponseTransformer: RetrospectiveDiscussionModelResponseTransformer = data => {
    if (data?.attributes) {
        RetrospectiveDiscussionAttributesModelResponseTransformer(data.attributes);
    }
    return data;
};

export const ListRetrospectiveDiscussionsResponseBodyModelResponseTransformer: ListRetrospectiveDiscussionsResponseBodyModelResponseTransformer = data => {
    if (Array.isArray(data?.data)) {
        data.data.forEach(RetrospectiveDiscussionModelResponseTransformer);
    }
    return data;
};

export const ListRetrospectiveDiscussionsResponseTransformer: ListRetrospectiveDiscussionsResponseTransformer = async (data) => {
    ListRetrospectiveDiscussionsResponseBodyModelResponseTransformer(data);
    return data;
};

export type CreateRetrospectiveDiscussionResponseTransformer = (data: any) => Promise<CreateRetrospectiveDiscussionResponse>;

export type CreateRetrospectiveDiscussionResponseBodyModelResponseTransformer = (data: any) => CreateRetrospectiveDiscussionResponseBody;

export const CreateRetrospectiveDiscussionResponseBodyModelResponseTransformer: CreateRetrospectiveDiscussionResponseBodyModelResponseTransformer = data => {
    if (data?.data) {
        RetrospectiveDiscussionModelResponseTransformer(data.data);
    }
    return data;
};

export const CreateRetrospectiveDiscussionResponseTransformer: CreateRetrospectiveDiscussionResponseTransformer = async (data) => {
    CreateRetrospectiveDiscussionResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetRetrospectiveDiscussionResponseTransformer = (data: any) => Promise<GetRetrospectiveDiscussionResponse>;

export type GetRetrospectiveDiscussionResponseBodyModelResponseTransformer = (data: any) => GetRetrospectiveDiscussionResponseBody;

export const GetRetrospectiveDiscussionResponseBodyModelResponseTransformer: GetRetrospectiveDiscussionResponseBodyModelResponseTransformer = data => {
    if (data?.data) {
        RetrospectiveDiscussionModelResponseTransformer(data.data);
    }
    return data;
};

export const GetRetrospectiveDiscussionResponseTransformer: GetRetrospectiveDiscussionResponseTransformer = async (data) => {
    GetRetrospectiveDiscussionResponseBodyModelResponseTransformer(data);
    return data;
};

export type AddRetrospectiveDiscussionReplyResponseTransformer = (data: any) => Promise<AddRetrospectiveDiscussionReplyResponse>;

export type AddRetrospectiveDiscussionReplyResponseBodyModelResponseTransformer = (data: any) => AddRetrospectiveDiscussionReplyResponseBody;

export const AddRetrospectiveDiscussionReplyResponseBodyModelResponseTransformer: AddRetrospectiveDiscussionReplyResponseBodyModelResponseTransformer = data => {
    if (data?.data) {
        RetrospectiveDiscussionModelResponseTransformer(data.data);
    }
    return data;
};

export const AddRetrospectiveDiscussionReplyResponseTransformer: AddRetrospectiveDiscussionReplyResponseTransformer = async (data) => {
    AddRetrospectiveDiscussionReplyResponseBodyModelResponseTransformer(data);
    return data;
};

export type UpdateRetrospectiveDiscussionResponseTransformer = (data: any) => Promise<UpdateRetrospectiveDiscussionResponse>;

export type UpdateRetrospectiveDiscussionResponseBodyModelResponseTransformer = (data: any) => UpdateRetrospectiveDiscussionResponseBody;

export const UpdateRetrospectiveDiscussionResponseBodyModelResponseTransformer: UpdateRetrospectiveDiscussionResponseBodyModelResponseTransformer = data => {
    if (data?.data) {
        RetrospectiveDiscussionModelResponseTransformer(data.data);
    }
    return data;
};

export const UpdateRetrospectiveDiscussionResponseTransformer: UpdateRetrospectiveDiscussionResponseTransformer = async (data) => {
    UpdateRetrospectiveDiscussionResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetCurrentUserSessionResponseTransformer = (data: any) => Promise<GetCurrentUserSessionResponse>;

export type GetUserSessionResponseBodyModelResponseTransformer = (data: any) => GetUserSessionResponseBody;

export type UserSessionModelResponseTransformer = (data: any) => UserSession;

export const UserSessionModelResponseTransformer: UserSessionModelResponseTransformer = data => {
    if (data?.expires_at) {
        data.expires_at = new Date(data.expires_at);
    }
    return data;
};

export const GetUserSessionResponseBodyModelResponseTransformer: GetUserSessionResponseBodyModelResponseTransformer = data => {
    if (data?.data) {
        UserSessionModelResponseTransformer(data.data);
    }
    return data;
};

export const GetCurrentUserSessionResponseTransformer: GetCurrentUserSessionResponseTransformer = async (data) => {
    GetUserSessionResponseBodyModelResponseTransformer(data);
    return data;
};

export type ListUserAssignmentsResponseTransformer = (data: any) => Promise<ListUserAssignmentsResponse>;

export type ListUserAssignmentsResponseBodyModelResponseTransformer = (data: any) => ListUserAssignmentsResponseBody;

export type UserAssignmentModelResponseTransformer = (data: any) => UserAssignment;

export const UserAssignmentModelResponseTransformer: UserAssignmentModelResponseTransformer = data => {
    if (data?.deadline) {
        data.deadline = new Date(data.deadline);
    }
    return data;
};

export const ListUserAssignmentsResponseBodyModelResponseTransformer: ListUserAssignmentsResponseBodyModelResponseTransformer = data => {
    if (Array.isArray(data?.data)) {
        data.data.forEach(UserAssignmentModelResponseTransformer);
    }
    return data;
};

export const ListUserAssignmentsResponseTransformer: ListUserAssignmentsResponseTransformer = async (data) => {
    ListUserAssignmentsResponseBodyModelResponseTransformer(data);
    return data;
};